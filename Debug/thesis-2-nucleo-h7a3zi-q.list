
thesis-2-nucleo-h7a3zi-q.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaac  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800ad60  0800ad60  0001ad60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aee0  0800aee0  0001aee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aee8  0800aee8  0001aee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aeec  0800aeec  0001aeec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800aef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007e8  24000074  0800af64  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400085c  0800af64  0002085c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ee38  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ba2  00000000  00000000  0003eeda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001760  00000000  00000000  00042a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000015b8  00000000  00000000  000441e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000348f2  00000000  00000000  00045798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021090  00000000  00000000  0007a08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015574b  00000000  00000000  0009b11a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f0865  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000065c4  00000000  00000000  001f08b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800ad44 	.word	0x0800ad44

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800ad44 	.word	0x0800ad44

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b974 	b.w	8000968 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	4604      	mov	r4, r0
 80006a0:	468e      	mov	lr, r1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d14d      	bne.n	8000742 <__udivmoddi4+0xaa>
 80006a6:	428a      	cmp	r2, r1
 80006a8:	4694      	mov	ip, r2
 80006aa:	d969      	bls.n	8000780 <__udivmoddi4+0xe8>
 80006ac:	fab2 f282 	clz	r2, r2
 80006b0:	b152      	cbz	r2, 80006c8 <__udivmoddi4+0x30>
 80006b2:	fa01 f302 	lsl.w	r3, r1, r2
 80006b6:	f1c2 0120 	rsb	r1, r2, #32
 80006ba:	fa20 f101 	lsr.w	r1, r0, r1
 80006be:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c2:	ea41 0e03 	orr.w	lr, r1, r3
 80006c6:	4094      	lsls	r4, r2
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	0c21      	lsrs	r1, r4, #16
 80006ce:	fbbe f6f8 	udiv	r6, lr, r8
 80006d2:	fa1f f78c 	uxth.w	r7, ip
 80006d6:	fb08 e316 	mls	r3, r8, r6, lr
 80006da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006de:	fb06 f107 	mul.w	r1, r6, r7
 80006e2:	4299      	cmp	r1, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x64>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ee:	f080 811f 	bcs.w	8000930 <__udivmoddi4+0x298>
 80006f2:	4299      	cmp	r1, r3
 80006f4:	f240 811c 	bls.w	8000930 <__udivmoddi4+0x298>
 80006f8:	3e02      	subs	r6, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a5b      	subs	r3, r3, r1
 80006fe:	b2a4      	uxth	r4, r4
 8000700:	fbb3 f0f8 	udiv	r0, r3, r8
 8000704:	fb08 3310 	mls	r3, r8, r0, r3
 8000708:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800070c:	fb00 f707 	mul.w	r7, r0, r7
 8000710:	42a7      	cmp	r7, r4
 8000712:	d90a      	bls.n	800072a <__udivmoddi4+0x92>
 8000714:	eb1c 0404 	adds.w	r4, ip, r4
 8000718:	f100 33ff 	add.w	r3, r0, #4294967295
 800071c:	f080 810a 	bcs.w	8000934 <__udivmoddi4+0x29c>
 8000720:	42a7      	cmp	r7, r4
 8000722:	f240 8107 	bls.w	8000934 <__udivmoddi4+0x29c>
 8000726:	4464      	add	r4, ip
 8000728:	3802      	subs	r0, #2
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	1be4      	subs	r4, r4, r7
 8000730:	2600      	movs	r6, #0
 8000732:	b11d      	cbz	r5, 800073c <__udivmoddi4+0xa4>
 8000734:	40d4      	lsrs	r4, r2
 8000736:	2300      	movs	r3, #0
 8000738:	e9c5 4300 	strd	r4, r3, [r5]
 800073c:	4631      	mov	r1, r6
 800073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000742:	428b      	cmp	r3, r1
 8000744:	d909      	bls.n	800075a <__udivmoddi4+0xc2>
 8000746:	2d00      	cmp	r5, #0
 8000748:	f000 80ef 	beq.w	800092a <__udivmoddi4+0x292>
 800074c:	2600      	movs	r6, #0
 800074e:	e9c5 0100 	strd	r0, r1, [r5]
 8000752:	4630      	mov	r0, r6
 8000754:	4631      	mov	r1, r6
 8000756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075a:	fab3 f683 	clz	r6, r3
 800075e:	2e00      	cmp	r6, #0
 8000760:	d14a      	bne.n	80007f8 <__udivmoddi4+0x160>
 8000762:	428b      	cmp	r3, r1
 8000764:	d302      	bcc.n	800076c <__udivmoddi4+0xd4>
 8000766:	4282      	cmp	r2, r0
 8000768:	f200 80f9 	bhi.w	800095e <__udivmoddi4+0x2c6>
 800076c:	1a84      	subs	r4, r0, r2
 800076e:	eb61 0303 	sbc.w	r3, r1, r3
 8000772:	2001      	movs	r0, #1
 8000774:	469e      	mov	lr, r3
 8000776:	2d00      	cmp	r5, #0
 8000778:	d0e0      	beq.n	800073c <__udivmoddi4+0xa4>
 800077a:	e9c5 4e00 	strd	r4, lr, [r5]
 800077e:	e7dd      	b.n	800073c <__udivmoddi4+0xa4>
 8000780:	b902      	cbnz	r2, 8000784 <__udivmoddi4+0xec>
 8000782:	deff      	udf	#255	; 0xff
 8000784:	fab2 f282 	clz	r2, r2
 8000788:	2a00      	cmp	r2, #0
 800078a:	f040 8092 	bne.w	80008b2 <__udivmoddi4+0x21a>
 800078e:	eba1 010c 	sub.w	r1, r1, ip
 8000792:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000796:	fa1f fe8c 	uxth.w	lr, ip
 800079a:	2601      	movs	r6, #1
 800079c:	0c20      	lsrs	r0, r4, #16
 800079e:	fbb1 f3f7 	udiv	r3, r1, r7
 80007a2:	fb07 1113 	mls	r1, r7, r3, r1
 80007a6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007aa:	fb0e f003 	mul.w	r0, lr, r3
 80007ae:	4288      	cmp	r0, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0x12c>
 80007b2:	eb1c 0101 	adds.w	r1, ip, r1
 80007b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x12a>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f200 80cb 	bhi.w	8000958 <__udivmoddi4+0x2c0>
 80007c2:	4643      	mov	r3, r8
 80007c4:	1a09      	subs	r1, r1, r0
 80007c6:	b2a4      	uxth	r4, r4
 80007c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007cc:	fb07 1110 	mls	r1, r7, r0, r1
 80007d0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007d4:	fb0e fe00 	mul.w	lr, lr, r0
 80007d8:	45a6      	cmp	lr, r4
 80007da:	d908      	bls.n	80007ee <__udivmoddi4+0x156>
 80007dc:	eb1c 0404 	adds.w	r4, ip, r4
 80007e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007e4:	d202      	bcs.n	80007ec <__udivmoddi4+0x154>
 80007e6:	45a6      	cmp	lr, r4
 80007e8:	f200 80bb 	bhi.w	8000962 <__udivmoddi4+0x2ca>
 80007ec:	4608      	mov	r0, r1
 80007ee:	eba4 040e 	sub.w	r4, r4, lr
 80007f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007f6:	e79c      	b.n	8000732 <__udivmoddi4+0x9a>
 80007f8:	f1c6 0720 	rsb	r7, r6, #32
 80007fc:	40b3      	lsls	r3, r6
 80007fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000802:	ea4c 0c03 	orr.w	ip, ip, r3
 8000806:	fa20 f407 	lsr.w	r4, r0, r7
 800080a:	fa01 f306 	lsl.w	r3, r1, r6
 800080e:	431c      	orrs	r4, r3
 8000810:	40f9      	lsrs	r1, r7
 8000812:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000816:	fa00 f306 	lsl.w	r3, r0, r6
 800081a:	fbb1 f8f9 	udiv	r8, r1, r9
 800081e:	0c20      	lsrs	r0, r4, #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fb09 1118 	mls	r1, r9, r8, r1
 8000828:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800082c:	fb08 f00e 	mul.w	r0, r8, lr
 8000830:	4288      	cmp	r0, r1
 8000832:	fa02 f206 	lsl.w	r2, r2, r6
 8000836:	d90b      	bls.n	8000850 <__udivmoddi4+0x1b8>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000840:	f080 8088 	bcs.w	8000954 <__udivmoddi4+0x2bc>
 8000844:	4288      	cmp	r0, r1
 8000846:	f240 8085 	bls.w	8000954 <__udivmoddi4+0x2bc>
 800084a:	f1a8 0802 	sub.w	r8, r8, #2
 800084e:	4461      	add	r1, ip
 8000850:	1a09      	subs	r1, r1, r0
 8000852:	b2a4      	uxth	r4, r4
 8000854:	fbb1 f0f9 	udiv	r0, r1, r9
 8000858:	fb09 1110 	mls	r1, r9, r0, r1
 800085c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000860:	fb00 fe0e 	mul.w	lr, r0, lr
 8000864:	458e      	cmp	lr, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x1e2>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000870:	d26c      	bcs.n	800094c <__udivmoddi4+0x2b4>
 8000872:	458e      	cmp	lr, r1
 8000874:	d96a      	bls.n	800094c <__udivmoddi4+0x2b4>
 8000876:	3802      	subs	r0, #2
 8000878:	4461      	add	r1, ip
 800087a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800087e:	fba0 9402 	umull	r9, r4, r0, r2
 8000882:	eba1 010e 	sub.w	r1, r1, lr
 8000886:	42a1      	cmp	r1, r4
 8000888:	46c8      	mov	r8, r9
 800088a:	46a6      	mov	lr, r4
 800088c:	d356      	bcc.n	800093c <__udivmoddi4+0x2a4>
 800088e:	d053      	beq.n	8000938 <__udivmoddi4+0x2a0>
 8000890:	b15d      	cbz	r5, 80008aa <__udivmoddi4+0x212>
 8000892:	ebb3 0208 	subs.w	r2, r3, r8
 8000896:	eb61 010e 	sbc.w	r1, r1, lr
 800089a:	fa01 f707 	lsl.w	r7, r1, r7
 800089e:	fa22 f306 	lsr.w	r3, r2, r6
 80008a2:	40f1      	lsrs	r1, r6
 80008a4:	431f      	orrs	r7, r3
 80008a6:	e9c5 7100 	strd	r7, r1, [r5]
 80008aa:	2600      	movs	r6, #0
 80008ac:	4631      	mov	r1, r6
 80008ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b2:	f1c2 0320 	rsb	r3, r2, #32
 80008b6:	40d8      	lsrs	r0, r3
 80008b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008bc:	fa21 f303 	lsr.w	r3, r1, r3
 80008c0:	4091      	lsls	r1, r2
 80008c2:	4301      	orrs	r1, r0
 80008c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c8:	fa1f fe8c 	uxth.w	lr, ip
 80008cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80008d0:	fb07 3610 	mls	r6, r7, r0, r3
 80008d4:	0c0b      	lsrs	r3, r1, #16
 80008d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008da:	fb00 f60e 	mul.w	r6, r0, lr
 80008de:	429e      	cmp	r6, r3
 80008e0:	fa04 f402 	lsl.w	r4, r4, r2
 80008e4:	d908      	bls.n	80008f8 <__udivmoddi4+0x260>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ee:	d22f      	bcs.n	8000950 <__udivmoddi4+0x2b8>
 80008f0:	429e      	cmp	r6, r3
 80008f2:	d92d      	bls.n	8000950 <__udivmoddi4+0x2b8>
 80008f4:	3802      	subs	r0, #2
 80008f6:	4463      	add	r3, ip
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	b289      	uxth	r1, r1
 80008fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000900:	fb07 3316 	mls	r3, r7, r6, r3
 8000904:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000908:	fb06 f30e 	mul.w	r3, r6, lr
 800090c:	428b      	cmp	r3, r1
 800090e:	d908      	bls.n	8000922 <__udivmoddi4+0x28a>
 8000910:	eb1c 0101 	adds.w	r1, ip, r1
 8000914:	f106 38ff 	add.w	r8, r6, #4294967295
 8000918:	d216      	bcs.n	8000948 <__udivmoddi4+0x2b0>
 800091a:	428b      	cmp	r3, r1
 800091c:	d914      	bls.n	8000948 <__udivmoddi4+0x2b0>
 800091e:	3e02      	subs	r6, #2
 8000920:	4461      	add	r1, ip
 8000922:	1ac9      	subs	r1, r1, r3
 8000924:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000928:	e738      	b.n	800079c <__udivmoddi4+0x104>
 800092a:	462e      	mov	r6, r5
 800092c:	4628      	mov	r0, r5
 800092e:	e705      	b.n	800073c <__udivmoddi4+0xa4>
 8000930:	4606      	mov	r6, r0
 8000932:	e6e3      	b.n	80006fc <__udivmoddi4+0x64>
 8000934:	4618      	mov	r0, r3
 8000936:	e6f8      	b.n	800072a <__udivmoddi4+0x92>
 8000938:	454b      	cmp	r3, r9
 800093a:	d2a9      	bcs.n	8000890 <__udivmoddi4+0x1f8>
 800093c:	ebb9 0802 	subs.w	r8, r9, r2
 8000940:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000944:	3801      	subs	r0, #1
 8000946:	e7a3      	b.n	8000890 <__udivmoddi4+0x1f8>
 8000948:	4646      	mov	r6, r8
 800094a:	e7ea      	b.n	8000922 <__udivmoddi4+0x28a>
 800094c:	4620      	mov	r0, r4
 800094e:	e794      	b.n	800087a <__udivmoddi4+0x1e2>
 8000950:	4640      	mov	r0, r8
 8000952:	e7d1      	b.n	80008f8 <__udivmoddi4+0x260>
 8000954:	46d0      	mov	r8, sl
 8000956:	e77b      	b.n	8000850 <__udivmoddi4+0x1b8>
 8000958:	3b02      	subs	r3, #2
 800095a:	4461      	add	r1, ip
 800095c:	e732      	b.n	80007c4 <__udivmoddi4+0x12c>
 800095e:	4630      	mov	r0, r6
 8000960:	e709      	b.n	8000776 <__udivmoddi4+0xde>
 8000962:	4464      	add	r4, ip
 8000964:	3802      	subs	r0, #2
 8000966:	e742      	b.n	80007ee <__udivmoddi4+0x156>

08000968 <__aeabi_idiv0>:
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <Delay_Init>:
#define SAMPLE_RATE 96000
#define PI 3.14159265359

DelayEffect delay;

void Delay_Init() {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	delay.delayBufferLength = 2*SAMPLE_RATE;
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <Delay_Init+0x90>)
 8000972:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <Delay_Init+0x94>)
 8000974:	611a      	str	r2, [r3, #16]
	delay.delayLength = 0.75;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <Delay_Init+0x90>)
 8000978:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800097c:	60da      	str	r2, [r3, #12]
	delay.delayWritePtr = 0;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <Delay_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
	delay.delayReadPtr = (int)(delay.delayWritePtr - (delay.delayLength * SAMPLE_RATE) + delay.delayBufferLength) % delay.delayBufferLength;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <Delay_Init+0x90>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	ee07 3a90 	vmov	s15, r3
 800098c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <Delay_Init+0x90>)
 8000992:	edd3 7a03 	vldr	s15, [r3, #12]
 8000996:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000a04 <Delay_Init+0x98>
 800099a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800099e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <Delay_Init+0x90>)
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	ee07 3a90 	vmov	s15, r3
 80009aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b6:	ee17 1a90 	vmov	r1, s15
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <Delay_Init+0x90>)
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	fb91 f2f3 	sdiv	r2, r1, r3
 80009c2:	fb02 f303 	mul.w	r3, r2, r3
 80009c6:	1acb      	subs	r3, r1, r3
 80009c8:	4a0c      	ldr	r2, [pc, #48]	; (80009fc <Delay_Init+0x90>)
 80009ca:	6093      	str	r3, [r2, #8]
	delay.delayData = (uint16_t*) malloc(delay.delayBufferLength * sizeof(uint16_t));
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <Delay_Init+0x90>)
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4618      	mov	r0, r3
 80009d4:	f00a f816 	bl	800aa04 <malloc>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <Delay_Init+0x90>)
 80009de:	601a      	str	r2, [r3, #0]
	delay.feedback = 0.5;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <Delay_Init+0x90>)
 80009e2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80009e6:	615a      	str	r2, [r3, #20]
	delay.dryMix = 1;
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <Delay_Init+0x90>)
 80009ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009ee:	619a      	str	r2, [r3, #24]
	delay.wetMix = 0.85;
 80009f0:	4b02      	ldr	r3, [pc, #8]	; (80009fc <Delay_Init+0x90>)
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <Delay_Init+0x9c>)
 80009f4:	61da      	str	r2, [r3, #28]
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	24000090 	.word	0x24000090
 8000a00:	0002ee00 	.word	0x0002ee00
 8000a04:	47bb8000 	.word	0x47bb8000
 8000a08:	3f59999a 	.word	0x3f59999a
 8000a0c:	00000000 	.word	0x00000000

08000a10 <lfo>:
#define PI 3.14159265359

TremoloEffect tremolo;

float lfo(float phase, int waveform)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a1a:	6038      	str	r0, [r7, #0]
	switch(waveform) {
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d04a      	beq.n	8000ab8 <lfo+0xa8>
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	f300 8082 	bgt.w	8000b2e <lfo+0x11e>
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <lfo+0x28>
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d031      	beq.n	8000a9a <lfo+0x8a>
 8000a36:	e07a      	b.n	8000b2e <lfo+0x11e>
		case Triangle:
			if(phase < 0.25f)
 8000a38:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a3c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a48:	d508      	bpl.n	8000a5c <lfo+0x4c>
				return 0.5f + 2.0f*phase;
 8000a4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000a56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a5a:	e080      	b.n	8000b5e <lfo+0x14e>
			else if(phase < 0.75f)
 8000a5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a60:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8000a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a6c:	d50c      	bpl.n	8000a88 <lfo+0x78>
				return 1.0f - 2.0f*(phase - 0.25f);
 8000a6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a72:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000a76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a86:	e06a      	b.n	8000b5e <lfo+0x14e>
			else
				return 2.0f*(phase-0.75f);
 8000a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a8c:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8000a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a94:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a98:	e061      	b.n	8000b5e <lfo+0x14e>
		case Square:
			if(phase < 0.5f)
 8000a9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aaa:	d502      	bpl.n	8000ab2 <lfo+0xa2>
				return 1.0f;
 8000aac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000ab0:	e055      	b.n	8000b5e <lfo+0x14e>
			else
				return 0.0f;
 8000ab2:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8000b70 <lfo+0x160>
 8000ab6:	e052      	b.n	8000b5e <lfo+0x14e>
		case SquareSlopedEdges:
			if(phase < 0.48f)
 8000ab8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000abc:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000b74 <lfo+0x164>
 8000ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac8:	d502      	bpl.n	8000ad0 <lfo+0xc0>
				return 1.0f;
 8000aca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000ace:	e046      	b.n	8000b5e <lfo+0x14e>
			else if(phase < 0.5f)
 8000ad0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ad4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae0:	d50e      	bpl.n	8000b00 <lfo+0xf0>
				return 1.0f - 50.0f*(phase - 0.48f);
 8000ae2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ae6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000b74 <lfo+0x164>
 8000aea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000aee:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000b78 <lfo+0x168>
 8000af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000afe:	e02e      	b.n	8000b5e <lfo+0x14e>
			else if(phase < 0.98f)
 8000b00:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b04:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000b7c <lfo+0x16c>
 8000b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b10:	d502      	bpl.n	8000b18 <lfo+0x108>
				return 0.0f;
 8000b12:	eddf 7a17 	vldr	s15, [pc, #92]	; 8000b70 <lfo+0x160>
 8000b16:	e022      	b.n	8000b5e <lfo+0x14e>
			else
				return 50.0f*(phase - 0.98f);
 8000b18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b1c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000b7c <lfo+0x16c>
 8000b20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b24:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000b78 <lfo+0x168>
 8000b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2c:	e017      	b.n	8000b5e <lfo+0x14e>
		case Sine:
		default:
			return 0.5f + 0.5f*sinf(2.0 * PI * phase);
 8000b2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b36:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000b68 <lfo+0x158>
 8000b3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b42:	eeb0 0a67 	vmov.f32	s0, s15
 8000b46:	f00a f84b 	bl	800abe0 <sinf>
 8000b4a:	eef0 7a40 	vmov.f32	s15, s0
 8000b4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000b5a:	ee77 7a87 	vadd.f32	s15, s15, s14
		}
}
 8000b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	54442eea 	.word	0x54442eea
 8000b6c:	401921fb 	.word	0x401921fb
 8000b70:	00000000 	.word	0x00000000
 8000b74:	3ef5c28f 	.word	0x3ef5c28f
 8000b78:	42480000 	.word	0x42480000
 8000b7c:	3f7ae148 	.word	0x3f7ae148

08000b80 <Tremolo_Init>:

void Tremolo_Init() {
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	tremolo.phase = 0;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <Tremolo_Init+0x2c>)
 8000b86:	f04f 0200 	mov.w	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
	tremolo.inverseSampleRate = 1.0f/SAMPLE_RATE;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <Tremolo_Init+0x2c>)
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <Tremolo_Init+0x30>)
 8000b90:	605a      	str	r2, [r3, #4]
	tremolo.depth = 0.75;
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <Tremolo_Init+0x2c>)
 8000b94:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8000b98:	609a      	str	r2, [r3, #8]
	tremolo.frequency = 1.25;
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <Tremolo_Init+0x2c>)
 8000b9c:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <Tremolo_Init+0x34>)
 8000b9e:	60da      	str	r2, [r3, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	240000b0 	.word	0x240000b0
 8000bb0:	372ec33e 	.word	0x372ec33e
 8000bb4:	3fa00000 	.word	0x3fa00000

08000bb8 <calculateTremolo>:

uint16_t calculateTremolo(uint16_t in, float volume) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	ed2d 8b02 	vpush	{d8}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	ed87 0a00 	vstr	s0, [r7]
 8000bc8:	80fb      	strh	r3, [r7, #6]
	uint16_t out;
	out = volume * in * (1.0f - tremolo.depth * lfo(tremolo.phase, Sine));
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	ee07 3a90 	vmov	s15, r3
 8000bd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bd4:	edd7 7a00 	vldr	s15, [r7]
 8000bd8:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <calculateTremolo+0xb0>)
 8000bde:	edd3 8a02 	vldr	s17, [r3, #8]
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <calculateTremolo+0xb0>)
 8000be4:	edd3 7a00 	vldr	s15, [r3]
 8000be8:	2003      	movs	r0, #3
 8000bea:	eeb0 0a67 	vmov.f32	s0, s15
 8000bee:	f7ff ff0f 	bl	8000a10 <lfo>
 8000bf2:	eef0 7a40 	vmov.f32	s15, s0
 8000bf6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000bfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c02:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c0a:	ee17 3a90 	vmov	r3, s15
 8000c0e:	81fb      	strh	r3, [r7, #14]

	tremolo.phase += tremolo.frequency*tremolo.inverseSampleRate;
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <calculateTremolo+0xb0>)
 8000c12:	ed93 7a00 	vldr	s14, [r3]
 8000c16:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <calculateTremolo+0xb0>)
 8000c18:	edd3 6a03 	vldr	s13, [r3, #12]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <calculateTremolo+0xb0>)
 8000c1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <calculateTremolo+0xb0>)
 8000c2c:	edc3 7a00 	vstr	s15, [r3]
	if(tremolo.phase >= 1.0)
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <calculateTremolo+0xb0>)
 8000c32:	edd3 7a00 	vldr	s15, [r3]
 8000c36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c42:	db09      	blt.n	8000c58 <calculateTremolo+0xa0>
		tremolo.phase -= 1.0;
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <calculateTremolo+0xb0>)
 8000c46:	edd3 7a00 	vldr	s15, [r3]
 8000c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <calculateTremolo+0xb0>)
 8000c54:	edc3 7a00 	vstr	s15, [r3]

	return out;
 8000c58:	89fb      	ldrh	r3, [r7, #14]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	ecbd 8b02 	vpop	{d8}
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	240000b0 	.word	0x240000b0

08000c6c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7e:	463b      	mov	r3, r7
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	615a      	str	r2, [r3, #20]
 8000c8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c90:	4b30      	ldr	r3, [pc, #192]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000c92:	4a31      	ldr	r2, [pc, #196]	; (8000d58 <MX_ADC1_Init+0xec>)
 8000c94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c96:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c9c:	4b2d      	ldr	r3, [pc, #180]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000c9e:	2208      	movs	r2, #8
 8000ca0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca2:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000caa:	2204      	movs	r2, #4
 8000cac:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cae:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cb4:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000cba:	4b26      	ldr	r3, [pc, #152]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc0:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000cc6:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000cc8:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cce:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cd4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000cd8:	2203      	movs	r2, #3
 8000cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cf0:	4818      	ldr	r0, [pc, #96]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000cf2:	f001 fa13 	bl	800211c <HAL_ADC_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000cfc:	f000 fcb2 	bl	8001664 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4812      	ldr	r0, [pc, #72]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000d0c:	f002 f906 	bl	8002f1c <HAL_ADCEx_MultiModeConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d16:	f000 fca5 	bl	8001664 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_ADC1_Init+0xf0>)
 8000d1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d1e:	2306      	movs	r3, #6
 8000d20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d26:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d2a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d38:	463b      	mov	r3, r7
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_ADC1_Init+0xe8>)
 8000d3e:	f001 fc05 	bl	800254c <HAL_ADC_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000d48:	f000 fc8c 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	3728      	adds	r7, #40	; 0x28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	240000c0 	.word	0x240000c0
 8000d58:	40022000 	.word	0x40022000
 8000d5c:	08600004 	.word	0x08600004

08000d60 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	615a      	str	r2, [r3, #20]
 8000d76:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d78:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000d7a:	4a2b      	ldr	r2, [pc, #172]	; (8000e28 <MX_ADC2_Init+0xc8>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d7e:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000d86:	2208      	movs	r2, #8
 8000d88:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000d92:	2204      	movs	r2, #4
 8000d94:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d96:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000db0:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000db4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dd8:	4812      	ldr	r0, [pc, #72]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000dda:	f001 f99f 	bl	800211c <HAL_ADC_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000de4:	f000 fc3e 	bl	8001664 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_ADC2_Init+0xcc>)
 8000dea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dec:	2306      	movs	r3, #6
 8000dee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000df4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000df8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4806      	ldr	r0, [pc, #24]	; (8000e24 <MX_ADC2_Init+0xc4>)
 8000e0c:	f001 fb9e 	bl	800254c <HAL_ADC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000e16:	f000 fc25 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	3720      	adds	r7, #32
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	24000124 	.word	0x24000124
 8000e28:	40022100 	.word	0x40022100
 8000e2c:	19200040 	.word	0x19200040

08000e30 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a6a      	ldr	r2, [pc, #424]	; (8000ff8 <HAL_ADC_MspInit+0x1c8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d165      	bne.n	8000f1e <HAL_ADC_MspInit+0xee>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e52:	4b6a      	ldr	r3, [pc, #424]	; (8000ffc <HAL_ADC_MspInit+0x1cc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	4a68      	ldr	r2, [pc, #416]	; (8000ffc <HAL_ADC_MspInit+0x1cc>)
 8000e5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e5c:	4b67      	ldr	r3, [pc, #412]	; (8000ffc <HAL_ADC_MspInit+0x1cc>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d10e      	bne.n	8000e82 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e64:	4b66      	ldr	r3, [pc, #408]	; (8001000 <HAL_ADC_MspInit+0x1d0>)
 8000e66:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e6a:	4a65      	ldr	r2, [pc, #404]	; (8001000 <HAL_ADC_MspInit+0x1d0>)
 8000e6c:	f043 0320 	orr.w	r3, r3, #32
 8000e70:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000e74:	4b62      	ldr	r3, [pc, #392]	; (8001000 <HAL_ADC_MspInit+0x1d0>)
 8000e76:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e7a:	f003 0320 	and.w	r3, r3, #32
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e82:	4b5f      	ldr	r3, [pc, #380]	; (8001000 <HAL_ADC_MspInit+0x1d0>)
 8000e84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e88:	4a5d      	ldr	r2, [pc, #372]	; (8001000 <HAL_ADC_MspInit+0x1d0>)
 8000e8a:	f043 0320 	orr.w	r3, r3, #32
 8000e8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e92:	4b5b      	ldr	r3, [pc, #364]	; (8001000 <HAL_ADC_MspInit+0x1d0>)
 8000e94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e98:	f003 0320 	and.w	r3, r3, #32
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ea0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4853      	ldr	r0, [pc, #332]	; (8001004 <HAL_ADC_MspInit+0x1d4>)
 8000eb6:	f004 fe1f 	bl	8005af8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000eba:	4b53      	ldr	r3, [pc, #332]	; (8001008 <HAL_ADC_MspInit+0x1d8>)
 8000ebc:	4a53      	ldr	r2, [pc, #332]	; (800100c <HAL_ADC_MspInit+0x1dc>)
 8000ebe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ec0:	4b51      	ldr	r3, [pc, #324]	; (8001008 <HAL_ADC_MspInit+0x1d8>)
 8000ec2:	2209      	movs	r2, #9
 8000ec4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec6:	4b50      	ldr	r3, [pc, #320]	; (8001008 <HAL_ADC_MspInit+0x1d8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ecc:	4b4e      	ldr	r3, [pc, #312]	; (8001008 <HAL_ADC_MspInit+0x1d8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ed2:	4b4d      	ldr	r3, [pc, #308]	; (8001008 <HAL_ADC_MspInit+0x1d8>)
 8000ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eda:	4b4b      	ldr	r3, [pc, #300]	; (8001008 <HAL_ADC_MspInit+0x1d8>)
 8000edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ee0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ee2:	4b49      	ldr	r3, [pc, #292]	; (8001008 <HAL_ADC_MspInit+0x1d8>)
 8000ee4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eea:	4b47      	ldr	r3, [pc, #284]	; (8001008 <HAL_ADC_MspInit+0x1d8>)
 8000eec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000ef2:	4b45      	ldr	r3, [pc, #276]	; (8001008 <HAL_ADC_MspInit+0x1d8>)
 8000ef4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ef8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000efa:	4b43      	ldr	r3, [pc, #268]	; (8001008 <HAL_ADC_MspInit+0x1d8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f00:	4841      	ldr	r0, [pc, #260]	; (8001008 <HAL_ADC_MspInit+0x1d8>)
 8000f02:	f002 fc7d 	bl	8003800 <HAL_DMA_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8000f0c:	f000 fbaa 	bl	8001664 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a3d      	ldr	r2, [pc, #244]	; (8001008 <HAL_ADC_MspInit+0x1d8>)
 8000f14:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f16:	4a3c      	ldr	r2, [pc, #240]	; (8001008 <HAL_ADC_MspInit+0x1d8>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000f1c:	e068      	b.n	8000ff0 <HAL_ADC_MspInit+0x1c0>
  else if(adcHandle->Instance==ADC2)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a3b      	ldr	r2, [pc, #236]	; (8001010 <HAL_ADC_MspInit+0x1e0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d163      	bne.n	8000ff0 <HAL_ADC_MspInit+0x1c0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f28:	4b34      	ldr	r3, [pc, #208]	; (8000ffc <HAL_ADC_MspInit+0x1cc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	4a33      	ldr	r2, [pc, #204]	; (8000ffc <HAL_ADC_MspInit+0x1cc>)
 8000f30:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f32:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <HAL_ADC_MspInit+0x1cc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d10e      	bne.n	8000f58 <HAL_ADC_MspInit+0x128>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f3a:	4b31      	ldr	r3, [pc, #196]	; (8001000 <HAL_ADC_MspInit+0x1d0>)
 8000f3c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000f40:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <HAL_ADC_MspInit+0x1d0>)
 8000f42:	f043 0320 	orr.w	r3, r3, #32
 8000f46:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <HAL_ADC_MspInit+0x1d0>)
 8000f4c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000f50:	f003 0320 	and.w	r3, r3, #32
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f58:	4b29      	ldr	r3, [pc, #164]	; (8001000 <HAL_ADC_MspInit+0x1d0>)
 8000f5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f5e:	4a28      	ldr	r2, [pc, #160]	; (8001000 <HAL_ADC_MspInit+0x1d0>)
 8000f60:	f043 0320 	orr.w	r3, r3, #32
 8000f64:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <HAL_ADC_MspInit+0x1d0>)
 8000f6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f6e:	f003 0320 	and.w	r3, r3, #32
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f84:	f107 031c 	add.w	r3, r7, #28
 8000f88:	4619      	mov	r1, r3
 8000f8a:	481e      	ldr	r0, [pc, #120]	; (8001004 <HAL_ADC_MspInit+0x1d4>)
 8000f8c:	f004 fdb4 	bl	8005af8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream2;
 8000f90:	4b20      	ldr	r3, [pc, #128]	; (8001014 <HAL_ADC_MspInit+0x1e4>)
 8000f92:	4a21      	ldr	r2, [pc, #132]	; (8001018 <HAL_ADC_MspInit+0x1e8>)
 8000f94:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000f96:	4b1f      	ldr	r3, [pc, #124]	; (8001014 <HAL_ADC_MspInit+0x1e4>)
 8000f98:	220a      	movs	r2, #10
 8000f9a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <HAL_ADC_MspInit+0x1e4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <HAL_ADC_MspInit+0x1e4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <HAL_ADC_MspInit+0x1e4>)
 8000faa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fae:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <HAL_ADC_MspInit+0x1e4>)
 8000fb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fb6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_ADC_MspInit+0x1e4>)
 8000fba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fbe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <HAL_ADC_MspInit+0x1e4>)
 8000fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_ADC_MspInit+0x1e4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_ADC_MspInit+0x1e4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000fd4:	480f      	ldr	r0, [pc, #60]	; (8001014 <HAL_ADC_MspInit+0x1e4>)
 8000fd6:	f002 fc13 	bl	8003800 <HAL_DMA_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 8000fe0:	f000 fb40 	bl	8001664 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <HAL_ADC_MspInit+0x1e4>)
 8000fe8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_ADC_MspInit+0x1e4>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ff0:	bf00      	nop
 8000ff2:	3730      	adds	r7, #48	; 0x30
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40022000 	.word	0x40022000
 8000ffc:	24000278 	.word	0x24000278
 8001000:	58024400 	.word	0x58024400
 8001004:	58021400 	.word	0x58021400
 8001008:	24000188 	.word	0x24000188
 800100c:	40020010 	.word	0x40020010
 8001010:	40022100 	.word	0x40022100
 8001014:	24000200 	.word	0x24000200
 8001018:	40020040 	.word	0x40020040

0800101c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2224      	movs	r2, #36	; 0x24
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f009 fcf3 	bl	800aa14 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <MX_DAC1_Init+0x5c>)
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <MX_DAC1_Init+0x60>)
 8001032:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001034:	4810      	ldr	r0, [pc, #64]	; (8001078 <MX_DAC1_Init+0x5c>)
 8001036:	f002 f91c 	bl	8003272 <HAL_DAC_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001040:	f000 fb10 	bl	8001664 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001048:	2316      	movs	r3, #22
 800104a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	2200      	movs	r2, #0
 800105c:	4619      	mov	r1, r3
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <MX_DAC1_Init+0x5c>)
 8001060:	f002 fa14 	bl	800348c <HAL_DAC_ConfigChannel>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800106a:	f000 fafb 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	3728      	adds	r7, #40	; 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2400027c 	.word	0x2400027c
 800107c:	40007400 	.word	0x40007400

08001080 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a30      	ldr	r2, [pc, #192]	; (8001160 <HAL_DAC_MspInit+0xe0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d15a      	bne.n	8001158 <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80010a2:	4b30      	ldr	r3, [pc, #192]	; (8001164 <HAL_DAC_MspInit+0xe4>)
 80010a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010a8:	4a2e      	ldr	r2, [pc, #184]	; (8001164 <HAL_DAC_MspInit+0xe4>)
 80010aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010ae:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80010b2:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <HAL_DAC_MspInit+0xe4>)
 80010b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <HAL_DAC_MspInit+0xe4>)
 80010c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010c6:	4a27      	ldr	r2, [pc, #156]	; (8001164 <HAL_DAC_MspInit+0xe4>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <HAL_DAC_MspInit+0xe4>)
 80010d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010de:	2310      	movs	r3, #16
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e2:	2303      	movs	r3, #3
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	481d      	ldr	r0, [pc, #116]	; (8001168 <HAL_DAC_MspInit+0xe8>)
 80010f2:	f004 fd01 	bl	8005af8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_DAC_MspInit+0xec>)
 80010f8:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <HAL_DAC_MspInit+0xf0>)
 80010fa:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_DAC_MspInit+0xec>)
 80010fe:	2243      	movs	r2, #67	; 0x43
 8001100:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_DAC_MspInit+0xec>)
 8001104:	2240      	movs	r2, #64	; 0x40
 8001106:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_DAC_MspInit+0xec>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_DAC_MspInit+0xec>)
 8001110:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001114:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_DAC_MspInit+0xec>)
 8001118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800111c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <HAL_DAC_MspInit+0xec>)
 8001120:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001124:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_DAC_MspInit+0xec>)
 8001128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_DAC_MspInit+0xec>)
 8001130:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001134:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <HAL_DAC_MspInit+0xec>)
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <HAL_DAC_MspInit+0xec>)
 800113e:	f002 fb5f 	bl	8003800 <HAL_DMA_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8001148:	f000 fa8c 	bl	8001664 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_DAC_MspInit+0xec>)
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_DAC_MspInit+0xec>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40007400 	.word	0x40007400
 8001164:	58024400 	.word	0x58024400
 8001168:	58020000 	.word	0x58020000
 800116c:	24000290 	.word	0x24000290
 8001170:	40020028 	.word	0x40020028

08001174 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_DMA_Init+0x5c>)
 800117c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001180:	4a13      	ldr	r2, [pc, #76]	; (80011d0 <MX_DMA_Init+0x5c>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_DMA_Init+0x5c>)
 800118c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	200b      	movs	r0, #11
 800119e:	f002 f834 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011a2:	200b      	movs	r0, #11
 80011a4:	f002 f84b 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	200c      	movs	r0, #12
 80011ae:	f002 f82c 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011b2:	200c      	movs	r0, #12
 80011b4:	f002 f843 	bl	800323e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	200d      	movs	r0, #13
 80011be:	f002 f824 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80011c2:	200d      	movs	r0, #13
 80011c4:	f002 f83b 	bl	800323e <HAL_NVIC_EnableIRQ>

}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	58024400 	.word	0x58024400

080011d4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08c      	sub	sp, #48	; 0x30
 80011d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	4b56      	ldr	r3, [pc, #344]	; (8001344 <MX_GPIO_Init+0x170>)
 80011ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011f0:	4a54      	ldr	r2, [pc, #336]	; (8001344 <MX_GPIO_Init+0x170>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011fa:	4b52      	ldr	r3, [pc, #328]	; (8001344 <MX_GPIO_Init+0x170>)
 80011fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001208:	4b4e      	ldr	r3, [pc, #312]	; (8001344 <MX_GPIO_Init+0x170>)
 800120a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800120e:	4a4d      	ldr	r2, [pc, #308]	; (8001344 <MX_GPIO_Init+0x170>)
 8001210:	f043 0320 	orr.w	r3, r3, #32
 8001214:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001218:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <MX_GPIO_Init+0x170>)
 800121a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800121e:	f003 0320 	and.w	r3, r3, #32
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	4b47      	ldr	r3, [pc, #284]	; (8001344 <MX_GPIO_Init+0x170>)
 8001228:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800122c:	4a45      	ldr	r2, [pc, #276]	; (8001344 <MX_GPIO_Init+0x170>)
 800122e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001232:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001236:	4b43      	ldr	r3, [pc, #268]	; (8001344 <MX_GPIO_Init+0x170>)
 8001238:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800123c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <MX_GPIO_Init+0x170>)
 8001246:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800124a:	4a3e      	ldr	r2, [pc, #248]	; (8001344 <MX_GPIO_Init+0x170>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001254:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <MX_GPIO_Init+0x170>)
 8001256:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	4b38      	ldr	r3, [pc, #224]	; (8001344 <MX_GPIO_Init+0x170>)
 8001264:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001268:	4a36      	ldr	r2, [pc, #216]	; (8001344 <MX_GPIO_Init+0x170>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001272:	4b34      	ldr	r3, [pc, #208]	; (8001344 <MX_GPIO_Init+0x170>)
 8001274:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001280:	4b30      	ldr	r3, [pc, #192]	; (8001344 <MX_GPIO_Init+0x170>)
 8001282:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001286:	4a2f      	ldr	r2, [pc, #188]	; (8001344 <MX_GPIO_Init+0x170>)
 8001288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800128c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001290:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <MX_GPIO_Init+0x170>)
 8001292:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a4:	4828      	ldr	r0, [pc, #160]	; (8001348 <MX_GPIO_Init+0x174>)
 80012a6:	f004 fdd7 	bl	8005e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80012aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4821      	ldr	r0, [pc, #132]	; (8001348 <MX_GPIO_Init+0x174>)
 80012c4:	f004 fc18 	bl	8005af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	481b      	ldr	r0, [pc, #108]	; (800134c <MX_GPIO_Init+0x178>)
 80012de:	f004 fc0b 	bl	8005af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80012e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	4816      	ldr	r0, [pc, #88]	; (8001350 <MX_GPIO_Init+0x17c>)
 80012f8:	f004 fbfe 	bl	8005af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80012fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800130e:	230a      	movs	r3, #10
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	480d      	ldr	r0, [pc, #52]	; (8001350 <MX_GPIO_Init+0x17c>)
 800131a:	f004 fbed 	bl	8005af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800131e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	4806      	ldr	r0, [pc, #24]	; (8001350 <MX_GPIO_Init+0x17c>)
 8001338:	f004 fbde 	bl	8005af8 <HAL_GPIO_Init>

}
 800133c:	bf00      	nop
 800133e:	3730      	adds	r7, #48	; 0x30
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	58024400 	.word	0x58024400
 8001348:	58021400 	.word	0x58021400
 800134c:	58021800 	.word	0x58021800
 8001350:	58020000 	.word	0x58020000

08001354 <HAL_ADC_ConvHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1) {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a09      	ldr	r2, [pc, #36]	; (8001384 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d108      	bne.n	8001376 <HAL_ADC_ConvHalfCpltCallback+0x22>
		// when we enter this function, first half of the buffer is complete
		// so we set the input buffer pointer at the beginning
		inBuffPtr = &adcData[0];
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001366:	4a09      	ldr	r2, [pc, #36]	; (800138c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8001368:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[DATA_SIZE];
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 800136c:	4a09      	ldr	r2, [pc, #36]	; (8001394 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 800136e:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
	}

}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	240000c0 	.word	0x240000c0
 8001388:	24000710 	.word	0x24000710
 800138c:	24000308 	.word	0x24000308
 8001390:	24000714 	.word	0x24000714
 8001394:	24000608 	.word	0x24000608
 8001398:	24000718 	.word	0x24000718

0800139c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

	if(hadc == &hadc1) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <HAL_ADC_ConvCpltCallback+0x30>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d108      	bne.n	80013be <HAL_ADC_ConvCpltCallback+0x22>
		// when we enter this function, first half of the buffer is complete
		// so we set the input buffer pointer at the beginning

		inBuffPtr = &adcData[DATA_SIZE];
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <HAL_ADC_ConvCpltCallback+0x34>)
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <HAL_ADC_ConvCpltCallback+0x38>)
 80013b0:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[0];
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_ADC_ConvCpltCallback+0x3c>)
 80013b4:	4a09      	ldr	r2, [pc, #36]	; (80013dc <HAL_ADC_ConvCpltCallback+0x40>)
 80013b6:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_ADC_ConvCpltCallback+0x44>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
	}

}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	240000c0 	.word	0x240000c0
 80013d0:	24000710 	.word	0x24000710
 80013d4:	24000408 	.word	0x24000408
 80013d8:	24000714 	.word	0x24000714
 80013dc:	24000508 	.word	0x24000508
 80013e0:	24000718 	.word	0x24000718

080013e4 <processData>:


void processData()
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
	for(int i = 0; i < DATA_SIZE; i++) {
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	e01f      	b.n	8001430 <processData+0x4c>
		outBuffPtr[i] = calculateTremolo(inBuffPtr[i], adc2Data[0]/4095.0f);
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <processData+0x60>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	b299      	uxth	r1, r3
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <processData+0x64>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	eddf 6a10 	vldr	s13, [pc, #64]	; 800144c <processData+0x68>
 800140e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <processData+0x6c>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	18d4      	adds	r4, r2, r3
 800141c:	eeb0 0a47 	vmov.f32	s0, s14
 8001420:	4608      	mov	r0, r1
 8001422:	f7ff fbc9 	bl	8000bb8 <calculateTremolo>
 8001426:	4603      	mov	r3, r0
 8001428:	8023      	strh	r3, [r4, #0]
	for(int i = 0; i < DATA_SIZE; i++) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3301      	adds	r3, #1
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b7f      	cmp	r3, #127	; 0x7f
 8001434:	dddc      	ble.n	80013f0 <processData+0xc>
	}


	dataReady = 0;
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <processData+0x70>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}
 8001444:	24000710 	.word	0x24000710
 8001448:	24000708 	.word	0x24000708
 800144c:	457ff000 	.word	0x457ff000
 8001450:	24000714 	.word	0x24000714
 8001454:	24000718 	.word	0x24000718

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145e:	f000 fbbf 	bl	8001be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001462:	f000 f857 	bl	8001514 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001466:	f000 f8d1 	bl	800160c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146a:	f7ff feb3 	bl	80011d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800146e:	f000 fad3 	bl	8001a18 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8001472:	f7ff fe7f 	bl	8001174 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8001476:	f000 fb81 	bl	8001b7c <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800147a:	f7ff fbf7 	bl	8000c6c <MX_ADC1_Init>
  MX_TIM6_Init();
 800147e:	f000 fa5b 	bl	8001938 <MX_TIM6_Init>
  MX_DAC1_Init();
 8001482:	f7ff fdcb 	bl	800101c <MX_DAC1_Init>
  MX_ADC2_Init();
 8001486:	f7ff fc6b 	bl	8000d60 <MX_ADC2_Init>
  MX_TIM1_Init();
 800148a:	f000 fa01 	bl	8001890 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800148e:	4818      	ldr	r0, [pc, #96]	; (80014f0 <main+0x98>)
 8001490:	f007 fdec 	bl	800906c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);
 8001494:	4817      	ldr	r0, [pc, #92]	; (80014f4 <main+0x9c>)
 8001496:	f007 fde9 	bl	800906c <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcData, BUFFER_SIZE);
 800149a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149e:	4916      	ldr	r1, [pc, #88]	; (80014f8 <main+0xa0>)
 80014a0:	4816      	ldr	r0, [pc, #88]	; (80014fc <main+0xa4>)
 80014a2:	f000 ff95 	bl	80023d0 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) dacData, BUFFER_SIZE, DAC_ALIGN_12B_R);
 80014a6:	2300      	movs	r3, #0
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ae:	4a14      	ldr	r2, [pc, #80]	; (8001500 <main+0xa8>)
 80014b0:	2100      	movs	r1, #0
 80014b2:	4814      	ldr	r0, [pc, #80]	; (8001504 <main+0xac>)
 80014b4:	f001 ff00 	bl	80032b8 <HAL_DAC_Start_DMA>

  Delay_Init();
 80014b8:	f7ff fa58 	bl	800096c <Delay_Init>
  Tremolo_Init();
 80014bc:	f7ff fb60 	bl	8000b80 <Tremolo_Init>
  uint8_t msg[30] = "\0";
 80014c0:	2300      	movs	r3, #0
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]
 80014d2:	615a      	str	r2, [r3, #20]
 80014d4:	831a      	strh	r2, [r3, #24]
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2Data, 3);
 80014d6:	2203      	movs	r2, #3
 80014d8:	490b      	ldr	r1, [pc, #44]	; (8001508 <main+0xb0>)
 80014da:	480c      	ldr	r0, [pc, #48]	; (800150c <main+0xb4>)
 80014dc:	f000 ff78 	bl	80023d0 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(dataReady) {
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <main+0xb8>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0fb      	beq.n	80014e0 <main+0x88>
		  processData();
 80014e8:	f7ff ff7c 	bl	80013e4 <processData>
	  if(dataReady) {
 80014ec:	e7f8      	b.n	80014e0 <main+0x88>
 80014ee:	bf00      	nop
 80014f0:	24000720 	.word	0x24000720
 80014f4:	2400076c 	.word	0x2400076c
 80014f8:	24000308 	.word	0x24000308
 80014fc:	240000c0 	.word	0x240000c0
 8001500:	24000508 	.word	0x24000508
 8001504:	2400027c 	.word	0x2400027c
 8001508:	24000708 	.word	0x24000708
 800150c:	24000124 	.word	0x24000124
 8001510:	24000718 	.word	0x24000718

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b09c      	sub	sp, #112	; 0x70
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151e:	224c      	movs	r2, #76	; 0x4c
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f009 fa76 	bl	800aa14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2220      	movs	r2, #32
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f009 fa70 	bl	800aa14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001534:	2004      	movs	r0, #4
 8001536:	f004 fca9 	bl	8005e8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	4b31      	ldr	r3, [pc, #196]	; (8001604 <SystemClock_Config+0xf0>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	4a30      	ldr	r2, [pc, #192]	; (8001604 <SystemClock_Config+0xf0>)
 8001544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001548:	6193      	str	r3, [r2, #24]
 800154a:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <SystemClock_Config+0xf0>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001556:	bf00      	nop
 8001558:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <SystemClock_Config+0xf0>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001564:	d1f8      	bne.n	8001558 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <SystemClock_Config+0xf4>)
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	f023 0303 	bic.w	r3, r3, #3
 800156e:	4a26      	ldr	r2, [pc, #152]	; (8001608 <SystemClock_Config+0xf4>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8001576:	2329      	movs	r3, #41	; 0x29
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800157a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001580:	2301      	movs	r3, #1
 8001582:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001584:	2301      	movs	r3, #1
 8001586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001588:	2302      	movs	r3, #2
 800158a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800158c:	2302      	movs	r3, #2
 800158e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001590:	2301      	movs	r3, #1
 8001592:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8001594:	2346      	movs	r3, #70	; 0x46
 8001596:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001598:	2302      	movs	r3, #2
 800159a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800159c:	2304      	movs	r3, #4
 800159e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015a0:	2302      	movs	r3, #2
 80015a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80015a4:	230c      	movs	r3, #12
 80015a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 fcc3 	bl	8005f40 <HAL_RCC_OscConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80015c0:	f000 f850 	bl	8001664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	233f      	movs	r3, #63	; 0x3f
 80015c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c8:	2303      	movs	r3, #3
 80015ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015d4:	2340      	movs	r3, #64	; 0x40
 80015d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015d8:	2340      	movs	r3, #64	; 0x40
 80015da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80015e2:	2340      	movs	r3, #64	; 0x40
 80015e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2107      	movs	r1, #7
 80015ea:	4618      	mov	r0, r3
 80015ec:	f005 f8ac 	bl	8006748 <HAL_RCC_ClockConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80015f6:	f000 f835 	bl	8001664 <Error_Handler>
  }
}
 80015fa:	bf00      	nop
 80015fc:	3770      	adds	r7, #112	; 0x70
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	58024800 	.word	0x58024800
 8001608:	58024400 	.word	0x58024400

0800160c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0ae      	sub	sp, #184	; 0xb8
 8001610:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001612:	463b      	mov	r3, r7
 8001614:	22b8      	movs	r2, #184	; 0xb8
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f009 f9fb 	bl	800aa14 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800161e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001622:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001624:	2301      	movs	r3, #1
 8001626:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001628:	2310      	movs	r3, #16
 800162a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800162c:	2301      	movs	r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001630:	2302      	movs	r3, #2
 8001632:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001634:	2302      	movs	r3, #2
 8001636:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001638:	23c0      	movs	r3, #192	; 0xc0
 800163a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800164a:	463b      	mov	r3, r7
 800164c:	4618      	mov	r0, r3
 800164e:	f005 fc07 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8001658:	f000 f804 	bl	8001664 <Error_Handler>
  }
}
 800165c:	bf00      	nop
 800165e:	37b8      	adds	r7, #184	; 0xb8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001668:	b672      	cpsid	i
}
 800166a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800166c:	e7fe      	b.n	800166c <Error_Handler+0x8>
	...

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_MspInit+0x30>)
 8001678:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800167c:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_MspInit+0x30>)
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_MspInit+0x30>)
 8001688:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	58024400 	.word	0x58024400

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <NMI_Handler+0x4>

080016aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <HardFault_Handler+0x4>

080016b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler+0x4>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ba:	e7fe      	b.n	80016ba <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f0:	f000 fae8 	bl	8001cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <DMA1_Stream0_IRQHandler+0x10>)
 80016fe:	f002 fe79 	bl	80043f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	24000188 	.word	0x24000188

0800170c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <DMA1_Stream1_IRQHandler+0x10>)
 8001712:	f002 fe6f 	bl	80043f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	24000290 	.word	0x24000290

08001720 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <DMA1_Stream2_IRQHandler+0x10>)
 8001726:	f002 fe65 	bl	80043f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	24000200 	.word	0x24000200

08001734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800173c:	4a14      	ldr	r2, [pc, #80]	; (8001790 <_sbrk+0x5c>)
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <_sbrk+0x60>)
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <_sbrk+0x64>)
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <_sbrk+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	d207      	bcs.n	8001774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001764:	f009 f924 	bl	800a9b0 <__errno>
 8001768:	4603      	mov	r3, r0
 800176a:	220c      	movs	r2, #12
 800176c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	e009      	b.n	8001788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <_sbrk+0x64>)
 8001784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	24100000 	.word	0x24100000
 8001794:	00000400 	.word	0x00000400
 8001798:	2400071c 	.word	0x2400071c
 800179c:	24000860 	.word	0x24000860

080017a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <SystemInit+0xd0>)
 80017a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017aa:	4a31      	ldr	r2, [pc, #196]	; (8001870 <SystemInit+0xd0>)
 80017ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017b4:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <SystemInit+0xd4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d807      	bhi.n	80017d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017c0:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <SystemInit+0xd4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f023 030f 	bic.w	r3, r3, #15
 80017c8:	4a2a      	ldr	r2, [pc, #168]	; (8001874 <SystemInit+0xd4>)
 80017ca:	f043 0303 	orr.w	r3, r3, #3
 80017ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <SystemInit+0xd8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a28      	ldr	r2, [pc, #160]	; (8001878 <SystemInit+0xd8>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017dc:	4b26      	ldr	r3, [pc, #152]	; (8001878 <SystemInit+0xd8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <SystemInit+0xd8>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4924      	ldr	r1, [pc, #144]	; (8001878 <SystemInit+0xd8>)
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <SystemInit+0xdc>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017ee:	4b21      	ldr	r3, [pc, #132]	; (8001874 <SystemInit+0xd4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d007      	beq.n	800180a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <SystemInit+0xd4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 030f 	bic.w	r3, r3, #15
 8001802:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <SystemInit+0xd4>)
 8001804:	f043 0303 	orr.w	r3, r3, #3
 8001808:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <SystemInit+0xd8>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <SystemInit+0xd8>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <SystemInit+0xd8>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <SystemInit+0xd8>)
 800181e:	4a18      	ldr	r2, [pc, #96]	; (8001880 <SystemInit+0xe0>)
 8001820:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <SystemInit+0xd8>)
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <SystemInit+0xe4>)
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <SystemInit+0xd8>)
 800182a:	4a17      	ldr	r2, [pc, #92]	; (8001888 <SystemInit+0xe8>)
 800182c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <SystemInit+0xd8>)
 8001830:	2200      	movs	r2, #0
 8001832:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <SystemInit+0xd8>)
 8001836:	4a14      	ldr	r2, [pc, #80]	; (8001888 <SystemInit+0xe8>)
 8001838:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <SystemInit+0xd8>)
 800183c:	2200      	movs	r2, #0
 800183e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <SystemInit+0xd8>)
 8001842:	4a11      	ldr	r2, [pc, #68]	; (8001888 <SystemInit+0xe8>)
 8001844:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <SystemInit+0xd8>)
 8001848:	2200      	movs	r2, #0
 800184a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <SystemInit+0xd8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a09      	ldr	r2, [pc, #36]	; (8001878 <SystemInit+0xd8>)
 8001852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001856:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <SystemInit+0xd8>)
 800185a:	2200      	movs	r2, #0
 800185c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <SystemInit+0xec>)
 8001860:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001864:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	52002000 	.word	0x52002000
 8001878:	58024400 	.word	0x58024400
 800187c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001880:	02020200 	.word	0x02020200
 8001884:	01ff0000 	.word	0x01ff0000
 8001888:	01010280 	.word	0x01010280
 800188c:	52004000 	.word	0x52004000

08001890 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <MX_TIM1_Init+0xa0>)
 80018b0:	4a20      	ldr	r2, [pc, #128]	; (8001934 <MX_TIM1_Init+0xa4>)
 80018b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <MX_TIM1_Init+0xa0>)
 80018b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <MX_TIM1_Init+0xa0>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2800;
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <MX_TIM1_Init+0xa0>)
 80018c4:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80018c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <MX_TIM1_Init+0xa0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <MX_TIM1_Init+0xa0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <MX_TIM1_Init+0xa0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018dc:	4814      	ldr	r0, [pc, #80]	; (8001930 <MX_TIM1_Init+0xa0>)
 80018de:	f007 fb6d 	bl	8008fbc <HAL_TIM_Base_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80018e8:	f7ff febc 	bl	8001664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018f2:	f107 0310 	add.w	r3, r7, #16
 80018f6:	4619      	mov	r1, r3
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_TIM1_Init+0xa0>)
 80018fa:	f007 fc27 	bl	800914c <HAL_TIM_ConfigClockSource>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001904:	f7ff feae 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001908:	2320      	movs	r3, #32
 800190a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_TIM1_Init+0xa0>)
 800191a:	f007 fe47 	bl	80095ac <HAL_TIMEx_MasterConfigSynchronization>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001924:	f7ff fe9e 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	24000720 	.word	0x24000720
 8001934:	40010000 	.word	0x40010000

08001938 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001948:	4b14      	ldr	r3, [pc, #80]	; (800199c <MX_TIM6_Init+0x64>)
 800194a:	4a15      	ldr	r2, [pc, #84]	; (80019a0 <MX_TIM6_Init+0x68>)
 800194c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <MX_TIM6_Init+0x64>)
 8001950:	2200      	movs	r2, #0
 8001952:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <MX_TIM6_Init+0x64>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <MX_TIM6_Init+0x64>)
 800195c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001960:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_TIM6_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001968:	480c      	ldr	r0, [pc, #48]	; (800199c <MX_TIM6_Init+0x64>)
 800196a:	f007 fb27 	bl	8008fbc <HAL_TIM_Base_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001974:	f7ff fe76 	bl	8001664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001978:	2320      	movs	r3, #32
 800197a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_TIM6_Init+0x64>)
 8001986:	f007 fe11 	bl	80095ac <HAL_TIMEx_MasterConfigSynchronization>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001990:	f7ff fe68 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	2400076c 	.word	0x2400076c
 80019a0:	40001000 	.word	0x40001000

080019a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a16      	ldr	r2, [pc, #88]	; (8001a0c <HAL_TIM_Base_MspInit+0x68>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10f      	bne.n	80019d6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019b6:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <HAL_TIM_Base_MspInit+0x6c>)
 80019b8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80019bc:	4a14      	ldr	r2, [pc, #80]	; (8001a10 <HAL_TIM_Base_MspInit+0x6c>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_TIM_Base_MspInit+0x6c>)
 80019c8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80019d4:	e013      	b.n	80019fe <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM6)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_TIM_Base_MspInit+0x70>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d10e      	bne.n	80019fe <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_TIM_Base_MspInit+0x6c>)
 80019e2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_TIM_Base_MspInit+0x6c>)
 80019e8:	f043 0310 	orr.w	r3, r3, #16
 80019ec:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <HAL_TIM_Base_MspInit+0x6c>)
 80019f2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	58024400 	.word	0x58024400
 8001a14:	40001000 	.word	0x40001000

08001a18 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a1c:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <MX_USART3_UART_Init+0x90>)
 8001a1e:	4a23      	ldr	r2, [pc, #140]	; (8001aac <MX_USART3_UART_Init+0x94>)
 8001a20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a22:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <MX_USART3_UART_Init+0x90>)
 8001a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2a:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <MX_USART3_UART_Init+0x90>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a30:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <MX_USART3_UART_Init+0x90>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <MX_USART3_UART_Init+0x90>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <MX_USART3_UART_Init+0x90>)
 8001a3e:	220c      	movs	r2, #12
 8001a40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <MX_USART3_UART_Init+0x90>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <MX_USART3_UART_Init+0x90>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <MX_USART3_UART_Init+0x90>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <MX_USART3_UART_Init+0x90>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <MX_USART3_UART_Init+0x90>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a60:	4811      	ldr	r0, [pc, #68]	; (8001aa8 <MX_USART3_UART_Init+0x90>)
 8001a62:	f007 fe31 	bl	80096c8 <HAL_UART_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a6c:	f7ff fdfa 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a70:	2100      	movs	r1, #0
 8001a72:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <MX_USART3_UART_Init+0x90>)
 8001a74:	f008 fed2 	bl	800a81c <HAL_UARTEx_SetTxFifoThreshold>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a7e:	f7ff fdf1 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a82:	2100      	movs	r1, #0
 8001a84:	4808      	ldr	r0, [pc, #32]	; (8001aa8 <MX_USART3_UART_Init+0x90>)
 8001a86:	f008 ff07 	bl	800a898 <HAL_UARTEx_SetRxFifoThreshold>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a90:	f7ff fde8 	bl	8001664 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a94:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <MX_USART3_UART_Init+0x90>)
 8001a96:	f008 fe88 	bl	800a7aa <HAL_UARTEx_DisableFifoMode>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001aa0:	f7ff fde0 	bl	8001664 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	240007b8 	.word	0x240007b8
 8001aac:	40004800 	.word	0x40004800

08001ab0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0b8      	sub	sp, #224	; 0xe0
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	22b8      	movs	r2, #184	; 0xb8
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f008 ff9f 	bl	800aa14 <memset>
  if(uartHandle->Instance==USART3)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a25      	ldr	r2, [pc, #148]	; (8001b70 <HAL_UART_MspInit+0xc0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d142      	bne.n	8001b66 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4618      	mov	r0, r3
 8001af0:	f005 f9b6 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001afa:	f7ff fdb3 	bl	8001664 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_UART_MspInit+0xc4>)
 8001b00:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001b04:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_UART_MspInit+0xc4>)
 8001b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_UART_MspInit+0xc4>)
 8001b10:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_UART_MspInit+0xc4>)
 8001b1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b22:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <HAL_UART_MspInit+0xc4>)
 8001b24:	f043 0308 	orr.w	r3, r3, #8
 8001b28:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_UART_MspInit+0xc4>)
 8001b2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b54:	2307      	movs	r3, #7
 8001b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b5a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	; (8001b78 <HAL_UART_MspInit+0xc8>)
 8001b62:	f003 ffc9 	bl	8005af8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b66:	bf00      	nop
 8001b68:	37e0      	adds	r7, #224	; 0xe0
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40004800 	.word	0x40004800
 8001b74:	58024400 	.word	0x58024400
 8001b78:	58020c00 	.word	0x58020c00

08001b7c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b90:	f7ff fe06 	bl	80017a0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b94:	480c      	ldr	r0, [pc, #48]	; (8001bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b96:	490d      	ldr	r1, [pc, #52]	; (8001bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b98:	4a0d      	ldr	r2, [pc, #52]	; (8001bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b9c:	e002      	b.n	8001ba4 <LoopCopyDataInit>

08001b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba2:	3304      	adds	r3, #4

08001ba4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba8:	d3f9      	bcc.n	8001b9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bac:	4c0a      	ldr	r4, [pc, #40]	; (8001bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb0:	e001      	b.n	8001bb6 <LoopFillZerobss>

08001bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb4:	3204      	adds	r2, #4

08001bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb8:	d3fb      	bcc.n	8001bb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bba:	f008 feff 	bl	800a9bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bbe:	f7ff fc4b 	bl	8001458 <main>
  bx  lr
 8001bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bc4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001bc8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bcc:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001bd0:	0800aef0 	.word	0x0800aef0
  ldr r2, =_sbss
 8001bd4:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001bd8:	2400085c 	.word	0x2400085c

08001bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bdc:	e7fe      	b.n	8001bdc <ADC_IRQHandler>
	...

08001be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be6:	2003      	movs	r0, #3
 8001be8:	f001 fb04 	bl	80031f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001bec:	f004 ff62 	bl	8006ab4 <HAL_RCC_GetSysClockFreq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_Init+0x68>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	0a1b      	lsrs	r3, r3, #8
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	4913      	ldr	r1, [pc, #76]	; (8001c4c <HAL_Init+0x6c>)
 8001bfe:	5ccb      	ldrb	r3, [r1, r3]
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
 8001c08:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_Init+0x68>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <HAL_Init+0x6c>)
 8001c14:	5cd3      	ldrb	r3, [r2, r3]
 8001c16:	f003 031f 	and.w	r3, r3, #31
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c20:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <HAL_Init+0x70>)
 8001c22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c24:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <HAL_Init+0x74>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f000 f814 	bl	8001c58 <HAL_InitTick>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e002      	b.n	8001c40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c3a:	f7ff fd19 	bl	8001670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	58024400 	.word	0x58024400
 8001c4c:	0800ad60 	.word	0x0800ad60
 8001c50:	24000004 	.word	0x24000004
 8001c54:	24000000 	.word	0x24000000

08001c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_InitTick+0x60>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e021      	b.n	8001cb0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c6c:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <HAL_InitTick+0x64>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_InitTick+0x60>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f001 fae9 	bl	800325a <HAL_SYSTICK_Config>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00e      	b.n	8001cb0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d80a      	bhi.n	8001cae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca0:	f001 fab3 	bl	800320a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_InitTick+0x68>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e000      	b.n	8001cb0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2400000c 	.word	0x2400000c
 8001cbc:	24000000 	.word	0x24000000
 8001cc0:	24000008 	.word	0x24000008

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	2400000c 	.word	0x2400000c
 8001ce8:	24000848 	.word	0x24000848

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	24000848 	.word	0x24000848

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_Delay+0x44>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2400000c 	.word	0x2400000c

08001d4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	609a      	str	r2, [r3, #8]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3360      	adds	r3, #96	; 0x60
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	431a      	orrs	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001de8:	bf00      	nop
 8001dea:	371c      	adds	r7, #28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 031f 	and.w	r3, r3, #31
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	431a      	orrs	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	611a      	str	r2, [r3, #16]
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b087      	sub	sp, #28
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3360      	adds	r3, #96	; 0x60
 8001e36:	461a      	mov	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	601a      	str	r2, [r3, #0]
  }
}
 8001e50:	bf00      	nop
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b087      	sub	sp, #28
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3330      	adds	r3, #48	; 0x30
 8001e92:	461a      	mov	r2, r3
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	0a1b      	lsrs	r3, r3, #8
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	4413      	add	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	211f      	movs	r1, #31
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	0e9b      	lsrs	r3, r3, #26
 8001eba:	f003 011f 	and.w	r1, r3, #31
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f023 0203 	bic.w	r2, r3, #3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	60da      	str	r2, [r3, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3314      	adds	r3, #20
 8001f10:	461a      	mov	r2, r3
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	0e5b      	lsrs	r3, r3, #25
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	4413      	add	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	0d1b      	lsrs	r3, r3, #20
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	2107      	movs	r1, #7
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	401a      	ands	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	0d1b      	lsrs	r3, r3, #20
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	431a      	orrs	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f4a:	bf00      	nop
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f70:	43db      	mvns	r3, r3
 8001f72:	401a      	ands	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0318 	and.w	r3, r3, #24
 8001f7a:	4908      	ldr	r1, [pc, #32]	; (8001f9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f7c:	40d9      	lsrs	r1, r3
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	400b      	ands	r3, r1
 8001f82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f86:	431a      	orrs	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	000fffff 	.word	0x000fffff

08001fa0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 031f 	and.w	r3, r3, #31
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <LL_ADC_DisableDeepPowerDown+0x20>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6093      	str	r3, [r2, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	5fffffc0 	.word	0x5fffffc0

08001fe0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ff4:	d101      	bne.n	8001ffa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <LL_ADC_EnableInternalRegulator+0x24>)
 8002016:	4013      	ands	r3, r2
 8002018:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	6fffffc0 	.word	0x6fffffc0

08002030 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002040:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002044:	d101      	bne.n	800204a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <LL_ADC_Enable+0x24>)
 8002066:	4013      	ands	r3, r2
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	7fffffc0 	.word	0x7fffffc0

08002080 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <LL_ADC_IsEnabled+0x18>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <LL_ADC_IsEnabled+0x1a>
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <LL_ADC_REG_StartConversion+0x24>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	f043 0204 	orr.w	r2, r3, #4
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	7fffffc0 	.word	0x7fffffc0

080020d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d101      	bne.n	80020e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b08      	cmp	r3, #8
 8002108:	d101      	bne.n	800210e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002128:	2300      	movs	r3, #0
 800212a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e138      	b.n	80023a8 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7fe fe73 	bl	8000e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff3f 	bl	8001fe0 <LL_ADC_IsDeepPowerDownEnabled>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d004      	beq.n	8002172 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff25 	bl	8001fbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff5a 	bl	8002030 <LL_ADC_IsInternalRegulatorEnabled>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d114      	bne.n	80021ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ff3e 	bl	8002008 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800218c:	4b88      	ldr	r3, [pc, #544]	; (80023b0 <HAL_ADC_Init+0x294>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	099b      	lsrs	r3, r3, #6
 8002192:	4a88      	ldr	r2, [pc, #544]	; (80023b4 <HAL_ADC_Init+0x298>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	3301      	adds	r3, #1
 800219c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800219e:	e002      	b.n	80021a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f9      	bne.n	80021a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff3d 	bl	8002030 <LL_ADC_IsInternalRegulatorEnabled>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10d      	bne.n	80021d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c0:	f043 0210 	orr.w	r2, r3, #16
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	f043 0201 	orr.w	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff77 	bl	80020d0 <LL_ADC_REG_IsConversionOngoing>
 80021e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f040 80d2 	bne.w	8002396 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f040 80ce 	bne.w	8002396 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002202:	f043 0202 	orr.w	r2, r3, #2
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff36 	bl	8002080 <LL_ADC_IsEnabled>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d110      	bne.n	800223c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800221a:	4867      	ldr	r0, [pc, #412]	; (80023b8 <HAL_ADC_Init+0x29c>)
 800221c:	f7ff ff30 	bl	8002080 <LL_ADC_IsEnabled>
 8002220:	4604      	mov	r4, r0
 8002222:	4866      	ldr	r0, [pc, #408]	; (80023bc <HAL_ADC_Init+0x2a0>)
 8002224:	f7ff ff2c 	bl	8002080 <LL_ADC_IsEnabled>
 8002228:	4603      	mov	r3, r0
 800222a:	4323      	orrs	r3, r4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d105      	bne.n	800223c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4619      	mov	r1, r3
 8002236:	4862      	ldr	r0, [pc, #392]	; (80023c0 <HAL_ADC_Init+0x2a4>)
 8002238:	f7ff fd88 	bl	8001d4c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7d5b      	ldrb	r3, [r3, #21]
 8002240:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002246:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800224c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	7f1b      	ldrb	r3, [r3, #28]
 8002252:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7f1b      	ldrb	r3, [r3, #28]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d106      	bne.n	800226e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	3b01      	subs	r3, #1
 8002266:	045b      	lsls	r3, r3, #17
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002282:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	4b4c      	ldr	r3, [pc, #304]	; (80023c4 <HAL_ADC_Init+0x2a8>)
 8002292:	4013      	ands	r3, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	69b9      	ldr	r1, [r7, #24]
 800229a:	430b      	orrs	r3, r1
 800229c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff14 	bl	80020d0 <LL_ADC_REG_IsConversionOngoing>
 80022a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff21 	bl	80020f6 <LL_ADC_INJ_IsConversionOngoing>
 80022b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d14a      	bne.n	8002352 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d147      	bne.n	8002352 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7d1b      	ldrb	r3, [r3, #20]
 80022c6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	4b3c      	ldr	r3, [pc, #240]	; (80023c8 <HAL_ADC_Init+0x2ac>)
 80022d8:	4013      	ands	r3, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	69b9      	ldr	r1, [r7, #24]
 80022e0:	430b      	orrs	r3, r1
 80022e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d11b      	bne.n	8002326 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	4b34      	ldr	r3, [pc, #208]	; (80023cc <HAL_ADC_Init+0x2b0>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002302:	3a01      	subs	r2, #1
 8002304:	0411      	lsls	r1, r2, #16
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800230a:	4311      	orrs	r1, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002310:	4311      	orrs	r1, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002316:	430a      	orrs	r2, r1
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	611a      	str	r2, [r3, #16]
 8002324:	e007      	b.n	8002336 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fcf3 	bl	8002d38 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d10c      	bne.n	8002374 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	f023 010f 	bic.w	r1, r3, #15
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	1e5a      	subs	r2, r3, #1
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	631a      	str	r2, [r3, #48]	; 0x30
 8002372:	e007      	b.n	8002384 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 020f 	bic.w	r2, r2, #15
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002388:	f023 0303 	bic.w	r3, r3, #3
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
 8002394:	e007      	b.n	80023a6 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	f043 0210 	orr.w	r2, r3, #16
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3724      	adds	r7, #36	; 0x24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}
 80023b0:	24000000 	.word	0x24000000
 80023b4:	053e2d63 	.word	0x053e2d63
 80023b8:	40022000 	.word	0x40022000
 80023bc:	40022100 	.word	0x40022100
 80023c0:	40022300 	.word	0x40022300
 80023c4:	fff0c003 	.word	0xfff0c003
 80023c8:	ffffbffc 	.word	0xffffbffc
 80023cc:	fc00f81e 	.word	0xfc00f81e

080023d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023dc:	484f      	ldr	r0, [pc, #316]	; (800251c <HAL_ADC_Start_DMA+0x14c>)
 80023de:	f7ff fddf 	bl	8001fa0 <LL_ADC_GetMultimode>
 80023e2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fe71 	bl	80020d0 <LL_ADC_REG_IsConversionOngoing>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 808c 	bne.w	800250e <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_Start_DMA+0x34>
 8002400:	2302      	movs	r3, #2
 8002402:	e087      	b.n	8002514 <HAL_ADC_Start_DMA+0x144>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b05      	cmp	r3, #5
 8002416:	d002      	beq.n	800241e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b09      	cmp	r3, #9
 800241c:	d170      	bne.n	8002500 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fb7a 	bl	8002b18 <ADC_Enable>
 8002424:	4603      	mov	r3, r0
 8002426:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002428:	7dfb      	ldrb	r3, [r7, #23]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d163      	bne.n	80024f6 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_ADC_Start_DMA+0x150>)
 8002434:	4013      	ands	r3, r2
 8002436:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a38      	ldr	r2, [pc, #224]	; (8002524 <HAL_ADC_Start_DMA+0x154>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d002      	beq.n	800244e <HAL_ADC_Start_DMA+0x7e>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	e000      	b.n	8002450 <HAL_ADC_Start_DMA+0x80>
 800244e:	4b36      	ldr	r3, [pc, #216]	; (8002528 <HAL_ADC_Start_DMA+0x158>)
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	4293      	cmp	r3, r2
 8002456:	d002      	beq.n	800245e <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d105      	bne.n	800246a <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d006      	beq.n	8002484 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247a:	f023 0206 	bic.w	r2, r3, #6
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	659a      	str	r2, [r3, #88]	; 0x58
 8002482:	e002      	b.n	800248a <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	4a27      	ldr	r2, [pc, #156]	; (800252c <HAL_ADC_Start_DMA+0x15c>)
 8002490:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002496:	4a26      	ldr	r2, [pc, #152]	; (8002530 <HAL_ADC_Start_DMA+0x160>)
 8002498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249e:	4a25      	ldr	r2, [pc, #148]	; (8002534 <HAL_ADC_Start_DMA+0x164>)
 80024a0:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	221c      	movs	r2, #28
 80024a8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0210 	orr.w	r2, r2, #16
 80024c0:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ca:	4619      	mov	r1, r3
 80024cc:	4610      	mov	r0, r2
 80024ce:	f7ff fd04 	bl	8001eda <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3340      	adds	r3, #64	; 0x40
 80024dc:	4619      	mov	r1, r3
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f001 fd1d 	bl	8003f20 <HAL_DMA_Start_IT>
 80024e6:	4603      	mov	r3, r0
 80024e8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fdda 	bl	80020a8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80024f4:	e00d      	b.n	8002512 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80024fe:	e008      	b.n	8002512 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800250c:	e001      	b.n	8002512 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800250e:	2302      	movs	r3, #2
 8002510:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002512:	7dfb      	ldrb	r3, [r7, #23]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40022300 	.word	0x40022300
 8002520:	fffff0fe 	.word	0xfffff0fe
 8002524:	40022100 	.word	0x40022100
 8002528:	40022000 	.word	0x40022000
 800252c:	08002c11 	.word	0x08002c11
 8002530:	08002ce9 	.word	0x08002ce9
 8002534:	08002d05 	.word	0x08002d05

08002538 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b0a1      	sub	sp, #132	; 0x84
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a9a      	ldr	r2, [pc, #616]	; (80027d0 <HAL_ADC_ConfigChannel+0x284>)
 8002566:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x2a>
 8002572:	2302      	movs	r3, #2
 8002574:	e2bc      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x5a4>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fda4 	bl	80020d0 <LL_ADC_REG_IsConversionOngoing>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 82a1 	bne.w	8002ad2 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002598:	2b00      	cmp	r3, #0
 800259a:	d108      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x62>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0e9b      	lsrs	r3, r3, #26
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	2201      	movs	r2, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	e016      	b.n	80025dc <HAL_ADC_ConfigChannel+0x90>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025be:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80025c6:	2320      	movs	r3, #32
 80025c8:	e003      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80025ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2201      	movs	r2, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	69d1      	ldr	r1, [r2, #28]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	430b      	orrs	r3, r1
 80025e8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	f7ff fc43 	bl	8001e82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fd65 	bl	80020d0 <LL_ADC_REG_IsConversionOngoing>
 8002606:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fd72 	bl	80020f6 <LL_ADC_INJ_IsConversionOngoing>
 8002612:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 80a0 	bne.w	800275c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800261c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 809c 	bne.w	800275c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	6819      	ldr	r1, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	461a      	mov	r2, r3
 8002632:	f7ff fc65 	bl	8001f00 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <HAL_ADC_ConfigChannel+0x110>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	e00a      	b.n	8002672 <HAL_ADC_ConfigChannel+0x126>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	695a      	ldr	r2, [r3, #20]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2b04      	cmp	r3, #4
 800267a:	d027      	beq.n	80026cc <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6919      	ldr	r1, [r3, #16]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800268a:	f7ff fb93 	bl	8001db4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6919      	ldr	r1, [r3, #16]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	7e5b      	ldrb	r3, [r3, #25]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d102      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x158>
 800269e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80026a2:	e000      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x15a>
 80026a4:	2300      	movs	r3, #0
 80026a6:	461a      	mov	r2, r3
 80026a8:	f7ff fbbd 	bl	8001e26 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6919      	ldr	r1, [r3, #16]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	7e1b      	ldrb	r3, [r3, #24]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d102      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x176>
 80026bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026c0:	e000      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x178>
 80026c2:	2300      	movs	r3, #0
 80026c4:	461a      	mov	r2, r3
 80026c6:	f7ff fb95 	bl	8001df4 <LL_ADC_SetDataRightShift>
 80026ca:	e047      	b.n	800275c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	069b      	lsls	r3, r3, #26
 80026dc:	429a      	cmp	r2, r3
 80026de:	d107      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026ee:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	069b      	lsls	r3, r3, #26
 8002700:	429a      	cmp	r2, r3
 8002702:	d107      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002712:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800271a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	069b      	lsls	r3, r3, #26
 8002724:	429a      	cmp	r2, r3
 8002726:	d107      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002736:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800273e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	069b      	lsls	r3, r3, #26
 8002748:	429a      	cmp	r2, r3
 800274a:	d107      	bne.n	800275c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800275a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fc8d 	bl	8002080 <LL_ADC_IsEnabled>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 81bb 	bne.w	8002ae4 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	461a      	mov	r2, r3
 800277c:	f7ff fbec 	bl	8001f58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <HAL_ADC_ConfigChannel+0x284>)
 8002786:	4293      	cmp	r3, r2
 8002788:	f040 8130 	bne.w	80029ec <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10b      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x268>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	0e9b      	lsrs	r3, r3, #26
 80027a2:	3301      	adds	r3, #1
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	2b09      	cmp	r3, #9
 80027aa:	bf94      	ite	ls
 80027ac:	2301      	movls	r3, #1
 80027ae:	2300      	movhi	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e01b      	b.n	80027ec <HAL_ADC_ConfigChannel+0x2a0>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80027c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80027c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d103      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80027cc:	2320      	movs	r3, #32
 80027ce:	e005      	b.n	80027dc <HAL_ADC_ConfigChannel+0x290>
 80027d0:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80027d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2b09      	cmp	r3, #9
 80027e4:	bf94      	ite	ls
 80027e6:	2301      	movls	r3, #1
 80027e8:	2300      	movhi	r3, #0
 80027ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d079      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <HAL_ADC_ConfigChannel+0x2c0>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	0e9b      	lsrs	r3, r3, #26
 8002802:	3301      	adds	r3, #1
 8002804:	069b      	lsls	r3, r3, #26
 8002806:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800280a:	e015      	b.n	8002838 <HAL_ADC_ConfigChannel+0x2ec>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800281a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800281c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800281e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e003      	b.n	8002830 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	3301      	adds	r3, #1
 8002832:	069b      	lsls	r3, r3, #26
 8002834:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002840:	2b00      	cmp	r3, #0
 8002842:	d109      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x30c>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	0e9b      	lsrs	r3, r3, #26
 800284a:	3301      	adds	r3, #1
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	2101      	movs	r1, #1
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	e017      	b.n	8002888 <HAL_ADC_ConfigChannel+0x33c>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002868:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800286a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002870:	2320      	movs	r3, #32
 8002872:	e003      	b.n	800287c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	3301      	adds	r3, #1
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	ea42 0103 	orr.w	r1, r2, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <HAL_ADC_ConfigChannel+0x362>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0e9b      	lsrs	r3, r3, #26
 800289e:	3301      	adds	r3, #1
 80028a0:	f003 021f 	and.w	r2, r3, #31
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	051b      	lsls	r3, r3, #20
 80028ac:	e018      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x394>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80028c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80028c6:	2320      	movs	r3, #32
 80028c8:	e003      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	fab3 f383 	clz	r3, r3
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	3301      	adds	r3, #1
 80028d4:	f003 021f 	and.w	r2, r3, #31
 80028d8:	4613      	mov	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	4413      	add	r3, r2
 80028de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e0:	430b      	orrs	r3, r1
 80028e2:	e07e      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d107      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x3b4>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	0e9b      	lsrs	r3, r3, #26
 80028f6:	3301      	adds	r3, #1
 80028f8:	069b      	lsls	r3, r3, #26
 80028fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028fe:	e015      	b.n	800292c <HAL_ADC_ConfigChannel+0x3e0>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002908:	fa93 f3a3 	rbit	r3, r3
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002918:	2320      	movs	r3, #32
 800291a:	e003      	b.n	8002924 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	3301      	adds	r3, #1
 8002926:	069b      	lsls	r3, r3, #26
 8002928:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_ADC_ConfigChannel+0x400>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	0e9b      	lsrs	r3, r3, #26
 800293e:	3301      	adds	r3, #1
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	2101      	movs	r1, #1
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	e017      	b.n	800297c <HAL_ADC_ConfigChannel+0x430>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	61bb      	str	r3, [r7, #24]
  return result;
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002964:	2320      	movs	r3, #32
 8002966:	e003      	b.n	8002970 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3301      	adds	r3, #1
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	2101      	movs	r1, #1
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	ea42 0103 	orr.w	r1, r2, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10d      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x45c>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0e9b      	lsrs	r3, r3, #26
 8002992:	3301      	adds	r3, #1
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	3b1e      	subs	r3, #30
 80029a0:	051b      	lsls	r3, r3, #20
 80029a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029a6:	e01b      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x494>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	60fb      	str	r3, [r7, #12]
  return result;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80029c0:	2320      	movs	r3, #32
 80029c2:	e003      	b.n	80029cc <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	f003 021f 	and.w	r2, r3, #31
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	3b1e      	subs	r3, #30
 80029da:	051b      	lsls	r3, r3, #20
 80029dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029e0:	430b      	orrs	r3, r1
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	6892      	ldr	r2, [r2, #8]
 80029e6:	4619      	mov	r1, r3
 80029e8:	f7ff fa8a 	bl	8001f00 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	da77      	bge.n	8002ae4 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029f4:	4840      	ldr	r0, [pc, #256]	; (8002af8 <HAL_ADC_ConfigChannel+0x5ac>)
 80029f6:	f7ff f9cf 	bl	8001d98 <LL_ADC_GetCommonPathInternalCh>
 80029fa:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029fc:	483f      	ldr	r0, [pc, #252]	; (8002afc <HAL_ADC_ConfigChannel+0x5b0>)
 80029fe:	f7ff fb3f 	bl	8002080 <LL_ADC_IsEnabled>
 8002a02:	4604      	mov	r4, r0
 8002a04:	483e      	ldr	r0, [pc, #248]	; (8002b00 <HAL_ADC_ConfigChannel+0x5b4>)
 8002a06:	f7ff fb3b 	bl	8002080 <LL_ADC_IsEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	4323      	orrs	r3, r4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d155      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a3b      	ldr	r2, [pc, #236]	; (8002b04 <HAL_ADC_ConfigChannel+0x5b8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d122      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x516>
 8002a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11d      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a35      	ldr	r2, [pc, #212]	; (8002b00 <HAL_ADC_ConfigChannel+0x5b4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d159      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a36:	4619      	mov	r1, r3
 8002a38:	482f      	ldr	r0, [pc, #188]	; (8002af8 <HAL_ADC_ConfigChannel+0x5ac>)
 8002a3a:	f7ff f99a 	bl	8001d72 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a3e:	4b32      	ldr	r3, [pc, #200]	; (8002b08 <HAL_ADC_ConfigChannel+0x5bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	099b      	lsrs	r3, r3, #6
 8002a44:	4a31      	ldr	r2, [pc, #196]	; (8002b0c <HAL_ADC_ConfigChannel+0x5c0>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	099b      	lsrs	r3, r3, #6
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a52:	e002      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f9      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a60:	e040      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a2a      	ldr	r2, [pc, #168]	; (8002b10 <HAL_ADC_ConfigChannel+0x5c4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d111      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x544>
 8002a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10c      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a21      	ldr	r2, [pc, #132]	; (8002b00 <HAL_ADC_ConfigChannel+0x5b4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d131      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a86:	4619      	mov	r1, r3
 8002a88:	481b      	ldr	r0, [pc, #108]	; (8002af8 <HAL_ADC_ConfigChannel+0x5ac>)
 8002a8a:	f7ff f972 	bl	8001d72 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a8e:	e029      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <HAL_ADC_ConfigChannel+0x5c8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d124      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x598>
 8002a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d11f      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a15      	ldr	r2, [pc, #84]	; (8002b00 <HAL_ADC_ConfigChannel+0x5b4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d11a      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4810      	ldr	r0, [pc, #64]	; (8002af8 <HAL_ADC_ConfigChannel+0x5ac>)
 8002ab8:	f7ff f95b 	bl	8001d72 <LL_ADC_SetCommonPathInternalCh>
 8002abc:	e012      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac2:	f043 0220 	orr.w	r2, r3, #32
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ad0:	e008      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002aec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3784      	adds	r7, #132	; 0x84
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd90      	pop	{r4, r7, pc}
 8002af8:	40022300 	.word	0x40022300
 8002afc:	40022000 	.word	0x40022000
 8002b00:	40022100 	.word	0x40022100
 8002b04:	cb840000 	.word	0xcb840000
 8002b08:	24000000 	.word	0x24000000
 8002b0c:	053e2d63 	.word	0x053e2d63
 8002b10:	bac04000 	.word	0xbac04000
 8002b14:	cfb80000 	.word	0xcfb80000

08002b18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff faab 	bl	8002080 <LL_ADC_IsEnabled>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d161      	bne.n	8002bf4 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	4b32      	ldr	r3, [pc, #200]	; (8002c00 <ADC_Enable+0xe8>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00d      	beq.n	8002b5a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b42:	f043 0210 	orr.w	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e04d      	b.n	8002bf6 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fa7a 	bl	8002058 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b64:	f7ff f8c2 	bl	8001cec <HAL_GetTick>
 8002b68:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b6a:	4826      	ldr	r0, [pc, #152]	; (8002c04 <ADC_Enable+0xec>)
 8002b6c:	f7ff fa18 	bl	8001fa0 <LL_ADC_GetMultimode>
 8002b70:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a24      	ldr	r2, [pc, #144]	; (8002c08 <ADC_Enable+0xf0>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d002      	beq.n	8002b82 <ADC_Enable+0x6a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	e000      	b.n	8002b84 <ADC_Enable+0x6c>
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <ADC_Enable+0xf4>)
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d02c      	beq.n	8002be6 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d130      	bne.n	8002bf4 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b92:	e028      	b.n	8002be6 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fa71 	bl	8002080 <LL_ADC_IsEnabled>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d104      	bne.n	8002bae <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fa55 	bl	8002058 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bae:	f7ff f89d 	bl	8001cec <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d914      	bls.n	8002be6 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d00d      	beq.n	8002be6 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e007      	b.n	8002bf6 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d1cf      	bne.n	8002b94 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	8000003f 	.word	0x8000003f
 8002c04:	40022300 	.word	0x40022300
 8002c08:	40022100 	.word	0x40022100
 8002c0c:	40022000 	.word	0x40022000

08002c10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d14b      	bne.n	8002cc2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d021      	beq.n	8002c88 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff f907 	bl	8001e5c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d032      	beq.n	8002cba <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d12b      	bne.n	8002cba <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d11f      	bne.n	8002cba <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7e:	f043 0201 	orr.w	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
 8002c86:	e018      	b.n	8002cba <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d111      	bne.n	8002cba <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d105      	bne.n	8002cba <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f043 0201 	orr.w	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f7fe fb6e 	bl	800139c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cc0:	e00e      	b.n	8002ce0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff fc32 	bl	8002538 <HAL_ADC_ErrorCallback>
}
 8002cd4:	e004      	b.n	8002ce0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7fe fb2c 	bl	8001354 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	f043 0204 	orr.w	r2, r3, #4
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f7ff fc04 	bl	8002538 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002d40:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <ADC_ConfigureBoostMode+0x188>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01c      	beq.n	8002d86 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002d4c:	f004 f82c 	bl	8006da8 <HAL_RCC_GetHCLKFreq>
 8002d50:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d5a:	d010      	beq.n	8002d7e <ADC_ConfigureBoostMode+0x46>
 8002d5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d60:	d871      	bhi.n	8002e46 <ADC_ConfigureBoostMode+0x10e>
 8002d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d66:	d002      	beq.n	8002d6e <ADC_ConfigureBoostMode+0x36>
 8002d68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d6c:	d16b      	bne.n	8002e46 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	0c1b      	lsrs	r3, r3, #16
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7a:	60fb      	str	r3, [r7, #12]
        break;
 8002d7c:	e066      	b.n	8002e4c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	089b      	lsrs	r3, r3, #2
 8002d82:	60fb      	str	r3, [r7, #12]
        break;
 8002d84:	e062      	b.n	8002e4c <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002d86:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d8a:	f004 ff75 	bl	8007c78 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d8e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d98:	d051      	beq.n	8002e3e <ADC_ConfigureBoostMode+0x106>
 8002d9a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d9e:	d854      	bhi.n	8002e4a <ADC_ConfigureBoostMode+0x112>
 8002da0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002da4:	d047      	beq.n	8002e36 <ADC_ConfigureBoostMode+0xfe>
 8002da6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002daa:	d84e      	bhi.n	8002e4a <ADC_ConfigureBoostMode+0x112>
 8002dac:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002db0:	d03d      	beq.n	8002e2e <ADC_ConfigureBoostMode+0xf6>
 8002db2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002db6:	d848      	bhi.n	8002e4a <ADC_ConfigureBoostMode+0x112>
 8002db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dbc:	d033      	beq.n	8002e26 <ADC_ConfigureBoostMode+0xee>
 8002dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dc2:	d842      	bhi.n	8002e4a <ADC_ConfigureBoostMode+0x112>
 8002dc4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002dc8:	d029      	beq.n	8002e1e <ADC_ConfigureBoostMode+0xe6>
 8002dca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002dce:	d83c      	bhi.n	8002e4a <ADC_ConfigureBoostMode+0x112>
 8002dd0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002dd4:	d01a      	beq.n	8002e0c <ADC_ConfigureBoostMode+0xd4>
 8002dd6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002dda:	d836      	bhi.n	8002e4a <ADC_ConfigureBoostMode+0x112>
 8002ddc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002de0:	d014      	beq.n	8002e0c <ADC_ConfigureBoostMode+0xd4>
 8002de2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002de6:	d830      	bhi.n	8002e4a <ADC_ConfigureBoostMode+0x112>
 8002de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dec:	d00e      	beq.n	8002e0c <ADC_ConfigureBoostMode+0xd4>
 8002dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002df2:	d82a      	bhi.n	8002e4a <ADC_ConfigureBoostMode+0x112>
 8002df4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002df8:	d008      	beq.n	8002e0c <ADC_ConfigureBoostMode+0xd4>
 8002dfa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002dfe:	d824      	bhi.n	8002e4a <ADC_ConfigureBoostMode+0x112>
 8002e00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e04:	d002      	beq.n	8002e0c <ADC_ConfigureBoostMode+0xd4>
 8002e06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e0a:	d11e      	bne.n	8002e4a <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	0c9b      	lsrs	r3, r3, #18
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1a:	60fb      	str	r3, [r7, #12]
        break;
 8002e1c:	e016      	b.n	8002e4c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	60fb      	str	r3, [r7, #12]
        break;
 8002e24:	e012      	b.n	8002e4c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	60fb      	str	r3, [r7, #12]
        break;
 8002e2c:	e00e      	b.n	8002e4c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	099b      	lsrs	r3, r3, #6
 8002e32:	60fb      	str	r3, [r7, #12]
        break;
 8002e34:	e00a      	b.n	8002e4c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	09db      	lsrs	r3, r3, #7
 8002e3a:	60fb      	str	r3, [r7, #12]
        break;
 8002e3c:	e006      	b.n	8002e4c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	0a1b      	lsrs	r3, r3, #8
 8002e42:	60fb      	str	r3, [r7, #12]
        break;
 8002e44:	e002      	b.n	8002e4c <ADC_ConfigureBoostMode+0x114>
        break;
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002e4a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	085b      	lsrs	r3, r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <ADC_ConfigureBoostMode+0x18c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d808      	bhi.n	8002e6c <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e68:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002e6a:	e025      	b.n	8002eb8 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4a16      	ldr	r2, [pc, #88]	; (8002ec8 <ADC_ConfigureBoostMode+0x190>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d80a      	bhi.n	8002e8a <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e86:	609a      	str	r2, [r3, #8]
}
 8002e88:	e016      	b.n	8002eb8 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4a0f      	ldr	r2, [pc, #60]	; (8002ecc <ADC_ConfigureBoostMode+0x194>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d80a      	bhi.n	8002ea8 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea4:	609a      	str	r2, [r3, #8]
}
 8002ea6:	e007      	b.n	8002eb8 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002eb6:	609a      	str	r2, [r3, #8]
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40022300 	.word	0x40022300
 8002ec4:	005f5e10 	.word	0x005f5e10
 8002ec8:	00bebc20 	.word	0x00bebc20
 8002ecc:	017d7840 	.word	0x017d7840

08002ed0 <LL_ADC_IsEnabled>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <LL_ADC_IsEnabled+0x18>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e000      	b.n	8002eea <LL_ADC_IsEnabled+0x1a>
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d101      	bne.n	8002f0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b09f      	sub	sp, #124	; 0x7c
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e080      	b.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a3d      	ldr	r2, [pc, #244]	; (8003044 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d102      	bne.n	8002f5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f54:	4b3c      	ldr	r3, [pc, #240]	; (8003048 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	e001      	b.n	8002f5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10b      	bne.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f68:	f043 0220 	orr.w	r2, r3, #32
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e05f      	b.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ffb9 	bl	8002ef6 <LL_ADC_REG_IsConversionOngoing>
 8002f84:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ffb3 	bl	8002ef6 <LL_ADC_REG_IsConversionOngoing>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d141      	bne.n	800301a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d13e      	bne.n	800301a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	; (800304c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002f9e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d020      	beq.n	8002fea <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fba:	4822      	ldr	r0, [pc, #136]	; (8003044 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002fbc:	f7ff ff88 	bl	8002ed0 <LL_ADC_IsEnabled>
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	4821      	ldr	r0, [pc, #132]	; (8003048 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002fc4:	f7ff ff84 	bl	8002ed0 <LL_ADC_IsEnabled>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4323      	orrs	r3, r4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d12e      	bne.n	800302e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	6811      	ldr	r1, [r2, #0]
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	6892      	ldr	r2, [r2, #8]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fe8:	e021      	b.n	800302e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ff6:	4813      	ldr	r0, [pc, #76]	; (8003044 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ff8:	f7ff ff6a 	bl	8002ed0 <LL_ADC_IsEnabled>
 8002ffc:	4604      	mov	r4, r0
 8002ffe:	4812      	ldr	r0, [pc, #72]	; (8003048 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003000:	f7ff ff66 	bl	8002ed0 <LL_ADC_IsEnabled>
 8003004:	4603      	mov	r3, r0
 8003006:	4323      	orrs	r3, r4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d110      	bne.n	800302e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800300c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003012:	4013      	ands	r3, r2
 8003014:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003016:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003018:	e009      	b.n	800302e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	f043 0220 	orr.w	r2, r3, #32
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800302c:	e000      	b.n	8003030 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800302e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003038:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800303c:	4618      	mov	r0, r3
 800303e:	377c      	adds	r7, #124	; 0x7c
 8003040:	46bd      	mov	sp, r7
 8003042:	bd90      	pop	{r4, r7, pc}
 8003044:	40022000 	.word	0x40022000
 8003048:	40022100 	.word	0x40022100
 800304c:	40022300 	.word	0x40022300
 8003050:	fffff0e0 	.word	0xfffff0e0

08003054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <__NVIC_SetPriorityGrouping+0x40>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003070:	4013      	ands	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <__NVIC_SetPriorityGrouping+0x44>)
 800307e:	4313      	orrs	r3, r2
 8003080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003082:	4a04      	ldr	r2, [pc, #16]	; (8003094 <__NVIC_SetPriorityGrouping+0x40>)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	60d3      	str	r3, [r2, #12]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00
 8003098:	05fa0000 	.word	0x05fa0000

0800309c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <__NVIC_GetPriorityGrouping+0x18>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	f003 0307 	and.w	r3, r3, #7
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	db0b      	blt.n	80030e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	f003 021f 	and.w	r2, r3, #31
 80030d0:	4907      	ldr	r1, [pc, #28]	; (80030f0 <__NVIC_EnableIRQ+0x38>)
 80030d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	2001      	movs	r0, #1
 80030da:	fa00 f202 	lsl.w	r2, r0, r2
 80030de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000e100 	.word	0xe000e100

080030f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	6039      	str	r1, [r7, #0]
 80030fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003100:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003104:	2b00      	cmp	r3, #0
 8003106:	db0a      	blt.n	800311e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	b2da      	uxtb	r2, r3
 800310c:	490c      	ldr	r1, [pc, #48]	; (8003140 <__NVIC_SetPriority+0x4c>)
 800310e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003112:	0112      	lsls	r2, r2, #4
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	440b      	add	r3, r1
 8003118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800311c:	e00a      	b.n	8003134 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4908      	ldr	r1, [pc, #32]	; (8003144 <__NVIC_SetPriority+0x50>)
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	3b04      	subs	r3, #4
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	440b      	add	r3, r1
 8003132:	761a      	strb	r2, [r3, #24]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000e100 	.word	0xe000e100
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003148:	b480      	push	{r7}
 800314a:	b089      	sub	sp, #36	; 0x24
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f1c3 0307 	rsb	r3, r3, #7
 8003162:	2b04      	cmp	r3, #4
 8003164:	bf28      	it	cs
 8003166:	2304      	movcs	r3, #4
 8003168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3304      	adds	r3, #4
 800316e:	2b06      	cmp	r3, #6
 8003170:	d902      	bls.n	8003178 <NVIC_EncodePriority+0x30>
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3b03      	subs	r3, #3
 8003176:	e000      	b.n	800317a <NVIC_EncodePriority+0x32>
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800317c:	f04f 32ff 	mov.w	r2, #4294967295
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43da      	mvns	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	401a      	ands	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003190:	f04f 31ff 	mov.w	r1, #4294967295
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	43d9      	mvns	r1, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a0:	4313      	orrs	r3, r2
         );
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3724      	adds	r7, #36	; 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031c0:	d301      	bcc.n	80031c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031c2:	2301      	movs	r3, #1
 80031c4:	e00f      	b.n	80031e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <SysTick_Config+0x40>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ce:	210f      	movs	r1, #15
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	f7ff ff8e 	bl	80030f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d8:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <SysTick_Config+0x40>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031de:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <SysTick_Config+0x40>)
 80031e0:	2207      	movs	r2, #7
 80031e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	e000e010 	.word	0xe000e010

080031f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff ff29 	bl	8003054 <__NVIC_SetPriorityGrouping>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b086      	sub	sp, #24
 800320e:	af00      	add	r7, sp, #0
 8003210:	4603      	mov	r3, r0
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003218:	f7ff ff40 	bl	800309c <__NVIC_GetPriorityGrouping>
 800321c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	6978      	ldr	r0, [r7, #20]
 8003224:	f7ff ff90 	bl	8003148 <NVIC_EncodePriority>
 8003228:	4602      	mov	r2, r0
 800322a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff5f 	bl	80030f4 <__NVIC_SetPriority>
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff33 	bl	80030b8 <__NVIC_EnableIRQ>
}
 8003252:	bf00      	nop
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ffa4 	bl	80031b0 <SysTick_Config>
 8003268:	4603      	mov	r3, r0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e014      	b.n	80032ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	791b      	ldrb	r3, [r3, #4]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d105      	bne.n	800329a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7fd fef3 	bl	8001080 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2202      	movs	r2, #2
 800329e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	795b      	ldrb	r3, [r3, #5]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_DAC_Start_DMA+0x1e>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e0ab      	b.n	800342e <HAL_DAC_Start_DMA+0x176>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2202      	movs	r2, #2
 80032e0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d12f      	bne.n	8003348 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	4a52      	ldr	r2, [pc, #328]	; (8003438 <HAL_DAC_Start_DMA+0x180>)
 80032ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a51      	ldr	r2, [pc, #324]	; (800343c <HAL_DAC_Start_DMA+0x184>)
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	4a50      	ldr	r2, [pc, #320]	; (8003440 <HAL_DAC_Start_DMA+0x188>)
 80032fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800330e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	2b08      	cmp	r3, #8
 8003314:	d013      	beq.n	800333e <HAL_DAC_Start_DMA+0x86>
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d845      	bhi.n	80033a8 <HAL_DAC_Start_DMA+0xf0>
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_DAC_Start_DMA+0x72>
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d005      	beq.n	8003334 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003328:	e03e      	b.n	80033a8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3308      	adds	r3, #8
 8003330:	613b      	str	r3, [r7, #16]
        break;
 8003332:	e03c      	b.n	80033ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	613b      	str	r3, [r7, #16]
        break;
 800333c:	e037      	b.n	80033ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3310      	adds	r3, #16
 8003344:	613b      	str	r3, [r7, #16]
        break;
 8003346:	e032      	b.n	80033ae <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a3d      	ldr	r2, [pc, #244]	; (8003444 <HAL_DAC_Start_DMA+0x18c>)
 800334e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a3c      	ldr	r2, [pc, #240]	; (8003448 <HAL_DAC_Start_DMA+0x190>)
 8003356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4a3b      	ldr	r2, [pc, #236]	; (800344c <HAL_DAC_Start_DMA+0x194>)
 800335e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800336e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	2b08      	cmp	r3, #8
 8003374:	d013      	beq.n	800339e <HAL_DAC_Start_DMA+0xe6>
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d817      	bhi.n	80033ac <HAL_DAC_Start_DMA+0xf4>
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_DAC_Start_DMA+0xd2>
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	2b04      	cmp	r3, #4
 8003386:	d005      	beq.n	8003394 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003388:	e010      	b.n	80033ac <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3314      	adds	r3, #20
 8003390:	613b      	str	r3, [r7, #16]
        break;
 8003392:	e00c      	b.n	80033ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3318      	adds	r3, #24
 800339a:	613b      	str	r3, [r7, #16]
        break;
 800339c:	e007      	b.n	80033ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	331c      	adds	r3, #28
 80033a4:	613b      	str	r3, [r7, #16]
        break;
 80033a6:	e002      	b.n	80033ae <HAL_DAC_Start_DMA+0xf6>
        break;
 80033a8:	bf00      	nop
 80033aa:	e000      	b.n	80033ae <HAL_DAC_Start_DMA+0xf6>
        break;
 80033ac:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d111      	bne.n	80033d8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6898      	ldr	r0, [r3, #8]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	f000 fda7 	bl	8003f20 <HAL_DMA_Start_IT>
 80033d2:	4603      	mov	r3, r0
 80033d4:	75fb      	strb	r3, [r7, #23]
 80033d6:	e010      	b.n	80033fa <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80033e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	68d8      	ldr	r0, [r3, #12]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	f000 fd95 	bl	8003f20 <HAL_DMA_Start_IT>
 80033f6:	4603      	mov	r3, r0
 80033f8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10c      	bne.n	8003420 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2201      	movs	r2, #1
 8003414:	409a      	lsls	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e005      	b.n	800342c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f043 0204 	orr.w	r2, r3, #4
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800342c:	7dfb      	ldrb	r3, [r7, #23]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	080036ed 	.word	0x080036ed
 800343c:	0800370f 	.word	0x0800370f
 8003440:	0800372b 	.word	0x0800372b
 8003444:	08003795 	.word	0x08003795
 8003448:	080037b7 	.word	0x080037b7
 800344c:	080037d3 	.word	0x080037d3

08003450 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	795b      	ldrb	r3, [r3, #5]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_DAC_ConfigChannel+0x18>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e11d      	b.n	80036e0 <HAL_DAC_ConfigChannel+0x254>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2202      	movs	r2, #2
 80034ae:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d174      	bne.n	80035a2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80034b8:	f7fe fc18 	bl	8001cec <HAL_GetTick>
 80034bc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d134      	bne.n	800352e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034c4:	e011      	b.n	80034ea <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80034c6:	f7fe fc11 	bl	8001cec <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d90a      	bls.n	80034ea <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f043 0208 	orr.w	r2, r3, #8
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2203      	movs	r2, #3
 80034e4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e0fa      	b.n	80036e0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f0:	4b7d      	ldr	r3, [pc, #500]	; (80036e8 <HAL_DAC_ConfigChannel+0x25c>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e6      	bne.n	80034c6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80034f8:	2001      	movs	r0, #1
 80034fa:	f7fe fc03 	bl	8001d04 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	6992      	ldr	r2, [r2, #24]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
 8003508:	e01e      	b.n	8003548 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800350a:	f7fe fbef 	bl	8001cec <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	d90a      	bls.n	800352e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f043 0208 	orr.w	r2, r3, #8
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2203      	movs	r2, #3
 8003528:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e0d8      	b.n	80036e0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003534:	2b00      	cmp	r3, #0
 8003536:	dbe8      	blt.n	800350a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003538:	2001      	movs	r0, #1
 800353a:	f7fe fbe3 	bl	8001d04 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	6992      	ldr	r2, [r2, #24]
 8003546:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003558:	fa01 f303 	lsl.w	r3, r1, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	ea02 0103 	and.w	r1, r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	69da      	ldr	r2, [r3, #28]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	409a      	lsls	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	21ff      	movs	r1, #255	; 0xff
 8003584:	fa01 f303 	lsl.w	r3, r1, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	ea02 0103 	and.w	r1, r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	6a1a      	ldr	r2, [r3, #32]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	409a      	lsls	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d11d      	bne.n	80035e6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	221f      	movs	r2, #31
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	4013      	ands	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2207      	movs	r2, #7
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	4013      	ands	r3, r2
 8003600:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d102      	bne.n	8003610 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	e00f      	b.n	8003630 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d102      	bne.n	800361e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003618:	2301      	movs	r3, #1
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	e008      	b.n	8003630 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d102      	bne.n	800362c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003626:	2301      	movs	r3, #1
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	e001      	b.n	8003630 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4313      	orrs	r3, r2
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6819      	ldr	r1, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43da      	mvns	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	400a      	ands	r2, r1
 8003676:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f003 0310 	and.w	r3, r3, #16
 8003686:	f640 72fe 	movw	r2, #4094	; 0xffe
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4013      	ands	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f003 0310 	and.w	r3, r3, #16
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6819      	ldr	r1, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	22c0      	movs	r2, #192	; 0xc0
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43da      	mvns	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	400a      	ands	r2, r1
 80036d0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20008000 	.word	0x20008000

080036ec <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f7ff fea8 	bl	8003450 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	711a      	strb	r2, [r3, #4]
}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f7ff fea1 	bl	8003464 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	f043 0204 	orr.w	r2, r3, #4
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f7ff fe97 	bl	8003478 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	711a      	strb	r2, [r3, #4]
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f7ff ffd8 	bl	8003758 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	711a      	strb	r2, [r3, #4]
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f7ff ffd1 	bl	800376c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f043 0204 	orr.w	r2, r3, #4
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f7ff ffc7 	bl	8003780 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	711a      	strb	r2, [r3, #4]
}
 80037f8:	bf00      	nop
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003808:	f7fe fa70 	bl	8001cec <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e37f      	b.n	8003f18 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a66      	ldr	r2, [pc, #408]	; (80039b8 <HAL_DMA_Init+0x1b8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d04a      	beq.n	80038b8 <HAL_DMA_Init+0xb8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a65      	ldr	r2, [pc, #404]	; (80039bc <HAL_DMA_Init+0x1bc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d045      	beq.n	80038b8 <HAL_DMA_Init+0xb8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a63      	ldr	r2, [pc, #396]	; (80039c0 <HAL_DMA_Init+0x1c0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d040      	beq.n	80038b8 <HAL_DMA_Init+0xb8>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a62      	ldr	r2, [pc, #392]	; (80039c4 <HAL_DMA_Init+0x1c4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d03b      	beq.n	80038b8 <HAL_DMA_Init+0xb8>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a60      	ldr	r2, [pc, #384]	; (80039c8 <HAL_DMA_Init+0x1c8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d036      	beq.n	80038b8 <HAL_DMA_Init+0xb8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a5f      	ldr	r2, [pc, #380]	; (80039cc <HAL_DMA_Init+0x1cc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d031      	beq.n	80038b8 <HAL_DMA_Init+0xb8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a5d      	ldr	r2, [pc, #372]	; (80039d0 <HAL_DMA_Init+0x1d0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02c      	beq.n	80038b8 <HAL_DMA_Init+0xb8>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a5c      	ldr	r2, [pc, #368]	; (80039d4 <HAL_DMA_Init+0x1d4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d027      	beq.n	80038b8 <HAL_DMA_Init+0xb8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a5a      	ldr	r2, [pc, #360]	; (80039d8 <HAL_DMA_Init+0x1d8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d022      	beq.n	80038b8 <HAL_DMA_Init+0xb8>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a59      	ldr	r2, [pc, #356]	; (80039dc <HAL_DMA_Init+0x1dc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d01d      	beq.n	80038b8 <HAL_DMA_Init+0xb8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a57      	ldr	r2, [pc, #348]	; (80039e0 <HAL_DMA_Init+0x1e0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d018      	beq.n	80038b8 <HAL_DMA_Init+0xb8>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a56      	ldr	r2, [pc, #344]	; (80039e4 <HAL_DMA_Init+0x1e4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d013      	beq.n	80038b8 <HAL_DMA_Init+0xb8>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a54      	ldr	r2, [pc, #336]	; (80039e8 <HAL_DMA_Init+0x1e8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00e      	beq.n	80038b8 <HAL_DMA_Init+0xb8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a53      	ldr	r2, [pc, #332]	; (80039ec <HAL_DMA_Init+0x1ec>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d009      	beq.n	80038b8 <HAL_DMA_Init+0xb8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a51      	ldr	r2, [pc, #324]	; (80039f0 <HAL_DMA_Init+0x1f0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_DMA_Init+0xb8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a50      	ldr	r2, [pc, #320]	; (80039f4 <HAL_DMA_Init+0x1f4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d101      	bne.n	80038bc <HAL_DMA_Init+0xbc>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <HAL_DMA_Init+0xbe>
 80038bc:	2300      	movs	r3, #0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 813c 	beq.w	8003b3c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a37      	ldr	r2, [pc, #220]	; (80039b8 <HAL_DMA_Init+0x1b8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d04a      	beq.n	8003974 <HAL_DMA_Init+0x174>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a36      	ldr	r2, [pc, #216]	; (80039bc <HAL_DMA_Init+0x1bc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d045      	beq.n	8003974 <HAL_DMA_Init+0x174>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a34      	ldr	r2, [pc, #208]	; (80039c0 <HAL_DMA_Init+0x1c0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d040      	beq.n	8003974 <HAL_DMA_Init+0x174>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a33      	ldr	r2, [pc, #204]	; (80039c4 <HAL_DMA_Init+0x1c4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d03b      	beq.n	8003974 <HAL_DMA_Init+0x174>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a31      	ldr	r2, [pc, #196]	; (80039c8 <HAL_DMA_Init+0x1c8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d036      	beq.n	8003974 <HAL_DMA_Init+0x174>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a30      	ldr	r2, [pc, #192]	; (80039cc <HAL_DMA_Init+0x1cc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d031      	beq.n	8003974 <HAL_DMA_Init+0x174>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a2e      	ldr	r2, [pc, #184]	; (80039d0 <HAL_DMA_Init+0x1d0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d02c      	beq.n	8003974 <HAL_DMA_Init+0x174>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2d      	ldr	r2, [pc, #180]	; (80039d4 <HAL_DMA_Init+0x1d4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d027      	beq.n	8003974 <HAL_DMA_Init+0x174>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a2b      	ldr	r2, [pc, #172]	; (80039d8 <HAL_DMA_Init+0x1d8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d022      	beq.n	8003974 <HAL_DMA_Init+0x174>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2a      	ldr	r2, [pc, #168]	; (80039dc <HAL_DMA_Init+0x1dc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d01d      	beq.n	8003974 <HAL_DMA_Init+0x174>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a28      	ldr	r2, [pc, #160]	; (80039e0 <HAL_DMA_Init+0x1e0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d018      	beq.n	8003974 <HAL_DMA_Init+0x174>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a27      	ldr	r2, [pc, #156]	; (80039e4 <HAL_DMA_Init+0x1e4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <HAL_DMA_Init+0x174>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a25      	ldr	r2, [pc, #148]	; (80039e8 <HAL_DMA_Init+0x1e8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00e      	beq.n	8003974 <HAL_DMA_Init+0x174>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a24      	ldr	r2, [pc, #144]	; (80039ec <HAL_DMA_Init+0x1ec>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_DMA_Init+0x174>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a22      	ldr	r2, [pc, #136]	; (80039f0 <HAL_DMA_Init+0x1f0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_DMA_Init+0x174>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <HAL_DMA_Init+0x1f4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d108      	bne.n	8003986 <HAL_DMA_Init+0x186>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	e007      	b.n	8003996 <HAL_DMA_Init+0x196>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003996:	e02f      	b.n	80039f8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003998:	f7fe f9a8 	bl	8001cec <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b05      	cmp	r3, #5
 80039a4:	d928      	bls.n	80039f8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2203      	movs	r2, #3
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e2af      	b.n	8003f18 <HAL_DMA_Init+0x718>
 80039b8:	40020010 	.word	0x40020010
 80039bc:	40020028 	.word	0x40020028
 80039c0:	40020040 	.word	0x40020040
 80039c4:	40020058 	.word	0x40020058
 80039c8:	40020070 	.word	0x40020070
 80039cc:	40020088 	.word	0x40020088
 80039d0:	400200a0 	.word	0x400200a0
 80039d4:	400200b8 	.word	0x400200b8
 80039d8:	40020410 	.word	0x40020410
 80039dc:	40020428 	.word	0x40020428
 80039e0:	40020440 	.word	0x40020440
 80039e4:	40020458 	.word	0x40020458
 80039e8:	40020470 	.word	0x40020470
 80039ec:	40020488 	.word	0x40020488
 80039f0:	400204a0 	.word	0x400204a0
 80039f4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1c8      	bne.n	8003998 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4b73      	ldr	r3, [pc, #460]	; (8003be0 <HAL_DMA_Init+0x3e0>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003a1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a36:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d107      	bne.n	8003a5c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	4313      	orrs	r3, r2
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b28      	cmp	r3, #40	; 0x28
 8003a62:	d903      	bls.n	8003a6c <HAL_DMA_Init+0x26c>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b2e      	cmp	r3, #46	; 0x2e
 8003a6a:	d91f      	bls.n	8003aac <HAL_DMA_Init+0x2ac>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b3e      	cmp	r3, #62	; 0x3e
 8003a72:	d903      	bls.n	8003a7c <HAL_DMA_Init+0x27c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b42      	cmp	r3, #66	; 0x42
 8003a7a:	d917      	bls.n	8003aac <HAL_DMA_Init+0x2ac>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b46      	cmp	r3, #70	; 0x46
 8003a82:	d903      	bls.n	8003a8c <HAL_DMA_Init+0x28c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b48      	cmp	r3, #72	; 0x48
 8003a8a:	d90f      	bls.n	8003aac <HAL_DMA_Init+0x2ac>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b4e      	cmp	r3, #78	; 0x4e
 8003a92:	d903      	bls.n	8003a9c <HAL_DMA_Init+0x29c>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	2b52      	cmp	r3, #82	; 0x52
 8003a9a:	d907      	bls.n	8003aac <HAL_DMA_Init+0x2ac>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2b73      	cmp	r3, #115	; 0x73
 8003aa2:	d905      	bls.n	8003ab0 <HAL_DMA_Init+0x2b0>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b77      	cmp	r3, #119	; 0x77
 8003aaa:	d801      	bhi.n	8003ab0 <HAL_DMA_Init+0x2b0>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <HAL_DMA_Init+0x2b2>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003abc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f023 0307 	bic.w	r3, r3, #7
 8003ad4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d117      	bne.n	8003b18 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00e      	beq.n	8003b18 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f001 fe72 	bl	80057e4 <DMA_CheckFifoParam>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2240      	movs	r2, #64	; 0x40
 8003b0a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e1ff      	b.n	8003f18 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f001 fdad 	bl	8005680 <DMA_CalcBaseAndBitshift>
 8003b26:	4603      	mov	r3, r0
 8003b28:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	223f      	movs	r2, #63	; 0x3f
 8003b34:	409a      	lsls	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	609a      	str	r2, [r3, #8]
 8003b3a:	e0fe      	b.n	8003d3a <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a28      	ldr	r2, [pc, #160]	; (8003be4 <HAL_DMA_Init+0x3e4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d04a      	beq.n	8003bdc <HAL_DMA_Init+0x3dc>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a27      	ldr	r2, [pc, #156]	; (8003be8 <HAL_DMA_Init+0x3e8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d045      	beq.n	8003bdc <HAL_DMA_Init+0x3dc>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a25      	ldr	r2, [pc, #148]	; (8003bec <HAL_DMA_Init+0x3ec>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d040      	beq.n	8003bdc <HAL_DMA_Init+0x3dc>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a24      	ldr	r2, [pc, #144]	; (8003bf0 <HAL_DMA_Init+0x3f0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d03b      	beq.n	8003bdc <HAL_DMA_Init+0x3dc>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a22      	ldr	r2, [pc, #136]	; (8003bf4 <HAL_DMA_Init+0x3f4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d036      	beq.n	8003bdc <HAL_DMA_Init+0x3dc>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a21      	ldr	r2, [pc, #132]	; (8003bf8 <HAL_DMA_Init+0x3f8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d031      	beq.n	8003bdc <HAL_DMA_Init+0x3dc>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <HAL_DMA_Init+0x3fc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d02c      	beq.n	8003bdc <HAL_DMA_Init+0x3dc>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <HAL_DMA_Init+0x400>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d027      	beq.n	8003bdc <HAL_DMA_Init+0x3dc>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1c      	ldr	r2, [pc, #112]	; (8003c04 <HAL_DMA_Init+0x404>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d022      	beq.n	8003bdc <HAL_DMA_Init+0x3dc>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <HAL_DMA_Init+0x408>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d01d      	beq.n	8003bdc <HAL_DMA_Init+0x3dc>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a19      	ldr	r2, [pc, #100]	; (8003c0c <HAL_DMA_Init+0x40c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d018      	beq.n	8003bdc <HAL_DMA_Init+0x3dc>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <HAL_DMA_Init+0x410>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d013      	beq.n	8003bdc <HAL_DMA_Init+0x3dc>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a16      	ldr	r2, [pc, #88]	; (8003c14 <HAL_DMA_Init+0x414>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00e      	beq.n	8003bdc <HAL_DMA_Init+0x3dc>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a15      	ldr	r2, [pc, #84]	; (8003c18 <HAL_DMA_Init+0x418>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d009      	beq.n	8003bdc <HAL_DMA_Init+0x3dc>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a13      	ldr	r2, [pc, #76]	; (8003c1c <HAL_DMA_Init+0x41c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d004      	beq.n	8003bdc <HAL_DMA_Init+0x3dc>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <HAL_DMA_Init+0x420>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d123      	bne.n	8003c24 <HAL_DMA_Init+0x424>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e022      	b.n	8003c26 <HAL_DMA_Init+0x426>
 8003be0:	fe10803f 	.word	0xfe10803f
 8003be4:	48022c08 	.word	0x48022c08
 8003be8:	48022c1c 	.word	0x48022c1c
 8003bec:	48022c30 	.word	0x48022c30
 8003bf0:	48022c44 	.word	0x48022c44
 8003bf4:	48022c58 	.word	0x48022c58
 8003bf8:	48022c6c 	.word	0x48022c6c
 8003bfc:	48022c80 	.word	0x48022c80
 8003c00:	48022c94 	.word	0x48022c94
 8003c04:	58025408 	.word	0x58025408
 8003c08:	5802541c 	.word	0x5802541c
 8003c0c:	58025430 	.word	0x58025430
 8003c10:	58025444 	.word	0x58025444
 8003c14:	58025458 	.word	0x58025458
 8003c18:	5802546c 	.word	0x5802546c
 8003c1c:	58025480 	.word	0x58025480
 8003c20:	58025494 	.word	0x58025494
 8003c24:	2300      	movs	r3, #0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d07e      	beq.n	8003d28 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a80      	ldr	r2, [pc, #512]	; (8003e30 <HAL_DMA_Init+0x630>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d021      	beq.n	8003c78 <HAL_DMA_Init+0x478>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a7e      	ldr	r2, [pc, #504]	; (8003e34 <HAL_DMA_Init+0x634>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01c      	beq.n	8003c78 <HAL_DMA_Init+0x478>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7d      	ldr	r2, [pc, #500]	; (8003e38 <HAL_DMA_Init+0x638>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d017      	beq.n	8003c78 <HAL_DMA_Init+0x478>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a7b      	ldr	r2, [pc, #492]	; (8003e3c <HAL_DMA_Init+0x63c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d012      	beq.n	8003c78 <HAL_DMA_Init+0x478>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a7a      	ldr	r2, [pc, #488]	; (8003e40 <HAL_DMA_Init+0x640>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00d      	beq.n	8003c78 <HAL_DMA_Init+0x478>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a78      	ldr	r2, [pc, #480]	; (8003e44 <HAL_DMA_Init+0x644>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d008      	beq.n	8003c78 <HAL_DMA_Init+0x478>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a77      	ldr	r2, [pc, #476]	; (8003e48 <HAL_DMA_Init+0x648>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d003      	beq.n	8003c78 <HAL_DMA_Init+0x478>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a75      	ldr	r2, [pc, #468]	; (8003e4c <HAL_DMA_Init+0x64c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4b6e      	ldr	r3, [pc, #440]	; (8003e50 <HAL_DMA_Init+0x650>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	d008      	beq.n	8003cb4 <HAL_DMA_Init+0x4b4>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b80      	cmp	r3, #128	; 0x80
 8003ca8:	d102      	bne.n	8003cb0 <HAL_DMA_Init+0x4b0>
 8003caa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cae:	e002      	b.n	8003cb6 <HAL_DMA_Init+0x4b6>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_DMA_Init+0x4b6>
 8003cb4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68d2      	ldr	r2, [r2, #12]
 8003cba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003cbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003cc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ccc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003cd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003cdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ce4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b56      	ldr	r3, [pc, #344]	; (8003e54 <HAL_DMA_Init+0x654>)
 8003cfc:	4413      	add	r3, r2
 8003cfe:	4a56      	ldr	r2, [pc, #344]	; (8003e58 <HAL_DMA_Init+0x658>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	009a      	lsls	r2, r3, #2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f001 fcb7 	bl	8005680 <DMA_CalcBaseAndBitshift>
 8003d12:	4603      	mov	r3, r0
 8003d14:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2201      	movs	r2, #1
 8003d20:	409a      	lsls	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	e008      	b.n	8003d3a <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2240      	movs	r2, #64	; 0x40
 8003d2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2203      	movs	r2, #3
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e0ee      	b.n	8003f18 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a47      	ldr	r2, [pc, #284]	; (8003e5c <HAL_DMA_Init+0x65c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d072      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a45      	ldr	r2, [pc, #276]	; (8003e60 <HAL_DMA_Init+0x660>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d06d      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a44      	ldr	r2, [pc, #272]	; (8003e64 <HAL_DMA_Init+0x664>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d068      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a42      	ldr	r2, [pc, #264]	; (8003e68 <HAL_DMA_Init+0x668>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d063      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a41      	ldr	r2, [pc, #260]	; (8003e6c <HAL_DMA_Init+0x66c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d05e      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a3f      	ldr	r2, [pc, #252]	; (8003e70 <HAL_DMA_Init+0x670>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d059      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a3e      	ldr	r2, [pc, #248]	; (8003e74 <HAL_DMA_Init+0x674>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d054      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a3c      	ldr	r2, [pc, #240]	; (8003e78 <HAL_DMA_Init+0x678>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d04f      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a3b      	ldr	r2, [pc, #236]	; (8003e7c <HAL_DMA_Init+0x67c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d04a      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a39      	ldr	r2, [pc, #228]	; (8003e80 <HAL_DMA_Init+0x680>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d045      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a38      	ldr	r2, [pc, #224]	; (8003e84 <HAL_DMA_Init+0x684>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d040      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a36      	ldr	r2, [pc, #216]	; (8003e88 <HAL_DMA_Init+0x688>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d03b      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a35      	ldr	r2, [pc, #212]	; (8003e8c <HAL_DMA_Init+0x68c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d036      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a33      	ldr	r2, [pc, #204]	; (8003e90 <HAL_DMA_Init+0x690>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d031      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a32      	ldr	r2, [pc, #200]	; (8003e94 <HAL_DMA_Init+0x694>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d02c      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a30      	ldr	r2, [pc, #192]	; (8003e98 <HAL_DMA_Init+0x698>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d027      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <HAL_DMA_Init+0x630>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d022      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a12      	ldr	r2, [pc, #72]	; (8003e34 <HAL_DMA_Init+0x634>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d01d      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a11      	ldr	r2, [pc, #68]	; (8003e38 <HAL_DMA_Init+0x638>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d018      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a0f      	ldr	r2, [pc, #60]	; (8003e3c <HAL_DMA_Init+0x63c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d013      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <HAL_DMA_Init+0x640>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00e      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a0c      	ldr	r2, [pc, #48]	; (8003e44 <HAL_DMA_Init+0x644>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d009      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a0b      	ldr	r2, [pc, #44]	; (8003e48 <HAL_DMA_Init+0x648>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d004      	beq.n	8003e2a <HAL_DMA_Init+0x62a>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a09      	ldr	r2, [pc, #36]	; (8003e4c <HAL_DMA_Init+0x64c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d138      	bne.n	8003e9c <HAL_DMA_Init+0x69c>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e037      	b.n	8003e9e <HAL_DMA_Init+0x69e>
 8003e2e:	bf00      	nop
 8003e30:	58025408 	.word	0x58025408
 8003e34:	5802541c 	.word	0x5802541c
 8003e38:	58025430 	.word	0x58025430
 8003e3c:	58025444 	.word	0x58025444
 8003e40:	58025458 	.word	0x58025458
 8003e44:	5802546c 	.word	0x5802546c
 8003e48:	58025480 	.word	0x58025480
 8003e4c:	58025494 	.word	0x58025494
 8003e50:	fffe000f 	.word	0xfffe000f
 8003e54:	a7fdabf8 	.word	0xa7fdabf8
 8003e58:	cccccccd 	.word	0xcccccccd
 8003e5c:	40020010 	.word	0x40020010
 8003e60:	40020028 	.word	0x40020028
 8003e64:	40020040 	.word	0x40020040
 8003e68:	40020058 	.word	0x40020058
 8003e6c:	40020070 	.word	0x40020070
 8003e70:	40020088 	.word	0x40020088
 8003e74:	400200a0 	.word	0x400200a0
 8003e78:	400200b8 	.word	0x400200b8
 8003e7c:	40020410 	.word	0x40020410
 8003e80:	40020428 	.word	0x40020428
 8003e84:	40020440 	.word	0x40020440
 8003e88:	40020458 	.word	0x40020458
 8003e8c:	40020470 	.word	0x40020470
 8003e90:	40020488 	.word	0x40020488
 8003e94:	400204a0 	.word	0x400204a0
 8003e98:	400204b8 	.word	0x400204b8
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d032      	beq.n	8003f08 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f001 fd1a 	bl	80058dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b80      	cmp	r3, #128	; 0x80
 8003eae:	d102      	bne.n	8003eb6 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003eca:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d010      	beq.n	8003ef6 <HAL_DMA_Init+0x6f6>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d80c      	bhi.n	8003ef6 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f001 fd97 	bl	8005a10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ef2:	605a      	str	r2, [r3, #4]
 8003ef4:	e008      	b.n	8003f08 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e226      	b.n	800438a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_DMA_Start_IT+0x2a>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e21f      	b.n	800438a <HAL_DMA_Start_IT+0x46a>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	f040 820a 	bne.w	8004374 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a68      	ldr	r2, [pc, #416]	; (8004114 <HAL_DMA_Start_IT+0x1f4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d04a      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a66      	ldr	r2, [pc, #408]	; (8004118 <HAL_DMA_Start_IT+0x1f8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d045      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a65      	ldr	r2, [pc, #404]	; (800411c <HAL_DMA_Start_IT+0x1fc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d040      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a63      	ldr	r2, [pc, #396]	; (8004120 <HAL_DMA_Start_IT+0x200>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d03b      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a62      	ldr	r2, [pc, #392]	; (8004124 <HAL_DMA_Start_IT+0x204>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d036      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a60      	ldr	r2, [pc, #384]	; (8004128 <HAL_DMA_Start_IT+0x208>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d031      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a5f      	ldr	r2, [pc, #380]	; (800412c <HAL_DMA_Start_IT+0x20c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d02c      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a5d      	ldr	r2, [pc, #372]	; (8004130 <HAL_DMA_Start_IT+0x210>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d027      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a5c      	ldr	r2, [pc, #368]	; (8004134 <HAL_DMA_Start_IT+0x214>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d022      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a5a      	ldr	r2, [pc, #360]	; (8004138 <HAL_DMA_Start_IT+0x218>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01d      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a59      	ldr	r2, [pc, #356]	; (800413c <HAL_DMA_Start_IT+0x21c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d018      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a57      	ldr	r2, [pc, #348]	; (8004140 <HAL_DMA_Start_IT+0x220>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a56      	ldr	r2, [pc, #344]	; (8004144 <HAL_DMA_Start_IT+0x224>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a54      	ldr	r2, [pc, #336]	; (8004148 <HAL_DMA_Start_IT+0x228>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d009      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a53      	ldr	r2, [pc, #332]	; (800414c <HAL_DMA_Start_IT+0x22c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_DMA_Start_IT+0xee>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a51      	ldr	r2, [pc, #324]	; (8004150 <HAL_DMA_Start_IT+0x230>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d108      	bne.n	8004020 <HAL_DMA_Start_IT+0x100>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e007      	b.n	8004030 <HAL_DMA_Start_IT+0x110>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0201 	bic.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f001 f93e 	bl	80052b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a34      	ldr	r2, [pc, #208]	; (8004114 <HAL_DMA_Start_IT+0x1f4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d04a      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a33      	ldr	r2, [pc, #204]	; (8004118 <HAL_DMA_Start_IT+0x1f8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d045      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a31      	ldr	r2, [pc, #196]	; (800411c <HAL_DMA_Start_IT+0x1fc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d040      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a30      	ldr	r2, [pc, #192]	; (8004120 <HAL_DMA_Start_IT+0x200>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d03b      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2e      	ldr	r2, [pc, #184]	; (8004124 <HAL_DMA_Start_IT+0x204>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d036      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a2d      	ldr	r2, [pc, #180]	; (8004128 <HAL_DMA_Start_IT+0x208>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d031      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2b      	ldr	r2, [pc, #172]	; (800412c <HAL_DMA_Start_IT+0x20c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d02c      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a2a      	ldr	r2, [pc, #168]	; (8004130 <HAL_DMA_Start_IT+0x210>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d027      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a28      	ldr	r2, [pc, #160]	; (8004134 <HAL_DMA_Start_IT+0x214>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d022      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a27      	ldr	r2, [pc, #156]	; (8004138 <HAL_DMA_Start_IT+0x218>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d01d      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a25      	ldr	r2, [pc, #148]	; (800413c <HAL_DMA_Start_IT+0x21c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d018      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a24      	ldr	r2, [pc, #144]	; (8004140 <HAL_DMA_Start_IT+0x220>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a22      	ldr	r2, [pc, #136]	; (8004144 <HAL_DMA_Start_IT+0x224>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00e      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a21      	ldr	r2, [pc, #132]	; (8004148 <HAL_DMA_Start_IT+0x228>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d009      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1f      	ldr	r2, [pc, #124]	; (800414c <HAL_DMA_Start_IT+0x22c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_DMA_Start_IT+0x1bc>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1e      	ldr	r2, [pc, #120]	; (8004150 <HAL_DMA_Start_IT+0x230>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d101      	bne.n	80040e0 <HAL_DMA_Start_IT+0x1c0>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <HAL_DMA_Start_IT+0x1c2>
 80040e0:	2300      	movs	r3, #0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d036      	beq.n	8004154 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 021e 	bic.w	r2, r3, #30
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0216 	orr.w	r2, r2, #22
 80040f8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d03e      	beq.n	8004180 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0208 	orr.w	r2, r2, #8
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e035      	b.n	8004180 <HAL_DMA_Start_IT+0x260>
 8004114:	40020010 	.word	0x40020010
 8004118:	40020028 	.word	0x40020028
 800411c:	40020040 	.word	0x40020040
 8004120:	40020058 	.word	0x40020058
 8004124:	40020070 	.word	0x40020070
 8004128:	40020088 	.word	0x40020088
 800412c:	400200a0 	.word	0x400200a0
 8004130:	400200b8 	.word	0x400200b8
 8004134:	40020410 	.word	0x40020410
 8004138:	40020428 	.word	0x40020428
 800413c:	40020440 	.word	0x40020440
 8004140:	40020458 	.word	0x40020458
 8004144:	40020470 	.word	0x40020470
 8004148:	40020488 	.word	0x40020488
 800414c:	400204a0 	.word	0x400204a0
 8004150:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 020e 	bic.w	r2, r3, #14
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 020a 	orr.w	r2, r2, #10
 8004166:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d007      	beq.n	8004180 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0204 	orr.w	r2, r2, #4
 800417e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a83      	ldr	r2, [pc, #524]	; (8004394 <HAL_DMA_Start_IT+0x474>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d072      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a82      	ldr	r2, [pc, #520]	; (8004398 <HAL_DMA_Start_IT+0x478>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d06d      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a80      	ldr	r2, [pc, #512]	; (800439c <HAL_DMA_Start_IT+0x47c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d068      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a7f      	ldr	r2, [pc, #508]	; (80043a0 <HAL_DMA_Start_IT+0x480>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d063      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a7d      	ldr	r2, [pc, #500]	; (80043a4 <HAL_DMA_Start_IT+0x484>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d05e      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a7c      	ldr	r2, [pc, #496]	; (80043a8 <HAL_DMA_Start_IT+0x488>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d059      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a7a      	ldr	r2, [pc, #488]	; (80043ac <HAL_DMA_Start_IT+0x48c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d054      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a79      	ldr	r2, [pc, #484]	; (80043b0 <HAL_DMA_Start_IT+0x490>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d04f      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a77      	ldr	r2, [pc, #476]	; (80043b4 <HAL_DMA_Start_IT+0x494>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d04a      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a76      	ldr	r2, [pc, #472]	; (80043b8 <HAL_DMA_Start_IT+0x498>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d045      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a74      	ldr	r2, [pc, #464]	; (80043bc <HAL_DMA_Start_IT+0x49c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d040      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a73      	ldr	r2, [pc, #460]	; (80043c0 <HAL_DMA_Start_IT+0x4a0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d03b      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a71      	ldr	r2, [pc, #452]	; (80043c4 <HAL_DMA_Start_IT+0x4a4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d036      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a70      	ldr	r2, [pc, #448]	; (80043c8 <HAL_DMA_Start_IT+0x4a8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d031      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a6e      	ldr	r2, [pc, #440]	; (80043cc <HAL_DMA_Start_IT+0x4ac>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d02c      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a6d      	ldr	r2, [pc, #436]	; (80043d0 <HAL_DMA_Start_IT+0x4b0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d027      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a6b      	ldr	r2, [pc, #428]	; (80043d4 <HAL_DMA_Start_IT+0x4b4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d022      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a6a      	ldr	r2, [pc, #424]	; (80043d8 <HAL_DMA_Start_IT+0x4b8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d01d      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a68      	ldr	r2, [pc, #416]	; (80043dc <HAL_DMA_Start_IT+0x4bc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d018      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a67      	ldr	r2, [pc, #412]	; (80043e0 <HAL_DMA_Start_IT+0x4c0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a65      	ldr	r2, [pc, #404]	; (80043e4 <HAL_DMA_Start_IT+0x4c4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00e      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a64      	ldr	r2, [pc, #400]	; (80043e8 <HAL_DMA_Start_IT+0x4c8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d009      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a62      	ldr	r2, [pc, #392]	; (80043ec <HAL_DMA_Start_IT+0x4cc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_DMA_Start_IT+0x350>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a61      	ldr	r2, [pc, #388]	; (80043f0 <HAL_DMA_Start_IT+0x4d0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d101      	bne.n	8004274 <HAL_DMA_Start_IT+0x354>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <HAL_DMA_Start_IT+0x356>
 8004274:	2300      	movs	r3, #0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01a      	beq.n	80042b0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004292:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004296:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d007      	beq.n	80042b0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a37      	ldr	r2, [pc, #220]	; (8004394 <HAL_DMA_Start_IT+0x474>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d04a      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a36      	ldr	r2, [pc, #216]	; (8004398 <HAL_DMA_Start_IT+0x478>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d045      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a34      	ldr	r2, [pc, #208]	; (800439c <HAL_DMA_Start_IT+0x47c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d040      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a33      	ldr	r2, [pc, #204]	; (80043a0 <HAL_DMA_Start_IT+0x480>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d03b      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a31      	ldr	r2, [pc, #196]	; (80043a4 <HAL_DMA_Start_IT+0x484>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d036      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a30      	ldr	r2, [pc, #192]	; (80043a8 <HAL_DMA_Start_IT+0x488>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d031      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a2e      	ldr	r2, [pc, #184]	; (80043ac <HAL_DMA_Start_IT+0x48c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d02c      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a2d      	ldr	r2, [pc, #180]	; (80043b0 <HAL_DMA_Start_IT+0x490>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d027      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a2b      	ldr	r2, [pc, #172]	; (80043b4 <HAL_DMA_Start_IT+0x494>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d022      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2a      	ldr	r2, [pc, #168]	; (80043b8 <HAL_DMA_Start_IT+0x498>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d01d      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a28      	ldr	r2, [pc, #160]	; (80043bc <HAL_DMA_Start_IT+0x49c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d018      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a27      	ldr	r2, [pc, #156]	; (80043c0 <HAL_DMA_Start_IT+0x4a0>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a25      	ldr	r2, [pc, #148]	; (80043c4 <HAL_DMA_Start_IT+0x4a4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00e      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a24      	ldr	r2, [pc, #144]	; (80043c8 <HAL_DMA_Start_IT+0x4a8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d009      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a22      	ldr	r2, [pc, #136]	; (80043cc <HAL_DMA_Start_IT+0x4ac>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_DMA_Start_IT+0x430>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a21      	ldr	r2, [pc, #132]	; (80043d0 <HAL_DMA_Start_IT+0x4b0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d108      	bne.n	8004362 <HAL_DMA_Start_IT+0x442>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	e012      	b.n	8004388 <HAL_DMA_Start_IT+0x468>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0201 	orr.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	e009      	b.n	8004388 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800437a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004388:	7dfb      	ldrb	r3, [r7, #23]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40020010 	.word	0x40020010
 8004398:	40020028 	.word	0x40020028
 800439c:	40020040 	.word	0x40020040
 80043a0:	40020058 	.word	0x40020058
 80043a4:	40020070 	.word	0x40020070
 80043a8:	40020088 	.word	0x40020088
 80043ac:	400200a0 	.word	0x400200a0
 80043b0:	400200b8 	.word	0x400200b8
 80043b4:	40020410 	.word	0x40020410
 80043b8:	40020428 	.word	0x40020428
 80043bc:	40020440 	.word	0x40020440
 80043c0:	40020458 	.word	0x40020458
 80043c4:	40020470 	.word	0x40020470
 80043c8:	40020488 	.word	0x40020488
 80043cc:	400204a0 	.word	0x400204a0
 80043d0:	400204b8 	.word	0x400204b8
 80043d4:	58025408 	.word	0x58025408
 80043d8:	5802541c 	.word	0x5802541c
 80043dc:	58025430 	.word	0x58025430
 80043e0:	58025444 	.word	0x58025444
 80043e4:	58025458 	.word	0x58025458
 80043e8:	5802546c 	.word	0x5802546c
 80043ec:	58025480 	.word	0x58025480
 80043f0:	58025494 	.word	0x58025494

080043f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	; 0x28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004400:	4b67      	ldr	r3, [pc, #412]	; (80045a0 <HAL_DMA_IRQHandler+0x1ac>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a67      	ldr	r2, [pc, #412]	; (80045a4 <HAL_DMA_IRQHandler+0x1b0>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	0a9b      	lsrs	r3, r3, #10
 800440c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004418:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a5f      	ldr	r2, [pc, #380]	; (80045a8 <HAL_DMA_IRQHandler+0x1b4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d04a      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xd2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a5d      	ldr	r2, [pc, #372]	; (80045ac <HAL_DMA_IRQHandler+0x1b8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d045      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xd2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a5c      	ldr	r2, [pc, #368]	; (80045b0 <HAL_DMA_IRQHandler+0x1bc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d040      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xd2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a5a      	ldr	r2, [pc, #360]	; (80045b4 <HAL_DMA_IRQHandler+0x1c0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d03b      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xd2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a59      	ldr	r2, [pc, #356]	; (80045b8 <HAL_DMA_IRQHandler+0x1c4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d036      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xd2>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a57      	ldr	r2, [pc, #348]	; (80045bc <HAL_DMA_IRQHandler+0x1c8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d031      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xd2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a56      	ldr	r2, [pc, #344]	; (80045c0 <HAL_DMA_IRQHandler+0x1cc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d02c      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xd2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a54      	ldr	r2, [pc, #336]	; (80045c4 <HAL_DMA_IRQHandler+0x1d0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d027      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xd2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a53      	ldr	r2, [pc, #332]	; (80045c8 <HAL_DMA_IRQHandler+0x1d4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d022      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xd2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a51      	ldr	r2, [pc, #324]	; (80045cc <HAL_DMA_IRQHandler+0x1d8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01d      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xd2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a50      	ldr	r2, [pc, #320]	; (80045d0 <HAL_DMA_IRQHandler+0x1dc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d018      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xd2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a4e      	ldr	r2, [pc, #312]	; (80045d4 <HAL_DMA_IRQHandler+0x1e0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xd2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a4d      	ldr	r2, [pc, #308]	; (80045d8 <HAL_DMA_IRQHandler+0x1e4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00e      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xd2>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a4b      	ldr	r2, [pc, #300]	; (80045dc <HAL_DMA_IRQHandler+0x1e8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d009      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xd2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a4a      	ldr	r2, [pc, #296]	; (80045e0 <HAL_DMA_IRQHandler+0x1ec>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d004      	beq.n	80044c6 <HAL_DMA_IRQHandler+0xd2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a48      	ldr	r2, [pc, #288]	; (80045e4 <HAL_DMA_IRQHandler+0x1f0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d101      	bne.n	80044ca <HAL_DMA_IRQHandler+0xd6>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <HAL_DMA_IRQHandler+0xd8>
 80044ca:	2300      	movs	r3, #0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 842b 	beq.w	8004d28 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	2208      	movs	r2, #8
 80044dc:	409a      	lsls	r2, r3
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80a2 	beq.w	800462c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a2e      	ldr	r2, [pc, #184]	; (80045a8 <HAL_DMA_IRQHandler+0x1b4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d04a      	beq.n	8004588 <HAL_DMA_IRQHandler+0x194>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a2d      	ldr	r2, [pc, #180]	; (80045ac <HAL_DMA_IRQHandler+0x1b8>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d045      	beq.n	8004588 <HAL_DMA_IRQHandler+0x194>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a2b      	ldr	r2, [pc, #172]	; (80045b0 <HAL_DMA_IRQHandler+0x1bc>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d040      	beq.n	8004588 <HAL_DMA_IRQHandler+0x194>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2a      	ldr	r2, [pc, #168]	; (80045b4 <HAL_DMA_IRQHandler+0x1c0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d03b      	beq.n	8004588 <HAL_DMA_IRQHandler+0x194>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a28      	ldr	r2, [pc, #160]	; (80045b8 <HAL_DMA_IRQHandler+0x1c4>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d036      	beq.n	8004588 <HAL_DMA_IRQHandler+0x194>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a27      	ldr	r2, [pc, #156]	; (80045bc <HAL_DMA_IRQHandler+0x1c8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d031      	beq.n	8004588 <HAL_DMA_IRQHandler+0x194>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a25      	ldr	r2, [pc, #148]	; (80045c0 <HAL_DMA_IRQHandler+0x1cc>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d02c      	beq.n	8004588 <HAL_DMA_IRQHandler+0x194>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a24      	ldr	r2, [pc, #144]	; (80045c4 <HAL_DMA_IRQHandler+0x1d0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d027      	beq.n	8004588 <HAL_DMA_IRQHandler+0x194>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a22      	ldr	r2, [pc, #136]	; (80045c8 <HAL_DMA_IRQHandler+0x1d4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d022      	beq.n	8004588 <HAL_DMA_IRQHandler+0x194>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a21      	ldr	r2, [pc, #132]	; (80045cc <HAL_DMA_IRQHandler+0x1d8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d01d      	beq.n	8004588 <HAL_DMA_IRQHandler+0x194>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1f      	ldr	r2, [pc, #124]	; (80045d0 <HAL_DMA_IRQHandler+0x1dc>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d018      	beq.n	8004588 <HAL_DMA_IRQHandler+0x194>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1e      	ldr	r2, [pc, #120]	; (80045d4 <HAL_DMA_IRQHandler+0x1e0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d013      	beq.n	8004588 <HAL_DMA_IRQHandler+0x194>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1c      	ldr	r2, [pc, #112]	; (80045d8 <HAL_DMA_IRQHandler+0x1e4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00e      	beq.n	8004588 <HAL_DMA_IRQHandler+0x194>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1b      	ldr	r2, [pc, #108]	; (80045dc <HAL_DMA_IRQHandler+0x1e8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_DMA_IRQHandler+0x194>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a19      	ldr	r2, [pc, #100]	; (80045e0 <HAL_DMA_IRQHandler+0x1ec>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_DMA_IRQHandler+0x194>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <HAL_DMA_IRQHandler+0x1f0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d12f      	bne.n	80045e8 <HAL_DMA_IRQHandler+0x1f4>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	bf14      	ite	ne
 8004596:	2301      	movne	r3, #1
 8004598:	2300      	moveq	r3, #0
 800459a:	b2db      	uxtb	r3, r3
 800459c:	e02e      	b.n	80045fc <HAL_DMA_IRQHandler+0x208>
 800459e:	bf00      	nop
 80045a0:	24000000 	.word	0x24000000
 80045a4:	1b4e81b5 	.word	0x1b4e81b5
 80045a8:	40020010 	.word	0x40020010
 80045ac:	40020028 	.word	0x40020028
 80045b0:	40020040 	.word	0x40020040
 80045b4:	40020058 	.word	0x40020058
 80045b8:	40020070 	.word	0x40020070
 80045bc:	40020088 	.word	0x40020088
 80045c0:	400200a0 	.word	0x400200a0
 80045c4:	400200b8 	.word	0x400200b8
 80045c8:	40020410 	.word	0x40020410
 80045cc:	40020428 	.word	0x40020428
 80045d0:	40020440 	.word	0x40020440
 80045d4:	40020458 	.word	0x40020458
 80045d8:	40020470 	.word	0x40020470
 80045dc:	40020488 	.word	0x40020488
 80045e0:	400204a0 	.word	0x400204a0
 80045e4:	400204b8 	.word	0x400204b8
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bf14      	ite	ne
 80045f6:	2301      	movne	r3, #1
 80045f8:	2300      	moveq	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d015      	beq.n	800462c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0204 	bic.w	r2, r2, #4
 800460e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	2208      	movs	r2, #8
 800461a:	409a      	lsls	r2, r3
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004624:	f043 0201 	orr.w	r2, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004630:	f003 031f 	and.w	r3, r3, #31
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	fa22 f303 	lsr.w	r3, r2, r3
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d06e      	beq.n	8004720 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a69      	ldr	r2, [pc, #420]	; (80047ec <HAL_DMA_IRQHandler+0x3f8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d04a      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x2ee>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a67      	ldr	r2, [pc, #412]	; (80047f0 <HAL_DMA_IRQHandler+0x3fc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d045      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x2ee>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a66      	ldr	r2, [pc, #408]	; (80047f4 <HAL_DMA_IRQHandler+0x400>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d040      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x2ee>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a64      	ldr	r2, [pc, #400]	; (80047f8 <HAL_DMA_IRQHandler+0x404>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d03b      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x2ee>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a63      	ldr	r2, [pc, #396]	; (80047fc <HAL_DMA_IRQHandler+0x408>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d036      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x2ee>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a61      	ldr	r2, [pc, #388]	; (8004800 <HAL_DMA_IRQHandler+0x40c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d031      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x2ee>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a60      	ldr	r2, [pc, #384]	; (8004804 <HAL_DMA_IRQHandler+0x410>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d02c      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x2ee>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a5e      	ldr	r2, [pc, #376]	; (8004808 <HAL_DMA_IRQHandler+0x414>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d027      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x2ee>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a5d      	ldr	r2, [pc, #372]	; (800480c <HAL_DMA_IRQHandler+0x418>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d022      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x2ee>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a5b      	ldr	r2, [pc, #364]	; (8004810 <HAL_DMA_IRQHandler+0x41c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01d      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x2ee>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a5a      	ldr	r2, [pc, #360]	; (8004814 <HAL_DMA_IRQHandler+0x420>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d018      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x2ee>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a58      	ldr	r2, [pc, #352]	; (8004818 <HAL_DMA_IRQHandler+0x424>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d013      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x2ee>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a57      	ldr	r2, [pc, #348]	; (800481c <HAL_DMA_IRQHandler+0x428>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00e      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x2ee>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a55      	ldr	r2, [pc, #340]	; (8004820 <HAL_DMA_IRQHandler+0x42c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d009      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x2ee>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a54      	ldr	r2, [pc, #336]	; (8004824 <HAL_DMA_IRQHandler+0x430>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d004      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x2ee>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a52      	ldr	r2, [pc, #328]	; (8004828 <HAL_DMA_IRQHandler+0x434>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d10a      	bne.n	80046f8 <HAL_DMA_IRQHandler+0x304>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e003      	b.n	8004700 <HAL_DMA_IRQHandler+0x30c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2300      	movs	r3, #0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00d      	beq.n	8004720 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	2201      	movs	r2, #1
 800470e:	409a      	lsls	r2, r3
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004718:	f043 0202 	orr.w	r2, r3, #2
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	2204      	movs	r2, #4
 800472a:	409a      	lsls	r2, r3
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 808f 	beq.w	8004854 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a2c      	ldr	r2, [pc, #176]	; (80047ec <HAL_DMA_IRQHandler+0x3f8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d04a      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3e2>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a2a      	ldr	r2, [pc, #168]	; (80047f0 <HAL_DMA_IRQHandler+0x3fc>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d045      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3e2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a29      	ldr	r2, [pc, #164]	; (80047f4 <HAL_DMA_IRQHandler+0x400>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d040      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3e2>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a27      	ldr	r2, [pc, #156]	; (80047f8 <HAL_DMA_IRQHandler+0x404>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d03b      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3e2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a26      	ldr	r2, [pc, #152]	; (80047fc <HAL_DMA_IRQHandler+0x408>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d036      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3e2>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a24      	ldr	r2, [pc, #144]	; (8004800 <HAL_DMA_IRQHandler+0x40c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d031      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3e2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a23      	ldr	r2, [pc, #140]	; (8004804 <HAL_DMA_IRQHandler+0x410>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d02c      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3e2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a21      	ldr	r2, [pc, #132]	; (8004808 <HAL_DMA_IRQHandler+0x414>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d027      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3e2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a20      	ldr	r2, [pc, #128]	; (800480c <HAL_DMA_IRQHandler+0x418>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d022      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3e2>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1e      	ldr	r2, [pc, #120]	; (8004810 <HAL_DMA_IRQHandler+0x41c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d01d      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3e2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <HAL_DMA_IRQHandler+0x420>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d018      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3e2>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a1b      	ldr	r2, [pc, #108]	; (8004818 <HAL_DMA_IRQHandler+0x424>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3e2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1a      	ldr	r2, [pc, #104]	; (800481c <HAL_DMA_IRQHandler+0x428>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00e      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3e2>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a18      	ldr	r2, [pc, #96]	; (8004820 <HAL_DMA_IRQHandler+0x42c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d009      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3e2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a17      	ldr	r2, [pc, #92]	; (8004824 <HAL_DMA_IRQHandler+0x430>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_DMA_IRQHandler+0x3e2>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a15      	ldr	r2, [pc, #84]	; (8004828 <HAL_DMA_IRQHandler+0x434>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d12a      	bne.n	800482c <HAL_DMA_IRQHandler+0x438>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e023      	b.n	8004834 <HAL_DMA_IRQHandler+0x440>
 80047ec:	40020010 	.word	0x40020010
 80047f0:	40020028 	.word	0x40020028
 80047f4:	40020040 	.word	0x40020040
 80047f8:	40020058 	.word	0x40020058
 80047fc:	40020070 	.word	0x40020070
 8004800:	40020088 	.word	0x40020088
 8004804:	400200a0 	.word	0x400200a0
 8004808:	400200b8 	.word	0x400200b8
 800480c:	40020410 	.word	0x40020410
 8004810:	40020428 	.word	0x40020428
 8004814:	40020440 	.word	0x40020440
 8004818:	40020458 	.word	0x40020458
 800481c:	40020470 	.word	0x40020470
 8004820:	40020488 	.word	0x40020488
 8004824:	400204a0 	.word	0x400204a0
 8004828:	400204b8 	.word	0x400204b8
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2300      	movs	r3, #0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00d      	beq.n	8004854 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	2204      	movs	r2, #4
 8004842:	409a      	lsls	r2, r3
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484c:	f043 0204 	orr.w	r2, r3, #4
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	2210      	movs	r2, #16
 800485e:	409a      	lsls	r2, r3
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	4013      	ands	r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 80a6 	beq.w	80049b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a85      	ldr	r2, [pc, #532]	; (8004a84 <HAL_DMA_IRQHandler+0x690>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d04a      	beq.n	800490a <HAL_DMA_IRQHandler+0x516>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a83      	ldr	r2, [pc, #524]	; (8004a88 <HAL_DMA_IRQHandler+0x694>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d045      	beq.n	800490a <HAL_DMA_IRQHandler+0x516>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a82      	ldr	r2, [pc, #520]	; (8004a8c <HAL_DMA_IRQHandler+0x698>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d040      	beq.n	800490a <HAL_DMA_IRQHandler+0x516>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a80      	ldr	r2, [pc, #512]	; (8004a90 <HAL_DMA_IRQHandler+0x69c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d03b      	beq.n	800490a <HAL_DMA_IRQHandler+0x516>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a7f      	ldr	r2, [pc, #508]	; (8004a94 <HAL_DMA_IRQHandler+0x6a0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d036      	beq.n	800490a <HAL_DMA_IRQHandler+0x516>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a7d      	ldr	r2, [pc, #500]	; (8004a98 <HAL_DMA_IRQHandler+0x6a4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d031      	beq.n	800490a <HAL_DMA_IRQHandler+0x516>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a7c      	ldr	r2, [pc, #496]	; (8004a9c <HAL_DMA_IRQHandler+0x6a8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d02c      	beq.n	800490a <HAL_DMA_IRQHandler+0x516>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a7a      	ldr	r2, [pc, #488]	; (8004aa0 <HAL_DMA_IRQHandler+0x6ac>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d027      	beq.n	800490a <HAL_DMA_IRQHandler+0x516>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a79      	ldr	r2, [pc, #484]	; (8004aa4 <HAL_DMA_IRQHandler+0x6b0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d022      	beq.n	800490a <HAL_DMA_IRQHandler+0x516>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a77      	ldr	r2, [pc, #476]	; (8004aa8 <HAL_DMA_IRQHandler+0x6b4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d01d      	beq.n	800490a <HAL_DMA_IRQHandler+0x516>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a76      	ldr	r2, [pc, #472]	; (8004aac <HAL_DMA_IRQHandler+0x6b8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d018      	beq.n	800490a <HAL_DMA_IRQHandler+0x516>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a74      	ldr	r2, [pc, #464]	; (8004ab0 <HAL_DMA_IRQHandler+0x6bc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d013      	beq.n	800490a <HAL_DMA_IRQHandler+0x516>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a73      	ldr	r2, [pc, #460]	; (8004ab4 <HAL_DMA_IRQHandler+0x6c0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00e      	beq.n	800490a <HAL_DMA_IRQHandler+0x516>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a71      	ldr	r2, [pc, #452]	; (8004ab8 <HAL_DMA_IRQHandler+0x6c4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d009      	beq.n	800490a <HAL_DMA_IRQHandler+0x516>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a70      	ldr	r2, [pc, #448]	; (8004abc <HAL_DMA_IRQHandler+0x6c8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d004      	beq.n	800490a <HAL_DMA_IRQHandler+0x516>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a6e      	ldr	r2, [pc, #440]	; (8004ac0 <HAL_DMA_IRQHandler+0x6cc>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d10a      	bne.n	8004920 <HAL_DMA_IRQHandler+0x52c>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf14      	ite	ne
 8004918:	2301      	movne	r3, #1
 800491a:	2300      	moveq	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	e009      	b.n	8004934 <HAL_DMA_IRQHandler+0x540>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	bf14      	ite	ne
 800492e:	2301      	movne	r3, #1
 8004930:	2300      	moveq	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d03e      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	2210      	movs	r2, #16
 8004942:	409a      	lsls	r2, r3
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d018      	beq.n	8004988 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d108      	bne.n	8004976 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d024      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	4798      	blx	r3
 8004974:	e01f      	b.n	80049b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497a:	2b00      	cmp	r3, #0
 800497c:	d01b      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
 8004986:	e016      	b.n	80049b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d107      	bne.n	80049a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0208 	bic.w	r2, r2, #8
 80049a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	2220      	movs	r2, #32
 80049c0:	409a      	lsls	r2, r3
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 8110 	beq.w	8004bec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a2c      	ldr	r2, [pc, #176]	; (8004a84 <HAL_DMA_IRQHandler+0x690>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d04a      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x678>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a2b      	ldr	r2, [pc, #172]	; (8004a88 <HAL_DMA_IRQHandler+0x694>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d045      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x678>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a29      	ldr	r2, [pc, #164]	; (8004a8c <HAL_DMA_IRQHandler+0x698>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d040      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x678>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a28      	ldr	r2, [pc, #160]	; (8004a90 <HAL_DMA_IRQHandler+0x69c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d03b      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x678>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a26      	ldr	r2, [pc, #152]	; (8004a94 <HAL_DMA_IRQHandler+0x6a0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d036      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x678>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a25      	ldr	r2, [pc, #148]	; (8004a98 <HAL_DMA_IRQHandler+0x6a4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d031      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x678>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a23      	ldr	r2, [pc, #140]	; (8004a9c <HAL_DMA_IRQHandler+0x6a8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d02c      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x678>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a22      	ldr	r2, [pc, #136]	; (8004aa0 <HAL_DMA_IRQHandler+0x6ac>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d027      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x678>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a20      	ldr	r2, [pc, #128]	; (8004aa4 <HAL_DMA_IRQHandler+0x6b0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d022      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x678>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1f      	ldr	r2, [pc, #124]	; (8004aa8 <HAL_DMA_IRQHandler+0x6b4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d01d      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x678>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a1d      	ldr	r2, [pc, #116]	; (8004aac <HAL_DMA_IRQHandler+0x6b8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d018      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x678>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1c      	ldr	r2, [pc, #112]	; (8004ab0 <HAL_DMA_IRQHandler+0x6bc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d013      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x678>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a1a      	ldr	r2, [pc, #104]	; (8004ab4 <HAL_DMA_IRQHandler+0x6c0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00e      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x678>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a19      	ldr	r2, [pc, #100]	; (8004ab8 <HAL_DMA_IRQHandler+0x6c4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d009      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x678>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a17      	ldr	r2, [pc, #92]	; (8004abc <HAL_DMA_IRQHandler+0x6c8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <HAL_DMA_IRQHandler+0x678>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a16      	ldr	r2, [pc, #88]	; (8004ac0 <HAL_DMA_IRQHandler+0x6cc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d12b      	bne.n	8004ac4 <HAL_DMA_IRQHandler+0x6d0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bf14      	ite	ne
 8004a7a:	2301      	movne	r3, #1
 8004a7c:	2300      	moveq	r3, #0
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	e02a      	b.n	8004ad8 <HAL_DMA_IRQHandler+0x6e4>
 8004a82:	bf00      	nop
 8004a84:	40020010 	.word	0x40020010
 8004a88:	40020028 	.word	0x40020028
 8004a8c:	40020040 	.word	0x40020040
 8004a90:	40020058 	.word	0x40020058
 8004a94:	40020070 	.word	0x40020070
 8004a98:	40020088 	.word	0x40020088
 8004a9c:	400200a0 	.word	0x400200a0
 8004aa0:	400200b8 	.word	0x400200b8
 8004aa4:	40020410 	.word	0x40020410
 8004aa8:	40020428 	.word	0x40020428
 8004aac:	40020440 	.word	0x40020440
 8004ab0:	40020458 	.word	0x40020458
 8004ab4:	40020470 	.word	0x40020470
 8004ab8:	40020488 	.word	0x40020488
 8004abc:	400204a0 	.word	0x400204a0
 8004ac0:	400204b8 	.word	0x400204b8
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bf14      	ite	ne
 8004ad2:	2301      	movne	r3, #1
 8004ad4:	2300      	moveq	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 8087 	beq.w	8004bec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae2:	f003 031f 	and.w	r3, r3, #31
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d139      	bne.n	8004b6e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0216 	bic.w	r2, r2, #22
 8004b08:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695a      	ldr	r2, [r3, #20]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b18:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d103      	bne.n	8004b2a <HAL_DMA_IRQHandler+0x736>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0208 	bic.w	r2, r2, #8
 8004b38:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3e:	f003 031f 	and.w	r3, r3, #31
 8004b42:	223f      	movs	r2, #63	; 0x3f
 8004b44:	409a      	lsls	r2, r3
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 8382 	beq.w	8005268 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	4798      	blx	r3
          }
          return;
 8004b6c:	e37c      	b.n	8005268 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d018      	beq.n	8004bae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d108      	bne.n	8004b9c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d02c      	beq.n	8004bec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	4798      	blx	r3
 8004b9a:	e027      	b.n	8004bec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d023      	beq.n	8004bec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	4798      	blx	r3
 8004bac:	e01e      	b.n	8004bec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10f      	bne.n	8004bdc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0210 	bic.w	r2, r2, #16
 8004bca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 833e 	beq.w	8005272 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 8088 	beq.w	8004d14 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2204      	movs	r2, #4
 8004c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a89      	ldr	r2, [pc, #548]	; (8004e38 <HAL_DMA_IRQHandler+0xa44>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d04a      	beq.n	8004cac <HAL_DMA_IRQHandler+0x8b8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a88      	ldr	r2, [pc, #544]	; (8004e3c <HAL_DMA_IRQHandler+0xa48>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d045      	beq.n	8004cac <HAL_DMA_IRQHandler+0x8b8>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a86      	ldr	r2, [pc, #536]	; (8004e40 <HAL_DMA_IRQHandler+0xa4c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d040      	beq.n	8004cac <HAL_DMA_IRQHandler+0x8b8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a85      	ldr	r2, [pc, #532]	; (8004e44 <HAL_DMA_IRQHandler+0xa50>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d03b      	beq.n	8004cac <HAL_DMA_IRQHandler+0x8b8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a83      	ldr	r2, [pc, #524]	; (8004e48 <HAL_DMA_IRQHandler+0xa54>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d036      	beq.n	8004cac <HAL_DMA_IRQHandler+0x8b8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a82      	ldr	r2, [pc, #520]	; (8004e4c <HAL_DMA_IRQHandler+0xa58>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d031      	beq.n	8004cac <HAL_DMA_IRQHandler+0x8b8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a80      	ldr	r2, [pc, #512]	; (8004e50 <HAL_DMA_IRQHandler+0xa5c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d02c      	beq.n	8004cac <HAL_DMA_IRQHandler+0x8b8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a7f      	ldr	r2, [pc, #508]	; (8004e54 <HAL_DMA_IRQHandler+0xa60>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d027      	beq.n	8004cac <HAL_DMA_IRQHandler+0x8b8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a7d      	ldr	r2, [pc, #500]	; (8004e58 <HAL_DMA_IRQHandler+0xa64>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d022      	beq.n	8004cac <HAL_DMA_IRQHandler+0x8b8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a7c      	ldr	r2, [pc, #496]	; (8004e5c <HAL_DMA_IRQHandler+0xa68>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d01d      	beq.n	8004cac <HAL_DMA_IRQHandler+0x8b8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a7a      	ldr	r2, [pc, #488]	; (8004e60 <HAL_DMA_IRQHandler+0xa6c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d018      	beq.n	8004cac <HAL_DMA_IRQHandler+0x8b8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a79      	ldr	r2, [pc, #484]	; (8004e64 <HAL_DMA_IRQHandler+0xa70>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d013      	beq.n	8004cac <HAL_DMA_IRQHandler+0x8b8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a77      	ldr	r2, [pc, #476]	; (8004e68 <HAL_DMA_IRQHandler+0xa74>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00e      	beq.n	8004cac <HAL_DMA_IRQHandler+0x8b8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a76      	ldr	r2, [pc, #472]	; (8004e6c <HAL_DMA_IRQHandler+0xa78>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d009      	beq.n	8004cac <HAL_DMA_IRQHandler+0x8b8>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a74      	ldr	r2, [pc, #464]	; (8004e70 <HAL_DMA_IRQHandler+0xa7c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_DMA_IRQHandler+0x8b8>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a73      	ldr	r2, [pc, #460]	; (8004e74 <HAL_DMA_IRQHandler+0xa80>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d108      	bne.n	8004cbe <HAL_DMA_IRQHandler+0x8ca>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0201 	bic.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	e007      	b.n	8004cce <HAL_DMA_IRQHandler+0x8da>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0201 	bic.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d307      	bcc.n	8004cea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f2      	bne.n	8004cce <HAL_DMA_IRQHandler+0x8da>
 8004ce8:	e000      	b.n	8004cec <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004cea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d004      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004d02:	e003      	b.n	8004d0c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 82aa 	beq.w	8005272 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4798      	blx	r3
 8004d26:	e2a4      	b.n	8005272 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a52      	ldr	r2, [pc, #328]	; (8004e78 <HAL_DMA_IRQHandler+0xa84>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d04a      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x9d4>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a51      	ldr	r2, [pc, #324]	; (8004e7c <HAL_DMA_IRQHandler+0xa88>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d045      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x9d4>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a4f      	ldr	r2, [pc, #316]	; (8004e80 <HAL_DMA_IRQHandler+0xa8c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d040      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x9d4>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a4e      	ldr	r2, [pc, #312]	; (8004e84 <HAL_DMA_IRQHandler+0xa90>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d03b      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x9d4>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a4c      	ldr	r2, [pc, #304]	; (8004e88 <HAL_DMA_IRQHandler+0xa94>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d036      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x9d4>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a4b      	ldr	r2, [pc, #300]	; (8004e8c <HAL_DMA_IRQHandler+0xa98>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d031      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x9d4>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a49      	ldr	r2, [pc, #292]	; (8004e90 <HAL_DMA_IRQHandler+0xa9c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d02c      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x9d4>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a48      	ldr	r2, [pc, #288]	; (8004e94 <HAL_DMA_IRQHandler+0xaa0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d027      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x9d4>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a46      	ldr	r2, [pc, #280]	; (8004e98 <HAL_DMA_IRQHandler+0xaa4>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d022      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x9d4>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a45      	ldr	r2, [pc, #276]	; (8004e9c <HAL_DMA_IRQHandler+0xaa8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d01d      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x9d4>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a43      	ldr	r2, [pc, #268]	; (8004ea0 <HAL_DMA_IRQHandler+0xaac>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d018      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x9d4>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a42      	ldr	r2, [pc, #264]	; (8004ea4 <HAL_DMA_IRQHandler+0xab0>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d013      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x9d4>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a40      	ldr	r2, [pc, #256]	; (8004ea8 <HAL_DMA_IRQHandler+0xab4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d00e      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x9d4>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a3f      	ldr	r2, [pc, #252]	; (8004eac <HAL_DMA_IRQHandler+0xab8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d009      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x9d4>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a3d      	ldr	r2, [pc, #244]	; (8004eb0 <HAL_DMA_IRQHandler+0xabc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_DMA_IRQHandler+0x9d4>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a3c      	ldr	r2, [pc, #240]	; (8004eb4 <HAL_DMA_IRQHandler+0xac0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <HAL_DMA_IRQHandler+0x9d8>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e000      	b.n	8004dce <HAL_DMA_IRQHandler+0x9da>
 8004dcc:	2300      	movs	r3, #0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 824f 	beq.w	8005272 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de0:	f003 031f 	and.w	r3, r3, #31
 8004de4:	2204      	movs	r2, #4
 8004de6:	409a      	lsls	r2, r3
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 80dd 	beq.w	8004fac <HAL_DMA_IRQHandler+0xbb8>
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80d7 	beq.w	8004fac <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2204      	movs	r2, #4
 8004e08:	409a      	lsls	r2, r3
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d059      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d14a      	bne.n	8004eb8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 8220 	beq.w	800526c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e34:	e21a      	b.n	800526c <HAL_DMA_IRQHandler+0xe78>
 8004e36:	bf00      	nop
 8004e38:	40020010 	.word	0x40020010
 8004e3c:	40020028 	.word	0x40020028
 8004e40:	40020040 	.word	0x40020040
 8004e44:	40020058 	.word	0x40020058
 8004e48:	40020070 	.word	0x40020070
 8004e4c:	40020088 	.word	0x40020088
 8004e50:	400200a0 	.word	0x400200a0
 8004e54:	400200b8 	.word	0x400200b8
 8004e58:	40020410 	.word	0x40020410
 8004e5c:	40020428 	.word	0x40020428
 8004e60:	40020440 	.word	0x40020440
 8004e64:	40020458 	.word	0x40020458
 8004e68:	40020470 	.word	0x40020470
 8004e6c:	40020488 	.word	0x40020488
 8004e70:	400204a0 	.word	0x400204a0
 8004e74:	400204b8 	.word	0x400204b8
 8004e78:	48022c08 	.word	0x48022c08
 8004e7c:	48022c1c 	.word	0x48022c1c
 8004e80:	48022c30 	.word	0x48022c30
 8004e84:	48022c44 	.word	0x48022c44
 8004e88:	48022c58 	.word	0x48022c58
 8004e8c:	48022c6c 	.word	0x48022c6c
 8004e90:	48022c80 	.word	0x48022c80
 8004e94:	48022c94 	.word	0x48022c94
 8004e98:	58025408 	.word	0x58025408
 8004e9c:	5802541c 	.word	0x5802541c
 8004ea0:	58025430 	.word	0x58025430
 8004ea4:	58025444 	.word	0x58025444
 8004ea8:	58025458 	.word	0x58025458
 8004eac:	5802546c 	.word	0x5802546c
 8004eb0:	58025480 	.word	0x58025480
 8004eb4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 81d5 	beq.w	800526c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eca:	e1cf      	b.n	800526c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d160      	bne.n	8004f98 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a7f      	ldr	r2, [pc, #508]	; (80050d8 <HAL_DMA_IRQHandler+0xce4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d04a      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb82>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a7d      	ldr	r2, [pc, #500]	; (80050dc <HAL_DMA_IRQHandler+0xce8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d045      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb82>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a7c      	ldr	r2, [pc, #496]	; (80050e0 <HAL_DMA_IRQHandler+0xcec>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d040      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb82>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a7a      	ldr	r2, [pc, #488]	; (80050e4 <HAL_DMA_IRQHandler+0xcf0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d03b      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb82>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a79      	ldr	r2, [pc, #484]	; (80050e8 <HAL_DMA_IRQHandler+0xcf4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d036      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb82>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a77      	ldr	r2, [pc, #476]	; (80050ec <HAL_DMA_IRQHandler+0xcf8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d031      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb82>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a76      	ldr	r2, [pc, #472]	; (80050f0 <HAL_DMA_IRQHandler+0xcfc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d02c      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb82>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a74      	ldr	r2, [pc, #464]	; (80050f4 <HAL_DMA_IRQHandler+0xd00>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d027      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb82>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a73      	ldr	r2, [pc, #460]	; (80050f8 <HAL_DMA_IRQHandler+0xd04>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d022      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb82>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a71      	ldr	r2, [pc, #452]	; (80050fc <HAL_DMA_IRQHandler+0xd08>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01d      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb82>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a70      	ldr	r2, [pc, #448]	; (8005100 <HAL_DMA_IRQHandler+0xd0c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d018      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb82>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a6e      	ldr	r2, [pc, #440]	; (8005104 <HAL_DMA_IRQHandler+0xd10>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb82>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a6d      	ldr	r2, [pc, #436]	; (8005108 <HAL_DMA_IRQHandler+0xd14>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00e      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb82>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a6b      	ldr	r2, [pc, #428]	; (800510c <HAL_DMA_IRQHandler+0xd18>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d009      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb82>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a6a      	ldr	r2, [pc, #424]	; (8005110 <HAL_DMA_IRQHandler+0xd1c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d004      	beq.n	8004f76 <HAL_DMA_IRQHandler+0xb82>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a68      	ldr	r2, [pc, #416]	; (8005114 <HAL_DMA_IRQHandler+0xd20>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d108      	bne.n	8004f88 <HAL_DMA_IRQHandler+0xb94>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0208 	bic.w	r2, r2, #8
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	e007      	b.n	8004f98 <HAL_DMA_IRQHandler+0xba4>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0204 	bic.w	r2, r2, #4
 8004f96:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8165 	beq.w	800526c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004faa:	e15f      	b.n	800526c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb0:	f003 031f 	and.w	r3, r3, #31
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	409a      	lsls	r2, r3
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80c5 	beq.w	800514c <HAL_DMA_IRQHandler+0xd58>
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80bf 	beq.w	800514c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	409a      	lsls	r2, r3
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d018      	beq.n	800501a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d109      	bne.n	8005006 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 813a 	beq.w	8005270 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005004:	e134      	b.n	8005270 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8130 	beq.w	8005270 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005018:	e12a      	b.n	8005270 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	f040 8089 	bne.w	8005138 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a2b      	ldr	r2, [pc, #172]	; (80050d8 <HAL_DMA_IRQHandler+0xce4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d04a      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xcd2>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a29      	ldr	r2, [pc, #164]	; (80050dc <HAL_DMA_IRQHandler+0xce8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d045      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xcd2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a28      	ldr	r2, [pc, #160]	; (80050e0 <HAL_DMA_IRQHandler+0xcec>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d040      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xcd2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a26      	ldr	r2, [pc, #152]	; (80050e4 <HAL_DMA_IRQHandler+0xcf0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d03b      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xcd2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a25      	ldr	r2, [pc, #148]	; (80050e8 <HAL_DMA_IRQHandler+0xcf4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d036      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xcd2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a23      	ldr	r2, [pc, #140]	; (80050ec <HAL_DMA_IRQHandler+0xcf8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d031      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xcd2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a22      	ldr	r2, [pc, #136]	; (80050f0 <HAL_DMA_IRQHandler+0xcfc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d02c      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xcd2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a20      	ldr	r2, [pc, #128]	; (80050f4 <HAL_DMA_IRQHandler+0xd00>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d027      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xcd2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1f      	ldr	r2, [pc, #124]	; (80050f8 <HAL_DMA_IRQHandler+0xd04>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d022      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xcd2>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a1d      	ldr	r2, [pc, #116]	; (80050fc <HAL_DMA_IRQHandler+0xd08>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01d      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xcd2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1c      	ldr	r2, [pc, #112]	; (8005100 <HAL_DMA_IRQHandler+0xd0c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d018      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xcd2>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1a      	ldr	r2, [pc, #104]	; (8005104 <HAL_DMA_IRQHandler+0xd10>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xcd2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a19      	ldr	r2, [pc, #100]	; (8005108 <HAL_DMA_IRQHandler+0xd14>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00e      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xcd2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a17      	ldr	r2, [pc, #92]	; (800510c <HAL_DMA_IRQHandler+0xd18>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d009      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xcd2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a16      	ldr	r2, [pc, #88]	; (8005110 <HAL_DMA_IRQHandler+0xd1c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d004      	beq.n	80050c6 <HAL_DMA_IRQHandler+0xcd2>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a14      	ldr	r2, [pc, #80]	; (8005114 <HAL_DMA_IRQHandler+0xd20>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d128      	bne.n	8005118 <HAL_DMA_IRQHandler+0xd24>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0214 	bic.w	r2, r2, #20
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	e027      	b.n	8005128 <HAL_DMA_IRQHandler+0xd34>
 80050d8:	40020010 	.word	0x40020010
 80050dc:	40020028 	.word	0x40020028
 80050e0:	40020040 	.word	0x40020040
 80050e4:	40020058 	.word	0x40020058
 80050e8:	40020070 	.word	0x40020070
 80050ec:	40020088 	.word	0x40020088
 80050f0:	400200a0 	.word	0x400200a0
 80050f4:	400200b8 	.word	0x400200b8
 80050f8:	40020410 	.word	0x40020410
 80050fc:	40020428 	.word	0x40020428
 8005100:	40020440 	.word	0x40020440
 8005104:	40020458 	.word	0x40020458
 8005108:	40020470 	.word	0x40020470
 800510c:	40020488 	.word	0x40020488
 8005110:	400204a0 	.word	0x400204a0
 8005114:	400204b8 	.word	0x400204b8
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 020a 	bic.w	r2, r2, #10
 8005126:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 8097 	beq.w	8005270 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800514a:	e091      	b.n	8005270 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	2208      	movs	r2, #8
 8005156:	409a      	lsls	r2, r3
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	4013      	ands	r3, r2
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 8088 	beq.w	8005272 <HAL_DMA_IRQHandler+0xe7e>
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8082 	beq.w	8005272 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a41      	ldr	r2, [pc, #260]	; (8005278 <HAL_DMA_IRQHandler+0xe84>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d04a      	beq.n	800520e <HAL_DMA_IRQHandler+0xe1a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a3f      	ldr	r2, [pc, #252]	; (800527c <HAL_DMA_IRQHandler+0xe88>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d045      	beq.n	800520e <HAL_DMA_IRQHandler+0xe1a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a3e      	ldr	r2, [pc, #248]	; (8005280 <HAL_DMA_IRQHandler+0xe8c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d040      	beq.n	800520e <HAL_DMA_IRQHandler+0xe1a>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a3c      	ldr	r2, [pc, #240]	; (8005284 <HAL_DMA_IRQHandler+0xe90>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d03b      	beq.n	800520e <HAL_DMA_IRQHandler+0xe1a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a3b      	ldr	r2, [pc, #236]	; (8005288 <HAL_DMA_IRQHandler+0xe94>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d036      	beq.n	800520e <HAL_DMA_IRQHandler+0xe1a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a39      	ldr	r2, [pc, #228]	; (800528c <HAL_DMA_IRQHandler+0xe98>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d031      	beq.n	800520e <HAL_DMA_IRQHandler+0xe1a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a38      	ldr	r2, [pc, #224]	; (8005290 <HAL_DMA_IRQHandler+0xe9c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d02c      	beq.n	800520e <HAL_DMA_IRQHandler+0xe1a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a36      	ldr	r2, [pc, #216]	; (8005294 <HAL_DMA_IRQHandler+0xea0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d027      	beq.n	800520e <HAL_DMA_IRQHandler+0xe1a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a35      	ldr	r2, [pc, #212]	; (8005298 <HAL_DMA_IRQHandler+0xea4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d022      	beq.n	800520e <HAL_DMA_IRQHandler+0xe1a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a33      	ldr	r2, [pc, #204]	; (800529c <HAL_DMA_IRQHandler+0xea8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d01d      	beq.n	800520e <HAL_DMA_IRQHandler+0xe1a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a32      	ldr	r2, [pc, #200]	; (80052a0 <HAL_DMA_IRQHandler+0xeac>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d018      	beq.n	800520e <HAL_DMA_IRQHandler+0xe1a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a30      	ldr	r2, [pc, #192]	; (80052a4 <HAL_DMA_IRQHandler+0xeb0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <HAL_DMA_IRQHandler+0xe1a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a2f      	ldr	r2, [pc, #188]	; (80052a8 <HAL_DMA_IRQHandler+0xeb4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00e      	beq.n	800520e <HAL_DMA_IRQHandler+0xe1a>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a2d      	ldr	r2, [pc, #180]	; (80052ac <HAL_DMA_IRQHandler+0xeb8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d009      	beq.n	800520e <HAL_DMA_IRQHandler+0xe1a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a2c      	ldr	r2, [pc, #176]	; (80052b0 <HAL_DMA_IRQHandler+0xebc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d004      	beq.n	800520e <HAL_DMA_IRQHandler+0xe1a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2a      	ldr	r2, [pc, #168]	; (80052b4 <HAL_DMA_IRQHandler+0xec0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d108      	bne.n	8005220 <HAL_DMA_IRQHandler+0xe2c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 021c 	bic.w	r2, r2, #28
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e007      	b.n	8005230 <HAL_DMA_IRQHandler+0xe3c>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 020e 	bic.w	r2, r2, #14
 800522e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005234:	f003 031f 	and.w	r3, r3, #31
 8005238:	2201      	movs	r2, #1
 800523a:	409a      	lsls	r2, r3
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	4798      	blx	r3
 8005266:	e004      	b.n	8005272 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005268:	bf00      	nop
 800526a:	e002      	b.n	8005272 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800526c:	bf00      	nop
 800526e:	e000      	b.n	8005272 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005270:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005272:	3728      	adds	r7, #40	; 0x28
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	40020010 	.word	0x40020010
 800527c:	40020028 	.word	0x40020028
 8005280:	40020040 	.word	0x40020040
 8005284:	40020058 	.word	0x40020058
 8005288:	40020070 	.word	0x40020070
 800528c:	40020088 	.word	0x40020088
 8005290:	400200a0 	.word	0x400200a0
 8005294:	400200b8 	.word	0x400200b8
 8005298:	40020410 	.word	0x40020410
 800529c:	40020428 	.word	0x40020428
 80052a0:	40020440 	.word	0x40020440
 80052a4:	40020458 	.word	0x40020458
 80052a8:	40020470 	.word	0x40020470
 80052ac:	40020488 	.word	0x40020488
 80052b0:	400204a0 	.word	0x400204a0
 80052b4:	400204b8 	.word	0x400204b8

080052b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a7f      	ldr	r2, [pc, #508]	; (80054d4 <DMA_SetConfig+0x21c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d072      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a7d      	ldr	r2, [pc, #500]	; (80054d8 <DMA_SetConfig+0x220>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d06d      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a7c      	ldr	r2, [pc, #496]	; (80054dc <DMA_SetConfig+0x224>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d068      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a7a      	ldr	r2, [pc, #488]	; (80054e0 <DMA_SetConfig+0x228>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d063      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a79      	ldr	r2, [pc, #484]	; (80054e4 <DMA_SetConfig+0x22c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d05e      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a77      	ldr	r2, [pc, #476]	; (80054e8 <DMA_SetConfig+0x230>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d059      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a76      	ldr	r2, [pc, #472]	; (80054ec <DMA_SetConfig+0x234>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d054      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a74      	ldr	r2, [pc, #464]	; (80054f0 <DMA_SetConfig+0x238>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d04f      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a73      	ldr	r2, [pc, #460]	; (80054f4 <DMA_SetConfig+0x23c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d04a      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a71      	ldr	r2, [pc, #452]	; (80054f8 <DMA_SetConfig+0x240>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d045      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a70      	ldr	r2, [pc, #448]	; (80054fc <DMA_SetConfig+0x244>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d040      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a6e      	ldr	r2, [pc, #440]	; (8005500 <DMA_SetConfig+0x248>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d03b      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a6d      	ldr	r2, [pc, #436]	; (8005504 <DMA_SetConfig+0x24c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d036      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a6b      	ldr	r2, [pc, #428]	; (8005508 <DMA_SetConfig+0x250>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d031      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a6a      	ldr	r2, [pc, #424]	; (800550c <DMA_SetConfig+0x254>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d02c      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a68      	ldr	r2, [pc, #416]	; (8005510 <DMA_SetConfig+0x258>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d027      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a67      	ldr	r2, [pc, #412]	; (8005514 <DMA_SetConfig+0x25c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d022      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a65      	ldr	r2, [pc, #404]	; (8005518 <DMA_SetConfig+0x260>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d01d      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a64      	ldr	r2, [pc, #400]	; (800551c <DMA_SetConfig+0x264>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d018      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a62      	ldr	r2, [pc, #392]	; (8005520 <DMA_SetConfig+0x268>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d013      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a61      	ldr	r2, [pc, #388]	; (8005524 <DMA_SetConfig+0x26c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00e      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a5f      	ldr	r2, [pc, #380]	; (8005528 <DMA_SetConfig+0x270>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d009      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a5e      	ldr	r2, [pc, #376]	; (800552c <DMA_SetConfig+0x274>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d004      	beq.n	80053c2 <DMA_SetConfig+0x10a>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a5c      	ldr	r2, [pc, #368]	; (8005530 <DMA_SetConfig+0x278>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d101      	bne.n	80053c6 <DMA_SetConfig+0x10e>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <DMA_SetConfig+0x110>
 80053c6:	2300      	movs	r3, #0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00d      	beq.n	80053e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80053d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d004      	beq.n	80053e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80053e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a39      	ldr	r2, [pc, #228]	; (80054d4 <DMA_SetConfig+0x21c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d04a      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a38      	ldr	r2, [pc, #224]	; (80054d8 <DMA_SetConfig+0x220>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d045      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a36      	ldr	r2, [pc, #216]	; (80054dc <DMA_SetConfig+0x224>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d040      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a35      	ldr	r2, [pc, #212]	; (80054e0 <DMA_SetConfig+0x228>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d03b      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a33      	ldr	r2, [pc, #204]	; (80054e4 <DMA_SetConfig+0x22c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d036      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a32      	ldr	r2, [pc, #200]	; (80054e8 <DMA_SetConfig+0x230>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d031      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a30      	ldr	r2, [pc, #192]	; (80054ec <DMA_SetConfig+0x234>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d02c      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a2f      	ldr	r2, [pc, #188]	; (80054f0 <DMA_SetConfig+0x238>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d027      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a2d      	ldr	r2, [pc, #180]	; (80054f4 <DMA_SetConfig+0x23c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d022      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2c      	ldr	r2, [pc, #176]	; (80054f8 <DMA_SetConfig+0x240>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d01d      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a2a      	ldr	r2, [pc, #168]	; (80054fc <DMA_SetConfig+0x244>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d018      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a29      	ldr	r2, [pc, #164]	; (8005500 <DMA_SetConfig+0x248>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d013      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a27      	ldr	r2, [pc, #156]	; (8005504 <DMA_SetConfig+0x24c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d00e      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a26      	ldr	r2, [pc, #152]	; (8005508 <DMA_SetConfig+0x250>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d009      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a24      	ldr	r2, [pc, #144]	; (800550c <DMA_SetConfig+0x254>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d004      	beq.n	8005488 <DMA_SetConfig+0x1d0>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a23      	ldr	r2, [pc, #140]	; (8005510 <DMA_SetConfig+0x258>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d101      	bne.n	800548c <DMA_SetConfig+0x1d4>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <DMA_SetConfig+0x1d6>
 800548c:	2300      	movs	r3, #0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d059      	beq.n	8005546 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005496:	f003 031f 	and.w	r3, r3, #31
 800549a:	223f      	movs	r2, #63	; 0x3f
 800549c:	409a      	lsls	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b40      	cmp	r3, #64	; 0x40
 80054c0:	d138      	bne.n	8005534 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80054d2:	e0ae      	b.n	8005632 <DMA_SetConfig+0x37a>
 80054d4:	40020010 	.word	0x40020010
 80054d8:	40020028 	.word	0x40020028
 80054dc:	40020040 	.word	0x40020040
 80054e0:	40020058 	.word	0x40020058
 80054e4:	40020070 	.word	0x40020070
 80054e8:	40020088 	.word	0x40020088
 80054ec:	400200a0 	.word	0x400200a0
 80054f0:	400200b8 	.word	0x400200b8
 80054f4:	40020410 	.word	0x40020410
 80054f8:	40020428 	.word	0x40020428
 80054fc:	40020440 	.word	0x40020440
 8005500:	40020458 	.word	0x40020458
 8005504:	40020470 	.word	0x40020470
 8005508:	40020488 	.word	0x40020488
 800550c:	400204a0 	.word	0x400204a0
 8005510:	400204b8 	.word	0x400204b8
 8005514:	58025408 	.word	0x58025408
 8005518:	5802541c 	.word	0x5802541c
 800551c:	58025430 	.word	0x58025430
 8005520:	58025444 	.word	0x58025444
 8005524:	58025458 	.word	0x58025458
 8005528:	5802546c 	.word	0x5802546c
 800552c:	58025480 	.word	0x58025480
 8005530:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	60da      	str	r2, [r3, #12]
}
 8005544:	e075      	b.n	8005632 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a3d      	ldr	r2, [pc, #244]	; (8005640 <DMA_SetConfig+0x388>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d04a      	beq.n	80055e6 <DMA_SetConfig+0x32e>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a3b      	ldr	r2, [pc, #236]	; (8005644 <DMA_SetConfig+0x38c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d045      	beq.n	80055e6 <DMA_SetConfig+0x32e>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a3a      	ldr	r2, [pc, #232]	; (8005648 <DMA_SetConfig+0x390>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d040      	beq.n	80055e6 <DMA_SetConfig+0x32e>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a38      	ldr	r2, [pc, #224]	; (800564c <DMA_SetConfig+0x394>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d03b      	beq.n	80055e6 <DMA_SetConfig+0x32e>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a37      	ldr	r2, [pc, #220]	; (8005650 <DMA_SetConfig+0x398>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d036      	beq.n	80055e6 <DMA_SetConfig+0x32e>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a35      	ldr	r2, [pc, #212]	; (8005654 <DMA_SetConfig+0x39c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d031      	beq.n	80055e6 <DMA_SetConfig+0x32e>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a34      	ldr	r2, [pc, #208]	; (8005658 <DMA_SetConfig+0x3a0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d02c      	beq.n	80055e6 <DMA_SetConfig+0x32e>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a32      	ldr	r2, [pc, #200]	; (800565c <DMA_SetConfig+0x3a4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d027      	beq.n	80055e6 <DMA_SetConfig+0x32e>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a31      	ldr	r2, [pc, #196]	; (8005660 <DMA_SetConfig+0x3a8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d022      	beq.n	80055e6 <DMA_SetConfig+0x32e>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a2f      	ldr	r2, [pc, #188]	; (8005664 <DMA_SetConfig+0x3ac>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d01d      	beq.n	80055e6 <DMA_SetConfig+0x32e>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2e      	ldr	r2, [pc, #184]	; (8005668 <DMA_SetConfig+0x3b0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d018      	beq.n	80055e6 <DMA_SetConfig+0x32e>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a2c      	ldr	r2, [pc, #176]	; (800566c <DMA_SetConfig+0x3b4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <DMA_SetConfig+0x32e>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a2b      	ldr	r2, [pc, #172]	; (8005670 <DMA_SetConfig+0x3b8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00e      	beq.n	80055e6 <DMA_SetConfig+0x32e>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a29      	ldr	r2, [pc, #164]	; (8005674 <DMA_SetConfig+0x3bc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <DMA_SetConfig+0x32e>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a28      	ldr	r2, [pc, #160]	; (8005678 <DMA_SetConfig+0x3c0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <DMA_SetConfig+0x32e>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a26      	ldr	r2, [pc, #152]	; (800567c <DMA_SetConfig+0x3c4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d101      	bne.n	80055ea <DMA_SetConfig+0x332>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <DMA_SetConfig+0x334>
 80055ea:	2300      	movs	r3, #0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d020      	beq.n	8005632 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	2201      	movs	r2, #1
 80055fa:	409a      	lsls	r2, r3
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b40      	cmp	r3, #64	; 0x40
 800560e:	d108      	bne.n	8005622 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	60da      	str	r2, [r3, #12]
}
 8005620:	e007      	b.n	8005632 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	60da      	str	r2, [r3, #12]
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	48022c08 	.word	0x48022c08
 8005644:	48022c1c 	.word	0x48022c1c
 8005648:	48022c30 	.word	0x48022c30
 800564c:	48022c44 	.word	0x48022c44
 8005650:	48022c58 	.word	0x48022c58
 8005654:	48022c6c 	.word	0x48022c6c
 8005658:	48022c80 	.word	0x48022c80
 800565c:	48022c94 	.word	0x48022c94
 8005660:	58025408 	.word	0x58025408
 8005664:	5802541c 	.word	0x5802541c
 8005668:	58025430 	.word	0x58025430
 800566c:	58025444 	.word	0x58025444
 8005670:	58025458 	.word	0x58025458
 8005674:	5802546c 	.word	0x5802546c
 8005678:	58025480 	.word	0x58025480
 800567c:	58025494 	.word	0x58025494

08005680 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a42      	ldr	r2, [pc, #264]	; (8005798 <DMA_CalcBaseAndBitshift+0x118>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d04a      	beq.n	8005728 <DMA_CalcBaseAndBitshift+0xa8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a41      	ldr	r2, [pc, #260]	; (800579c <DMA_CalcBaseAndBitshift+0x11c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d045      	beq.n	8005728 <DMA_CalcBaseAndBitshift+0xa8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a3f      	ldr	r2, [pc, #252]	; (80057a0 <DMA_CalcBaseAndBitshift+0x120>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d040      	beq.n	8005728 <DMA_CalcBaseAndBitshift+0xa8>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a3e      	ldr	r2, [pc, #248]	; (80057a4 <DMA_CalcBaseAndBitshift+0x124>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d03b      	beq.n	8005728 <DMA_CalcBaseAndBitshift+0xa8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a3c      	ldr	r2, [pc, #240]	; (80057a8 <DMA_CalcBaseAndBitshift+0x128>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d036      	beq.n	8005728 <DMA_CalcBaseAndBitshift+0xa8>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a3b      	ldr	r2, [pc, #236]	; (80057ac <DMA_CalcBaseAndBitshift+0x12c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d031      	beq.n	8005728 <DMA_CalcBaseAndBitshift+0xa8>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a39      	ldr	r2, [pc, #228]	; (80057b0 <DMA_CalcBaseAndBitshift+0x130>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d02c      	beq.n	8005728 <DMA_CalcBaseAndBitshift+0xa8>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a38      	ldr	r2, [pc, #224]	; (80057b4 <DMA_CalcBaseAndBitshift+0x134>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d027      	beq.n	8005728 <DMA_CalcBaseAndBitshift+0xa8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a36      	ldr	r2, [pc, #216]	; (80057b8 <DMA_CalcBaseAndBitshift+0x138>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d022      	beq.n	8005728 <DMA_CalcBaseAndBitshift+0xa8>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a35      	ldr	r2, [pc, #212]	; (80057bc <DMA_CalcBaseAndBitshift+0x13c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d01d      	beq.n	8005728 <DMA_CalcBaseAndBitshift+0xa8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a33      	ldr	r2, [pc, #204]	; (80057c0 <DMA_CalcBaseAndBitshift+0x140>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d018      	beq.n	8005728 <DMA_CalcBaseAndBitshift+0xa8>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a32      	ldr	r2, [pc, #200]	; (80057c4 <DMA_CalcBaseAndBitshift+0x144>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d013      	beq.n	8005728 <DMA_CalcBaseAndBitshift+0xa8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a30      	ldr	r2, [pc, #192]	; (80057c8 <DMA_CalcBaseAndBitshift+0x148>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00e      	beq.n	8005728 <DMA_CalcBaseAndBitshift+0xa8>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a2f      	ldr	r2, [pc, #188]	; (80057cc <DMA_CalcBaseAndBitshift+0x14c>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d009      	beq.n	8005728 <DMA_CalcBaseAndBitshift+0xa8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a2d      	ldr	r2, [pc, #180]	; (80057d0 <DMA_CalcBaseAndBitshift+0x150>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d004      	beq.n	8005728 <DMA_CalcBaseAndBitshift+0xa8>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a2c      	ldr	r2, [pc, #176]	; (80057d4 <DMA_CalcBaseAndBitshift+0x154>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d101      	bne.n	800572c <DMA_CalcBaseAndBitshift+0xac>
 8005728:	2301      	movs	r3, #1
 800572a:	e000      	b.n	800572e <DMA_CalcBaseAndBitshift+0xae>
 800572c:	2300      	movs	r3, #0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d024      	beq.n	800577c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	3b10      	subs	r3, #16
 800573a:	4a27      	ldr	r2, [pc, #156]	; (80057d8 <DMA_CalcBaseAndBitshift+0x158>)
 800573c:	fba2 2303 	umull	r2, r3, r2, r3
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	4a24      	ldr	r2, [pc, #144]	; (80057dc <DMA_CalcBaseAndBitshift+0x15c>)
 800574c:	5cd3      	ldrb	r3, [r2, r3]
 800574e:	461a      	mov	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b03      	cmp	r3, #3
 8005758:	d908      	bls.n	800576c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	4b1f      	ldr	r3, [pc, #124]	; (80057e0 <DMA_CalcBaseAndBitshift+0x160>)
 8005762:	4013      	ands	r3, r2
 8005764:	1d1a      	adds	r2, r3, #4
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	659a      	str	r2, [r3, #88]	; 0x58
 800576a:	e00d      	b.n	8005788 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <DMA_CalcBaseAndBitshift+0x160>)
 8005774:	4013      	ands	r3, r2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6593      	str	r3, [r2, #88]	; 0x58
 800577a:	e005      	b.n	8005788 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	40020010 	.word	0x40020010
 800579c:	40020028 	.word	0x40020028
 80057a0:	40020040 	.word	0x40020040
 80057a4:	40020058 	.word	0x40020058
 80057a8:	40020070 	.word	0x40020070
 80057ac:	40020088 	.word	0x40020088
 80057b0:	400200a0 	.word	0x400200a0
 80057b4:	400200b8 	.word	0x400200b8
 80057b8:	40020410 	.word	0x40020410
 80057bc:	40020428 	.word	0x40020428
 80057c0:	40020440 	.word	0x40020440
 80057c4:	40020458 	.word	0x40020458
 80057c8:	40020470 	.word	0x40020470
 80057cc:	40020488 	.word	0x40020488
 80057d0:	400204a0 	.word	0x400204a0
 80057d4:	400204b8 	.word	0x400204b8
 80057d8:	aaaaaaab 	.word	0xaaaaaaab
 80057dc:	0800ad70 	.word	0x0800ad70
 80057e0:	fffffc00 	.word	0xfffffc00

080057e4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d120      	bne.n	800583a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d858      	bhi.n	80058b2 <DMA_CheckFifoParam+0xce>
 8005800:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <DMA_CheckFifoParam+0x24>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	08005819 	.word	0x08005819
 800580c:	0800582b 	.word	0x0800582b
 8005810:	08005819 	.word	0x08005819
 8005814:	080058b3 	.word	0x080058b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d048      	beq.n	80058b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005828:	e045      	b.n	80058b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005832:	d142      	bne.n	80058ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005838:	e03f      	b.n	80058ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005842:	d123      	bne.n	800588c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005848:	2b03      	cmp	r3, #3
 800584a:	d838      	bhi.n	80058be <DMA_CheckFifoParam+0xda>
 800584c:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <DMA_CheckFifoParam+0x70>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	08005865 	.word	0x08005865
 8005858:	0800586b 	.word	0x0800586b
 800585c:	08005865 	.word	0x08005865
 8005860:	0800587d 	.word	0x0800587d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	73fb      	strb	r3, [r7, #15]
        break;
 8005868:	e030      	b.n	80058cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d025      	beq.n	80058c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800587a:	e022      	b.n	80058c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005884:	d11f      	bne.n	80058c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800588a:	e01c      	b.n	80058c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	2b02      	cmp	r3, #2
 8005892:	d902      	bls.n	800589a <DMA_CheckFifoParam+0xb6>
 8005894:	2b03      	cmp	r3, #3
 8005896:	d003      	beq.n	80058a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005898:	e018      	b.n	80058cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	73fb      	strb	r3, [r7, #15]
        break;
 800589e:	e015      	b.n	80058cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00e      	beq.n	80058ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	73fb      	strb	r3, [r7, #15]
    break;
 80058b0:	e00b      	b.n	80058ca <DMA_CheckFifoParam+0xe6>
        break;
 80058b2:	bf00      	nop
 80058b4:	e00a      	b.n	80058cc <DMA_CheckFifoParam+0xe8>
        break;
 80058b6:	bf00      	nop
 80058b8:	e008      	b.n	80058cc <DMA_CheckFifoParam+0xe8>
        break;
 80058ba:	bf00      	nop
 80058bc:	e006      	b.n	80058cc <DMA_CheckFifoParam+0xe8>
        break;
 80058be:	bf00      	nop
 80058c0:	e004      	b.n	80058cc <DMA_CheckFifoParam+0xe8>
        break;
 80058c2:	bf00      	nop
 80058c4:	e002      	b.n	80058cc <DMA_CheckFifoParam+0xe8>
        break;
 80058c6:	bf00      	nop
 80058c8:	e000      	b.n	80058cc <DMA_CheckFifoParam+0xe8>
    break;
 80058ca:	bf00      	nop
    }
  }

  return status;
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop

080058dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a38      	ldr	r2, [pc, #224]	; (80059d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a36      	ldr	r2, [pc, #216]	; (80059d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01d      	beq.n	800593a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a35      	ldr	r2, [pc, #212]	; (80059d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a33      	ldr	r2, [pc, #204]	; (80059dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a32      	ldr	r2, [pc, #200]	; (80059e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a30      	ldr	r2, [pc, #192]	; (80059e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a2f      	ldr	r2, [pc, #188]	; (80059e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a2d      	ldr	r2, [pc, #180]	; (80059ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d101      	bne.n	800593e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800593e:	2300      	movs	r3, #0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01a      	beq.n	800597a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	b2db      	uxtb	r3, r3
 800594a:	3b08      	subs	r3, #8
 800594c:	4a28      	ldr	r2, [pc, #160]	; (80059f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800594e:	fba2 2303 	umull	r2, r3, r2, r3
 8005952:	091b      	lsrs	r3, r3, #4
 8005954:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4b26      	ldr	r3, [pc, #152]	; (80059f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	461a      	mov	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a24      	ldr	r2, [pc, #144]	; (80059f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005968:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f003 031f 	and.w	r3, r3, #31
 8005970:	2201      	movs	r2, #1
 8005972:	409a      	lsls	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005978:	e024      	b.n	80059c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	b2db      	uxtb	r3, r3
 8005980:	3b10      	subs	r3, #16
 8005982:	4a1e      	ldr	r2, [pc, #120]	; (80059fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005984:	fba2 2303 	umull	r2, r3, r2, r3
 8005988:	091b      	lsrs	r3, r3, #4
 800598a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d806      	bhi.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	4a1b      	ldr	r2, [pc, #108]	; (8005a04 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d902      	bls.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3308      	adds	r3, #8
 80059a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4b18      	ldr	r3, [pc, #96]	; (8005a08 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	461a      	mov	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a16      	ldr	r2, [pc, #88]	; (8005a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80059b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f003 031f 	and.w	r3, r3, #31
 80059bc:	2201      	movs	r2, #1
 80059be:	409a      	lsls	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	58025408 	.word	0x58025408
 80059d4:	5802541c 	.word	0x5802541c
 80059d8:	58025430 	.word	0x58025430
 80059dc:	58025444 	.word	0x58025444
 80059e0:	58025458 	.word	0x58025458
 80059e4:	5802546c 	.word	0x5802546c
 80059e8:	58025480 	.word	0x58025480
 80059ec:	58025494 	.word	0x58025494
 80059f0:	cccccccd 	.word	0xcccccccd
 80059f4:	16009600 	.word	0x16009600
 80059f8:	58025880 	.word	0x58025880
 80059fc:	aaaaaaab 	.word	0xaaaaaaab
 8005a00:	400204b8 	.word	0x400204b8
 8005a04:	4002040f 	.word	0x4002040f
 8005a08:	10008200 	.word	0x10008200
 8005a0c:	40020880 	.word	0x40020880

08005a10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d04a      	beq.n	8005abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b08      	cmp	r3, #8
 8005a2a:	d847      	bhi.n	8005abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a25      	ldr	r2, [pc, #148]	; (8005ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d022      	beq.n	8005a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a24      	ldr	r2, [pc, #144]	; (8005acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d01d      	beq.n	8005a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a22      	ldr	r2, [pc, #136]	; (8005ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d018      	beq.n	8005a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a21      	ldr	r2, [pc, #132]	; (8005ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d013      	beq.n	8005a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a1f      	ldr	r2, [pc, #124]	; (8005ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00e      	beq.n	8005a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1e      	ldr	r2, [pc, #120]	; (8005adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d009      	beq.n	8005a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1c      	ldr	r2, [pc, #112]	; (8005ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1b      	ldr	r2, [pc, #108]	; (8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d101      	bne.n	8005a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005a80:	2300      	movs	r3, #0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4b17      	ldr	r3, [pc, #92]	; (8005ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	461a      	mov	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a15      	ldr	r2, [pc, #84]	; (8005aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005a98:	671a      	str	r2, [r3, #112]	; 0x70
 8005a9a:	e009      	b.n	8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4b14      	ldr	r3, [pc, #80]	; (8005af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a11      	ldr	r2, [pc, #68]	; (8005af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005aae:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	409a      	lsls	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	58025408 	.word	0x58025408
 8005acc:	5802541c 	.word	0x5802541c
 8005ad0:	58025430 	.word	0x58025430
 8005ad4:	58025444 	.word	0x58025444
 8005ad8:	58025458 	.word	0x58025458
 8005adc:	5802546c 	.word	0x5802546c
 8005ae0:	58025480 	.word	0x58025480
 8005ae4:	58025494 	.word	0x58025494
 8005ae8:	1600963f 	.word	0x1600963f
 8005aec:	58025940 	.word	0x58025940
 8005af0:	1000823f 	.word	0x1000823f
 8005af4:	40020940 	.word	0x40020940

08005af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b089      	sub	sp, #36	; 0x24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b06:	4b89      	ldr	r3, [pc, #548]	; (8005d2c <HAL_GPIO_Init+0x234>)
 8005b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b0a:	e194      	b.n	8005e36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	2101      	movs	r1, #1
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	fa01 f303 	lsl.w	r3, r1, r3
 8005b18:	4013      	ands	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f000 8186 	beq.w	8005e30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f003 0303 	and.w	r3, r3, #3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d005      	beq.n	8005b3c <HAL_GPIO_Init+0x44>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d130      	bne.n	8005b9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	2203      	movs	r2, #3
 8005b48:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4c:	43db      	mvns	r3, r3
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	4013      	ands	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b72:	2201      	movs	r2, #1
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7a:	43db      	mvns	r3, r3
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	091b      	lsrs	r3, r3, #4
 8005b88:	f003 0201 	and.w	r2, r3, #1
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d017      	beq.n	8005bda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	2203      	movs	r2, #3
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	fa02 f303 	lsl.w	r3, r2, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d123      	bne.n	8005c2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	08da      	lsrs	r2, r3, #3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3208      	adds	r2, #8
 8005bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	220f      	movs	r2, #15
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	43db      	mvns	r3, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4013      	ands	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	691a      	ldr	r2, [r3, #16]
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	f003 0307 	and.w	r3, r3, #7
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	08da      	lsrs	r2, r3, #3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3208      	adds	r2, #8
 8005c28:	69b9      	ldr	r1, [r7, #24]
 8005c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	2203      	movs	r2, #3
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	4013      	ands	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f003 0203 	and.w	r2, r3, #3
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 80e0 	beq.w	8005e30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c70:	4b2f      	ldr	r3, [pc, #188]	; (8005d30 <HAL_GPIO_Init+0x238>)
 8005c72:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005c76:	4a2e      	ldr	r2, [pc, #184]	; (8005d30 <HAL_GPIO_Init+0x238>)
 8005c78:	f043 0302 	orr.w	r3, r3, #2
 8005c7c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005c80:	4b2b      	ldr	r3, [pc, #172]	; (8005d30 <HAL_GPIO_Init+0x238>)
 8005c82:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c8e:	4a29      	ldr	r2, [pc, #164]	; (8005d34 <HAL_GPIO_Init+0x23c>)
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	089b      	lsrs	r3, r3, #2
 8005c94:	3302      	adds	r3, #2
 8005c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	220f      	movs	r2, #15
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	43db      	mvns	r3, r3
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a20      	ldr	r2, [pc, #128]	; (8005d38 <HAL_GPIO_Init+0x240>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d052      	beq.n	8005d60 <HAL_GPIO_Init+0x268>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a1f      	ldr	r2, [pc, #124]	; (8005d3c <HAL_GPIO_Init+0x244>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d031      	beq.n	8005d26 <HAL_GPIO_Init+0x22e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a1e      	ldr	r2, [pc, #120]	; (8005d40 <HAL_GPIO_Init+0x248>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d02b      	beq.n	8005d22 <HAL_GPIO_Init+0x22a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a1d      	ldr	r2, [pc, #116]	; (8005d44 <HAL_GPIO_Init+0x24c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d025      	beq.n	8005d1e <HAL_GPIO_Init+0x226>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a1c      	ldr	r2, [pc, #112]	; (8005d48 <HAL_GPIO_Init+0x250>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d01f      	beq.n	8005d1a <HAL_GPIO_Init+0x222>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a1b      	ldr	r2, [pc, #108]	; (8005d4c <HAL_GPIO_Init+0x254>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d019      	beq.n	8005d16 <HAL_GPIO_Init+0x21e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a1a      	ldr	r2, [pc, #104]	; (8005d50 <HAL_GPIO_Init+0x258>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d013      	beq.n	8005d12 <HAL_GPIO_Init+0x21a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a19      	ldr	r2, [pc, #100]	; (8005d54 <HAL_GPIO_Init+0x25c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00d      	beq.n	8005d0e <HAL_GPIO_Init+0x216>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a18      	ldr	r2, [pc, #96]	; (8005d58 <HAL_GPIO_Init+0x260>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d007      	beq.n	8005d0a <HAL_GPIO_Init+0x212>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a17      	ldr	r2, [pc, #92]	; (8005d5c <HAL_GPIO_Init+0x264>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d101      	bne.n	8005d06 <HAL_GPIO_Init+0x20e>
 8005d02:	2309      	movs	r3, #9
 8005d04:	e02d      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d06:	230a      	movs	r3, #10
 8005d08:	e02b      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d0a:	2308      	movs	r3, #8
 8005d0c:	e029      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d0e:	2307      	movs	r3, #7
 8005d10:	e027      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d12:	2306      	movs	r3, #6
 8005d14:	e025      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d16:	2305      	movs	r3, #5
 8005d18:	e023      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d1a:	2304      	movs	r3, #4
 8005d1c:	e021      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e01f      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e01d      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d26:	2301      	movs	r3, #1
 8005d28:	e01b      	b.n	8005d62 <HAL_GPIO_Init+0x26a>
 8005d2a:	bf00      	nop
 8005d2c:	58000080 	.word	0x58000080
 8005d30:	58024400 	.word	0x58024400
 8005d34:	58000400 	.word	0x58000400
 8005d38:	58020000 	.word	0x58020000
 8005d3c:	58020400 	.word	0x58020400
 8005d40:	58020800 	.word	0x58020800
 8005d44:	58020c00 	.word	0x58020c00
 8005d48:	58021000 	.word	0x58021000
 8005d4c:	58021400 	.word	0x58021400
 8005d50:	58021800 	.word	0x58021800
 8005d54:	58021c00 	.word	0x58021c00
 8005d58:	58022000 	.word	0x58022000
 8005d5c:	58022400 	.word	0x58022400
 8005d60:	2300      	movs	r3, #0
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	f002 0203 	and.w	r2, r2, #3
 8005d68:	0092      	lsls	r2, r2, #2
 8005d6a:	4093      	lsls	r3, r2
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d72:	4938      	ldr	r1, [pc, #224]	; (8005e54 <HAL_GPIO_Init+0x35c>)
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	089b      	lsrs	r3, r3, #2
 8005d78:	3302      	adds	r3, #2
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	43db      	mvns	r3, r3
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	43db      	mvns	r3, r3
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	43db      	mvns	r3, r3
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	4013      	ands	r3, r2
 8005dea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	4013      	ands	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	3301      	adds	r3, #1
 8005e34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f47f ae63 	bne.w	8005b0c <HAL_GPIO_Init+0x14>
  }
}
 8005e46:	bf00      	nop
 8005e48:	bf00      	nop
 8005e4a:	3724      	adds	r7, #36	; 0x24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	58000400 	.word	0x58000400

08005e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	807b      	strh	r3, [r7, #2]
 8005e64:	4613      	mov	r3, r2
 8005e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e68:	787b      	ldrb	r3, [r7, #1]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e6e:	887a      	ldrh	r2, [r7, #2]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005e74:	e003      	b.n	8005e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e76:	887b      	ldrh	r3, [r7, #2]
 8005e78:	041a      	lsls	r2, r3, #16
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	619a      	str	r2, [r3, #24]
}
 8005e7e:	bf00      	nop
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
	...

08005e8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005e94:	4b29      	ldr	r3, [pc, #164]	; (8005f3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	2b06      	cmp	r3, #6
 8005e9e:	d00a      	beq.n	8005eb6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ea0:	4b26      	ldr	r3, [pc, #152]	; (8005f3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d001      	beq.n	8005eb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e040      	b.n	8005f34 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e03e      	b.n	8005f34 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005eb6:	4b21      	ldr	r3, [pc, #132]	; (8005f3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005ebe:	491f      	ldr	r1, [pc, #124]	; (8005f3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ec6:	f7fb ff11 	bl	8001cec <HAL_GetTick>
 8005eca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ecc:	e009      	b.n	8005ee2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ece:	f7fb ff0d 	bl	8001cec <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005edc:	d901      	bls.n	8005ee2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e028      	b.n	8005f34 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ee2:	4b16      	ldr	r3, [pc, #88]	; (8005f3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eee:	d1ee      	bne.n	8005ece <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b1e      	cmp	r3, #30
 8005ef4:	d008      	beq.n	8005f08 <HAL_PWREx_ConfigSupply+0x7c>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8005efa:	d005      	beq.n	8005f08 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b1d      	cmp	r3, #29
 8005f00:	d002      	beq.n	8005f08 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b2d      	cmp	r3, #45	; 0x2d
 8005f06:	d114      	bne.n	8005f32 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005f08:	f7fb fef0 	bl	8001cec <HAL_GetTick>
 8005f0c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005f0e:	e009      	b.n	8005f24 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f10:	f7fb feec 	bl	8001cec <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f1e:	d901      	bls.n	8005f24 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e007      	b.n	8005f34 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005f24:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <HAL_PWREx_ConfigSupply+0xb0>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f30:	d1ee      	bne.n	8005f10 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	58024800 	.word	0x58024800

08005f40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08c      	sub	sp, #48	; 0x30
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e3f4      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 80b3 	beq.w	80060c6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f60:	4b95      	ldr	r3, [pc, #596]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f6a:	4b93      	ldr	r3, [pc, #588]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	d007      	beq.n	8005f86 <HAL_RCC_OscConfig+0x46>
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	2b18      	cmp	r3, #24
 8005f7a:	d112      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x62>
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d10d      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f86:	4b8c      	ldr	r3, [pc, #560]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 8098 	beq.w	80060c4 <HAL_RCC_OscConfig+0x184>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f040 8093 	bne.w	80060c4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e3cc      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005faa:	d106      	bne.n	8005fba <HAL_RCC_OscConfig+0x7a>
 8005fac:	4b82      	ldr	r3, [pc, #520]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a81      	ldr	r2, [pc, #516]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8005fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	e058      	b.n	800606c <HAL_RCC_OscConfig+0x12c>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d112      	bne.n	8005fe8 <HAL_RCC_OscConfig+0xa8>
 8005fc2:	4b7d      	ldr	r3, [pc, #500]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a7c      	ldr	r2, [pc, #496]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8005fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	4b7a      	ldr	r3, [pc, #488]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a79      	ldr	r2, [pc, #484]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8005fd4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	4b77      	ldr	r3, [pc, #476]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a76      	ldr	r2, [pc, #472]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8005fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	e041      	b.n	800606c <HAL_RCC_OscConfig+0x12c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ff0:	d112      	bne.n	8006018 <HAL_RCC_OscConfig+0xd8>
 8005ff2:	4b71      	ldr	r3, [pc, #452]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a70      	ldr	r2, [pc, #448]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8005ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	4b6e      	ldr	r3, [pc, #440]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a6d      	ldr	r2, [pc, #436]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006004:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	4b6b      	ldr	r3, [pc, #428]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a6a      	ldr	r2, [pc, #424]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	e029      	b.n	800606c <HAL_RCC_OscConfig+0x12c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8006020:	d112      	bne.n	8006048 <HAL_RCC_OscConfig+0x108>
 8006022:	4b65      	ldr	r3, [pc, #404]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a64      	ldr	r2, [pc, #400]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	4b62      	ldr	r3, [pc, #392]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a61      	ldr	r2, [pc, #388]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006034:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	4b5f      	ldr	r3, [pc, #380]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a5e      	ldr	r2, [pc, #376]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e011      	b.n	800606c <HAL_RCC_OscConfig+0x12c>
 8006048:	4b5b      	ldr	r3, [pc, #364]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a5a      	ldr	r2, [pc, #360]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 800604e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	4b58      	ldr	r3, [pc, #352]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a57      	ldr	r2, [pc, #348]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 800605a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	4b55      	ldr	r3, [pc, #340]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a54      	ldr	r2, [pc, #336]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006066:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800606a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d013      	beq.n	800609c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006074:	f7fb fe3a 	bl	8001cec <HAL_GetTick>
 8006078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800607c:	f7fb fe36 	bl	8001cec <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b64      	cmp	r3, #100	; 0x64
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e356      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800608e:	4b4a      	ldr	r3, [pc, #296]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d0f0      	beq.n	800607c <HAL_RCC_OscConfig+0x13c>
 800609a:	e014      	b.n	80060c6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609c:	f7fb fe26 	bl	8001cec <HAL_GetTick>
 80060a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060a4:	f7fb fe22 	bl	8001cec <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b64      	cmp	r3, #100	; 0x64
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e342      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060b6:	4b40      	ldr	r3, [pc, #256]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1f0      	bne.n	80060a4 <HAL_RCC_OscConfig+0x164>
 80060c2:	e000      	b.n	80060c6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 808d 	beq.w	80061ee <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060d4:	4b38      	ldr	r3, [pc, #224]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060de:	4b36      	ldr	r3, [pc, #216]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 80060e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <HAL_RCC_OscConfig+0x1ba>
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	2b18      	cmp	r3, #24
 80060ee:	d137      	bne.n	8006160 <HAL_RCC_OscConfig+0x220>
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d132      	bne.n	8006160 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060fa:	4b2f      	ldr	r3, [pc, #188]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <HAL_RCC_OscConfig+0x1d2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e314      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006112:	4b29      	ldr	r3, [pc, #164]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f023 0219 	bic.w	r2, r3, #25
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	4926      	ldr	r1, [pc, #152]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006120:	4313      	orrs	r3, r2
 8006122:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006124:	f7fb fde2 	bl	8001cec <HAL_GetTick>
 8006128:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800612c:	f7fb fdde 	bl	8001cec <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e2fe      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800613e:	4b1e      	ldr	r3, [pc, #120]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0f0      	beq.n	800612c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800614a:	4b1b      	ldr	r3, [pc, #108]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	061b      	lsls	r3, r3, #24
 8006158:	4917      	ldr	r1, [pc, #92]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 800615a:	4313      	orrs	r3, r2
 800615c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800615e:	e046      	b.n	80061ee <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d029      	beq.n	80061bc <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006168:	4b13      	ldr	r3, [pc, #76]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f023 0219 	bic.w	r2, r3, #25
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	4910      	ldr	r1, [pc, #64]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006176:	4313      	orrs	r3, r2
 8006178:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617a:	f7fb fdb7 	bl	8001cec <HAL_GetTick>
 800617e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006180:	e008      	b.n	8006194 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006182:	f7fb fdb3 	bl	8001cec <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d901      	bls.n	8006194 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e2d3      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006194:	4b08      	ldr	r3, [pc, #32]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0304 	and.w	r3, r3, #4
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0f0      	beq.n	8006182 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a0:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	061b      	lsls	r3, r3, #24
 80061ae:	4902      	ldr	r1, [pc, #8]	; (80061b8 <HAL_RCC_OscConfig+0x278>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	604b      	str	r3, [r1, #4]
 80061b4:	e01b      	b.n	80061ee <HAL_RCC_OscConfig+0x2ae>
 80061b6:	bf00      	nop
 80061b8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061bc:	4b97      	ldr	r3, [pc, #604]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a96      	ldr	r2, [pc, #600]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 80061c2:	f023 0301 	bic.w	r3, r3, #1
 80061c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c8:	f7fb fd90 	bl	8001cec <HAL_GetTick>
 80061cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061d0:	f7fb fd8c 	bl	8001cec <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e2ac      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061e2:	4b8e      	ldr	r3, [pc, #568]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1f0      	bne.n	80061d0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0310 	and.w	r3, r3, #16
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d06a      	beq.n	80062d0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061fa:	4b88      	ldr	r3, [pc, #544]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006202:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006204:	4b85      	ldr	r3, [pc, #532]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b08      	cmp	r3, #8
 800620e:	d007      	beq.n	8006220 <HAL_RCC_OscConfig+0x2e0>
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	2b18      	cmp	r3, #24
 8006214:	d11b      	bne.n	800624e <HAL_RCC_OscConfig+0x30e>
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f003 0303 	and.w	r3, r3, #3
 800621c:	2b01      	cmp	r3, #1
 800621e:	d116      	bne.n	800624e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006220:	4b7e      	ldr	r3, [pc, #504]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006228:	2b00      	cmp	r3, #0
 800622a:	d005      	beq.n	8006238 <HAL_RCC_OscConfig+0x2f8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	2b80      	cmp	r3, #128	; 0x80
 8006232:	d001      	beq.n	8006238 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e281      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006238:	4b78      	ldr	r3, [pc, #480]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	061b      	lsls	r3, r3, #24
 8006246:	4975      	ldr	r1, [pc, #468]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 8006248:	4313      	orrs	r3, r2
 800624a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800624c:	e040      	b.n	80062d0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d023      	beq.n	800629e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006256:	4b71      	ldr	r3, [pc, #452]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a70      	ldr	r2, [pc, #448]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 800625c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006262:	f7fb fd43 	bl	8001cec <HAL_GetTick>
 8006266:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006268:	e008      	b.n	800627c <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800626a:	f7fb fd3f 	bl	8001cec <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d901      	bls.n	800627c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e25f      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800627c:	4b67      	ldr	r3, [pc, #412]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0f0      	beq.n	800626a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006288:	4b64      	ldr	r3, [pc, #400]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	061b      	lsls	r3, r3, #24
 8006296:	4961      	ldr	r1, [pc, #388]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 8006298:	4313      	orrs	r3, r2
 800629a:	60cb      	str	r3, [r1, #12]
 800629c:	e018      	b.n	80062d0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800629e:	4b5f      	ldr	r3, [pc, #380]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a5e      	ldr	r2, [pc, #376]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 80062a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062aa:	f7fb fd1f 	bl	8001cec <HAL_GetTick>
 80062ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062b0:	e008      	b.n	80062c4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80062b2:	f7fb fd1b 	bl	8001cec <HAL_GetTick>
 80062b6:	4602      	mov	r2, r0
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d901      	bls.n	80062c4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e23b      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062c4:	4b55      	ldr	r3, [pc, #340]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1f0      	bne.n	80062b2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d036      	beq.n	800634a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d019      	beq.n	8006318 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062e4:	4b4d      	ldr	r3, [pc, #308]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 80062e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e8:	4a4c      	ldr	r2, [pc, #304]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f0:	f7fb fcfc 	bl	8001cec <HAL_GetTick>
 80062f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062f8:	f7fb fcf8 	bl	8001cec <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e218      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800630a:	4b44      	ldr	r3, [pc, #272]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 800630c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0f0      	beq.n	80062f8 <HAL_RCC_OscConfig+0x3b8>
 8006316:	e018      	b.n	800634a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006318:	4b40      	ldr	r3, [pc, #256]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 800631a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800631c:	4a3f      	ldr	r2, [pc, #252]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 800631e:	f023 0301 	bic.w	r3, r3, #1
 8006322:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006324:	f7fb fce2 	bl	8001cec <HAL_GetTick>
 8006328:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800632c:	f7fb fcde 	bl	8001cec <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b02      	cmp	r3, #2
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e1fe      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800633e:	4b37      	ldr	r3, [pc, #220]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 8006340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1f0      	bne.n	800632c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0320 	and.w	r3, r3, #32
 8006352:	2b00      	cmp	r3, #0
 8006354:	d036      	beq.n	80063c4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d019      	beq.n	8006392 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800635e:	4b2f      	ldr	r3, [pc, #188]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a2e      	ldr	r2, [pc, #184]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 8006364:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006368:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800636a:	f7fb fcbf 	bl	8001cec <HAL_GetTick>
 800636e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006370:	e008      	b.n	8006384 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006372:	f7fb fcbb 	bl	8001cec <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e1db      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006384:	4b25      	ldr	r3, [pc, #148]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0f0      	beq.n	8006372 <HAL_RCC_OscConfig+0x432>
 8006390:	e018      	b.n	80063c4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006392:	4b22      	ldr	r3, [pc, #136]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a21      	ldr	r2, [pc, #132]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 8006398:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800639c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800639e:	f7fb fca5 	bl	8001cec <HAL_GetTick>
 80063a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063a4:	e008      	b.n	80063b8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80063a6:	f7fb fca1 	bl	8001cec <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d901      	bls.n	80063b8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e1c1      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063b8:	4b18      	ldr	r3, [pc, #96]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1f0      	bne.n	80063a6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 80af 	beq.w	8006530 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80063d2:	4b13      	ldr	r3, [pc, #76]	; (8006420 <HAL_RCC_OscConfig+0x4e0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a12      	ldr	r2, [pc, #72]	; (8006420 <HAL_RCC_OscConfig+0x4e0>)
 80063d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063de:	f7fb fc85 	bl	8001cec <HAL_GetTick>
 80063e2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80063e6:	f7fb fc81 	bl	8001cec <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b64      	cmp	r3, #100	; 0x64
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e1a1      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063f8:	4b09      	ldr	r3, [pc, #36]	; (8006420 <HAL_RCC_OscConfig+0x4e0>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0f0      	beq.n	80063e6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d10b      	bne.n	8006424 <HAL_RCC_OscConfig+0x4e4>
 800640c:	4b03      	ldr	r3, [pc, #12]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 800640e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006410:	4a02      	ldr	r2, [pc, #8]	; (800641c <HAL_RCC_OscConfig+0x4dc>)
 8006412:	f043 0301 	orr.w	r3, r3, #1
 8006416:	6713      	str	r3, [r2, #112]	; 0x70
 8006418:	e05b      	b.n	80064d2 <HAL_RCC_OscConfig+0x592>
 800641a:	bf00      	nop
 800641c:	58024400 	.word	0x58024400
 8006420:	58024800 	.word	0x58024800
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d112      	bne.n	8006452 <HAL_RCC_OscConfig+0x512>
 800642c:	4b9d      	ldr	r3, [pc, #628]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800642e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006430:	4a9c      	ldr	r2, [pc, #624]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	6713      	str	r3, [r2, #112]	; 0x70
 8006438:	4b9a      	ldr	r3, [pc, #616]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800643a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643c:	4a99      	ldr	r2, [pc, #612]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800643e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006442:	6713      	str	r3, [r2, #112]	; 0x70
 8006444:	4b97      	ldr	r3, [pc, #604]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006448:	4a96      	ldr	r2, [pc, #600]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800644a:	f023 0304 	bic.w	r3, r3, #4
 800644e:	6713      	str	r3, [r2, #112]	; 0x70
 8006450:	e03f      	b.n	80064d2 <HAL_RCC_OscConfig+0x592>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b05      	cmp	r3, #5
 8006458:	d112      	bne.n	8006480 <HAL_RCC_OscConfig+0x540>
 800645a:	4b92      	ldr	r3, [pc, #584]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800645c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800645e:	4a91      	ldr	r2, [pc, #580]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006460:	f043 0304 	orr.w	r3, r3, #4
 8006464:	6713      	str	r3, [r2, #112]	; 0x70
 8006466:	4b8f      	ldr	r3, [pc, #572]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646a:	4a8e      	ldr	r2, [pc, #568]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800646c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006470:	6713      	str	r3, [r2, #112]	; 0x70
 8006472:	4b8c      	ldr	r3, [pc, #560]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006476:	4a8b      	ldr	r2, [pc, #556]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006478:	f043 0301 	orr.w	r3, r3, #1
 800647c:	6713      	str	r3, [r2, #112]	; 0x70
 800647e:	e028      	b.n	80064d2 <HAL_RCC_OscConfig+0x592>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2b85      	cmp	r3, #133	; 0x85
 8006486:	d112      	bne.n	80064ae <HAL_RCC_OscConfig+0x56e>
 8006488:	4b86      	ldr	r3, [pc, #536]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800648a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648c:	4a85      	ldr	r2, [pc, #532]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800648e:	f043 0304 	orr.w	r3, r3, #4
 8006492:	6713      	str	r3, [r2, #112]	; 0x70
 8006494:	4b83      	ldr	r3, [pc, #524]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006498:	4a82      	ldr	r2, [pc, #520]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800649a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649e:	6713      	str	r3, [r2, #112]	; 0x70
 80064a0:	4b80      	ldr	r3, [pc, #512]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 80064a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a4:	4a7f      	ldr	r2, [pc, #508]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	6713      	str	r3, [r2, #112]	; 0x70
 80064ac:	e011      	b.n	80064d2 <HAL_RCC_OscConfig+0x592>
 80064ae:	4b7d      	ldr	r3, [pc, #500]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 80064b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b2:	4a7c      	ldr	r2, [pc, #496]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 80064b4:	f023 0301 	bic.w	r3, r3, #1
 80064b8:	6713      	str	r3, [r2, #112]	; 0x70
 80064ba:	4b7a      	ldr	r3, [pc, #488]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 80064bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064be:	4a79      	ldr	r2, [pc, #484]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 80064c0:	f023 0304 	bic.w	r3, r3, #4
 80064c4:	6713      	str	r3, [r2, #112]	; 0x70
 80064c6:	4b77      	ldr	r3, [pc, #476]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 80064c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ca:	4a76      	ldr	r2, [pc, #472]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 80064cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d015      	beq.n	8006506 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064da:	f7fb fc07 	bl	8001cec <HAL_GetTick>
 80064de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064e0:	e00a      	b.n	80064f8 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064e2:	f7fb fc03 	bl	8001cec <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e121      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064f8:	4b6a      	ldr	r3, [pc, #424]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 80064fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0ee      	beq.n	80064e2 <HAL_RCC_OscConfig+0x5a2>
 8006504:	e014      	b.n	8006530 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006506:	f7fb fbf1 	bl	8001cec <HAL_GetTick>
 800650a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800650c:	e00a      	b.n	8006524 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800650e:	f7fb fbed 	bl	8001cec <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	f241 3288 	movw	r2, #5000	; 0x1388
 800651c:	4293      	cmp	r3, r2
 800651e:	d901      	bls.n	8006524 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e10b      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006524:	4b5f      	ldr	r3, [pc, #380]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1ee      	bne.n	800650e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8100 	beq.w	800673a <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800653a:	4b5a      	ldr	r3, [pc, #360]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006542:	2b18      	cmp	r3, #24
 8006544:	f000 80bb 	beq.w	80066be <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	2b02      	cmp	r3, #2
 800654e:	f040 8095 	bne.w	800667c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006552:	4b54      	ldr	r3, [pc, #336]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a53      	ldr	r2, [pc, #332]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006558:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800655c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800655e:	f7fb fbc5 	bl	8001cec <HAL_GetTick>
 8006562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006564:	e008      	b.n	8006578 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006566:	f7fb fbc1 	bl	8001cec <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	2b02      	cmp	r3, #2
 8006572:	d901      	bls.n	8006578 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e0e1      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006578:	4b4a      	ldr	r3, [pc, #296]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1f0      	bne.n	8006566 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006584:	4b47      	ldr	r3, [pc, #284]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006588:	4b47      	ldr	r3, [pc, #284]	; (80066a8 <HAL_RCC_OscConfig+0x768>)
 800658a:	4013      	ands	r3, r2
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006594:	0112      	lsls	r2, r2, #4
 8006596:	430a      	orrs	r2, r1
 8006598:	4942      	ldr	r1, [pc, #264]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800659a:	4313      	orrs	r3, r2
 800659c:	628b      	str	r3, [r1, #40]	; 0x28
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a2:	3b01      	subs	r3, #1
 80065a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ac:	3b01      	subs	r3, #1
 80065ae:	025b      	lsls	r3, r3, #9
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	431a      	orrs	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	3b01      	subs	r3, #1
 80065ba:	041b      	lsls	r3, r3, #16
 80065bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065c0:	431a      	orrs	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c6:	3b01      	subs	r3, #1
 80065c8:	061b      	lsls	r3, r3, #24
 80065ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80065ce:	4935      	ldr	r1, [pc, #212]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80065d4:	4b33      	ldr	r3, [pc, #204]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	4a32      	ldr	r2, [pc, #200]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 80065da:	f023 0301 	bic.w	r3, r3, #1
 80065de:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065e0:	4b30      	ldr	r3, [pc, #192]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 80065e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e4:	4b31      	ldr	r3, [pc, #196]	; (80066ac <HAL_RCC_OscConfig+0x76c>)
 80065e6:	4013      	ands	r3, r2
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065ec:	00d2      	lsls	r2, r2, #3
 80065ee:	492d      	ldr	r1, [pc, #180]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80065f4:	4b2b      	ldr	r3, [pc, #172]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	f023 020c 	bic.w	r2, r3, #12
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	4928      	ldr	r1, [pc, #160]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006602:	4313      	orrs	r3, r2
 8006604:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006606:	4b27      	ldr	r3, [pc, #156]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660a:	f023 0202 	bic.w	r2, r3, #2
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006612:	4924      	ldr	r1, [pc, #144]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006614:	4313      	orrs	r3, r2
 8006616:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006618:	4b22      	ldr	r3, [pc, #136]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	4a21      	ldr	r2, [pc, #132]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800661e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006622:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006624:	4b1f      	ldr	r3, [pc, #124]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	4a1e      	ldr	r2, [pc, #120]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800662a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800662e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006630:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	4a1b      	ldr	r2, [pc, #108]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006636:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800663a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800663c:	4b19      	ldr	r3, [pc, #100]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	4a18      	ldr	r2, [pc, #96]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006642:	f043 0301 	orr.w	r3, r3, #1
 8006646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006648:	4b16      	ldr	r3, [pc, #88]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a15      	ldr	r2, [pc, #84]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800664e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006654:	f7fb fb4a 	bl	8001cec <HAL_GetTick>
 8006658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800665a:	e008      	b.n	800666e <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800665c:	f7fb fb46 	bl	8001cec <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e066      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800666e:	4b0d      	ldr	r3, [pc, #52]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006676:	2b00      	cmp	r3, #0
 8006678:	d0f0      	beq.n	800665c <HAL_RCC_OscConfig+0x71c>
 800667a:	e05e      	b.n	800673a <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800667c:	4b09      	ldr	r3, [pc, #36]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a08      	ldr	r2, [pc, #32]	; (80066a4 <HAL_RCC_OscConfig+0x764>)
 8006682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006688:	f7fb fb30 	bl	8001cec <HAL_GetTick>
 800668c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800668e:	e00f      	b.n	80066b0 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006690:	f7fb fb2c 	bl	8001cec <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d908      	bls.n	80066b0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e04c      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
 80066a2:	bf00      	nop
 80066a4:	58024400 	.word	0x58024400
 80066a8:	fffffc0c 	.word	0xfffffc0c
 80066ac:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066b0:	4b24      	ldr	r3, [pc, #144]	; (8006744 <HAL_RCC_OscConfig+0x804>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e9      	bne.n	8006690 <HAL_RCC_OscConfig+0x750>
 80066bc:	e03d      	b.n	800673a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80066be:	4b21      	ldr	r3, [pc, #132]	; (8006744 <HAL_RCC_OscConfig+0x804>)
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80066c4:	4b1f      	ldr	r3, [pc, #124]	; (8006744 <HAL_RCC_OscConfig+0x804>)
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d031      	beq.n	8006736 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f003 0203 	and.w	r2, r3, #3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066dc:	429a      	cmp	r2, r3
 80066de:	d12a      	bne.n	8006736 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	091b      	lsrs	r3, r3, #4
 80066e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d122      	bne.n	8006736 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d11a      	bne.n	8006736 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	0a5b      	lsrs	r3, r3, #9
 8006704:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800670e:	429a      	cmp	r2, r3
 8006710:	d111      	bne.n	8006736 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	0c1b      	lsrs	r3, r3, #16
 8006716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006720:	429a      	cmp	r2, r3
 8006722:	d108      	bne.n	8006736 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	0e1b      	lsrs	r3, r3, #24
 8006728:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006730:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006732:	429a      	cmp	r2, r3
 8006734:	d001      	beq.n	800673a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e000      	b.n	800673c <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3730      	adds	r7, #48	; 0x30
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	58024400 	.word	0x58024400

08006748 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e19c      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800675c:	4b8a      	ldr	r3, [pc, #552]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 030f 	and.w	r3, r3, #15
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d910      	bls.n	800678c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800676a:	4b87      	ldr	r3, [pc, #540]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f023 020f 	bic.w	r2, r3, #15
 8006772:	4985      	ldr	r1, [pc, #532]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	4313      	orrs	r3, r2
 8006778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800677a:	4b83      	ldr	r3, [pc, #524]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d001      	beq.n	800678c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e184      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d010      	beq.n	80067ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691a      	ldr	r2, [r3, #16]
 800679c:	4b7b      	ldr	r3, [pc, #492]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d908      	bls.n	80067ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067a8:	4b78      	ldr	r3, [pc, #480]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	4975      	ldr	r1, [pc, #468]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d010      	beq.n	80067e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695a      	ldr	r2, [r3, #20]
 80067ca:	4b70      	ldr	r3, [pc, #448]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d908      	bls.n	80067e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067d6:	4b6d      	ldr	r3, [pc, #436]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	496a      	ldr	r1, [pc, #424]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d010      	beq.n	8006816 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699a      	ldr	r2, [r3, #24]
 80067f8:	4b64      	ldr	r3, [pc, #400]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006800:	429a      	cmp	r2, r3
 8006802:	d908      	bls.n	8006816 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006804:	4b61      	ldr	r3, [pc, #388]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	495e      	ldr	r1, [pc, #376]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006812:	4313      	orrs	r3, r2
 8006814:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d010      	beq.n	8006844 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69da      	ldr	r2, [r3, #28]
 8006826:	4b59      	ldr	r3, [pc, #356]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800682e:	429a      	cmp	r2, r3
 8006830:	d908      	bls.n	8006844 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006832:	4b56      	ldr	r3, [pc, #344]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	4953      	ldr	r1, [pc, #332]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006840:	4313      	orrs	r3, r2
 8006842:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d010      	beq.n	8006872 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68da      	ldr	r2, [r3, #12]
 8006854:	4b4d      	ldr	r3, [pc, #308]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f003 030f 	and.w	r3, r3, #15
 800685c:	429a      	cmp	r2, r3
 800685e:	d908      	bls.n	8006872 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006860:	4b4a      	ldr	r3, [pc, #296]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	f023 020f 	bic.w	r2, r3, #15
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	4947      	ldr	r1, [pc, #284]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800686e:	4313      	orrs	r3, r2
 8006870:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d055      	beq.n	800692a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800687e:	4b43      	ldr	r3, [pc, #268]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	4940      	ldr	r1, [pc, #256]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800688c:	4313      	orrs	r3, r2
 800688e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d107      	bne.n	80068a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006898:	4b3c      	ldr	r3, [pc, #240]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d121      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e0f6      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d107      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068b0:	4b36      	ldr	r3, [pc, #216]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d115      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e0ea      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d107      	bne.n	80068d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068c8:	4b30      	ldr	r3, [pc, #192]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d109      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0de      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068d8:	4b2c      	ldr	r3, [pc, #176]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e0d6      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068e8:	4b28      	ldr	r3, [pc, #160]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f023 0207 	bic.w	r2, r3, #7
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	4925      	ldr	r1, [pc, #148]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068fa:	f7fb f9f7 	bl	8001cec <HAL_GetTick>
 80068fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006900:	e00a      	b.n	8006918 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006902:	f7fb f9f3 	bl	8001cec <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006910:	4293      	cmp	r3, r2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e0be      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006918:	4b1c      	ldr	r3, [pc, #112]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	429a      	cmp	r2, r3
 8006928:	d1eb      	bne.n	8006902 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d010      	beq.n	8006958 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	4b14      	ldr	r3, [pc, #80]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	f003 030f 	and.w	r3, r3, #15
 8006942:	429a      	cmp	r2, r3
 8006944:	d208      	bcs.n	8006958 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006946:	4b11      	ldr	r3, [pc, #68]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f023 020f 	bic.w	r2, r3, #15
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	490e      	ldr	r1, [pc, #56]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006954:	4313      	orrs	r3, r2
 8006956:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006958:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 030f 	and.w	r3, r3, #15
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d214      	bcs.n	8006990 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006966:	4b08      	ldr	r3, [pc, #32]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f023 020f 	bic.w	r2, r3, #15
 800696e:	4906      	ldr	r1, [pc, #24]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	4313      	orrs	r3, r2
 8006974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006976:	4b04      	ldr	r3, [pc, #16]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d005      	beq.n	8006990 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e086      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
 8006988:	52002000 	.word	0x52002000
 800698c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d010      	beq.n	80069be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	4b3f      	ldr	r3, [pc, #252]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d208      	bcs.n	80069be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069ac:	4b3c      	ldr	r3, [pc, #240]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	4939      	ldr	r1, [pc, #228]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d010      	beq.n	80069ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695a      	ldr	r2, [r3, #20]
 80069ce:	4b34      	ldr	r3, [pc, #208]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d208      	bcs.n	80069ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069da:	4b31      	ldr	r3, [pc, #196]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	492e      	ldr	r1, [pc, #184]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d010      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699a      	ldr	r2, [r3, #24]
 80069fc:	4b28      	ldr	r3, [pc, #160]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d208      	bcs.n	8006a1a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a08:	4b25      	ldr	r3, [pc, #148]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	4922      	ldr	r1, [pc, #136]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d010      	beq.n	8006a48 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69da      	ldr	r2, [r3, #28]
 8006a2a:	4b1d      	ldr	r3, [pc, #116]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d208      	bcs.n	8006a48 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a36:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	4917      	ldr	r1, [pc, #92]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006a48:	f000 f834 	bl	8006ab4 <HAL_RCC_GetSysClockFreq>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	4b14      	ldr	r3, [pc, #80]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	0a1b      	lsrs	r3, r3, #8
 8006a54:	f003 030f 	and.w	r3, r3, #15
 8006a58:	4912      	ldr	r1, [pc, #72]	; (8006aa4 <HAL_RCC_ClockConfig+0x35c>)
 8006a5a:	5ccb      	ldrb	r3, [r1, r3]
 8006a5c:	f003 031f 	and.w	r3, r3, #31
 8006a60:	fa22 f303 	lsr.w	r3, r2, r3
 8006a64:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006a66:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	4a0d      	ldr	r2, [pc, #52]	; (8006aa4 <HAL_RCC_ClockConfig+0x35c>)
 8006a70:	5cd3      	ldrb	r3, [r2, r3]
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7c:	4a0a      	ldr	r2, [pc, #40]	; (8006aa8 <HAL_RCC_ClockConfig+0x360>)
 8006a7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a80:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <HAL_RCC_ClockConfig+0x364>)
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006a86:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <HAL_RCC_ClockConfig+0x368>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fb f8e4 	bl	8001c58 <HAL_InitTick>
 8006a90:	4603      	mov	r3, r0
 8006a92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	58024400 	.word	0x58024400
 8006aa4:	0800ad60 	.word	0x0800ad60
 8006aa8:	24000004 	.word	0x24000004
 8006aac:	24000000 	.word	0x24000000
 8006ab0:	24000008 	.word	0x24000008

08006ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b089      	sub	sp, #36	; 0x24
 8006ab8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006aba:	4bb3      	ldr	r3, [pc, #716]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ac2:	2b18      	cmp	r3, #24
 8006ac4:	f200 8155 	bhi.w	8006d72 <HAL_RCC_GetSysClockFreq+0x2be>
 8006ac8:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006b35 	.word	0x08006b35
 8006ad4:	08006d73 	.word	0x08006d73
 8006ad8:	08006d73 	.word	0x08006d73
 8006adc:	08006d73 	.word	0x08006d73
 8006ae0:	08006d73 	.word	0x08006d73
 8006ae4:	08006d73 	.word	0x08006d73
 8006ae8:	08006d73 	.word	0x08006d73
 8006aec:	08006d73 	.word	0x08006d73
 8006af0:	08006b5b 	.word	0x08006b5b
 8006af4:	08006d73 	.word	0x08006d73
 8006af8:	08006d73 	.word	0x08006d73
 8006afc:	08006d73 	.word	0x08006d73
 8006b00:	08006d73 	.word	0x08006d73
 8006b04:	08006d73 	.word	0x08006d73
 8006b08:	08006d73 	.word	0x08006d73
 8006b0c:	08006d73 	.word	0x08006d73
 8006b10:	08006b61 	.word	0x08006b61
 8006b14:	08006d73 	.word	0x08006d73
 8006b18:	08006d73 	.word	0x08006d73
 8006b1c:	08006d73 	.word	0x08006d73
 8006b20:	08006d73 	.word	0x08006d73
 8006b24:	08006d73 	.word	0x08006d73
 8006b28:	08006d73 	.word	0x08006d73
 8006b2c:	08006d73 	.word	0x08006d73
 8006b30:	08006b67 	.word	0x08006b67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b34:	4b94      	ldr	r3, [pc, #592]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d009      	beq.n	8006b54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b40:	4b91      	ldr	r3, [pc, #580]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	08db      	lsrs	r3, r3, #3
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	4a90      	ldr	r2, [pc, #576]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006b52:	e111      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b54:	4b8d      	ldr	r3, [pc, #564]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b56:	61bb      	str	r3, [r7, #24]
    break;
 8006b58:	e10e      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006b5a:	4b8d      	ldr	r3, [pc, #564]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b5c:	61bb      	str	r3, [r7, #24]
    break;
 8006b5e:	e10b      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006b60:	4b8c      	ldr	r3, [pc, #560]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006b62:	61bb      	str	r3, [r7, #24]
    break;
 8006b64:	e108      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b66:	4b88      	ldr	r3, [pc, #544]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006b70:	4b85      	ldr	r3, [pc, #532]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	091b      	lsrs	r3, r3, #4
 8006b76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b7c:	4b82      	ldr	r3, [pc, #520]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b86:	4b80      	ldr	r3, [pc, #512]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8a:	08db      	lsrs	r3, r3, #3
 8006b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	fb02 f303 	mul.w	r3, r2, r3
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 80e1 	beq.w	8006d6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	f000 8083 	beq.w	8006cb8 <HAL_RCC_GetSysClockFreq+0x204>
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	f200 80a1 	bhi.w	8006cfc <HAL_RCC_GetSysClockFreq+0x248>
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <HAL_RCC_GetSysClockFreq+0x114>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d056      	beq.n	8006c74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006bc6:	e099      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bc8:	4b6f      	ldr	r3, [pc, #444]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d02d      	beq.n	8006c30 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bd4:	4b6c      	ldr	r3, [pc, #432]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	08db      	lsrs	r3, r3, #3
 8006bda:	f003 0303 	and.w	r3, r3, #3
 8006bde:	4a6b      	ldr	r2, [pc, #428]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006be0:	fa22 f303 	lsr.w	r3, r2, r3
 8006be4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	ee07 3a90 	vmov	s15, r3
 8006bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfe:	4b62      	ldr	r3, [pc, #392]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006c2e:	e087      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006d9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c42:	4b51      	ldr	r3, [pc, #324]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c72:	e065      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006da0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c86:	4b40      	ldr	r3, [pc, #256]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cb6:	e043      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006da4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cca:	4b2f      	ldr	r3, [pc, #188]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cda:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cfa:	e021      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006da0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0e:	4b1e      	ldr	r3, [pc, #120]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d3e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006d40:	4b11      	ldr	r3, [pc, #68]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d44:	0a5b      	lsrs	r3, r3, #9
 8006d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	ee07 3a90 	vmov	s15, r3
 8006d54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d64:	ee17 3a90 	vmov	r3, s15
 8006d68:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006d6a:	e005      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	61bb      	str	r3, [r7, #24]
    break;
 8006d70:	e002      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006d72:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d74:	61bb      	str	r3, [r7, #24]
    break;
 8006d76:	bf00      	nop
  }

  return sysclockfreq;
 8006d78:	69bb      	ldr	r3, [r7, #24]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3724      	adds	r7, #36	; 0x24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	03d09000 	.word	0x03d09000
 8006d90:	003d0900 	.word	0x003d0900
 8006d94:	007a1200 	.word	0x007a1200
 8006d98:	46000000 	.word	0x46000000
 8006d9c:	4c742400 	.word	0x4c742400
 8006da0:	4a742400 	.word	0x4a742400
 8006da4:	4af42400 	.word	0x4af42400

08006da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006dae:	f7ff fe81 	bl	8006ab4 <HAL_RCC_GetSysClockFreq>
 8006db2:	4602      	mov	r2, r0
 8006db4:	4b10      	ldr	r3, [pc, #64]	; (8006df8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	0a1b      	lsrs	r3, r3, #8
 8006dba:	f003 030f 	and.w	r3, r3, #15
 8006dbe:	490f      	ldr	r1, [pc, #60]	; (8006dfc <HAL_RCC_GetHCLKFreq+0x54>)
 8006dc0:	5ccb      	ldrb	r3, [r1, r3]
 8006dc2:	f003 031f 	and.w	r3, r3, #31
 8006dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dca:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006dcc:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	f003 030f 	and.w	r3, r3, #15
 8006dd4:	4a09      	ldr	r2, [pc, #36]	; (8006dfc <HAL_RCC_GetHCLKFreq+0x54>)
 8006dd6:	5cd3      	ldrb	r3, [r2, r3]
 8006dd8:	f003 031f 	and.w	r3, r3, #31
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	fa22 f303 	lsr.w	r3, r2, r3
 8006de2:	4a07      	ldr	r2, [pc, #28]	; (8006e00 <HAL_RCC_GetHCLKFreq+0x58>)
 8006de4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006de6:	4a07      	ldr	r2, [pc, #28]	; (8006e04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006dec:	4b04      	ldr	r3, [pc, #16]	; (8006e00 <HAL_RCC_GetHCLKFreq+0x58>)
 8006dee:	681b      	ldr	r3, [r3, #0]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	58024400 	.word	0x58024400
 8006dfc:	0800ad60 	.word	0x0800ad60
 8006e00:	24000004 	.word	0x24000004
 8006e04:	24000000 	.word	0x24000000

08006e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006e0c:	f7ff ffcc 	bl	8006da8 <HAL_RCC_GetHCLKFreq>
 8006e10:	4602      	mov	r2, r0
 8006e12:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	091b      	lsrs	r3, r3, #4
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	4904      	ldr	r1, [pc, #16]	; (8006e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e1e:	5ccb      	ldrb	r3, [r1, r3]
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	0800ad60 	.word	0x0800ad60

08006e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006e38:	f7ff ffb6 	bl	8006da8 <HAL_RCC_GetHCLKFreq>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	0a1b      	lsrs	r3, r3, #8
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	4904      	ldr	r1, [pc, #16]	; (8006e5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e4a:	5ccb      	ldrb	r3, [r1, r3]
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	58024400 	.word	0x58024400
 8006e5c:	0800ad60 	.word	0x0800ad60

08006e60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e68:	2300      	movs	r3, #0
 8006e6a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d03f      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e84:	d02a      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006e86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e8a:	d824      	bhi.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006e8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e90:	d018      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e96:	d81e      	bhi.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ea0:	d007      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006ea2:	e018      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea4:	4b9f      	ldr	r3, [pc, #636]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	4a9e      	ldr	r2, [pc, #632]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006eb0:	e015      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	2102      	movs	r1, #2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f001 ff1b 	bl	8008cf4 <RCCEx_PLL2_Config>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ec2:	e00c      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3324      	adds	r3, #36	; 0x24
 8006ec8:	2102      	movs	r1, #2
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f001 ffc4 	bl	8008e58 <RCCEx_PLL3_Config>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ed4:	e003      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eda:	e000      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d109      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ee4:	4b8f      	ldr	r3, [pc, #572]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ef0:	498c      	ldr	r1, [pc, #560]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	650b      	str	r3, [r1, #80]	; 0x50
 8006ef6:	e001      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d03d      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d826      	bhi.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006f10:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f16:	bf00      	nop
 8006f18:	08006f2d 	.word	0x08006f2d
 8006f1c:	08006f3b 	.word	0x08006f3b
 8006f20:	08006f4d 	.word	0x08006f4d
 8006f24:	08006f65 	.word	0x08006f65
 8006f28:	08006f65 	.word	0x08006f65
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f2c:	4b7d      	ldr	r3, [pc, #500]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	4a7c      	ldr	r2, [pc, #496]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f38:	e015      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	2100      	movs	r1, #0
 8006f40:	4618      	mov	r0, r3
 8006f42:	f001 fed7 	bl	8008cf4 <RCCEx_PLL2_Config>
 8006f46:	4603      	mov	r3, r0
 8006f48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f4a:	e00c      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3324      	adds	r3, #36	; 0x24
 8006f50:	2100      	movs	r1, #0
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 ff80 	bl	8008e58 <RCCEx_PLL3_Config>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f5c:	e003      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	75fb      	strb	r3, [r7, #23]
      break;
 8006f62:	e000      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d109      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f6c:	4b6d      	ldr	r3, [pc, #436]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f70:	f023 0207 	bic.w	r2, r3, #7
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f78:	496a      	ldr	r1, [pc, #424]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	650b      	str	r3, [r1, #80]	; 0x50
 8006f7e:	e001      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f80:	7dfb      	ldrb	r3, [r7, #23]
 8006f82:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d04a      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f94:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006f98:	d031      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8006f9a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006f9e:	d82b      	bhi.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa4:	d02d      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8006fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006faa:	d825      	bhi.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006fac:	2bc0      	cmp	r3, #192	; 0xc0
 8006fae:	d02a      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006fb0:	2bc0      	cmp	r3, #192	; 0xc0
 8006fb2:	d821      	bhi.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006fb4:	2b80      	cmp	r3, #128	; 0x80
 8006fb6:	d016      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006fb8:	2b80      	cmp	r3, #128	; 0x80
 8006fba:	d81d      	bhi.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006fc0:	2b40      	cmp	r3, #64	; 0x40
 8006fc2:	d007      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8006fc4:	e018      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc6:	4b57      	ldr	r3, [pc, #348]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	4a56      	ldr	r2, [pc, #344]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006fd2:	e019      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	2100      	movs	r1, #0
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 fe8a 	bl	8008cf4 <RCCEx_PLL2_Config>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006fe4:	e010      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	3324      	adds	r3, #36	; 0x24
 8006fea:	2100      	movs	r1, #0
 8006fec:	4618      	mov	r0, r3
 8006fee:	f001 ff33 	bl	8008e58 <RCCEx_PLL3_Config>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006ff6:	e007      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8006ffc:	e004      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8006ffe:	bf00      	nop
 8007000:	e002      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007002:	bf00      	nop
 8007004:	e000      	b.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800700e:	4b45      	ldr	r3, [pc, #276]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007012:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701a:	4942      	ldr	r1, [pc, #264]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800701c:	4313      	orrs	r3, r2
 800701e:	650b      	str	r3, [r1, #80]	; 0x50
 8007020:	e001      	b.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800702e:	2b00      	cmp	r3, #0
 8007030:	d04f      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007036:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800703a:	d036      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800703c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007040:	d830      	bhi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007046:	d032      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800704c:	d82a      	bhi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800704e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007052:	d02e      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8007054:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007058:	d824      	bhi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800705a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800705e:	d018      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8007060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007064:	d81e      	bhi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800706a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800706e:	d007      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8007070:	e018      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007072:	4b2c      	ldr	r3, [pc, #176]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007076:	4a2b      	ldr	r2, [pc, #172]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800707c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800707e:	e019      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3304      	adds	r3, #4
 8007084:	2100      	movs	r1, #0
 8007086:	4618      	mov	r0, r3
 8007088:	f001 fe34 	bl	8008cf4 <RCCEx_PLL2_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007090:	e010      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	3324      	adds	r3, #36	; 0x24
 8007096:	2100      	movs	r1, #0
 8007098:	4618      	mov	r0, r3
 800709a:	f001 fedd 	bl	8008e58 <RCCEx_PLL3_Config>
 800709e:	4603      	mov	r3, r0
 80070a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80070a2:	e007      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	75fb      	strb	r3, [r7, #23]
      break;
 80070a8:	e004      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80070aa:	bf00      	nop
 80070ac:	e002      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80070ae:	bf00      	nop
 80070b0:	e000      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80070b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d109      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80070ba:	4b1a      	ldr	r3, [pc, #104]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070be:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c6:	4917      	ldr	r1, [pc, #92]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	650b      	str	r3, [r1, #80]	; 0x50
 80070cc:	e001      	b.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ce:	7dfb      	ldrb	r3, [r7, #23]
 80070d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d034      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070e2:	2b30      	cmp	r3, #48	; 0x30
 80070e4:	d01c      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80070e6:	2b30      	cmp	r3, #48	; 0x30
 80070e8:	d817      	bhi.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80070ea:	2b20      	cmp	r3, #32
 80070ec:	d00c      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d813      	bhi.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d018      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80070f6:	2b10      	cmp	r3, #16
 80070f8:	d10f      	bne.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070fa:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fe:	4a09      	ldr	r2, [pc, #36]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007104:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007106:	e010      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3304      	adds	r3, #4
 800710c:	2102      	movs	r1, #2
 800710e:	4618      	mov	r0, r3
 8007110:	f001 fdf0 	bl	8008cf4 <RCCEx_PLL2_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007118:	e007      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	75fb      	strb	r3, [r7, #23]
      break;
 800711e:	e004      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8007120:	bf00      	nop
 8007122:	e002      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007124:	58024400 	.word	0x58024400
      break;
 8007128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800712a:	7dfb      	ldrb	r3, [r7, #23]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d109      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007130:	4b9b      	ldr	r3, [pc, #620]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007134:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800713c:	4998      	ldr	r1, [pc, #608]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800713e:	4313      	orrs	r3, r2
 8007140:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007142:	e001      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d047      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800715c:	d030      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800715e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007162:	d82a      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007164:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007168:	d02c      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800716a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800716e:	d824      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007174:	d018      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800717a:	d81e      	bhi.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007184:	d007      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007186:	e018      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007188:	4b85      	ldr	r3, [pc, #532]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	4a84      	ldr	r2, [pc, #528]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800718e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007192:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007194:	e017      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3304      	adds	r3, #4
 800719a:	2100      	movs	r1, #0
 800719c:	4618      	mov	r0, r3
 800719e:	f001 fda9 	bl	8008cf4 <RCCEx_PLL2_Config>
 80071a2:	4603      	mov	r3, r0
 80071a4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071a6:	e00e      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	3324      	adds	r3, #36	; 0x24
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f001 fe52 	bl	8008e58 <RCCEx_PLL3_Config>
 80071b4:	4603      	mov	r3, r0
 80071b6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071b8:	e005      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	75fb      	strb	r3, [r7, #23]
      break;
 80071be:	e002      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80071c0:	bf00      	nop
 80071c2:	e000      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80071c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d109      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80071cc:	4b74      	ldr	r3, [pc, #464]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80071ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071d8:	4971      	ldr	r1, [pc, #452]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	650b      	str	r3, [r1, #80]	; 0x50
 80071de:	e001      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
 80071e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d049      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071f8:	d02e      	beq.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80071fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071fe:	d828      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007200:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007204:	d02a      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007206:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800720a:	d822      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800720c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007210:	d026      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8007212:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007216:	d81c      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800721c:	d010      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800721e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007222:	d816      	bhi.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007224:	2b00      	cmp	r3, #0
 8007226:	d01d      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800722c:	d111      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3304      	adds	r3, #4
 8007232:	2101      	movs	r1, #1
 8007234:	4618      	mov	r0, r3
 8007236:	f001 fd5d 	bl	8008cf4 <RCCEx_PLL2_Config>
 800723a:	4603      	mov	r3, r0
 800723c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800723e:	e012      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3324      	adds	r3, #36	; 0x24
 8007244:	2101      	movs	r1, #1
 8007246:	4618      	mov	r0, r3
 8007248:	f001 fe06 	bl	8008e58 <RCCEx_PLL3_Config>
 800724c:	4603      	mov	r3, r0
 800724e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007250:	e009      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	75fb      	strb	r3, [r7, #23]
      break;
 8007256:	e006      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007258:	bf00      	nop
 800725a:	e004      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800725c:	bf00      	nop
 800725e:	e002      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007260:	bf00      	nop
 8007262:	e000      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007266:	7dfb      	ldrb	r3, [r7, #23]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d109      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800726c:	4b4c      	ldr	r3, [pc, #304]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800726e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007270:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007278:	4949      	ldr	r1, [pc, #292]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800727a:	4313      	orrs	r3, r2
 800727c:	650b      	str	r3, [r1, #80]	; 0x50
 800727e:	e001      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007280:	7dfb      	ldrb	r3, [r7, #23]
 8007282:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d053      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007296:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800729a:	d034      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800729c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80072a0:	d82e      	bhi.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80072a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072a6:	d030      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80072a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072ac:	d828      	bhi.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80072ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b2:	d02c      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80072b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b8:	d822      	bhi.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80072ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072be:	d028      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80072c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072c4:	d81c      	bhi.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80072c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ca:	d010      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80072cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072d0:	d816      	bhi.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d01f      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80072d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072da:	d111      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3304      	adds	r3, #4
 80072e0:	2101      	movs	r1, #1
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 fd06 	bl	8008cf4 <RCCEx_PLL2_Config>
 80072e8:	4603      	mov	r3, r0
 80072ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80072ec:	e014      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3324      	adds	r3, #36	; 0x24
 80072f2:	2101      	movs	r1, #1
 80072f4:	4618      	mov	r0, r3
 80072f6:	f001 fdaf 	bl	8008e58 <RCCEx_PLL3_Config>
 80072fa:	4603      	mov	r3, r0
 80072fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80072fe:	e00b      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	75fb      	strb	r3, [r7, #23]
      break;
 8007304:	e008      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007306:	bf00      	nop
 8007308:	e006      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800730a:	bf00      	nop
 800730c:	e004      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800730e:	bf00      	nop
 8007310:	e002      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007312:	bf00      	nop
 8007314:	e000      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10a      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800731e:	4b20      	ldr	r3, [pc, #128]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007322:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800732c:	491c      	ldr	r1, [pc, #112]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800732e:	4313      	orrs	r3, r2
 8007330:	658b      	str	r3, [r1, #88]	; 0x58
 8007332:	e001      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d031      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800734c:	d00e      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800734e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007352:	d814      	bhi.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007354:	2b00      	cmp	r3, #0
 8007356:	d015      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007358:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800735c:	d10f      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800735e:	4b10      	ldr	r3, [pc, #64]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007362:	4a0f      	ldr	r2, [pc, #60]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007368:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800736a:	e00c      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3304      	adds	r3, #4
 8007370:	2101      	movs	r1, #1
 8007372:	4618      	mov	r0, r3
 8007374:	f001 fcbe 	bl	8008cf4 <RCCEx_PLL2_Config>
 8007378:	4603      	mov	r3, r0
 800737a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800737c:	e003      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	75fb      	strb	r3, [r7, #23]
      break;
 8007382:	e000      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8007384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10b      	bne.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800738c:	4b04      	ldr	r3, [pc, #16]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800738e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007390:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007398:	4901      	ldr	r1, [pc, #4]	; (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800739a:	4313      	orrs	r3, r2
 800739c:	650b      	str	r3, [r1, #80]	; 0x50
 800739e:	e003      	b.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x548>
 80073a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
 80073a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d032      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d81b      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80073bc:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80073be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c2:	bf00      	nop
 80073c4:	080073fb 	.word	0x080073fb
 80073c8:	080073d5 	.word	0x080073d5
 80073cc:	080073e3 	.word	0x080073e3
 80073d0:	080073fb 	.word	0x080073fb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073d4:	4bb2      	ldr	r3, [pc, #712]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80073d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d8:	4ab1      	ldr	r2, [pc, #708]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80073da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80073e0:	e00c      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3304      	adds	r3, #4
 80073e6:	2102      	movs	r1, #2
 80073e8:	4618      	mov	r0, r3
 80073ea:	f001 fc83 	bl	8008cf4 <RCCEx_PLL2_Config>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80073f2:	e003      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	75fb      	strb	r3, [r7, #23]
      break;
 80073f8:	e000      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80073fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007402:	4ba7      	ldr	r3, [pc, #668]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007406:	f023 0203 	bic.w	r2, r3, #3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740e:	49a4      	ldr	r1, [pc, #656]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007410:	4313      	orrs	r3, r2
 8007412:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007414:	e001      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 8086 	beq.w	8007534 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007428:	4b9e      	ldr	r3, [pc, #632]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a9d      	ldr	r2, [pc, #628]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800742e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007432:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007434:	f7fa fc5a 	bl	8001cec <HAL_GetTick>
 8007438:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800743a:	e009      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800743c:	f7fa fc56 	bl	8001cec <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b64      	cmp	r3, #100	; 0x64
 8007448:	d902      	bls.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	75fb      	strb	r3, [r7, #23]
        break;
 800744e:	e005      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007450:	4b94      	ldr	r3, [pc, #592]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007458:	2b00      	cmp	r3, #0
 800745a:	d0ef      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d166      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007462:	4b8f      	ldr	r3, [pc, #572]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007464:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800746c:	4053      	eors	r3, r2
 800746e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007472:	2b00      	cmp	r3, #0
 8007474:	d013      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007476:	4b8a      	ldr	r3, [pc, #552]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800747e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007480:	4b87      	ldr	r3, [pc, #540]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007484:	4a86      	ldr	r2, [pc, #536]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800748a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800748c:	4b84      	ldr	r3, [pc, #528]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800748e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007490:	4a83      	ldr	r2, [pc, #524]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007496:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007498:	4a81      	ldr	r2, [pc, #516]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074a8:	d115      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074aa:	f7fa fc1f 	bl	8001cec <HAL_GetTick>
 80074ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074b0:	e00b      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074b2:	f7fa fc1b 	bl	8001cec <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d902      	bls.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	75fb      	strb	r3, [r7, #23]
            break;
 80074c8:	e005      	b.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074ca:	4b75      	ldr	r3, [pc, #468]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80074cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0ed      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d126      	bne.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074ea:	d10d      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80074ec:	4b6c      	ldr	r3, [pc, #432]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074fa:	0919      	lsrs	r1, r3, #4
 80074fc:	4b6a      	ldr	r3, [pc, #424]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80074fe:	400b      	ands	r3, r1
 8007500:	4967      	ldr	r1, [pc, #412]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007502:	4313      	orrs	r3, r2
 8007504:	610b      	str	r3, [r1, #16]
 8007506:	e005      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8007508:	4b65      	ldr	r3, [pc, #404]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	4a64      	ldr	r2, [pc, #400]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800750e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007512:	6113      	str	r3, [r2, #16]
 8007514:	4b62      	ldr	r3, [pc, #392]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007516:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800751e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007522:	495f      	ldr	r1, [pc, #380]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007524:	4313      	orrs	r3, r2
 8007526:	670b      	str	r3, [r1, #112]	; 0x70
 8007528:	e004      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	75bb      	strb	r3, [r7, #22]
 800752e:	e001      	b.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007530:	7dfb      	ldrb	r3, [r7, #23]
 8007532:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d07f      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007546:	2b28      	cmp	r3, #40	; 0x28
 8007548:	d866      	bhi.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 800754a:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	0800761f 	.word	0x0800761f
 8007554:	08007619 	.word	0x08007619
 8007558:	08007619 	.word	0x08007619
 800755c:	08007619 	.word	0x08007619
 8007560:	08007619 	.word	0x08007619
 8007564:	08007619 	.word	0x08007619
 8007568:	08007619 	.word	0x08007619
 800756c:	08007619 	.word	0x08007619
 8007570:	080075f5 	.word	0x080075f5
 8007574:	08007619 	.word	0x08007619
 8007578:	08007619 	.word	0x08007619
 800757c:	08007619 	.word	0x08007619
 8007580:	08007619 	.word	0x08007619
 8007584:	08007619 	.word	0x08007619
 8007588:	08007619 	.word	0x08007619
 800758c:	08007619 	.word	0x08007619
 8007590:	08007607 	.word	0x08007607
 8007594:	08007619 	.word	0x08007619
 8007598:	08007619 	.word	0x08007619
 800759c:	08007619 	.word	0x08007619
 80075a0:	08007619 	.word	0x08007619
 80075a4:	08007619 	.word	0x08007619
 80075a8:	08007619 	.word	0x08007619
 80075ac:	08007619 	.word	0x08007619
 80075b0:	0800761f 	.word	0x0800761f
 80075b4:	08007619 	.word	0x08007619
 80075b8:	08007619 	.word	0x08007619
 80075bc:	08007619 	.word	0x08007619
 80075c0:	08007619 	.word	0x08007619
 80075c4:	08007619 	.word	0x08007619
 80075c8:	08007619 	.word	0x08007619
 80075cc:	08007619 	.word	0x08007619
 80075d0:	0800761f 	.word	0x0800761f
 80075d4:	08007619 	.word	0x08007619
 80075d8:	08007619 	.word	0x08007619
 80075dc:	08007619 	.word	0x08007619
 80075e0:	08007619 	.word	0x08007619
 80075e4:	08007619 	.word	0x08007619
 80075e8:	08007619 	.word	0x08007619
 80075ec:	08007619 	.word	0x08007619
 80075f0:	0800761f 	.word	0x0800761f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3304      	adds	r3, #4
 80075f8:	2101      	movs	r1, #1
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 fb7a 	bl	8008cf4 <RCCEx_PLL2_Config>
 8007600:	4603      	mov	r3, r0
 8007602:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007604:	e00c      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3324      	adds	r3, #36	; 0x24
 800760a:	2101      	movs	r1, #1
 800760c:	4618      	mov	r0, r3
 800760e:	f001 fc23 	bl	8008e58 <RCCEx_PLL3_Config>
 8007612:	4603      	mov	r3, r0
 8007614:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007616:	e003      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	75fb      	strb	r3, [r7, #23]
      break;
 800761c:	e000      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 800761e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10a      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007626:	4b1e      	ldr	r3, [pc, #120]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007634:	491a      	ldr	r1, [pc, #104]	; (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007636:	4313      	orrs	r3, r2
 8007638:	654b      	str	r3, [r1, #84]	; 0x54
 800763a:	e001      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d03f      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007650:	2b05      	cmp	r3, #5
 8007652:	d821      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8007654:	a201      	add	r2, pc, #4	; (adr r2, 800765c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8007656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800765a:	bf00      	nop
 800765c:	080076ad 	.word	0x080076ad
 8007660:	08007675 	.word	0x08007675
 8007664:	08007687 	.word	0x08007687
 8007668:	080076ad 	.word	0x080076ad
 800766c:	080076ad 	.word	0x080076ad
 8007670:	080076ad 	.word	0x080076ad
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3304      	adds	r3, #4
 8007678:	2101      	movs	r1, #1
 800767a:	4618      	mov	r0, r3
 800767c:	f001 fb3a 	bl	8008cf4 <RCCEx_PLL2_Config>
 8007680:	4603      	mov	r3, r0
 8007682:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007684:	e013      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3324      	adds	r3, #36	; 0x24
 800768a:	2101      	movs	r1, #1
 800768c:	4618      	mov	r0, r3
 800768e:	f001 fbe3 	bl	8008e58 <RCCEx_PLL3_Config>
 8007692:	4603      	mov	r3, r0
 8007694:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007696:	e00a      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	75fb      	strb	r3, [r7, #23]
      break;
 800769c:	e007      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800769e:	bf00      	nop
 80076a0:	58024400 	.word	0x58024400
 80076a4:	58024800 	.word	0x58024800
 80076a8:	00ffffcf 	.word	0x00ffffcf
      break;
 80076ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d109      	bne.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80076b4:	4b9f      	ldr	r3, [pc, #636]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80076b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b8:	f023 0207 	bic.w	r2, r3, #7
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076c0:	499c      	ldr	r1, [pc, #624]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	654b      	str	r3, [r1, #84]	; 0x54
 80076c6:	e001      	b.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0304 	and.w	r3, r3, #4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d039      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076de:	2b05      	cmp	r3, #5
 80076e0:	d820      	bhi.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80076e2:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80076e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e8:	0800772b 	.word	0x0800772b
 80076ec:	08007701 	.word	0x08007701
 80076f0:	08007713 	.word	0x08007713
 80076f4:	0800772b 	.word	0x0800772b
 80076f8:	0800772b 	.word	0x0800772b
 80076fc:	0800772b 	.word	0x0800772b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3304      	adds	r3, #4
 8007704:	2101      	movs	r1, #1
 8007706:	4618      	mov	r0, r3
 8007708:	f001 faf4 	bl	8008cf4 <RCCEx_PLL2_Config>
 800770c:	4603      	mov	r3, r0
 800770e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007710:	e00c      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3324      	adds	r3, #36	; 0x24
 8007716:	2101      	movs	r1, #1
 8007718:	4618      	mov	r0, r3
 800771a:	f001 fb9d 	bl	8008e58 <RCCEx_PLL3_Config>
 800771e:	4603      	mov	r3, r0
 8007720:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007722:	e003      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	75fb      	strb	r3, [r7, #23]
      break;
 8007728:	e000      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800772a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800772c:	7dfb      	ldrb	r3, [r7, #23]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007732:	4b80      	ldr	r3, [pc, #512]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007736:	f023 0207 	bic.w	r2, r3, #7
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007740:	497c      	ldr	r1, [pc, #496]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007742:	4313      	orrs	r3, r2
 8007744:	658b      	str	r3, [r1, #88]	; 0x58
 8007746:	e001      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007748:	7dfb      	ldrb	r3, [r7, #23]
 800774a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d04b      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800775e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007762:	d02e      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8007764:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007768:	d828      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800776a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800776e:	d02a      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007774:	d822      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007776:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800777a:	d026      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800777c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007780:	d81c      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007786:	d010      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8007788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800778c:	d816      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800778e:	2b00      	cmp	r3, #0
 8007790:	d01d      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007796:	d111      	bne.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3304      	adds	r3, #4
 800779c:	2100      	movs	r1, #0
 800779e:	4618      	mov	r0, r3
 80077a0:	f001 faa8 	bl	8008cf4 <RCCEx_PLL2_Config>
 80077a4:	4603      	mov	r3, r0
 80077a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80077a8:	e012      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	3324      	adds	r3, #36	; 0x24
 80077ae:	2102      	movs	r1, #2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f001 fb51 	bl	8008e58 <RCCEx_PLL3_Config>
 80077b6:	4603      	mov	r3, r0
 80077b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80077ba:	e009      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	75fb      	strb	r3, [r7, #23]
      break;
 80077c0:	e006      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80077c2:	bf00      	nop
 80077c4:	e004      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80077c6:	bf00      	nop
 80077c8:	e002      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80077ca:	bf00      	nop
 80077cc:	e000      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80077ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10a      	bne.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077d6:	4b57      	ldr	r3, [pc, #348]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80077d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077e4:	4953      	ldr	r1, [pc, #332]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	654b      	str	r3, [r1, #84]	; 0x54
 80077ea:	e001      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
 80077ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d04b      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007802:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007806:	d02e      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8007808:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800780c:	d828      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800780e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007812:	d02a      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007818:	d822      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800781a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800781e:	d026      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007820:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007824:	d81c      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800782a:	d010      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800782c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007830:	d816      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007832:	2b00      	cmp	r3, #0
 8007834:	d01d      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800783a:	d111      	bne.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	3304      	adds	r3, #4
 8007840:	2100      	movs	r1, #0
 8007842:	4618      	mov	r0, r3
 8007844:	f001 fa56 	bl	8008cf4 <RCCEx_PLL2_Config>
 8007848:	4603      	mov	r3, r0
 800784a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800784c:	e012      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	3324      	adds	r3, #36	; 0x24
 8007852:	2102      	movs	r1, #2
 8007854:	4618      	mov	r0, r3
 8007856:	f001 faff 	bl	8008e58 <RCCEx_PLL3_Config>
 800785a:	4603      	mov	r3, r0
 800785c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800785e:	e009      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	75fb      	strb	r3, [r7, #23]
      break;
 8007864:	e006      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007866:	bf00      	nop
 8007868:	e004      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800786a:	bf00      	nop
 800786c:	e002      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800786e:	bf00      	nop
 8007870:	e000      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007874:	7dfb      	ldrb	r3, [r7, #23]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800787a:	4b2e      	ldr	r3, [pc, #184]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800787c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800787e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007888:	492a      	ldr	r1, [pc, #168]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800788a:	4313      	orrs	r3, r2
 800788c:	658b      	str	r3, [r1, #88]	; 0x58
 800788e:	e001      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007890:	7dfb      	ldrb	r3, [r7, #23]
 8007892:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789c:	2b00      	cmp	r3, #0
 800789e:	d04d      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80078aa:	d02e      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80078ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80078b0:	d828      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80078b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b6:	d02a      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80078b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078bc:	d822      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80078be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80078c2:	d026      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80078c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80078c8:	d81c      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80078ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078ce:	d010      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80078d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078d4:	d816      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d01d      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80078da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078de:	d111      	bne.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3304      	adds	r3, #4
 80078e4:	2100      	movs	r1, #0
 80078e6:	4618      	mov	r0, r3
 80078e8:	f001 fa04 	bl	8008cf4 <RCCEx_PLL2_Config>
 80078ec:	4603      	mov	r3, r0
 80078ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80078f0:	e012      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3324      	adds	r3, #36	; 0x24
 80078f6:	2102      	movs	r1, #2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f001 faad 	bl	8008e58 <RCCEx_PLL3_Config>
 80078fe:	4603      	mov	r3, r0
 8007900:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007902:	e009      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	75fb      	strb	r3, [r7, #23]
      break;
 8007908:	e006      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800790a:	bf00      	nop
 800790c:	e004      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800790e:	bf00      	nop
 8007910:	e002      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007912:	bf00      	nop
 8007914:	e000      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10c      	bne.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800791e:	4b05      	ldr	r3, [pc, #20]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800792c:	4901      	ldr	r1, [pc, #4]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800792e:	4313      	orrs	r3, r2
 8007930:	658b      	str	r3, [r1, #88]	; 0x58
 8007932:	e003      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007934:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0308 	and.w	r3, r3, #8
 8007944:	2b00      	cmp	r3, #0
 8007946:	d01a      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800794e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007952:	d10a      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3324      	adds	r3, #36	; 0x24
 8007958:	2102      	movs	r1, #2
 800795a:	4618      	mov	r0, r3
 800795c:	f001 fa7c 	bl	8008e58 <RCCEx_PLL3_Config>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800796a:	4b8c      	ldr	r3, [pc, #560]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800796c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007978:	4988      	ldr	r1, [pc, #544]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800797a:	4313      	orrs	r3, r2
 800797c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0310 	and.w	r3, r3, #16
 8007986:	2b00      	cmp	r3, #0
 8007988:	d01a      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007994:	d10a      	bne.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3324      	adds	r3, #36	; 0x24
 800799a:	2102      	movs	r1, #2
 800799c:	4618      	mov	r0, r3
 800799e:	f001 fa5b 	bl	8008e58 <RCCEx_PLL3_Config>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079ac:	4b7b      	ldr	r3, [pc, #492]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80079ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079ba:	4978      	ldr	r1, [pc, #480]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d034      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079d6:	d01d      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80079d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079dc:	d817      	bhi.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80079e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079e6:	d009      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80079e8:	e011      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3304      	adds	r3, #4
 80079ee:	2100      	movs	r1, #0
 80079f0:	4618      	mov	r0, r3
 80079f2:	f001 f97f 	bl	8008cf4 <RCCEx_PLL2_Config>
 80079f6:	4603      	mov	r3, r0
 80079f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80079fa:	e00c      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3324      	adds	r3, #36	; 0x24
 8007a00:	2102      	movs	r1, #2
 8007a02:	4618      	mov	r0, r3
 8007a04:	f001 fa28 	bl	8008e58 <RCCEx_PLL3_Config>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007a0c:	e003      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	75fb      	strb	r3, [r7, #23]
      break;
 8007a12:	e000      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8007a14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10a      	bne.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a1c:	4b5f      	ldr	r3, [pc, #380]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a2a:	495c      	ldr	r1, [pc, #368]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	658b      	str	r3, [r1, #88]	; 0x58
 8007a30:	e001      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
 8007a34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d033      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a4c:	d01c      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007a4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a52:	d816      	bhi.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a58:	d003      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8007a5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a5e:	d007      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007a60:	e00f      	b.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a62:	4b4e      	ldr	r3, [pc, #312]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a66:	4a4d      	ldr	r2, [pc, #308]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a6e:	e00c      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3324      	adds	r3, #36	; 0x24
 8007a74:	2101      	movs	r1, #1
 8007a76:	4618      	mov	r0, r3
 8007a78:	f001 f9ee 	bl	8008e58 <RCCEx_PLL3_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007a80:	e003      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	75fb      	strb	r3, [r7, #23]
      break;
 8007a86:	e000      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10a      	bne.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a90:	4b42      	ldr	r3, [pc, #264]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a9e:	493f      	ldr	r1, [pc, #252]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	654b      	str	r3, [r1, #84]	; 0x54
 8007aa4:	e001      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d029      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8007abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ac2:	d007      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007ac4:	e00f      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ac6:	4b35      	ldr	r3, [pc, #212]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aca:	4a34      	ldr	r2, [pc, #208]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007ad2:	e00b      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3304      	adds	r3, #4
 8007ad8:	2102      	movs	r1, #2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f001 f90a 	bl	8008cf4 <RCCEx_PLL2_Config>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007ae4:	e002      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8007aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d109      	bne.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007af2:	4b2a      	ldr	r3, [pc, #168]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007afe:	4927      	ldr	r1, [pc, #156]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007b04:	e001      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
 8007b08:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	3324      	adds	r3, #36	; 0x24
 8007b1a:	2102      	movs	r1, #2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f001 f99b 	bl	8008e58 <RCCEx_PLL3_Config>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d035      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b42:	d017      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007b44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b48:	d811      	bhi.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b4e:	d013      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8007b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b54:	d80b      	bhi.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d010      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8007b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b5e:	d106      	bne.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b60:	4b0e      	ldr	r3, [pc, #56]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	4a0d      	ldr	r2, [pc, #52]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007b6c:	e007      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	75fb      	strb	r3, [r7, #23]
      break;
 8007b72:	e004      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007b74:	bf00      	nop
 8007b76:	e002      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007b78:	bf00      	nop
 8007b7a:	e000      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10d      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b84:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b92:	4902      	ldr	r1, [pc, #8]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	654b      	str	r3, [r1, #84]	; 0x54
 8007b98:	e004      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007b9a:	bf00      	nop
 8007b9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d008      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007bb0:	4b30      	ldr	r3, [pc, #192]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bbc:	492d      	ldr	r1, [pc, #180]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d008      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bce:	4b29      	ldr	r3, [pc, #164]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bda:	4926      	ldr	r1, [pc, #152]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d008      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007bec:	4b21      	ldr	r3, [pc, #132]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf8:	491e      	ldr	r1, [pc, #120]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00d      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c0a:	4b1a      	ldr	r3, [pc, #104]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	4a19      	ldr	r2, [pc, #100]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c14:	6113      	str	r3, [r2, #16]
 8007c16:	4b17      	ldr	r3, [pc, #92]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c18:	691a      	ldr	r2, [r3, #16]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007c20:	4914      	ldr	r1, [pc, #80]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	da08      	bge.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c2e:	4b11      	ldr	r3, [pc, #68]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c3a:	490e      	ldr	r1, [pc, #56]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d009      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c4c:	4b09      	ldr	r3, [pc, #36]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5a:	4906      	ldr	r1, [pc, #24]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007c60:	7dbb      	ldrb	r3, [r7, #22]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	e000      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3718      	adds	r7, #24
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	58024400 	.word	0x58024400

08007c78 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b090      	sub	sp, #64	; 0x40
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c86:	f040 8089 	bne.w	8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007c8a:	4b91      	ldr	r3, [pc, #580]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c8e:	f003 0307 	and.w	r3, r3, #7
 8007c92:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c96:	2b04      	cmp	r3, #4
 8007c98:	d87d      	bhi.n	8007d96 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8007c9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cb5 	.word	0x08007cb5
 8007ca4:	08007cd9 	.word	0x08007cd9
 8007ca8:	08007cfd 	.word	0x08007cfd
 8007cac:	08007d91 	.word	0x08007d91
 8007cb0:	08007d21 	.word	0x08007d21
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cb4:	4b86      	ldr	r3, [pc, #536]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cc0:	d107      	bne.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 fec2 	bl	8008a50 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007cd0:	e3f4      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cd6:	e3f1      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cd8:	4b7d      	ldr	r3, [pc, #500]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ce4:	d107      	bne.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ce6:	f107 0318 	add.w	r3, r7, #24
 8007cea:	4618      	mov	r0, r3
 8007cec:	f000 fc08 	bl	8008500 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007cf4:	e3e2      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cfa:	e3df      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cfc:	4b74      	ldr	r3, [pc, #464]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d08:	d107      	bne.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d0a:	f107 030c 	add.w	r3, r7, #12
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 fd4a 	bl	80087a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d18:	e3d0      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d1e:	e3cd      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d20:	4b6b      	ldr	r3, [pc, #428]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d28:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d2a:	4b69      	ldr	r3, [pc, #420]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f003 0304 	and.w	r3, r3, #4
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d10c      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d109      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d3c:	4b64      	ldr	r3, [pc, #400]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	08db      	lsrs	r3, r3, #3
 8007d42:	f003 0303 	and.w	r3, r3, #3
 8007d46:	4a63      	ldr	r2, [pc, #396]	; (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007d48:	fa22 f303 	lsr.w	r3, r2, r3
 8007d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d4e:	e01e      	b.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d50:	4b5f      	ldr	r3, [pc, #380]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d5c:	d106      	bne.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d64:	d102      	bne.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007d66:	4b5c      	ldr	r3, [pc, #368]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d6a:	e010      	b.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d6c:	4b58      	ldr	r3, [pc, #352]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d78:	d106      	bne.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d80:	d102      	bne.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007d82:	4b56      	ldr	r3, [pc, #344]	; (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007d84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d86:	e002      	b.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007d8c:	e396      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007d8e:	e395      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d90:	4b53      	ldr	r3, [pc, #332]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007d92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d94:	e392      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8007d96:	2300      	movs	r3, #0
 8007d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d9a:	e38f      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007da2:	f040 809f 	bne.w	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8007da6:	4b4a      	ldr	r3, [pc, #296]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007daa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007dae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007db6:	d04d      	beq.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbe:	f200 8084 	bhi.w	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	2bc0      	cmp	r3, #192	; 0xc0
 8007dc6:	d07d      	beq.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dca:	2bc0      	cmp	r3, #192	; 0xc0
 8007dcc:	d87d      	bhi.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd0:	2b80      	cmp	r3, #128	; 0x80
 8007dd2:	d02d      	beq.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	2b80      	cmp	r3, #128	; 0x80
 8007dd8:	d877      	bhi.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	2b40      	cmp	r3, #64	; 0x40
 8007de4:	d012      	beq.n	8007e0c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007de6:	e070      	b.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007de8:	4b39      	ldr	r3, [pc, #228]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007df4:	d107      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f000 fe28 	bl	8008a50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e04:	e35a      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e0a:	e357      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e0c:	4b30      	ldr	r3, [pc, #192]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e18:	d107      	bne.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e1a:	f107 0318 	add.w	r3, r7, #24
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 fb6e 	bl	8008500 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e28:	e348      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e2e:	e345      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e30:	4b27      	ldr	r3, [pc, #156]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e3c:	d107      	bne.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e3e:	f107 030c 	add.w	r3, r7, #12
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fcb0 	bl	80087a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e4c:	e336      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e52:	e333      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e54:	4b1e      	ldr	r3, [pc, #120]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e5c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e5e:	4b1c      	ldr	r3, [pc, #112]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0304 	and.w	r3, r3, #4
 8007e66:	2b04      	cmp	r3, #4
 8007e68:	d10c      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8007e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d109      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e70:	4b17      	ldr	r3, [pc, #92]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	08db      	lsrs	r3, r3, #3
 8007e76:	f003 0303 	and.w	r3, r3, #3
 8007e7a:	4a16      	ldr	r2, [pc, #88]	; (8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e82:	e01e      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e84:	4b12      	ldr	r3, [pc, #72]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e90:	d106      	bne.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8007e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e98:	d102      	bne.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007e9a:	4b0f      	ldr	r3, [pc, #60]	; (8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e9e:	e010      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ea0:	4b0b      	ldr	r3, [pc, #44]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eac:	d106      	bne.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eb4:	d102      	bne.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007eb6:	4b09      	ldr	r3, [pc, #36]	; (8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eba:	e002      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007ec0:	e2fc      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007ec2:	e2fb      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ec4:	4b06      	ldr	r3, [pc, #24]	; (8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ec8:	e2f8      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ece:	e2f5      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007ed0:	58024400 	.word	0x58024400
 8007ed4:	03d09000 	.word	0x03d09000
 8007ed8:	003d0900 	.word	0x003d0900
 8007edc:	007a1200 	.word	0x007a1200
 8007ee0:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eea:	f040 809c 	bne.w	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8007eee:	4b9d      	ldr	r3, [pc, #628]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef2:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007ef6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007efe:	d054      	beq.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f06:	f200 808b 	bhi.w	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f10:	f000 8083 	beq.w	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f16:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f1a:	f200 8081 	bhi.w	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f24:	d02f      	beq.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f2c:	d878      	bhi.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d004      	beq.n	8007f3e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f3a:	d012      	beq.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007f3c:	e070      	b.n	8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f3e:	4b89      	ldr	r3, [pc, #548]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f4a:	d107      	bne.n	8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 fd7d 	bl	8008a50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f5a:	e2af      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f60:	e2ac      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f62:	4b80      	ldr	r3, [pc, #512]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f6e:	d107      	bne.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f70:	f107 0318 	add.w	r3, r7, #24
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 fac3 	bl	8008500 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f7e:	e29d      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f84:	e29a      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f86:	4b77      	ldr	r3, [pc, #476]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f92:	d107      	bne.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f94:	f107 030c 	add.w	r3, r7, #12
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 fc05 	bl	80087a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007fa2:	e28b      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fa8:	e288      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007faa:	4b6e      	ldr	r3, [pc, #440]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fb2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fb4:	4b6b      	ldr	r3, [pc, #428]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0304 	and.w	r3, r3, #4
 8007fbc:	2b04      	cmp	r3, #4
 8007fbe:	d10c      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8007fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d109      	bne.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007fc6:	4b67      	ldr	r3, [pc, #412]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	08db      	lsrs	r3, r3, #3
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	4a65      	ldr	r2, [pc, #404]	; (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8007fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fd8:	e01e      	b.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fda:	4b62      	ldr	r3, [pc, #392]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe6:	d106      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8007fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fee:	d102      	bne.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007ff0:	4b5e      	ldr	r3, [pc, #376]	; (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ff4:	e010      	b.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ff6:	4b5b      	ldr	r3, [pc, #364]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008002:	d106      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8008004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800800a:	d102      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800800c:	4b58      	ldr	r3, [pc, #352]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 800800e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008010:	e002      	b.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8008016:	e251      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008018:	e250      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800801a:	4b56      	ldr	r3, [pc, #344]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800801c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800801e:	e24d      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008024:	e24a      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800802c:	f040 80a7 	bne.w	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008030:	4b4c      	ldr	r3, [pc, #304]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008034:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008038:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008040:	d055      	beq.n	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008048:	f200 8096 	bhi.w	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 800804c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008052:	f000 8084 	beq.w	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800805c:	f200 808c 	bhi.w	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008066:	d030      	beq.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8008068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800806e:	f200 8083 	bhi.w	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008074:	2b00      	cmp	r3, #0
 8008076:	d004      	beq.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800807e:	d012      	beq.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8008080:	e07a      	b.n	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008082:	4b38      	ldr	r3, [pc, #224]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800808a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800808e:	d107      	bne.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008094:	4618      	mov	r0, r3
 8008096:	f000 fcdb 	bl	8008a50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800809a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800809e:	e20d      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080a4:	e20a      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080a6:	4b2f      	ldr	r3, [pc, #188]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080b2:	d107      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080b4:	f107 0318 	add.w	r3, r7, #24
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 fa21 	bl	8008500 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80080c2:	e1fb      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080c8:	e1f8      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080ca:	4b26      	ldr	r3, [pc, #152]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080d6:	d107      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080d8:	f107 030c 	add.w	r3, r7, #12
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fb63 	bl	80087a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80080e6:	e1e9      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ec:	e1e6      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80080ee:	4b1d      	ldr	r3, [pc, #116]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80080f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080f6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080f8:	4b1a      	ldr	r3, [pc, #104]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b04      	cmp	r3, #4
 8008102:	d10c      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8008104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008106:	2b00      	cmp	r3, #0
 8008108:	d109      	bne.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800810a:	4b16      	ldr	r3, [pc, #88]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	08db      	lsrs	r3, r3, #3
 8008110:	f003 0303 	and.w	r3, r3, #3
 8008114:	4a14      	ldr	r2, [pc, #80]	; (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8008116:	fa22 f303 	lsr.w	r3, r2, r3
 800811a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800811c:	e01e      	b.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800811e:	4b11      	ldr	r3, [pc, #68]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812a:	d106      	bne.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 800812c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008132:	d102      	bne.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008134:	4b0d      	ldr	r3, [pc, #52]	; (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008138:	e010      	b.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800813a:	4b0a      	ldr	r3, [pc, #40]	; (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008146:	d106      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800814a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800814e:	d102      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008150:	4b07      	ldr	r3, [pc, #28]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008154:	e002      	b.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800815a:	e1af      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800815c:	e1ae      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800815e:	4b05      	ldr	r3, [pc, #20]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008162:	e1ab      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008164:	58024400 	.word	0x58024400
 8008168:	03d09000 	.word	0x03d09000
 800816c:	003d0900 	.word	0x003d0900
 8008170:	007a1200 	.word	0x007a1200
 8008174:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8008178:	2300      	movs	r3, #0
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800817c:	e19e      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008184:	d173      	bne.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008186:	4b9d      	ldr	r3, [pc, #628]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800818a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800818e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008196:	d02f      	beq.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8008198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800819e:	d863      	bhi.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80081a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d004      	beq.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081ac:	d012      	beq.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 80081ae:	e05b      	b.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081b0:	4b92      	ldr	r3, [pc, #584]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081bc:	d107      	bne.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081be:	f107 0318 	add.w	r3, r7, #24
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 f99c 	bl	8008500 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081cc:	e176      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80081ce:	2300      	movs	r3, #0
 80081d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081d2:	e173      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80081d4:	4b89      	ldr	r3, [pc, #548]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081e0:	d107      	bne.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081e2:	f107 030c 	add.w	r3, r7, #12
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fade 	bl	80087a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80081f0:	e164      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081f6:	e161      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80081f8:	4b80      	ldr	r3, [pc, #512]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80081fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008200:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008202:	4b7e      	ldr	r3, [pc, #504]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b04      	cmp	r3, #4
 800820c:	d10c      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 800820e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008210:	2b00      	cmp	r3, #0
 8008212:	d109      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008214:	4b79      	ldr	r3, [pc, #484]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	08db      	lsrs	r3, r3, #3
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	4a78      	ldr	r2, [pc, #480]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008220:	fa22 f303 	lsr.w	r3, r2, r3
 8008224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008226:	e01e      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008228:	4b74      	ldr	r3, [pc, #464]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008234:	d106      	bne.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008238:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800823c:	d102      	bne.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800823e:	4b71      	ldr	r3, [pc, #452]	; (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008242:	e010      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008244:	4b6d      	ldr	r3, [pc, #436]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800824c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008250:	d106      	bne.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008258:	d102      	bne.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800825a:	4b6b      	ldr	r3, [pc, #428]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800825c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800825e:	e002      	b.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008260:	2300      	movs	r3, #0
 8008262:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008264:	e12a      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008266:	e129      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800826c:	e126      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008274:	d133      	bne.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008276:	4b61      	ldr	r3, [pc, #388]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800827a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800827e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008282:	2b00      	cmp	r3, #0
 8008284:	d004      	beq.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800828c:	d012      	beq.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800828e:	e023      	b.n	80082d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008290:	4b5a      	ldr	r3, [pc, #360]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008298:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800829c:	d107      	bne.n	80082ae <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800829e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fbd4 	bl	8008a50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80082ac:	e106      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082b2:	e103      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082b4:	4b51      	ldr	r3, [pc, #324]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082c0:	d107      	bne.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082c2:	f107 0318 	add.w	r3, r7, #24
 80082c6:	4618      	mov	r0, r3
 80082c8:	f000 f91a 	bl	8008500 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80082d0:	e0f4      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80082d2:	2300      	movs	r3, #0
 80082d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082d6:	e0f1      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082dc:	e0ee      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082e4:	f040 809b 	bne.w	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80082e8:	4b44      	ldr	r3, [pc, #272]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80082ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ec:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80082f0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80082f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80082f8:	f000 808b 	beq.w	8008412 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80082fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fe:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008302:	f200 8089 	bhi.w	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800830c:	d06c      	beq.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800830e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008314:	f200 8080 	bhi.w	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800831e:	d056      	beq.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8008320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008326:	d877      	bhi.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800832e:	d03b      	beq.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8008330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008332:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008336:	d86f      	bhi.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800833e:	d021      	beq.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8008340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008346:	d867      	bhi.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834a:	2b00      	cmp	r3, #0
 800834c:	d004      	beq.n	8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800834e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008354:	d004      	beq.n	8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8008356:	e05f      	b.n	8008418 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008358:	f000 f8bc 	bl	80084d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800835c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800835e:	e0ad      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008360:	4b26      	ldr	r3, [pc, #152]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800836c:	d107      	bne.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800836e:	f107 0318 	add.w	r3, r7, #24
 8008372:	4618      	mov	r0, r3
 8008374:	f000 f8c4 	bl	8008500 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800837c:	e09e      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800837e:	2300      	movs	r3, #0
 8008380:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008382:	e09b      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008384:	4b1d      	ldr	r3, [pc, #116]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800838c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008390:	d107      	bne.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008392:	f107 030c 	add.w	r3, r7, #12
 8008396:	4618      	mov	r0, r3
 8008398:	f000 fa06 	bl	80087a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80083a0:	e08c      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80083a2:	2300      	movs	r3, #0
 80083a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083a6:	e089      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80083a8:	4b14      	ldr	r3, [pc, #80]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 0304 	and.w	r3, r3, #4
 80083b0:	2b04      	cmp	r3, #4
 80083b2:	d109      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083b4:	4b11      	ldr	r3, [pc, #68]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	08db      	lsrs	r3, r3, #3
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	4a10      	ldr	r2, [pc, #64]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80083c0:	fa22 f303 	lsr.w	r3, r2, r3
 80083c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80083c6:	e079      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80083c8:	2300      	movs	r3, #0
 80083ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083cc:	e076      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80083ce:	4b0b      	ldr	r3, [pc, #44]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083da:	d102      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 80083dc:	4b09      	ldr	r3, [pc, #36]	; (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80083de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083e0:	e06c      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083e6:	e069      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80083e8:	4b04      	ldr	r3, [pc, #16]	; (80083fc <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083f4:	d10a      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 80083f6:	4b04      	ldr	r3, [pc, #16]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80083f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80083fa:	e05f      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80083fc:	58024400 	.word	0x58024400
 8008400:	03d09000 	.word	0x03d09000
 8008404:	003d0900 	.word	0x003d0900
 8008408:	007a1200 	.word	0x007a1200
          frequency = 0;
 800840c:	2300      	movs	r3, #0
 800840e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008410:	e054      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008412:	4b2d      	ldr	r3, [pc, #180]	; (80084c8 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008416:	e051      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800841c:	e04e      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008424:	d148      	bne.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008426:	4b29      	ldr	r3, [pc, #164]	; (80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800842a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800842e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008436:	d02a      	beq.n	800848e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800843e:	d838      	bhi.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800844c:	d00d      	beq.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800844e:	e030      	b.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008450:	4b1e      	ldr	r3, [pc, #120]	; (80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008458:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800845c:	d102      	bne.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 800845e:	4b1c      	ldr	r3, [pc, #112]	; (80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008462:	e02b      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008464:	2300      	movs	r3, #0
 8008466:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008468:	e028      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800846a:	4b18      	ldr	r3, [pc, #96]	; (80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008476:	d107      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fae7 	bl	8008a50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008486:	e019      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008488:	2300      	movs	r3, #0
 800848a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800848c:	e016      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800848e:	4b0f      	ldr	r3, [pc, #60]	; (80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800849a:	d107      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800849c:	f107 0318 	add.w	r3, r7, #24
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 f82d 	bl	8008500 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80084aa:	e007      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084b0:	e004      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084b6:	e001      	b.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80084bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3740      	adds	r7, #64	; 0x40
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	00bb8000 	.word	0x00bb8000
 80084cc:	58024400 	.word	0x58024400
 80084d0:	007a1200 	.word	0x007a1200

080084d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80084d8:	f7fe fc66 	bl	8006da8 <HAL_RCC_GetHCLKFreq>
 80084dc:	4602      	mov	r2, r0
 80084de:	4b06      	ldr	r3, [pc, #24]	; (80084f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	091b      	lsrs	r3, r3, #4
 80084e4:	f003 0307 	and.w	r3, r3, #7
 80084e8:	4904      	ldr	r1, [pc, #16]	; (80084fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80084ea:	5ccb      	ldrb	r3, [r1, r3]
 80084ec:	f003 031f 	and.w	r3, r3, #31
 80084f0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	58024400 	.word	0x58024400
 80084fc:	0800ad60 	.word	0x0800ad60

08008500 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008500:	b480      	push	{r7}
 8008502:	b089      	sub	sp, #36	; 0x24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008508:	4ba1      	ldr	r3, [pc, #644]	; (8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800850a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850c:	f003 0303 	and.w	r3, r3, #3
 8008510:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008512:	4b9f      	ldr	r3, [pc, #636]	; (8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008516:	0b1b      	lsrs	r3, r3, #12
 8008518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800851c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800851e:	4b9c      	ldr	r3, [pc, #624]	; (8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008522:	091b      	lsrs	r3, r3, #4
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800852a:	4b99      	ldr	r3, [pc, #612]	; (8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800852c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852e:	08db      	lsrs	r3, r3, #3
 8008530:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	fb02 f303 	mul.w	r3, r2, r3
 800853a:	ee07 3a90 	vmov	s15, r3
 800853e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008542:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 8111 	beq.w	8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	2b02      	cmp	r3, #2
 8008552:	f000 8083 	beq.w	800865c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	2b02      	cmp	r3, #2
 800855a:	f200 80a1 	bhi.w	80086a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d056      	beq.n	8008618 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800856a:	e099      	b.n	80086a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800856c:	4b88      	ldr	r3, [pc, #544]	; (8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0320 	and.w	r3, r3, #32
 8008574:	2b00      	cmp	r3, #0
 8008576:	d02d      	beq.n	80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008578:	4b85      	ldr	r3, [pc, #532]	; (8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	08db      	lsrs	r3, r3, #3
 800857e:	f003 0303 	and.w	r3, r3, #3
 8008582:	4a84      	ldr	r2, [pc, #528]	; (8008794 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008584:	fa22 f303 	lsr.w	r3, r2, r3
 8008588:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	ee07 3a90 	vmov	s15, r3
 800859a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a2:	4b7b      	ldr	r3, [pc, #492]	; (8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085aa:	ee07 3a90 	vmov	s15, r3
 80085ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80085b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008798 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80085d2:	e087      	b.n	80086e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	ee07 3a90 	vmov	s15, r3
 80085da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800879c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80085e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e6:	4b6a      	ldr	r3, [pc, #424]	; (8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ee:	ee07 3a90 	vmov	s15, r3
 80085f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008798 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800860a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800860e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008612:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008616:	e065      	b.n	80086e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	ee07 3a90 	vmov	s15, r3
 800861e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008622:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80087a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862a:	4b59      	ldr	r3, [pc, #356]	; (8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800862c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008632:	ee07 3a90 	vmov	s15, r3
 8008636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863a:	ed97 6a03 	vldr	s12, [r7, #12]
 800863e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008798 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800864e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800865a:	e043      	b.n	80086e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008666:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80087a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800866a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800866e:	4b48      	ldr	r3, [pc, #288]	; (8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800867e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008682:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008798 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800868e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800869e:	e021      	b.n	80086e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80087a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80086ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b2:	4b37      	ldr	r3, [pc, #220]	; (8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ba:	ee07 3a90 	vmov	s15, r3
 80086be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008798 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80086e4:	4b2a      	ldr	r3, [pc, #168]	; (8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	0a5b      	lsrs	r3, r3, #9
 80086ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ee:	ee07 3a90 	vmov	s15, r3
 80086f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800870a:	ee17 2a90 	vmov	r2, s15
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008712:	4b1f      	ldr	r3, [pc, #124]	; (8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008716:	0c1b      	lsrs	r3, r3, #16
 8008718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800871c:	ee07 3a90 	vmov	s15, r3
 8008720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008724:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008728:	ee37 7a87 	vadd.f32	s14, s15, s14
 800872c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008738:	ee17 2a90 	vmov	r2, s15
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008740:	4b13      	ldr	r3, [pc, #76]	; (8008790 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008744:	0e1b      	lsrs	r3, r3, #24
 8008746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800874a:	ee07 3a90 	vmov	s15, r3
 800874e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008752:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008756:	ee37 7a87 	vadd.f32	s14, s15, s14
 800875a:	edd7 6a07 	vldr	s13, [r7, #28]
 800875e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008766:	ee17 2a90 	vmov	r2, s15
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800876e:	e008      	b.n	8008782 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	609a      	str	r2, [r3, #8]
}
 8008782:	bf00      	nop
 8008784:	3724      	adds	r7, #36	; 0x24
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	58024400 	.word	0x58024400
 8008794:	03d09000 	.word	0x03d09000
 8008798:	46000000 	.word	0x46000000
 800879c:	4c742400 	.word	0x4c742400
 80087a0:	4a742400 	.word	0x4a742400
 80087a4:	4af42400 	.word	0x4af42400

080087a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b089      	sub	sp, #36	; 0x24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087b0:	4ba1      	ldr	r3, [pc, #644]	; (8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b4:	f003 0303 	and.w	r3, r3, #3
 80087b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80087ba:	4b9f      	ldr	r3, [pc, #636]	; (8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087be:	0d1b      	lsrs	r3, r3, #20
 80087c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80087c6:	4b9c      	ldr	r3, [pc, #624]	; (8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ca:	0a1b      	lsrs	r3, r3, #8
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80087d2:	4b99      	ldr	r3, [pc, #612]	; (8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d6:	08db      	lsrs	r3, r3, #3
 80087d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087dc:	693a      	ldr	r2, [r7, #16]
 80087de:	fb02 f303 	mul.w	r3, r2, r3
 80087e2:	ee07 3a90 	vmov	s15, r3
 80087e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 8111 	beq.w	8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	f000 8083 	beq.w	8008904 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	2b02      	cmp	r3, #2
 8008802:	f200 80a1 	bhi.w	8008948 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d056      	beq.n	80088c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008812:	e099      	b.n	8008948 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008814:	4b88      	ldr	r3, [pc, #544]	; (8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0320 	and.w	r3, r3, #32
 800881c:	2b00      	cmp	r3, #0
 800881e:	d02d      	beq.n	800887c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008820:	4b85      	ldr	r3, [pc, #532]	; (8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	08db      	lsrs	r3, r3, #3
 8008826:	f003 0303 	and.w	r3, r3, #3
 800882a:	4a84      	ldr	r2, [pc, #528]	; (8008a3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800882c:	fa22 f303 	lsr.w	r3, r2, r3
 8008830:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	ee07 3a90 	vmov	s15, r3
 8008838:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884a:	4b7b      	ldr	r3, [pc, #492]	; (8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800884c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008852:	ee07 3a90 	vmov	s15, r3
 8008856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885a:	ed97 6a03 	vldr	s12, [r7, #12]
 800885e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800886a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800886e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008876:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800887a:	e087      	b.n	800898c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	ee07 3a90 	vmov	s15, r3
 8008882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008886:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800888a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800888e:	4b6a      	ldr	r3, [pc, #424]	; (8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008896:	ee07 3a90 	vmov	s15, r3
 800889a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800889e:	ed97 6a03 	vldr	s12, [r7, #12]
 80088a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088be:	e065      	b.n	800898c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	ee07 3a90 	vmov	s15, r3
 80088c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80088ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d2:	4b59      	ldr	r3, [pc, #356]	; (8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088da:	ee07 3a90 	vmov	s15, r3
 80088de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008902:	e043      	b.n	800898c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	ee07 3a90 	vmov	s15, r3
 800890a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008916:	4b48      	ldr	r3, [pc, #288]	; (8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008926:	ed97 6a03 	vldr	s12, [r7, #12]
 800892a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800892e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800893a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008946:	e021      	b.n	800898c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	ee07 3a90 	vmov	s15, r3
 800894e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008952:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800895a:	4b37      	ldr	r3, [pc, #220]	; (8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800895c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008962:	ee07 3a90 	vmov	s15, r3
 8008966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800896a:	ed97 6a03 	vldr	s12, [r7, #12]
 800896e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800897a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800897e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008986:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800898a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800898c:	4b2a      	ldr	r3, [pc, #168]	; (8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800898e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008990:	0a5b      	lsrs	r3, r3, #9
 8008992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80089aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089b2:	ee17 2a90 	vmov	r2, s15
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80089ba:	4b1f      	ldr	r3, [pc, #124]	; (8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	0c1b      	lsrs	r3, r3, #16
 80089c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c4:	ee07 3a90 	vmov	s15, r3
 80089c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089e0:	ee17 2a90 	vmov	r2, s15
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80089e8:	4b13      	ldr	r3, [pc, #76]	; (8008a38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ec:	0e1b      	lsrs	r3, r3, #24
 80089ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089f2:	ee07 3a90 	vmov	s15, r3
 80089f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a02:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a0e:	ee17 2a90 	vmov	r2, s15
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008a16:	e008      	b.n	8008a2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	609a      	str	r2, [r3, #8]
}
 8008a2a:	bf00      	nop
 8008a2c:	3724      	adds	r7, #36	; 0x24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	58024400 	.word	0x58024400
 8008a3c:	03d09000 	.word	0x03d09000
 8008a40:	46000000 	.word	0x46000000
 8008a44:	4c742400 	.word	0x4c742400
 8008a48:	4a742400 	.word	0x4a742400
 8008a4c:	4af42400 	.word	0x4af42400

08008a50 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b089      	sub	sp, #36	; 0x24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a58:	4ba0      	ldr	r3, [pc, #640]	; (8008cdc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5c:	f003 0303 	and.w	r3, r3, #3
 8008a60:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008a62:	4b9e      	ldr	r3, [pc, #632]	; (8008cdc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a66:	091b      	lsrs	r3, r3, #4
 8008a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a6c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008a6e:	4b9b      	ldr	r3, [pc, #620]	; (8008cdc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008a78:	4b98      	ldr	r3, [pc, #608]	; (8008cdc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7c:	08db      	lsrs	r3, r3, #3
 8008a7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	fb02 f303 	mul.w	r3, r2, r3
 8008a88:	ee07 3a90 	vmov	s15, r3
 8008a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a90:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f000 8111 	beq.w	8008cbe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	f000 8083 	beq.w	8008baa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	f200 80a1 	bhi.w	8008bee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d003      	beq.n	8008aba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d056      	beq.n	8008b66 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008ab8:	e099      	b.n	8008bee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008aba:	4b88      	ldr	r3, [pc, #544]	; (8008cdc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0320 	and.w	r3, r3, #32
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d02d      	beq.n	8008b22 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ac6:	4b85      	ldr	r3, [pc, #532]	; (8008cdc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	08db      	lsrs	r3, r3, #3
 8008acc:	f003 0303 	and.w	r3, r3, #3
 8008ad0:	4a83      	ldr	r2, [pc, #524]	; (8008ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	ee07 3a90 	vmov	s15, r3
 8008ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	ee07 3a90 	vmov	s15, r3
 8008ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008af0:	4b7a      	ldr	r3, [pc, #488]	; (8008cdc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af8:	ee07 3a90 	vmov	s15, r3
 8008afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b00:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b04:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b1c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008b20:	e087      	b.n	8008c32 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	ee07 3a90 	vmov	s15, r3
 8008b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008b30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b34:	4b69      	ldr	r3, [pc, #420]	; (8008cdc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b3c:	ee07 3a90 	vmov	s15, r3
 8008b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b44:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b48:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b64:	e065      	b.n	8008c32 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	ee07 3a90 	vmov	s15, r3
 8008b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b70:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008cec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008b74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b78:	4b58      	ldr	r3, [pc, #352]	; (8008cdc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b80:	ee07 3a90 	vmov	s15, r3
 8008b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b88:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b8c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ba8:	e043      	b.n	8008c32 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	ee07 3a90 	vmov	s15, r3
 8008bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008bb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bbc:	4b47      	ldr	r3, [pc, #284]	; (8008cdc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bc4:	ee07 3a90 	vmov	s15, r3
 8008bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bd0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008bd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008be8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bec:	e021      	b.n	8008c32 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	ee07 3a90 	vmov	s15, r3
 8008bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c00:	4b36      	ldr	r3, [pc, #216]	; (8008cdc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c08:	ee07 3a90 	vmov	s15, r3
 8008c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c10:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c14:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c30:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008c32:	4b2a      	ldr	r3, [pc, #168]	; (8008cdc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c36:	0a5b      	lsrs	r3, r3, #9
 8008c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c3c:	ee07 3a90 	vmov	s15, r3
 8008c40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c58:	ee17 2a90 	vmov	r2, s15
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008c60:	4b1e      	ldr	r3, [pc, #120]	; (8008cdc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c64:	0c1b      	lsrs	r3, r3, #16
 8008c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c86:	ee17 2a90 	vmov	r2, s15
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008c8e:	4b13      	ldr	r3, [pc, #76]	; (8008cdc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c92:	0e1b      	lsrs	r3, r3, #24
 8008c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c98:	ee07 3a90 	vmov	s15, r3
 8008c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ca4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ca8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cb4:	ee17 2a90 	vmov	r2, s15
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008cbc:	e008      	b.n	8008cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	609a      	str	r2, [r3, #8]
}
 8008cd0:	bf00      	nop
 8008cd2:	3724      	adds	r7, #36	; 0x24
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	58024400 	.word	0x58024400
 8008ce0:	03d09000 	.word	0x03d09000
 8008ce4:	46000000 	.word	0x46000000
 8008ce8:	4c742400 	.word	0x4c742400
 8008cec:	4a742400 	.word	0x4a742400
 8008cf0:	4af42400 	.word	0x4af42400

08008cf4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d02:	4b53      	ldr	r3, [pc, #332]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d06:	f003 0303 	and.w	r3, r3, #3
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d101      	bne.n	8008d12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e099      	b.n	8008e46 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008d12:	4b4f      	ldr	r3, [pc, #316]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a4e      	ldr	r2, [pc, #312]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d1e:	f7f8 ffe5 	bl	8001cec <HAL_GetTick>
 8008d22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d24:	e008      	b.n	8008d38 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d26:	f7f8 ffe1 	bl	8001cec <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d901      	bls.n	8008d38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e086      	b.n	8008e46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d38:	4b45      	ldr	r3, [pc, #276]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1f0      	bne.n	8008d26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008d44:	4b42      	ldr	r3, [pc, #264]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	031b      	lsls	r3, r3, #12
 8008d52:	493f      	ldr	r1, [pc, #252]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d54:	4313      	orrs	r3, r2
 8008d56:	628b      	str	r3, [r1, #40]	; 0x28
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	025b      	lsls	r3, r3, #9
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	431a      	orrs	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	3b01      	subs	r3, #1
 8008d74:	041b      	lsls	r3, r3, #16
 8008d76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	061b      	lsls	r3, r3, #24
 8008d84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d88:	4931      	ldr	r1, [pc, #196]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008d8e:	4b30      	ldr	r3, [pc, #192]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	492d      	ldr	r1, [pc, #180]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008da0:	4b2b      	ldr	r3, [pc, #172]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da4:	f023 0220 	bic.w	r2, r3, #32
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	4928      	ldr	r1, [pc, #160]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008db2:	4b27      	ldr	r3, [pc, #156]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db6:	4a26      	ldr	r2, [pc, #152]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008db8:	f023 0310 	bic.w	r3, r3, #16
 8008dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008dbe:	4b24      	ldr	r3, [pc, #144]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dc2:	4b24      	ldr	r3, [pc, #144]	; (8008e54 <RCCEx_PLL2_Config+0x160>)
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	69d2      	ldr	r2, [r2, #28]
 8008dca:	00d2      	lsls	r2, r2, #3
 8008dcc:	4920      	ldr	r1, [pc, #128]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008dd2:	4b1f      	ldr	r3, [pc, #124]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd6:	4a1e      	ldr	r2, [pc, #120]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dd8:	f043 0310 	orr.w	r3, r3, #16
 8008ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d106      	bne.n	8008df2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008de4:	4b1a      	ldr	r3, [pc, #104]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de8:	4a19      	ldr	r2, [pc, #100]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008df0:	e00f      	b.n	8008e12 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d106      	bne.n	8008e06 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008df8:	4b15      	ldr	r3, [pc, #84]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfc:	4a14      	ldr	r2, [pc, #80]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e04:	e005      	b.n	8008e12 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008e06:	4b12      	ldr	r3, [pc, #72]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0a:	4a11      	ldr	r2, [pc, #68]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008e0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008e12:	4b0f      	ldr	r3, [pc, #60]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a0e      	ldr	r2, [pc, #56]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008e18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e1e:	f7f8 ff65 	bl	8001cec <HAL_GetTick>
 8008e22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e24:	e008      	b.n	8008e38 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e26:	f7f8 ff61 	bl	8001cec <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d901      	bls.n	8008e38 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e006      	b.n	8008e46 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e38:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <RCCEx_PLL2_Config+0x15c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0f0      	beq.n	8008e26 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	58024400 	.word	0x58024400
 8008e54:	ffff0007 	.word	0xffff0007

08008e58 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e66:	4b53      	ldr	r3, [pc, #332]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6a:	f003 0303 	and.w	r3, r3, #3
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d101      	bne.n	8008e76 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e099      	b.n	8008faa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008e76:	4b4f      	ldr	r3, [pc, #316]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a4e      	ldr	r2, [pc, #312]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e82:	f7f8 ff33 	bl	8001cec <HAL_GetTick>
 8008e86:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e88:	e008      	b.n	8008e9c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008e8a:	f7f8 ff2f 	bl	8001cec <HAL_GetTick>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	2b02      	cmp	r3, #2
 8008e96:	d901      	bls.n	8008e9c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e086      	b.n	8008faa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e9c:	4b45      	ldr	r3, [pc, #276]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1f0      	bne.n	8008e8a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008ea8:	4b42      	ldr	r3, [pc, #264]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	051b      	lsls	r3, r3, #20
 8008eb6:	493f      	ldr	r1, [pc, #252]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	628b      	str	r3, [r1, #40]	; 0x28
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	025b      	lsls	r3, r3, #9
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	431a      	orrs	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	041b      	lsls	r3, r3, #16
 8008eda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ede:	431a      	orrs	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	061b      	lsls	r3, r3, #24
 8008ee8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008eec:	4931      	ldr	r1, [pc, #196]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008ef2:	4b30      	ldr	r3, [pc, #192]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	492d      	ldr	r1, [pc, #180]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f00:	4313      	orrs	r3, r2
 8008f02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008f04:	4b2b      	ldr	r3, [pc, #172]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	4928      	ldr	r1, [pc, #160]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008f16:	4b27      	ldr	r3, [pc, #156]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1a:	4a26      	ldr	r2, [pc, #152]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f22:	4b24      	ldr	r3, [pc, #144]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f26:	4b24      	ldr	r3, [pc, #144]	; (8008fb8 <RCCEx_PLL3_Config+0x160>)
 8008f28:	4013      	ands	r3, r2
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	69d2      	ldr	r2, [r2, #28]
 8008f2e:	00d2      	lsls	r2, r2, #3
 8008f30:	4920      	ldr	r1, [pc, #128]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f32:	4313      	orrs	r3, r2
 8008f34:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008f36:	4b1f      	ldr	r3, [pc, #124]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3a:	4a1e      	ldr	r2, [pc, #120]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d106      	bne.n	8008f56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008f48:	4b1a      	ldr	r3, [pc, #104]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	4a19      	ldr	r2, [pc, #100]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f54:	e00f      	b.n	8008f76 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d106      	bne.n	8008f6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008f5c:	4b15      	ldr	r3, [pc, #84]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	4a14      	ldr	r2, [pc, #80]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f68:	e005      	b.n	8008f76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008f6a:	4b12      	ldr	r3, [pc, #72]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6e:	4a11      	ldr	r2, [pc, #68]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008f76:	4b0f      	ldr	r3, [pc, #60]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a0e      	ldr	r2, [pc, #56]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f82:	f7f8 feb3 	bl	8001cec <HAL_GetTick>
 8008f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f88:	e008      	b.n	8008f9c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008f8a:	f7f8 feaf 	bl	8001cec <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d901      	bls.n	8008f9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e006      	b.n	8008faa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f9c:	4b05      	ldr	r3, [pc, #20]	; (8008fb4 <RCCEx_PLL3_Config+0x15c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0f0      	beq.n	8008f8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	58024400 	.word	0x58024400
 8008fb8:	ffff0007 	.word	0xffff0007

08008fbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e049      	b.n	8009062 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d106      	bne.n	8008fe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7f8 fcde 	bl	80019a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2202      	movs	r2, #2
 8008fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4610      	mov	r0, r2
 8008ffc:	f000 f99e 	bl	800933c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b01      	cmp	r3, #1
 800907e:	d001      	beq.n	8009084 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e04c      	b.n	800911e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a26      	ldr	r2, [pc, #152]	; (800912c <HAL_TIM_Base_Start+0xc0>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d022      	beq.n	80090dc <HAL_TIM_Base_Start+0x70>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800909e:	d01d      	beq.n	80090dc <HAL_TIM_Base_Start+0x70>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a22      	ldr	r2, [pc, #136]	; (8009130 <HAL_TIM_Base_Start+0xc4>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d018      	beq.n	80090dc <HAL_TIM_Base_Start+0x70>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a21      	ldr	r2, [pc, #132]	; (8009134 <HAL_TIM_Base_Start+0xc8>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d013      	beq.n	80090dc <HAL_TIM_Base_Start+0x70>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a1f      	ldr	r2, [pc, #124]	; (8009138 <HAL_TIM_Base_Start+0xcc>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00e      	beq.n	80090dc <HAL_TIM_Base_Start+0x70>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a1e      	ldr	r2, [pc, #120]	; (800913c <HAL_TIM_Base_Start+0xd0>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d009      	beq.n	80090dc <HAL_TIM_Base_Start+0x70>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a1c      	ldr	r2, [pc, #112]	; (8009140 <HAL_TIM_Base_Start+0xd4>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d004      	beq.n	80090dc <HAL_TIM_Base_Start+0x70>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a1b      	ldr	r2, [pc, #108]	; (8009144 <HAL_TIM_Base_Start+0xd8>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d115      	bne.n	8009108 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	4b19      	ldr	r3, [pc, #100]	; (8009148 <HAL_TIM_Base_Start+0xdc>)
 80090e4:	4013      	ands	r3, r2
 80090e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b06      	cmp	r3, #6
 80090ec:	d015      	beq.n	800911a <HAL_TIM_Base_Start+0xae>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090f4:	d011      	beq.n	800911a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f042 0201 	orr.w	r2, r2, #1
 8009104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009106:	e008      	b.n	800911a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f042 0201 	orr.w	r2, r2, #1
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	e000      	b.n	800911c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800911a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	40010000 	.word	0x40010000
 8009130:	40000400 	.word	0x40000400
 8009134:	40000800 	.word	0x40000800
 8009138:	40000c00 	.word	0x40000c00
 800913c:	40010400 	.word	0x40010400
 8009140:	40001800 	.word	0x40001800
 8009144:	40014000 	.word	0x40014000
 8009148:	00010007 	.word	0x00010007

0800914c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009160:	2b01      	cmp	r3, #1
 8009162:	d101      	bne.n	8009168 <HAL_TIM_ConfigClockSource+0x1c>
 8009164:	2302      	movs	r3, #2
 8009166:	e0dc      	b.n	8009322 <HAL_TIM_ConfigClockSource+0x1d6>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2202      	movs	r2, #2
 8009174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	4b6a      	ldr	r3, [pc, #424]	; (800932c <HAL_TIM_ConfigClockSource+0x1e0>)
 8009184:	4013      	ands	r3, r2
 8009186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800918e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a64      	ldr	r2, [pc, #400]	; (8009330 <HAL_TIM_ConfigClockSource+0x1e4>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	f000 80a9 	beq.w	80092f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80091a4:	4a62      	ldr	r2, [pc, #392]	; (8009330 <HAL_TIM_ConfigClockSource+0x1e4>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	f200 80ae 	bhi.w	8009308 <HAL_TIM_ConfigClockSource+0x1bc>
 80091ac:	4a61      	ldr	r2, [pc, #388]	; (8009334 <HAL_TIM_ConfigClockSource+0x1e8>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	f000 80a1 	beq.w	80092f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80091b4:	4a5f      	ldr	r2, [pc, #380]	; (8009334 <HAL_TIM_ConfigClockSource+0x1e8>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	f200 80a6 	bhi.w	8009308 <HAL_TIM_ConfigClockSource+0x1bc>
 80091bc:	4a5e      	ldr	r2, [pc, #376]	; (8009338 <HAL_TIM_ConfigClockSource+0x1ec>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	f000 8099 	beq.w	80092f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80091c4:	4a5c      	ldr	r2, [pc, #368]	; (8009338 <HAL_TIM_ConfigClockSource+0x1ec>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	f200 809e 	bhi.w	8009308 <HAL_TIM_ConfigClockSource+0x1bc>
 80091cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80091d0:	f000 8091 	beq.w	80092f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80091d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80091d8:	f200 8096 	bhi.w	8009308 <HAL_TIM_ConfigClockSource+0x1bc>
 80091dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091e0:	f000 8089 	beq.w	80092f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80091e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091e8:	f200 808e 	bhi.w	8009308 <HAL_TIM_ConfigClockSource+0x1bc>
 80091ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091f0:	d03e      	beq.n	8009270 <HAL_TIM_ConfigClockSource+0x124>
 80091f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091f6:	f200 8087 	bhi.w	8009308 <HAL_TIM_ConfigClockSource+0x1bc>
 80091fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091fe:	f000 8086 	beq.w	800930e <HAL_TIM_ConfigClockSource+0x1c2>
 8009202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009206:	d87f      	bhi.n	8009308 <HAL_TIM_ConfigClockSource+0x1bc>
 8009208:	2b70      	cmp	r3, #112	; 0x70
 800920a:	d01a      	beq.n	8009242 <HAL_TIM_ConfigClockSource+0xf6>
 800920c:	2b70      	cmp	r3, #112	; 0x70
 800920e:	d87b      	bhi.n	8009308 <HAL_TIM_ConfigClockSource+0x1bc>
 8009210:	2b60      	cmp	r3, #96	; 0x60
 8009212:	d050      	beq.n	80092b6 <HAL_TIM_ConfigClockSource+0x16a>
 8009214:	2b60      	cmp	r3, #96	; 0x60
 8009216:	d877      	bhi.n	8009308 <HAL_TIM_ConfigClockSource+0x1bc>
 8009218:	2b50      	cmp	r3, #80	; 0x50
 800921a:	d03c      	beq.n	8009296 <HAL_TIM_ConfigClockSource+0x14a>
 800921c:	2b50      	cmp	r3, #80	; 0x50
 800921e:	d873      	bhi.n	8009308 <HAL_TIM_ConfigClockSource+0x1bc>
 8009220:	2b40      	cmp	r3, #64	; 0x40
 8009222:	d058      	beq.n	80092d6 <HAL_TIM_ConfigClockSource+0x18a>
 8009224:	2b40      	cmp	r3, #64	; 0x40
 8009226:	d86f      	bhi.n	8009308 <HAL_TIM_ConfigClockSource+0x1bc>
 8009228:	2b30      	cmp	r3, #48	; 0x30
 800922a:	d064      	beq.n	80092f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800922c:	2b30      	cmp	r3, #48	; 0x30
 800922e:	d86b      	bhi.n	8009308 <HAL_TIM_ConfigClockSource+0x1bc>
 8009230:	2b20      	cmp	r3, #32
 8009232:	d060      	beq.n	80092f6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009234:	2b20      	cmp	r3, #32
 8009236:	d867      	bhi.n	8009308 <HAL_TIM_ConfigClockSource+0x1bc>
 8009238:	2b00      	cmp	r3, #0
 800923a:	d05c      	beq.n	80092f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800923c:	2b10      	cmp	r3, #16
 800923e:	d05a      	beq.n	80092f6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009240:	e062      	b.n	8009308 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6818      	ldr	r0, [r3, #0]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	6899      	ldr	r1, [r3, #8]
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f000 f98b 	bl	800956c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009264:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	609a      	str	r2, [r3, #8]
      break;
 800926e:	e04f      	b.n	8009310 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6818      	ldr	r0, [r3, #0]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	6899      	ldr	r1, [r3, #8]
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	f000 f974 	bl	800956c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	689a      	ldr	r2, [r3, #8]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009292:	609a      	str	r2, [r3, #8]
      break;
 8009294:	e03c      	b.n	8009310 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6818      	ldr	r0, [r3, #0]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	6859      	ldr	r1, [r3, #4]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	461a      	mov	r2, r3
 80092a4:	f000 f8e4 	bl	8009470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2150      	movs	r1, #80	; 0x50
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 f93e 	bl	8009530 <TIM_ITRx_SetConfig>
      break;
 80092b4:	e02c      	b.n	8009310 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6818      	ldr	r0, [r3, #0]
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	6859      	ldr	r1, [r3, #4]
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	461a      	mov	r2, r3
 80092c4:	f000 f903 	bl	80094ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2160      	movs	r1, #96	; 0x60
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 f92e 	bl	8009530 <TIM_ITRx_SetConfig>
      break;
 80092d4:	e01c      	b.n	8009310 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6818      	ldr	r0, [r3, #0]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	6859      	ldr	r1, [r3, #4]
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	461a      	mov	r2, r3
 80092e4:	f000 f8c4 	bl	8009470 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2140      	movs	r1, #64	; 0x40
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 f91e 	bl	8009530 <TIM_ITRx_SetConfig>
      break;
 80092f4:	e00c      	b.n	8009310 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4619      	mov	r1, r3
 8009300:	4610      	mov	r0, r2
 8009302:	f000 f915 	bl	8009530 <TIM_ITRx_SetConfig>
      break;
 8009306:	e003      	b.n	8009310 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	73fb      	strb	r3, [r7, #15]
      break;
 800930c:	e000      	b.n	8009310 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800930e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009320:	7bfb      	ldrb	r3, [r7, #15]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	ffceff88 	.word	0xffceff88
 8009330:	00100040 	.word	0x00100040
 8009334:	00100030 	.word	0x00100030
 8009338:	00100020 	.word	0x00100020

0800933c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a40      	ldr	r2, [pc, #256]	; (8009450 <TIM_Base_SetConfig+0x114>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d013      	beq.n	800937c <TIM_Base_SetConfig+0x40>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935a:	d00f      	beq.n	800937c <TIM_Base_SetConfig+0x40>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a3d      	ldr	r2, [pc, #244]	; (8009454 <TIM_Base_SetConfig+0x118>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d00b      	beq.n	800937c <TIM_Base_SetConfig+0x40>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a3c      	ldr	r2, [pc, #240]	; (8009458 <TIM_Base_SetConfig+0x11c>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d007      	beq.n	800937c <TIM_Base_SetConfig+0x40>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a3b      	ldr	r2, [pc, #236]	; (800945c <TIM_Base_SetConfig+0x120>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d003      	beq.n	800937c <TIM_Base_SetConfig+0x40>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a3a      	ldr	r2, [pc, #232]	; (8009460 <TIM_Base_SetConfig+0x124>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d108      	bne.n	800938e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	4313      	orrs	r3, r2
 800938c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a2f      	ldr	r2, [pc, #188]	; (8009450 <TIM_Base_SetConfig+0x114>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d01f      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800939c:	d01b      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a2c      	ldr	r2, [pc, #176]	; (8009454 <TIM_Base_SetConfig+0x118>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d017      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a2b      	ldr	r2, [pc, #172]	; (8009458 <TIM_Base_SetConfig+0x11c>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d013      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a2a      	ldr	r2, [pc, #168]	; (800945c <TIM_Base_SetConfig+0x120>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d00f      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a29      	ldr	r2, [pc, #164]	; (8009460 <TIM_Base_SetConfig+0x124>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d00b      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a28      	ldr	r2, [pc, #160]	; (8009464 <TIM_Base_SetConfig+0x128>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d007      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a27      	ldr	r2, [pc, #156]	; (8009468 <TIM_Base_SetConfig+0x12c>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d003      	beq.n	80093d6 <TIM_Base_SetConfig+0x9a>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a26      	ldr	r2, [pc, #152]	; (800946c <TIM_Base_SetConfig+0x130>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d108      	bne.n	80093e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a10      	ldr	r2, [pc, #64]	; (8009450 <TIM_Base_SetConfig+0x114>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d00f      	beq.n	8009434 <TIM_Base_SetConfig+0xf8>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a12      	ldr	r2, [pc, #72]	; (8009460 <TIM_Base_SetConfig+0x124>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d00b      	beq.n	8009434 <TIM_Base_SetConfig+0xf8>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a11      	ldr	r2, [pc, #68]	; (8009464 <TIM_Base_SetConfig+0x128>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d007      	beq.n	8009434 <TIM_Base_SetConfig+0xf8>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a10      	ldr	r2, [pc, #64]	; (8009468 <TIM_Base_SetConfig+0x12c>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d003      	beq.n	8009434 <TIM_Base_SetConfig+0xf8>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a0f      	ldr	r2, [pc, #60]	; (800946c <TIM_Base_SetConfig+0x130>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d103      	bne.n	800943c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	691a      	ldr	r2, [r3, #16]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	615a      	str	r2, [r3, #20]
}
 8009442:	bf00      	nop
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	40010000 	.word	0x40010000
 8009454:	40000400 	.word	0x40000400
 8009458:	40000800 	.word	0x40000800
 800945c:	40000c00 	.word	0x40000c00
 8009460:	40010400 	.word	0x40010400
 8009464:	40014000 	.word	0x40014000
 8009468:	40014400 	.word	0x40014400
 800946c:	40014800 	.word	0x40014800

08009470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009470:	b480      	push	{r7}
 8009472:	b087      	sub	sp, #28
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6a1b      	ldr	r3, [r3, #32]
 8009480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	f023 0201 	bic.w	r2, r3, #1
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800949a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	011b      	lsls	r3, r3, #4
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	f023 030a 	bic.w	r3, r3, #10
 80094ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	621a      	str	r2, [r3, #32]
}
 80094c2:	bf00      	nop
 80094c4:	371c      	adds	r7, #28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b087      	sub	sp, #28
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	f023 0210 	bic.w	r2, r3, #16
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6a1b      	ldr	r3, [r3, #32]
 80094f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	031b      	lsls	r3, r3, #12
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	4313      	orrs	r3, r2
 8009502:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800950a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	011b      	lsls	r3, r3, #4
 8009510:	693a      	ldr	r2, [r7, #16]
 8009512:	4313      	orrs	r3, r2
 8009514:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	621a      	str	r2, [r3, #32]
}
 8009522:	bf00      	nop
 8009524:	371c      	adds	r7, #28
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
	...

08009530 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	4b09      	ldr	r3, [pc, #36]	; (8009568 <TIM_ITRx_SetConfig+0x38>)
 8009544:	4013      	ands	r3, r2
 8009546:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009548:	683a      	ldr	r2, [r7, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4313      	orrs	r3, r2
 800954e:	f043 0307 	orr.w	r3, r3, #7
 8009552:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	609a      	str	r2, [r3, #8]
}
 800955a:	bf00      	nop
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	ffcfff8f 	.word	0xffcfff8f

0800956c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800956c:	b480      	push	{r7}
 800956e:	b087      	sub	sp, #28
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	021a      	lsls	r2, r3, #8
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	431a      	orrs	r2, r3
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	4313      	orrs	r3, r2
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	4313      	orrs	r3, r2
 8009598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	609a      	str	r2, [r3, #8]
}
 80095a0:	bf00      	nop
 80095a2:	371c      	adds	r7, #28
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d101      	bne.n	80095c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095c0:	2302      	movs	r3, #2
 80095c2:	e06d      	b.n	80096a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2202      	movs	r2, #2
 80095d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a30      	ldr	r2, [pc, #192]	; (80096ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d004      	beq.n	80095f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a2f      	ldr	r2, [pc, #188]	; (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d108      	bne.n	800960a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80095fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	4313      	orrs	r3, r2
 8009608:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009610:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	4313      	orrs	r3, r2
 800961a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a20      	ldr	r2, [pc, #128]	; (80096ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d022      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009636:	d01d      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a1d      	ldr	r2, [pc, #116]	; (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d018      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a1c      	ldr	r2, [pc, #112]	; (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d013      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a1a      	ldr	r2, [pc, #104]	; (80096bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d00e      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a15      	ldr	r2, [pc, #84]	; (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d009      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a16      	ldr	r2, [pc, #88]	; (80096c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d004      	beq.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a15      	ldr	r2, [pc, #84]	; (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d10c      	bne.n	800968e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800967a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	4313      	orrs	r3, r2
 8009684:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68ba      	ldr	r2, [r7, #8]
 800968c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3714      	adds	r7, #20
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr
 80096ac:	40010000 	.word	0x40010000
 80096b0:	40010400 	.word	0x40010400
 80096b4:	40000400 	.word	0x40000400
 80096b8:	40000800 	.word	0x40000800
 80096bc:	40000c00 	.word	0x40000c00
 80096c0:	40001800 	.word	0x40001800
 80096c4:	40014000 	.word	0x40014000

080096c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e042      	b.n	8009760 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d106      	bne.n	80096f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7f8 f9df 	bl	8001ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2224      	movs	r2, #36	; 0x24
 80096f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f022 0201 	bic.w	r2, r2, #1
 8009708:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f82c 	bl	8009768 <UART_SetConfig>
 8009710:	4603      	mov	r3, r0
 8009712:	2b01      	cmp	r3, #1
 8009714:	d101      	bne.n	800971a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e022      	b.n	8009760 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971e:	2b00      	cmp	r3, #0
 8009720:	d002      	beq.n	8009728 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fe8c 	bl	800a440 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009736:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009746:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f042 0201 	orr.w	r2, r2, #1
 8009756:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 ff13 	bl	800a584 <UART_CheckIdleState>
 800975e:	4603      	mov	r3, r0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800976c:	b092      	sub	sp, #72	; 0x48
 800976e:	af00      	add	r7, sp, #0
 8009770:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	689a      	ldr	r2, [r3, #8]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	431a      	orrs	r2, r3
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	431a      	orrs	r2, r3
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	69db      	ldr	r3, [r3, #28]
 800978c:	4313      	orrs	r3, r2
 800978e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	4bbe      	ldr	r3, [pc, #760]	; (8009a90 <UART_SetConfig+0x328>)
 8009798:	4013      	ands	r3, r2
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	6812      	ldr	r2, [r2, #0]
 800979e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097a0:	430b      	orrs	r3, r1
 80097a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	430a      	orrs	r2, r1
 80097b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4ab3      	ldr	r2, [pc, #716]	; (8009a94 <UART_SetConfig+0x32c>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d004      	beq.n	80097d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	6a1b      	ldr	r3, [r3, #32]
 80097ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097d0:	4313      	orrs	r3, r2
 80097d2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	689a      	ldr	r2, [r3, #8]
 80097da:	4baf      	ldr	r3, [pc, #700]	; (8009a98 <UART_SetConfig+0x330>)
 80097dc:	4013      	ands	r3, r2
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	6812      	ldr	r2, [r2, #0]
 80097e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097e4:	430b      	orrs	r3, r1
 80097e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ee:	f023 010f 	bic.w	r1, r3, #15
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	430a      	orrs	r2, r1
 80097fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4aa6      	ldr	r2, [pc, #664]	; (8009a9c <UART_SetConfig+0x334>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d177      	bne.n	80098f8 <UART_SetConfig+0x190>
 8009808:	4ba5      	ldr	r3, [pc, #660]	; (8009aa0 <UART_SetConfig+0x338>)
 800980a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800980c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009810:	2b28      	cmp	r3, #40	; 0x28
 8009812:	d86d      	bhi.n	80098f0 <UART_SetConfig+0x188>
 8009814:	a201      	add	r2, pc, #4	; (adr r2, 800981c <UART_SetConfig+0xb4>)
 8009816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981a:	bf00      	nop
 800981c:	080098c1 	.word	0x080098c1
 8009820:	080098f1 	.word	0x080098f1
 8009824:	080098f1 	.word	0x080098f1
 8009828:	080098f1 	.word	0x080098f1
 800982c:	080098f1 	.word	0x080098f1
 8009830:	080098f1 	.word	0x080098f1
 8009834:	080098f1 	.word	0x080098f1
 8009838:	080098f1 	.word	0x080098f1
 800983c:	080098c9 	.word	0x080098c9
 8009840:	080098f1 	.word	0x080098f1
 8009844:	080098f1 	.word	0x080098f1
 8009848:	080098f1 	.word	0x080098f1
 800984c:	080098f1 	.word	0x080098f1
 8009850:	080098f1 	.word	0x080098f1
 8009854:	080098f1 	.word	0x080098f1
 8009858:	080098f1 	.word	0x080098f1
 800985c:	080098d1 	.word	0x080098d1
 8009860:	080098f1 	.word	0x080098f1
 8009864:	080098f1 	.word	0x080098f1
 8009868:	080098f1 	.word	0x080098f1
 800986c:	080098f1 	.word	0x080098f1
 8009870:	080098f1 	.word	0x080098f1
 8009874:	080098f1 	.word	0x080098f1
 8009878:	080098f1 	.word	0x080098f1
 800987c:	080098d9 	.word	0x080098d9
 8009880:	080098f1 	.word	0x080098f1
 8009884:	080098f1 	.word	0x080098f1
 8009888:	080098f1 	.word	0x080098f1
 800988c:	080098f1 	.word	0x080098f1
 8009890:	080098f1 	.word	0x080098f1
 8009894:	080098f1 	.word	0x080098f1
 8009898:	080098f1 	.word	0x080098f1
 800989c:	080098e1 	.word	0x080098e1
 80098a0:	080098f1 	.word	0x080098f1
 80098a4:	080098f1 	.word	0x080098f1
 80098a8:	080098f1 	.word	0x080098f1
 80098ac:	080098f1 	.word	0x080098f1
 80098b0:	080098f1 	.word	0x080098f1
 80098b4:	080098f1 	.word	0x080098f1
 80098b8:	080098f1 	.word	0x080098f1
 80098bc:	080098e9 	.word	0x080098e9
 80098c0:	2301      	movs	r3, #1
 80098c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098c6:	e326      	b.n	8009f16 <UART_SetConfig+0x7ae>
 80098c8:	2304      	movs	r3, #4
 80098ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ce:	e322      	b.n	8009f16 <UART_SetConfig+0x7ae>
 80098d0:	2308      	movs	r3, #8
 80098d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098d6:	e31e      	b.n	8009f16 <UART_SetConfig+0x7ae>
 80098d8:	2310      	movs	r3, #16
 80098da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098de:	e31a      	b.n	8009f16 <UART_SetConfig+0x7ae>
 80098e0:	2320      	movs	r3, #32
 80098e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098e6:	e316      	b.n	8009f16 <UART_SetConfig+0x7ae>
 80098e8:	2340      	movs	r3, #64	; 0x40
 80098ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ee:	e312      	b.n	8009f16 <UART_SetConfig+0x7ae>
 80098f0:	2380      	movs	r3, #128	; 0x80
 80098f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098f6:	e30e      	b.n	8009f16 <UART_SetConfig+0x7ae>
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a69      	ldr	r2, [pc, #420]	; (8009aa4 <UART_SetConfig+0x33c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d130      	bne.n	8009964 <UART_SetConfig+0x1fc>
 8009902:	4b67      	ldr	r3, [pc, #412]	; (8009aa0 <UART_SetConfig+0x338>)
 8009904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009906:	f003 0307 	and.w	r3, r3, #7
 800990a:	2b05      	cmp	r3, #5
 800990c:	d826      	bhi.n	800995c <UART_SetConfig+0x1f4>
 800990e:	a201      	add	r2, pc, #4	; (adr r2, 8009914 <UART_SetConfig+0x1ac>)
 8009910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009914:	0800992d 	.word	0x0800992d
 8009918:	08009935 	.word	0x08009935
 800991c:	0800993d 	.word	0x0800993d
 8009920:	08009945 	.word	0x08009945
 8009924:	0800994d 	.word	0x0800994d
 8009928:	08009955 	.word	0x08009955
 800992c:	2300      	movs	r3, #0
 800992e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009932:	e2f0      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009934:	2304      	movs	r3, #4
 8009936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800993a:	e2ec      	b.n	8009f16 <UART_SetConfig+0x7ae>
 800993c:	2308      	movs	r3, #8
 800993e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009942:	e2e8      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009944:	2310      	movs	r3, #16
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800994a:	e2e4      	b.n	8009f16 <UART_SetConfig+0x7ae>
 800994c:	2320      	movs	r3, #32
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009952:	e2e0      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009954:	2340      	movs	r3, #64	; 0x40
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800995a:	e2dc      	b.n	8009f16 <UART_SetConfig+0x7ae>
 800995c:	2380      	movs	r3, #128	; 0x80
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009962:	e2d8      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a4f      	ldr	r2, [pc, #316]	; (8009aa8 <UART_SetConfig+0x340>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d130      	bne.n	80099d0 <UART_SetConfig+0x268>
 800996e:	4b4c      	ldr	r3, [pc, #304]	; (8009aa0 <UART_SetConfig+0x338>)
 8009970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009972:	f003 0307 	and.w	r3, r3, #7
 8009976:	2b05      	cmp	r3, #5
 8009978:	d826      	bhi.n	80099c8 <UART_SetConfig+0x260>
 800997a:	a201      	add	r2, pc, #4	; (adr r2, 8009980 <UART_SetConfig+0x218>)
 800997c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009980:	08009999 	.word	0x08009999
 8009984:	080099a1 	.word	0x080099a1
 8009988:	080099a9 	.word	0x080099a9
 800998c:	080099b1 	.word	0x080099b1
 8009990:	080099b9 	.word	0x080099b9
 8009994:	080099c1 	.word	0x080099c1
 8009998:	2300      	movs	r3, #0
 800999a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999e:	e2ba      	b.n	8009f16 <UART_SetConfig+0x7ae>
 80099a0:	2304      	movs	r3, #4
 80099a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a6:	e2b6      	b.n	8009f16 <UART_SetConfig+0x7ae>
 80099a8:	2308      	movs	r3, #8
 80099aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ae:	e2b2      	b.n	8009f16 <UART_SetConfig+0x7ae>
 80099b0:	2310      	movs	r3, #16
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099b6:	e2ae      	b.n	8009f16 <UART_SetConfig+0x7ae>
 80099b8:	2320      	movs	r3, #32
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099be:	e2aa      	b.n	8009f16 <UART_SetConfig+0x7ae>
 80099c0:	2340      	movs	r3, #64	; 0x40
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c6:	e2a6      	b.n	8009f16 <UART_SetConfig+0x7ae>
 80099c8:	2380      	movs	r3, #128	; 0x80
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ce:	e2a2      	b.n	8009f16 <UART_SetConfig+0x7ae>
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a35      	ldr	r2, [pc, #212]	; (8009aac <UART_SetConfig+0x344>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d130      	bne.n	8009a3c <UART_SetConfig+0x2d4>
 80099da:	4b31      	ldr	r3, [pc, #196]	; (8009aa0 <UART_SetConfig+0x338>)
 80099dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099de:	f003 0307 	and.w	r3, r3, #7
 80099e2:	2b05      	cmp	r3, #5
 80099e4:	d826      	bhi.n	8009a34 <UART_SetConfig+0x2cc>
 80099e6:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <UART_SetConfig+0x284>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a05 	.word	0x08009a05
 80099f0:	08009a0d 	.word	0x08009a0d
 80099f4:	08009a15 	.word	0x08009a15
 80099f8:	08009a1d 	.word	0x08009a1d
 80099fc:	08009a25 	.word	0x08009a25
 8009a00:	08009a2d 	.word	0x08009a2d
 8009a04:	2300      	movs	r3, #0
 8009a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0a:	e284      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009a0c:	2304      	movs	r3, #4
 8009a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a12:	e280      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009a14:	2308      	movs	r3, #8
 8009a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a1a:	e27c      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009a1c:	2310      	movs	r3, #16
 8009a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a22:	e278      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009a24:	2320      	movs	r3, #32
 8009a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2a:	e274      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009a2c:	2340      	movs	r3, #64	; 0x40
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a32:	e270      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009a34:	2380      	movs	r3, #128	; 0x80
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a3a:	e26c      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a1b      	ldr	r2, [pc, #108]	; (8009ab0 <UART_SetConfig+0x348>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d142      	bne.n	8009acc <UART_SetConfig+0x364>
 8009a46:	4b16      	ldr	r3, [pc, #88]	; (8009aa0 <UART_SetConfig+0x338>)
 8009a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a4a:	f003 0307 	and.w	r3, r3, #7
 8009a4e:	2b05      	cmp	r3, #5
 8009a50:	d838      	bhi.n	8009ac4 <UART_SetConfig+0x35c>
 8009a52:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <UART_SetConfig+0x2f0>)
 8009a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a58:	08009a71 	.word	0x08009a71
 8009a5c:	08009a79 	.word	0x08009a79
 8009a60:	08009a81 	.word	0x08009a81
 8009a64:	08009a89 	.word	0x08009a89
 8009a68:	08009ab5 	.word	0x08009ab5
 8009a6c:	08009abd 	.word	0x08009abd
 8009a70:	2300      	movs	r3, #0
 8009a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a76:	e24e      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009a78:	2304      	movs	r3, #4
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7e:	e24a      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009a80:	2308      	movs	r3, #8
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a86:	e246      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009a88:	2310      	movs	r3, #16
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a8e:	e242      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009a90:	cfff69f3 	.word	0xcfff69f3
 8009a94:	58000c00 	.word	0x58000c00
 8009a98:	11fff4ff 	.word	0x11fff4ff
 8009a9c:	40011000 	.word	0x40011000
 8009aa0:	58024400 	.word	0x58024400
 8009aa4:	40004400 	.word	0x40004400
 8009aa8:	40004800 	.word	0x40004800
 8009aac:	40004c00 	.word	0x40004c00
 8009ab0:	40005000 	.word	0x40005000
 8009ab4:	2320      	movs	r3, #32
 8009ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aba:	e22c      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009abc:	2340      	movs	r3, #64	; 0x40
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac2:	e228      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009ac4:	2380      	movs	r3, #128	; 0x80
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aca:	e224      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4ab1      	ldr	r2, [pc, #708]	; (8009d98 <UART_SetConfig+0x630>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d176      	bne.n	8009bc4 <UART_SetConfig+0x45c>
 8009ad6:	4bb1      	ldr	r3, [pc, #708]	; (8009d9c <UART_SetConfig+0x634>)
 8009ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ada:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ade:	2b28      	cmp	r3, #40	; 0x28
 8009ae0:	d86c      	bhi.n	8009bbc <UART_SetConfig+0x454>
 8009ae2:	a201      	add	r2, pc, #4	; (adr r2, 8009ae8 <UART_SetConfig+0x380>)
 8009ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae8:	08009b8d 	.word	0x08009b8d
 8009aec:	08009bbd 	.word	0x08009bbd
 8009af0:	08009bbd 	.word	0x08009bbd
 8009af4:	08009bbd 	.word	0x08009bbd
 8009af8:	08009bbd 	.word	0x08009bbd
 8009afc:	08009bbd 	.word	0x08009bbd
 8009b00:	08009bbd 	.word	0x08009bbd
 8009b04:	08009bbd 	.word	0x08009bbd
 8009b08:	08009b95 	.word	0x08009b95
 8009b0c:	08009bbd 	.word	0x08009bbd
 8009b10:	08009bbd 	.word	0x08009bbd
 8009b14:	08009bbd 	.word	0x08009bbd
 8009b18:	08009bbd 	.word	0x08009bbd
 8009b1c:	08009bbd 	.word	0x08009bbd
 8009b20:	08009bbd 	.word	0x08009bbd
 8009b24:	08009bbd 	.word	0x08009bbd
 8009b28:	08009b9d 	.word	0x08009b9d
 8009b2c:	08009bbd 	.word	0x08009bbd
 8009b30:	08009bbd 	.word	0x08009bbd
 8009b34:	08009bbd 	.word	0x08009bbd
 8009b38:	08009bbd 	.word	0x08009bbd
 8009b3c:	08009bbd 	.word	0x08009bbd
 8009b40:	08009bbd 	.word	0x08009bbd
 8009b44:	08009bbd 	.word	0x08009bbd
 8009b48:	08009ba5 	.word	0x08009ba5
 8009b4c:	08009bbd 	.word	0x08009bbd
 8009b50:	08009bbd 	.word	0x08009bbd
 8009b54:	08009bbd 	.word	0x08009bbd
 8009b58:	08009bbd 	.word	0x08009bbd
 8009b5c:	08009bbd 	.word	0x08009bbd
 8009b60:	08009bbd 	.word	0x08009bbd
 8009b64:	08009bbd 	.word	0x08009bbd
 8009b68:	08009bad 	.word	0x08009bad
 8009b6c:	08009bbd 	.word	0x08009bbd
 8009b70:	08009bbd 	.word	0x08009bbd
 8009b74:	08009bbd 	.word	0x08009bbd
 8009b78:	08009bbd 	.word	0x08009bbd
 8009b7c:	08009bbd 	.word	0x08009bbd
 8009b80:	08009bbd 	.word	0x08009bbd
 8009b84:	08009bbd 	.word	0x08009bbd
 8009b88:	08009bb5 	.word	0x08009bb5
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b92:	e1c0      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009b94:	2304      	movs	r3, #4
 8009b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b9a:	e1bc      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009b9c:	2308      	movs	r3, #8
 8009b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ba2:	e1b8      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009ba4:	2310      	movs	r3, #16
 8009ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009baa:	e1b4      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009bac:	2320      	movs	r3, #32
 8009bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bb2:	e1b0      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009bb4:	2340      	movs	r3, #64	; 0x40
 8009bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bba:	e1ac      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009bbc:	2380      	movs	r3, #128	; 0x80
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bc2:	e1a8      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a75      	ldr	r2, [pc, #468]	; (8009da0 <UART_SetConfig+0x638>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d130      	bne.n	8009c30 <UART_SetConfig+0x4c8>
 8009bce:	4b73      	ldr	r3, [pc, #460]	; (8009d9c <UART_SetConfig+0x634>)
 8009bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd2:	f003 0307 	and.w	r3, r3, #7
 8009bd6:	2b05      	cmp	r3, #5
 8009bd8:	d826      	bhi.n	8009c28 <UART_SetConfig+0x4c0>
 8009bda:	a201      	add	r2, pc, #4	; (adr r2, 8009be0 <UART_SetConfig+0x478>)
 8009bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be0:	08009bf9 	.word	0x08009bf9
 8009be4:	08009c01 	.word	0x08009c01
 8009be8:	08009c09 	.word	0x08009c09
 8009bec:	08009c11 	.word	0x08009c11
 8009bf0:	08009c19 	.word	0x08009c19
 8009bf4:	08009c21 	.word	0x08009c21
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfe:	e18a      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009c00:	2304      	movs	r3, #4
 8009c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c06:	e186      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009c08:	2308      	movs	r3, #8
 8009c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c0e:	e182      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009c10:	2310      	movs	r3, #16
 8009c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c16:	e17e      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009c18:	2320      	movs	r3, #32
 8009c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c1e:	e17a      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009c20:	2340      	movs	r3, #64	; 0x40
 8009c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c26:	e176      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009c28:	2380      	movs	r3, #128	; 0x80
 8009c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c2e:	e172      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a5b      	ldr	r2, [pc, #364]	; (8009da4 <UART_SetConfig+0x63c>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d130      	bne.n	8009c9c <UART_SetConfig+0x534>
 8009c3a:	4b58      	ldr	r3, [pc, #352]	; (8009d9c <UART_SetConfig+0x634>)
 8009c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c3e:	f003 0307 	and.w	r3, r3, #7
 8009c42:	2b05      	cmp	r3, #5
 8009c44:	d826      	bhi.n	8009c94 <UART_SetConfig+0x52c>
 8009c46:	a201      	add	r2, pc, #4	; (adr r2, 8009c4c <UART_SetConfig+0x4e4>)
 8009c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4c:	08009c65 	.word	0x08009c65
 8009c50:	08009c6d 	.word	0x08009c6d
 8009c54:	08009c75 	.word	0x08009c75
 8009c58:	08009c7d 	.word	0x08009c7d
 8009c5c:	08009c85 	.word	0x08009c85
 8009c60:	08009c8d 	.word	0x08009c8d
 8009c64:	2300      	movs	r3, #0
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6a:	e154      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009c6c:	2304      	movs	r3, #4
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c72:	e150      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009c74:	2308      	movs	r3, #8
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7a:	e14c      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009c7c:	2310      	movs	r3, #16
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c82:	e148      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009c84:	2320      	movs	r3, #32
 8009c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8a:	e144      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009c8c:	2340      	movs	r3, #64	; 0x40
 8009c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c92:	e140      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009c94:	2380      	movs	r3, #128	; 0x80
 8009c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c9a:	e13c      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a41      	ldr	r2, [pc, #260]	; (8009da8 <UART_SetConfig+0x640>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	f040 8082 	bne.w	8009dac <UART_SetConfig+0x644>
 8009ca8:	4b3c      	ldr	r3, [pc, #240]	; (8009d9c <UART_SetConfig+0x634>)
 8009caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cb0:	2b28      	cmp	r3, #40	; 0x28
 8009cb2:	d86d      	bhi.n	8009d90 <UART_SetConfig+0x628>
 8009cb4:	a201      	add	r2, pc, #4	; (adr r2, 8009cbc <UART_SetConfig+0x554>)
 8009cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cba:	bf00      	nop
 8009cbc:	08009d61 	.word	0x08009d61
 8009cc0:	08009d91 	.word	0x08009d91
 8009cc4:	08009d91 	.word	0x08009d91
 8009cc8:	08009d91 	.word	0x08009d91
 8009ccc:	08009d91 	.word	0x08009d91
 8009cd0:	08009d91 	.word	0x08009d91
 8009cd4:	08009d91 	.word	0x08009d91
 8009cd8:	08009d91 	.word	0x08009d91
 8009cdc:	08009d69 	.word	0x08009d69
 8009ce0:	08009d91 	.word	0x08009d91
 8009ce4:	08009d91 	.word	0x08009d91
 8009ce8:	08009d91 	.word	0x08009d91
 8009cec:	08009d91 	.word	0x08009d91
 8009cf0:	08009d91 	.word	0x08009d91
 8009cf4:	08009d91 	.word	0x08009d91
 8009cf8:	08009d91 	.word	0x08009d91
 8009cfc:	08009d71 	.word	0x08009d71
 8009d00:	08009d91 	.word	0x08009d91
 8009d04:	08009d91 	.word	0x08009d91
 8009d08:	08009d91 	.word	0x08009d91
 8009d0c:	08009d91 	.word	0x08009d91
 8009d10:	08009d91 	.word	0x08009d91
 8009d14:	08009d91 	.word	0x08009d91
 8009d18:	08009d91 	.word	0x08009d91
 8009d1c:	08009d79 	.word	0x08009d79
 8009d20:	08009d91 	.word	0x08009d91
 8009d24:	08009d91 	.word	0x08009d91
 8009d28:	08009d91 	.word	0x08009d91
 8009d2c:	08009d91 	.word	0x08009d91
 8009d30:	08009d91 	.word	0x08009d91
 8009d34:	08009d91 	.word	0x08009d91
 8009d38:	08009d91 	.word	0x08009d91
 8009d3c:	08009d81 	.word	0x08009d81
 8009d40:	08009d91 	.word	0x08009d91
 8009d44:	08009d91 	.word	0x08009d91
 8009d48:	08009d91 	.word	0x08009d91
 8009d4c:	08009d91 	.word	0x08009d91
 8009d50:	08009d91 	.word	0x08009d91
 8009d54:	08009d91 	.word	0x08009d91
 8009d58:	08009d91 	.word	0x08009d91
 8009d5c:	08009d89 	.word	0x08009d89
 8009d60:	2301      	movs	r3, #1
 8009d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d66:	e0d6      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009d68:	2304      	movs	r3, #4
 8009d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d6e:	e0d2      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009d70:	2308      	movs	r3, #8
 8009d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d76:	e0ce      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009d78:	2310      	movs	r3, #16
 8009d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d7e:	e0ca      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009d80:	2320      	movs	r3, #32
 8009d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d86:	e0c6      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009d88:	2340      	movs	r3, #64	; 0x40
 8009d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d8e:	e0c2      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009d90:	2380      	movs	r3, #128	; 0x80
 8009d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d96:	e0be      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009d98:	40011400 	.word	0x40011400
 8009d9c:	58024400 	.word	0x58024400
 8009da0:	40007800 	.word	0x40007800
 8009da4:	40007c00 	.word	0x40007c00
 8009da8:	40011800 	.word	0x40011800
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4aad      	ldr	r2, [pc, #692]	; (800a068 <UART_SetConfig+0x900>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d176      	bne.n	8009ea4 <UART_SetConfig+0x73c>
 8009db6:	4bad      	ldr	r3, [pc, #692]	; (800a06c <UART_SetConfig+0x904>)
 8009db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dbe:	2b28      	cmp	r3, #40	; 0x28
 8009dc0:	d86c      	bhi.n	8009e9c <UART_SetConfig+0x734>
 8009dc2:	a201      	add	r2, pc, #4	; (adr r2, 8009dc8 <UART_SetConfig+0x660>)
 8009dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc8:	08009e6d 	.word	0x08009e6d
 8009dcc:	08009e9d 	.word	0x08009e9d
 8009dd0:	08009e9d 	.word	0x08009e9d
 8009dd4:	08009e9d 	.word	0x08009e9d
 8009dd8:	08009e9d 	.word	0x08009e9d
 8009ddc:	08009e9d 	.word	0x08009e9d
 8009de0:	08009e9d 	.word	0x08009e9d
 8009de4:	08009e9d 	.word	0x08009e9d
 8009de8:	08009e75 	.word	0x08009e75
 8009dec:	08009e9d 	.word	0x08009e9d
 8009df0:	08009e9d 	.word	0x08009e9d
 8009df4:	08009e9d 	.word	0x08009e9d
 8009df8:	08009e9d 	.word	0x08009e9d
 8009dfc:	08009e9d 	.word	0x08009e9d
 8009e00:	08009e9d 	.word	0x08009e9d
 8009e04:	08009e9d 	.word	0x08009e9d
 8009e08:	08009e7d 	.word	0x08009e7d
 8009e0c:	08009e9d 	.word	0x08009e9d
 8009e10:	08009e9d 	.word	0x08009e9d
 8009e14:	08009e9d 	.word	0x08009e9d
 8009e18:	08009e9d 	.word	0x08009e9d
 8009e1c:	08009e9d 	.word	0x08009e9d
 8009e20:	08009e9d 	.word	0x08009e9d
 8009e24:	08009e9d 	.word	0x08009e9d
 8009e28:	08009e85 	.word	0x08009e85
 8009e2c:	08009e9d 	.word	0x08009e9d
 8009e30:	08009e9d 	.word	0x08009e9d
 8009e34:	08009e9d 	.word	0x08009e9d
 8009e38:	08009e9d 	.word	0x08009e9d
 8009e3c:	08009e9d 	.word	0x08009e9d
 8009e40:	08009e9d 	.word	0x08009e9d
 8009e44:	08009e9d 	.word	0x08009e9d
 8009e48:	08009e8d 	.word	0x08009e8d
 8009e4c:	08009e9d 	.word	0x08009e9d
 8009e50:	08009e9d 	.word	0x08009e9d
 8009e54:	08009e9d 	.word	0x08009e9d
 8009e58:	08009e9d 	.word	0x08009e9d
 8009e5c:	08009e9d 	.word	0x08009e9d
 8009e60:	08009e9d 	.word	0x08009e9d
 8009e64:	08009e9d 	.word	0x08009e9d
 8009e68:	08009e95 	.word	0x08009e95
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e72:	e050      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009e74:	2304      	movs	r3, #4
 8009e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e7a:	e04c      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009e7c:	2308      	movs	r3, #8
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e82:	e048      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009e84:	2310      	movs	r3, #16
 8009e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e8a:	e044      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009e8c:	2320      	movs	r3, #32
 8009e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e92:	e040      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009e94:	2340      	movs	r3, #64	; 0x40
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e9a:	e03c      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009e9c:	2380      	movs	r3, #128	; 0x80
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea2:	e038      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a71      	ldr	r2, [pc, #452]	; (800a070 <UART_SetConfig+0x908>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d130      	bne.n	8009f10 <UART_SetConfig+0x7a8>
 8009eae:	4b6f      	ldr	r3, [pc, #444]	; (800a06c <UART_SetConfig+0x904>)
 8009eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb2:	f003 0307 	and.w	r3, r3, #7
 8009eb6:	2b05      	cmp	r3, #5
 8009eb8:	d826      	bhi.n	8009f08 <UART_SetConfig+0x7a0>
 8009eba:	a201      	add	r2, pc, #4	; (adr r2, 8009ec0 <UART_SetConfig+0x758>)
 8009ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec0:	08009ed9 	.word	0x08009ed9
 8009ec4:	08009ee1 	.word	0x08009ee1
 8009ec8:	08009ee9 	.word	0x08009ee9
 8009ecc:	08009ef1 	.word	0x08009ef1
 8009ed0:	08009ef9 	.word	0x08009ef9
 8009ed4:	08009f01 	.word	0x08009f01
 8009ed8:	2302      	movs	r3, #2
 8009eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ede:	e01a      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009ee0:	2304      	movs	r3, #4
 8009ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee6:	e016      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009ee8:	2308      	movs	r3, #8
 8009eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eee:	e012      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009ef0:	2310      	movs	r3, #16
 8009ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ef6:	e00e      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009ef8:	2320      	movs	r3, #32
 8009efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009efe:	e00a      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009f00:	2340      	movs	r3, #64	; 0x40
 8009f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f06:	e006      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009f08:	2380      	movs	r3, #128	; 0x80
 8009f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f0e:	e002      	b.n	8009f16 <UART_SetConfig+0x7ae>
 8009f10:	2380      	movs	r3, #128	; 0x80
 8009f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a55      	ldr	r2, [pc, #340]	; (800a070 <UART_SetConfig+0x908>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	f040 80f8 	bne.w	800a112 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f22:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f26:	2b20      	cmp	r3, #32
 8009f28:	dc46      	bgt.n	8009fb8 <UART_SetConfig+0x850>
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	db75      	blt.n	800a01a <UART_SetConfig+0x8b2>
 8009f2e:	3b02      	subs	r3, #2
 8009f30:	2b1e      	cmp	r3, #30
 8009f32:	d872      	bhi.n	800a01a <UART_SetConfig+0x8b2>
 8009f34:	a201      	add	r2, pc, #4	; (adr r2, 8009f3c <UART_SetConfig+0x7d4>)
 8009f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3a:	bf00      	nop
 8009f3c:	08009fbf 	.word	0x08009fbf
 8009f40:	0800a01b 	.word	0x0800a01b
 8009f44:	08009fc7 	.word	0x08009fc7
 8009f48:	0800a01b 	.word	0x0800a01b
 8009f4c:	0800a01b 	.word	0x0800a01b
 8009f50:	0800a01b 	.word	0x0800a01b
 8009f54:	08009fd7 	.word	0x08009fd7
 8009f58:	0800a01b 	.word	0x0800a01b
 8009f5c:	0800a01b 	.word	0x0800a01b
 8009f60:	0800a01b 	.word	0x0800a01b
 8009f64:	0800a01b 	.word	0x0800a01b
 8009f68:	0800a01b 	.word	0x0800a01b
 8009f6c:	0800a01b 	.word	0x0800a01b
 8009f70:	0800a01b 	.word	0x0800a01b
 8009f74:	08009fe7 	.word	0x08009fe7
 8009f78:	0800a01b 	.word	0x0800a01b
 8009f7c:	0800a01b 	.word	0x0800a01b
 8009f80:	0800a01b 	.word	0x0800a01b
 8009f84:	0800a01b 	.word	0x0800a01b
 8009f88:	0800a01b 	.word	0x0800a01b
 8009f8c:	0800a01b 	.word	0x0800a01b
 8009f90:	0800a01b 	.word	0x0800a01b
 8009f94:	0800a01b 	.word	0x0800a01b
 8009f98:	0800a01b 	.word	0x0800a01b
 8009f9c:	0800a01b 	.word	0x0800a01b
 8009fa0:	0800a01b 	.word	0x0800a01b
 8009fa4:	0800a01b 	.word	0x0800a01b
 8009fa8:	0800a01b 	.word	0x0800a01b
 8009fac:	0800a01b 	.word	0x0800a01b
 8009fb0:	0800a01b 	.word	0x0800a01b
 8009fb4:	0800a00d 	.word	0x0800a00d
 8009fb8:	2b40      	cmp	r3, #64	; 0x40
 8009fba:	d02a      	beq.n	800a012 <UART_SetConfig+0x8aa>
 8009fbc:	e02d      	b.n	800a01a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009fbe:	f7fe fa89 	bl	80084d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8009fc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009fc4:	e02f      	b.n	800a026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f7fe fa98 	bl	8008500 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fd4:	e027      	b.n	800a026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fd6:	f107 0318 	add.w	r3, r7, #24
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fe fbe4 	bl	80087a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fe4:	e01f      	b.n	800a026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fe6:	4b21      	ldr	r3, [pc, #132]	; (800a06c <UART_SetConfig+0x904>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0320 	and.w	r3, r3, #32
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d009      	beq.n	800a006 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ff2:	4b1e      	ldr	r3, [pc, #120]	; (800a06c <UART_SetConfig+0x904>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	08db      	lsrs	r3, r3, #3
 8009ff8:	f003 0303 	and.w	r3, r3, #3
 8009ffc:	4a1d      	ldr	r2, [pc, #116]	; (800a074 <UART_SetConfig+0x90c>)
 8009ffe:	fa22 f303 	lsr.w	r3, r2, r3
 800a002:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a004:	e00f      	b.n	800a026 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a006:	4b1b      	ldr	r3, [pc, #108]	; (800a074 <UART_SetConfig+0x90c>)
 800a008:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a00a:	e00c      	b.n	800a026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a00c:	4b1a      	ldr	r3, [pc, #104]	; (800a078 <UART_SetConfig+0x910>)
 800a00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a010:	e009      	b.n	800a026 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a018:	e005      	b.n	800a026 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a01a:	2300      	movs	r3, #0
 800a01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a024:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f000 81ee 	beq.w	800a40a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a032:	4a12      	ldr	r2, [pc, #72]	; (800a07c <UART_SetConfig+0x914>)
 800a034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a038:	461a      	mov	r2, r3
 800a03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a03c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a040:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	4613      	mov	r3, r2
 800a048:	005b      	lsls	r3, r3, #1
 800a04a:	4413      	add	r3, r2
 800a04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a04e:	429a      	cmp	r2, r3
 800a050:	d305      	bcc.n	800a05e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d910      	bls.n	800a080 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a064:	e1d1      	b.n	800a40a <UART_SetConfig+0xca2>
 800a066:	bf00      	nop
 800a068:	40011c00 	.word	0x40011c00
 800a06c:	58024400 	.word	0x58024400
 800a070:	58000c00 	.word	0x58000c00
 800a074:	03d09000 	.word	0x03d09000
 800a078:	003d0900 	.word	0x003d0900
 800a07c:	0800ad78 	.word	0x0800ad78
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a082:	2200      	movs	r2, #0
 800a084:	60bb      	str	r3, [r7, #8]
 800a086:	60fa      	str	r2, [r7, #12]
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08c:	4ac0      	ldr	r2, [pc, #768]	; (800a390 <UART_SetConfig+0xc28>)
 800a08e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a092:	b29b      	uxth	r3, r3
 800a094:	2200      	movs	r2, #0
 800a096:	603b      	str	r3, [r7, #0]
 800a098:	607a      	str	r2, [r7, #4]
 800a09a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a09e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0a2:	f7f6 fae1 	bl	8000668 <__aeabi_uldivmod>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	f04f 0200 	mov.w	r2, #0
 800a0b2:	f04f 0300 	mov.w	r3, #0
 800a0b6:	020b      	lsls	r3, r1, #8
 800a0b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0bc:	0202      	lsls	r2, r0, #8
 800a0be:	6979      	ldr	r1, [r7, #20]
 800a0c0:	6849      	ldr	r1, [r1, #4]
 800a0c2:	0849      	lsrs	r1, r1, #1
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	4605      	mov	r5, r0
 800a0ca:	eb12 0804 	adds.w	r8, r2, r4
 800a0ce:	eb43 0905 	adc.w	r9, r3, r5
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	469a      	mov	sl, r3
 800a0da:	4693      	mov	fp, r2
 800a0dc:	4652      	mov	r2, sl
 800a0de:	465b      	mov	r3, fp
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	4649      	mov	r1, r9
 800a0e4:	f7f6 fac0 	bl	8000668 <__aeabi_uldivmod>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0f6:	d308      	bcc.n	800a10a <UART_SetConfig+0x9a2>
 800a0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0fe:	d204      	bcs.n	800a10a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a106:	60da      	str	r2, [r3, #12]
 800a108:	e17f      	b.n	800a40a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a110:	e17b      	b.n	800a40a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a11a:	f040 80bd 	bne.w	800a298 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a11e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a122:	2b20      	cmp	r3, #32
 800a124:	dc48      	bgt.n	800a1b8 <UART_SetConfig+0xa50>
 800a126:	2b00      	cmp	r3, #0
 800a128:	db7b      	blt.n	800a222 <UART_SetConfig+0xaba>
 800a12a:	2b20      	cmp	r3, #32
 800a12c:	d879      	bhi.n	800a222 <UART_SetConfig+0xaba>
 800a12e:	a201      	add	r2, pc, #4	; (adr r2, 800a134 <UART_SetConfig+0x9cc>)
 800a130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a134:	0800a1bf 	.word	0x0800a1bf
 800a138:	0800a1c7 	.word	0x0800a1c7
 800a13c:	0800a223 	.word	0x0800a223
 800a140:	0800a223 	.word	0x0800a223
 800a144:	0800a1cf 	.word	0x0800a1cf
 800a148:	0800a223 	.word	0x0800a223
 800a14c:	0800a223 	.word	0x0800a223
 800a150:	0800a223 	.word	0x0800a223
 800a154:	0800a1df 	.word	0x0800a1df
 800a158:	0800a223 	.word	0x0800a223
 800a15c:	0800a223 	.word	0x0800a223
 800a160:	0800a223 	.word	0x0800a223
 800a164:	0800a223 	.word	0x0800a223
 800a168:	0800a223 	.word	0x0800a223
 800a16c:	0800a223 	.word	0x0800a223
 800a170:	0800a223 	.word	0x0800a223
 800a174:	0800a1ef 	.word	0x0800a1ef
 800a178:	0800a223 	.word	0x0800a223
 800a17c:	0800a223 	.word	0x0800a223
 800a180:	0800a223 	.word	0x0800a223
 800a184:	0800a223 	.word	0x0800a223
 800a188:	0800a223 	.word	0x0800a223
 800a18c:	0800a223 	.word	0x0800a223
 800a190:	0800a223 	.word	0x0800a223
 800a194:	0800a223 	.word	0x0800a223
 800a198:	0800a223 	.word	0x0800a223
 800a19c:	0800a223 	.word	0x0800a223
 800a1a0:	0800a223 	.word	0x0800a223
 800a1a4:	0800a223 	.word	0x0800a223
 800a1a8:	0800a223 	.word	0x0800a223
 800a1ac:	0800a223 	.word	0x0800a223
 800a1b0:	0800a223 	.word	0x0800a223
 800a1b4:	0800a215 	.word	0x0800a215
 800a1b8:	2b40      	cmp	r3, #64	; 0x40
 800a1ba:	d02e      	beq.n	800a21a <UART_SetConfig+0xab2>
 800a1bc:	e031      	b.n	800a222 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1be:	f7fc fe23 	bl	8006e08 <HAL_RCC_GetPCLK1Freq>
 800a1c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a1c4:	e033      	b.n	800a22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1c6:	f7fc fe35 	bl	8006e34 <HAL_RCC_GetPCLK2Freq>
 800a1ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a1cc:	e02f      	b.n	800a22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fe f994 	bl	8008500 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1dc:	e027      	b.n	800a22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1de:	f107 0318 	add.w	r3, r7, #24
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fe fae0 	bl	80087a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1ec:	e01f      	b.n	800a22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1ee:	4b69      	ldr	r3, [pc, #420]	; (800a394 <UART_SetConfig+0xc2c>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 0320 	and.w	r3, r3, #32
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d009      	beq.n	800a20e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a1fa:	4b66      	ldr	r3, [pc, #408]	; (800a394 <UART_SetConfig+0xc2c>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	08db      	lsrs	r3, r3, #3
 800a200:	f003 0303 	and.w	r3, r3, #3
 800a204:	4a64      	ldr	r2, [pc, #400]	; (800a398 <UART_SetConfig+0xc30>)
 800a206:	fa22 f303 	lsr.w	r3, r2, r3
 800a20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a20c:	e00f      	b.n	800a22e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a20e:	4b62      	ldr	r3, [pc, #392]	; (800a398 <UART_SetConfig+0xc30>)
 800a210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a212:	e00c      	b.n	800a22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a214:	4b61      	ldr	r3, [pc, #388]	; (800a39c <UART_SetConfig+0xc34>)
 800a216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a218:	e009      	b.n	800a22e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a21a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a220:	e005      	b.n	800a22e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a222:	2300      	movs	r3, #0
 800a224:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a22c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a22e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a230:	2b00      	cmp	r3, #0
 800a232:	f000 80ea 	beq.w	800a40a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	4a55      	ldr	r2, [pc, #340]	; (800a390 <UART_SetConfig+0xc28>)
 800a23c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a240:	461a      	mov	r2, r3
 800a242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a244:	fbb3 f3f2 	udiv	r3, r3, r2
 800a248:	005a      	lsls	r2, r3, #1
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	085b      	lsrs	r3, r3, #1
 800a250:	441a      	add	r2, r3
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	fbb2 f3f3 	udiv	r3, r2, r3
 800a25a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25e:	2b0f      	cmp	r3, #15
 800a260:	d916      	bls.n	800a290 <UART_SetConfig+0xb28>
 800a262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a268:	d212      	bcs.n	800a290 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	f023 030f 	bic.w	r3, r3, #15
 800a272:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a276:	085b      	lsrs	r3, r3, #1
 800a278:	b29b      	uxth	r3, r3
 800a27a:	f003 0307 	and.w	r3, r3, #7
 800a27e:	b29a      	uxth	r2, r3
 800a280:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a282:	4313      	orrs	r3, r2
 800a284:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a28c:	60da      	str	r2, [r3, #12]
 800a28e:	e0bc      	b.n	800a40a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a296:	e0b8      	b.n	800a40a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a298:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a29c:	2b20      	cmp	r3, #32
 800a29e:	dc4b      	bgt.n	800a338 <UART_SetConfig+0xbd0>
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f2c0 8087 	blt.w	800a3b4 <UART_SetConfig+0xc4c>
 800a2a6:	2b20      	cmp	r3, #32
 800a2a8:	f200 8084 	bhi.w	800a3b4 <UART_SetConfig+0xc4c>
 800a2ac:	a201      	add	r2, pc, #4	; (adr r2, 800a2b4 <UART_SetConfig+0xb4c>)
 800a2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b2:	bf00      	nop
 800a2b4:	0800a33f 	.word	0x0800a33f
 800a2b8:	0800a347 	.word	0x0800a347
 800a2bc:	0800a3b5 	.word	0x0800a3b5
 800a2c0:	0800a3b5 	.word	0x0800a3b5
 800a2c4:	0800a34f 	.word	0x0800a34f
 800a2c8:	0800a3b5 	.word	0x0800a3b5
 800a2cc:	0800a3b5 	.word	0x0800a3b5
 800a2d0:	0800a3b5 	.word	0x0800a3b5
 800a2d4:	0800a35f 	.word	0x0800a35f
 800a2d8:	0800a3b5 	.word	0x0800a3b5
 800a2dc:	0800a3b5 	.word	0x0800a3b5
 800a2e0:	0800a3b5 	.word	0x0800a3b5
 800a2e4:	0800a3b5 	.word	0x0800a3b5
 800a2e8:	0800a3b5 	.word	0x0800a3b5
 800a2ec:	0800a3b5 	.word	0x0800a3b5
 800a2f0:	0800a3b5 	.word	0x0800a3b5
 800a2f4:	0800a36f 	.word	0x0800a36f
 800a2f8:	0800a3b5 	.word	0x0800a3b5
 800a2fc:	0800a3b5 	.word	0x0800a3b5
 800a300:	0800a3b5 	.word	0x0800a3b5
 800a304:	0800a3b5 	.word	0x0800a3b5
 800a308:	0800a3b5 	.word	0x0800a3b5
 800a30c:	0800a3b5 	.word	0x0800a3b5
 800a310:	0800a3b5 	.word	0x0800a3b5
 800a314:	0800a3b5 	.word	0x0800a3b5
 800a318:	0800a3b5 	.word	0x0800a3b5
 800a31c:	0800a3b5 	.word	0x0800a3b5
 800a320:	0800a3b5 	.word	0x0800a3b5
 800a324:	0800a3b5 	.word	0x0800a3b5
 800a328:	0800a3b5 	.word	0x0800a3b5
 800a32c:	0800a3b5 	.word	0x0800a3b5
 800a330:	0800a3b5 	.word	0x0800a3b5
 800a334:	0800a3a7 	.word	0x0800a3a7
 800a338:	2b40      	cmp	r3, #64	; 0x40
 800a33a:	d037      	beq.n	800a3ac <UART_SetConfig+0xc44>
 800a33c:	e03a      	b.n	800a3b4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a33e:	f7fc fd63 	bl	8006e08 <HAL_RCC_GetPCLK1Freq>
 800a342:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a344:	e03c      	b.n	800a3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a346:	f7fc fd75 	bl	8006e34 <HAL_RCC_GetPCLK2Freq>
 800a34a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a34c:	e038      	b.n	800a3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a34e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a352:	4618      	mov	r0, r3
 800a354:	f7fe f8d4 	bl	8008500 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a35c:	e030      	b.n	800a3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a35e:	f107 0318 	add.w	r3, r7, #24
 800a362:	4618      	mov	r0, r3
 800a364:	f7fe fa20 	bl	80087a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a36c:	e028      	b.n	800a3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a36e:	4b09      	ldr	r3, [pc, #36]	; (800a394 <UART_SetConfig+0xc2c>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0320 	and.w	r3, r3, #32
 800a376:	2b00      	cmp	r3, #0
 800a378:	d012      	beq.n	800a3a0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a37a:	4b06      	ldr	r3, [pc, #24]	; (800a394 <UART_SetConfig+0xc2c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	08db      	lsrs	r3, r3, #3
 800a380:	f003 0303 	and.w	r3, r3, #3
 800a384:	4a04      	ldr	r2, [pc, #16]	; (800a398 <UART_SetConfig+0xc30>)
 800a386:	fa22 f303 	lsr.w	r3, r2, r3
 800a38a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a38c:	e018      	b.n	800a3c0 <UART_SetConfig+0xc58>
 800a38e:	bf00      	nop
 800a390:	0800ad78 	.word	0x0800ad78
 800a394:	58024400 	.word	0x58024400
 800a398:	03d09000 	.word	0x03d09000
 800a39c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a3a0:	4b24      	ldr	r3, [pc, #144]	; (800a434 <UART_SetConfig+0xccc>)
 800a3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3a4:	e00c      	b.n	800a3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3a6:	4b24      	ldr	r3, [pc, #144]	; (800a438 <UART_SetConfig+0xcd0>)
 800a3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3aa:	e009      	b.n	800a3c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3b2:	e005      	b.n	800a3c0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a3be:	bf00      	nop
    }

    if (pclk != 0U)
 800a3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d021      	beq.n	800a40a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ca:	4a1c      	ldr	r2, [pc, #112]	; (800a43c <UART_SetConfig+0xcd4>)
 800a3cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3d4:	fbb3 f2f2 	udiv	r2, r3, r2
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	085b      	lsrs	r3, r3, #1
 800a3de:	441a      	add	r2, r3
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3e8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ec:	2b0f      	cmp	r3, #15
 800a3ee:	d909      	bls.n	800a404 <UART_SetConfig+0xc9c>
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3f6:	d205      	bcs.n	800a404 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	60da      	str	r2, [r3, #12]
 800a402:	e002      	b.n	800a40a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	2201      	movs	r2, #1
 800a416:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	2200      	movs	r2, #0
 800a41e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	2200      	movs	r2, #0
 800a424:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a426:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3748      	adds	r7, #72	; 0x48
 800a42e:	46bd      	mov	sp, r7
 800a430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a434:	03d09000 	.word	0x03d09000
 800a438:	003d0900 	.word	0x003d0900
 800a43c:	0800ad78 	.word	0x0800ad78

0800a440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00a      	beq.n	800a46a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	430a      	orrs	r2, r1
 800a468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46e:	f003 0302 	and.w	r3, r3, #2
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00a      	beq.n	800a48c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	430a      	orrs	r2, r1
 800a48a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a490:	f003 0304 	and.w	r3, r3, #4
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00a      	beq.n	800a4ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	430a      	orrs	r2, r1
 800a4ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b2:	f003 0308 	and.w	r3, r3, #8
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00a      	beq.n	800a4d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	430a      	orrs	r2, r1
 800a4ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d4:	f003 0310 	and.w	r3, r3, #16
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00a      	beq.n	800a4f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f6:	f003 0320 	and.w	r3, r3, #32
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d01a      	beq.n	800a556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a53a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a53e:	d10a      	bne.n	800a556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	430a      	orrs	r2, r1
 800a554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00a      	beq.n	800a578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	430a      	orrs	r2, r1
 800a576:	605a      	str	r2, [r3, #4]
  }
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af02      	add	r7, sp, #8
 800a58a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a594:	f7f7 fbaa 	bl	8001cec <HAL_GetTick>
 800a598:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 0308 	and.w	r3, r3, #8
 800a5a4:	2b08      	cmp	r3, #8
 800a5a6:	d10e      	bne.n	800a5c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5ac:	9300      	str	r3, [sp, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f82f 	bl	800a61a <UART_WaitOnFlagUntilTimeout>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	e025      	b.n	800a612 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0304 	and.w	r3, r3, #4
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	d10e      	bne.n	800a5f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f819 	bl	800a61a <UART_WaitOnFlagUntilTimeout>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e00f      	b.n	800a612 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2220      	movs	r2, #32
 800a5f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2220      	movs	r2, #32
 800a5fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a610:	2300      	movs	r3, #0
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b09c      	sub	sp, #112	; 0x70
 800a61e:	af00      	add	r7, sp, #0
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	603b      	str	r3, [r7, #0]
 800a626:	4613      	mov	r3, r2
 800a628:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a62a:	e0a9      	b.n	800a780 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a62c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a632:	f000 80a5 	beq.w	800a780 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a636:	f7f7 fb59 	bl	8001cec <HAL_GetTick>
 800a63a:	4602      	mov	r2, r0
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a642:	429a      	cmp	r2, r3
 800a644:	d302      	bcc.n	800a64c <UART_WaitOnFlagUntilTimeout+0x32>
 800a646:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d140      	bne.n	800a6ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a654:	e853 3f00 	ldrex	r3, [r3]
 800a658:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a65a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a65c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a660:	667b      	str	r3, [r7, #100]	; 0x64
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	461a      	mov	r2, r3
 800a668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a66a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a66c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a670:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a672:	e841 2300 	strex	r3, r2, [r1]
 800a676:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d1e6      	bne.n	800a64c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	3308      	adds	r3, #8
 800a684:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a688:	e853 3f00 	ldrex	r3, [r3]
 800a68c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a690:	f023 0301 	bic.w	r3, r3, #1
 800a694:	663b      	str	r3, [r7, #96]	; 0x60
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	3308      	adds	r3, #8
 800a69c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a69e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6a6:	e841 2300 	strex	r3, r2, [r1]
 800a6aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a6ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1e5      	bne.n	800a67e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2220      	movs	r2, #32
 800a6b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2220      	movs	r2, #32
 800a6be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	e069      	b.n	800a7a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 0304 	and.w	r3, r3, #4
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d051      	beq.n	800a780 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	69db      	ldr	r3, [r3, #28]
 800a6e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6ea:	d149      	bne.n	800a780 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fe:	e853 3f00 	ldrex	r3, [r3]
 800a702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a70a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a714:	637b      	str	r3, [r7, #52]	; 0x34
 800a716:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a71a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a71c:	e841 2300 	strex	r3, r2, [r1]
 800a720:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1e6      	bne.n	800a6f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	3308      	adds	r3, #8
 800a72e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	e853 3f00 	ldrex	r3, [r3]
 800a736:	613b      	str	r3, [r7, #16]
   return(result);
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	f023 0301 	bic.w	r3, r3, #1
 800a73e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	3308      	adds	r3, #8
 800a746:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a748:	623a      	str	r2, [r7, #32]
 800a74a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74c:	69f9      	ldr	r1, [r7, #28]
 800a74e:	6a3a      	ldr	r2, [r7, #32]
 800a750:	e841 2300 	strex	r3, r2, [r1]
 800a754:	61bb      	str	r3, [r7, #24]
   return(result);
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d1e5      	bne.n	800a728 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2220      	movs	r2, #32
 800a760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2220      	movs	r2, #32
 800a768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2220      	movs	r2, #32
 800a770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a77c:	2303      	movs	r3, #3
 800a77e:	e010      	b.n	800a7a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	69da      	ldr	r2, [r3, #28]
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	4013      	ands	r3, r2
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	bf0c      	ite	eq
 800a790:	2301      	moveq	r3, #1
 800a792:	2300      	movne	r3, #0
 800a794:	b2db      	uxtb	r3, r3
 800a796:	461a      	mov	r2, r3
 800a798:	79fb      	ldrb	r3, [r7, #7]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	f43f af46 	beq.w	800a62c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3770      	adds	r7, #112	; 0x70
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b085      	sub	sp, #20
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d101      	bne.n	800a7c0 <HAL_UARTEx_DisableFifoMode+0x16>
 800a7bc:	2302      	movs	r3, #2
 800a7be:	e027      	b.n	800a810 <HAL_UARTEx_DisableFifoMode+0x66>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2224      	movs	r2, #36	; 0x24
 800a7cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f022 0201 	bic.w	r2, r2, #1
 800a7e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a7ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2220      	movs	r2, #32
 800a802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d101      	bne.n	800a834 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a830:	2302      	movs	r3, #2
 800a832:	e02d      	b.n	800a890 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2224      	movs	r2, #36	; 0x24
 800a840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f022 0201 	bic.w	r2, r2, #1
 800a85a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	430a      	orrs	r2, r1
 800a86e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f84f 	bl	800a914 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2220      	movs	r2, #32
 800a882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d101      	bne.n	800a8b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	e02d      	b.n	800a90c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2224      	movs	r2, #36	; 0x24
 800a8bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f022 0201 	bic.w	r2, r2, #1
 800a8d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	430a      	orrs	r2, r1
 800a8ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f811 	bl	800a914 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2220      	movs	r2, #32
 800a8fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a914:	b480      	push	{r7}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a920:	2b00      	cmp	r3, #0
 800a922:	d108      	bne.n	800a936 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a934:	e031      	b.n	800a99a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a936:	2310      	movs	r3, #16
 800a938:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a93a:	2310      	movs	r3, #16
 800a93c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	0e5b      	lsrs	r3, r3, #25
 800a946:	b2db      	uxtb	r3, r3
 800a948:	f003 0307 	and.w	r3, r3, #7
 800a94c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	0f5b      	lsrs	r3, r3, #29
 800a956:	b2db      	uxtb	r3, r3
 800a958:	f003 0307 	and.w	r3, r3, #7
 800a95c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a95e:	7bbb      	ldrb	r3, [r7, #14]
 800a960:	7b3a      	ldrb	r2, [r7, #12]
 800a962:	4911      	ldr	r1, [pc, #68]	; (800a9a8 <UARTEx_SetNbDataToProcess+0x94>)
 800a964:	5c8a      	ldrb	r2, [r1, r2]
 800a966:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a96a:	7b3a      	ldrb	r2, [r7, #12]
 800a96c:	490f      	ldr	r1, [pc, #60]	; (800a9ac <UARTEx_SetNbDataToProcess+0x98>)
 800a96e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a970:	fb93 f3f2 	sdiv	r3, r3, r2
 800a974:	b29a      	uxth	r2, r3
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
 800a97e:	7b7a      	ldrb	r2, [r7, #13]
 800a980:	4909      	ldr	r1, [pc, #36]	; (800a9a8 <UARTEx_SetNbDataToProcess+0x94>)
 800a982:	5c8a      	ldrb	r2, [r1, r2]
 800a984:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a988:	7b7a      	ldrb	r2, [r7, #13]
 800a98a:	4908      	ldr	r1, [pc, #32]	; (800a9ac <UARTEx_SetNbDataToProcess+0x98>)
 800a98c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a98e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a992:	b29a      	uxth	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a99a:	bf00      	nop
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	0800ad90 	.word	0x0800ad90
 800a9ac:	0800ad98 	.word	0x0800ad98

0800a9b0 <__errno>:
 800a9b0:	4b01      	ldr	r3, [pc, #4]	; (800a9b8 <__errno+0x8>)
 800a9b2:	6818      	ldr	r0, [r3, #0]
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop
 800a9b8:	24000010 	.word	0x24000010

0800a9bc <__libc_init_array>:
 800a9bc:	b570      	push	{r4, r5, r6, lr}
 800a9be:	4d0d      	ldr	r5, [pc, #52]	; (800a9f4 <__libc_init_array+0x38>)
 800a9c0:	4c0d      	ldr	r4, [pc, #52]	; (800a9f8 <__libc_init_array+0x3c>)
 800a9c2:	1b64      	subs	r4, r4, r5
 800a9c4:	10a4      	asrs	r4, r4, #2
 800a9c6:	2600      	movs	r6, #0
 800a9c8:	42a6      	cmp	r6, r4
 800a9ca:	d109      	bne.n	800a9e0 <__libc_init_array+0x24>
 800a9cc:	4d0b      	ldr	r5, [pc, #44]	; (800a9fc <__libc_init_array+0x40>)
 800a9ce:	4c0c      	ldr	r4, [pc, #48]	; (800aa00 <__libc_init_array+0x44>)
 800a9d0:	f000 f9b8 	bl	800ad44 <_init>
 800a9d4:	1b64      	subs	r4, r4, r5
 800a9d6:	10a4      	asrs	r4, r4, #2
 800a9d8:	2600      	movs	r6, #0
 800a9da:	42a6      	cmp	r6, r4
 800a9dc:	d105      	bne.n	800a9ea <__libc_init_array+0x2e>
 800a9de:	bd70      	pop	{r4, r5, r6, pc}
 800a9e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9e4:	4798      	blx	r3
 800a9e6:	3601      	adds	r6, #1
 800a9e8:	e7ee      	b.n	800a9c8 <__libc_init_array+0xc>
 800a9ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ee:	4798      	blx	r3
 800a9f0:	3601      	adds	r6, #1
 800a9f2:	e7f2      	b.n	800a9da <__libc_init_array+0x1e>
 800a9f4:	0800aee8 	.word	0x0800aee8
 800a9f8:	0800aee8 	.word	0x0800aee8
 800a9fc:	0800aee8 	.word	0x0800aee8
 800aa00:	0800aeec 	.word	0x0800aeec

0800aa04 <malloc>:
 800aa04:	4b02      	ldr	r3, [pc, #8]	; (800aa10 <malloc+0xc>)
 800aa06:	4601      	mov	r1, r0
 800aa08:	6818      	ldr	r0, [r3, #0]
 800aa0a:	f000 b82b 	b.w	800aa64 <_malloc_r>
 800aa0e:	bf00      	nop
 800aa10:	24000010 	.word	0x24000010

0800aa14 <memset>:
 800aa14:	4402      	add	r2, r0
 800aa16:	4603      	mov	r3, r0
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d100      	bne.n	800aa1e <memset+0xa>
 800aa1c:	4770      	bx	lr
 800aa1e:	f803 1b01 	strb.w	r1, [r3], #1
 800aa22:	e7f9      	b.n	800aa18 <memset+0x4>

0800aa24 <sbrk_aligned>:
 800aa24:	b570      	push	{r4, r5, r6, lr}
 800aa26:	4e0e      	ldr	r6, [pc, #56]	; (800aa60 <sbrk_aligned+0x3c>)
 800aa28:	460c      	mov	r4, r1
 800aa2a:	6831      	ldr	r1, [r6, #0]
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	b911      	cbnz	r1, 800aa36 <sbrk_aligned+0x12>
 800aa30:	f000 f88c 	bl	800ab4c <_sbrk_r>
 800aa34:	6030      	str	r0, [r6, #0]
 800aa36:	4621      	mov	r1, r4
 800aa38:	4628      	mov	r0, r5
 800aa3a:	f000 f887 	bl	800ab4c <_sbrk_r>
 800aa3e:	1c43      	adds	r3, r0, #1
 800aa40:	d00a      	beq.n	800aa58 <sbrk_aligned+0x34>
 800aa42:	1cc4      	adds	r4, r0, #3
 800aa44:	f024 0403 	bic.w	r4, r4, #3
 800aa48:	42a0      	cmp	r0, r4
 800aa4a:	d007      	beq.n	800aa5c <sbrk_aligned+0x38>
 800aa4c:	1a21      	subs	r1, r4, r0
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f000 f87c 	bl	800ab4c <_sbrk_r>
 800aa54:	3001      	adds	r0, #1
 800aa56:	d101      	bne.n	800aa5c <sbrk_aligned+0x38>
 800aa58:	f04f 34ff 	mov.w	r4, #4294967295
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}
 800aa60:	24000850 	.word	0x24000850

0800aa64 <_malloc_r>:
 800aa64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa68:	1ccd      	adds	r5, r1, #3
 800aa6a:	f025 0503 	bic.w	r5, r5, #3
 800aa6e:	3508      	adds	r5, #8
 800aa70:	2d0c      	cmp	r5, #12
 800aa72:	bf38      	it	cc
 800aa74:	250c      	movcc	r5, #12
 800aa76:	2d00      	cmp	r5, #0
 800aa78:	4607      	mov	r7, r0
 800aa7a:	db01      	blt.n	800aa80 <_malloc_r+0x1c>
 800aa7c:	42a9      	cmp	r1, r5
 800aa7e:	d905      	bls.n	800aa8c <_malloc_r+0x28>
 800aa80:	230c      	movs	r3, #12
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	2600      	movs	r6, #0
 800aa86:	4630      	mov	r0, r6
 800aa88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa8c:	4e2e      	ldr	r6, [pc, #184]	; (800ab48 <_malloc_r+0xe4>)
 800aa8e:	f000 f86d 	bl	800ab6c <__malloc_lock>
 800aa92:	6833      	ldr	r3, [r6, #0]
 800aa94:	461c      	mov	r4, r3
 800aa96:	bb34      	cbnz	r4, 800aae6 <_malloc_r+0x82>
 800aa98:	4629      	mov	r1, r5
 800aa9a:	4638      	mov	r0, r7
 800aa9c:	f7ff ffc2 	bl	800aa24 <sbrk_aligned>
 800aaa0:	1c43      	adds	r3, r0, #1
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	d14d      	bne.n	800ab42 <_malloc_r+0xde>
 800aaa6:	6834      	ldr	r4, [r6, #0]
 800aaa8:	4626      	mov	r6, r4
 800aaaa:	2e00      	cmp	r6, #0
 800aaac:	d140      	bne.n	800ab30 <_malloc_r+0xcc>
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	4631      	mov	r1, r6
 800aab2:	4638      	mov	r0, r7
 800aab4:	eb04 0803 	add.w	r8, r4, r3
 800aab8:	f000 f848 	bl	800ab4c <_sbrk_r>
 800aabc:	4580      	cmp	r8, r0
 800aabe:	d13a      	bne.n	800ab36 <_malloc_r+0xd2>
 800aac0:	6821      	ldr	r1, [r4, #0]
 800aac2:	3503      	adds	r5, #3
 800aac4:	1a6d      	subs	r5, r5, r1
 800aac6:	f025 0503 	bic.w	r5, r5, #3
 800aaca:	3508      	adds	r5, #8
 800aacc:	2d0c      	cmp	r5, #12
 800aace:	bf38      	it	cc
 800aad0:	250c      	movcc	r5, #12
 800aad2:	4629      	mov	r1, r5
 800aad4:	4638      	mov	r0, r7
 800aad6:	f7ff ffa5 	bl	800aa24 <sbrk_aligned>
 800aada:	3001      	adds	r0, #1
 800aadc:	d02b      	beq.n	800ab36 <_malloc_r+0xd2>
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	442b      	add	r3, r5
 800aae2:	6023      	str	r3, [r4, #0]
 800aae4:	e00e      	b.n	800ab04 <_malloc_r+0xa0>
 800aae6:	6822      	ldr	r2, [r4, #0]
 800aae8:	1b52      	subs	r2, r2, r5
 800aaea:	d41e      	bmi.n	800ab2a <_malloc_r+0xc6>
 800aaec:	2a0b      	cmp	r2, #11
 800aaee:	d916      	bls.n	800ab1e <_malloc_r+0xba>
 800aaf0:	1961      	adds	r1, r4, r5
 800aaf2:	42a3      	cmp	r3, r4
 800aaf4:	6025      	str	r5, [r4, #0]
 800aaf6:	bf18      	it	ne
 800aaf8:	6059      	strne	r1, [r3, #4]
 800aafa:	6863      	ldr	r3, [r4, #4]
 800aafc:	bf08      	it	eq
 800aafe:	6031      	streq	r1, [r6, #0]
 800ab00:	5162      	str	r2, [r4, r5]
 800ab02:	604b      	str	r3, [r1, #4]
 800ab04:	4638      	mov	r0, r7
 800ab06:	f104 060b 	add.w	r6, r4, #11
 800ab0a:	f000 f835 	bl	800ab78 <__malloc_unlock>
 800ab0e:	f026 0607 	bic.w	r6, r6, #7
 800ab12:	1d23      	adds	r3, r4, #4
 800ab14:	1af2      	subs	r2, r6, r3
 800ab16:	d0b6      	beq.n	800aa86 <_malloc_r+0x22>
 800ab18:	1b9b      	subs	r3, r3, r6
 800ab1a:	50a3      	str	r3, [r4, r2]
 800ab1c:	e7b3      	b.n	800aa86 <_malloc_r+0x22>
 800ab1e:	6862      	ldr	r2, [r4, #4]
 800ab20:	42a3      	cmp	r3, r4
 800ab22:	bf0c      	ite	eq
 800ab24:	6032      	streq	r2, [r6, #0]
 800ab26:	605a      	strne	r2, [r3, #4]
 800ab28:	e7ec      	b.n	800ab04 <_malloc_r+0xa0>
 800ab2a:	4623      	mov	r3, r4
 800ab2c:	6864      	ldr	r4, [r4, #4]
 800ab2e:	e7b2      	b.n	800aa96 <_malloc_r+0x32>
 800ab30:	4634      	mov	r4, r6
 800ab32:	6876      	ldr	r6, [r6, #4]
 800ab34:	e7b9      	b.n	800aaaa <_malloc_r+0x46>
 800ab36:	230c      	movs	r3, #12
 800ab38:	603b      	str	r3, [r7, #0]
 800ab3a:	4638      	mov	r0, r7
 800ab3c:	f000 f81c 	bl	800ab78 <__malloc_unlock>
 800ab40:	e7a1      	b.n	800aa86 <_malloc_r+0x22>
 800ab42:	6025      	str	r5, [r4, #0]
 800ab44:	e7de      	b.n	800ab04 <_malloc_r+0xa0>
 800ab46:	bf00      	nop
 800ab48:	2400084c 	.word	0x2400084c

0800ab4c <_sbrk_r>:
 800ab4c:	b538      	push	{r3, r4, r5, lr}
 800ab4e:	4d06      	ldr	r5, [pc, #24]	; (800ab68 <_sbrk_r+0x1c>)
 800ab50:	2300      	movs	r3, #0
 800ab52:	4604      	mov	r4, r0
 800ab54:	4608      	mov	r0, r1
 800ab56:	602b      	str	r3, [r5, #0]
 800ab58:	f7f6 fdec 	bl	8001734 <_sbrk>
 800ab5c:	1c43      	adds	r3, r0, #1
 800ab5e:	d102      	bne.n	800ab66 <_sbrk_r+0x1a>
 800ab60:	682b      	ldr	r3, [r5, #0]
 800ab62:	b103      	cbz	r3, 800ab66 <_sbrk_r+0x1a>
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	bd38      	pop	{r3, r4, r5, pc}
 800ab68:	24000854 	.word	0x24000854

0800ab6c <__malloc_lock>:
 800ab6c:	4801      	ldr	r0, [pc, #4]	; (800ab74 <__malloc_lock+0x8>)
 800ab6e:	f000 b809 	b.w	800ab84 <__retarget_lock_acquire_recursive>
 800ab72:	bf00      	nop
 800ab74:	24000858 	.word	0x24000858

0800ab78 <__malloc_unlock>:
 800ab78:	4801      	ldr	r0, [pc, #4]	; (800ab80 <__malloc_unlock+0x8>)
 800ab7a:	f000 b804 	b.w	800ab86 <__retarget_lock_release_recursive>
 800ab7e:	bf00      	nop
 800ab80:	24000858 	.word	0x24000858

0800ab84 <__retarget_lock_acquire_recursive>:
 800ab84:	4770      	bx	lr

0800ab86 <__retarget_lock_release_recursive>:
 800ab86:	4770      	bx	lr

0800ab88 <sinf_poly>:
 800ab88:	07cb      	lsls	r3, r1, #31
 800ab8a:	d412      	bmi.n	800abb2 <sinf_poly+0x2a>
 800ab8c:	ee21 5b00 	vmul.f64	d5, d1, d0
 800ab90:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 800ab94:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800ab98:	eea6 7b01 	vfma.f64	d7, d6, d1
 800ab9c:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 800aba0:	ee21 1b05 	vmul.f64	d1, d1, d5
 800aba4:	eea6 0b05 	vfma.f64	d0, d6, d5
 800aba8:	eea7 0b01 	vfma.f64	d0, d7, d1
 800abac:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800abb0:	4770      	bx	lr
 800abb2:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 800abb6:	ee21 5b01 	vmul.f64	d5, d1, d1
 800abba:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800abbe:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800abc2:	eea1 7b06 	vfma.f64	d7, d1, d6
 800abc6:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 800abca:	eea1 0b06 	vfma.f64	d0, d1, d6
 800abce:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 800abd2:	ee21 1b05 	vmul.f64	d1, d1, d5
 800abd6:	eea5 0b06 	vfma.f64	d0, d5, d6
 800abda:	e7e5      	b.n	800aba8 <sinf_poly+0x20>
 800abdc:	0000      	movs	r0, r0
	...

0800abe0 <sinf>:
 800abe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abe2:	ee10 4a10 	vmov	r4, s0
 800abe6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800abea:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800abee:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800abf2:	eef0 7a40 	vmov.f32	s15, s0
 800abf6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800abfa:	d218      	bcs.n	800ac2e <sinf+0x4e>
 800abfc:	ee26 1b06 	vmul.f64	d1, d6, d6
 800ac00:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800ac04:	d20a      	bcs.n	800ac1c <sinf+0x3c>
 800ac06:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800ac0a:	d103      	bne.n	800ac14 <sinf+0x34>
 800ac0c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800ac10:	ed8d 1a01 	vstr	s2, [sp, #4]
 800ac14:	eeb0 0a67 	vmov.f32	s0, s15
 800ac18:	b003      	add	sp, #12
 800ac1a:	bd30      	pop	{r4, r5, pc}
 800ac1c:	483a      	ldr	r0, [pc, #232]	; (800ad08 <sinf+0x128>)
 800ac1e:	eeb0 0b46 	vmov.f64	d0, d6
 800ac22:	2100      	movs	r1, #0
 800ac24:	b003      	add	sp, #12
 800ac26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac2a:	f7ff bfad 	b.w	800ab88 <sinf_poly>
 800ac2e:	f240 422e 	movw	r2, #1070	; 0x42e
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d824      	bhi.n	800ac80 <sinf+0xa0>
 800ac36:	4b34      	ldr	r3, [pc, #208]	; (800ad08 <sinf+0x128>)
 800ac38:	ed93 7b08 	vldr	d7, [r3, #32]
 800ac3c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ac40:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ac44:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800ac48:	ee17 1a90 	vmov	r1, s15
 800ac4c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800ac50:	1609      	asrs	r1, r1, #24
 800ac52:	ee07 1a90 	vmov	s15, r1
 800ac56:	f001 0203 	and.w	r2, r1, #3
 800ac5a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ac5e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ac62:	ed92 0b00 	vldr	d0, [r2]
 800ac66:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800ac6a:	f011 0f02 	tst.w	r1, #2
 800ac6e:	eea5 6b47 	vfms.f64	d6, d5, d7
 800ac72:	bf08      	it	eq
 800ac74:	4618      	moveq	r0, r3
 800ac76:	ee26 1b06 	vmul.f64	d1, d6, d6
 800ac7a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ac7e:	e7d1      	b.n	800ac24 <sinf+0x44>
 800ac80:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800ac84:	d237      	bcs.n	800acf6 <sinf+0x116>
 800ac86:	4a21      	ldr	r2, [pc, #132]	; (800ad0c <sinf+0x12c>)
 800ac88:	f3c4 6183 	ubfx	r1, r4, #26, #4
 800ac8c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800ac90:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800ac94:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800ac98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ac9c:	4083      	lsls	r3, r0
 800ac9e:	6a28      	ldr	r0, [r5, #32]
 800aca0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800aca4:	fba3 1000 	umull	r1, r0, r3, r0
 800aca8:	6929      	ldr	r1, [r5, #16]
 800acaa:	435a      	muls	r2, r3
 800acac:	fbe3 0201 	umlal	r0, r2, r3, r1
 800acb0:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 800acb4:	0f8d      	lsrs	r5, r1, #30
 800acb6:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800acba:	1a51      	subs	r1, r2, r1
 800acbc:	f7f5 fca6 	bl	800060c <__aeabi_l2d>
 800acc0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800acc4:	4b10      	ldr	r3, [pc, #64]	; (800ad08 <sinf+0x128>)
 800acc6:	f004 0203 	and.w	r2, r4, #3
 800acca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800acce:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800ad00 <sinf+0x120>
 800acd2:	ed92 0b00 	vldr	d0, [r2]
 800acd6:	ec41 0b16 	vmov	d6, r0, r1
 800acda:	f014 0f02 	tst.w	r4, #2
 800acde:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ace2:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800ace6:	4629      	mov	r1, r5
 800ace8:	bf08      	it	eq
 800acea:	4618      	moveq	r0, r3
 800acec:	ee27 1b07 	vmul.f64	d1, d7, d7
 800acf0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800acf4:	e796      	b.n	800ac24 <sinf+0x44>
 800acf6:	b003      	add	sp, #12
 800acf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acfc:	f000 b813 	b.w	800ad26 <__math_invalidf>
 800ad00:	54442d18 	.word	0x54442d18
 800ad04:	3c1921fb 	.word	0x3c1921fb
 800ad08:	0800ae00 	.word	0x0800ae00
 800ad0c:	0800ada0 	.word	0x0800ada0

0800ad10 <with_errnof>:
 800ad10:	b513      	push	{r0, r1, r4, lr}
 800ad12:	4604      	mov	r4, r0
 800ad14:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ad18:	f7ff fe4a 	bl	800a9b0 <__errno>
 800ad1c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ad20:	6004      	str	r4, [r0, #0]
 800ad22:	b002      	add	sp, #8
 800ad24:	bd10      	pop	{r4, pc}

0800ad26 <__math_invalidf>:
 800ad26:	eef0 7a40 	vmov.f32	s15, s0
 800ad2a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ad2e:	eef4 7a67 	vcmp.f32	s15, s15
 800ad32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad36:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800ad3a:	d602      	bvs.n	800ad42 <__math_invalidf+0x1c>
 800ad3c:	2021      	movs	r0, #33	; 0x21
 800ad3e:	f7ff bfe7 	b.w	800ad10 <with_errnof>
 800ad42:	4770      	bx	lr

0800ad44 <_init>:
 800ad44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad46:	bf00      	nop
 800ad48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad4a:	bc08      	pop	{r3}
 800ad4c:	469e      	mov	lr, r3
 800ad4e:	4770      	bx	lr

0800ad50 <_fini>:
 800ad50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad52:	bf00      	nop
 800ad54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad56:	bc08      	pop	{r3}
 800ad58:	469e      	mov	lr, r3
 800ad5a:	4770      	bx	lr
