
thesis-2-nucleo-h7a3zi-q.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b79c  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800ba50  0800ba50  0001ba50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bbd0  0800bbd0  0001bbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bbd8  0800bbd8  0001bbd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bbdc  0800bbdc  0001bbdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800bbe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000bd4  24000078  0800bc58  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000c4c  0800bc58  00020c4c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f840  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003eb9  00000000  00000000  0003f8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017e0  00000000  00000000  000437a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001628  00000000  00000000  00044f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034b5d  00000000  00000000  000465a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021c34  00000000  00000000  0007b105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00155966  00000000  00000000  0009cd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f269f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000067f4  00000000  00000000  001f26f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800ba34 	.word	0x0800ba34

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800ba34 	.word	0x0800ba34

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b974 	b.w	8000968 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	4604      	mov	r4, r0
 80006a0:	468e      	mov	lr, r1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d14d      	bne.n	8000742 <__udivmoddi4+0xaa>
 80006a6:	428a      	cmp	r2, r1
 80006a8:	4694      	mov	ip, r2
 80006aa:	d969      	bls.n	8000780 <__udivmoddi4+0xe8>
 80006ac:	fab2 f282 	clz	r2, r2
 80006b0:	b152      	cbz	r2, 80006c8 <__udivmoddi4+0x30>
 80006b2:	fa01 f302 	lsl.w	r3, r1, r2
 80006b6:	f1c2 0120 	rsb	r1, r2, #32
 80006ba:	fa20 f101 	lsr.w	r1, r0, r1
 80006be:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c2:	ea41 0e03 	orr.w	lr, r1, r3
 80006c6:	4094      	lsls	r4, r2
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	0c21      	lsrs	r1, r4, #16
 80006ce:	fbbe f6f8 	udiv	r6, lr, r8
 80006d2:	fa1f f78c 	uxth.w	r7, ip
 80006d6:	fb08 e316 	mls	r3, r8, r6, lr
 80006da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006de:	fb06 f107 	mul.w	r1, r6, r7
 80006e2:	4299      	cmp	r1, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x64>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ee:	f080 811f 	bcs.w	8000930 <__udivmoddi4+0x298>
 80006f2:	4299      	cmp	r1, r3
 80006f4:	f240 811c 	bls.w	8000930 <__udivmoddi4+0x298>
 80006f8:	3e02      	subs	r6, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a5b      	subs	r3, r3, r1
 80006fe:	b2a4      	uxth	r4, r4
 8000700:	fbb3 f0f8 	udiv	r0, r3, r8
 8000704:	fb08 3310 	mls	r3, r8, r0, r3
 8000708:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800070c:	fb00 f707 	mul.w	r7, r0, r7
 8000710:	42a7      	cmp	r7, r4
 8000712:	d90a      	bls.n	800072a <__udivmoddi4+0x92>
 8000714:	eb1c 0404 	adds.w	r4, ip, r4
 8000718:	f100 33ff 	add.w	r3, r0, #4294967295
 800071c:	f080 810a 	bcs.w	8000934 <__udivmoddi4+0x29c>
 8000720:	42a7      	cmp	r7, r4
 8000722:	f240 8107 	bls.w	8000934 <__udivmoddi4+0x29c>
 8000726:	4464      	add	r4, ip
 8000728:	3802      	subs	r0, #2
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	1be4      	subs	r4, r4, r7
 8000730:	2600      	movs	r6, #0
 8000732:	b11d      	cbz	r5, 800073c <__udivmoddi4+0xa4>
 8000734:	40d4      	lsrs	r4, r2
 8000736:	2300      	movs	r3, #0
 8000738:	e9c5 4300 	strd	r4, r3, [r5]
 800073c:	4631      	mov	r1, r6
 800073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000742:	428b      	cmp	r3, r1
 8000744:	d909      	bls.n	800075a <__udivmoddi4+0xc2>
 8000746:	2d00      	cmp	r5, #0
 8000748:	f000 80ef 	beq.w	800092a <__udivmoddi4+0x292>
 800074c:	2600      	movs	r6, #0
 800074e:	e9c5 0100 	strd	r0, r1, [r5]
 8000752:	4630      	mov	r0, r6
 8000754:	4631      	mov	r1, r6
 8000756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075a:	fab3 f683 	clz	r6, r3
 800075e:	2e00      	cmp	r6, #0
 8000760:	d14a      	bne.n	80007f8 <__udivmoddi4+0x160>
 8000762:	428b      	cmp	r3, r1
 8000764:	d302      	bcc.n	800076c <__udivmoddi4+0xd4>
 8000766:	4282      	cmp	r2, r0
 8000768:	f200 80f9 	bhi.w	800095e <__udivmoddi4+0x2c6>
 800076c:	1a84      	subs	r4, r0, r2
 800076e:	eb61 0303 	sbc.w	r3, r1, r3
 8000772:	2001      	movs	r0, #1
 8000774:	469e      	mov	lr, r3
 8000776:	2d00      	cmp	r5, #0
 8000778:	d0e0      	beq.n	800073c <__udivmoddi4+0xa4>
 800077a:	e9c5 4e00 	strd	r4, lr, [r5]
 800077e:	e7dd      	b.n	800073c <__udivmoddi4+0xa4>
 8000780:	b902      	cbnz	r2, 8000784 <__udivmoddi4+0xec>
 8000782:	deff      	udf	#255	; 0xff
 8000784:	fab2 f282 	clz	r2, r2
 8000788:	2a00      	cmp	r2, #0
 800078a:	f040 8092 	bne.w	80008b2 <__udivmoddi4+0x21a>
 800078e:	eba1 010c 	sub.w	r1, r1, ip
 8000792:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000796:	fa1f fe8c 	uxth.w	lr, ip
 800079a:	2601      	movs	r6, #1
 800079c:	0c20      	lsrs	r0, r4, #16
 800079e:	fbb1 f3f7 	udiv	r3, r1, r7
 80007a2:	fb07 1113 	mls	r1, r7, r3, r1
 80007a6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007aa:	fb0e f003 	mul.w	r0, lr, r3
 80007ae:	4288      	cmp	r0, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0x12c>
 80007b2:	eb1c 0101 	adds.w	r1, ip, r1
 80007b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x12a>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f200 80cb 	bhi.w	8000958 <__udivmoddi4+0x2c0>
 80007c2:	4643      	mov	r3, r8
 80007c4:	1a09      	subs	r1, r1, r0
 80007c6:	b2a4      	uxth	r4, r4
 80007c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007cc:	fb07 1110 	mls	r1, r7, r0, r1
 80007d0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007d4:	fb0e fe00 	mul.w	lr, lr, r0
 80007d8:	45a6      	cmp	lr, r4
 80007da:	d908      	bls.n	80007ee <__udivmoddi4+0x156>
 80007dc:	eb1c 0404 	adds.w	r4, ip, r4
 80007e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007e4:	d202      	bcs.n	80007ec <__udivmoddi4+0x154>
 80007e6:	45a6      	cmp	lr, r4
 80007e8:	f200 80bb 	bhi.w	8000962 <__udivmoddi4+0x2ca>
 80007ec:	4608      	mov	r0, r1
 80007ee:	eba4 040e 	sub.w	r4, r4, lr
 80007f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007f6:	e79c      	b.n	8000732 <__udivmoddi4+0x9a>
 80007f8:	f1c6 0720 	rsb	r7, r6, #32
 80007fc:	40b3      	lsls	r3, r6
 80007fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000802:	ea4c 0c03 	orr.w	ip, ip, r3
 8000806:	fa20 f407 	lsr.w	r4, r0, r7
 800080a:	fa01 f306 	lsl.w	r3, r1, r6
 800080e:	431c      	orrs	r4, r3
 8000810:	40f9      	lsrs	r1, r7
 8000812:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000816:	fa00 f306 	lsl.w	r3, r0, r6
 800081a:	fbb1 f8f9 	udiv	r8, r1, r9
 800081e:	0c20      	lsrs	r0, r4, #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fb09 1118 	mls	r1, r9, r8, r1
 8000828:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800082c:	fb08 f00e 	mul.w	r0, r8, lr
 8000830:	4288      	cmp	r0, r1
 8000832:	fa02 f206 	lsl.w	r2, r2, r6
 8000836:	d90b      	bls.n	8000850 <__udivmoddi4+0x1b8>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000840:	f080 8088 	bcs.w	8000954 <__udivmoddi4+0x2bc>
 8000844:	4288      	cmp	r0, r1
 8000846:	f240 8085 	bls.w	8000954 <__udivmoddi4+0x2bc>
 800084a:	f1a8 0802 	sub.w	r8, r8, #2
 800084e:	4461      	add	r1, ip
 8000850:	1a09      	subs	r1, r1, r0
 8000852:	b2a4      	uxth	r4, r4
 8000854:	fbb1 f0f9 	udiv	r0, r1, r9
 8000858:	fb09 1110 	mls	r1, r9, r0, r1
 800085c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000860:	fb00 fe0e 	mul.w	lr, r0, lr
 8000864:	458e      	cmp	lr, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x1e2>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000870:	d26c      	bcs.n	800094c <__udivmoddi4+0x2b4>
 8000872:	458e      	cmp	lr, r1
 8000874:	d96a      	bls.n	800094c <__udivmoddi4+0x2b4>
 8000876:	3802      	subs	r0, #2
 8000878:	4461      	add	r1, ip
 800087a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800087e:	fba0 9402 	umull	r9, r4, r0, r2
 8000882:	eba1 010e 	sub.w	r1, r1, lr
 8000886:	42a1      	cmp	r1, r4
 8000888:	46c8      	mov	r8, r9
 800088a:	46a6      	mov	lr, r4
 800088c:	d356      	bcc.n	800093c <__udivmoddi4+0x2a4>
 800088e:	d053      	beq.n	8000938 <__udivmoddi4+0x2a0>
 8000890:	b15d      	cbz	r5, 80008aa <__udivmoddi4+0x212>
 8000892:	ebb3 0208 	subs.w	r2, r3, r8
 8000896:	eb61 010e 	sbc.w	r1, r1, lr
 800089a:	fa01 f707 	lsl.w	r7, r1, r7
 800089e:	fa22 f306 	lsr.w	r3, r2, r6
 80008a2:	40f1      	lsrs	r1, r6
 80008a4:	431f      	orrs	r7, r3
 80008a6:	e9c5 7100 	strd	r7, r1, [r5]
 80008aa:	2600      	movs	r6, #0
 80008ac:	4631      	mov	r1, r6
 80008ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b2:	f1c2 0320 	rsb	r3, r2, #32
 80008b6:	40d8      	lsrs	r0, r3
 80008b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008bc:	fa21 f303 	lsr.w	r3, r1, r3
 80008c0:	4091      	lsls	r1, r2
 80008c2:	4301      	orrs	r1, r0
 80008c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c8:	fa1f fe8c 	uxth.w	lr, ip
 80008cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80008d0:	fb07 3610 	mls	r6, r7, r0, r3
 80008d4:	0c0b      	lsrs	r3, r1, #16
 80008d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008da:	fb00 f60e 	mul.w	r6, r0, lr
 80008de:	429e      	cmp	r6, r3
 80008e0:	fa04 f402 	lsl.w	r4, r4, r2
 80008e4:	d908      	bls.n	80008f8 <__udivmoddi4+0x260>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ee:	d22f      	bcs.n	8000950 <__udivmoddi4+0x2b8>
 80008f0:	429e      	cmp	r6, r3
 80008f2:	d92d      	bls.n	8000950 <__udivmoddi4+0x2b8>
 80008f4:	3802      	subs	r0, #2
 80008f6:	4463      	add	r3, ip
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	b289      	uxth	r1, r1
 80008fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000900:	fb07 3316 	mls	r3, r7, r6, r3
 8000904:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000908:	fb06 f30e 	mul.w	r3, r6, lr
 800090c:	428b      	cmp	r3, r1
 800090e:	d908      	bls.n	8000922 <__udivmoddi4+0x28a>
 8000910:	eb1c 0101 	adds.w	r1, ip, r1
 8000914:	f106 38ff 	add.w	r8, r6, #4294967295
 8000918:	d216      	bcs.n	8000948 <__udivmoddi4+0x2b0>
 800091a:	428b      	cmp	r3, r1
 800091c:	d914      	bls.n	8000948 <__udivmoddi4+0x2b0>
 800091e:	3e02      	subs	r6, #2
 8000920:	4461      	add	r1, ip
 8000922:	1ac9      	subs	r1, r1, r3
 8000924:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000928:	e738      	b.n	800079c <__udivmoddi4+0x104>
 800092a:	462e      	mov	r6, r5
 800092c:	4628      	mov	r0, r5
 800092e:	e705      	b.n	800073c <__udivmoddi4+0xa4>
 8000930:	4606      	mov	r6, r0
 8000932:	e6e3      	b.n	80006fc <__udivmoddi4+0x64>
 8000934:	4618      	mov	r0, r3
 8000936:	e6f8      	b.n	800072a <__udivmoddi4+0x92>
 8000938:	454b      	cmp	r3, r9
 800093a:	d2a9      	bcs.n	8000890 <__udivmoddi4+0x1f8>
 800093c:	ebb9 0802 	subs.w	r8, r9, r2
 8000940:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000944:	3801      	subs	r0, #1
 8000946:	e7a3      	b.n	8000890 <__udivmoddi4+0x1f8>
 8000948:	4646      	mov	r6, r8
 800094a:	e7ea      	b.n	8000922 <__udivmoddi4+0x28a>
 800094c:	4620      	mov	r0, r4
 800094e:	e794      	b.n	800087a <__udivmoddi4+0x1e2>
 8000950:	4640      	mov	r0, r8
 8000952:	e7d1      	b.n	80008f8 <__udivmoddi4+0x260>
 8000954:	46d0      	mov	r8, sl
 8000956:	e77b      	b.n	8000850 <__udivmoddi4+0x1b8>
 8000958:	3b02      	subs	r3, #2
 800095a:	4461      	add	r1, ip
 800095c:	e732      	b.n	80007c4 <__udivmoddi4+0x12c>
 800095e:	4630      	mov	r0, r6
 8000960:	e709      	b.n	8000776 <__udivmoddi4+0xde>
 8000962:	4464      	add	r4, ip
 8000964:	3802      	subs	r0, #2
 8000966:	e742      	b.n	80007ee <__udivmoddi4+0x156>

08000968 <__aeabi_idiv0>:
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <Chorus_Init>:
#include <stdlib.h>
#include <math.h>

ChorusEffect* chorus = NULL;

void Chorus_Init(int sampleRate) {
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	if(chorus != NULL) return;
 8000974:	4b5a      	ldr	r3, [pc, #360]	; (8000ae0 <Chorus_Init+0x174>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	f040 80ac 	bne.w	8000ad6 <Chorus_Init+0x16a>

	chorus = malloc(sizeof(ChorusEffect));
 800097e:	2054      	movs	r0, #84	; 0x54
 8000980:	f00a fe22 	bl	800b5c8 <malloc>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	4b55      	ldr	r3, [pc, #340]	; (8000ae0 <Chorus_Init+0x174>)
 800098a:	601a      	str	r2, [r3, #0]
	chorus->phase = 1.0f;
 800098c:	4b54      	ldr	r3, [pc, #336]	; (8000ae0 <Chorus_Init+0x174>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000994:	651a      	str	r2, [r3, #80]	; 0x50
	chorus->rate = 1.0f;
 8000996:	4b52      	ldr	r3, [pc, #328]	; (8000ae0 <Chorus_Init+0x174>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800099e:	611a      	str	r2, [r3, #16]
	chorus->sampleRate = sampleRate;
 80009a0:	4b4f      	ldr	r3, [pc, #316]	; (8000ae0 <Chorus_Init+0x174>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	ee07 2a90 	vmov	s15, r2
 80009aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ae:	edc3 7a06 	vstr	s15, [r3, #24]
	chorus->delayTime = 7.0f;
 80009b2:	4b4b      	ldr	r3, [pc, #300]	; (8000ae0 <Chorus_Init+0x174>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a4b      	ldr	r2, [pc, #300]	; (8000ae4 <Chorus_Init+0x178>)
 80009b8:	61da      	str	r2, [r3, #28]
	chorus->z1 = 0.0f;
 80009ba:	4b49      	ldr	r3, [pc, #292]	; (8000ae0 <Chorus_Init+0x174>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f04f 0200 	mov.w	r2, #0
 80009c2:	639a      	str	r2, [r3, #56]	; 0x38
	chorus->sign = 0;
 80009c4:	4b46      	ldr	r3, [pc, #280]	; (8000ae0 <Chorus_Init+0x174>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f04f 0200 	mov.w	r2, #0
 80009cc:	641a      	str	r2, [r3, #64]	; 0x40
	chorus->lfoPhase = chorus->phase * 2.0f - 1.0f;
 80009ce:	4b44      	ldr	r3, [pc, #272]	; (8000ae0 <Chorus_Init+0x174>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80009d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009da:	4b41      	ldr	r3, [pc, #260]	; (8000ae0 <Chorus_Init+0x174>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009e6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	chorus->lfoStepSize = (4.0f * chorus->rate / chorus->sampleRate);
 80009ea:	4b3d      	ldr	r3, [pc, #244]	; (8000ae0 <Chorus_Init+0x174>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80009f2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80009f6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80009fa:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <Chorus_Init+0x174>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	ed93 7a06 	vldr	s14, [r3, #24]
 8000a02:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <Chorus_Init+0x174>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a0a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	chorus->lfoSign = 1.0f;
 8000a0e:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <Chorus_Init+0x174>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a16:	64da      	str	r2, [r3, #76]	; 0x4c

	chorus->delayLineLength = ((int)floorf(chorus->delayTime * sampleRate * 0.001f) * 2);
 8000a18:	4b31      	ldr	r3, [pc, #196]	; (8000ae0 <Chorus_Init+0x174>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	ed93 7a07 	vldr	s14, [r3, #28]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	ee07 3a90 	vmov	s15, r3
 8000a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a2e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000ae8 <Chorus_Init+0x17c>
 8000a32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a36:	eeb0 0a67 	vmov.f32	s0, s15
 8000a3a:	f00a fedb 	bl	800b7f4 <floorf>
 8000a3e:	eef0 7a40 	vmov.f32	s15, s0
 8000a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a46:	ee17 2a90 	vmov	r2, s15
 8000a4a:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <Chorus_Init+0x174>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	0052      	lsls	r2, r2, #1
 8000a50:	60da      	str	r2, [r3, #12]
	chorus->delayLineStart = malloc(chorus->delayLineLength * sizeof(float));
 8000a52:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <Chorus_Init+0x174>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <Chorus_Init+0x174>)
 8000a5c:	6814      	ldr	r4, [r2, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00a fdb2 	bl	800b5c8 <malloc>
 8000a64:	4603      	mov	r3, r0
 8000a66:	6023      	str	r3, [r4, #0]

	chorus->delayLineEnd = chorus->delayLineStart + chorus->delayLineLength;
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <Chorus_Init+0x174>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6819      	ldr	r1, [r3, #0]
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <Chorus_Init+0x174>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	009a      	lsls	r2, r3, #2
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <Chorus_Init+0x174>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	440a      	add	r2, r1
 8000a7c:	605a      	str	r2, [r3, #4]
	chorus->writePtr = chorus->delayLineStart;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <Chorus_Init+0x174>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <Chorus_Init+0x174>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	6812      	ldr	r2, [r2, #0]
 8000a88:	609a      	str	r2, [r3, #8]

	do {
		*chorus->writePtr = 0.0f;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <Chorus_Init+0x174>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f04f 0200 	mov.w	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
	}
	while (++chorus->writePtr < chorus->delayLineEnd);
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <Chorus_Init+0x174>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	3204      	adds	r2, #4
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <Chorus_Init+0x174>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d3ee      	bcc.n	8000a8a <Chorus_Init+0x11e>

	chorus->writePtr = chorus->delayLineStart + chorus->delayLineLength - 1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <Chorus_Init+0x174>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	6819      	ldr	r1, [r3, #0]
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <Chorus_Init+0x174>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000abe:	4413      	add	r3, r2
 8000ac0:	009a      	lsls	r2, r3, #2
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <Chorus_Init+0x174>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	440a      	add	r2, r1
 8000ac8:	609a      	str	r2, [r3, #8]
	chorus->delayLineOutput = 0.0f;
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <Chorus_Init+0x174>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f04f 0200 	mov.w	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
 8000ad4:	e000      	b.n	8000ad8 <Chorus_Init+0x16c>
	if(chorus != NULL) return;
 8000ad6:	bf00      	nop
}
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	24000094 	.word	0x24000094
 8000ae4:	40e00000 	.word	0x40e00000
 8000ae8:	3a83126f 	.word	0x3a83126f

08000aec <Chorus_LFO>:

float Chorus_LFO() {
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	if (chorus->lfoPhase >= 1.0f)
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <Chorus_LFO+0x84>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b04:	db04      	blt.n	8000b10 <Chorus_LFO+0x24>
	{
		chorus->lfoSign = -1.0f;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <Chorus_LFO+0x84>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a1a      	ldr	r2, [pc, #104]	; (8000b74 <Chorus_LFO+0x88>)
 8000b0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b0e:	e00f      	b.n	8000b30 <Chorus_LFO+0x44>
	}
	else if (chorus->lfoPhase <= -1.0f)
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <Chorus_LFO+0x84>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000b18:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b24:	d804      	bhi.n	8000b30 <Chorus_LFO+0x44>
	{
		chorus->lfoSign = +1.0f;
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <Chorus_LFO+0x84>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b2e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	chorus->lfoPhase += chorus->lfoStepSize * chorus->lfoSign;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <Chorus_LFO+0x84>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <Chorus_LFO+0x84>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <Chorus_LFO+0x84>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <Chorus_LFO+0x84>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b54:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	return chorus->lfoPhase;
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <Chorus_LFO+0x84>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	ee07 3a90 	vmov	s15, r3
}
 8000b62:	eeb0 0a67 	vmov.f32	s0, s15
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	24000094 	.word	0x24000094
 8000b74:	bf800000 	.word	0xbf800000

08000b78 <Chorus_Process>:

float Chorus_Process(float sample) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	ed87 0a01 	vstr	s0, [r7, #4]
	chorus->offset = (Chorus_LFO() * 0.3f + 0.4f) * chorus->delayTime * chorus->sampleRate * 0.001f;
 8000b82:	f7ff ffb3 	bl	8000aec <Chorus_LFO>
 8000b86:	eef0 7a40 	vmov.f32	s15, s0
 8000b8a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8000d0c <Chorus_Process+0x194>
 8000b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b92:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8000d10 <Chorus_Process+0x198>
 8000b96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000b9a:	4b5e      	ldr	r3, [pc, #376]	; (8000d14 <Chorus_Process+0x19c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ba6:	4b5b      	ldr	r3, [pc, #364]	; (8000d14 <Chorus_Process+0x19c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	edd3 7a06 	vldr	s15, [r3, #24]
 8000bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bb2:	4b58      	ldr	r3, [pc, #352]	; (8000d14 <Chorus_Process+0x19c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8000d18 <Chorus_Process+0x1a0>
 8000bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bbe:	edc3 7a08 	vstr	s15, [r3, #32]
	int offset = (int)floorf(chorus->offset);
 8000bc2:	4b54      	ldr	r3, [pc, #336]	; (8000d14 <Chorus_Process+0x19c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	edd3 7a08 	vldr	s15, [r3, #32]
 8000bca:	eeb0 0a67 	vmov.f32	s0, s15
 8000bce:	f00a fe11 	bl	800b7f4 <floorf>
 8000bd2:	eef0 7a40 	vmov.f32	s15, s0
 8000bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bda:	ee17 3a90 	vmov	r3, s15
 8000bde:	60fb      	str	r3, [r7, #12]

	chorus->ptr = chorus->writePtr - offset;
 8000be0:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <Chorus_Process+0x19c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6899      	ldr	r1, [r3, #8]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	425a      	negs	r2, r3
 8000bec:	4b49      	ldr	r3, [pc, #292]	; (8000d14 <Chorus_Process+0x19c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	440a      	add	r2, r1
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c

	if (chorus->ptr < chorus->delayLineStart)
 8000bf4:	4b47      	ldr	r3, [pc, #284]	; (8000d14 <Chorus_Process+0x19c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bfa:	4b46      	ldr	r3, [pc, #280]	; (8000d14 <Chorus_Process+0x19c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d20a      	bcs.n	8000c1a <Chorus_Process+0xa2>
		chorus->ptr += chorus->delayLineLength;
 8000c04:	4b43      	ldr	r3, [pc, #268]	; (8000d14 <Chorus_Process+0x19c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c0a:	4b42      	ldr	r3, [pc, #264]	; (8000d14 <Chorus_Process+0x19c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	009a      	lsls	r2, r3, #2
 8000c12:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <Chorus_Process+0x19c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	440a      	add	r2, r1
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c

	chorus->ptr2 = chorus->ptr - 1;
 8000c1a:	4b3e      	ldr	r3, [pc, #248]	; (8000d14 <Chorus_Process+0x19c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c20:	4b3c      	ldr	r3, [pc, #240]	; (8000d14 <Chorus_Process+0x19c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3a04      	subs	r2, #4
 8000c26:	631a      	str	r2, [r3, #48]	; 0x30
	if (chorus->ptr2 < chorus->delayLineStart)
 8000c28:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <Chorus_Process+0x19c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c2e:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <Chorus_Process+0x19c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d20a      	bcs.n	8000c4e <Chorus_Process+0xd6>
		chorus->ptr2 += chorus->delayLineLength;
 8000c38:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <Chorus_Process+0x19c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c3e:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <Chorus_Process+0x19c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	009a      	lsls	r2, r3, #2
 8000c46:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <Chorus_Process+0x19c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	440a      	add	r2, r1
 8000c4c:	631a      	str	r2, [r3, #48]	; 0x30

	chorus->frac = chorus->offset - offset;
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <Chorus_Process+0x19c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	ed93 7a08 	vldr	s14, [r3, #32]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c60:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <Chorus_Process+0x19c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c68:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	chorus->delayLineOutput = *chorus->ptr2 + *chorus->ptr * (1 - chorus->frac) - (1 - chorus->frac) * chorus->z1 ;
 8000c6c:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <Chorus_Process+0x19c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	ed93 7a00 	vldr	s14, [r3]
 8000c76:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <Chorus_Process+0x19c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7c:	edd3 6a00 	vldr	s13, [r3]
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <Chorus_Process+0x19c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000c88:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000c8c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <Chorus_Process+0x19c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000ca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000ca4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <Chorus_Process+0x19c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8000cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <Chorus_Process+0x19c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cbc:	edc3 7a05 	vstr	s15, [r3, #20]

	chorus->z1 = chorus->delayLineOutput;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <Chorus_Process+0x19c>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <Chorus_Process+0x19c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6952      	ldr	r2, [r2, #20]
 8000cca:	639a      	str	r2, [r3, #56]	; 0x38

	*chorus->writePtr = sample;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <Chorus_Process+0x19c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	601a      	str	r2, [r3, #0]

	if (++chorus->writePtr >= chorus->delayLineEnd) {
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <Chorus_Process+0x19c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	3204      	adds	r2, #4
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <Chorus_Process+0x19c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d305      	bcc.n	8000cf8 <Chorus_Process+0x180>
		chorus->writePtr = chorus->delayLineStart;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <Chorus_Process+0x19c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <Chorus_Process+0x19c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6812      	ldr	r2, [r2, #0]
 8000cf6:	609a      	str	r2, [r3, #8]
	}
	return chorus->delayLineOutput;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <Chorus_Process+0x19c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	ee07 3a90 	vmov	s15, r3
}
 8000d02:	eeb0 0a67 	vmov.f32	s0, s15
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	3e99999a 	.word	0x3e99999a
 8000d10:	3ecccccd 	.word	0x3ecccccd
 8000d14:	24000094 	.word	0x24000094
 8000d18:	3a83126f 	.word	0x3a83126f
 8000d1c:	00000000 	.word	0x00000000

08000d20 <Chorus_Set_Params>:

void Chorus_Set_Params(float rate) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	ed87 0a01 	vstr	s0, [r7, #4]
	if(rate - 0.1 > chorus->rate - 0.01  || rate + 0.1 < chorus->rate + 0.01) {
 8000d2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d32:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000dc0 <Chorus_Set_Params+0xa0>
 8000d36:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <Chorus_Set_Params+0xb0>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d46:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8000dc8 <Chorus_Set_Params+0xa8>
 8000d4a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8000d4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d56:	dc17      	bgt.n	8000d88 <Chorus_Set_Params+0x68>
 8000d58:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d60:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000dc0 <Chorus_Set_Params+0xa0>
 8000d64:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <Chorus_Set_Params+0xb0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d74:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8000dc8 <Chorus_Set_Params+0xa8>
 8000d78:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000d7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d84:	d400      	bmi.n	8000d88 <Chorus_Set_Params+0x68>
		chorus->rate = rate;
		chorus->lfoStepSize = (4.0f * chorus->rate / chorus->sampleRate);
	}
}
 8000d86:	e015      	b.n	8000db4 <Chorus_Set_Params+0x94>
		chorus->rate = rate;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <Chorus_Set_Params+0xb0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	611a      	str	r2, [r3, #16]
		chorus->lfoStepSize = (4.0f * chorus->rate / chorus->sampleRate);
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <Chorus_Set_Params+0xb0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d98:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000d9c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <Chorus_Set_Params+0xb0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	ed93 7a06 	vldr	s14, [r3, #24]
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <Chorus_Set_Params+0xb0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000db0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	9999999a 	.word	0x9999999a
 8000dc4:	3fb99999 	.word	0x3fb99999
 8000dc8:	47ae147b 	.word	0x47ae147b
 8000dcc:	3f847ae1 	.word	0x3f847ae1
 8000dd0:	24000094 	.word	0x24000094

08000dd4 <Chorus_Free>:

void Chorus_Free() {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	if(chorus != NULL) {
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <Chorus_Free+0x2c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d00d      	beq.n	8000dfc <Chorus_Free+0x28>
		free(chorus->delayLineStart);
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <Chorus_Free+0x2c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f00a fbf6 	bl	800b5d8 <free>
		free(chorus);
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <Chorus_Free+0x2c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00a fbf1 	bl	800b5d8 <free>
		chorus = NULL;
 8000df6:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <Chorus_Free+0x2c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
	}
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	24000094 	.word	0x24000094

08000e04 <Delay_Init>:
// the size of the entire buffer for both adc and dac
#define BUFFER_SIZE 256

DelayEffect* delay = NULL;

void Delay_Init(int sampleRate) {
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	if(delay != NULL) return;
 8000e0c:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <Delay_Init+0xb0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d14b      	bne.n	8000eac <Delay_Init+0xa8>

	delay = malloc(sizeof(DelayEffect));
 8000e14:	2024      	movs	r0, #36	; 0x24
 8000e16:	f00a fbd7 	bl	800b5c8 <malloc>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <Delay_Init+0xb0>)
 8000e20:	601a      	str	r2, [r3, #0]
	delay->sampleRate = sampleRate;
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <Delay_Init+0xb0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	621a      	str	r2, [r3, #32]
	delay->delayBufferLength = 2*sampleRate;
 8000e2a:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <Delay_Init+0xb0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	0052      	lsls	r2, r2, #1
 8000e32:	611a      	str	r2, [r3, #16]
	delay->delayLength = 0.75f;
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <Delay_Init+0xb0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8000e3c:	60da      	str	r2, [r3, #12]
	delay->delayWritePtr = 0;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <Delay_Init+0xb0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
	delay->delayReadPtr = 0;
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <Delay_Init+0xb0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
	delay->delayData = (uint16_t*) malloc(delay->delayBufferLength * sizeof(uint16_t));
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <Delay_Init+0xb0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <Delay_Init+0xb0>)
 8000e58:	6814      	ldr	r4, [r2, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f00a fbb4 	bl	800b5c8 <malloc>
 8000e60:	4603      	mov	r3, r0
 8000e62:	6023      	str	r3, [r4, #0]

	for (int i = 0; i < delay->delayBufferLength; ++i) {
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	e00a      	b.n	8000e80 <Delay_Init+0x7c>
		delay->delayData[i] = 0;
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <Delay_Init+0xb0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	2200      	movs	r2, #0
 8000e78:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < delay->delayBufferLength; ++i) {
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <Delay_Init+0xb0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbee      	blt.n	8000e6a <Delay_Init+0x66>
	}

	delay->feedback = 0.75f;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <Delay_Init+0xb0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8000e94:	615a      	str	r2, [r3, #20]
	delay->dryMix = 1;
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <Delay_Init+0xb0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e9e:	619a      	str	r2, [r3, #24]
	delay->wetMix = 1;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <Delay_Init+0xb0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ea8:	61da      	str	r2, [r3, #28]
 8000eaa:	e000      	b.n	8000eae <Delay_Init+0xaa>
	if(delay != NULL) return;
 8000eac:	bf00      	nop
}
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd90      	pop	{r4, r7, pc}
 8000eb4:	24000098 	.word	0x24000098

08000eb8 <Delay_Process>:

uint16_t Delay_Process(uint16_t in) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
	uint16_t out = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	81fb      	strh	r3, [r7, #14]

	out = (delay->dryMix * in + delay->wetMix *delay->delayData[delay->delayReadPtr]);
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <Delay_Process+0xf4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	ed93 7a06 	vldr	s14, [r3, #24]
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	ee07 3a90 	vmov	s15, r3
 8000ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000edc:	4b33      	ldr	r3, [pc, #204]	; (8000fac <Delay_Process+0xf4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	edd3 6a07 	vldr	s13, [r3, #28]
 8000ee4:	4b31      	ldr	r3, [pc, #196]	; (8000fac <Delay_Process+0xf4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4b30      	ldr	r3, [pc, #192]	; (8000fac <Delay_Process+0xf4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000efe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f0a:	ee17 3a90 	vmov	r3, s15
 8000f0e:	81fb      	strh	r3, [r7, #14]

	delay->delayData[delay->delayWritePtr] = in + (delay->delayData[delay->delayReadPtr]*delay->feedback);
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f1a:	4b24      	ldr	r3, [pc, #144]	; (8000fac <Delay_Process+0xf4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <Delay_Process+0xf4>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <Delay_Process+0xf4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <Delay_Process+0xf4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <Delay_Process+0xf4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f58:	ee17 2a90 	vmov	r2, s15
 8000f5c:	b292      	uxth	r2, r2
 8000f5e:	801a      	strh	r2, [r3, #0]

	if(++delay->delayReadPtr >= delay->delayBufferLength)
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <Delay_Process+0xf4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	3201      	adds	r2, #1
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <Delay_Process+0xf4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	db03      	blt.n	8000f7e <Delay_Process+0xc6>
		delay->delayReadPtr = 0;
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <Delay_Process+0xf4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]

	if(++delay->delayWritePtr >= delay->delayBufferLength)
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <Delay_Process+0xf4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	3201      	adds	r2, #1
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <Delay_Process+0xf4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	db03      	blt.n	8000f9c <Delay_Process+0xe4>
		delay->delayWritePtr = 0;
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <Delay_Process+0xf4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]

	return out;
 8000f9c:	89fb      	ldrh	r3, [r7, #14]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	24000098 	.word	0x24000098

08000fb0 <Delay_Set_Params>:

void Delay_Set_Params(float delayLength, float feedback) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fba:	edc7 0a00 	vstr	s1, [r7]
	if(delayLength < 0.05) delayLength = 0.05;
 8000fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fc6:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8001130 <Delay_Set_Params+0x180>
 8000fca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd2:	d501      	bpl.n	8000fd8 <Delay_Set_Params+0x28>
 8000fd4:	4b5e      	ldr	r3, [pc, #376]	; (8001150 <Delay_Set_Params+0x1a0>)
 8000fd6:	607b      	str	r3, [r7, #4]

	delayLength *= 2.0f;
 8000fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fe0:	edc7 7a01 	vstr	s15, [r7, #4]

	if(delayLength - 0.1 > delay->delayLength - 0.01  || delayLength + 0.1 < delay->delayLength + 0.01) {
 8000fe4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fec:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8001138 <Delay_Set_Params+0x188>
 8000ff0:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000ff4:	4b57      	ldr	r3, [pc, #348]	; (8001154 <Delay_Set_Params+0x1a4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ffc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001000:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8001140 <Delay_Set_Params+0x190>
 8001004:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001008:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001010:	dc16      	bgt.n	8001040 <Delay_Set_Params+0x90>
 8001012:	edd7 7a01 	vldr	s15, [r7, #4]
 8001016:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800101a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001138 <Delay_Set_Params+0x188>
 800101e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001022:	4b4c      	ldr	r3, [pc, #304]	; (8001154 <Delay_Set_Params+0x1a4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	edd3 7a03 	vldr	s15, [r3, #12]
 800102a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800102e:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8001140 <Delay_Set_Params+0x190>
 8001032:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001036:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	d531      	bpl.n	80010a4 <Delay_Set_Params+0xf4>
		delay->delayLength = delayLength;
 8001040:	4b44      	ldr	r3, [pc, #272]	; (8001154 <Delay_Set_Params+0x1a4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	60da      	str	r2, [r3, #12]
		delay->delayReadPtr = (int)(delay->delayWritePtr - (delay->delayLength * delay->sampleRate) + delay->delayBufferLength) % delay->delayBufferLength;
 8001048:	4b42      	ldr	r3, [pc, #264]	; (8001154 <Delay_Set_Params+0x1a4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001056:	4b3f      	ldr	r3, [pc, #252]	; (8001154 <Delay_Set_Params+0x1a4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	edd3 6a03 	vldr	s13, [r3, #12]
 800105e:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <Delay_Set_Params+0x1a4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001070:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001074:	4b37      	ldr	r3, [pc, #220]	; (8001154 <Delay_Set_Params+0x1a4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800108a:	ee17 0a90 	vmov	r0, s15
 800108e:	4b31      	ldr	r3, [pc, #196]	; (8001154 <Delay_Set_Params+0x1a4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	4a2f      	ldr	r2, [pc, #188]	; (8001154 <Delay_Set_Params+0x1a4>)
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	fb90 f1f3 	sdiv	r1, r0, r3
 800109c:	fb01 f303 	mul.w	r3, r1, r3
 80010a0:	1ac3      	subs	r3, r0, r3
 80010a2:	6093      	str	r3, [r2, #8]
	}

	if(feedback > 0.8) feedback = 0.8;
 80010a4:	edd7 7a00 	vldr	s15, [r7]
 80010a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ac:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8001148 <Delay_Set_Params+0x198>
 80010b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	dd01      	ble.n	80010be <Delay_Set_Params+0x10e>
 80010ba:	4b27      	ldr	r3, [pc, #156]	; (8001158 <Delay_Set_Params+0x1a8>)
 80010bc:	603b      	str	r3, [r7, #0]

	if(feedback - 0.1 > delay->feedback - 0.01 || feedback + 0.1 < delay->feedback + 0.01) {
 80010be:	edd7 7a00 	vldr	s15, [r7]
 80010c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c6:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8001138 <Delay_Set_Params+0x188>
 80010ca:	ee37 6b46 	vsub.f64	d6, d7, d6
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <Delay_Set_Params+0x1a4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80010d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010da:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001140 <Delay_Set_Params+0x190>
 80010de:	ee37 7b45 	vsub.f64	d7, d7, d5
 80010e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80010e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ea:	dc17      	bgt.n	800111c <Delay_Set_Params+0x16c>
 80010ec:	edd7 7a00 	vldr	s15, [r7]
 80010f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010f4:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001138 <Delay_Set_Params+0x188>
 80010f8:	ee37 6b06 	vadd.f64	d6, d7, d6
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <Delay_Set_Params+0x1a4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	edd3 7a05 	vldr	s15, [r3, #20]
 8001104:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001108:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001140 <Delay_Set_Params+0x190>
 800110c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001110:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001118:	d400      	bmi.n	800111c <Delay_Set_Params+0x16c>
		delay->feedback = feedback;
	}
}
 800111a:	e003      	b.n	8001124 <Delay_Set_Params+0x174>
		delay->feedback = feedback;
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <Delay_Set_Params+0x1a4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	615a      	str	r2, [r3, #20]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	9999999a 	.word	0x9999999a
 8001134:	3fa99999 	.word	0x3fa99999
 8001138:	9999999a 	.word	0x9999999a
 800113c:	3fb99999 	.word	0x3fb99999
 8001140:	47ae147b 	.word	0x47ae147b
 8001144:	3f847ae1 	.word	0x3f847ae1
 8001148:	9999999a 	.word	0x9999999a
 800114c:	3fe99999 	.word	0x3fe99999
 8001150:	3d4ccccd 	.word	0x3d4ccccd
 8001154:	24000098 	.word	0x24000098
 8001158:	3f4ccccd 	.word	0x3f4ccccd

0800115c <Delay_Free>:

void Delay_Free() {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	if(delay != NULL) {
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <Delay_Free+0x2c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00d      	beq.n	8001184 <Delay_Free+0x28>
		free(delay->delayData);
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <Delay_Free+0x2c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f00a fa32 	bl	800b5d8 <free>
		free(delay);
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <Delay_Free+0x2c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f00a fa2d 	bl	800b5d8 <free>

		delay = NULL;
 800117e:	4b02      	ldr	r3, [pc, #8]	; (8001188 <Delay_Free+0x2c>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
	}
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	24000098 	.word	0x24000098
 800118c:	00000000 	.word	0x00000000

08001190 <Tremolo_LFO>:
#define PI 3.14159265359

TremoloEffect* tremolo = NULL;

float Tremolo_LFO(float phase, int waveform)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	ed87 0a01 	vstr	s0, [r7, #4]
 800119a:	6038      	str	r0, [r7, #0]
	switch(waveform) {
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <Tremolo_LFO+0x1a>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d031      	beq.n	800120c <Tremolo_LFO+0x7c>
 80011a8:	e03f      	b.n	800122a <Tremolo_LFO+0x9a>
		case Triangle:
			if(phase < 0.25f)
 80011aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ae:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80011b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	d508      	bpl.n	80011ce <Tremolo_LFO+0x3e>
				return 0.5f + 2.0f*phase;
 80011bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80011c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011cc:	e045      	b.n	800125a <Tremolo_LFO+0xca>
			else if(phase < 0.75f)
 80011ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d2:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80011d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	d50c      	bpl.n	80011fa <Tremolo_LFO+0x6a>
				return 1.0f - 2.0f*(phase - 0.25f);
 80011e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e4:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80011e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f8:	e02f      	b.n	800125a <Tremolo_LFO+0xca>
			else
				return 2.0f*(phase-0.75f);
 80011fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80011fe:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8001202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001206:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800120a:	e026      	b.n	800125a <Tremolo_LFO+0xca>
		case Square:
			if(phase < 0.5f)
 800120c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001210:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	d502      	bpl.n	8001224 <Tremolo_LFO+0x94>
				return 1.0f;
 800121e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001222:	e01a      	b.n	800125a <Tremolo_LFO+0xca>
			else
				return 0.0f;
 8001224:	eddf 7a12 	vldr	s15, [pc, #72]	; 8001270 <Tremolo_LFO+0xe0>
 8001228:	e017      	b.n	800125a <Tremolo_LFO+0xca>
		case Sine:
		default:
			return 0.5f + 0.5f*sinf(2.0 * PI * phase);
 800122a:	edd7 7a01 	vldr	s15, [r7, #4]
 800122e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001232:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001268 <Tremolo_LFO+0xd8>
 8001236:	ee27 7b06 	vmul.f64	d7, d7, d6
 800123a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	f00a fb45 	bl	800b8d0 <sinf>
 8001246:	eef0 7a40 	vmov.f32	s15, s0
 800124a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800124e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001252:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001256:	ee77 7a87 	vadd.f32	s15, s15, s14
		}
}
 800125a:	eeb0 0a67 	vmov.f32	s0, s15
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	f3af 8000 	nop.w
 8001268:	54442eea 	.word	0x54442eea
 800126c:	401921fb 	.word	0x401921fb
 8001270:	00000000 	.word	0x00000000

08001274 <Tremolo_Init>:

void Tremolo_Init(int sampleRate) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	if(tremolo != NULL) return;
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <Tremolo_Init+0x60>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d122      	bne.n	80012ca <Tremolo_Init+0x56>

	tremolo = malloc(sizeof(TremoloEffect));
 8001284:	2014      	movs	r0, #20
 8001286:	f00a f99f 	bl	800b5c8 <malloc>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <Tremolo_Init+0x60>)
 8001290:	601a      	str	r2, [r3, #0]
	tremolo->phase = 0;
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <Tremolo_Init+0x60>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
	tremolo->inverseSampleRate = 1.0f/sampleRate;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <Tremolo_Init+0x60>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b2:	edc3 7a01 	vstr	s15, [r3, #4]
	tremolo->depth = 1.0f;
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <Tremolo_Init+0x60>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012be:	609a      	str	r2, [r3, #8]
	tremolo->waveform = Triangle;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <Tremolo_Init+0x60>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	e000      	b.n	80012cc <Tremolo_Init+0x58>
	if(tremolo != NULL) return;
 80012ca:	bf00      	nop
}
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2400009c 	.word	0x2400009c

080012d8 <Tremolo_Process>:

float Tremolo_Process(float in, float depth, float frequency) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	ed2d 8b02 	vpush	{d8}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80012e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80012ea:	ed87 1a01 	vstr	s2, [r7, #4]
	tremolo->depth = depth;
 80012ee:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <Tremolo_Process+0xd8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	609a      	str	r2, [r3, #8]
	tremolo->frequency = 6.0f*frequency;
 80012f6:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <Tremolo_Process+0xd8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80012fe:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001306:	edc3 7a03 	vstr	s15, [r3, #12]
	float out;
	out = in * (1.0f - tremolo->depth * Tremolo_LFO(tremolo->phase, tremolo->waveform));
 800130a:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <Tremolo_Process+0xd8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	ed93 8a02 	vldr	s16, [r3, #8]
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <Tremolo_Process+0xd8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <Tremolo_Process+0xd8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	4618      	mov	r0, r3
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	f7ff ff33 	bl	8001190 <Tremolo_LFO>
 800132a:	eef0 7a40 	vmov.f32	s15, s0
 800132e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001332:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001336:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133a:	ed97 7a03 	vldr	s14, [r7, #12]
 800133e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001342:	edc7 7a05 	vstr	s15, [r7, #20]

	tremolo->phase += tremolo->frequency*tremolo->inverseSampleRate;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <Tremolo_Process+0xd8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <Tremolo_Process+0xd8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	edd3 6a03 	vldr	s13, [r3, #12]
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <Tremolo_Process+0xd8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	edd3 7a01 	vldr	s15, [r3, #4]
 800135e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <Tremolo_Process+0xd8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136a:	edc3 7a00 	vstr	s15, [r3]
	if(tremolo->phase >= 1.0)
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <Tremolo_Process+0xd8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800137a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	db0b      	blt.n	800139c <Tremolo_Process+0xc4>
		tremolo->phase -= 1.0;
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <Tremolo_Process+0xd8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <Tremolo_Process+0xd8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001394:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001398:	edc3 7a00 	vstr	s15, [r3]

	return out;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	ee07 3a90 	vmov	s15, r3
}
 80013a2:	eeb0 0a67 	vmov.f32	s0, s15
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	ecbd 8b02 	vpop	{d8}
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2400009c 	.word	0x2400009c

080013b4 <Tremolo_Set_Waveform>:

void Tremolo_Set_Waveform(int waveform) {
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	tremolo->waveform = waveform;
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <Tremolo_Set_Waveform+0x1c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	611a      	str	r2, [r3, #16]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	2400009c 	.word	0x2400009c

080013d4 <Tremolo_Free>:

void Tremolo_Free() {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	if(tremolo != NULL) {
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <Tremolo_Free+0x20>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <Tremolo_Free+0x1c>
		free(tremolo);
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <Tremolo_Free+0x20>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00a f8f7 	bl	800b5d8 <free>
		tremolo = NULL;
 80013ea:	4b02      	ldr	r3, [pc, #8]	; (80013f4 <Tremolo_Free+0x20>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
	}
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	2400009c 	.word	0x2400009c

080013f8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800140a:	463b      	mov	r3, r7
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	615a      	str	r2, [r3, #20]
 800141a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <MX_ADC1_Init+0xe8>)
 800141e:	4a31      	ldr	r2, [pc, #196]	; (80014e4 <MX_ADC1_Init+0xec>)
 8001420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <MX_ADC1_Init+0xe8>)
 800142a:	2208      	movs	r2, #8
 800142c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001436:	2204      	movs	r2, #4
 8001438:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <MX_ADC1_Init+0xe8>)
 800143c:	2200      	movs	r2, #0
 800143e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001440:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001442:	2200      	movs	r2, #0
 8001444:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001448:	2201      	movs	r2, #1
 800144a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <MX_ADC1_Init+0xe8>)
 800144e:	2200      	movs	r2, #0
 8001450:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001454:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <MX_ADC1_Init+0xe8>)
 800145c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001464:	2203      	movs	r2, #3
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <MX_ADC1_Init+0xe8>)
 800146a:	2200      	movs	r2, #0
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001470:	2200      	movs	r2, #0
 8001472:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800147c:	4818      	ldr	r0, [pc, #96]	; (80014e0 <MX_ADC1_Init+0xe8>)
 800147e:	f001 fc15 	bl	8002cac <HAL_ADC_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001488:	f000 feac 	bl	80021e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	4812      	ldr	r0, [pc, #72]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001498:	f002 fb08 	bl	8003aac <HAL_ADCEx_MultiModeConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80014a2:	f000 fe9f 	bl	80021e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_ADC1_Init+0xf0>)
 80014a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014aa:	2306      	movs	r3, #6
 80014ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014b2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014b8:	2304      	movs	r3, #4
 80014ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c4:	463b      	mov	r3, r7
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_ADC1_Init+0xe8>)
 80014ca:	f001 fe07 	bl	80030dc <HAL_ADC_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80014d4:	f000 fe86 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	240000a0 	.word	0x240000a0
 80014e4:	40022000 	.word	0x40022000
 80014e8:	08600004 	.word	0x08600004

080014ec <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	615a      	str	r2, [r3, #20]
 8001502:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001504:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001506:	4a39      	ldr	r2, [pc, #228]	; (80015ec <MX_ADC2_Init+0x100>)
 8001508:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <MX_ADC2_Init+0xfc>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001510:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001512:	2208      	movs	r2, #8
 8001514:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001516:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001518:	2201      	movs	r2, #1
 800151a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800151c:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <MX_ADC2_Init+0xfc>)
 800151e:	2204      	movs	r2, #4
 8001520:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001522:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001524:	2200      	movs	r2, #0
 8001526:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001528:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <MX_ADC2_Init+0xfc>)
 800152a:	2200      	movs	r2, #0
 800152c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 3;
 800152e:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001530:	2203      	movs	r2, #3
 8001532:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001534:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001536:	2200      	movs	r2, #0
 8001538:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800153a:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <MX_ADC2_Init+0xfc>)
 800153c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001540:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001542:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800154a:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <MX_ADC2_Init+0xfc>)
 800154c:	2203      	movs	r2, #3
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001552:	2200      	movs	r2, #0
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001556:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001558:	2200      	movs	r2, #0
 800155a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <MX_ADC2_Init+0xfc>)
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001564:	4820      	ldr	r0, [pc, #128]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001566:	f001 fba1 	bl	8002cac <HAL_ADC_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001570:	f000 fe38 	bl	80021e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_ADC2_Init+0x104>)
 8001576:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001578:	2306      	movs	r3, #6
 800157a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001580:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001584:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001586:	2304      	movs	r3, #4
 8001588:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4619      	mov	r1, r3
 8001596:	4814      	ldr	r0, [pc, #80]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001598:	f001 fda0 	bl	80030dc <HAL_ADC_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80015a2:	f000 fe1f 	bl	80021e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <MX_ADC2_Init+0x108>)
 80015a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015aa:	230c      	movs	r3, #12
 80015ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	480d      	ldr	r0, [pc, #52]	; (80015e8 <MX_ADC2_Init+0xfc>)
 80015b4:	f001 fd92 	bl	80030dc <HAL_ADC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80015be:	f000 fe11 	bl	80021e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <MX_ADC2_Init+0x10c>)
 80015c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015c6:	2312      	movs	r3, #18
 80015c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <MX_ADC2_Init+0xfc>)
 80015d0:	f001 fd84 	bl	80030dc <HAL_ADC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 80015da:	f000 fe03 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	24000104 	.word	0x24000104
 80015ec:	40022100 	.word	0x40022100
 80015f0:	19200040 	.word	0x19200040
 80015f4:	1d500080 	.word	0x1d500080
 80015f8:	21800100 	.word	0x21800100

080015fc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	; 0x38
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a86      	ldr	r2, [pc, #536]	; (8001834 <HAL_ADC_MspInit+0x238>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d165      	bne.n	80016ea <HAL_ADC_MspInit+0xee>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800161e:	4b86      	ldr	r3, [pc, #536]	; (8001838 <HAL_ADC_MspInit+0x23c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	4a84      	ldr	r2, [pc, #528]	; (8001838 <HAL_ADC_MspInit+0x23c>)
 8001626:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001628:	4b83      	ldr	r3, [pc, #524]	; (8001838 <HAL_ADC_MspInit+0x23c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d10e      	bne.n	800164e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001630:	4b82      	ldr	r3, [pc, #520]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001632:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001636:	4a81      	ldr	r2, [pc, #516]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001640:	4b7e      	ldr	r3, [pc, #504]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001642:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	623b      	str	r3, [r7, #32]
 800164c:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800164e:	4b7b      	ldr	r3, [pc, #492]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001650:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001654:	4a79      	ldr	r2, [pc, #484]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001656:	f043 0320 	orr.w	r3, r3, #32
 800165a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800165e:	4b77      	ldr	r3, [pc, #476]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001660:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001664:	f003 0320 	and.w	r3, r3, #32
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800166c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001672:	2303      	movs	r3, #3
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	486f      	ldr	r0, [pc, #444]	; (8001840 <HAL_ADC_MspInit+0x244>)
 8001682:	f005 f801 	bl	8006688 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001686:	4b6f      	ldr	r3, [pc, #444]	; (8001844 <HAL_ADC_MspInit+0x248>)
 8001688:	4a6f      	ldr	r2, [pc, #444]	; (8001848 <HAL_ADC_MspInit+0x24c>)
 800168a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800168c:	4b6d      	ldr	r3, [pc, #436]	; (8001844 <HAL_ADC_MspInit+0x248>)
 800168e:	2209      	movs	r2, #9
 8001690:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001692:	4b6c      	ldr	r3, [pc, #432]	; (8001844 <HAL_ADC_MspInit+0x248>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001698:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_ADC_MspInit+0x248>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800169e:	4b69      	ldr	r3, [pc, #420]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016a6:	4b67      	ldr	r3, [pc, #412]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016ae:	4b65      	ldr	r3, [pc, #404]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016b6:	4b63      	ldr	r3, [pc, #396]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80016be:	4b61      	ldr	r3, [pc, #388]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016c4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016c6:	4b5f      	ldr	r3, [pc, #380]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016cc:	485d      	ldr	r0, [pc, #372]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016ce:	f002 fe5f 	bl	8004390 <HAL_DMA_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 80016d8:	f000 fd84 	bl	80021e4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a59      	ldr	r2, [pc, #356]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80016e2:	4a58      	ldr	r2, [pc, #352]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80016e8:	e09f      	b.n	800182a <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a57      	ldr	r2, [pc, #348]	; (800184c <HAL_ADC_MspInit+0x250>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	f040 809a 	bne.w	800182a <HAL_ADC_MspInit+0x22e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016f6:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_ADC_MspInit+0x23c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	4a4e      	ldr	r2, [pc, #312]	; (8001838 <HAL_ADC_MspInit+0x23c>)
 80016fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001700:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <HAL_ADC_MspInit+0x23c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d10e      	bne.n	8001726 <HAL_ADC_MspInit+0x12a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001708:	4b4c      	ldr	r3, [pc, #304]	; (800183c <HAL_ADC_MspInit+0x240>)
 800170a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800170e:	4a4b      	ldr	r2, [pc, #300]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001710:	f043 0320 	orr.w	r3, r3, #32
 8001714:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001718:	4b48      	ldr	r3, [pc, #288]	; (800183c <HAL_ADC_MspInit+0x240>)
 800171a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b45      	ldr	r3, [pc, #276]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001728:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800172c:	4a43      	ldr	r2, [pc, #268]	; (800183c <HAL_ADC_MspInit+0x240>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001738:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001744:	4b3d      	ldr	r3, [pc, #244]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001746:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800174a:	4a3c      	ldr	r2, [pc, #240]	; (800183c <HAL_ADC_MspInit+0x240>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001754:	4b39      	ldr	r3, [pc, #228]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001756:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001762:	4b36      	ldr	r3, [pc, #216]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001764:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001768:	4a34      	ldr	r2, [pc, #208]	; (800183c <HAL_ADC_MspInit+0x240>)
 800176a:	f043 0320 	orr.w	r3, r3, #32
 800176e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001772:	4b32      	ldr	r3, [pc, #200]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001774:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001784:	2303      	movs	r3, #3
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001790:	4619      	mov	r1, r3
 8001792:	482f      	ldr	r0, [pc, #188]	; (8001850 <HAL_ADC_MspInit+0x254>)
 8001794:	f004 ff78 	bl	8006688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001798:	2320      	movs	r3, #32
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179c:	2303      	movs	r3, #3
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	482a      	ldr	r0, [pc, #168]	; (8001854 <HAL_ADC_MspInit+0x258>)
 80017ac:	f004 ff6c 	bl	8006688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b6:	2303      	movs	r3, #3
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c2:	4619      	mov	r1, r3
 80017c4:	481e      	ldr	r0, [pc, #120]	; (8001840 <HAL_ADC_MspInit+0x244>)
 80017c6:	f004 ff5f 	bl	8006688 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream2;
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017cc:	4a23      	ldr	r2, [pc, #140]	; (800185c <HAL_ADC_MspInit+0x260>)
 80017ce:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017d2:	220a      	movs	r2, #10
 80017d4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017f0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001800:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800180e:	4812      	ldr	r0, [pc, #72]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 8001810:	f002 fdbe 	bl	8004390 <HAL_DMA_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_ADC_MspInit+0x222>
      Error_Handler();
 800181a:	f000 fce3 	bl	80021e4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 8001822:	64da      	str	r2, [r3, #76]	; 0x4c
 8001824:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6393      	str	r3, [r2, #56]	; 0x38
}
 800182a:	bf00      	nop
 800182c:	3738      	adds	r7, #56	; 0x38
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000
 8001838:	24000258 	.word	0x24000258
 800183c:	58024400 	.word	0x58024400
 8001840:	58021400 	.word	0x58021400
 8001844:	24000168 	.word	0x24000168
 8001848:	40020010 	.word	0x40020010
 800184c:	40022100 	.word	0x40022100
 8001850:	58020000 	.word	0x58020000
 8001854:	58020800 	.word	0x58020800
 8001858:	240001e0 	.word	0x240001e0
 800185c:	40020040 	.word	0x40020040

08001860 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2224      	movs	r2, #36	; 0x24
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f009 febb 	bl	800b5e8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_DAC1_Init+0x5c>)
 8001874:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <MX_DAC1_Init+0x60>)
 8001876:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001878:	4810      	ldr	r0, [pc, #64]	; (80018bc <MX_DAC1_Init+0x5c>)
 800187a:	f002 fac2 	bl	8003e02 <HAL_DAC_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001884:	f000 fcae 	bl	80021e4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800188c:	2316      	movs	r3, #22
 800188e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001894:	2301      	movs	r3, #1
 8001896:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2200      	movs	r2, #0
 80018a0:	4619      	mov	r1, r3
 80018a2:	4806      	ldr	r0, [pc, #24]	; (80018bc <MX_DAC1_Init+0x5c>)
 80018a4:	f002 fbba 	bl	800401c <HAL_DAC_ConfigChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80018ae:	f000 fc99 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	3728      	adds	r7, #40	; 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2400025c 	.word	0x2400025c
 80018c0:	40007400 	.word	0x40007400

080018c4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a30      	ldr	r2, [pc, #192]	; (80019a4 <HAL_DAC_MspInit+0xe0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d15a      	bne.n	800199c <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80018e6:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <HAL_DAC_MspInit+0xe4>)
 80018e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018ec:	4a2e      	ldr	r2, [pc, #184]	; (80019a8 <HAL_DAC_MspInit+0xe4>)
 80018ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018f2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80018f6:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <HAL_DAC_MspInit+0xe4>)
 80018f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <HAL_DAC_MspInit+0xe4>)
 8001906:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800190a:	4a27      	ldr	r2, [pc, #156]	; (80019a8 <HAL_DAC_MspInit+0xe4>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001914:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_DAC_MspInit+0xe4>)
 8001916:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001922:	2310      	movs	r3, #16
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001926:	2303      	movs	r3, #3
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	481d      	ldr	r0, [pc, #116]	; (80019ac <HAL_DAC_MspInit+0xe8>)
 8001936:	f004 fea7 	bl	8006688 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 800193c:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <HAL_DAC_MspInit+0xf0>)
 800193e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001942:	2243      	movs	r2, #67	; 0x43
 8001944:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001948:	2240      	movs	r2, #64	; 0x40
 800194a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001954:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001958:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 800195c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001960:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001964:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001968:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 800196c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001970:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001974:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001978:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 800197c:	2200      	movs	r2, #0
 800197e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001980:	480b      	ldr	r0, [pc, #44]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001982:	f002 fd05 	bl	8004390 <HAL_DMA_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 800198c:	f000 fc2a 	bl	80021e4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	; 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40007400 	.word	0x40007400
 80019a8:	58024400 	.word	0x58024400
 80019ac:	58020000 	.word	0x58020000
 80019b0:	24000270 	.word	0x24000270
 80019b4:	40020028 	.word	0x40020028

080019b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <MX_DMA_Init+0x5c>)
 80019c0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80019c4:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <MX_DMA_Init+0x5c>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_DMA_Init+0x5c>)
 80019d0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	200b      	movs	r0, #11
 80019e2:	f002 f9da 	bl	8003d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019e6:	200b      	movs	r0, #11
 80019e8:	f002 f9f1 	bl	8003dce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	200c      	movs	r0, #12
 80019f2:	f002 f9d2 	bl	8003d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019f6:	200c      	movs	r0, #12
 80019f8:	f002 f9e9 	bl	8003dce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2100      	movs	r1, #0
 8001a00:	200d      	movs	r0, #13
 8001a02:	f002 f9ca 	bl	8003d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001a06:	200d      	movs	r0, #13
 8001a08:	f002 f9e1 	bl	8003dce <HAL_NVIC_EnableIRQ>

}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	58024400 	.word	0x58024400

08001a18 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	; 0x30
 8001a1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2e:	4b61      	ldr	r3, [pc, #388]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001a30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a34:	4a5f      	ldr	r2, [pc, #380]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a3e:	4b5d      	ldr	r3, [pc, #372]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001a40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a4c:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001a4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a52:	4a58      	ldr	r2, [pc, #352]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001a54:	f043 0320 	orr.w	r3, r3, #32
 8001a58:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a5c:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001a5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a62:	f003 0320 	and.w	r3, r3, #32
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6a:	4b52      	ldr	r3, [pc, #328]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001a6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a70:	4a50      	ldr	r2, [pc, #320]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a76:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a7a:	4b4e      	ldr	r3, [pc, #312]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001a7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b4a      	ldr	r3, [pc, #296]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001a8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a8e:	4a49      	ldr	r2, [pc, #292]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a98:	4b46      	ldr	r3, [pc, #280]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001a9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa6:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001aa8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001aac:	4a41      	ldr	r2, [pc, #260]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001aae:	f043 0308 	orr.w	r3, r3, #8
 8001ab2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ab6:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001ab8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001ac6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001aca:	4a3a      	ldr	r2, [pc, #232]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ad0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ad4:	4b37      	ldr	r3, [pc, #220]	; (8001bb4 <MX_GPIO_Init+0x19c>)
 8001ad6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae8:	4833      	ldr	r0, [pc, #204]	; (8001bb8 <MX_GPIO_Init+0x1a0>)
 8001aea:	f004 ff7d 	bl	80069e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001af4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afe:	f107 031c 	add.w	r3, r7, #28
 8001b02:	4619      	mov	r1, r3
 8001b04:	482d      	ldr	r0, [pc, #180]	; (8001bbc <MX_GPIO_Init+0x1a4>)
 8001b06:	f004 fdbf 	bl	8006688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	4825      	ldr	r0, [pc, #148]	; (8001bb8 <MX_GPIO_Init+0x1a0>)
 8001b24:	f004 fdb0 	bl	8006688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4820      	ldr	r0, [pc, #128]	; (8001bc0 <MX_GPIO_Init+0x1a8>)
 8001b3e:	f004 fda3 	bl	8006688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 031c 	add.w	r3, r7, #28
 8001b54:	4619      	mov	r1, r3
 8001b56:	481b      	ldr	r0, [pc, #108]	; (8001bc4 <MX_GPIO_Init+0x1ac>)
 8001b58:	f004 fd96 	bl	8006688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001b6e:	230a      	movs	r3, #10
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	4619      	mov	r1, r3
 8001b78:	4812      	ldr	r0, [pc, #72]	; (8001bc4 <MX_GPIO_Init+0x1ac>)
 8001b7a:	f004 fd85 	bl	8006688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001b7e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	4619      	mov	r1, r3
 8001b96:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <MX_GPIO_Init+0x1ac>)
 8001b98:	f004 fd76 	bl	8006688 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	2028      	movs	r0, #40	; 0x28
 8001ba2:	f002 f8fa 	bl	8003d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ba6:	2028      	movs	r0, #40	; 0x28
 8001ba8:	f002 f911 	bl	8003dce <HAL_NVIC_EnableIRQ>

}
 8001bac:	bf00      	nop
 8001bae:	3730      	adds	r7, #48	; 0x30
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	58024400 	.word	0x58024400
 8001bb8:	58021400 	.word	0x58021400
 8001bbc:	58020800 	.word	0x58020800
 8001bc0:	58021800 	.word	0x58021800
 8001bc4:	58020000 	.word	0x58020000

08001bc8 <HAL_ADC_ConvHalfCpltCallback>:


// when we enter this function, first half of the buffer is complete
// so we set the input buffer pointer at the beginning
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a09      	ldr	r2, [pc, #36]	; (8001bf8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d108      	bne.n	8001bea <HAL_ADC_ConvHalfCpltCallback+0x22>
		inBuffPtr = &adcData[0];
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8001bdc:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[0];
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001be0:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001be2:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]
	}

}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	240000a0 	.word	0x240000a0
 8001bfc:	24000af0 	.word	0x24000af0
 8001c00:	240002e8 	.word	0x240002e8
 8001c04:	24000af4 	.word	0x24000af4
 8001c08:	240006e8 	.word	0x240006e8
 8001c0c:	24000af8 	.word	0x24000af8

08001c10 <HAL_ADC_ConvCpltCallback>:

// when we enter this function, first the second half of the buffer is complete
// so we set the input buffer pointer at the beginning
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1) {
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <HAL_ADC_ConvCpltCallback+0x30>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d108      	bne.n	8001c32 <HAL_ADC_ConvCpltCallback+0x22>
		inBuffPtr = &adcData[DATA_SIZE];
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_ADC_ConvCpltCallback+0x34>)
 8001c22:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <HAL_ADC_ConvCpltCallback+0x38>)
 8001c24:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[DATA_SIZE];
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_ADC_ConvCpltCallback+0x3c>)
 8001c28:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <HAL_ADC_ConvCpltCallback+0x40>)
 8001c2a:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_ADC_ConvCpltCallback+0x44>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
	}

}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	240000a0 	.word	0x240000a0
 8001c44:	24000af0 	.word	0x24000af0
 8001c48:	240004e8 	.word	0x240004e8
 8001c4c:	24000af4 	.word	0x24000af4
 8001c50:	240008e8 	.word	0x240008e8
 8001c54:	24000af8 	.word	0x24000af8

08001c58 <Is_Tremolo>:
enum Effect { CleanEf, DelayEf, SineEf, SquareEf, TriangleEf, ChorusEf };
uint8_t currentEffect =  ChorusEf;

const float INT16_TO_FLOAT = 1.0f / 32768.0f;

uint8_t Is_Tremolo() {
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
	return currentEffect == SineEf || currentEffect == SquareEf || currentEffect == TriangleEf;
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <Is_Tremolo+0x30>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d007      	beq.n	8001c74 <Is_Tremolo+0x1c>
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <Is_Tremolo+0x30>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d003      	beq.n	8001c74 <Is_Tremolo+0x1c>
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <Is_Tremolo+0x30>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d101      	bne.n	8001c78 <Is_Tremolo+0x20>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <Is_Tremolo+0x22>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	24000001 	.word	0x24000001

08001c8c <Init_Tremolo_Waveform>:

void Init_Tremolo_Waveform() {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	if(currentEffect == SineEf) Tremolo_Set_Waveform(Sine);
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <Init_Tremolo_Waveform+0x38>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d103      	bne.n	8001ca0 <Init_Tremolo_Waveform+0x14>
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f7ff fb8b 	bl	80013b4 <Tremolo_Set_Waveform>
	else if(currentEffect == SquareEf) Tremolo_Set_Waveform(Square);
	else if(currentEffect == TriangleEf) Tremolo_Set_Waveform(Triangle);
}
 8001c9e:	e00e      	b.n	8001cbe <Init_Tremolo_Waveform+0x32>
	else if(currentEffect == SquareEf) Tremolo_Set_Waveform(Square);
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <Init_Tremolo_Waveform+0x38>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d103      	bne.n	8001cb0 <Init_Tremolo_Waveform+0x24>
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f7ff fb83 	bl	80013b4 <Tremolo_Set_Waveform>
}
 8001cae:	e006      	b.n	8001cbe <Init_Tremolo_Waveform+0x32>
	else if(currentEffect == TriangleEf) Tremolo_Set_Waveform(Triangle);
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <Init_Tremolo_Waveform+0x38>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d102      	bne.n	8001cbe <Init_Tremolo_Waveform+0x32>
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff fb7b 	bl	80013b4 <Tremolo_Set_Waveform>
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	24000001 	.word	0x24000001

08001cc8 <processData>:

void processData()
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
	if(effectReady == 0) return;
 8001cce:	4b91      	ldr	r3, [pc, #580]	; (8001f14 <processData+0x24c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8119 	beq.w	8001f0a <processData+0x242>

	float volume = adc2Data[0]/4095.0f;
 8001cd8:	4b8f      	ldr	r3, [pc, #572]	; (8001f18 <processData+0x250>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	ee07 3a90 	vmov	s15, r3
 8001ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce4:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8001f1c <processData+0x254>
 8001ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cec:	edc7 7a03 	vstr	s15, [r7, #12]
	float knob1 = adc2Data[1]/4095.0f;
 8001cf0:	4b89      	ldr	r3, [pc, #548]	; (8001f18 <processData+0x250>)
 8001cf2:	885b      	ldrh	r3, [r3, #2]
 8001cf4:	ee07 3a90 	vmov	s15, r3
 8001cf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cfc:	eddf 6a87 	vldr	s13, [pc, #540]	; 8001f1c <processData+0x254>
 8001d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d04:	edc7 7a02 	vstr	s15, [r7, #8]
	float knob2 = adc2Data[2]/4095.0f;
 8001d08:	4b83      	ldr	r3, [pc, #524]	; (8001f18 <processData+0x250>)
 8001d0a:	889b      	ldrh	r3, [r3, #4]
 8001d0c:	ee07 3a90 	vmov	s15, r3
 8001d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d14:	eddf 6a81 	vldr	s13, [pc, #516]	; 8001f1c <processData+0x254>
 8001d18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d1c:	edc7 7a01 	vstr	s15, [r7, #4]

	if(currentEffect == CleanEf) {
 8001d20:	4b7f      	ldr	r3, [pc, #508]	; (8001f20 <processData+0x258>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d123      	bne.n	8001d70 <processData+0xa8>
		for(int i = 0; i < DATA_SIZE; i++) {
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	e01c      	b.n	8001d68 <processData+0xa0>
			 outBuffPtr[i] = (uint16_t) (volume * inBuffPtr[i]);
 8001d2e:	4b7d      	ldr	r3, [pc, #500]	; (8001f24 <processData+0x25c>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d44:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4c:	4b76      	ldr	r3, [pc, #472]	; (8001f28 <processData+0x260>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d5a:	ee17 2a90 	vmov	r2, s15
 8001d5e:	b292      	uxth	r2, r2
 8001d60:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3301      	adds	r3, #1
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2bff      	cmp	r3, #255	; 0xff
 8001d6c:	dddf      	ble.n	8001d2e <processData+0x66>
 8001d6e:	e0c8      	b.n	8001f02 <processData+0x23a>
		}
	}
	else if(currentEffect == DelayEf) {
 8001d70:	4b6b      	ldr	r3, [pc, #428]	; (8001f20 <processData+0x258>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d12d      	bne.n	8001dd4 <processData+0x10c>
		Delay_Set_Params(knob1, knob2);
 8001d78:	edd7 0a01 	vldr	s1, [r7, #4]
 8001d7c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001d80:	f7ff f916 	bl	8000fb0 <Delay_Set_Params>
		for(int i = 0; i < DATA_SIZE; i++) {
 8001d84:	2300      	movs	r3, #0
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	e020      	b.n	8001dcc <processData+0x104>
			 outBuffPtr[i] = (uint16_t) (volume * Delay_Process(inBuffPtr[i]));
 8001d8a:	4b66      	ldr	r3, [pc, #408]	; (8001f24 <processData+0x25c>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff f88d 	bl	8000eb8 <Delay_Process>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	ee07 3a90 	vmov	s15, r3
 8001da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db0:	4b5d      	ldr	r3, [pc, #372]	; (8001f28 <processData+0x260>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dbe:	ee17 2a90 	vmov	r2, s15
 8001dc2:	b292      	uxth	r2, r2
 8001dc4:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61bb      	str	r3, [r7, #24]
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2bff      	cmp	r3, #255	; 0xff
 8001dd0:	dddb      	ble.n	8001d8a <processData+0xc2>
 8001dd2:	e096      	b.n	8001f02 <processData+0x23a>
		}
	} else if(Is_Tremolo()) {
 8001dd4:	f7ff ff40 	bl	8001c58 <Is_Tremolo>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d047      	beq.n	8001e6e <processData+0x1a6>
		Init_Tremolo_Waveform();
 8001dde:	f7ff ff55 	bl	8001c8c <Init_Tremolo_Waveform>

		static float in, out;
		for(int i = 0; i < DATA_SIZE; i++) {
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e03e      	b.n	8001e66 <processData+0x19e>
			in = INT16_TO_FLOAT * inBuffPtr[i];
 8001de8:	4b4e      	ldr	r3, [pc, #312]	; (8001f24 <processData+0x25c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfe:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001f2c <processData+0x264>
 8001e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e06:	4b4a      	ldr	r3, [pc, #296]	; (8001f30 <processData+0x268>)
 8001e08:	edc3 7a00 	vstr	s15, [r3]
			out = Tremolo_Process(in, knob1, knob2) * 1.4f;
 8001e0c:	4b48      	ldr	r3, [pc, #288]	; (8001f30 <processData+0x268>)
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	ed97 1a01 	vldr	s2, [r7, #4]
 8001e16:	edd7 0a02 	vldr	s1, [r7, #8]
 8001e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1e:	f7ff fa5b 	bl	80012d8 <Tremolo_Process>
 8001e22:	eef0 7a40 	vmov.f32	s15, s0
 8001e26:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001f34 <processData+0x26c>
 8001e2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2e:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <processData+0x270>)
 8001e30:	edc3 7a00 	vstr	s15, [r3]
			outBuffPtr[i] =  (uint16_t) (volume * out * 32768.0f);
 8001e34:	4b40      	ldr	r3, [pc, #256]	; (8001f38 <processData+0x270>)
 8001e36:	ed93 7a00 	vldr	s14, [r3]
 8001e3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e42:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001f3c <processData+0x274>
 8001e46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e4a:	4b37      	ldr	r3, [pc, #220]	; (8001f28 <processData+0x260>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e58:	ee17 2a90 	vmov	r2, s15
 8001e5c:	b292      	uxth	r2, r2
 8001e5e:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	3301      	adds	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2bff      	cmp	r3, #255	; 0xff
 8001e6a:	ddbd      	ble.n	8001de8 <processData+0x120>
 8001e6c:	e049      	b.n	8001f02 <processData+0x23a>
		}
	} else if(currentEffect == ChorusEf) {
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <processData+0x258>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d145      	bne.n	8001f02 <processData+0x23a>
		Chorus_Set_Params(knob1);
 8001e76:	ed97 0a02 	vldr	s0, [r7, #8]
 8001e7a:	f7fe ff51 	bl	8000d20 <Chorus_Set_Params>
		static float in, out;
		for(int i = 0; i < DATA_SIZE; i++) {
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	e03b      	b.n	8001efc <processData+0x234>
			in = INT16_TO_FLOAT * inBuffPtr[i];
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <processData+0x25c>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001f2c <processData+0x264>
 8001e9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea2:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <processData+0x278>)
 8001ea4:	edc3 7a00 	vstr	s15, [r3]
			out = in + Chorus_Process(in);
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <processData+0x278>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb2:	f7fe fe61 	bl	8000b78 <Chorus_Process>
 8001eb6:	eeb0 7a40 	vmov.f32	s14, s0
 8001eba:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <processData+0x278>)
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec4:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <processData+0x27c>)
 8001ec6:	edc3 7a00 	vstr	s15, [r3]
			outBuffPtr[i] = (uint16_t) (volume * out * 32768.0f);
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <processData+0x27c>)
 8001ecc:	ed93 7a00 	vldr	s14, [r3]
 8001ed0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001f3c <processData+0x274>
 8001edc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <processData+0x260>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eee:	ee17 2a90 	vmov	r2, s15
 8001ef2:	b292      	uxth	r2, r2
 8001ef4:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2bff      	cmp	r3, #255	; 0xff
 8001f00:	ddc0      	ble.n	8001e84 <processData+0x1bc>
		}
	}

	dataReady = 0;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <processData+0x280>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	e000      	b.n	8001f0c <processData+0x244>
	if(effectReady == 0) return;
 8001f0a:	bf00      	nop
}
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	24000000 	.word	0x24000000
 8001f18:	24000ae8 	.word	0x24000ae8
 8001f1c:	457ff000 	.word	0x457ff000
 8001f20:	24000001 	.word	0x24000001
 8001f24:	24000af0 	.word	0x24000af0
 8001f28:	24000af4 	.word	0x24000af4
 8001f2c:	38000000 	.word	0x38000000
 8001f30:	24000afc 	.word	0x24000afc
 8001f34:	3fb33333 	.word	0x3fb33333
 8001f38:	24000b00 	.word	0x24000b00
 8001f3c:	47000000 	.word	0x47000000
 8001f40:	24000b04 	.word	0x24000b04
 8001f44:	24000b08 	.word	0x24000b08
 8001f48:	24000af8 	.word	0x24000af8

08001f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f52:	f000 fc0d 	bl	8002770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f56:	f000 f84d 	bl	8001ff4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f5a:	f000 f8c7 	bl	80020ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f5e:	f7ff fd5b 	bl	8001a18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001f62:	f000 fb21 	bl	80025a8 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8001f66:	f7ff fd27 	bl	80019b8 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 8001f6a:	f000 fbcf 	bl	800270c <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 8001f6e:	f7ff fa43 	bl	80013f8 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001f72:	f000 faa9 	bl	80024c8 <MX_TIM6_Init>
  MX_DAC1_Init();
 8001f76:	f7ff fc73 	bl	8001860 <MX_DAC1_Init>
  MX_ADC2_Init();
 8001f7a:	f7ff fab7 	bl	80014ec <MX_ADC2_Init>
  MX_TIM1_Init();
 8001f7e:	f000 fa4f 	bl	8002420 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001f82:	4812      	ldr	r0, [pc, #72]	; (8001fcc <main+0x80>)
 8001f84:	f007 fe54 	bl	8009c30 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);
 8001f88:	4811      	ldr	r0, [pc, #68]	; (8001fd0 <main+0x84>)
 8001f8a:	f007 fe51 	bl	8009c30 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcData, BUFFER_SIZE);
 8001f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f92:	4910      	ldr	r1, [pc, #64]	; (8001fd4 <main+0x88>)
 8001f94:	4810      	ldr	r0, [pc, #64]	; (8001fd8 <main+0x8c>)
 8001f96:	f000 ffe3 	bl	8002f60 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) dacData, BUFFER_SIZE, DAC_ALIGN_12B_R);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fa2:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <main+0x90>)
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	480e      	ldr	r0, [pc, #56]	; (8001fe0 <main+0x94>)
 8001fa8:	f001 ff4e 	bl	8003e48 <HAL_DAC_Start_DMA>

//  Delay_Init(SAMPLE_RATE);
  Chorus_Init(SAMPLE_RATE);
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <main+0x98>)
 8001fae:	f7fe fcdd 	bl	800096c <Chorus_Init>
//  Tremolo_Init(SAMPLE_RATE);
//  Flanger_Init();
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2Data, 3);
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <main+0x9c>)
 8001fb6:	480d      	ldr	r0, [pc, #52]	; (8001fec <main+0xa0>)
 8001fb8:	f000 ffd2 	bl	8002f60 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(dataReady) {
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <main+0xa4>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0fb      	beq.n	8001fbc <main+0x70>
		  processData();
 8001fc4:	f7ff fe80 	bl	8001cc8 <processData>
	  if(dataReady) {
 8001fc8:	e7f8      	b.n	8001fbc <main+0x70>
 8001fca:	bf00      	nop
 8001fcc:	24000b10 	.word	0x24000b10
 8001fd0:	24000b5c 	.word	0x24000b5c
 8001fd4:	240002e8 	.word	0x240002e8
 8001fd8:	240000a0 	.word	0x240000a0
 8001fdc:	240006e8 	.word	0x240006e8
 8001fe0:	2400025c 	.word	0x2400025c
 8001fe4:	00017715 	.word	0x00017715
 8001fe8:	24000ae8 	.word	0x24000ae8
 8001fec:	24000104 	.word	0x24000104
 8001ff0:	24000af8 	.word	0x24000af8

08001ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b09c      	sub	sp, #112	; 0x70
 8001ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffe:	224c      	movs	r2, #76	; 0x4c
 8002000:	2100      	movs	r1, #0
 8002002:	4618      	mov	r0, r3
 8002004:	f009 faf0 	bl	800b5e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	2220      	movs	r2, #32
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f009 faea 	bl	800b5e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002014:	2004      	movs	r0, #4
 8002016:	f004 fd1b 	bl	8006a50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800201a:	2300      	movs	r3, #0
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <SystemClock_Config+0xf0>)
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	4a30      	ldr	r2, [pc, #192]	; (80020e4 <SystemClock_Config+0xf0>)
 8002024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002028:	6193      	str	r3, [r2, #24]
 800202a:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <SystemClock_Config+0xf0>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002036:	bf00      	nop
 8002038:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <SystemClock_Config+0xf0>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002044:	d1f8      	bne.n	8002038 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002046:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <SystemClock_Config+0xf4>)
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	4a26      	ldr	r2, [pc, #152]	; (80020e8 <SystemClock_Config+0xf4>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8002056:	2329      	movs	r3, #41	; 0x29
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800205a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002060:	2301      	movs	r3, #1
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002064:	2301      	movs	r3, #1
 8002066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002068:	2302      	movs	r3, #2
 800206a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800206c:	2302      	movs	r3, #2
 800206e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002070:	2301      	movs	r3, #1
 8002072:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8002074:	2346      	movs	r3, #70	; 0x46
 8002076:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002078:	2302      	movs	r3, #2
 800207a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800207c:	2304      	movs	r3, #4
 800207e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002080:	2302      	movs	r3, #2
 8002082:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002084:	230c      	movs	r3, #12
 8002086:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002088:	2300      	movs	r3, #0
 800208a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002094:	4618      	mov	r0, r3
 8002096:	f004 fd35 	bl	8006b04 <HAL_RCC_OscConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80020a0:	f000 f8a0 	bl	80021e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a4:	233f      	movs	r3, #63	; 0x3f
 80020a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a8:	2303      	movs	r3, #3
 80020aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80020b4:	2340      	movs	r3, #64	; 0x40
 80020b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80020b8:	2340      	movs	r3, #64	; 0x40
 80020ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80020bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80020c2:	2340      	movs	r3, #64	; 0x40
 80020c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	2107      	movs	r1, #7
 80020ca:	4618      	mov	r0, r3
 80020cc:	f005 f91e 	bl	800730c <HAL_RCC_ClockConfig>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80020d6:	f000 f885 	bl	80021e4 <Error_Handler>
  }
}
 80020da:	bf00      	nop
 80020dc:	3770      	adds	r7, #112	; 0x70
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	58024800 	.word	0x58024800
 80020e8:	58024400 	.word	0x58024400

080020ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b0ae      	sub	sp, #184	; 0xb8
 80020f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020f2:	463b      	mov	r3, r7
 80020f4:	22b8      	movs	r2, #184	; 0xb8
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f009 fa75 	bl	800b5e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002102:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002104:	2301      	movs	r3, #1
 8002106:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8002108:	2310      	movs	r3, #16
 800210a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800210c:	2301      	movs	r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002110:	2302      	movs	r3, #2
 8002112:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002114:	2302      	movs	r3, #2
 8002116:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002118:	23c0      	movs	r3, #192	; 0xc0
 800211a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800212a:	463b      	mov	r3, r7
 800212c:	4618      	mov	r0, r3
 800212e:	f005 fc79 	bl	8007a24 <HAL_RCCEx_PeriphCLKConfig>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8002138:	f000 f854 	bl	80021e4 <Error_Handler>
  }
}
 800213c:	bf00      	nop
 800213e:	37b8      	adds	r7, #184	; 0xb8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) {
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002154:	d13b      	bne.n	80021ce <HAL_GPIO_EXTI_Callback+0x8a>
		effectReady = 0;
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x94>)
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]

		if(currentEffect == ChorusEf) {
 800215c:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <HAL_GPIO_EXTI_Callback+0x98>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b05      	cmp	r3, #5
 8002162:	d105      	bne.n	8002170 <HAL_GPIO_EXTI_Callback+0x2c>
			currentEffect = 0;
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_GPIO_EXTI_Callback+0x98>)
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
			Chorus_Free();
 800216a:	f7fe fe33 	bl	8000dd4 <Chorus_Free>
 800216e:	e00c      	b.n	800218a <HAL_GPIO_EXTI_Callback+0x46>
		} else if(currentEffect == DelayEf) {
 8002170:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_GPIO_EXTI_Callback+0x98>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d102      	bne.n	800217e <HAL_GPIO_EXTI_Callback+0x3a>
			Delay_Free();
 8002178:	f7fe fff0 	bl	800115c <Delay_Free>
 800217c:	e005      	b.n	800218a <HAL_GPIO_EXTI_Callback+0x46>
		} else if(currentEffect == 4) {
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_GPIO_EXTI_Callback+0x98>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b04      	cmp	r3, #4
 8002184:	d101      	bne.n	800218a <HAL_GPIO_EXTI_Callback+0x46>
			Tremolo_Free();
 8002186:	f7ff f925 	bl	80013d4 <Tremolo_Free>
		}

		currentEffect++;
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_GPIO_EXTI_Callback+0x98>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_GPIO_EXTI_Callback+0x98>)
 8002194:	701a      	strb	r2, [r3, #0]

		if(currentEffect == ChorusEf) {
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_GPIO_EXTI_Callback+0x98>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b05      	cmp	r3, #5
 800219c:	d103      	bne.n	80021a6 <HAL_GPIO_EXTI_Callback+0x62>
			Chorus_Init(SAMPLE_RATE);
 800219e:	4810      	ldr	r0, [pc, #64]	; (80021e0 <HAL_GPIO_EXTI_Callback+0x9c>)
 80021a0:	f7fe fbe4 	bl	800096c <Chorus_Init>
 80021a4:	e00f      	b.n	80021c6 <HAL_GPIO_EXTI_Callback+0x82>
		}
		else if(currentEffect == DelayEf) {
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <HAL_GPIO_EXTI_Callback+0x98>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d103      	bne.n	80021b6 <HAL_GPIO_EXTI_Callback+0x72>
			Delay_Init(SAMPLE_RATE);
 80021ae:	480c      	ldr	r0, [pc, #48]	; (80021e0 <HAL_GPIO_EXTI_Callback+0x9c>)
 80021b0:	f7fe fe28 	bl	8000e04 <Delay_Init>
 80021b4:	e007      	b.n	80021c6 <HAL_GPIO_EXTI_Callback+0x82>
		} else if(Is_Tremolo()) {
 80021b6:	f7ff fd4f 	bl	8001c58 <Is_Tremolo>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_GPIO_EXTI_Callback+0x82>
			Tremolo_Init(SAMPLE_RATE);
 80021c0:	4807      	ldr	r0, [pc, #28]	; (80021e0 <HAL_GPIO_EXTI_Callback+0x9c>)
 80021c2:	f7ff f857 	bl	8001274 <Tremolo_Init>
		}

		effectReady = 1;
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x94>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	701a      	strb	r2, [r3, #0]
	} else {
		__NOP();
	}
}
 80021cc:	e000      	b.n	80021d0 <HAL_GPIO_EXTI_Callback+0x8c>
		__NOP();
 80021ce:	bf00      	nop
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	24000000 	.word	0x24000000
 80021dc:	24000001 	.word	0x24000001
 80021e0:	00017715 	.word	0x00017715

080021e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e8:	b672      	cpsid	i
}
 80021ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021ec:	e7fe      	b.n	80021ec <Error_Handler+0x8>
	...

080021f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_MspInit+0x30>)
 80021f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80021fc:	4a08      	ldr	r2, [pc, #32]	; (8002220 <HAL_MspInit+0x30>)
 80021fe:	f043 0302 	orr.w	r3, r3, #2
 8002202:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_MspInit+0x30>)
 8002208:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	58024400 	.word	0x58024400

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <NMI_Handler+0x4>

0800222a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <MemManage_Handler+0x4>

08002236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <BusFault_Handler+0x4>

0800223c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <UsageFault_Handler+0x4>

08002242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002270:	f000 faf0 	bl	8002854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <DMA1_Stream0_IRQHandler+0x10>)
 800227e:	f002 fe81 	bl	8004f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	24000168 	.word	0x24000168

0800228c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <DMA1_Stream1_IRQHandler+0x10>)
 8002292:	f002 fe77 	bl	8004f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	24000270 	.word	0x24000270

080022a0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <DMA1_Stream2_IRQHandler+0x10>)
 80022a6:	f002 fe6d 	bl	8004f84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	240001e0 	.word	0x240001e0

080022b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80022b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022bc:	f004 fbad 	bl	8006a1a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <_sbrk+0x5c>)
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <_sbrk+0x60>)
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d102      	bne.n	80022e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <_sbrk+0x64>)
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <_sbrk+0x68>)
 80022e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <_sbrk+0x64>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d207      	bcs.n	8002304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f4:	f009 f93e 	bl	800b574 <__errno>
 80022f8:	4603      	mov	r3, r0
 80022fa:	220c      	movs	r2, #12
 80022fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	e009      	b.n	8002318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <_sbrk+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <_sbrk+0x64>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	4a05      	ldr	r2, [pc, #20]	; (8002328 <_sbrk+0x64>)
 8002314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002316:	68fb      	ldr	r3, [r7, #12]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	24100000 	.word	0x24100000
 8002324:	00000400 	.word	0x00000400
 8002328:	24000b0c 	.word	0x24000b0c
 800232c:	24000c50 	.word	0x24000c50

08002330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002334:	4b32      	ldr	r3, [pc, #200]	; (8002400 <SystemInit+0xd0>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	4a31      	ldr	r2, [pc, #196]	; (8002400 <SystemInit+0xd0>)
 800233c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002344:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <SystemInit+0xd4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	2b02      	cmp	r3, #2
 800234e:	d807      	bhi.n	8002360 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002350:	4b2c      	ldr	r3, [pc, #176]	; (8002404 <SystemInit+0xd4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 030f 	bic.w	r3, r3, #15
 8002358:	4a2a      	ldr	r2, [pc, #168]	; (8002404 <SystemInit+0xd4>)
 800235a:	f043 0303 	orr.w	r3, r3, #3
 800235e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002360:	4b29      	ldr	r3, [pc, #164]	; (8002408 <SystemInit+0xd8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a28      	ldr	r2, [pc, #160]	; (8002408 <SystemInit+0xd8>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800236c:	4b26      	ldr	r3, [pc, #152]	; (8002408 <SystemInit+0xd8>)
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002372:	4b25      	ldr	r3, [pc, #148]	; (8002408 <SystemInit+0xd8>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	4924      	ldr	r1, [pc, #144]	; (8002408 <SystemInit+0xd8>)
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <SystemInit+0xdc>)
 800237a:	4013      	ands	r3, r2
 800237c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <SystemInit+0xd4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800238a:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <SystemInit+0xd4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 030f 	bic.w	r3, r3, #15
 8002392:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <SystemInit+0xd4>)
 8002394:	f043 0303 	orr.w	r3, r3, #3
 8002398:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800239a:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <SystemInit+0xd8>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <SystemInit+0xd8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80023a6:	4b18      	ldr	r3, [pc, #96]	; (8002408 <SystemInit+0xd8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <SystemInit+0xd8>)
 80023ae:	4a18      	ldr	r2, [pc, #96]	; (8002410 <SystemInit+0xe0>)
 80023b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <SystemInit+0xd8>)
 80023b4:	4a17      	ldr	r2, [pc, #92]	; (8002414 <SystemInit+0xe4>)
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <SystemInit+0xd8>)
 80023ba:	4a17      	ldr	r2, [pc, #92]	; (8002418 <SystemInit+0xe8>)
 80023bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023be:	4b12      	ldr	r3, [pc, #72]	; (8002408 <SystemInit+0xd8>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023c4:	4b10      	ldr	r3, [pc, #64]	; (8002408 <SystemInit+0xd8>)
 80023c6:	4a14      	ldr	r2, [pc, #80]	; (8002418 <SystemInit+0xe8>)
 80023c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <SystemInit+0xd8>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023d0:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <SystemInit+0xd8>)
 80023d2:	4a11      	ldr	r2, [pc, #68]	; (8002418 <SystemInit+0xe8>)
 80023d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <SystemInit+0xd8>)
 80023d8:	2200      	movs	r2, #0
 80023da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023dc:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <SystemInit+0xd8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a09      	ldr	r2, [pc, #36]	; (8002408 <SystemInit+0xd8>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023e8:	4b07      	ldr	r3, [pc, #28]	; (8002408 <SystemInit+0xd8>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <SystemInit+0xec>)
 80023f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80023f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00
 8002404:	52002000 	.word	0x52002000
 8002408:	58024400 	.word	0x58024400
 800240c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002410:	02020200 	.word	0x02020200
 8002414:	01ff0000 	.word	0x01ff0000
 8002418:	01010280 	.word	0x01010280
 800241c:	52004000 	.word	0x52004000

08002420 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <MX_TIM1_Init+0xa0>)
 8002440:	4a20      	ldr	r2, [pc, #128]	; (80024c4 <MX_TIM1_Init+0xa4>)
 8002442:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8002444:	4b1e      	ldr	r3, [pc, #120]	; (80024c0 <MX_TIM1_Init+0xa0>)
 8002446:	f240 32e7 	movw	r2, #999	; 0x3e7
 800244a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244c:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <MX_TIM1_Init+0xa0>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2800-1;
 8002452:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <MX_TIM1_Init+0xa0>)
 8002454:	f640 22ef 	movw	r2, #2799	; 0xaef
 8002458:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <MX_TIM1_Init+0xa0>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002460:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <MX_TIM1_Init+0xa0>)
 8002462:	2200      	movs	r2, #0
 8002464:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <MX_TIM1_Init+0xa0>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800246c:	4814      	ldr	r0, [pc, #80]	; (80024c0 <MX_TIM1_Init+0xa0>)
 800246e:	f007 fb87 	bl	8009b80 <HAL_TIM_Base_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002478:	f7ff feb4 	bl	80021e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800247c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002480:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002482:	f107 0310 	add.w	r3, r7, #16
 8002486:	4619      	mov	r1, r3
 8002488:	480d      	ldr	r0, [pc, #52]	; (80024c0 <MX_TIM1_Init+0xa0>)
 800248a:	f007 fc41 	bl	8009d10 <HAL_TIM_ConfigClockSource>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002494:	f7ff fea6 	bl	80021e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002498:	2320      	movs	r3, #32
 800249a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	4619      	mov	r1, r3
 80024a8:	4805      	ldr	r0, [pc, #20]	; (80024c0 <MX_TIM1_Init+0xa0>)
 80024aa:	f007 fe61 	bl	800a170 <HAL_TIMEx_MasterConfigSynchronization>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80024b4:	f7ff fe96 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024b8:	bf00      	nop
 80024ba:	3720      	adds	r7, #32
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	24000b10 	.word	0x24000b10
 80024c4:	40010000 	.word	0x40010000

080024c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <MX_TIM6_Init+0x64>)
 80024da:	4a15      	ldr	r2, [pc, #84]	; (8002530 <MX_TIM6_Init+0x68>)
 80024dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80024de:	4b13      	ldr	r3, [pc, #76]	; (800252c <MX_TIM6_Init+0x64>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <MX_TIM6_Init+0x64>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2916-1;
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <MX_TIM6_Init+0x64>)
 80024ec:	f640 3263 	movw	r2, #2915	; 0xb63
 80024f0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <MX_TIM6_Init+0x64>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024f8:	480c      	ldr	r0, [pc, #48]	; (800252c <MX_TIM6_Init+0x64>)
 80024fa:	f007 fb41 	bl	8009b80 <HAL_TIM_Base_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002504:	f7ff fe6e 	bl	80021e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002508:	2320      	movs	r3, #32
 800250a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	4619      	mov	r1, r3
 8002514:	4805      	ldr	r0, [pc, #20]	; (800252c <MX_TIM6_Init+0x64>)
 8002516:	f007 fe2b 	bl	800a170 <HAL_TIMEx_MasterConfigSynchronization>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002520:	f7ff fe60 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	24000b5c 	.word	0x24000b5c
 8002530:	40001000 	.word	0x40001000

08002534 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a16      	ldr	r2, [pc, #88]	; (800259c <HAL_TIM_Base_MspInit+0x68>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d10f      	bne.n	8002566 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002546:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <HAL_TIM_Base_MspInit+0x6c>)
 8002548:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800254c:	4a14      	ldr	r2, [pc, #80]	; (80025a0 <HAL_TIM_Base_MspInit+0x6c>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <HAL_TIM_Base_MspInit+0x6c>)
 8002558:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002564:	e013      	b.n	800258e <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM6)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <HAL_TIM_Base_MspInit+0x70>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d10e      	bne.n	800258e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_TIM_Base_MspInit+0x6c>)
 8002572:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002576:	4a0a      	ldr	r2, [pc, #40]	; (80025a0 <HAL_TIM_Base_MspInit+0x6c>)
 8002578:	f043 0310 	orr.w	r3, r3, #16
 800257c:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <HAL_TIM_Base_MspInit+0x6c>)
 8002582:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40010000 	.word	0x40010000
 80025a0:	58024400 	.word	0x58024400
 80025a4:	40001000 	.word	0x40001000

080025a8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <MX_USART3_UART_Init+0x90>)
 80025ae:	4a23      	ldr	r2, [pc, #140]	; (800263c <MX_USART3_UART_Init+0x94>)
 80025b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025b2:	4b21      	ldr	r3, [pc, #132]	; (8002638 <MX_USART3_UART_Init+0x90>)
 80025b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025ba:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <MX_USART3_UART_Init+0x90>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025c0:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <MX_USART3_UART_Init+0x90>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025c6:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <MX_USART3_UART_Init+0x90>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025cc:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <MX_USART3_UART_Init+0x90>)
 80025ce:	220c      	movs	r2, #12
 80025d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <MX_USART3_UART_Init+0x90>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025d8:	4b17      	ldr	r3, [pc, #92]	; (8002638 <MX_USART3_UART_Init+0x90>)
 80025da:	2200      	movs	r2, #0
 80025dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025de:	4b16      	ldr	r3, [pc, #88]	; (8002638 <MX_USART3_UART_Init+0x90>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <MX_USART3_UART_Init+0x90>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <MX_USART3_UART_Init+0x90>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025f0:	4811      	ldr	r0, [pc, #68]	; (8002638 <MX_USART3_UART_Init+0x90>)
 80025f2:	f007 fe4b 	bl	800a28c <HAL_UART_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80025fc:	f7ff fdf2 	bl	80021e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002600:	2100      	movs	r1, #0
 8002602:	480d      	ldr	r0, [pc, #52]	; (8002638 <MX_USART3_UART_Init+0x90>)
 8002604:	f008 feec 	bl	800b3e0 <HAL_UARTEx_SetTxFifoThreshold>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800260e:	f7ff fde9 	bl	80021e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002612:	2100      	movs	r1, #0
 8002614:	4808      	ldr	r0, [pc, #32]	; (8002638 <MX_USART3_UART_Init+0x90>)
 8002616:	f008 ff21 	bl	800b45c <HAL_UARTEx_SetRxFifoThreshold>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002620:	f7ff fde0 	bl	80021e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002624:	4804      	ldr	r0, [pc, #16]	; (8002638 <MX_USART3_UART_Init+0x90>)
 8002626:	f008 fea2 	bl	800b36e <HAL_UARTEx_DisableFifoMode>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002630:	f7ff fdd8 	bl	80021e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	24000ba8 	.word	0x24000ba8
 800263c:	40004800 	.word	0x40004800

08002640 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b0b8      	sub	sp, #224	; 0xe0
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	22b8      	movs	r2, #184	; 0xb8
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f008 ffc1 	bl	800b5e8 <memset>
  if(uartHandle->Instance==USART3)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a25      	ldr	r2, [pc, #148]	; (8002700 <HAL_UART_MspInit+0xc0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d142      	bne.n	80026f6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002670:	2302      	movs	r3, #2
 8002672:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4618      	mov	r0, r3
 8002680:	f005 f9d0 	bl	8007a24 <HAL_RCCEx_PeriphCLKConfig>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800268a:	f7ff fdab 	bl	80021e4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_UART_MspInit+0xc4>)
 8002690:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002694:	4a1b      	ldr	r2, [pc, #108]	; (8002704 <HAL_UART_MspInit+0xc4>)
 8002696:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800269a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_UART_MspInit+0xc4>)
 80026a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80026a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_UART_MspInit+0xc4>)
 80026ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80026b2:	4a14      	ldr	r2, [pc, #80]	; (8002704 <HAL_UART_MspInit+0xc4>)
 80026b4:	f043 0308 	orr.w	r3, r3, #8
 80026b8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_UART_MspInit+0xc4>)
 80026be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80026ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026e4:	2307      	movs	r3, #7
 80026e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026ee:	4619      	mov	r1, r3
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <HAL_UART_MspInit+0xc8>)
 80026f2:	f003 ffc9 	bl	8006688 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80026f6:	bf00      	nop
 80026f8:	37e0      	adds	r7, #224	; 0xe0
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40004800 	.word	0x40004800
 8002704:	58024400 	.word	0x58024400
 8002708:	58020c00 	.word	0x58020c00

0800270c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800271c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002754 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002720:	f7ff fe06 	bl	8002330 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002724:	480c      	ldr	r0, [pc, #48]	; (8002758 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002726:	490d      	ldr	r1, [pc, #52]	; (800275c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800272c:	e002      	b.n	8002734 <LoopCopyDataInit>

0800272e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002732:	3304      	adds	r3, #4

08002734 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002738:	d3f9      	bcc.n	800272e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273a:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800273c:	4c0a      	ldr	r4, [pc, #40]	; (8002768 <LoopFillZerobss+0x22>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002740:	e001      	b.n	8002746 <LoopFillZerobss>

08002742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002744:	3204      	adds	r2, #4

08002746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002748:	d3fb      	bcc.n	8002742 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800274a:	f008 ff19 	bl	800b580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800274e:	f7ff fbfd 	bl	8001f4c <main>
  bx  lr
 8002752:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002754:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002758:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800275c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8002760:	0800bbe0 	.word	0x0800bbe0
  ldr r2, =_sbss
 8002764:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8002768:	24000c4c 	.word	0x24000c4c

0800276c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800276c:	e7fe      	b.n	800276c <ADC_IRQHandler>
	...

08002770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002776:	2003      	movs	r0, #3
 8002778:	f001 fb04 	bl	8003d84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800277c:	f004 ff7c 	bl	8007678 <HAL_RCC_GetSysClockFreq>
 8002780:	4602      	mov	r2, r0
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_Init+0x68>)
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	4913      	ldr	r1, [pc, #76]	; (80027dc <HAL_Init+0x6c>)
 800278e:	5ccb      	ldrb	r3, [r1, r3]
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
 8002798:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800279a:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <HAL_Init+0x68>)
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <HAL_Init+0x6c>)
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	fa22 f303 	lsr.w	r3, r2, r3
 80027b0:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <HAL_Init+0x70>)
 80027b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027b4:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <HAL_Init+0x74>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027ba:	2000      	movs	r0, #0
 80027bc:	f000 f814 	bl	80027e8 <HAL_InitTick>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e002      	b.n	80027d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027ca:	f7ff fd11 	bl	80021f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	58024400 	.word	0x58024400
 80027dc:	0800ba50 	.word	0x0800ba50
 80027e0:	24000008 	.word	0x24000008
 80027e4:	24000004 	.word	0x24000004

080027e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80027f0:	4b15      	ldr	r3, [pc, #84]	; (8002848 <HAL_InitTick+0x60>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e021      	b.n	8002840 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <HAL_InitTick+0x64>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <HAL_InitTick+0x60>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	4619      	mov	r1, r3
 8002806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800280a:	fbb3 f3f1 	udiv	r3, r3, r1
 800280e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002812:	4618      	mov	r0, r3
 8002814:	f001 fae9 	bl	8003dea <HAL_SYSTICK_Config>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e00e      	b.n	8002840 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b0f      	cmp	r3, #15
 8002826:	d80a      	bhi.n	800283e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002828:	2200      	movs	r2, #0
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	f04f 30ff 	mov.w	r0, #4294967295
 8002830:	f001 fab3 	bl	8003d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002834:	4a06      	ldr	r2, [pc, #24]	; (8002850 <HAL_InitTick+0x68>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e000      	b.n	8002840 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	24000010 	.word	0x24000010
 800284c:	24000004 	.word	0x24000004
 8002850:	2400000c 	.word	0x2400000c

08002854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_IncTick+0x20>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <HAL_IncTick+0x24>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4413      	add	r3, r2
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <HAL_IncTick+0x24>)
 8002866:	6013      	str	r3, [r2, #0]
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	24000010 	.word	0x24000010
 8002878:	24000c38 	.word	0x24000c38

0800287c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return uwTick;
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <HAL_GetTick+0x14>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	24000c38 	.word	0x24000c38

08002894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800289c:	f7ff ffee 	bl	800287c <HAL_GetTick>
 80028a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d005      	beq.n	80028ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <HAL_Delay+0x44>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4413      	add	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ba:	bf00      	nop
 80028bc:	f7ff ffde 	bl	800287c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d8f7      	bhi.n	80028bc <HAL_Delay+0x28>
  {
  }
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	24000010 	.word	0x24000010

080028dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	609a      	str	r2, [r3, #8]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002938:	4618      	mov	r0, r3
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3360      	adds	r3, #96	; 0x60
 8002956:	461a      	mov	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	430b      	orrs	r3, r1
 8002972:	431a      	orrs	r2, r3
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002978:	bf00      	nop
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	431a      	orrs	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	611a      	str	r2, [r3, #16]
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b087      	sub	sp, #28
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3360      	adds	r3, #96	; 0x60
 80029c6:	461a      	mov	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	431a      	orrs	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	601a      	str	r2, [r3, #0]
  }
}
 80029e0:	bf00      	nop
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b087      	sub	sp, #28
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	3330      	adds	r3, #48	; 0x30
 8002a22:	461a      	mov	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	4413      	add	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	211f      	movs	r1, #31
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	43db      	mvns	r3, r3
 8002a44:	401a      	ands	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	0e9b      	lsrs	r3, r3, #26
 8002a4a:	f003 011f 	and.w	r1, r3, #31
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f023 0203 	bic.w	r2, r3, #3
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3314      	adds	r3, #20
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	0e5b      	lsrs	r3, r3, #25
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	4413      	add	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	0d1b      	lsrs	r3, r3, #20
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	2107      	movs	r1, #7
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	401a      	ands	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	0d1b      	lsrs	r3, r3, #20
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b00:	43db      	mvns	r3, r3
 8002b02:	401a      	ands	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0318 	and.w	r3, r3, #24
 8002b0a:	4908      	ldr	r1, [pc, #32]	; (8002b2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b0c:	40d9      	lsrs	r1, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	400b      	ands	r3, r1
 8002b12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b16:	431a      	orrs	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	000fffff 	.word	0x000fffff

08002b30 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 031f 	and.w	r3, r3, #31
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	4b04      	ldr	r3, [pc, #16]	; (8002b6c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6093      	str	r3, [r2, #8]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	5fffffc0 	.word	0x5fffffc0

08002b70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b84:	d101      	bne.n	8002b8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <LL_ADC_EnableInternalRegulator+0x24>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	6fffffc0 	.word	0x6fffffc0

08002bc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bd4:	d101      	bne.n	8002bda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <LL_ADC_Enable+0x24>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	f043 0201 	orr.w	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	7fffffc0 	.word	0x7fffffc0

08002c10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <LL_ADC_IsEnabled+0x18>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <LL_ADC_IsEnabled+0x1a>
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <LL_ADC_REG_StartConversion+0x24>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	f043 0204 	orr.w	r2, r3, #4
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	7fffffc0 	.word	0x7fffffc0

08002c60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d101      	bne.n	8002c78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d101      	bne.n	8002c9e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cac:	b590      	push	{r4, r7, lr}
 8002cae:	b089      	sub	sp, #36	; 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e138      	b.n	8002f38 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7fe fc91 	bl	80015fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff3f 	bl	8002b70 <LL_ADC_IsDeepPowerDownEnabled>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d004      	beq.n	8002d02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff25 	bl	8002b4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ff5a 	bl	8002bc0 <LL_ADC_IsInternalRegulatorEnabled>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d114      	bne.n	8002d3c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff3e 	bl	8002b98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d1c:	4b88      	ldr	r3, [pc, #544]	; (8002f40 <HAL_ADC_Init+0x294>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	099b      	lsrs	r3, r3, #6
 8002d22:	4a88      	ldr	r2, [pc, #544]	; (8002f44 <HAL_ADC_Init+0x298>)
 8002d24:	fba2 2303 	umull	r2, r3, r2, r3
 8002d28:	099b      	lsrs	r3, r3, #6
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d2e:	e002      	b.n	8002d36 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f9      	bne.n	8002d30 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff3d 	bl	8002bc0 <LL_ADC_IsInternalRegulatorEnabled>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10d      	bne.n	8002d68 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f043 0210 	orr.w	r2, r3, #16
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	f043 0201 	orr.w	r2, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff77 	bl	8002c60 <LL_ADC_REG_IsConversionOngoing>
 8002d72:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f040 80d2 	bne.w	8002f26 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f040 80ce 	bne.w	8002f26 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d92:	f043 0202 	orr.w	r2, r3, #2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff36 	bl	8002c10 <LL_ADC_IsEnabled>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d110      	bne.n	8002dcc <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002daa:	4867      	ldr	r0, [pc, #412]	; (8002f48 <HAL_ADC_Init+0x29c>)
 8002dac:	f7ff ff30 	bl	8002c10 <LL_ADC_IsEnabled>
 8002db0:	4604      	mov	r4, r0
 8002db2:	4866      	ldr	r0, [pc, #408]	; (8002f4c <HAL_ADC_Init+0x2a0>)
 8002db4:	f7ff ff2c 	bl	8002c10 <LL_ADC_IsEnabled>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4323      	orrs	r3, r4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4862      	ldr	r0, [pc, #392]	; (8002f50 <HAL_ADC_Init+0x2a4>)
 8002dc8:	f7ff fd88 	bl	80028dc <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7d5b      	ldrb	r3, [r3, #21]
 8002dd0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dd6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002ddc:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7f1b      	ldrb	r3, [r3, #28]
 8002de2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	7f1b      	ldrb	r3, [r3, #28]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d106      	bne.n	8002dfe <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	045b      	lsls	r3, r3, #17
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d009      	beq.n	8002e1a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	4b4c      	ldr	r3, [pc, #304]	; (8002f54 <HAL_ADC_Init+0x2a8>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	69b9      	ldr	r1, [r7, #24]
 8002e2a:	430b      	orrs	r3, r1
 8002e2c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff ff14 	bl	8002c60 <LL_ADC_REG_IsConversionOngoing>
 8002e38:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ff21 	bl	8002c86 <LL_ADC_INJ_IsConversionOngoing>
 8002e44:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d14a      	bne.n	8002ee2 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d147      	bne.n	8002ee2 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7d1b      	ldrb	r3, [r3, #20]
 8002e56:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	4b3c      	ldr	r3, [pc, #240]	; (8002f58 <HAL_ADC_Init+0x2ac>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	69b9      	ldr	r1, [r7, #24]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d11b      	bne.n	8002eb6 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	4b34      	ldr	r3, [pc, #208]	; (8002f5c <HAL_ADC_Init+0x2b0>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e92:	3a01      	subs	r2, #1
 8002e94:	0411      	lsls	r1, r2, #16
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e9a:	4311      	orrs	r1, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ea0:	4311      	orrs	r1, r2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	611a      	str	r2, [r3, #16]
 8002eb4:	e007      	b.n	8002ec6 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fcf3 	bl	80038c8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d10c      	bne.n	8002f04 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	f023 010f 	bic.w	r1, r3, #15
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	1e5a      	subs	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
 8002f02:	e007      	b.n	8002f14 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 020f 	bic.w	r2, r2, #15
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f023 0303 	bic.w	r3, r3, #3
 8002f1c:	f043 0201 	orr.w	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	655a      	str	r2, [r3, #84]	; 0x54
 8002f24:	e007      	b.n	8002f36 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2a:	f043 0210 	orr.w	r2, r3, #16
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f36:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3724      	adds	r7, #36	; 0x24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd90      	pop	{r4, r7, pc}
 8002f40:	24000004 	.word	0x24000004
 8002f44:	053e2d63 	.word	0x053e2d63
 8002f48:	40022000 	.word	0x40022000
 8002f4c:	40022100 	.word	0x40022100
 8002f50:	40022300 	.word	0x40022300
 8002f54:	fff0c003 	.word	0xfff0c003
 8002f58:	ffffbffc 	.word	0xffffbffc
 8002f5c:	fc00f81e 	.word	0xfc00f81e

08002f60 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f6c:	484f      	ldr	r0, [pc, #316]	; (80030ac <HAL_ADC_Start_DMA+0x14c>)
 8002f6e:	f7ff fddf 	bl	8002b30 <LL_ADC_GetMultimode>
 8002f72:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fe71 	bl	8002c60 <LL_ADC_REG_IsConversionOngoing>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f040 808c 	bne.w	800309e <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_Start_DMA+0x34>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e087      	b.n	80030a4 <HAL_ADC_Start_DMA+0x144>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b05      	cmp	r3, #5
 8002fa6:	d002      	beq.n	8002fae <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2b09      	cmp	r3, #9
 8002fac:	d170      	bne.n	8003090 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 fb7a 	bl	80036a8 <ADC_Enable>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d163      	bne.n	8003086 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_ADC_Start_DMA+0x150>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a38      	ldr	r2, [pc, #224]	; (80030b4 <HAL_ADC_Start_DMA+0x154>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d002      	beq.n	8002fde <HAL_ADC_Start_DMA+0x7e>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	e000      	b.n	8002fe0 <HAL_ADC_Start_DMA+0x80>
 8002fde:	4b36      	ldr	r3, [pc, #216]	; (80030b8 <HAL_ADC_Start_DMA+0x158>)
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d002      	beq.n	8002fee <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d006      	beq.n	8003014 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	f023 0206 	bic.w	r2, r3, #6
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	659a      	str	r2, [r3, #88]	; 0x58
 8003012:	e002      	b.n	800301a <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301e:	4a27      	ldr	r2, [pc, #156]	; (80030bc <HAL_ADC_Start_DMA+0x15c>)
 8003020:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003026:	4a26      	ldr	r2, [pc, #152]	; (80030c0 <HAL_ADC_Start_DMA+0x160>)
 8003028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	4a25      	ldr	r2, [pc, #148]	; (80030c4 <HAL_ADC_Start_DMA+0x164>)
 8003030:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	221c      	movs	r2, #28
 8003038:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0210 	orr.w	r2, r2, #16
 8003050:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	4619      	mov	r1, r3
 800305c:	4610      	mov	r0, r2
 800305e:	f7ff fd04 	bl	8002a6a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3340      	adds	r3, #64	; 0x40
 800306c:	4619      	mov	r1, r3
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f001 fd1d 	bl	8004ab0 <HAL_DMA_Start_IT>
 8003076:	4603      	mov	r3, r0
 8003078:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fdda 	bl	8002c38 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003084:	e00d      	b.n	80030a2 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800308e:	e008      	b.n	80030a2 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800309c:	e001      	b.n	80030a2 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800309e:	2302      	movs	r3, #2
 80030a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40022300 	.word	0x40022300
 80030b0:	fffff0fe 	.word	0xfffff0fe
 80030b4:	40022100 	.word	0x40022100
 80030b8:	40022000 	.word	0x40022000
 80030bc:	080037a1 	.word	0x080037a1
 80030c0:	08003879 	.word	0x08003879
 80030c4:	08003895 	.word	0x08003895

080030c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b0a1      	sub	sp, #132	; 0x84
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4a9a      	ldr	r2, [pc, #616]	; (8003360 <HAL_ADC_ConfigChannel+0x284>)
 80030f6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x2a>
 8003102:	2302      	movs	r3, #2
 8003104:	e2bc      	b.n	8003680 <HAL_ADC_ConfigChannel+0x5a4>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fda4 	bl	8002c60 <LL_ADC_REG_IsConversionOngoing>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	f040 82a1 	bne.w	8003662 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003128:	2b00      	cmp	r3, #0
 800312a:	d108      	bne.n	800313e <HAL_ADC_ConfigChannel+0x62>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0e9b      	lsrs	r3, r3, #26
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	2201      	movs	r2, #1
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	e016      	b.n	800316c <HAL_ADC_ConfigChannel+0x90>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800314c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800314e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003156:	2320      	movs	r3, #32
 8003158:	e003      	b.n	8003162 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800315a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	2201      	movs	r2, #1
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	69d1      	ldr	r1, [r2, #28]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	430b      	orrs	r3, r1
 8003178:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	f7ff fc43 	bl	8002a12 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fd65 	bl	8002c60 <LL_ADC_REG_IsConversionOngoing>
 8003196:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fd72 	bl	8002c86 <LL_ADC_INJ_IsConversionOngoing>
 80031a2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f040 80a0 	bne.w	80032ec <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f040 809c 	bne.w	80032ec <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6819      	ldr	r1, [r3, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	461a      	mov	r2, r3
 80031c2:	f7ff fc65 	bl	8002a90 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10b      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x110>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	e00a      	b.n	8003202 <HAL_ADC_ConfigChannel+0x126>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	695a      	ldr	r2, [r3, #20]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	089b      	lsrs	r3, r3, #2
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b04      	cmp	r3, #4
 800320a:	d027      	beq.n	800325c <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	6919      	ldr	r1, [r3, #16]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800321a:	f7ff fb93 	bl	8002944 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6919      	ldr	r1, [r3, #16]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	7e5b      	ldrb	r3, [r3, #25]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d102      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x158>
 800322e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003232:	e000      	b.n	8003236 <HAL_ADC_ConfigChannel+0x15a>
 8003234:	2300      	movs	r3, #0
 8003236:	461a      	mov	r2, r3
 8003238:	f7ff fbbd 	bl	80029b6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	6919      	ldr	r1, [r3, #16]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	7e1b      	ldrb	r3, [r3, #24]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d102      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x176>
 800324c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003250:	e000      	b.n	8003254 <HAL_ADC_ConfigChannel+0x178>
 8003252:	2300      	movs	r3, #0
 8003254:	461a      	mov	r2, r3
 8003256:	f7ff fb95 	bl	8002984 <LL_ADC_SetDataRightShift>
 800325a:	e047      	b.n	80032ec <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003262:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	069b      	lsls	r3, r3, #26
 800326c:	429a      	cmp	r2, r3
 800326e:	d107      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800327e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003286:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	069b      	lsls	r3, r3, #26
 8003290:	429a      	cmp	r2, r3
 8003292:	d107      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032a2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	069b      	lsls	r3, r3, #26
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d107      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032c6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	069b      	lsls	r3, r3, #26
 80032d8:	429a      	cmp	r2, r3
 80032da:	d107      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032ea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff fc8d 	bl	8002c10 <LL_ADC_IsEnabled>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f040 81bb 	bne.w	8003674 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6819      	ldr	r1, [r3, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	461a      	mov	r2, r3
 800330c:	f7ff fbec 	bl	8002ae8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a12      	ldr	r2, [pc, #72]	; (8003360 <HAL_ADC_ConfigChannel+0x284>)
 8003316:	4293      	cmp	r3, r2
 8003318:	f040 8130 	bne.w	800357c <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10b      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x268>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0e9b      	lsrs	r3, r3, #26
 8003332:	3301      	adds	r3, #1
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2b09      	cmp	r3, #9
 800333a:	bf94      	ite	ls
 800333c:	2301      	movls	r3, #1
 800333e:	2300      	movhi	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e01b      	b.n	800337c <HAL_ADC_ConfigChannel+0x2a0>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800334c:	fa93 f3a3 	rbit	r3, r3
 8003350:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003354:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d103      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e005      	b.n	800336c <HAL_ADC_ConfigChannel+0x290>
 8003360:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8003364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	3301      	adds	r3, #1
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	2b09      	cmp	r3, #9
 8003374:	bf94      	ite	ls
 8003376:	2301      	movls	r3, #1
 8003378:	2300      	movhi	r3, #0
 800337a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800337c:	2b00      	cmp	r3, #0
 800337e:	d079      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003388:	2b00      	cmp	r3, #0
 800338a:	d107      	bne.n	800339c <HAL_ADC_ConfigChannel+0x2c0>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	0e9b      	lsrs	r3, r3, #26
 8003392:	3301      	adds	r3, #1
 8003394:	069b      	lsls	r3, r3, #26
 8003396:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800339a:	e015      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x2ec>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80033aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80033ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80033b4:	2320      	movs	r3, #32
 80033b6:	e003      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80033b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	3301      	adds	r3, #1
 80033c2:	069b      	lsls	r3, r3, #26
 80033c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x30c>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	0e9b      	lsrs	r3, r3, #26
 80033da:	3301      	adds	r3, #1
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	2101      	movs	r1, #1
 80033e2:	fa01 f303 	lsl.w	r3, r1, r3
 80033e6:	e017      	b.n	8003418 <HAL_ADC_ConfigChannel+0x33c>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80033f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80033fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8003400:	2320      	movs	r3, #32
 8003402:	e003      	b.n	800340c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8003404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	3301      	adds	r3, #1
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	2101      	movs	r1, #1
 8003414:	fa01 f303 	lsl.w	r3, r1, r3
 8003418:	ea42 0103 	orr.w	r1, r2, r3
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <HAL_ADC_ConfigChannel+0x362>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	0e9b      	lsrs	r3, r3, #26
 800342e:	3301      	adds	r3, #1
 8003430:	f003 021f 	and.w	r2, r3, #31
 8003434:	4613      	mov	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	051b      	lsls	r3, r3, #20
 800343c:	e018      	b.n	8003470 <HAL_ADC_ConfigChannel+0x394>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003456:	2320      	movs	r3, #32
 8003458:	e003      	b.n	8003462 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345c:	fab3 f383 	clz	r3, r3
 8003460:	b2db      	uxtb	r3, r3
 8003462:	3301      	adds	r3, #1
 8003464:	f003 021f 	and.w	r2, r3, #31
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003470:	430b      	orrs	r3, r1
 8003472:	e07e      	b.n	8003572 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800347c:	2b00      	cmp	r3, #0
 800347e:	d107      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x3b4>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	0e9b      	lsrs	r3, r3, #26
 8003486:	3301      	adds	r3, #1
 8003488:	069b      	lsls	r3, r3, #26
 800348a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800348e:	e015      	b.n	80034bc <HAL_ADC_ConfigChannel+0x3e0>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80034a8:	2320      	movs	r3, #32
 80034aa:	e003      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	3301      	adds	r3, #1
 80034b6:	069b      	lsls	r3, r3, #26
 80034b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d109      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x400>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	0e9b      	lsrs	r3, r3, #26
 80034ce:	3301      	adds	r3, #1
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	2101      	movs	r1, #1
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	e017      	b.n	800350c <HAL_ADC_ConfigChannel+0x430>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	61bb      	str	r3, [r7, #24]
  return result;
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80034f4:	2320      	movs	r3, #32
 80034f6:	e003      	b.n	8003500 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	fab3 f383 	clz	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	3301      	adds	r3, #1
 8003502:	f003 031f 	and.w	r3, r3, #31
 8003506:	2101      	movs	r1, #1
 8003508:	fa01 f303 	lsl.w	r3, r1, r3
 800350c:	ea42 0103 	orr.w	r1, r2, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10d      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x45c>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	0e9b      	lsrs	r3, r3, #26
 8003522:	3301      	adds	r3, #1
 8003524:	f003 021f 	and.w	r2, r3, #31
 8003528:	4613      	mov	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	4413      	add	r3, r2
 800352e:	3b1e      	subs	r3, #30
 8003530:	051b      	lsls	r3, r3, #20
 8003532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003536:	e01b      	b.n	8003570 <HAL_ADC_ConfigChannel+0x494>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	60fb      	str	r3, [r7, #12]
  return result;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8003550:	2320      	movs	r3, #32
 8003552:	e003      	b.n	800355c <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	3301      	adds	r3, #1
 800355e:	f003 021f 	and.w	r2, r3, #31
 8003562:	4613      	mov	r3, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4413      	add	r3, r2
 8003568:	3b1e      	subs	r3, #30
 800356a:	051b      	lsls	r3, r3, #20
 800356c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003570:	430b      	orrs	r3, r1
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	6892      	ldr	r2, [r2, #8]
 8003576:	4619      	mov	r1, r3
 8003578:	f7ff fa8a 	bl	8002a90 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	da77      	bge.n	8003674 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003584:	4840      	ldr	r0, [pc, #256]	; (8003688 <HAL_ADC_ConfigChannel+0x5ac>)
 8003586:	f7ff f9cf 	bl	8002928 <LL_ADC_GetCommonPathInternalCh>
 800358a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800358c:	483f      	ldr	r0, [pc, #252]	; (800368c <HAL_ADC_ConfigChannel+0x5b0>)
 800358e:	f7ff fb3f 	bl	8002c10 <LL_ADC_IsEnabled>
 8003592:	4604      	mov	r4, r0
 8003594:	483e      	ldr	r0, [pc, #248]	; (8003690 <HAL_ADC_ConfigChannel+0x5b4>)
 8003596:	f7ff fb3b 	bl	8002c10 <LL_ADC_IsEnabled>
 800359a:	4603      	mov	r3, r0
 800359c:	4323      	orrs	r3, r4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d155      	bne.n	800364e <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a3b      	ldr	r2, [pc, #236]	; (8003694 <HAL_ADC_ConfigChannel+0x5b8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d122      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x516>
 80035ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d11d      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a35      	ldr	r2, [pc, #212]	; (8003690 <HAL_ADC_ConfigChannel+0x5b4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d159      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80035c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035c6:	4619      	mov	r1, r3
 80035c8:	482f      	ldr	r0, [pc, #188]	; (8003688 <HAL_ADC_ConfigChannel+0x5ac>)
 80035ca:	f7ff f99a 	bl	8002902 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035ce:	4b32      	ldr	r3, [pc, #200]	; (8003698 <HAL_ADC_ConfigChannel+0x5bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	099b      	lsrs	r3, r3, #6
 80035d4:	4a31      	ldr	r2, [pc, #196]	; (800369c <HAL_ADC_ConfigChannel+0x5c0>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	099b      	lsrs	r3, r3, #6
 80035dc:	3301      	adds	r3, #1
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80035e2:	e002      	b.n	80035ea <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f9      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035f0:	e040      	b.n	8003674 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a2a      	ldr	r2, [pc, #168]	; (80036a0 <HAL_ADC_ConfigChannel+0x5c4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d111      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x544>
 80035fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10c      	bne.n	8003620 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a21      	ldr	r2, [pc, #132]	; (8003690 <HAL_ADC_ConfigChannel+0x5b4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d131      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003616:	4619      	mov	r1, r3
 8003618:	481b      	ldr	r0, [pc, #108]	; (8003688 <HAL_ADC_ConfigChannel+0x5ac>)
 800361a:	f7ff f972 	bl	8002902 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800361e:	e029      	b.n	8003674 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <HAL_ADC_ConfigChannel+0x5c8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d124      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x598>
 800362a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d11f      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a15      	ldr	r2, [pc, #84]	; (8003690 <HAL_ADC_ConfigChannel+0x5b4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d11a      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800363e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003640:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003644:	4619      	mov	r1, r3
 8003646:	4810      	ldr	r0, [pc, #64]	; (8003688 <HAL_ADC_ConfigChannel+0x5ac>)
 8003648:	f7ff f95b 	bl	8002902 <LL_ADC_SetCommonPathInternalCh>
 800364c:	e012      	b.n	8003674 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	f043 0220 	orr.w	r2, r3, #32
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003660:	e008      	b.n	8003674 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003666:	f043 0220 	orr.w	r2, r3, #32
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800367c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003680:	4618      	mov	r0, r3
 8003682:	3784      	adds	r7, #132	; 0x84
 8003684:	46bd      	mov	sp, r7
 8003686:	bd90      	pop	{r4, r7, pc}
 8003688:	40022300 	.word	0x40022300
 800368c:	40022000 	.word	0x40022000
 8003690:	40022100 	.word	0x40022100
 8003694:	cb840000 	.word	0xcb840000
 8003698:	24000004 	.word	0x24000004
 800369c:	053e2d63 	.word	0x053e2d63
 80036a0:	bac04000 	.word	0xbac04000
 80036a4:	cfb80000 	.word	0xcfb80000

080036a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff faab 	bl	8002c10 <LL_ADC_IsEnabled>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d161      	bne.n	8003784 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	4b32      	ldr	r3, [pc, #200]	; (8003790 <ADC_Enable+0xe8>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d2:	f043 0210 	orr.w	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e04d      	b.n	8003786 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fa7a 	bl	8002be8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036f4:	f7ff f8c2 	bl	800287c <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036fa:	4826      	ldr	r0, [pc, #152]	; (8003794 <ADC_Enable+0xec>)
 80036fc:	f7ff fa18 	bl	8002b30 <LL_ADC_GetMultimode>
 8003700:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a24      	ldr	r2, [pc, #144]	; (8003798 <ADC_Enable+0xf0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d002      	beq.n	8003712 <ADC_Enable+0x6a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	e000      	b.n	8003714 <ADC_Enable+0x6c>
 8003712:	4b22      	ldr	r3, [pc, #136]	; (800379c <ADC_Enable+0xf4>)
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	4293      	cmp	r3, r2
 800371a:	d02c      	beq.n	8003776 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d130      	bne.n	8003784 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003722:	e028      	b.n	8003776 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fa71 	bl	8002c10 <LL_ADC_IsEnabled>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d104      	bne.n	800373e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff fa55 	bl	8002be8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800373e:	f7ff f89d 	bl	800287c <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d914      	bls.n	8003776 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b01      	cmp	r3, #1
 8003758:	d00d      	beq.n	8003776 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	f043 0210 	orr.w	r2, r3, #16
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376a:	f043 0201 	orr.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e007      	b.n	8003786 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d1cf      	bne.n	8003724 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	8000003f 	.word	0x8000003f
 8003794:	40022300 	.word	0x40022300
 8003798:	40022100 	.word	0x40022100
 800379c:	40022000 	.word	0x40022000

080037a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d14b      	bne.n	8003852 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d021      	beq.n	8003818 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff f907 	bl	80029ec <LL_ADC_REG_IsTriggerSourceSWStart>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d032      	beq.n	800384a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d12b      	bne.n	800384a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d11f      	bne.n	800384a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	f043 0201 	orr.w	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	655a      	str	r2, [r3, #84]	; 0x54
 8003816:	e018      	b.n	800384a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d111      	bne.n	800384a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d105      	bne.n	800384a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003842:	f043 0201 	orr.w	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f7fe f9e0 	bl	8001c10 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003850:	e00e      	b.n	8003870 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	f003 0310 	and.w	r3, r3, #16
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f7ff fc32 	bl	80030c8 <HAL_ADC_ErrorCallback>
}
 8003864:	e004      	b.n	8003870 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
}
 8003870:	bf00      	nop
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003884:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f7fe f99e 	bl	8001bc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	f043 0204 	orr.w	r2, r3, #4
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f7ff fc04 	bl	80030c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80038d0:	4b5f      	ldr	r3, [pc, #380]	; (8003a50 <ADC_ConfigureBoostMode+0x188>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01c      	beq.n	8003916 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80038dc:	f004 f846 	bl	800796c <HAL_RCC_GetHCLKFreq>
 80038e0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038ea:	d010      	beq.n	800390e <ADC_ConfigureBoostMode+0x46>
 80038ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038f0:	d871      	bhi.n	80039d6 <ADC_ConfigureBoostMode+0x10e>
 80038f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f6:	d002      	beq.n	80038fe <ADC_ConfigureBoostMode+0x36>
 80038f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038fc:	d16b      	bne.n	80039d6 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	0c1b      	lsrs	r3, r3, #16
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	fbb2 f3f3 	udiv	r3, r2, r3
 800390a:	60fb      	str	r3, [r7, #12]
        break;
 800390c:	e066      	b.n	80039dc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	60fb      	str	r3, [r7, #12]
        break;
 8003914:	e062      	b.n	80039dc <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003916:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800391a:	f004 ff8f 	bl	800883c <HAL_RCCEx_GetPeriphCLKFreq>
 800391e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003928:	d051      	beq.n	80039ce <ADC_ConfigureBoostMode+0x106>
 800392a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800392e:	d854      	bhi.n	80039da <ADC_ConfigureBoostMode+0x112>
 8003930:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003934:	d047      	beq.n	80039c6 <ADC_ConfigureBoostMode+0xfe>
 8003936:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800393a:	d84e      	bhi.n	80039da <ADC_ConfigureBoostMode+0x112>
 800393c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003940:	d03d      	beq.n	80039be <ADC_ConfigureBoostMode+0xf6>
 8003942:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003946:	d848      	bhi.n	80039da <ADC_ConfigureBoostMode+0x112>
 8003948:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800394c:	d033      	beq.n	80039b6 <ADC_ConfigureBoostMode+0xee>
 800394e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003952:	d842      	bhi.n	80039da <ADC_ConfigureBoostMode+0x112>
 8003954:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003958:	d029      	beq.n	80039ae <ADC_ConfigureBoostMode+0xe6>
 800395a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800395e:	d83c      	bhi.n	80039da <ADC_ConfigureBoostMode+0x112>
 8003960:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003964:	d01a      	beq.n	800399c <ADC_ConfigureBoostMode+0xd4>
 8003966:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800396a:	d836      	bhi.n	80039da <ADC_ConfigureBoostMode+0x112>
 800396c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003970:	d014      	beq.n	800399c <ADC_ConfigureBoostMode+0xd4>
 8003972:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003976:	d830      	bhi.n	80039da <ADC_ConfigureBoostMode+0x112>
 8003978:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800397c:	d00e      	beq.n	800399c <ADC_ConfigureBoostMode+0xd4>
 800397e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003982:	d82a      	bhi.n	80039da <ADC_ConfigureBoostMode+0x112>
 8003984:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003988:	d008      	beq.n	800399c <ADC_ConfigureBoostMode+0xd4>
 800398a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800398e:	d824      	bhi.n	80039da <ADC_ConfigureBoostMode+0x112>
 8003990:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003994:	d002      	beq.n	800399c <ADC_ConfigureBoostMode+0xd4>
 8003996:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800399a:	d11e      	bne.n	80039da <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	0c9b      	lsrs	r3, r3, #18
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	60fb      	str	r3, [r7, #12]
        break;
 80039ac:	e016      	b.n	80039dc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	091b      	lsrs	r3, r3, #4
 80039b2:	60fb      	str	r3, [r7, #12]
        break;
 80039b4:	e012      	b.n	80039dc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	095b      	lsrs	r3, r3, #5
 80039ba:	60fb      	str	r3, [r7, #12]
        break;
 80039bc:	e00e      	b.n	80039dc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	099b      	lsrs	r3, r3, #6
 80039c2:	60fb      	str	r3, [r7, #12]
        break;
 80039c4:	e00a      	b.n	80039dc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	09db      	lsrs	r3, r3, #7
 80039ca:	60fb      	str	r3, [r7, #12]
        break;
 80039cc:	e006      	b.n	80039dc <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	60fb      	str	r3, [r7, #12]
        break;
 80039d4:	e002      	b.n	80039dc <ADC_ConfigureBoostMode+0x114>
        break;
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 80039da:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4a1b      	ldr	r2, [pc, #108]	; (8003a54 <ADC_ConfigureBoostMode+0x18c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d808      	bhi.n	80039fc <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039f8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80039fa:	e025      	b.n	8003a48 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a16      	ldr	r2, [pc, #88]	; (8003a58 <ADC_ConfigureBoostMode+0x190>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d80a      	bhi.n	8003a1a <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a16:	609a      	str	r2, [r3, #8]
}
 8003a18:	e016      	b.n	8003a48 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4a0f      	ldr	r2, [pc, #60]	; (8003a5c <ADC_ConfigureBoostMode+0x194>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d80a      	bhi.n	8003a38 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a34:	609a      	str	r2, [r3, #8]
}
 8003a36:	e007      	b.n	8003a48 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003a46:	609a      	str	r2, [r3, #8]
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40022300 	.word	0x40022300
 8003a54:	005f5e10 	.word	0x005f5e10
 8003a58:	00bebc20 	.word	0x00bebc20
 8003a5c:	017d7840 	.word	0x017d7840

08003a60 <LL_ADC_IsEnabled>:
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <LL_ADC_IsEnabled+0x18>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <LL_ADC_IsEnabled+0x1a>
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <LL_ADC_REG_IsConversionOngoing>:
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d101      	bne.n	8003a9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003aac:	b590      	push	{r4, r7, lr}
 8003aae:	b09f      	sub	sp, #124	; 0x7c
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e080      	b.n	8003bcc <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a3d      	ldr	r2, [pc, #244]	; (8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d102      	bne.n	8003aea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ae4:	4b3c      	ldr	r3, [pc, #240]	; (8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	e001      	b.n	8003aee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10b      	bne.n	8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e05f      	b.n	8003bcc <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7ff ffb9 	bl	8003a86 <LL_ADC_REG_IsConversionOngoing>
 8003b14:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff ffb3 	bl	8003a86 <LL_ADC_REG_IsConversionOngoing>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d141      	bne.n	8003baa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d13e      	bne.n	8003baa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b2c:	4b2b      	ldr	r3, [pc, #172]	; (8003bdc <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003b2e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d020      	beq.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b48:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b4a:	4822      	ldr	r0, [pc, #136]	; (8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003b4c:	f7ff ff88 	bl	8003a60 <LL_ADC_IsEnabled>
 8003b50:	4604      	mov	r4, r0
 8003b52:	4821      	ldr	r0, [pc, #132]	; (8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003b54:	f7ff ff84 	bl	8003a60 <LL_ADC_IsEnabled>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	4323      	orrs	r3, r4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d12e      	bne.n	8003bbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	6811      	ldr	r1, [r2, #0]
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	6892      	ldr	r2, [r2, #8]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	431a      	orrs	r2, r3
 8003b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b76:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b78:	e021      	b.n	8003bbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b86:	4813      	ldr	r0, [pc, #76]	; (8003bd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003b88:	f7ff ff6a 	bl	8003a60 <LL_ADC_IsEnabled>
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	4812      	ldr	r0, [pc, #72]	; (8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003b90:	f7ff ff66 	bl	8003a60 <LL_ADC_IsEnabled>
 8003b94:	4603      	mov	r3, r0
 8003b96:	4323      	orrs	r3, r4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d110      	bne.n	8003bbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ba6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ba8:	e009      	b.n	8003bbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bae:	f043 0220 	orr.w	r2, r3, #32
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003bbc:	e000      	b.n	8003bc0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bbe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003bc8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	377c      	adds	r7, #124	; 0x7c
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd90      	pop	{r4, r7, pc}
 8003bd4:	40022000 	.word	0x40022000
 8003bd8:	40022100 	.word	0x40022100
 8003bdc:	40022300 	.word	0x40022300
 8003be0:	fffff0e0 	.word	0xfffff0e0

08003be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <__NVIC_SetPriorityGrouping+0x40>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c00:	4013      	ands	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c0c:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <__NVIC_SetPriorityGrouping+0x44>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c12:	4a04      	ldr	r2, [pc, #16]	; (8003c24 <__NVIC_SetPriorityGrouping+0x40>)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	60d3      	str	r3, [r2, #12]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000ed00 	.word	0xe000ed00
 8003c28:	05fa0000 	.word	0x05fa0000

08003c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c30:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <__NVIC_GetPriorityGrouping+0x18>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	0a1b      	lsrs	r3, r3, #8
 8003c36:	f003 0307 	and.w	r3, r3, #7
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000ed00 	.word	0xe000ed00

08003c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	db0b      	blt.n	8003c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	f003 021f 	and.w	r2, r3, #31
 8003c60:	4907      	ldr	r1, [pc, #28]	; (8003c80 <__NVIC_EnableIRQ+0x38>)
 8003c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	2001      	movs	r0, #1
 8003c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	e000e100 	.word	0xe000e100

08003c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	6039      	str	r1, [r7, #0]
 8003c8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	db0a      	blt.n	8003cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	490c      	ldr	r1, [pc, #48]	; (8003cd0 <__NVIC_SetPriority+0x4c>)
 8003c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ca2:	0112      	lsls	r2, r2, #4
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cac:	e00a      	b.n	8003cc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	4908      	ldr	r1, [pc, #32]	; (8003cd4 <__NVIC_SetPriority+0x50>)
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	3b04      	subs	r3, #4
 8003cbc:	0112      	lsls	r2, r2, #4
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	761a      	strb	r2, [r3, #24]
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	e000e100 	.word	0xe000e100
 8003cd4:	e000ed00 	.word	0xe000ed00

08003cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b089      	sub	sp, #36	; 0x24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f1c3 0307 	rsb	r3, r3, #7
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	bf28      	it	cs
 8003cf6:	2304      	movcs	r3, #4
 8003cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	2b06      	cmp	r3, #6
 8003d00:	d902      	bls.n	8003d08 <NVIC_EncodePriority+0x30>
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3b03      	subs	r3, #3
 8003d06:	e000      	b.n	8003d0a <NVIC_EncodePriority+0x32>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43da      	mvns	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	401a      	ands	r2, r3
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d20:	f04f 31ff 	mov.w	r1, #4294967295
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2a:	43d9      	mvns	r1, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d30:	4313      	orrs	r3, r2
         );
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3724      	adds	r7, #36	; 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d50:	d301      	bcc.n	8003d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d52:	2301      	movs	r3, #1
 8003d54:	e00f      	b.n	8003d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d56:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <SysTick_Config+0x40>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d5e:	210f      	movs	r1, #15
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
 8003d64:	f7ff ff8e 	bl	8003c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <SysTick_Config+0x40>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d6e:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <SysTick_Config+0x40>)
 8003d70:	2207      	movs	r2, #7
 8003d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	e000e010 	.word	0xe000e010

08003d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ff29 	bl	8003be4 <__NVIC_SetPriorityGrouping>
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b086      	sub	sp, #24
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	4603      	mov	r3, r0
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003da8:	f7ff ff40 	bl	8003c2c <__NVIC_GetPriorityGrouping>
 8003dac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	6978      	ldr	r0, [r7, #20]
 8003db4:	f7ff ff90 	bl	8003cd8 <NVIC_EncodePriority>
 8003db8:	4602      	mov	r2, r0
 8003dba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ff5f 	bl	8003c84 <__NVIC_SetPriority>
}
 8003dc6:	bf00      	nop
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ff33 	bl	8003c48 <__NVIC_EnableIRQ>
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff ffa4 	bl	8003d40 <SysTick_Config>
 8003df8:	4603      	mov	r3, r0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e014      	b.n	8003e3e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	791b      	ldrb	r3, [r3, #4]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d105      	bne.n	8003e2a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7fd fd4d 	bl	80018c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	795b      	ldrb	r3, [r3, #5]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_DAC_Start_DMA+0x1e>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e0ab      	b.n	8003fbe <HAL_DAC_Start_DMA+0x176>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d12f      	bne.n	8003ed8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a52      	ldr	r2, [pc, #328]	; (8003fc8 <HAL_DAC_Start_DMA+0x180>)
 8003e7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a51      	ldr	r2, [pc, #324]	; (8003fcc <HAL_DAC_Start_DMA+0x184>)
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a50      	ldr	r2, [pc, #320]	; (8003fd0 <HAL_DAC_Start_DMA+0x188>)
 8003e8e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e9e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d013      	beq.n	8003ece <HAL_DAC_Start_DMA+0x86>
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d845      	bhi.n	8003f38 <HAL_DAC_Start_DMA+0xf0>
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_DAC_Start_DMA+0x72>
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d005      	beq.n	8003ec4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003eb8:	e03e      	b.n	8003f38 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	613b      	str	r3, [r7, #16]
        break;
 8003ec2:	e03c      	b.n	8003f3e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	613b      	str	r3, [r7, #16]
        break;
 8003ecc:	e037      	b.n	8003f3e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3310      	adds	r3, #16
 8003ed4:	613b      	str	r3, [r7, #16]
        break;
 8003ed6:	e032      	b.n	8003f3e <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4a3d      	ldr	r2, [pc, #244]	; (8003fd4 <HAL_DAC_Start_DMA+0x18c>)
 8003ede:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4a3c      	ldr	r2, [pc, #240]	; (8003fd8 <HAL_DAC_Start_DMA+0x190>)
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	4a3b      	ldr	r2, [pc, #236]	; (8003fdc <HAL_DAC_Start_DMA+0x194>)
 8003eee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003efe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d013      	beq.n	8003f2e <HAL_DAC_Start_DMA+0xe6>
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d817      	bhi.n	8003f3c <HAL_DAC_Start_DMA+0xf4>
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_DAC_Start_DMA+0xd2>
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d005      	beq.n	8003f24 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003f18:	e010      	b.n	8003f3c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	613b      	str	r3, [r7, #16]
        break;
 8003f22:	e00c      	b.n	8003f3e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3318      	adds	r3, #24
 8003f2a:	613b      	str	r3, [r7, #16]
        break;
 8003f2c:	e007      	b.n	8003f3e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	331c      	adds	r3, #28
 8003f34:	613b      	str	r3, [r7, #16]
        break;
 8003f36:	e002      	b.n	8003f3e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003f38:	bf00      	nop
 8003f3a:	e000      	b.n	8003f3e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003f3c:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d111      	bne.n	8003f68 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f52:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6898      	ldr	r0, [r3, #8]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	f000 fda7 	bl	8004ab0 <HAL_DMA_Start_IT>
 8003f62:	4603      	mov	r3, r0
 8003f64:	75fb      	strb	r3, [r7, #23]
 8003f66:	e010      	b.n	8003f8a <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003f76:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68d8      	ldr	r0, [r3, #12]
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	f000 fd95 	bl	8004ab0 <HAL_DMA_Start_IT>
 8003f86:	4603      	mov	r3, r0
 8003f88:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003f90:	7dfb      	ldrb	r3, [r7, #23]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10c      	bne.n	8003fb0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6819      	ldr	r1, [r3, #0]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e005      	b.n	8003fbc <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	f043 0204 	orr.w	r2, r3, #4
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	0800427d 	.word	0x0800427d
 8003fcc:	0800429f 	.word	0x0800429f
 8003fd0:	080042bb 	.word	0x080042bb
 8003fd4:	08004325 	.word	0x08004325
 8003fd8:	08004347 	.word	0x08004347
 8003fdc:	08004363 	.word	0x08004363

08003fe0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	795b      	ldrb	r3, [r3, #5]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_DAC_ConfigChannel+0x18>
 8004030:	2302      	movs	r3, #2
 8004032:	e11d      	b.n	8004270 <HAL_DAC_ConfigChannel+0x254>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2202      	movs	r2, #2
 800403e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b04      	cmp	r3, #4
 8004046:	d174      	bne.n	8004132 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004048:	f7fe fc18 	bl	800287c <HAL_GetTick>
 800404c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d134      	bne.n	80040be <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004054:	e011      	b.n	800407a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004056:	f7fe fc11 	bl	800287c <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b01      	cmp	r3, #1
 8004062:	d90a      	bls.n	800407a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	f043 0208 	orr.w	r2, r3, #8
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2203      	movs	r2, #3
 8004074:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e0fa      	b.n	8004270 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004080:	4b7d      	ldr	r3, [pc, #500]	; (8004278 <HAL_DAC_ConfigChannel+0x25c>)
 8004082:	4013      	ands	r3, r2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e6      	bne.n	8004056 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004088:	2001      	movs	r0, #1
 800408a:	f7fe fc03 	bl	8002894 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	6992      	ldr	r2, [r2, #24]
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
 8004098:	e01e      	b.n	80040d8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800409a:	f7fe fbef 	bl	800287c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d90a      	bls.n	80040be <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f043 0208 	orr.w	r2, r3, #8
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2203      	movs	r2, #3
 80040b8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e0d8      	b.n	8004270 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	dbe8      	blt.n	800409a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80040c8:	2001      	movs	r0, #1
 80040ca:	f7fe fbe3 	bl	8002894 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	6992      	ldr	r2, [r2, #24]
 80040d6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	ea02 0103 	and.w	r1, r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	69da      	ldr	r2, [r3, #28]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	409a      	lsls	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	21ff      	movs	r1, #255	; 0xff
 8004114:	fa01 f303 	lsl.w	r3, r1, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	ea02 0103 	and.w	r1, r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6a1a      	ldr	r2, [r3, #32]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	409a      	lsls	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d11d      	bne.n	8004176 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	221f      	movs	r2, #31
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4013      	ands	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2207      	movs	r2, #7
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4013      	ands	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d102      	bne.n	80041a0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	e00f      	b.n	80041c0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d102      	bne.n	80041ae <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80041a8:	2301      	movs	r3, #1
 80041aa:	61fb      	str	r3, [r7, #28]
 80041ac:	e008      	b.n	80041c0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d102      	bne.n	80041bc <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80041b6:	2301      	movs	r3, #1
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	e001      	b.n	80041c0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80041bc:	2300      	movs	r3, #0
 80041be:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f003 0310 	and.w	r3, r3, #16
 80041f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	43da      	mvns	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	400a      	ands	r2, r1
 8004206:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	f640 72fe 	movw	r2, #4094	; 0xffe
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4013      	ands	r3, r2
 8004224:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6819      	ldr	r1, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	22c0      	movs	r2, #192	; 0xc0
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43da      	mvns	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	400a      	ands	r2, r1
 8004260:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3720      	adds	r7, #32
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20008000 	.word	0x20008000

0800427c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f7ff fea8 	bl	8003fe0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	711a      	strb	r2, [r3, #4]
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff fea1 	bl	8003ff4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	f043 0204 	orr.w	r2, r3, #4
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f7ff fe97 	bl	8004008 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	711a      	strb	r2, [r3, #4]
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f7ff ffd8 	bl	80042e8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	711a      	strb	r2, [r3, #4]
}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7ff ffd1 	bl	80042fc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800435a:	bf00      	nop
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b084      	sub	sp, #16
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f043 0204 	orr.w	r2, r3, #4
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f7ff ffc7 	bl	8004310 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	711a      	strb	r2, [r3, #4]
}
 8004388:	bf00      	nop
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004398:	f7fe fa70 	bl	800287c <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e37f      	b.n	8004aa8 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a66      	ldr	r2, [pc, #408]	; (8004548 <HAL_DMA_Init+0x1b8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d04a      	beq.n	8004448 <HAL_DMA_Init+0xb8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a65      	ldr	r2, [pc, #404]	; (800454c <HAL_DMA_Init+0x1bc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d045      	beq.n	8004448 <HAL_DMA_Init+0xb8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a63      	ldr	r2, [pc, #396]	; (8004550 <HAL_DMA_Init+0x1c0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d040      	beq.n	8004448 <HAL_DMA_Init+0xb8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a62      	ldr	r2, [pc, #392]	; (8004554 <HAL_DMA_Init+0x1c4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d03b      	beq.n	8004448 <HAL_DMA_Init+0xb8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a60      	ldr	r2, [pc, #384]	; (8004558 <HAL_DMA_Init+0x1c8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d036      	beq.n	8004448 <HAL_DMA_Init+0xb8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a5f      	ldr	r2, [pc, #380]	; (800455c <HAL_DMA_Init+0x1cc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d031      	beq.n	8004448 <HAL_DMA_Init+0xb8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a5d      	ldr	r2, [pc, #372]	; (8004560 <HAL_DMA_Init+0x1d0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02c      	beq.n	8004448 <HAL_DMA_Init+0xb8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a5c      	ldr	r2, [pc, #368]	; (8004564 <HAL_DMA_Init+0x1d4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d027      	beq.n	8004448 <HAL_DMA_Init+0xb8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a5a      	ldr	r2, [pc, #360]	; (8004568 <HAL_DMA_Init+0x1d8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d022      	beq.n	8004448 <HAL_DMA_Init+0xb8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a59      	ldr	r2, [pc, #356]	; (800456c <HAL_DMA_Init+0x1dc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d01d      	beq.n	8004448 <HAL_DMA_Init+0xb8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a57      	ldr	r2, [pc, #348]	; (8004570 <HAL_DMA_Init+0x1e0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d018      	beq.n	8004448 <HAL_DMA_Init+0xb8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a56      	ldr	r2, [pc, #344]	; (8004574 <HAL_DMA_Init+0x1e4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <HAL_DMA_Init+0xb8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a54      	ldr	r2, [pc, #336]	; (8004578 <HAL_DMA_Init+0x1e8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <HAL_DMA_Init+0xb8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a53      	ldr	r2, [pc, #332]	; (800457c <HAL_DMA_Init+0x1ec>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <HAL_DMA_Init+0xb8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a51      	ldr	r2, [pc, #324]	; (8004580 <HAL_DMA_Init+0x1f0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_DMA_Init+0xb8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a50      	ldr	r2, [pc, #320]	; (8004584 <HAL_DMA_Init+0x1f4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <HAL_DMA_Init+0xbc>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <HAL_DMA_Init+0xbe>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 813c 	beq.w	80046cc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a37      	ldr	r2, [pc, #220]	; (8004548 <HAL_DMA_Init+0x1b8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d04a      	beq.n	8004504 <HAL_DMA_Init+0x174>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a36      	ldr	r2, [pc, #216]	; (800454c <HAL_DMA_Init+0x1bc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d045      	beq.n	8004504 <HAL_DMA_Init+0x174>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a34      	ldr	r2, [pc, #208]	; (8004550 <HAL_DMA_Init+0x1c0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d040      	beq.n	8004504 <HAL_DMA_Init+0x174>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a33      	ldr	r2, [pc, #204]	; (8004554 <HAL_DMA_Init+0x1c4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d03b      	beq.n	8004504 <HAL_DMA_Init+0x174>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a31      	ldr	r2, [pc, #196]	; (8004558 <HAL_DMA_Init+0x1c8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d036      	beq.n	8004504 <HAL_DMA_Init+0x174>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a30      	ldr	r2, [pc, #192]	; (800455c <HAL_DMA_Init+0x1cc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d031      	beq.n	8004504 <HAL_DMA_Init+0x174>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2e      	ldr	r2, [pc, #184]	; (8004560 <HAL_DMA_Init+0x1d0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d02c      	beq.n	8004504 <HAL_DMA_Init+0x174>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a2d      	ldr	r2, [pc, #180]	; (8004564 <HAL_DMA_Init+0x1d4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d027      	beq.n	8004504 <HAL_DMA_Init+0x174>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a2b      	ldr	r2, [pc, #172]	; (8004568 <HAL_DMA_Init+0x1d8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d022      	beq.n	8004504 <HAL_DMA_Init+0x174>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2a      	ldr	r2, [pc, #168]	; (800456c <HAL_DMA_Init+0x1dc>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d01d      	beq.n	8004504 <HAL_DMA_Init+0x174>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a28      	ldr	r2, [pc, #160]	; (8004570 <HAL_DMA_Init+0x1e0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_DMA_Init+0x174>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a27      	ldr	r2, [pc, #156]	; (8004574 <HAL_DMA_Init+0x1e4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <HAL_DMA_Init+0x174>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a25      	ldr	r2, [pc, #148]	; (8004578 <HAL_DMA_Init+0x1e8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_DMA_Init+0x174>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a24      	ldr	r2, [pc, #144]	; (800457c <HAL_DMA_Init+0x1ec>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_DMA_Init+0x174>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a22      	ldr	r2, [pc, #136]	; (8004580 <HAL_DMA_Init+0x1f0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_DMA_Init+0x174>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a21      	ldr	r2, [pc, #132]	; (8004584 <HAL_DMA_Init+0x1f4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d108      	bne.n	8004516 <HAL_DMA_Init+0x186>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e007      	b.n	8004526 <HAL_DMA_Init+0x196>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004526:	e02f      	b.n	8004588 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004528:	f7fe f9a8 	bl	800287c <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b05      	cmp	r3, #5
 8004534:	d928      	bls.n	8004588 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2203      	movs	r2, #3
 8004540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e2af      	b.n	8004aa8 <HAL_DMA_Init+0x718>
 8004548:	40020010 	.word	0x40020010
 800454c:	40020028 	.word	0x40020028
 8004550:	40020040 	.word	0x40020040
 8004554:	40020058 	.word	0x40020058
 8004558:	40020070 	.word	0x40020070
 800455c:	40020088 	.word	0x40020088
 8004560:	400200a0 	.word	0x400200a0
 8004564:	400200b8 	.word	0x400200b8
 8004568:	40020410 	.word	0x40020410
 800456c:	40020428 	.word	0x40020428
 8004570:	40020440 	.word	0x40020440
 8004574:	40020458 	.word	0x40020458
 8004578:	40020470 	.word	0x40020470
 800457c:	40020488 	.word	0x40020488
 8004580:	400204a0 	.word	0x400204a0
 8004584:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1c8      	bne.n	8004528 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4b73      	ldr	r3, [pc, #460]	; (8004770 <HAL_DMA_Init+0x3e0>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80045ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	2b04      	cmp	r3, #4
 80045da:	d107      	bne.n	80045ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	4313      	orrs	r3, r2
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b28      	cmp	r3, #40	; 0x28
 80045f2:	d903      	bls.n	80045fc <HAL_DMA_Init+0x26c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b2e      	cmp	r3, #46	; 0x2e
 80045fa:	d91f      	bls.n	800463c <HAL_DMA_Init+0x2ac>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b3e      	cmp	r3, #62	; 0x3e
 8004602:	d903      	bls.n	800460c <HAL_DMA_Init+0x27c>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b42      	cmp	r3, #66	; 0x42
 800460a:	d917      	bls.n	800463c <HAL_DMA_Init+0x2ac>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b46      	cmp	r3, #70	; 0x46
 8004612:	d903      	bls.n	800461c <HAL_DMA_Init+0x28c>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b48      	cmp	r3, #72	; 0x48
 800461a:	d90f      	bls.n	800463c <HAL_DMA_Init+0x2ac>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b4e      	cmp	r3, #78	; 0x4e
 8004622:	d903      	bls.n	800462c <HAL_DMA_Init+0x29c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b52      	cmp	r3, #82	; 0x52
 800462a:	d907      	bls.n	800463c <HAL_DMA_Init+0x2ac>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b73      	cmp	r3, #115	; 0x73
 8004632:	d905      	bls.n	8004640 <HAL_DMA_Init+0x2b0>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b77      	cmp	r3, #119	; 0x77
 800463a:	d801      	bhi.n	8004640 <HAL_DMA_Init+0x2b0>
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <HAL_DMA_Init+0x2b2>
 8004640:	2300      	movs	r3, #0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800464c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f023 0307 	bic.w	r3, r3, #7
 8004664:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	4313      	orrs	r3, r2
 800466e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	2b04      	cmp	r3, #4
 8004676:	d117      	bne.n	80046a8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00e      	beq.n	80046a8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f001 fe72 	bl	8006374 <DMA_CheckFifoParam>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d008      	beq.n	80046a8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2240      	movs	r2, #64	; 0x40
 800469a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e1ff      	b.n	8004aa8 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f001 fdad 	bl	8006210 <DMA_CalcBaseAndBitshift>
 80046b6:	4603      	mov	r3, r0
 80046b8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	223f      	movs	r2, #63	; 0x3f
 80046c4:	409a      	lsls	r2, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	609a      	str	r2, [r3, #8]
 80046ca:	e0fe      	b.n	80048ca <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a28      	ldr	r2, [pc, #160]	; (8004774 <HAL_DMA_Init+0x3e4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d04a      	beq.n	800476c <HAL_DMA_Init+0x3dc>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a27      	ldr	r2, [pc, #156]	; (8004778 <HAL_DMA_Init+0x3e8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d045      	beq.n	800476c <HAL_DMA_Init+0x3dc>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a25      	ldr	r2, [pc, #148]	; (800477c <HAL_DMA_Init+0x3ec>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d040      	beq.n	800476c <HAL_DMA_Init+0x3dc>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a24      	ldr	r2, [pc, #144]	; (8004780 <HAL_DMA_Init+0x3f0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d03b      	beq.n	800476c <HAL_DMA_Init+0x3dc>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a22      	ldr	r2, [pc, #136]	; (8004784 <HAL_DMA_Init+0x3f4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d036      	beq.n	800476c <HAL_DMA_Init+0x3dc>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a21      	ldr	r2, [pc, #132]	; (8004788 <HAL_DMA_Init+0x3f8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d031      	beq.n	800476c <HAL_DMA_Init+0x3dc>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1f      	ldr	r2, [pc, #124]	; (800478c <HAL_DMA_Init+0x3fc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d02c      	beq.n	800476c <HAL_DMA_Init+0x3dc>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1e      	ldr	r2, [pc, #120]	; (8004790 <HAL_DMA_Init+0x400>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d027      	beq.n	800476c <HAL_DMA_Init+0x3dc>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1c      	ldr	r2, [pc, #112]	; (8004794 <HAL_DMA_Init+0x404>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d022      	beq.n	800476c <HAL_DMA_Init+0x3dc>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1b      	ldr	r2, [pc, #108]	; (8004798 <HAL_DMA_Init+0x408>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d01d      	beq.n	800476c <HAL_DMA_Init+0x3dc>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a19      	ldr	r2, [pc, #100]	; (800479c <HAL_DMA_Init+0x40c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d018      	beq.n	800476c <HAL_DMA_Init+0x3dc>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a18      	ldr	r2, [pc, #96]	; (80047a0 <HAL_DMA_Init+0x410>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d013      	beq.n	800476c <HAL_DMA_Init+0x3dc>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a16      	ldr	r2, [pc, #88]	; (80047a4 <HAL_DMA_Init+0x414>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00e      	beq.n	800476c <HAL_DMA_Init+0x3dc>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a15      	ldr	r2, [pc, #84]	; (80047a8 <HAL_DMA_Init+0x418>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d009      	beq.n	800476c <HAL_DMA_Init+0x3dc>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a13      	ldr	r2, [pc, #76]	; (80047ac <HAL_DMA_Init+0x41c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <HAL_DMA_Init+0x3dc>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a12      	ldr	r2, [pc, #72]	; (80047b0 <HAL_DMA_Init+0x420>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d123      	bne.n	80047b4 <HAL_DMA_Init+0x424>
 800476c:	2301      	movs	r3, #1
 800476e:	e022      	b.n	80047b6 <HAL_DMA_Init+0x426>
 8004770:	fe10803f 	.word	0xfe10803f
 8004774:	48022c08 	.word	0x48022c08
 8004778:	48022c1c 	.word	0x48022c1c
 800477c:	48022c30 	.word	0x48022c30
 8004780:	48022c44 	.word	0x48022c44
 8004784:	48022c58 	.word	0x48022c58
 8004788:	48022c6c 	.word	0x48022c6c
 800478c:	48022c80 	.word	0x48022c80
 8004790:	48022c94 	.word	0x48022c94
 8004794:	58025408 	.word	0x58025408
 8004798:	5802541c 	.word	0x5802541c
 800479c:	58025430 	.word	0x58025430
 80047a0:	58025444 	.word	0x58025444
 80047a4:	58025458 	.word	0x58025458
 80047a8:	5802546c 	.word	0x5802546c
 80047ac:	58025480 	.word	0x58025480
 80047b0:	58025494 	.word	0x58025494
 80047b4:	2300      	movs	r3, #0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d07e      	beq.n	80048b8 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a80      	ldr	r2, [pc, #512]	; (80049c0 <HAL_DMA_Init+0x630>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d021      	beq.n	8004808 <HAL_DMA_Init+0x478>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a7e      	ldr	r2, [pc, #504]	; (80049c4 <HAL_DMA_Init+0x634>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d01c      	beq.n	8004808 <HAL_DMA_Init+0x478>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a7d      	ldr	r2, [pc, #500]	; (80049c8 <HAL_DMA_Init+0x638>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d017      	beq.n	8004808 <HAL_DMA_Init+0x478>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a7b      	ldr	r2, [pc, #492]	; (80049cc <HAL_DMA_Init+0x63c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d012      	beq.n	8004808 <HAL_DMA_Init+0x478>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7a      	ldr	r2, [pc, #488]	; (80049d0 <HAL_DMA_Init+0x640>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00d      	beq.n	8004808 <HAL_DMA_Init+0x478>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a78      	ldr	r2, [pc, #480]	; (80049d4 <HAL_DMA_Init+0x644>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d008      	beq.n	8004808 <HAL_DMA_Init+0x478>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a77      	ldr	r2, [pc, #476]	; (80049d8 <HAL_DMA_Init+0x648>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <HAL_DMA_Init+0x478>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a75      	ldr	r2, [pc, #468]	; (80049dc <HAL_DMA_Init+0x64c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2202      	movs	r2, #2
 800480e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4b6e      	ldr	r3, [pc, #440]	; (80049e0 <HAL_DMA_Init+0x650>)
 8004826:	4013      	ands	r3, r2
 8004828:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b40      	cmp	r3, #64	; 0x40
 8004830:	d008      	beq.n	8004844 <HAL_DMA_Init+0x4b4>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b80      	cmp	r3, #128	; 0x80
 8004838:	d102      	bne.n	8004840 <HAL_DMA_Init+0x4b0>
 800483a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800483e:	e002      	b.n	8004846 <HAL_DMA_Init+0x4b6>
 8004840:	2300      	movs	r3, #0
 8004842:	e000      	b.n	8004846 <HAL_DMA_Init+0x4b6>
 8004844:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	68d2      	ldr	r2, [r2, #12]
 800484a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800484c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004854:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800485c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004864:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800486c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004874:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	4b56      	ldr	r3, [pc, #344]	; (80049e4 <HAL_DMA_Init+0x654>)
 800488c:	4413      	add	r3, r2
 800488e:	4a56      	ldr	r2, [pc, #344]	; (80049e8 <HAL_DMA_Init+0x658>)
 8004890:	fba2 2303 	umull	r2, r3, r2, r3
 8004894:	091b      	lsrs	r3, r3, #4
 8004896:	009a      	lsls	r2, r3, #2
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f001 fcb7 	bl	8006210 <DMA_CalcBaseAndBitshift>
 80048a2:	4603      	mov	r3, r0
 80048a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	2201      	movs	r2, #1
 80048b0:	409a      	lsls	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	605a      	str	r2, [r3, #4]
 80048b6:	e008      	b.n	80048ca <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2240      	movs	r2, #64	; 0x40
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2203      	movs	r2, #3
 80048c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e0ee      	b.n	8004aa8 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a47      	ldr	r2, [pc, #284]	; (80049ec <HAL_DMA_Init+0x65c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d072      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a45      	ldr	r2, [pc, #276]	; (80049f0 <HAL_DMA_Init+0x660>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d06d      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a44      	ldr	r2, [pc, #272]	; (80049f4 <HAL_DMA_Init+0x664>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d068      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a42      	ldr	r2, [pc, #264]	; (80049f8 <HAL_DMA_Init+0x668>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d063      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a41      	ldr	r2, [pc, #260]	; (80049fc <HAL_DMA_Init+0x66c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d05e      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a3f      	ldr	r2, [pc, #252]	; (8004a00 <HAL_DMA_Init+0x670>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d059      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a3e      	ldr	r2, [pc, #248]	; (8004a04 <HAL_DMA_Init+0x674>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d054      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a3c      	ldr	r2, [pc, #240]	; (8004a08 <HAL_DMA_Init+0x678>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d04f      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a3b      	ldr	r2, [pc, #236]	; (8004a0c <HAL_DMA_Init+0x67c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d04a      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a39      	ldr	r2, [pc, #228]	; (8004a10 <HAL_DMA_Init+0x680>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d045      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a38      	ldr	r2, [pc, #224]	; (8004a14 <HAL_DMA_Init+0x684>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d040      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a36      	ldr	r2, [pc, #216]	; (8004a18 <HAL_DMA_Init+0x688>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d03b      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a35      	ldr	r2, [pc, #212]	; (8004a1c <HAL_DMA_Init+0x68c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d036      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a33      	ldr	r2, [pc, #204]	; (8004a20 <HAL_DMA_Init+0x690>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d031      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a32      	ldr	r2, [pc, #200]	; (8004a24 <HAL_DMA_Init+0x694>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d02c      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a30      	ldr	r2, [pc, #192]	; (8004a28 <HAL_DMA_Init+0x698>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d027      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a14      	ldr	r2, [pc, #80]	; (80049c0 <HAL_DMA_Init+0x630>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d022      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a12      	ldr	r2, [pc, #72]	; (80049c4 <HAL_DMA_Init+0x634>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d01d      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a11      	ldr	r2, [pc, #68]	; (80049c8 <HAL_DMA_Init+0x638>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d018      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a0f      	ldr	r2, [pc, #60]	; (80049cc <HAL_DMA_Init+0x63c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a0e      	ldr	r2, [pc, #56]	; (80049d0 <HAL_DMA_Init+0x640>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00e      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a0c      	ldr	r2, [pc, #48]	; (80049d4 <HAL_DMA_Init+0x644>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d009      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a0b      	ldr	r2, [pc, #44]	; (80049d8 <HAL_DMA_Init+0x648>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <HAL_DMA_Init+0x62a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a09      	ldr	r2, [pc, #36]	; (80049dc <HAL_DMA_Init+0x64c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d138      	bne.n	8004a2c <HAL_DMA_Init+0x69c>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e037      	b.n	8004a2e <HAL_DMA_Init+0x69e>
 80049be:	bf00      	nop
 80049c0:	58025408 	.word	0x58025408
 80049c4:	5802541c 	.word	0x5802541c
 80049c8:	58025430 	.word	0x58025430
 80049cc:	58025444 	.word	0x58025444
 80049d0:	58025458 	.word	0x58025458
 80049d4:	5802546c 	.word	0x5802546c
 80049d8:	58025480 	.word	0x58025480
 80049dc:	58025494 	.word	0x58025494
 80049e0:	fffe000f 	.word	0xfffe000f
 80049e4:	a7fdabf8 	.word	0xa7fdabf8
 80049e8:	cccccccd 	.word	0xcccccccd
 80049ec:	40020010 	.word	0x40020010
 80049f0:	40020028 	.word	0x40020028
 80049f4:	40020040 	.word	0x40020040
 80049f8:	40020058 	.word	0x40020058
 80049fc:	40020070 	.word	0x40020070
 8004a00:	40020088 	.word	0x40020088
 8004a04:	400200a0 	.word	0x400200a0
 8004a08:	400200b8 	.word	0x400200b8
 8004a0c:	40020410 	.word	0x40020410
 8004a10:	40020428 	.word	0x40020428
 8004a14:	40020440 	.word	0x40020440
 8004a18:	40020458 	.word	0x40020458
 8004a1c:	40020470 	.word	0x40020470
 8004a20:	40020488 	.word	0x40020488
 8004a24:	400204a0 	.word	0x400204a0
 8004a28:	400204b8 	.word	0x400204b8
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d032      	beq.n	8004a98 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f001 fd1a 	bl	800646c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b80      	cmp	r3, #128	; 0x80
 8004a3e:	d102      	bne.n	8004a46 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a5a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d010      	beq.n	8004a86 <HAL_DMA_Init+0x6f6>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d80c      	bhi.n	8004a86 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f001 fd97 	bl	80065a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a82:	605a      	str	r2, [r3, #4]
 8004a84:	e008      	b.n	8004a98 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e226      	b.n	8004f1a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_DMA_Start_IT+0x2a>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e21f      	b.n	8004f1a <HAL_DMA_Start_IT+0x46a>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	f040 820a 	bne.w	8004f04 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a68      	ldr	r2, [pc, #416]	; (8004ca4 <HAL_DMA_Start_IT+0x1f4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d04a      	beq.n	8004b9e <HAL_DMA_Start_IT+0xee>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a66      	ldr	r2, [pc, #408]	; (8004ca8 <HAL_DMA_Start_IT+0x1f8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d045      	beq.n	8004b9e <HAL_DMA_Start_IT+0xee>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a65      	ldr	r2, [pc, #404]	; (8004cac <HAL_DMA_Start_IT+0x1fc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d040      	beq.n	8004b9e <HAL_DMA_Start_IT+0xee>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a63      	ldr	r2, [pc, #396]	; (8004cb0 <HAL_DMA_Start_IT+0x200>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d03b      	beq.n	8004b9e <HAL_DMA_Start_IT+0xee>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a62      	ldr	r2, [pc, #392]	; (8004cb4 <HAL_DMA_Start_IT+0x204>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d036      	beq.n	8004b9e <HAL_DMA_Start_IT+0xee>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a60      	ldr	r2, [pc, #384]	; (8004cb8 <HAL_DMA_Start_IT+0x208>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d031      	beq.n	8004b9e <HAL_DMA_Start_IT+0xee>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a5f      	ldr	r2, [pc, #380]	; (8004cbc <HAL_DMA_Start_IT+0x20c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d02c      	beq.n	8004b9e <HAL_DMA_Start_IT+0xee>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a5d      	ldr	r2, [pc, #372]	; (8004cc0 <HAL_DMA_Start_IT+0x210>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d027      	beq.n	8004b9e <HAL_DMA_Start_IT+0xee>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a5c      	ldr	r2, [pc, #368]	; (8004cc4 <HAL_DMA_Start_IT+0x214>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d022      	beq.n	8004b9e <HAL_DMA_Start_IT+0xee>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a5a      	ldr	r2, [pc, #360]	; (8004cc8 <HAL_DMA_Start_IT+0x218>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d01d      	beq.n	8004b9e <HAL_DMA_Start_IT+0xee>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a59      	ldr	r2, [pc, #356]	; (8004ccc <HAL_DMA_Start_IT+0x21c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d018      	beq.n	8004b9e <HAL_DMA_Start_IT+0xee>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a57      	ldr	r2, [pc, #348]	; (8004cd0 <HAL_DMA_Start_IT+0x220>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <HAL_DMA_Start_IT+0xee>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a56      	ldr	r2, [pc, #344]	; (8004cd4 <HAL_DMA_Start_IT+0x224>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00e      	beq.n	8004b9e <HAL_DMA_Start_IT+0xee>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a54      	ldr	r2, [pc, #336]	; (8004cd8 <HAL_DMA_Start_IT+0x228>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d009      	beq.n	8004b9e <HAL_DMA_Start_IT+0xee>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a53      	ldr	r2, [pc, #332]	; (8004cdc <HAL_DMA_Start_IT+0x22c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d004      	beq.n	8004b9e <HAL_DMA_Start_IT+0xee>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a51      	ldr	r2, [pc, #324]	; (8004ce0 <HAL_DMA_Start_IT+0x230>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d108      	bne.n	8004bb0 <HAL_DMA_Start_IT+0x100>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0201 	bic.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e007      	b.n	8004bc0 <HAL_DMA_Start_IT+0x110>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0201 	bic.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f001 f93e 	bl	8005e48 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a34      	ldr	r2, [pc, #208]	; (8004ca4 <HAL_DMA_Start_IT+0x1f4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d04a      	beq.n	8004c6c <HAL_DMA_Start_IT+0x1bc>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a33      	ldr	r2, [pc, #204]	; (8004ca8 <HAL_DMA_Start_IT+0x1f8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d045      	beq.n	8004c6c <HAL_DMA_Start_IT+0x1bc>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a31      	ldr	r2, [pc, #196]	; (8004cac <HAL_DMA_Start_IT+0x1fc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d040      	beq.n	8004c6c <HAL_DMA_Start_IT+0x1bc>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a30      	ldr	r2, [pc, #192]	; (8004cb0 <HAL_DMA_Start_IT+0x200>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d03b      	beq.n	8004c6c <HAL_DMA_Start_IT+0x1bc>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a2e      	ldr	r2, [pc, #184]	; (8004cb4 <HAL_DMA_Start_IT+0x204>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d036      	beq.n	8004c6c <HAL_DMA_Start_IT+0x1bc>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a2d      	ldr	r2, [pc, #180]	; (8004cb8 <HAL_DMA_Start_IT+0x208>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d031      	beq.n	8004c6c <HAL_DMA_Start_IT+0x1bc>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a2b      	ldr	r2, [pc, #172]	; (8004cbc <HAL_DMA_Start_IT+0x20c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d02c      	beq.n	8004c6c <HAL_DMA_Start_IT+0x1bc>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a2a      	ldr	r2, [pc, #168]	; (8004cc0 <HAL_DMA_Start_IT+0x210>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d027      	beq.n	8004c6c <HAL_DMA_Start_IT+0x1bc>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a28      	ldr	r2, [pc, #160]	; (8004cc4 <HAL_DMA_Start_IT+0x214>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d022      	beq.n	8004c6c <HAL_DMA_Start_IT+0x1bc>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a27      	ldr	r2, [pc, #156]	; (8004cc8 <HAL_DMA_Start_IT+0x218>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d01d      	beq.n	8004c6c <HAL_DMA_Start_IT+0x1bc>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a25      	ldr	r2, [pc, #148]	; (8004ccc <HAL_DMA_Start_IT+0x21c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d018      	beq.n	8004c6c <HAL_DMA_Start_IT+0x1bc>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a24      	ldr	r2, [pc, #144]	; (8004cd0 <HAL_DMA_Start_IT+0x220>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d013      	beq.n	8004c6c <HAL_DMA_Start_IT+0x1bc>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a22      	ldr	r2, [pc, #136]	; (8004cd4 <HAL_DMA_Start_IT+0x224>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00e      	beq.n	8004c6c <HAL_DMA_Start_IT+0x1bc>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a21      	ldr	r2, [pc, #132]	; (8004cd8 <HAL_DMA_Start_IT+0x228>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d009      	beq.n	8004c6c <HAL_DMA_Start_IT+0x1bc>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1f      	ldr	r2, [pc, #124]	; (8004cdc <HAL_DMA_Start_IT+0x22c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_DMA_Start_IT+0x1bc>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1e      	ldr	r2, [pc, #120]	; (8004ce0 <HAL_DMA_Start_IT+0x230>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d101      	bne.n	8004c70 <HAL_DMA_Start_IT+0x1c0>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <HAL_DMA_Start_IT+0x1c2>
 8004c70:	2300      	movs	r3, #0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d036      	beq.n	8004ce4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f023 021e 	bic.w	r2, r3, #30
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0216 	orr.w	r2, r2, #22
 8004c88:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d03e      	beq.n	8004d10 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0208 	orr.w	r2, r2, #8
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	e035      	b.n	8004d10 <HAL_DMA_Start_IT+0x260>
 8004ca4:	40020010 	.word	0x40020010
 8004ca8:	40020028 	.word	0x40020028
 8004cac:	40020040 	.word	0x40020040
 8004cb0:	40020058 	.word	0x40020058
 8004cb4:	40020070 	.word	0x40020070
 8004cb8:	40020088 	.word	0x40020088
 8004cbc:	400200a0 	.word	0x400200a0
 8004cc0:	400200b8 	.word	0x400200b8
 8004cc4:	40020410 	.word	0x40020410
 8004cc8:	40020428 	.word	0x40020428
 8004ccc:	40020440 	.word	0x40020440
 8004cd0:	40020458 	.word	0x40020458
 8004cd4:	40020470 	.word	0x40020470
 8004cd8:	40020488 	.word	0x40020488
 8004cdc:	400204a0 	.word	0x400204a0
 8004ce0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f023 020e 	bic.w	r2, r3, #14
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 020a 	orr.w	r2, r2, #10
 8004cf6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0204 	orr.w	r2, r2, #4
 8004d0e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a83      	ldr	r2, [pc, #524]	; (8004f24 <HAL_DMA_Start_IT+0x474>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d072      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a82      	ldr	r2, [pc, #520]	; (8004f28 <HAL_DMA_Start_IT+0x478>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d06d      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a80      	ldr	r2, [pc, #512]	; (8004f2c <HAL_DMA_Start_IT+0x47c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d068      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a7f      	ldr	r2, [pc, #508]	; (8004f30 <HAL_DMA_Start_IT+0x480>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d063      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a7d      	ldr	r2, [pc, #500]	; (8004f34 <HAL_DMA_Start_IT+0x484>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d05e      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a7c      	ldr	r2, [pc, #496]	; (8004f38 <HAL_DMA_Start_IT+0x488>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d059      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a7a      	ldr	r2, [pc, #488]	; (8004f3c <HAL_DMA_Start_IT+0x48c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d054      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a79      	ldr	r2, [pc, #484]	; (8004f40 <HAL_DMA_Start_IT+0x490>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d04f      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a77      	ldr	r2, [pc, #476]	; (8004f44 <HAL_DMA_Start_IT+0x494>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d04a      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a76      	ldr	r2, [pc, #472]	; (8004f48 <HAL_DMA_Start_IT+0x498>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d045      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a74      	ldr	r2, [pc, #464]	; (8004f4c <HAL_DMA_Start_IT+0x49c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d040      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a73      	ldr	r2, [pc, #460]	; (8004f50 <HAL_DMA_Start_IT+0x4a0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d03b      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a71      	ldr	r2, [pc, #452]	; (8004f54 <HAL_DMA_Start_IT+0x4a4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d036      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a70      	ldr	r2, [pc, #448]	; (8004f58 <HAL_DMA_Start_IT+0x4a8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d031      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a6e      	ldr	r2, [pc, #440]	; (8004f5c <HAL_DMA_Start_IT+0x4ac>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d02c      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a6d      	ldr	r2, [pc, #436]	; (8004f60 <HAL_DMA_Start_IT+0x4b0>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d027      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a6b      	ldr	r2, [pc, #428]	; (8004f64 <HAL_DMA_Start_IT+0x4b4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d022      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a6a      	ldr	r2, [pc, #424]	; (8004f68 <HAL_DMA_Start_IT+0x4b8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d01d      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a68      	ldr	r2, [pc, #416]	; (8004f6c <HAL_DMA_Start_IT+0x4bc>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d018      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a67      	ldr	r2, [pc, #412]	; (8004f70 <HAL_DMA_Start_IT+0x4c0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d013      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a65      	ldr	r2, [pc, #404]	; (8004f74 <HAL_DMA_Start_IT+0x4c4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00e      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a64      	ldr	r2, [pc, #400]	; (8004f78 <HAL_DMA_Start_IT+0x4c8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d009      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a62      	ldr	r2, [pc, #392]	; (8004f7c <HAL_DMA_Start_IT+0x4cc>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <HAL_DMA_Start_IT+0x350>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a61      	ldr	r2, [pc, #388]	; (8004f80 <HAL_DMA_Start_IT+0x4d0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d101      	bne.n	8004e04 <HAL_DMA_Start_IT+0x354>
 8004e00:	2301      	movs	r3, #1
 8004e02:	e000      	b.n	8004e06 <HAL_DMA_Start_IT+0x356>
 8004e04:	2300      	movs	r3, #0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01a      	beq.n	8004e40 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d007      	beq.n	8004e40 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a37      	ldr	r2, [pc, #220]	; (8004f24 <HAL_DMA_Start_IT+0x474>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d04a      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x430>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a36      	ldr	r2, [pc, #216]	; (8004f28 <HAL_DMA_Start_IT+0x478>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d045      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x430>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a34      	ldr	r2, [pc, #208]	; (8004f2c <HAL_DMA_Start_IT+0x47c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d040      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x430>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a33      	ldr	r2, [pc, #204]	; (8004f30 <HAL_DMA_Start_IT+0x480>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d03b      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x430>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a31      	ldr	r2, [pc, #196]	; (8004f34 <HAL_DMA_Start_IT+0x484>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d036      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x430>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a30      	ldr	r2, [pc, #192]	; (8004f38 <HAL_DMA_Start_IT+0x488>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d031      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x430>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a2e      	ldr	r2, [pc, #184]	; (8004f3c <HAL_DMA_Start_IT+0x48c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d02c      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x430>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a2d      	ldr	r2, [pc, #180]	; (8004f40 <HAL_DMA_Start_IT+0x490>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d027      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x430>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a2b      	ldr	r2, [pc, #172]	; (8004f44 <HAL_DMA_Start_IT+0x494>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d022      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x430>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <HAL_DMA_Start_IT+0x498>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d01d      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x430>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a28      	ldr	r2, [pc, #160]	; (8004f4c <HAL_DMA_Start_IT+0x49c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d018      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x430>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a27      	ldr	r2, [pc, #156]	; (8004f50 <HAL_DMA_Start_IT+0x4a0>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d013      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x430>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a25      	ldr	r2, [pc, #148]	; (8004f54 <HAL_DMA_Start_IT+0x4a4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00e      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x430>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a24      	ldr	r2, [pc, #144]	; (8004f58 <HAL_DMA_Start_IT+0x4a8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d009      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x430>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a22      	ldr	r2, [pc, #136]	; (8004f5c <HAL_DMA_Start_IT+0x4ac>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <HAL_DMA_Start_IT+0x430>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a21      	ldr	r2, [pc, #132]	; (8004f60 <HAL_DMA_Start_IT+0x4b0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d108      	bne.n	8004ef2 <HAL_DMA_Start_IT+0x442>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	e012      	b.n	8004f18 <HAL_DMA_Start_IT+0x468>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	e009      	b.n	8004f18 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40020010 	.word	0x40020010
 8004f28:	40020028 	.word	0x40020028
 8004f2c:	40020040 	.word	0x40020040
 8004f30:	40020058 	.word	0x40020058
 8004f34:	40020070 	.word	0x40020070
 8004f38:	40020088 	.word	0x40020088
 8004f3c:	400200a0 	.word	0x400200a0
 8004f40:	400200b8 	.word	0x400200b8
 8004f44:	40020410 	.word	0x40020410
 8004f48:	40020428 	.word	0x40020428
 8004f4c:	40020440 	.word	0x40020440
 8004f50:	40020458 	.word	0x40020458
 8004f54:	40020470 	.word	0x40020470
 8004f58:	40020488 	.word	0x40020488
 8004f5c:	400204a0 	.word	0x400204a0
 8004f60:	400204b8 	.word	0x400204b8
 8004f64:	58025408 	.word	0x58025408
 8004f68:	5802541c 	.word	0x5802541c
 8004f6c:	58025430 	.word	0x58025430
 8004f70:	58025444 	.word	0x58025444
 8004f74:	58025458 	.word	0x58025458
 8004f78:	5802546c 	.word	0x5802546c
 8004f7c:	58025480 	.word	0x58025480
 8004f80:	58025494 	.word	0x58025494

08004f84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08a      	sub	sp, #40	; 0x28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f90:	4b67      	ldr	r3, [pc, #412]	; (8005130 <HAL_DMA_IRQHandler+0x1ac>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a67      	ldr	r2, [pc, #412]	; (8005134 <HAL_DMA_IRQHandler+0x1b0>)
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	0a9b      	lsrs	r3, r3, #10
 8004f9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a5f      	ldr	r2, [pc, #380]	; (8005138 <HAL_DMA_IRQHandler+0x1b4>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d04a      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a5d      	ldr	r2, [pc, #372]	; (800513c <HAL_DMA_IRQHandler+0x1b8>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d045      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a5c      	ldr	r2, [pc, #368]	; (8005140 <HAL_DMA_IRQHandler+0x1bc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d040      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a5a      	ldr	r2, [pc, #360]	; (8005144 <HAL_DMA_IRQHandler+0x1c0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d03b      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a59      	ldr	r2, [pc, #356]	; (8005148 <HAL_DMA_IRQHandler+0x1c4>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d036      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a57      	ldr	r2, [pc, #348]	; (800514c <HAL_DMA_IRQHandler+0x1c8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d031      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a56      	ldr	r2, [pc, #344]	; (8005150 <HAL_DMA_IRQHandler+0x1cc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d02c      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a54      	ldr	r2, [pc, #336]	; (8005154 <HAL_DMA_IRQHandler+0x1d0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d027      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a53      	ldr	r2, [pc, #332]	; (8005158 <HAL_DMA_IRQHandler+0x1d4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d022      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a51      	ldr	r2, [pc, #324]	; (800515c <HAL_DMA_IRQHandler+0x1d8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d01d      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a50      	ldr	r2, [pc, #320]	; (8005160 <HAL_DMA_IRQHandler+0x1dc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d018      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a4e      	ldr	r2, [pc, #312]	; (8005164 <HAL_DMA_IRQHandler+0x1e0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a4d      	ldr	r2, [pc, #308]	; (8005168 <HAL_DMA_IRQHandler+0x1e4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00e      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a4b      	ldr	r2, [pc, #300]	; (800516c <HAL_DMA_IRQHandler+0x1e8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d009      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a4a      	ldr	r2, [pc, #296]	; (8005170 <HAL_DMA_IRQHandler+0x1ec>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d004      	beq.n	8005056 <HAL_DMA_IRQHandler+0xd2>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a48      	ldr	r2, [pc, #288]	; (8005174 <HAL_DMA_IRQHandler+0x1f0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d101      	bne.n	800505a <HAL_DMA_IRQHandler+0xd6>
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <HAL_DMA_IRQHandler+0xd8>
 800505a:	2300      	movs	r3, #0
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 842b 	beq.w	80058b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	2208      	movs	r2, #8
 800506c:	409a      	lsls	r2, r3
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	4013      	ands	r3, r2
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 80a2 	beq.w	80051bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a2e      	ldr	r2, [pc, #184]	; (8005138 <HAL_DMA_IRQHandler+0x1b4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d04a      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a2d      	ldr	r2, [pc, #180]	; (800513c <HAL_DMA_IRQHandler+0x1b8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d045      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a2b      	ldr	r2, [pc, #172]	; (8005140 <HAL_DMA_IRQHandler+0x1bc>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d040      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a2a      	ldr	r2, [pc, #168]	; (8005144 <HAL_DMA_IRQHandler+0x1c0>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d03b      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a28      	ldr	r2, [pc, #160]	; (8005148 <HAL_DMA_IRQHandler+0x1c4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d036      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a27      	ldr	r2, [pc, #156]	; (800514c <HAL_DMA_IRQHandler+0x1c8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d031      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a25      	ldr	r2, [pc, #148]	; (8005150 <HAL_DMA_IRQHandler+0x1cc>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d02c      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a24      	ldr	r2, [pc, #144]	; (8005154 <HAL_DMA_IRQHandler+0x1d0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d027      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a22      	ldr	r2, [pc, #136]	; (8005158 <HAL_DMA_IRQHandler+0x1d4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d022      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a21      	ldr	r2, [pc, #132]	; (800515c <HAL_DMA_IRQHandler+0x1d8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d01d      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <HAL_DMA_IRQHandler+0x1dc>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d018      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1e      	ldr	r2, [pc, #120]	; (8005164 <HAL_DMA_IRQHandler+0x1e0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1c      	ldr	r2, [pc, #112]	; (8005168 <HAL_DMA_IRQHandler+0x1e4>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00e      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1b      	ldr	r2, [pc, #108]	; (800516c <HAL_DMA_IRQHandler+0x1e8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a19      	ldr	r2, [pc, #100]	; (8005170 <HAL_DMA_IRQHandler+0x1ec>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_DMA_IRQHandler+0x194>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a18      	ldr	r2, [pc, #96]	; (8005174 <HAL_DMA_IRQHandler+0x1f0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d12f      	bne.n	8005178 <HAL_DMA_IRQHandler+0x1f4>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	bf14      	ite	ne
 8005126:	2301      	movne	r3, #1
 8005128:	2300      	moveq	r3, #0
 800512a:	b2db      	uxtb	r3, r3
 800512c:	e02e      	b.n	800518c <HAL_DMA_IRQHandler+0x208>
 800512e:	bf00      	nop
 8005130:	24000004 	.word	0x24000004
 8005134:	1b4e81b5 	.word	0x1b4e81b5
 8005138:	40020010 	.word	0x40020010
 800513c:	40020028 	.word	0x40020028
 8005140:	40020040 	.word	0x40020040
 8005144:	40020058 	.word	0x40020058
 8005148:	40020070 	.word	0x40020070
 800514c:	40020088 	.word	0x40020088
 8005150:	400200a0 	.word	0x400200a0
 8005154:	400200b8 	.word	0x400200b8
 8005158:	40020410 	.word	0x40020410
 800515c:	40020428 	.word	0x40020428
 8005160:	40020440 	.word	0x40020440
 8005164:	40020458 	.word	0x40020458
 8005168:	40020470 	.word	0x40020470
 800516c:	40020488 	.word	0x40020488
 8005170:	400204a0 	.word	0x400204a0
 8005174:	400204b8 	.word	0x400204b8
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	bf14      	ite	ne
 8005186:	2301      	movne	r3, #1
 8005188:	2300      	moveq	r3, #0
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d015      	beq.n	80051bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0204 	bic.w	r2, r2, #4
 800519e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	2208      	movs	r2, #8
 80051aa:	409a      	lsls	r2, r3
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	f043 0201 	orr.w	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d06e      	beq.n	80052b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a69      	ldr	r2, [pc, #420]	; (800537c <HAL_DMA_IRQHandler+0x3f8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d04a      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a67      	ldr	r2, [pc, #412]	; (8005380 <HAL_DMA_IRQHandler+0x3fc>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d045      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a66      	ldr	r2, [pc, #408]	; (8005384 <HAL_DMA_IRQHandler+0x400>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d040      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a64      	ldr	r2, [pc, #400]	; (8005388 <HAL_DMA_IRQHandler+0x404>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d03b      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a63      	ldr	r2, [pc, #396]	; (800538c <HAL_DMA_IRQHandler+0x408>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d036      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a61      	ldr	r2, [pc, #388]	; (8005390 <HAL_DMA_IRQHandler+0x40c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d031      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a60      	ldr	r2, [pc, #384]	; (8005394 <HAL_DMA_IRQHandler+0x410>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d02c      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a5e      	ldr	r2, [pc, #376]	; (8005398 <HAL_DMA_IRQHandler+0x414>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d027      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a5d      	ldr	r2, [pc, #372]	; (800539c <HAL_DMA_IRQHandler+0x418>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d022      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a5b      	ldr	r2, [pc, #364]	; (80053a0 <HAL_DMA_IRQHandler+0x41c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d01d      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a5a      	ldr	r2, [pc, #360]	; (80053a4 <HAL_DMA_IRQHandler+0x420>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d018      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a58      	ldr	r2, [pc, #352]	; (80053a8 <HAL_DMA_IRQHandler+0x424>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a57      	ldr	r2, [pc, #348]	; (80053ac <HAL_DMA_IRQHandler+0x428>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00e      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a55      	ldr	r2, [pc, #340]	; (80053b0 <HAL_DMA_IRQHandler+0x42c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d009      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a54      	ldr	r2, [pc, #336]	; (80053b4 <HAL_DMA_IRQHandler+0x430>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_DMA_IRQHandler+0x2ee>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a52      	ldr	r2, [pc, #328]	; (80053b8 <HAL_DMA_IRQHandler+0x434>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d10a      	bne.n	8005288 <HAL_DMA_IRQHandler+0x304>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf14      	ite	ne
 8005280:	2301      	movne	r3, #1
 8005282:	2300      	moveq	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	e003      	b.n	8005290 <HAL_DMA_IRQHandler+0x30c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2300      	movs	r3, #0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00d      	beq.n	80052b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005298:	f003 031f 	and.w	r3, r3, #31
 800529c:	2201      	movs	r2, #1
 800529e:	409a      	lsls	r2, r3
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a8:	f043 0202 	orr.w	r2, r3, #2
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	2204      	movs	r2, #4
 80052ba:	409a      	lsls	r2, r3
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	4013      	ands	r3, r2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 808f 	beq.w	80053e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a2c      	ldr	r2, [pc, #176]	; (800537c <HAL_DMA_IRQHandler+0x3f8>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d04a      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a2a      	ldr	r2, [pc, #168]	; (8005380 <HAL_DMA_IRQHandler+0x3fc>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d045      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a29      	ldr	r2, [pc, #164]	; (8005384 <HAL_DMA_IRQHandler+0x400>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d040      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a27      	ldr	r2, [pc, #156]	; (8005388 <HAL_DMA_IRQHandler+0x404>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d03b      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a26      	ldr	r2, [pc, #152]	; (800538c <HAL_DMA_IRQHandler+0x408>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d036      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a24      	ldr	r2, [pc, #144]	; (8005390 <HAL_DMA_IRQHandler+0x40c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d031      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a23      	ldr	r2, [pc, #140]	; (8005394 <HAL_DMA_IRQHandler+0x410>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d02c      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a21      	ldr	r2, [pc, #132]	; (8005398 <HAL_DMA_IRQHandler+0x414>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d027      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a20      	ldr	r2, [pc, #128]	; (800539c <HAL_DMA_IRQHandler+0x418>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d022      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1e      	ldr	r2, [pc, #120]	; (80053a0 <HAL_DMA_IRQHandler+0x41c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d01d      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <HAL_DMA_IRQHandler+0x420>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d018      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <HAL_DMA_IRQHandler+0x424>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d013      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a1a      	ldr	r2, [pc, #104]	; (80053ac <HAL_DMA_IRQHandler+0x428>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00e      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a18      	ldr	r2, [pc, #96]	; (80053b0 <HAL_DMA_IRQHandler+0x42c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d009      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a17      	ldr	r2, [pc, #92]	; (80053b4 <HAL_DMA_IRQHandler+0x430>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d004      	beq.n	8005366 <HAL_DMA_IRQHandler+0x3e2>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a15      	ldr	r2, [pc, #84]	; (80053b8 <HAL_DMA_IRQHandler+0x434>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d12a      	bne.n	80053bc <HAL_DMA_IRQHandler+0x438>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	bf14      	ite	ne
 8005374:	2301      	movne	r3, #1
 8005376:	2300      	moveq	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	e023      	b.n	80053c4 <HAL_DMA_IRQHandler+0x440>
 800537c:	40020010 	.word	0x40020010
 8005380:	40020028 	.word	0x40020028
 8005384:	40020040 	.word	0x40020040
 8005388:	40020058 	.word	0x40020058
 800538c:	40020070 	.word	0x40020070
 8005390:	40020088 	.word	0x40020088
 8005394:	400200a0 	.word	0x400200a0
 8005398:	400200b8 	.word	0x400200b8
 800539c:	40020410 	.word	0x40020410
 80053a0:	40020428 	.word	0x40020428
 80053a4:	40020440 	.word	0x40020440
 80053a8:	40020458 	.word	0x40020458
 80053ac:	40020470 	.word	0x40020470
 80053b0:	40020488 	.word	0x40020488
 80053b4:	400204a0 	.word	0x400204a0
 80053b8:	400204b8 	.word	0x400204b8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2300      	movs	r3, #0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00d      	beq.n	80053e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	2204      	movs	r2, #4
 80053d2:	409a      	lsls	r2, r3
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053dc:	f043 0204 	orr.w	r2, r3, #4
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	2210      	movs	r2, #16
 80053ee:	409a      	lsls	r2, r3
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80a6 	beq.w	8005546 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a85      	ldr	r2, [pc, #532]	; (8005614 <HAL_DMA_IRQHandler+0x690>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d04a      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a83      	ldr	r2, [pc, #524]	; (8005618 <HAL_DMA_IRQHandler+0x694>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d045      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a82      	ldr	r2, [pc, #520]	; (800561c <HAL_DMA_IRQHandler+0x698>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d040      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a80      	ldr	r2, [pc, #512]	; (8005620 <HAL_DMA_IRQHandler+0x69c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d03b      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a7f      	ldr	r2, [pc, #508]	; (8005624 <HAL_DMA_IRQHandler+0x6a0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d036      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a7d      	ldr	r2, [pc, #500]	; (8005628 <HAL_DMA_IRQHandler+0x6a4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d031      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a7c      	ldr	r2, [pc, #496]	; (800562c <HAL_DMA_IRQHandler+0x6a8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d02c      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a7a      	ldr	r2, [pc, #488]	; (8005630 <HAL_DMA_IRQHandler+0x6ac>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d027      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a79      	ldr	r2, [pc, #484]	; (8005634 <HAL_DMA_IRQHandler+0x6b0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d022      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a77      	ldr	r2, [pc, #476]	; (8005638 <HAL_DMA_IRQHandler+0x6b4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d01d      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a76      	ldr	r2, [pc, #472]	; (800563c <HAL_DMA_IRQHandler+0x6b8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d018      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a74      	ldr	r2, [pc, #464]	; (8005640 <HAL_DMA_IRQHandler+0x6bc>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a73      	ldr	r2, [pc, #460]	; (8005644 <HAL_DMA_IRQHandler+0x6c0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a71      	ldr	r2, [pc, #452]	; (8005648 <HAL_DMA_IRQHandler+0x6c4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d009      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a70      	ldr	r2, [pc, #448]	; (800564c <HAL_DMA_IRQHandler+0x6c8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <HAL_DMA_IRQHandler+0x516>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a6e      	ldr	r2, [pc, #440]	; (8005650 <HAL_DMA_IRQHandler+0x6cc>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d10a      	bne.n	80054b0 <HAL_DMA_IRQHandler+0x52c>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	bf14      	ite	ne
 80054a8:	2301      	movne	r3, #1
 80054aa:	2300      	moveq	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	e009      	b.n	80054c4 <HAL_DMA_IRQHandler+0x540>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bf14      	ite	ne
 80054be:	2301      	movne	r3, #1
 80054c0:	2300      	moveq	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d03e      	beq.n	8005546 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	2210      	movs	r2, #16
 80054d2:	409a      	lsls	r2, r3
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d018      	beq.n	8005518 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d108      	bne.n	8005506 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d024      	beq.n	8005546 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	4798      	blx	r3
 8005504:	e01f      	b.n	8005546 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800550a:	2b00      	cmp	r3, #0
 800550c:	d01b      	beq.n	8005546 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	4798      	blx	r3
 8005516:	e016      	b.n	8005546 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005522:	2b00      	cmp	r3, #0
 8005524:	d107      	bne.n	8005536 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0208 	bic.w	r2, r2, #8
 8005534:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	2220      	movs	r2, #32
 8005550:	409a      	lsls	r2, r3
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	4013      	ands	r3, r2
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 8110 	beq.w	800577c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a2c      	ldr	r2, [pc, #176]	; (8005614 <HAL_DMA_IRQHandler+0x690>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d04a      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2b      	ldr	r2, [pc, #172]	; (8005618 <HAL_DMA_IRQHandler+0x694>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d045      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a29      	ldr	r2, [pc, #164]	; (800561c <HAL_DMA_IRQHandler+0x698>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d040      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a28      	ldr	r2, [pc, #160]	; (8005620 <HAL_DMA_IRQHandler+0x69c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d03b      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a26      	ldr	r2, [pc, #152]	; (8005624 <HAL_DMA_IRQHandler+0x6a0>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d036      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a25      	ldr	r2, [pc, #148]	; (8005628 <HAL_DMA_IRQHandler+0x6a4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d031      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a23      	ldr	r2, [pc, #140]	; (800562c <HAL_DMA_IRQHandler+0x6a8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d02c      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a22      	ldr	r2, [pc, #136]	; (8005630 <HAL_DMA_IRQHandler+0x6ac>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d027      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a20      	ldr	r2, [pc, #128]	; (8005634 <HAL_DMA_IRQHandler+0x6b0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d022      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <HAL_DMA_IRQHandler+0x6b4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d01d      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1d      	ldr	r2, [pc, #116]	; (800563c <HAL_DMA_IRQHandler+0x6b8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d018      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1c      	ldr	r2, [pc, #112]	; (8005640 <HAL_DMA_IRQHandler+0x6bc>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d013      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1a      	ldr	r2, [pc, #104]	; (8005644 <HAL_DMA_IRQHandler+0x6c0>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00e      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a19      	ldr	r2, [pc, #100]	; (8005648 <HAL_DMA_IRQHandler+0x6c4>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d009      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a17      	ldr	r2, [pc, #92]	; (800564c <HAL_DMA_IRQHandler+0x6c8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d004      	beq.n	80055fc <HAL_DMA_IRQHandler+0x678>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a16      	ldr	r2, [pc, #88]	; (8005650 <HAL_DMA_IRQHandler+0x6cc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d12b      	bne.n	8005654 <HAL_DMA_IRQHandler+0x6d0>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b00      	cmp	r3, #0
 8005608:	bf14      	ite	ne
 800560a:	2301      	movne	r3, #1
 800560c:	2300      	moveq	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	e02a      	b.n	8005668 <HAL_DMA_IRQHandler+0x6e4>
 8005612:	bf00      	nop
 8005614:	40020010 	.word	0x40020010
 8005618:	40020028 	.word	0x40020028
 800561c:	40020040 	.word	0x40020040
 8005620:	40020058 	.word	0x40020058
 8005624:	40020070 	.word	0x40020070
 8005628:	40020088 	.word	0x40020088
 800562c:	400200a0 	.word	0x400200a0
 8005630:	400200b8 	.word	0x400200b8
 8005634:	40020410 	.word	0x40020410
 8005638:	40020428 	.word	0x40020428
 800563c:	40020440 	.word	0x40020440
 8005640:	40020458 	.word	0x40020458
 8005644:	40020470 	.word	0x40020470
 8005648:	40020488 	.word	0x40020488
 800564c:	400204a0 	.word	0x400204a0
 8005650:	400204b8 	.word	0x400204b8
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	bf14      	ite	ne
 8005662:	2301      	movne	r3, #1
 8005664:	2300      	moveq	r3, #0
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8087 	beq.w	800577c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	2220      	movs	r2, #32
 8005678:	409a      	lsls	r2, r3
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b04      	cmp	r3, #4
 8005688:	d139      	bne.n	80056fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0216 	bic.w	r2, r2, #22
 8005698:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695a      	ldr	r2, [r3, #20]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d103      	bne.n	80056ba <HAL_DMA_IRQHandler+0x736>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d007      	beq.n	80056ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0208 	bic.w	r2, r2, #8
 80056c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	223f      	movs	r2, #63	; 0x3f
 80056d4:	409a      	lsls	r2, r3
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 8382 	beq.w	8005df8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	4798      	blx	r3
          }
          return;
 80056fc:	e37c      	b.n	8005df8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d018      	beq.n	800573e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d108      	bne.n	800572c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571e:	2b00      	cmp	r3, #0
 8005720:	d02c      	beq.n	800577c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	4798      	blx	r3
 800572a:	e027      	b.n	800577c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d023      	beq.n	800577c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	4798      	blx	r3
 800573c:	e01e      	b.n	800577c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10f      	bne.n	800576c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 0210 	bic.w	r2, r2, #16
 800575a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 833e 	beq.w	8005e02 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 8088 	beq.w	80058a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2204      	movs	r2, #4
 8005798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a89      	ldr	r2, [pc, #548]	; (80059c8 <HAL_DMA_IRQHandler+0xa44>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d04a      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a88      	ldr	r2, [pc, #544]	; (80059cc <HAL_DMA_IRQHandler+0xa48>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d045      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a86      	ldr	r2, [pc, #536]	; (80059d0 <HAL_DMA_IRQHandler+0xa4c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d040      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a85      	ldr	r2, [pc, #532]	; (80059d4 <HAL_DMA_IRQHandler+0xa50>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d03b      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a83      	ldr	r2, [pc, #524]	; (80059d8 <HAL_DMA_IRQHandler+0xa54>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d036      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a82      	ldr	r2, [pc, #520]	; (80059dc <HAL_DMA_IRQHandler+0xa58>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d031      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a80      	ldr	r2, [pc, #512]	; (80059e0 <HAL_DMA_IRQHandler+0xa5c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d02c      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a7f      	ldr	r2, [pc, #508]	; (80059e4 <HAL_DMA_IRQHandler+0xa60>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d027      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a7d      	ldr	r2, [pc, #500]	; (80059e8 <HAL_DMA_IRQHandler+0xa64>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d022      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a7c      	ldr	r2, [pc, #496]	; (80059ec <HAL_DMA_IRQHandler+0xa68>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d01d      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a7a      	ldr	r2, [pc, #488]	; (80059f0 <HAL_DMA_IRQHandler+0xa6c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d018      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a79      	ldr	r2, [pc, #484]	; (80059f4 <HAL_DMA_IRQHandler+0xa70>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d013      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a77      	ldr	r2, [pc, #476]	; (80059f8 <HAL_DMA_IRQHandler+0xa74>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00e      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a76      	ldr	r2, [pc, #472]	; (80059fc <HAL_DMA_IRQHandler+0xa78>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d009      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a74      	ldr	r2, [pc, #464]	; (8005a00 <HAL_DMA_IRQHandler+0xa7c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d004      	beq.n	800583c <HAL_DMA_IRQHandler+0x8b8>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a73      	ldr	r2, [pc, #460]	; (8005a04 <HAL_DMA_IRQHandler+0xa80>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d108      	bne.n	800584e <HAL_DMA_IRQHandler+0x8ca>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	e007      	b.n	800585e <HAL_DMA_IRQHandler+0x8da>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0201 	bic.w	r2, r2, #1
 800585c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3301      	adds	r3, #1
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005866:	429a      	cmp	r2, r3
 8005868:	d307      	bcc.n	800587a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f2      	bne.n	800585e <HAL_DMA_IRQHandler+0x8da>
 8005878:	e000      	b.n	800587c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800587a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d004      	beq.n	8005894 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2203      	movs	r2, #3
 800588e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005892:	e003      	b.n	800589c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 82aa 	beq.w	8005e02 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	4798      	blx	r3
 80058b6:	e2a4      	b.n	8005e02 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a52      	ldr	r2, [pc, #328]	; (8005a08 <HAL_DMA_IRQHandler+0xa84>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d04a      	beq.n	8005958 <HAL_DMA_IRQHandler+0x9d4>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a51      	ldr	r2, [pc, #324]	; (8005a0c <HAL_DMA_IRQHandler+0xa88>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d045      	beq.n	8005958 <HAL_DMA_IRQHandler+0x9d4>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a4f      	ldr	r2, [pc, #316]	; (8005a10 <HAL_DMA_IRQHandler+0xa8c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d040      	beq.n	8005958 <HAL_DMA_IRQHandler+0x9d4>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a4e      	ldr	r2, [pc, #312]	; (8005a14 <HAL_DMA_IRQHandler+0xa90>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d03b      	beq.n	8005958 <HAL_DMA_IRQHandler+0x9d4>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a4c      	ldr	r2, [pc, #304]	; (8005a18 <HAL_DMA_IRQHandler+0xa94>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d036      	beq.n	8005958 <HAL_DMA_IRQHandler+0x9d4>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a4b      	ldr	r2, [pc, #300]	; (8005a1c <HAL_DMA_IRQHandler+0xa98>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d031      	beq.n	8005958 <HAL_DMA_IRQHandler+0x9d4>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a49      	ldr	r2, [pc, #292]	; (8005a20 <HAL_DMA_IRQHandler+0xa9c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d02c      	beq.n	8005958 <HAL_DMA_IRQHandler+0x9d4>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a48      	ldr	r2, [pc, #288]	; (8005a24 <HAL_DMA_IRQHandler+0xaa0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d027      	beq.n	8005958 <HAL_DMA_IRQHandler+0x9d4>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a46      	ldr	r2, [pc, #280]	; (8005a28 <HAL_DMA_IRQHandler+0xaa4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d022      	beq.n	8005958 <HAL_DMA_IRQHandler+0x9d4>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a45      	ldr	r2, [pc, #276]	; (8005a2c <HAL_DMA_IRQHandler+0xaa8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d01d      	beq.n	8005958 <HAL_DMA_IRQHandler+0x9d4>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a43      	ldr	r2, [pc, #268]	; (8005a30 <HAL_DMA_IRQHandler+0xaac>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d018      	beq.n	8005958 <HAL_DMA_IRQHandler+0x9d4>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a42      	ldr	r2, [pc, #264]	; (8005a34 <HAL_DMA_IRQHandler+0xab0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d013      	beq.n	8005958 <HAL_DMA_IRQHandler+0x9d4>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a40      	ldr	r2, [pc, #256]	; (8005a38 <HAL_DMA_IRQHandler+0xab4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00e      	beq.n	8005958 <HAL_DMA_IRQHandler+0x9d4>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a3f      	ldr	r2, [pc, #252]	; (8005a3c <HAL_DMA_IRQHandler+0xab8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d009      	beq.n	8005958 <HAL_DMA_IRQHandler+0x9d4>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a3d      	ldr	r2, [pc, #244]	; (8005a40 <HAL_DMA_IRQHandler+0xabc>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d004      	beq.n	8005958 <HAL_DMA_IRQHandler+0x9d4>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a3c      	ldr	r2, [pc, #240]	; (8005a44 <HAL_DMA_IRQHandler+0xac0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d101      	bne.n	800595c <HAL_DMA_IRQHandler+0x9d8>
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <HAL_DMA_IRQHandler+0x9da>
 800595c:	2300      	movs	r3, #0
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 824f 	beq.w	8005e02 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2204      	movs	r2, #4
 8005976:	409a      	lsls	r2, r3
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80dd 	beq.w	8005b3c <HAL_DMA_IRQHandler+0xbb8>
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 80d7 	beq.w	8005b3c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	2204      	movs	r2, #4
 8005998:	409a      	lsls	r2, r3
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d059      	beq.n	8005a5c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d14a      	bne.n	8005a48 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 8220 	beq.w	8005dfc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059c4:	e21a      	b.n	8005dfc <HAL_DMA_IRQHandler+0xe78>
 80059c6:	bf00      	nop
 80059c8:	40020010 	.word	0x40020010
 80059cc:	40020028 	.word	0x40020028
 80059d0:	40020040 	.word	0x40020040
 80059d4:	40020058 	.word	0x40020058
 80059d8:	40020070 	.word	0x40020070
 80059dc:	40020088 	.word	0x40020088
 80059e0:	400200a0 	.word	0x400200a0
 80059e4:	400200b8 	.word	0x400200b8
 80059e8:	40020410 	.word	0x40020410
 80059ec:	40020428 	.word	0x40020428
 80059f0:	40020440 	.word	0x40020440
 80059f4:	40020458 	.word	0x40020458
 80059f8:	40020470 	.word	0x40020470
 80059fc:	40020488 	.word	0x40020488
 8005a00:	400204a0 	.word	0x400204a0
 8005a04:	400204b8 	.word	0x400204b8
 8005a08:	48022c08 	.word	0x48022c08
 8005a0c:	48022c1c 	.word	0x48022c1c
 8005a10:	48022c30 	.word	0x48022c30
 8005a14:	48022c44 	.word	0x48022c44
 8005a18:	48022c58 	.word	0x48022c58
 8005a1c:	48022c6c 	.word	0x48022c6c
 8005a20:	48022c80 	.word	0x48022c80
 8005a24:	48022c94 	.word	0x48022c94
 8005a28:	58025408 	.word	0x58025408
 8005a2c:	5802541c 	.word	0x5802541c
 8005a30:	58025430 	.word	0x58025430
 8005a34:	58025444 	.word	0x58025444
 8005a38:	58025458 	.word	0x58025458
 8005a3c:	5802546c 	.word	0x5802546c
 8005a40:	58025480 	.word	0x58025480
 8005a44:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 81d5 	beq.w	8005dfc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a5a:	e1cf      	b.n	8005dfc <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d160      	bne.n	8005b28 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a7f      	ldr	r2, [pc, #508]	; (8005c68 <HAL_DMA_IRQHandler+0xce4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d04a      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xb82>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a7d      	ldr	r2, [pc, #500]	; (8005c6c <HAL_DMA_IRQHandler+0xce8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d045      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xb82>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a7c      	ldr	r2, [pc, #496]	; (8005c70 <HAL_DMA_IRQHandler+0xcec>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d040      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xb82>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a7a      	ldr	r2, [pc, #488]	; (8005c74 <HAL_DMA_IRQHandler+0xcf0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d03b      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xb82>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a79      	ldr	r2, [pc, #484]	; (8005c78 <HAL_DMA_IRQHandler+0xcf4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d036      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xb82>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a77      	ldr	r2, [pc, #476]	; (8005c7c <HAL_DMA_IRQHandler+0xcf8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d031      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xb82>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a76      	ldr	r2, [pc, #472]	; (8005c80 <HAL_DMA_IRQHandler+0xcfc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d02c      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xb82>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a74      	ldr	r2, [pc, #464]	; (8005c84 <HAL_DMA_IRQHandler+0xd00>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d027      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xb82>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a73      	ldr	r2, [pc, #460]	; (8005c88 <HAL_DMA_IRQHandler+0xd04>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d022      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xb82>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a71      	ldr	r2, [pc, #452]	; (8005c8c <HAL_DMA_IRQHandler+0xd08>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d01d      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xb82>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a70      	ldr	r2, [pc, #448]	; (8005c90 <HAL_DMA_IRQHandler+0xd0c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d018      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xb82>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a6e      	ldr	r2, [pc, #440]	; (8005c94 <HAL_DMA_IRQHandler+0xd10>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d013      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xb82>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a6d      	ldr	r2, [pc, #436]	; (8005c98 <HAL_DMA_IRQHandler+0xd14>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00e      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xb82>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a6b      	ldr	r2, [pc, #428]	; (8005c9c <HAL_DMA_IRQHandler+0xd18>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d009      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xb82>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a6a      	ldr	r2, [pc, #424]	; (8005ca0 <HAL_DMA_IRQHandler+0xd1c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d004      	beq.n	8005b06 <HAL_DMA_IRQHandler+0xb82>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a68      	ldr	r2, [pc, #416]	; (8005ca4 <HAL_DMA_IRQHandler+0xd20>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d108      	bne.n	8005b18 <HAL_DMA_IRQHandler+0xb94>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0208 	bic.w	r2, r2, #8
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	e007      	b.n	8005b28 <HAL_DMA_IRQHandler+0xba4>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0204 	bic.w	r2, r2, #4
 8005b26:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 8165 	beq.w	8005dfc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b3a:	e15f      	b.n	8005dfc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	2202      	movs	r2, #2
 8005b46:	409a      	lsls	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 80c5 	beq.w	8005cdc <HAL_DMA_IRQHandler+0xd58>
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 80bf 	beq.w	8005cdc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2202      	movs	r2, #2
 8005b68:	409a      	lsls	r2, r3
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d018      	beq.n	8005baa <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 813a 	beq.w	8005e00 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b94:	e134      	b.n	8005e00 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 8130 	beq.w	8005e00 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ba8:	e12a      	b.n	8005e00 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f003 0320 	and.w	r3, r3, #32
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f040 8089 	bne.w	8005cc8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a2b      	ldr	r2, [pc, #172]	; (8005c68 <HAL_DMA_IRQHandler+0xce4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d04a      	beq.n	8005c56 <HAL_DMA_IRQHandler+0xcd2>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a29      	ldr	r2, [pc, #164]	; (8005c6c <HAL_DMA_IRQHandler+0xce8>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d045      	beq.n	8005c56 <HAL_DMA_IRQHandler+0xcd2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a28      	ldr	r2, [pc, #160]	; (8005c70 <HAL_DMA_IRQHandler+0xcec>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d040      	beq.n	8005c56 <HAL_DMA_IRQHandler+0xcd2>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a26      	ldr	r2, [pc, #152]	; (8005c74 <HAL_DMA_IRQHandler+0xcf0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d03b      	beq.n	8005c56 <HAL_DMA_IRQHandler+0xcd2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a25      	ldr	r2, [pc, #148]	; (8005c78 <HAL_DMA_IRQHandler+0xcf4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d036      	beq.n	8005c56 <HAL_DMA_IRQHandler+0xcd2>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a23      	ldr	r2, [pc, #140]	; (8005c7c <HAL_DMA_IRQHandler+0xcf8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d031      	beq.n	8005c56 <HAL_DMA_IRQHandler+0xcd2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a22      	ldr	r2, [pc, #136]	; (8005c80 <HAL_DMA_IRQHandler+0xcfc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d02c      	beq.n	8005c56 <HAL_DMA_IRQHandler+0xcd2>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a20      	ldr	r2, [pc, #128]	; (8005c84 <HAL_DMA_IRQHandler+0xd00>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d027      	beq.n	8005c56 <HAL_DMA_IRQHandler+0xcd2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a1f      	ldr	r2, [pc, #124]	; (8005c88 <HAL_DMA_IRQHandler+0xd04>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d022      	beq.n	8005c56 <HAL_DMA_IRQHandler+0xcd2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1d      	ldr	r2, [pc, #116]	; (8005c8c <HAL_DMA_IRQHandler+0xd08>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d01d      	beq.n	8005c56 <HAL_DMA_IRQHandler+0xcd2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a1c      	ldr	r2, [pc, #112]	; (8005c90 <HAL_DMA_IRQHandler+0xd0c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d018      	beq.n	8005c56 <HAL_DMA_IRQHandler+0xcd2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a1a      	ldr	r2, [pc, #104]	; (8005c94 <HAL_DMA_IRQHandler+0xd10>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d013      	beq.n	8005c56 <HAL_DMA_IRQHandler+0xcd2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a19      	ldr	r2, [pc, #100]	; (8005c98 <HAL_DMA_IRQHandler+0xd14>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d00e      	beq.n	8005c56 <HAL_DMA_IRQHandler+0xcd2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <HAL_DMA_IRQHandler+0xd18>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d009      	beq.n	8005c56 <HAL_DMA_IRQHandler+0xcd2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a16      	ldr	r2, [pc, #88]	; (8005ca0 <HAL_DMA_IRQHandler+0xd1c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d004      	beq.n	8005c56 <HAL_DMA_IRQHandler+0xcd2>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a14      	ldr	r2, [pc, #80]	; (8005ca4 <HAL_DMA_IRQHandler+0xd20>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d128      	bne.n	8005ca8 <HAL_DMA_IRQHandler+0xd24>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0214 	bic.w	r2, r2, #20
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	e027      	b.n	8005cb8 <HAL_DMA_IRQHandler+0xd34>
 8005c68:	40020010 	.word	0x40020010
 8005c6c:	40020028 	.word	0x40020028
 8005c70:	40020040 	.word	0x40020040
 8005c74:	40020058 	.word	0x40020058
 8005c78:	40020070 	.word	0x40020070
 8005c7c:	40020088 	.word	0x40020088
 8005c80:	400200a0 	.word	0x400200a0
 8005c84:	400200b8 	.word	0x400200b8
 8005c88:	40020410 	.word	0x40020410
 8005c8c:	40020428 	.word	0x40020428
 8005c90:	40020440 	.word	0x40020440
 8005c94:	40020458 	.word	0x40020458
 8005c98:	40020470 	.word	0x40020470
 8005c9c:	40020488 	.word	0x40020488
 8005ca0:	400204a0 	.word	0x400204a0
 8005ca4:	400204b8 	.word	0x400204b8
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 020a 	bic.w	r2, r2, #10
 8005cb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 8097 	beq.w	8005e00 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cda:	e091      	b.n	8005e00 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce0:	f003 031f 	and.w	r3, r3, #31
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	409a      	lsls	r2, r3
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 8088 	beq.w	8005e02 <HAL_DMA_IRQHandler+0xe7e>
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8082 	beq.w	8005e02 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a41      	ldr	r2, [pc, #260]	; (8005e08 <HAL_DMA_IRQHandler+0xe84>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d04a      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xe1a>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a3f      	ldr	r2, [pc, #252]	; (8005e0c <HAL_DMA_IRQHandler+0xe88>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d045      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xe1a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a3e      	ldr	r2, [pc, #248]	; (8005e10 <HAL_DMA_IRQHandler+0xe8c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d040      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xe1a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a3c      	ldr	r2, [pc, #240]	; (8005e14 <HAL_DMA_IRQHandler+0xe90>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d03b      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xe1a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a3b      	ldr	r2, [pc, #236]	; (8005e18 <HAL_DMA_IRQHandler+0xe94>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d036      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xe1a>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a39      	ldr	r2, [pc, #228]	; (8005e1c <HAL_DMA_IRQHandler+0xe98>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d031      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xe1a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a38      	ldr	r2, [pc, #224]	; (8005e20 <HAL_DMA_IRQHandler+0xe9c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d02c      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xe1a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a36      	ldr	r2, [pc, #216]	; (8005e24 <HAL_DMA_IRQHandler+0xea0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d027      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xe1a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a35      	ldr	r2, [pc, #212]	; (8005e28 <HAL_DMA_IRQHandler+0xea4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d022      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xe1a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a33      	ldr	r2, [pc, #204]	; (8005e2c <HAL_DMA_IRQHandler+0xea8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d01d      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xe1a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a32      	ldr	r2, [pc, #200]	; (8005e30 <HAL_DMA_IRQHandler+0xeac>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d018      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xe1a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a30      	ldr	r2, [pc, #192]	; (8005e34 <HAL_DMA_IRQHandler+0xeb0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d013      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xe1a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a2f      	ldr	r2, [pc, #188]	; (8005e38 <HAL_DMA_IRQHandler+0xeb4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d00e      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xe1a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a2d      	ldr	r2, [pc, #180]	; (8005e3c <HAL_DMA_IRQHandler+0xeb8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d009      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xe1a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a2c      	ldr	r2, [pc, #176]	; (8005e40 <HAL_DMA_IRQHandler+0xebc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d004      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xe1a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a2a      	ldr	r2, [pc, #168]	; (8005e44 <HAL_DMA_IRQHandler+0xec0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d108      	bne.n	8005db0 <HAL_DMA_IRQHandler+0xe2c>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 021c 	bic.w	r2, r2, #28
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	e007      	b.n	8005dc0 <HAL_DMA_IRQHandler+0xe3c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 020e 	bic.w	r2, r2, #14
 8005dbe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc4:	f003 031f 	and.w	r3, r3, #31
 8005dc8:	2201      	movs	r2, #1
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d009      	beq.n	8005e02 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	4798      	blx	r3
 8005df6:	e004      	b.n	8005e02 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005df8:	bf00      	nop
 8005dfa:	e002      	b.n	8005e02 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dfc:	bf00      	nop
 8005dfe:	e000      	b.n	8005e02 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e00:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e02:	3728      	adds	r7, #40	; 0x28
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40020010 	.word	0x40020010
 8005e0c:	40020028 	.word	0x40020028
 8005e10:	40020040 	.word	0x40020040
 8005e14:	40020058 	.word	0x40020058
 8005e18:	40020070 	.word	0x40020070
 8005e1c:	40020088 	.word	0x40020088
 8005e20:	400200a0 	.word	0x400200a0
 8005e24:	400200b8 	.word	0x400200b8
 8005e28:	40020410 	.word	0x40020410
 8005e2c:	40020428 	.word	0x40020428
 8005e30:	40020440 	.word	0x40020440
 8005e34:	40020458 	.word	0x40020458
 8005e38:	40020470 	.word	0x40020470
 8005e3c:	40020488 	.word	0x40020488
 8005e40:	400204a0 	.word	0x400204a0
 8005e44:	400204b8 	.word	0x400204b8

08005e48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e60:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a7f      	ldr	r2, [pc, #508]	; (8006064 <DMA_SetConfig+0x21c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d072      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a7d      	ldr	r2, [pc, #500]	; (8006068 <DMA_SetConfig+0x220>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d06d      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a7c      	ldr	r2, [pc, #496]	; (800606c <DMA_SetConfig+0x224>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d068      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a7a      	ldr	r2, [pc, #488]	; (8006070 <DMA_SetConfig+0x228>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d063      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a79      	ldr	r2, [pc, #484]	; (8006074 <DMA_SetConfig+0x22c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d05e      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a77      	ldr	r2, [pc, #476]	; (8006078 <DMA_SetConfig+0x230>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d059      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a76      	ldr	r2, [pc, #472]	; (800607c <DMA_SetConfig+0x234>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d054      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a74      	ldr	r2, [pc, #464]	; (8006080 <DMA_SetConfig+0x238>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d04f      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a73      	ldr	r2, [pc, #460]	; (8006084 <DMA_SetConfig+0x23c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d04a      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a71      	ldr	r2, [pc, #452]	; (8006088 <DMA_SetConfig+0x240>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d045      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a70      	ldr	r2, [pc, #448]	; (800608c <DMA_SetConfig+0x244>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d040      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a6e      	ldr	r2, [pc, #440]	; (8006090 <DMA_SetConfig+0x248>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d03b      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a6d      	ldr	r2, [pc, #436]	; (8006094 <DMA_SetConfig+0x24c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d036      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a6b      	ldr	r2, [pc, #428]	; (8006098 <DMA_SetConfig+0x250>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d031      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a6a      	ldr	r2, [pc, #424]	; (800609c <DMA_SetConfig+0x254>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d02c      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a68      	ldr	r2, [pc, #416]	; (80060a0 <DMA_SetConfig+0x258>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d027      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a67      	ldr	r2, [pc, #412]	; (80060a4 <DMA_SetConfig+0x25c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d022      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a65      	ldr	r2, [pc, #404]	; (80060a8 <DMA_SetConfig+0x260>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01d      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a64      	ldr	r2, [pc, #400]	; (80060ac <DMA_SetConfig+0x264>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d018      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a62      	ldr	r2, [pc, #392]	; (80060b0 <DMA_SetConfig+0x268>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d013      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a61      	ldr	r2, [pc, #388]	; (80060b4 <DMA_SetConfig+0x26c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00e      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a5f      	ldr	r2, [pc, #380]	; (80060b8 <DMA_SetConfig+0x270>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d009      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a5e      	ldr	r2, [pc, #376]	; (80060bc <DMA_SetConfig+0x274>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d004      	beq.n	8005f52 <DMA_SetConfig+0x10a>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a5c      	ldr	r2, [pc, #368]	; (80060c0 <DMA_SetConfig+0x278>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d101      	bne.n	8005f56 <DMA_SetConfig+0x10e>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <DMA_SetConfig+0x110>
 8005f56:	2300      	movs	r3, #0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00d      	beq.n	8005f78 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f64:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d004      	beq.n	8005f78 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f76:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a39      	ldr	r2, [pc, #228]	; (8006064 <DMA_SetConfig+0x21c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d04a      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a38      	ldr	r2, [pc, #224]	; (8006068 <DMA_SetConfig+0x220>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d045      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a36      	ldr	r2, [pc, #216]	; (800606c <DMA_SetConfig+0x224>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d040      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a35      	ldr	r2, [pc, #212]	; (8006070 <DMA_SetConfig+0x228>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d03b      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a33      	ldr	r2, [pc, #204]	; (8006074 <DMA_SetConfig+0x22c>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d036      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a32      	ldr	r2, [pc, #200]	; (8006078 <DMA_SetConfig+0x230>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d031      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a30      	ldr	r2, [pc, #192]	; (800607c <DMA_SetConfig+0x234>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d02c      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a2f      	ldr	r2, [pc, #188]	; (8006080 <DMA_SetConfig+0x238>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d027      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a2d      	ldr	r2, [pc, #180]	; (8006084 <DMA_SetConfig+0x23c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d022      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a2c      	ldr	r2, [pc, #176]	; (8006088 <DMA_SetConfig+0x240>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d01d      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a2a      	ldr	r2, [pc, #168]	; (800608c <DMA_SetConfig+0x244>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d018      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a29      	ldr	r2, [pc, #164]	; (8006090 <DMA_SetConfig+0x248>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d013      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a27      	ldr	r2, [pc, #156]	; (8006094 <DMA_SetConfig+0x24c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00e      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a26      	ldr	r2, [pc, #152]	; (8006098 <DMA_SetConfig+0x250>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d009      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a24      	ldr	r2, [pc, #144]	; (800609c <DMA_SetConfig+0x254>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d004      	beq.n	8006018 <DMA_SetConfig+0x1d0>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a23      	ldr	r2, [pc, #140]	; (80060a0 <DMA_SetConfig+0x258>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d101      	bne.n	800601c <DMA_SetConfig+0x1d4>
 8006018:	2301      	movs	r3, #1
 800601a:	e000      	b.n	800601e <DMA_SetConfig+0x1d6>
 800601c:	2300      	movs	r3, #0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d059      	beq.n	80060d6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	223f      	movs	r2, #63	; 0x3f
 800602c:	409a      	lsls	r2, r3
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006040:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d138      	bne.n	80060c4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006062:	e0ae      	b.n	80061c2 <DMA_SetConfig+0x37a>
 8006064:	40020010 	.word	0x40020010
 8006068:	40020028 	.word	0x40020028
 800606c:	40020040 	.word	0x40020040
 8006070:	40020058 	.word	0x40020058
 8006074:	40020070 	.word	0x40020070
 8006078:	40020088 	.word	0x40020088
 800607c:	400200a0 	.word	0x400200a0
 8006080:	400200b8 	.word	0x400200b8
 8006084:	40020410 	.word	0x40020410
 8006088:	40020428 	.word	0x40020428
 800608c:	40020440 	.word	0x40020440
 8006090:	40020458 	.word	0x40020458
 8006094:	40020470 	.word	0x40020470
 8006098:	40020488 	.word	0x40020488
 800609c:	400204a0 	.word	0x400204a0
 80060a0:	400204b8 	.word	0x400204b8
 80060a4:	58025408 	.word	0x58025408
 80060a8:	5802541c 	.word	0x5802541c
 80060ac:	58025430 	.word	0x58025430
 80060b0:	58025444 	.word	0x58025444
 80060b4:	58025458 	.word	0x58025458
 80060b8:	5802546c 	.word	0x5802546c
 80060bc:	58025480 	.word	0x58025480
 80060c0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	60da      	str	r2, [r3, #12]
}
 80060d4:	e075      	b.n	80061c2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a3d      	ldr	r2, [pc, #244]	; (80061d0 <DMA_SetConfig+0x388>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d04a      	beq.n	8006176 <DMA_SetConfig+0x32e>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a3b      	ldr	r2, [pc, #236]	; (80061d4 <DMA_SetConfig+0x38c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d045      	beq.n	8006176 <DMA_SetConfig+0x32e>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a3a      	ldr	r2, [pc, #232]	; (80061d8 <DMA_SetConfig+0x390>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d040      	beq.n	8006176 <DMA_SetConfig+0x32e>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a38      	ldr	r2, [pc, #224]	; (80061dc <DMA_SetConfig+0x394>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d03b      	beq.n	8006176 <DMA_SetConfig+0x32e>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a37      	ldr	r2, [pc, #220]	; (80061e0 <DMA_SetConfig+0x398>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d036      	beq.n	8006176 <DMA_SetConfig+0x32e>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a35      	ldr	r2, [pc, #212]	; (80061e4 <DMA_SetConfig+0x39c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d031      	beq.n	8006176 <DMA_SetConfig+0x32e>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a34      	ldr	r2, [pc, #208]	; (80061e8 <DMA_SetConfig+0x3a0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d02c      	beq.n	8006176 <DMA_SetConfig+0x32e>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a32      	ldr	r2, [pc, #200]	; (80061ec <DMA_SetConfig+0x3a4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d027      	beq.n	8006176 <DMA_SetConfig+0x32e>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a31      	ldr	r2, [pc, #196]	; (80061f0 <DMA_SetConfig+0x3a8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d022      	beq.n	8006176 <DMA_SetConfig+0x32e>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a2f      	ldr	r2, [pc, #188]	; (80061f4 <DMA_SetConfig+0x3ac>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01d      	beq.n	8006176 <DMA_SetConfig+0x32e>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a2e      	ldr	r2, [pc, #184]	; (80061f8 <DMA_SetConfig+0x3b0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d018      	beq.n	8006176 <DMA_SetConfig+0x32e>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a2c      	ldr	r2, [pc, #176]	; (80061fc <DMA_SetConfig+0x3b4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d013      	beq.n	8006176 <DMA_SetConfig+0x32e>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a2b      	ldr	r2, [pc, #172]	; (8006200 <DMA_SetConfig+0x3b8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00e      	beq.n	8006176 <DMA_SetConfig+0x32e>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a29      	ldr	r2, [pc, #164]	; (8006204 <DMA_SetConfig+0x3bc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d009      	beq.n	8006176 <DMA_SetConfig+0x32e>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a28      	ldr	r2, [pc, #160]	; (8006208 <DMA_SetConfig+0x3c0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d004      	beq.n	8006176 <DMA_SetConfig+0x32e>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a26      	ldr	r2, [pc, #152]	; (800620c <DMA_SetConfig+0x3c4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d101      	bne.n	800617a <DMA_SetConfig+0x332>
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <DMA_SetConfig+0x334>
 800617a:	2300      	movs	r3, #0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d020      	beq.n	80061c2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006184:	f003 031f 	and.w	r3, r3, #31
 8006188:	2201      	movs	r2, #1
 800618a:	409a      	lsls	r2, r3
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b40      	cmp	r3, #64	; 0x40
 800619e:	d108      	bne.n	80061b2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	60da      	str	r2, [r3, #12]
}
 80061b0:	e007      	b.n	80061c2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	60da      	str	r2, [r3, #12]
}
 80061c2:	bf00      	nop
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	48022c08 	.word	0x48022c08
 80061d4:	48022c1c 	.word	0x48022c1c
 80061d8:	48022c30 	.word	0x48022c30
 80061dc:	48022c44 	.word	0x48022c44
 80061e0:	48022c58 	.word	0x48022c58
 80061e4:	48022c6c 	.word	0x48022c6c
 80061e8:	48022c80 	.word	0x48022c80
 80061ec:	48022c94 	.word	0x48022c94
 80061f0:	58025408 	.word	0x58025408
 80061f4:	5802541c 	.word	0x5802541c
 80061f8:	58025430 	.word	0x58025430
 80061fc:	58025444 	.word	0x58025444
 8006200:	58025458 	.word	0x58025458
 8006204:	5802546c 	.word	0x5802546c
 8006208:	58025480 	.word	0x58025480
 800620c:	58025494 	.word	0x58025494

08006210 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a42      	ldr	r2, [pc, #264]	; (8006328 <DMA_CalcBaseAndBitshift+0x118>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d04a      	beq.n	80062b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a41      	ldr	r2, [pc, #260]	; (800632c <DMA_CalcBaseAndBitshift+0x11c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d045      	beq.n	80062b8 <DMA_CalcBaseAndBitshift+0xa8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a3f      	ldr	r2, [pc, #252]	; (8006330 <DMA_CalcBaseAndBitshift+0x120>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d040      	beq.n	80062b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a3e      	ldr	r2, [pc, #248]	; (8006334 <DMA_CalcBaseAndBitshift+0x124>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d03b      	beq.n	80062b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a3c      	ldr	r2, [pc, #240]	; (8006338 <DMA_CalcBaseAndBitshift+0x128>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d036      	beq.n	80062b8 <DMA_CalcBaseAndBitshift+0xa8>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a3b      	ldr	r2, [pc, #236]	; (800633c <DMA_CalcBaseAndBitshift+0x12c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d031      	beq.n	80062b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a39      	ldr	r2, [pc, #228]	; (8006340 <DMA_CalcBaseAndBitshift+0x130>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d02c      	beq.n	80062b8 <DMA_CalcBaseAndBitshift+0xa8>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a38      	ldr	r2, [pc, #224]	; (8006344 <DMA_CalcBaseAndBitshift+0x134>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d027      	beq.n	80062b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a36      	ldr	r2, [pc, #216]	; (8006348 <DMA_CalcBaseAndBitshift+0x138>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d022      	beq.n	80062b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a35      	ldr	r2, [pc, #212]	; (800634c <DMA_CalcBaseAndBitshift+0x13c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d01d      	beq.n	80062b8 <DMA_CalcBaseAndBitshift+0xa8>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a33      	ldr	r2, [pc, #204]	; (8006350 <DMA_CalcBaseAndBitshift+0x140>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d018      	beq.n	80062b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a32      	ldr	r2, [pc, #200]	; (8006354 <DMA_CalcBaseAndBitshift+0x144>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d013      	beq.n	80062b8 <DMA_CalcBaseAndBitshift+0xa8>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a30      	ldr	r2, [pc, #192]	; (8006358 <DMA_CalcBaseAndBitshift+0x148>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00e      	beq.n	80062b8 <DMA_CalcBaseAndBitshift+0xa8>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a2f      	ldr	r2, [pc, #188]	; (800635c <DMA_CalcBaseAndBitshift+0x14c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d009      	beq.n	80062b8 <DMA_CalcBaseAndBitshift+0xa8>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a2d      	ldr	r2, [pc, #180]	; (8006360 <DMA_CalcBaseAndBitshift+0x150>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d004      	beq.n	80062b8 <DMA_CalcBaseAndBitshift+0xa8>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a2c      	ldr	r2, [pc, #176]	; (8006364 <DMA_CalcBaseAndBitshift+0x154>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d101      	bne.n	80062bc <DMA_CalcBaseAndBitshift+0xac>
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <DMA_CalcBaseAndBitshift+0xae>
 80062bc:	2300      	movs	r3, #0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d024      	beq.n	800630c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	3b10      	subs	r3, #16
 80062ca:	4a27      	ldr	r2, [pc, #156]	; (8006368 <DMA_CalcBaseAndBitshift+0x158>)
 80062cc:	fba2 2303 	umull	r2, r3, r2, r3
 80062d0:	091b      	lsrs	r3, r3, #4
 80062d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	4a24      	ldr	r2, [pc, #144]	; (800636c <DMA_CalcBaseAndBitshift+0x15c>)
 80062dc:	5cd3      	ldrb	r3, [r2, r3]
 80062de:	461a      	mov	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d908      	bls.n	80062fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	461a      	mov	r2, r3
 80062f0:	4b1f      	ldr	r3, [pc, #124]	; (8006370 <DMA_CalcBaseAndBitshift+0x160>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	1d1a      	adds	r2, r3, #4
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	659a      	str	r2, [r3, #88]	; 0x58
 80062fa:	e00d      	b.n	8006318 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	461a      	mov	r2, r3
 8006302:	4b1b      	ldr	r3, [pc, #108]	; (8006370 <DMA_CalcBaseAndBitshift+0x160>)
 8006304:	4013      	ands	r3, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6593      	str	r3, [r2, #88]	; 0x58
 800630a:	e005      	b.n	8006318 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800631c:	4618      	mov	r0, r3
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	40020010 	.word	0x40020010
 800632c:	40020028 	.word	0x40020028
 8006330:	40020040 	.word	0x40020040
 8006334:	40020058 	.word	0x40020058
 8006338:	40020070 	.word	0x40020070
 800633c:	40020088 	.word	0x40020088
 8006340:	400200a0 	.word	0x400200a0
 8006344:	400200b8 	.word	0x400200b8
 8006348:	40020410 	.word	0x40020410
 800634c:	40020428 	.word	0x40020428
 8006350:	40020440 	.word	0x40020440
 8006354:	40020458 	.word	0x40020458
 8006358:	40020470 	.word	0x40020470
 800635c:	40020488 	.word	0x40020488
 8006360:	400204a0 	.word	0x400204a0
 8006364:	400204b8 	.word	0x400204b8
 8006368:	aaaaaaab 	.word	0xaaaaaaab
 800636c:	0800ba60 	.word	0x0800ba60
 8006370:	fffffc00 	.word	0xfffffc00

08006374 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d120      	bne.n	80063ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	2b03      	cmp	r3, #3
 800638e:	d858      	bhi.n	8006442 <DMA_CheckFifoParam+0xce>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <DMA_CheckFifoParam+0x24>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	080063a9 	.word	0x080063a9
 800639c:	080063bb 	.word	0x080063bb
 80063a0:	080063a9 	.word	0x080063a9
 80063a4:	08006443 	.word	0x08006443
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d048      	beq.n	8006446 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063b8:	e045      	b.n	8006446 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063c2:	d142      	bne.n	800644a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063c8:	e03f      	b.n	800644a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d2:	d123      	bne.n	800641c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d838      	bhi.n	800644e <DMA_CheckFifoParam+0xda>
 80063dc:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <DMA_CheckFifoParam+0x70>)
 80063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e2:	bf00      	nop
 80063e4:	080063f5 	.word	0x080063f5
 80063e8:	080063fb 	.word	0x080063fb
 80063ec:	080063f5 	.word	0x080063f5
 80063f0:	0800640d 	.word	0x0800640d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	73fb      	strb	r3, [r7, #15]
        break;
 80063f8:	e030      	b.n	800645c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d025      	beq.n	8006452 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800640a:	e022      	b.n	8006452 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006414:	d11f      	bne.n	8006456 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800641a:	e01c      	b.n	8006456 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006420:	2b02      	cmp	r3, #2
 8006422:	d902      	bls.n	800642a <DMA_CheckFifoParam+0xb6>
 8006424:	2b03      	cmp	r3, #3
 8006426:	d003      	beq.n	8006430 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006428:	e018      	b.n	800645c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	73fb      	strb	r3, [r7, #15]
        break;
 800642e:	e015      	b.n	800645c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00e      	beq.n	800645a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	73fb      	strb	r3, [r7, #15]
    break;
 8006440:	e00b      	b.n	800645a <DMA_CheckFifoParam+0xe6>
        break;
 8006442:	bf00      	nop
 8006444:	e00a      	b.n	800645c <DMA_CheckFifoParam+0xe8>
        break;
 8006446:	bf00      	nop
 8006448:	e008      	b.n	800645c <DMA_CheckFifoParam+0xe8>
        break;
 800644a:	bf00      	nop
 800644c:	e006      	b.n	800645c <DMA_CheckFifoParam+0xe8>
        break;
 800644e:	bf00      	nop
 8006450:	e004      	b.n	800645c <DMA_CheckFifoParam+0xe8>
        break;
 8006452:	bf00      	nop
 8006454:	e002      	b.n	800645c <DMA_CheckFifoParam+0xe8>
        break;
 8006456:	bf00      	nop
 8006458:	e000      	b.n	800645c <DMA_CheckFifoParam+0xe8>
    break;
 800645a:	bf00      	nop
    }
  }

  return status;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop

0800646c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a38      	ldr	r2, [pc, #224]	; (8006560 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d022      	beq.n	80064ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a36      	ldr	r2, [pc, #216]	; (8006564 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d01d      	beq.n	80064ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a35      	ldr	r2, [pc, #212]	; (8006568 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d018      	beq.n	80064ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a33      	ldr	r2, [pc, #204]	; (800656c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d013      	beq.n	80064ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a32      	ldr	r2, [pc, #200]	; (8006570 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d00e      	beq.n	80064ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a30      	ldr	r2, [pc, #192]	; (8006574 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d009      	beq.n	80064ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a2f      	ldr	r2, [pc, #188]	; (8006578 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d004      	beq.n	80064ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a2d      	ldr	r2, [pc, #180]	; (800657c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d101      	bne.n	80064ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80064ca:	2301      	movs	r3, #1
 80064cc:	e000      	b.n	80064d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80064ce:	2300      	movs	r3, #0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01a      	beq.n	800650a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	3b08      	subs	r3, #8
 80064dc:	4a28      	ldr	r2, [pc, #160]	; (8006580 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80064de:	fba2 2303 	umull	r2, r3, r2, r3
 80064e2:	091b      	lsrs	r3, r3, #4
 80064e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4b26      	ldr	r3, [pc, #152]	; (8006584 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80064ea:	4413      	add	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	461a      	mov	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a24      	ldr	r2, [pc, #144]	; (8006588 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80064f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f003 031f 	and.w	r3, r3, #31
 8006500:	2201      	movs	r2, #1
 8006502:	409a      	lsls	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006508:	e024      	b.n	8006554 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	3b10      	subs	r3, #16
 8006512:	4a1e      	ldr	r2, [pc, #120]	; (800658c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006514:	fba2 2303 	umull	r2, r3, r2, r3
 8006518:	091b      	lsrs	r3, r3, #4
 800651a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4a1c      	ldr	r2, [pc, #112]	; (8006590 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d806      	bhi.n	8006532 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4a1b      	ldr	r2, [pc, #108]	; (8006594 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d902      	bls.n	8006532 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3308      	adds	r3, #8
 8006530:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4b18      	ldr	r3, [pc, #96]	; (8006598 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	461a      	mov	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a16      	ldr	r2, [pc, #88]	; (800659c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006544:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f003 031f 	and.w	r3, r3, #31
 800654c:	2201      	movs	r2, #1
 800654e:	409a      	lsls	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006554:	bf00      	nop
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr
 8006560:	58025408 	.word	0x58025408
 8006564:	5802541c 	.word	0x5802541c
 8006568:	58025430 	.word	0x58025430
 800656c:	58025444 	.word	0x58025444
 8006570:	58025458 	.word	0x58025458
 8006574:	5802546c 	.word	0x5802546c
 8006578:	58025480 	.word	0x58025480
 800657c:	58025494 	.word	0x58025494
 8006580:	cccccccd 	.word	0xcccccccd
 8006584:	16009600 	.word	0x16009600
 8006588:	58025880 	.word	0x58025880
 800658c:	aaaaaaab 	.word	0xaaaaaaab
 8006590:	400204b8 	.word	0x400204b8
 8006594:	4002040f 	.word	0x4002040f
 8006598:	10008200 	.word	0x10008200
 800659c:	40020880 	.word	0x40020880

080065a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d04a      	beq.n	800664c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b08      	cmp	r3, #8
 80065ba:	d847      	bhi.n	800664c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a25      	ldr	r2, [pc, #148]	; (8006658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d022      	beq.n	800660c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a24      	ldr	r2, [pc, #144]	; (800665c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d01d      	beq.n	800660c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a22      	ldr	r2, [pc, #136]	; (8006660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d018      	beq.n	800660c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a21      	ldr	r2, [pc, #132]	; (8006664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d013      	beq.n	800660c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1f      	ldr	r2, [pc, #124]	; (8006668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00e      	beq.n	800660c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1e      	ldr	r2, [pc, #120]	; (800666c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d009      	beq.n	800660c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a1c      	ldr	r2, [pc, #112]	; (8006670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d004      	beq.n	800660c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a1b      	ldr	r2, [pc, #108]	; (8006674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d101      	bne.n	8006610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800660c:	2301      	movs	r3, #1
 800660e:	e000      	b.n	8006612 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006610:	2300      	movs	r3, #0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	4b17      	ldr	r3, [pc, #92]	; (8006678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	461a      	mov	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a15      	ldr	r2, [pc, #84]	; (800667c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006628:	671a      	str	r2, [r3, #112]	; 0x70
 800662a:	e009      	b.n	8006640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	4b14      	ldr	r3, [pc, #80]	; (8006680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006630:	4413      	add	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	461a      	mov	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a11      	ldr	r2, [pc, #68]	; (8006684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800663e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3b01      	subs	r3, #1
 8006644:	2201      	movs	r2, #1
 8006646:	409a      	lsls	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800664c:	bf00      	nop
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	58025408 	.word	0x58025408
 800665c:	5802541c 	.word	0x5802541c
 8006660:	58025430 	.word	0x58025430
 8006664:	58025444 	.word	0x58025444
 8006668:	58025458 	.word	0x58025458
 800666c:	5802546c 	.word	0x5802546c
 8006670:	58025480 	.word	0x58025480
 8006674:	58025494 	.word	0x58025494
 8006678:	1600963f 	.word	0x1600963f
 800667c:	58025940 	.word	0x58025940
 8006680:	1000823f 	.word	0x1000823f
 8006684:	40020940 	.word	0x40020940

08006688 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006688:	b480      	push	{r7}
 800668a:	b089      	sub	sp, #36	; 0x24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006692:	2300      	movs	r3, #0
 8006694:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006696:	4b89      	ldr	r3, [pc, #548]	; (80068bc <HAL_GPIO_Init+0x234>)
 8006698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800669a:	e194      	b.n	80069c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	2101      	movs	r1, #1
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	fa01 f303 	lsl.w	r3, r1, r3
 80066a8:	4013      	ands	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 8186 	beq.w	80069c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f003 0303 	and.w	r3, r3, #3
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d005      	beq.n	80066cc <HAL_GPIO_Init+0x44>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f003 0303 	and.w	r3, r3, #3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d130      	bne.n	800672e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	005b      	lsls	r3, r3, #1
 80066d6:	2203      	movs	r2, #3
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	43db      	mvns	r3, r3
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	4013      	ands	r3, r2
 80066e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	fa02 f303 	lsl.w	r3, r2, r3
 80066f0:	69ba      	ldr	r2, [r7, #24]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006702:	2201      	movs	r2, #1
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	43db      	mvns	r3, r3
 800670c:	69ba      	ldr	r2, [r7, #24]
 800670e:	4013      	ands	r3, r2
 8006710:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	091b      	lsrs	r3, r3, #4
 8006718:	f003 0201 	and.w	r2, r3, #1
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	4313      	orrs	r3, r2
 8006726:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f003 0303 	and.w	r3, r3, #3
 8006736:	2b03      	cmp	r3, #3
 8006738:	d017      	beq.n	800676a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	2203      	movs	r2, #3
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	43db      	mvns	r3, r3
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	4013      	ands	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	fa02 f303 	lsl.w	r3, r2, r3
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	4313      	orrs	r3, r2
 8006762:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f003 0303 	and.w	r3, r3, #3
 8006772:	2b02      	cmp	r3, #2
 8006774:	d123      	bne.n	80067be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	08da      	lsrs	r2, r3, #3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3208      	adds	r2, #8
 800677e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	220f      	movs	r2, #15
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	43db      	mvns	r3, r3
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	4013      	ands	r3, r2
 8006798:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	691a      	ldr	r2, [r3, #16]
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	fa02 f303 	lsl.w	r3, r2, r3
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	08da      	lsrs	r2, r3, #3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3208      	adds	r2, #8
 80067b8:	69b9      	ldr	r1, [r7, #24]
 80067ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	005b      	lsls	r3, r3, #1
 80067c8:	2203      	movs	r2, #3
 80067ca:	fa02 f303 	lsl.w	r3, r2, r3
 80067ce:	43db      	mvns	r3, r3
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	4013      	ands	r3, r2
 80067d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f003 0203 	and.w	r2, r3, #3
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	69ba      	ldr	r2, [r7, #24]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 80e0 	beq.w	80069c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006800:	4b2f      	ldr	r3, [pc, #188]	; (80068c0 <HAL_GPIO_Init+0x238>)
 8006802:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006806:	4a2e      	ldr	r2, [pc, #184]	; (80068c0 <HAL_GPIO_Init+0x238>)
 8006808:	f043 0302 	orr.w	r3, r3, #2
 800680c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8006810:	4b2b      	ldr	r3, [pc, #172]	; (80068c0 <HAL_GPIO_Init+0x238>)
 8006812:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800681e:	4a29      	ldr	r2, [pc, #164]	; (80068c4 <HAL_GPIO_Init+0x23c>)
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	089b      	lsrs	r3, r3, #2
 8006824:	3302      	adds	r3, #2
 8006826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800682a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f003 0303 	and.w	r3, r3, #3
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	220f      	movs	r2, #15
 8006836:	fa02 f303 	lsl.w	r3, r2, r3
 800683a:	43db      	mvns	r3, r3
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	4013      	ands	r3, r2
 8006840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a20      	ldr	r2, [pc, #128]	; (80068c8 <HAL_GPIO_Init+0x240>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d052      	beq.n	80068f0 <HAL_GPIO_Init+0x268>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a1f      	ldr	r2, [pc, #124]	; (80068cc <HAL_GPIO_Init+0x244>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d031      	beq.n	80068b6 <HAL_GPIO_Init+0x22e>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a1e      	ldr	r2, [pc, #120]	; (80068d0 <HAL_GPIO_Init+0x248>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d02b      	beq.n	80068b2 <HAL_GPIO_Init+0x22a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a1d      	ldr	r2, [pc, #116]	; (80068d4 <HAL_GPIO_Init+0x24c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d025      	beq.n	80068ae <HAL_GPIO_Init+0x226>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a1c      	ldr	r2, [pc, #112]	; (80068d8 <HAL_GPIO_Init+0x250>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d01f      	beq.n	80068aa <HAL_GPIO_Init+0x222>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a1b      	ldr	r2, [pc, #108]	; (80068dc <HAL_GPIO_Init+0x254>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d019      	beq.n	80068a6 <HAL_GPIO_Init+0x21e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a1a      	ldr	r2, [pc, #104]	; (80068e0 <HAL_GPIO_Init+0x258>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d013      	beq.n	80068a2 <HAL_GPIO_Init+0x21a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a19      	ldr	r2, [pc, #100]	; (80068e4 <HAL_GPIO_Init+0x25c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d00d      	beq.n	800689e <HAL_GPIO_Init+0x216>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a18      	ldr	r2, [pc, #96]	; (80068e8 <HAL_GPIO_Init+0x260>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d007      	beq.n	800689a <HAL_GPIO_Init+0x212>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a17      	ldr	r2, [pc, #92]	; (80068ec <HAL_GPIO_Init+0x264>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d101      	bne.n	8006896 <HAL_GPIO_Init+0x20e>
 8006892:	2309      	movs	r3, #9
 8006894:	e02d      	b.n	80068f2 <HAL_GPIO_Init+0x26a>
 8006896:	230a      	movs	r3, #10
 8006898:	e02b      	b.n	80068f2 <HAL_GPIO_Init+0x26a>
 800689a:	2308      	movs	r3, #8
 800689c:	e029      	b.n	80068f2 <HAL_GPIO_Init+0x26a>
 800689e:	2307      	movs	r3, #7
 80068a0:	e027      	b.n	80068f2 <HAL_GPIO_Init+0x26a>
 80068a2:	2306      	movs	r3, #6
 80068a4:	e025      	b.n	80068f2 <HAL_GPIO_Init+0x26a>
 80068a6:	2305      	movs	r3, #5
 80068a8:	e023      	b.n	80068f2 <HAL_GPIO_Init+0x26a>
 80068aa:	2304      	movs	r3, #4
 80068ac:	e021      	b.n	80068f2 <HAL_GPIO_Init+0x26a>
 80068ae:	2303      	movs	r3, #3
 80068b0:	e01f      	b.n	80068f2 <HAL_GPIO_Init+0x26a>
 80068b2:	2302      	movs	r3, #2
 80068b4:	e01d      	b.n	80068f2 <HAL_GPIO_Init+0x26a>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e01b      	b.n	80068f2 <HAL_GPIO_Init+0x26a>
 80068ba:	bf00      	nop
 80068bc:	58000080 	.word	0x58000080
 80068c0:	58024400 	.word	0x58024400
 80068c4:	58000400 	.word	0x58000400
 80068c8:	58020000 	.word	0x58020000
 80068cc:	58020400 	.word	0x58020400
 80068d0:	58020800 	.word	0x58020800
 80068d4:	58020c00 	.word	0x58020c00
 80068d8:	58021000 	.word	0x58021000
 80068dc:	58021400 	.word	0x58021400
 80068e0:	58021800 	.word	0x58021800
 80068e4:	58021c00 	.word	0x58021c00
 80068e8:	58022000 	.word	0x58022000
 80068ec:	58022400 	.word	0x58022400
 80068f0:	2300      	movs	r3, #0
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	f002 0203 	and.w	r2, r2, #3
 80068f8:	0092      	lsls	r2, r2, #2
 80068fa:	4093      	lsls	r3, r2
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	4313      	orrs	r3, r2
 8006900:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006902:	4938      	ldr	r1, [pc, #224]	; (80069e4 <HAL_GPIO_Init+0x35c>)
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	089b      	lsrs	r3, r3, #2
 8006908:	3302      	adds	r3, #2
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	43db      	mvns	r3, r3
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	4013      	ands	r3, r2
 8006920:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	4313      	orrs	r3, r2
 8006934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800693e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	43db      	mvns	r3, r3
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	4013      	ands	r3, r2
 800694e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d003      	beq.n	8006964 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006964:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	43db      	mvns	r3, r3
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	4013      	ands	r3, r2
 800697a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	4313      	orrs	r3, r2
 800698e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	43db      	mvns	r3, r3
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	4013      	ands	r3, r2
 80069a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	3301      	adds	r3, #1
 80069c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	fa22 f303 	lsr.w	r3, r2, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f47f ae63 	bne.w	800669c <HAL_GPIO_Init+0x14>
  }
}
 80069d6:	bf00      	nop
 80069d8:	bf00      	nop
 80069da:	3724      	adds	r7, #36	; 0x24
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	58000400 	.word	0x58000400

080069e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	807b      	strh	r3, [r7, #2]
 80069f4:	4613      	mov	r3, r2
 80069f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80069f8:	787b      	ldrb	r3, [r7, #1]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069fe:	887a      	ldrh	r2, [r7, #2]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006a04:	e003      	b.n	8006a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006a06:	887b      	ldrh	r3, [r7, #2]
 8006a08:	041a      	lsls	r2, r3, #16
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	619a      	str	r2, [r3, #24]
}
 8006a0e:	bf00      	nop
 8006a10:	370c      	adds	r7, #12
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr

08006a1a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b082      	sub	sp, #8
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	4603      	mov	r3, r0
 8006a22:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006a2c:	88fb      	ldrh	r3, [r7, #6]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d008      	beq.n	8006a46 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a38:	88fb      	ldrh	r3, [r7, #6]
 8006a3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a3e:	88fb      	ldrh	r3, [r7, #6]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fb fb7f 	bl	8002144 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006a46:	bf00      	nop
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006a58:	4b29      	ldr	r3, [pc, #164]	; (8006b00 <HAL_PWREx_ConfigSupply+0xb0>)
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f003 0307 	and.w	r3, r3, #7
 8006a60:	2b06      	cmp	r3, #6
 8006a62:	d00a      	beq.n	8006a7a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006a64:	4b26      	ldr	r3, [pc, #152]	; (8006b00 <HAL_PWREx_ConfigSupply+0xb0>)
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d001      	beq.n	8006a76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e040      	b.n	8006af8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	e03e      	b.n	8006af8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006a7a:	4b21      	ldr	r3, [pc, #132]	; (8006b00 <HAL_PWREx_ConfigSupply+0xb0>)
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006a82:	491f      	ldr	r1, [pc, #124]	; (8006b00 <HAL_PWREx_ConfigSupply+0xb0>)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006a8a:	f7fb fef7 	bl	800287c <HAL_GetTick>
 8006a8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a90:	e009      	b.n	8006aa6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006a92:	f7fb fef3 	bl	800287c <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aa0:	d901      	bls.n	8006aa6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e028      	b.n	8006af8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006aa6:	4b16      	ldr	r3, [pc, #88]	; (8006b00 <HAL_PWREx_ConfigSupply+0xb0>)
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ab2:	d1ee      	bne.n	8006a92 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b1e      	cmp	r3, #30
 8006ab8:	d008      	beq.n	8006acc <HAL_PWREx_ConfigSupply+0x7c>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b2e      	cmp	r3, #46	; 0x2e
 8006abe:	d005      	beq.n	8006acc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b1d      	cmp	r3, #29
 8006ac4:	d002      	beq.n	8006acc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b2d      	cmp	r3, #45	; 0x2d
 8006aca:	d114      	bne.n	8006af6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006acc:	f7fb fed6 	bl	800287c <HAL_GetTick>
 8006ad0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006ad2:	e009      	b.n	8006ae8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ad4:	f7fb fed2 	bl	800287c <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ae2:	d901      	bls.n	8006ae8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e007      	b.n	8006af8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_PWREx_ConfigSupply+0xb0>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af4:	d1ee      	bne.n	8006ad4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	58024800 	.word	0x58024800

08006b04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08c      	sub	sp, #48	; 0x30
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e3f4      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 80b3 	beq.w	8006c8a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b24:	4b95      	ldr	r3, [pc, #596]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b2e:	4b93      	ldr	r3, [pc, #588]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b32:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b36:	2b10      	cmp	r3, #16
 8006b38:	d007      	beq.n	8006b4a <HAL_RCC_OscConfig+0x46>
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	2b18      	cmp	r3, #24
 8006b3e:	d112      	bne.n	8006b66 <HAL_RCC_OscConfig+0x62>
 8006b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d10d      	bne.n	8006b66 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b4a:	4b8c      	ldr	r3, [pc, #560]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 8098 	beq.w	8006c88 <HAL_RCC_OscConfig+0x184>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f040 8093 	bne.w	8006c88 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e3cc      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6e:	d106      	bne.n	8006b7e <HAL_RCC_OscConfig+0x7a>
 8006b70:	4b82      	ldr	r3, [pc, #520]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a81      	ldr	r2, [pc, #516]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	e058      	b.n	8006c30 <HAL_RCC_OscConfig+0x12c>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d112      	bne.n	8006bac <HAL_RCC_OscConfig+0xa8>
 8006b86:	4b7d      	ldr	r3, [pc, #500]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a7c      	ldr	r2, [pc, #496]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	4b7a      	ldr	r3, [pc, #488]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a79      	ldr	r2, [pc, #484]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006b98:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	4b77      	ldr	r3, [pc, #476]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a76      	ldr	r2, [pc, #472]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006ba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	e041      	b.n	8006c30 <HAL_RCC_OscConfig+0x12c>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bb4:	d112      	bne.n	8006bdc <HAL_RCC_OscConfig+0xd8>
 8006bb6:	4b71      	ldr	r3, [pc, #452]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a70      	ldr	r2, [pc, #448]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	4b6e      	ldr	r3, [pc, #440]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a6d      	ldr	r2, [pc, #436]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006bc8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	4b6b      	ldr	r3, [pc, #428]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a6a      	ldr	r2, [pc, #424]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bd8:	6013      	str	r3, [r2, #0]
 8006bda:	e029      	b.n	8006c30 <HAL_RCC_OscConfig+0x12c>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8006be4:	d112      	bne.n	8006c0c <HAL_RCC_OscConfig+0x108>
 8006be6:	4b65      	ldr	r3, [pc, #404]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a64      	ldr	r2, [pc, #400]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	4b62      	ldr	r3, [pc, #392]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a61      	ldr	r2, [pc, #388]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006bf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	4b5f      	ldr	r3, [pc, #380]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a5e      	ldr	r2, [pc, #376]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	e011      	b.n	8006c30 <HAL_RCC_OscConfig+0x12c>
 8006c0c:	4b5b      	ldr	r3, [pc, #364]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a5a      	ldr	r2, [pc, #360]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	4b58      	ldr	r3, [pc, #352]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a57      	ldr	r2, [pc, #348]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	4b55      	ldr	r3, [pc, #340]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a54      	ldr	r2, [pc, #336]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006c2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d013      	beq.n	8006c60 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c38:	f7fb fe20 	bl	800287c <HAL_GetTick>
 8006c3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c3e:	e008      	b.n	8006c52 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c40:	f7fb fe1c 	bl	800287c <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b64      	cmp	r3, #100	; 0x64
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e356      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c52:	4b4a      	ldr	r3, [pc, #296]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0f0      	beq.n	8006c40 <HAL_RCC_OscConfig+0x13c>
 8006c5e:	e014      	b.n	8006c8a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c60:	f7fb fe0c 	bl	800287c <HAL_GetTick>
 8006c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c68:	f7fb fe08 	bl	800287c <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b64      	cmp	r3, #100	; 0x64
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e342      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006c7a:	4b40      	ldr	r3, [pc, #256]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f0      	bne.n	8006c68 <HAL_RCC_OscConfig+0x164>
 8006c86:	e000      	b.n	8006c8a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 808d 	beq.w	8006db2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c98:	4b38      	ldr	r3, [pc, #224]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ca0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ca2:	4b36      	ldr	r3, [pc, #216]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <HAL_RCC_OscConfig+0x1ba>
 8006cae:	6a3b      	ldr	r3, [r7, #32]
 8006cb0:	2b18      	cmp	r3, #24
 8006cb2:	d137      	bne.n	8006d24 <HAL_RCC_OscConfig+0x220>
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	f003 0303 	and.w	r3, r3, #3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d132      	bne.n	8006d24 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cbe:	4b2f      	ldr	r3, [pc, #188]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0304 	and.w	r3, r3, #4
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d005      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x1d2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e314      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006cd6:	4b29      	ldr	r3, [pc, #164]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f023 0219 	bic.w	r2, r3, #25
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	4926      	ldr	r1, [pc, #152]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ce8:	f7fb fdc8 	bl	800287c <HAL_GetTick>
 8006cec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cf0:	f7fb fdc4 	bl	800287c <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e2fe      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d02:	4b1e      	ldr	r3, [pc, #120]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0304 	and.w	r3, r3, #4
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d0f0      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d0e:	4b1b      	ldr	r3, [pc, #108]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	061b      	lsls	r3, r3, #24
 8006d1c:	4917      	ldr	r1, [pc, #92]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d22:	e046      	b.n	8006db2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d029      	beq.n	8006d80 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d2c:	4b13      	ldr	r3, [pc, #76]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f023 0219 	bic.w	r2, r3, #25
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	4910      	ldr	r1, [pc, #64]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3e:	f7fb fd9d 	bl	800287c <HAL_GetTick>
 8006d42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d44:	e008      	b.n	8006d58 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d46:	f7fb fd99 	bl	800287c <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e2d3      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d58:	4b08      	ldr	r3, [pc, #32]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0f0      	beq.n	8006d46 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d64:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	061b      	lsls	r3, r3, #24
 8006d72:	4902      	ldr	r1, [pc, #8]	; (8006d7c <HAL_RCC_OscConfig+0x278>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	604b      	str	r3, [r1, #4]
 8006d78:	e01b      	b.n	8006db2 <HAL_RCC_OscConfig+0x2ae>
 8006d7a:	bf00      	nop
 8006d7c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d80:	4b97      	ldr	r3, [pc, #604]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a96      	ldr	r2, [pc, #600]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006d86:	f023 0301 	bic.w	r3, r3, #1
 8006d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d8c:	f7fb fd76 	bl	800287c <HAL_GetTick>
 8006d90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d92:	e008      	b.n	8006da6 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d94:	f7fb fd72 	bl	800287c <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e2ac      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006da6:	4b8e      	ldr	r3, [pc, #568]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0304 	and.w	r3, r3, #4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f0      	bne.n	8006d94 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0310 	and.w	r3, r3, #16
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d06a      	beq.n	8006e94 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dbe:	4b88      	ldr	r3, [pc, #544]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006dc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006dc8:	4b85      	ldr	r3, [pc, #532]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dcc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	d007      	beq.n	8006de4 <HAL_RCC_OscConfig+0x2e0>
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	2b18      	cmp	r3, #24
 8006dd8:	d11b      	bne.n	8006e12 <HAL_RCC_OscConfig+0x30e>
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f003 0303 	and.w	r3, r3, #3
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d116      	bne.n	8006e12 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006de4:	4b7e      	ldr	r3, [pc, #504]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <HAL_RCC_OscConfig+0x2f8>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	69db      	ldr	r3, [r3, #28]
 8006df4:	2b80      	cmp	r3, #128	; 0x80
 8006df6:	d001      	beq.n	8006dfc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e281      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006dfc:	4b78      	ldr	r3, [pc, #480]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	061b      	lsls	r3, r3, #24
 8006e0a:	4975      	ldr	r1, [pc, #468]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e10:	e040      	b.n	8006e94 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d023      	beq.n	8006e62 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e1a:	4b71      	ldr	r3, [pc, #452]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a70      	ldr	r2, [pc, #448]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e26:	f7fb fd29 	bl	800287c <HAL_GetTick>
 8006e2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e2c:	e008      	b.n	8006e40 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e2e:	f7fb fd25 	bl	800287c <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d901      	bls.n	8006e40 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e25f      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e40:	4b67      	ldr	r3, [pc, #412]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d0f0      	beq.n	8006e2e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e4c:	4b64      	ldr	r3, [pc, #400]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	061b      	lsls	r3, r3, #24
 8006e5a:	4961      	ldr	r1, [pc, #388]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	60cb      	str	r3, [r1, #12]
 8006e60:	e018      	b.n	8006e94 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006e62:	4b5f      	ldr	r3, [pc, #380]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a5e      	ldr	r2, [pc, #376]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e6e:	f7fb fd05 	bl	800287c <HAL_GetTick>
 8006e72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e74:	e008      	b.n	8006e88 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e76:	f7fb fd01 	bl	800287c <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d901      	bls.n	8006e88 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e23b      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006e88:	4b55      	ldr	r3, [pc, #340]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1f0      	bne.n	8006e76 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0308 	and.w	r3, r3, #8
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d036      	beq.n	8006f0e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d019      	beq.n	8006edc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ea8:	4b4d      	ldr	r3, [pc, #308]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eac:	4a4c      	ldr	r2, [pc, #304]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006eae:	f043 0301 	orr.w	r3, r3, #1
 8006eb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb4:	f7fb fce2 	bl	800287c <HAL_GetTick>
 8006eb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006eba:	e008      	b.n	8006ece <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ebc:	f7fb fcde 	bl	800287c <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d901      	bls.n	8006ece <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e218      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ece:	4b44      	ldr	r3, [pc, #272]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0f0      	beq.n	8006ebc <HAL_RCC_OscConfig+0x3b8>
 8006eda:	e018      	b.n	8006f0e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006edc:	4b40      	ldr	r3, [pc, #256]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee0:	4a3f      	ldr	r2, [pc, #252]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006ee2:	f023 0301 	bic.w	r3, r3, #1
 8006ee6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee8:	f7fb fcc8 	bl	800287c <HAL_GetTick>
 8006eec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ef0:	f7fb fcc4 	bl	800287c <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e1fe      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f02:	4b37      	ldr	r3, [pc, #220]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1f0      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d036      	beq.n	8006f88 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d019      	beq.n	8006f56 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f22:	4b2f      	ldr	r3, [pc, #188]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a2e      	ldr	r2, [pc, #184]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006f28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f2e:	f7fb fca5 	bl	800287c <HAL_GetTick>
 8006f32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f34:	e008      	b.n	8006f48 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006f36:	f7fb fca1 	bl	800287c <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e1db      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f48:	4b25      	ldr	r3, [pc, #148]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0f0      	beq.n	8006f36 <HAL_RCC_OscConfig+0x432>
 8006f54:	e018      	b.n	8006f88 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f56:	4b22      	ldr	r3, [pc, #136]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a21      	ldr	r2, [pc, #132]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f62:	f7fb fc8b 	bl	800287c <HAL_GetTick>
 8006f66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f68:	e008      	b.n	8006f7c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006f6a:	f7fb fc87 	bl	800287c <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e1c1      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006f7c:	4b18      	ldr	r3, [pc, #96]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1f0      	bne.n	8006f6a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 80af 	beq.w	80070f4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f96:	4b13      	ldr	r3, [pc, #76]	; (8006fe4 <HAL_RCC_OscConfig+0x4e0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a12      	ldr	r2, [pc, #72]	; (8006fe4 <HAL_RCC_OscConfig+0x4e0>)
 8006f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fa2:	f7fb fc6b 	bl	800287c <HAL_GetTick>
 8006fa6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fa8:	e008      	b.n	8006fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006faa:	f7fb fc67 	bl	800287c <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b64      	cmp	r3, #100	; 0x64
 8006fb6:	d901      	bls.n	8006fbc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e1a1      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fbc:	4b09      	ldr	r3, [pc, #36]	; (8006fe4 <HAL_RCC_OscConfig+0x4e0>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0f0      	beq.n	8006faa <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d10b      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x4e4>
 8006fd0:	4b03      	ldr	r3, [pc, #12]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd4:	4a02      	ldr	r2, [pc, #8]	; (8006fe0 <HAL_RCC_OscConfig+0x4dc>)
 8006fd6:	f043 0301 	orr.w	r3, r3, #1
 8006fda:	6713      	str	r3, [r2, #112]	; 0x70
 8006fdc:	e05b      	b.n	8007096 <HAL_RCC_OscConfig+0x592>
 8006fde:	bf00      	nop
 8006fe0:	58024400 	.word	0x58024400
 8006fe4:	58024800 	.word	0x58024800
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d112      	bne.n	8007016 <HAL_RCC_OscConfig+0x512>
 8006ff0:	4b9d      	ldr	r3, [pc, #628]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8006ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff4:	4a9c      	ldr	r2, [pc, #624]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8006ffc:	4b9a      	ldr	r3, [pc, #616]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8006ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007000:	4a99      	ldr	r2, [pc, #612]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007006:	6713      	str	r3, [r2, #112]	; 0x70
 8007008:	4b97      	ldr	r3, [pc, #604]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800700a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700c:	4a96      	ldr	r2, [pc, #600]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800700e:	f023 0304 	bic.w	r3, r3, #4
 8007012:	6713      	str	r3, [r2, #112]	; 0x70
 8007014:	e03f      	b.n	8007096 <HAL_RCC_OscConfig+0x592>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	2b05      	cmp	r3, #5
 800701c:	d112      	bne.n	8007044 <HAL_RCC_OscConfig+0x540>
 800701e:	4b92      	ldr	r3, [pc, #584]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007022:	4a91      	ldr	r2, [pc, #580]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007024:	f043 0304 	orr.w	r3, r3, #4
 8007028:	6713      	str	r3, [r2, #112]	; 0x70
 800702a:	4b8f      	ldr	r3, [pc, #572]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800702c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702e:	4a8e      	ldr	r2, [pc, #568]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007034:	6713      	str	r3, [r2, #112]	; 0x70
 8007036:	4b8c      	ldr	r3, [pc, #560]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703a:	4a8b      	ldr	r2, [pc, #556]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800703c:	f043 0301 	orr.w	r3, r3, #1
 8007040:	6713      	str	r3, [r2, #112]	; 0x70
 8007042:	e028      	b.n	8007096 <HAL_RCC_OscConfig+0x592>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	2b85      	cmp	r3, #133	; 0x85
 800704a:	d112      	bne.n	8007072 <HAL_RCC_OscConfig+0x56e>
 800704c:	4b86      	ldr	r3, [pc, #536]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800704e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007050:	4a85      	ldr	r2, [pc, #532]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007052:	f043 0304 	orr.w	r3, r3, #4
 8007056:	6713      	str	r3, [r2, #112]	; 0x70
 8007058:	4b83      	ldr	r3, [pc, #524]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800705a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705c:	4a82      	ldr	r2, [pc, #520]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800705e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007062:	6713      	str	r3, [r2, #112]	; 0x70
 8007064:	4b80      	ldr	r3, [pc, #512]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007068:	4a7f      	ldr	r2, [pc, #508]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800706a:	f043 0301 	orr.w	r3, r3, #1
 800706e:	6713      	str	r3, [r2, #112]	; 0x70
 8007070:	e011      	b.n	8007096 <HAL_RCC_OscConfig+0x592>
 8007072:	4b7d      	ldr	r3, [pc, #500]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007076:	4a7c      	ldr	r2, [pc, #496]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007078:	f023 0301 	bic.w	r3, r3, #1
 800707c:	6713      	str	r3, [r2, #112]	; 0x70
 800707e:	4b7a      	ldr	r3, [pc, #488]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007082:	4a79      	ldr	r2, [pc, #484]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007084:	f023 0304 	bic.w	r3, r3, #4
 8007088:	6713      	str	r3, [r2, #112]	; 0x70
 800708a:	4b77      	ldr	r3, [pc, #476]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800708c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708e:	4a76      	ldr	r2, [pc, #472]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007094:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d015      	beq.n	80070ca <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800709e:	f7fb fbed 	bl	800287c <HAL_GetTick>
 80070a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070a4:	e00a      	b.n	80070bc <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070a6:	f7fb fbe9 	bl	800287c <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d901      	bls.n	80070bc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e121      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070bc:	4b6a      	ldr	r3, [pc, #424]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 80070be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d0ee      	beq.n	80070a6 <HAL_RCC_OscConfig+0x5a2>
 80070c8:	e014      	b.n	80070f4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ca:	f7fb fbd7 	bl	800287c <HAL_GetTick>
 80070ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070d0:	e00a      	b.n	80070e8 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070d2:	f7fb fbd3 	bl	800287c <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d901      	bls.n	80070e8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e10b      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070e8:	4b5f      	ldr	r3, [pc, #380]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 80070ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1ee      	bne.n	80070d2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 8100 	beq.w	80072fe <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80070fe:	4b5a      	ldr	r3, [pc, #360]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007106:	2b18      	cmp	r3, #24
 8007108:	f000 80bb 	beq.w	8007282 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	2b02      	cmp	r3, #2
 8007112:	f040 8095 	bne.w	8007240 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007116:	4b54      	ldr	r3, [pc, #336]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a53      	ldr	r2, [pc, #332]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800711c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007122:	f7fb fbab 	bl	800287c <HAL_GetTick>
 8007126:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007128:	e008      	b.n	800713c <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800712a:	f7fb fba7 	bl	800287c <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d901      	bls.n	800713c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e0e1      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800713c:	4b4a      	ldr	r3, [pc, #296]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1f0      	bne.n	800712a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007148:	4b47      	ldr	r3, [pc, #284]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800714a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800714c:	4b47      	ldr	r3, [pc, #284]	; (800726c <HAL_RCC_OscConfig+0x768>)
 800714e:	4013      	ands	r3, r2
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007158:	0112      	lsls	r2, r2, #4
 800715a:	430a      	orrs	r2, r1
 800715c:	4942      	ldr	r1, [pc, #264]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800715e:	4313      	orrs	r3, r2
 8007160:	628b      	str	r3, [r1, #40]	; 0x28
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007166:	3b01      	subs	r3, #1
 8007168:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007170:	3b01      	subs	r3, #1
 8007172:	025b      	lsls	r3, r3, #9
 8007174:	b29b      	uxth	r3, r3
 8007176:	431a      	orrs	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717c:	3b01      	subs	r3, #1
 800717e:	041b      	lsls	r3, r3, #16
 8007180:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718a:	3b01      	subs	r3, #1
 800718c:	061b      	lsls	r3, r3, #24
 800718e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007192:	4935      	ldr	r1, [pc, #212]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007194:	4313      	orrs	r3, r2
 8007196:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007198:	4b33      	ldr	r3, [pc, #204]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	4a32      	ldr	r2, [pc, #200]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800719e:	f023 0301 	bic.w	r3, r3, #1
 80071a2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80071a4:	4b30      	ldr	r3, [pc, #192]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 80071a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a8:	4b31      	ldr	r3, [pc, #196]	; (8007270 <HAL_RCC_OscConfig+0x76c>)
 80071aa:	4013      	ands	r3, r2
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80071b0:	00d2      	lsls	r2, r2, #3
 80071b2:	492d      	ldr	r1, [pc, #180]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80071b8:	4b2b      	ldr	r3, [pc, #172]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	f023 020c 	bic.w	r2, r3, #12
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	4928      	ldr	r1, [pc, #160]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80071ca:	4b27      	ldr	r3, [pc, #156]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	f023 0202 	bic.w	r2, r3, #2
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d6:	4924      	ldr	r1, [pc, #144]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80071dc:	4b22      	ldr	r3, [pc, #136]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 80071de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e0:	4a21      	ldr	r2, [pc, #132]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 80071e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071e8:	4b1f      	ldr	r3, [pc, #124]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	4a1e      	ldr	r2, [pc, #120]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 80071ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80071f4:	4b1c      	ldr	r3, [pc, #112]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	4a1b      	ldr	r2, [pc, #108]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 80071fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007200:	4b19      	ldr	r3, [pc, #100]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	4a18      	ldr	r2, [pc, #96]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007206:	f043 0301 	orr.w	r3, r3, #1
 800720a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800720c:	4b16      	ldr	r3, [pc, #88]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a15      	ldr	r2, [pc, #84]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007218:	f7fb fb30 	bl	800287c <HAL_GetTick>
 800721c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800721e:	e008      	b.n	8007232 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007220:	f7fb fb2c 	bl	800287c <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	2b02      	cmp	r3, #2
 800722c:	d901      	bls.n	8007232 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e066      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007232:	4b0d      	ldr	r3, [pc, #52]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0f0      	beq.n	8007220 <HAL_RCC_OscConfig+0x71c>
 800723e:	e05e      	b.n	80072fe <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007240:	4b09      	ldr	r3, [pc, #36]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a08      	ldr	r2, [pc, #32]	; (8007268 <HAL_RCC_OscConfig+0x764>)
 8007246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800724a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800724c:	f7fb fb16 	bl	800287c <HAL_GetTick>
 8007250:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007252:	e00f      	b.n	8007274 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007254:	f7fb fb12 	bl	800287c <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d908      	bls.n	8007274 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e04c      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
 8007266:	bf00      	nop
 8007268:	58024400 	.word	0x58024400
 800726c:	fffffc0c 	.word	0xfffffc0c
 8007270:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007274:	4b24      	ldr	r3, [pc, #144]	; (8007308 <HAL_RCC_OscConfig+0x804>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e9      	bne.n	8007254 <HAL_RCC_OscConfig+0x750>
 8007280:	e03d      	b.n	80072fe <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007282:	4b21      	ldr	r3, [pc, #132]	; (8007308 <HAL_RCC_OscConfig+0x804>)
 8007284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007286:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007288:	4b1f      	ldr	r3, [pc, #124]	; (8007308 <HAL_RCC_OscConfig+0x804>)
 800728a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007292:	2b01      	cmp	r3, #1
 8007294:	d031      	beq.n	80072fa <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f003 0203 	and.w	r2, r3, #3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d12a      	bne.n	80072fa <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	091b      	lsrs	r3, r3, #4
 80072a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d122      	bne.n	80072fa <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072be:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d11a      	bne.n	80072fa <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	0a5b      	lsrs	r3, r3, #9
 80072c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d111      	bne.n	80072fa <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	0c1b      	lsrs	r3, r3, #16
 80072da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d108      	bne.n	80072fa <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	0e1b      	lsrs	r3, r3, #24
 80072ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d001      	beq.n	80072fe <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3730      	adds	r7, #48	; 0x30
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	58024400 	.word	0x58024400

0800730c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e19c      	b.n	800765a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007320:	4b8a      	ldr	r3, [pc, #552]	; (800754c <HAL_RCC_ClockConfig+0x240>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 030f 	and.w	r3, r3, #15
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	429a      	cmp	r2, r3
 800732c:	d910      	bls.n	8007350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800732e:	4b87      	ldr	r3, [pc, #540]	; (800754c <HAL_RCC_ClockConfig+0x240>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f023 020f 	bic.w	r2, r3, #15
 8007336:	4985      	ldr	r1, [pc, #532]	; (800754c <HAL_RCC_ClockConfig+0x240>)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	4313      	orrs	r3, r2
 800733c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800733e:	4b83      	ldr	r3, [pc, #524]	; (800754c <HAL_RCC_ClockConfig+0x240>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d001      	beq.n	8007350 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e184      	b.n	800765a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0304 	and.w	r3, r3, #4
 8007358:	2b00      	cmp	r3, #0
 800735a:	d010      	beq.n	800737e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	4b7b      	ldr	r3, [pc, #492]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007368:	429a      	cmp	r2, r3
 800736a:	d908      	bls.n	800737e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800736c:	4b78      	ldr	r3, [pc, #480]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	4975      	ldr	r1, [pc, #468]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 800737a:	4313      	orrs	r3, r2
 800737c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d010      	beq.n	80073ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	695a      	ldr	r2, [r3, #20]
 800738e:	4b70      	ldr	r3, [pc, #448]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007396:	429a      	cmp	r2, r3
 8007398:	d908      	bls.n	80073ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800739a:	4b6d      	ldr	r3, [pc, #436]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	496a      	ldr	r1, [pc, #424]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d010      	beq.n	80073da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	699a      	ldr	r2, [r3, #24]
 80073bc:	4b64      	ldr	r3, [pc, #400]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d908      	bls.n	80073da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073c8:	4b61      	ldr	r3, [pc, #388]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	699b      	ldr	r3, [r3, #24]
 80073d4:	495e      	ldr	r1, [pc, #376]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0320 	and.w	r3, r3, #32
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d010      	beq.n	8007408 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69da      	ldr	r2, [r3, #28]
 80073ea:	4b59      	ldr	r3, [pc, #356]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d908      	bls.n	8007408 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80073f6:	4b56      	ldr	r3, [pc, #344]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	4953      	ldr	r1, [pc, #332]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 8007404:	4313      	orrs	r3, r2
 8007406:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d010      	beq.n	8007436 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68da      	ldr	r2, [r3, #12]
 8007418:	4b4d      	ldr	r3, [pc, #308]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	f003 030f 	and.w	r3, r3, #15
 8007420:	429a      	cmp	r2, r3
 8007422:	d908      	bls.n	8007436 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007424:	4b4a      	ldr	r3, [pc, #296]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	f023 020f 	bic.w	r2, r3, #15
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	4947      	ldr	r1, [pc, #284]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 8007432:	4313      	orrs	r3, r2
 8007434:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d055      	beq.n	80074ee <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007442:	4b43      	ldr	r3, [pc, #268]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	4940      	ldr	r1, [pc, #256]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 8007450:	4313      	orrs	r3, r2
 8007452:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	2b02      	cmp	r3, #2
 800745a:	d107      	bne.n	800746c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800745c:	4b3c      	ldr	r3, [pc, #240]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007464:	2b00      	cmp	r3, #0
 8007466:	d121      	bne.n	80074ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e0f6      	b.n	800765a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	2b03      	cmp	r3, #3
 8007472:	d107      	bne.n	8007484 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007474:	4b36      	ldr	r3, [pc, #216]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d115      	bne.n	80074ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e0ea      	b.n	800765a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d107      	bne.n	800749c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800748c:	4b30      	ldr	r3, [pc, #192]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007494:	2b00      	cmp	r3, #0
 8007496:	d109      	bne.n	80074ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e0de      	b.n	800765a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800749c:	4b2c      	ldr	r3, [pc, #176]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0304 	and.w	r3, r3, #4
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e0d6      	b.n	800765a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80074ac:	4b28      	ldr	r3, [pc, #160]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f023 0207 	bic.w	r2, r3, #7
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	4925      	ldr	r1, [pc, #148]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074be:	f7fb f9dd 	bl	800287c <HAL_GetTick>
 80074c2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074c4:	e00a      	b.n	80074dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074c6:	f7fb f9d9 	bl	800287c <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d901      	bls.n	80074dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e0be      	b.n	800765a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074dc:	4b1c      	ldr	r3, [pc, #112]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	00db      	lsls	r3, r3, #3
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d1eb      	bne.n	80074c6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d010      	beq.n	800751c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	4b14      	ldr	r3, [pc, #80]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	f003 030f 	and.w	r3, r3, #15
 8007506:	429a      	cmp	r2, r3
 8007508:	d208      	bcs.n	800751c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800750a:	4b11      	ldr	r3, [pc, #68]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	f023 020f 	bic.w	r2, r3, #15
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	490e      	ldr	r1, [pc, #56]	; (8007550 <HAL_RCC_ClockConfig+0x244>)
 8007518:	4313      	orrs	r3, r2
 800751a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800751c:	4b0b      	ldr	r3, [pc, #44]	; (800754c <HAL_RCC_ClockConfig+0x240>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 030f 	and.w	r3, r3, #15
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d214      	bcs.n	8007554 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800752a:	4b08      	ldr	r3, [pc, #32]	; (800754c <HAL_RCC_ClockConfig+0x240>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f023 020f 	bic.w	r2, r3, #15
 8007532:	4906      	ldr	r1, [pc, #24]	; (800754c <HAL_RCC_ClockConfig+0x240>)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	4313      	orrs	r3, r2
 8007538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800753a:	4b04      	ldr	r3, [pc, #16]	; (800754c <HAL_RCC_ClockConfig+0x240>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d005      	beq.n	8007554 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e086      	b.n	800765a <HAL_RCC_ClockConfig+0x34e>
 800754c:	52002000 	.word	0x52002000
 8007550:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b00      	cmp	r3, #0
 800755e:	d010      	beq.n	8007582 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	691a      	ldr	r2, [r3, #16]
 8007564:	4b3f      	ldr	r3, [pc, #252]	; (8007664 <HAL_RCC_ClockConfig+0x358>)
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800756c:	429a      	cmp	r2, r3
 800756e:	d208      	bcs.n	8007582 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007570:	4b3c      	ldr	r3, [pc, #240]	; (8007664 <HAL_RCC_ClockConfig+0x358>)
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	4939      	ldr	r1, [pc, #228]	; (8007664 <HAL_RCC_ClockConfig+0x358>)
 800757e:	4313      	orrs	r3, r2
 8007580:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0308 	and.w	r3, r3, #8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d010      	beq.n	80075b0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	695a      	ldr	r2, [r3, #20]
 8007592:	4b34      	ldr	r3, [pc, #208]	; (8007664 <HAL_RCC_ClockConfig+0x358>)
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800759a:	429a      	cmp	r2, r3
 800759c:	d208      	bcs.n	80075b0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800759e:	4b31      	ldr	r3, [pc, #196]	; (8007664 <HAL_RCC_ClockConfig+0x358>)
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	492e      	ldr	r1, [pc, #184]	; (8007664 <HAL_RCC_ClockConfig+0x358>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0310 	and.w	r3, r3, #16
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d010      	beq.n	80075de <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	699a      	ldr	r2, [r3, #24]
 80075c0:	4b28      	ldr	r3, [pc, #160]	; (8007664 <HAL_RCC_ClockConfig+0x358>)
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d208      	bcs.n	80075de <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80075cc:	4b25      	ldr	r3, [pc, #148]	; (8007664 <HAL_RCC_ClockConfig+0x358>)
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	4922      	ldr	r1, [pc, #136]	; (8007664 <HAL_RCC_ClockConfig+0x358>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d010      	beq.n	800760c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	69da      	ldr	r2, [r3, #28]
 80075ee:	4b1d      	ldr	r3, [pc, #116]	; (8007664 <HAL_RCC_ClockConfig+0x358>)
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d208      	bcs.n	800760c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80075fa:	4b1a      	ldr	r3, [pc, #104]	; (8007664 <HAL_RCC_ClockConfig+0x358>)
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	4917      	ldr	r1, [pc, #92]	; (8007664 <HAL_RCC_ClockConfig+0x358>)
 8007608:	4313      	orrs	r3, r2
 800760a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800760c:	f000 f834 	bl	8007678 <HAL_RCC_GetSysClockFreq>
 8007610:	4602      	mov	r2, r0
 8007612:	4b14      	ldr	r3, [pc, #80]	; (8007664 <HAL_RCC_ClockConfig+0x358>)
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	0a1b      	lsrs	r3, r3, #8
 8007618:	f003 030f 	and.w	r3, r3, #15
 800761c:	4912      	ldr	r1, [pc, #72]	; (8007668 <HAL_RCC_ClockConfig+0x35c>)
 800761e:	5ccb      	ldrb	r3, [r1, r3]
 8007620:	f003 031f 	and.w	r3, r3, #31
 8007624:	fa22 f303 	lsr.w	r3, r2, r3
 8007628:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800762a:	4b0e      	ldr	r3, [pc, #56]	; (8007664 <HAL_RCC_ClockConfig+0x358>)
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	f003 030f 	and.w	r3, r3, #15
 8007632:	4a0d      	ldr	r2, [pc, #52]	; (8007668 <HAL_RCC_ClockConfig+0x35c>)
 8007634:	5cd3      	ldrb	r3, [r2, r3]
 8007636:	f003 031f 	and.w	r3, r3, #31
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	fa22 f303 	lsr.w	r3, r2, r3
 8007640:	4a0a      	ldr	r2, [pc, #40]	; (800766c <HAL_RCC_ClockConfig+0x360>)
 8007642:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007644:	4a0a      	ldr	r2, [pc, #40]	; (8007670 <HAL_RCC_ClockConfig+0x364>)
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800764a:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <HAL_RCC_ClockConfig+0x368>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4618      	mov	r0, r3
 8007650:	f7fb f8ca 	bl	80027e8 <HAL_InitTick>
 8007654:	4603      	mov	r3, r0
 8007656:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007658:	7bfb      	ldrb	r3, [r7, #15]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	58024400 	.word	0x58024400
 8007668:	0800ba50 	.word	0x0800ba50
 800766c:	24000008 	.word	0x24000008
 8007670:	24000004 	.word	0x24000004
 8007674:	2400000c 	.word	0x2400000c

08007678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007678:	b480      	push	{r7}
 800767a:	b089      	sub	sp, #36	; 0x24
 800767c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800767e:	4bb3      	ldr	r3, [pc, #716]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007686:	2b18      	cmp	r3, #24
 8007688:	f200 8155 	bhi.w	8007936 <HAL_RCC_GetSysClockFreq+0x2be>
 800768c:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <HAL_RCC_GetSysClockFreq+0x1c>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076f9 	.word	0x080076f9
 8007698:	08007937 	.word	0x08007937
 800769c:	08007937 	.word	0x08007937
 80076a0:	08007937 	.word	0x08007937
 80076a4:	08007937 	.word	0x08007937
 80076a8:	08007937 	.word	0x08007937
 80076ac:	08007937 	.word	0x08007937
 80076b0:	08007937 	.word	0x08007937
 80076b4:	0800771f 	.word	0x0800771f
 80076b8:	08007937 	.word	0x08007937
 80076bc:	08007937 	.word	0x08007937
 80076c0:	08007937 	.word	0x08007937
 80076c4:	08007937 	.word	0x08007937
 80076c8:	08007937 	.word	0x08007937
 80076cc:	08007937 	.word	0x08007937
 80076d0:	08007937 	.word	0x08007937
 80076d4:	08007725 	.word	0x08007725
 80076d8:	08007937 	.word	0x08007937
 80076dc:	08007937 	.word	0x08007937
 80076e0:	08007937 	.word	0x08007937
 80076e4:	08007937 	.word	0x08007937
 80076e8:	08007937 	.word	0x08007937
 80076ec:	08007937 	.word	0x08007937
 80076f0:	08007937 	.word	0x08007937
 80076f4:	0800772b 	.word	0x0800772b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076f8:	4b94      	ldr	r3, [pc, #592]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0320 	and.w	r3, r3, #32
 8007700:	2b00      	cmp	r3, #0
 8007702:	d009      	beq.n	8007718 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007704:	4b91      	ldr	r3, [pc, #580]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	08db      	lsrs	r3, r3, #3
 800770a:	f003 0303 	and.w	r3, r3, #3
 800770e:	4a90      	ldr	r2, [pc, #576]	; (8007950 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007710:	fa22 f303 	lsr.w	r3, r2, r3
 8007714:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007716:	e111      	b.n	800793c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007718:	4b8d      	ldr	r3, [pc, #564]	; (8007950 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800771a:	61bb      	str	r3, [r7, #24]
    break;
 800771c:	e10e      	b.n	800793c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800771e:	4b8d      	ldr	r3, [pc, #564]	; (8007954 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007720:	61bb      	str	r3, [r7, #24]
    break;
 8007722:	e10b      	b.n	800793c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007724:	4b8c      	ldr	r3, [pc, #560]	; (8007958 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007726:	61bb      	str	r3, [r7, #24]
    break;
 8007728:	e108      	b.n	800793c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800772a:	4b88      	ldr	r3, [pc, #544]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800772c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007734:	4b85      	ldr	r3, [pc, #532]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007738:	091b      	lsrs	r3, r3, #4
 800773a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800773e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007740:	4b82      	ldr	r3, [pc, #520]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800774a:	4b80      	ldr	r3, [pc, #512]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800774c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774e:	08db      	lsrs	r3, r3, #3
 8007750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	fb02 f303 	mul.w	r3, r2, r3
 800775a:	ee07 3a90 	vmov	s15, r3
 800775e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007762:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 80e1 	beq.w	8007930 <HAL_RCC_GetSysClockFreq+0x2b8>
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2b02      	cmp	r3, #2
 8007772:	f000 8083 	beq.w	800787c <HAL_RCC_GetSysClockFreq+0x204>
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2b02      	cmp	r3, #2
 800777a:	f200 80a1 	bhi.w	80078c0 <HAL_RCC_GetSysClockFreq+0x248>
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d003      	beq.n	800778c <HAL_RCC_GetSysClockFreq+0x114>
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d056      	beq.n	8007838 <HAL_RCC_GetSysClockFreq+0x1c0>
 800778a:	e099      	b.n	80078c0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800778c:	4b6f      	ldr	r3, [pc, #444]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0320 	and.w	r3, r3, #32
 8007794:	2b00      	cmp	r3, #0
 8007796:	d02d      	beq.n	80077f4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007798:	4b6c      	ldr	r3, [pc, #432]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	08db      	lsrs	r3, r3, #3
 800779e:	f003 0303 	and.w	r3, r3, #3
 80077a2:	4a6b      	ldr	r2, [pc, #428]	; (8007950 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077a4:	fa22 f303 	lsr.w	r3, r2, r3
 80077a8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	ee07 3a90 	vmov	s15, r3
 80077b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	ee07 3a90 	vmov	s15, r3
 80077ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c2:	4b62      	ldr	r3, [pc, #392]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ca:	ee07 3a90 	vmov	s15, r3
 80077ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80077d6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800795c <HAL_RCC_GetSysClockFreq+0x2e4>
 80077da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80077f2:	e087      	b.n	8007904 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	ee07 3a90 	vmov	s15, r3
 80077fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007960 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007806:	4b51      	ldr	r3, [pc, #324]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780e:	ee07 3a90 	vmov	s15, r3
 8007812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007816:	ed97 6a02 	vldr	s12, [r7, #8]
 800781a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800795c <HAL_RCC_GetSysClockFreq+0x2e4>
 800781e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800782a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800782e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007832:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007836:	e065      	b.n	8007904 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	ee07 3a90 	vmov	s15, r3
 800783e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007842:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007964 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800784a:	4b40      	ldr	r3, [pc, #256]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800784c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007852:	ee07 3a90 	vmov	s15, r3
 8007856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800785a:	ed97 6a02 	vldr	s12, [r7, #8]
 800785e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800795c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800786a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800786e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800787a:	e043      	b.n	8007904 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	ee07 3a90 	vmov	s15, r3
 8007882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007886:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007968 <HAL_RCC_GetSysClockFreq+0x2f0>
 800788a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800788e:	4b2f      	ldr	r3, [pc, #188]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007896:	ee07 3a90 	vmov	s15, r3
 800789a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800789e:	ed97 6a02 	vldr	s12, [r7, #8]
 80078a2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800795c <HAL_RCC_GetSysClockFreq+0x2e4>
 80078a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078be:	e021      	b.n	8007904 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	ee07 3a90 	vmov	s15, r3
 80078c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007964 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078d2:	4b1e      	ldr	r3, [pc, #120]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80078e6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800795c <HAL_RCC_GetSysClockFreq+0x2e4>
 80078ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007902:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007904:	4b11      	ldr	r3, [pc, #68]	; (800794c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007908:	0a5b      	lsrs	r3, r3, #9
 800790a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800790e:	3301      	adds	r3, #1
 8007910:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	ee07 3a90 	vmov	s15, r3
 8007918:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800791c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007928:	ee17 3a90 	vmov	r3, s15
 800792c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800792e:	e005      	b.n	800793c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007930:	2300      	movs	r3, #0
 8007932:	61bb      	str	r3, [r7, #24]
    break;
 8007934:	e002      	b.n	800793c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007936:	4b07      	ldr	r3, [pc, #28]	; (8007954 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007938:	61bb      	str	r3, [r7, #24]
    break;
 800793a:	bf00      	nop
  }

  return sysclockfreq;
 800793c:	69bb      	ldr	r3, [r7, #24]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3724      	adds	r7, #36	; 0x24
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	58024400 	.word	0x58024400
 8007950:	03d09000 	.word	0x03d09000
 8007954:	003d0900 	.word	0x003d0900
 8007958:	007a1200 	.word	0x007a1200
 800795c:	46000000 	.word	0x46000000
 8007960:	4c742400 	.word	0x4c742400
 8007964:	4a742400 	.word	0x4a742400
 8007968:	4af42400 	.word	0x4af42400

0800796c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007972:	f7ff fe81 	bl	8007678 <HAL_RCC_GetSysClockFreq>
 8007976:	4602      	mov	r2, r0
 8007978:	4b10      	ldr	r3, [pc, #64]	; (80079bc <HAL_RCC_GetHCLKFreq+0x50>)
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	0a1b      	lsrs	r3, r3, #8
 800797e:	f003 030f 	and.w	r3, r3, #15
 8007982:	490f      	ldr	r1, [pc, #60]	; (80079c0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007984:	5ccb      	ldrb	r3, [r1, r3]
 8007986:	f003 031f 	and.w	r3, r3, #31
 800798a:	fa22 f303 	lsr.w	r3, r2, r3
 800798e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007990:	4b0a      	ldr	r3, [pc, #40]	; (80079bc <HAL_RCC_GetHCLKFreq+0x50>)
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	4a09      	ldr	r2, [pc, #36]	; (80079c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800799a:	5cd3      	ldrb	r3, [r2, r3]
 800799c:	f003 031f 	and.w	r3, r3, #31
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	fa22 f303 	lsr.w	r3, r2, r3
 80079a6:	4a07      	ldr	r2, [pc, #28]	; (80079c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80079a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079aa:	4a07      	ldr	r2, [pc, #28]	; (80079c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80079b0:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80079b2:	681b      	ldr	r3, [r3, #0]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	58024400 	.word	0x58024400
 80079c0:	0800ba50 	.word	0x0800ba50
 80079c4:	24000008 	.word	0x24000008
 80079c8:	24000004 	.word	0x24000004

080079cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80079d0:	f7ff ffcc 	bl	800796c <HAL_RCC_GetHCLKFreq>
 80079d4:	4602      	mov	r2, r0
 80079d6:	4b06      	ldr	r3, [pc, #24]	; (80079f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	091b      	lsrs	r3, r3, #4
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	4904      	ldr	r1, [pc, #16]	; (80079f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079e2:	5ccb      	ldrb	r3, [r1, r3]
 80079e4:	f003 031f 	and.w	r3, r3, #31
 80079e8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	58024400 	.word	0x58024400
 80079f4:	0800ba50 	.word	0x0800ba50

080079f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80079fc:	f7ff ffb6 	bl	800796c <HAL_RCC_GetHCLKFreq>
 8007a00:	4602      	mov	r2, r0
 8007a02:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	0a1b      	lsrs	r3, r3, #8
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	4904      	ldr	r1, [pc, #16]	; (8007a20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a0e:	5ccb      	ldrb	r3, [r1, r3]
 8007a10:	f003 031f 	and.w	r3, r3, #31
 8007a14:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	58024400 	.word	0x58024400
 8007a20:	0800ba50 	.word	0x0800ba50

08007a24 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a30:	2300      	movs	r3, #0
 8007a32:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d03f      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a48:	d02a      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007a4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a4e:	d824      	bhi.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a54:	d018      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007a56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a5a:	d81e      	bhi.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a64:	d007      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007a66:	e018      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a68:	4b9f      	ldr	r3, [pc, #636]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	4a9e      	ldr	r2, [pc, #632]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a74:	e015      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	2102      	movs	r1, #2
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f001 ff1b 	bl	80098b8 <RCCEx_PLL2_Config>
 8007a82:	4603      	mov	r3, r0
 8007a84:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a86:	e00c      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3324      	adds	r3, #36	; 0x24
 8007a8c:	2102      	movs	r1, #2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f001 ffc4 	bl	8009a1c <RCCEx_PLL3_Config>
 8007a94:	4603      	mov	r3, r0
 8007a96:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007a98:	e003      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a9e:	e000      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d109      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007aa8:	4b8f      	ldr	r3, [pc, #572]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ab4:	498c      	ldr	r1, [pc, #560]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	650b      	str	r3, [r1, #80]	; 0x50
 8007aba:	e001      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d03d      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d826      	bhi.n	8007b22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007ad4:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007af1 	.word	0x08007af1
 8007ae0:	08007aff 	.word	0x08007aff
 8007ae4:	08007b11 	.word	0x08007b11
 8007ae8:	08007b29 	.word	0x08007b29
 8007aec:	08007b29 	.word	0x08007b29
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007af0:	4b7d      	ldr	r3, [pc, #500]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	4a7c      	ldr	r2, [pc, #496]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007afc:	e015      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3304      	adds	r3, #4
 8007b02:	2100      	movs	r1, #0
 8007b04:	4618      	mov	r0, r3
 8007b06:	f001 fed7 	bl	80098b8 <RCCEx_PLL2_Config>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b0e:	e00c      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3324      	adds	r3, #36	; 0x24
 8007b14:	2100      	movs	r1, #0
 8007b16:	4618      	mov	r0, r3
 8007b18:	f001 ff80 	bl	8009a1c <RCCEx_PLL3_Config>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b20:	e003      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	75fb      	strb	r3, [r7, #23]
      break;
 8007b26:	e000      	b.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d109      	bne.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b30:	4b6d      	ldr	r3, [pc, #436]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b34:	f023 0207 	bic.w	r2, r3, #7
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3c:	496a      	ldr	r1, [pc, #424]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	650b      	str	r3, [r1, #80]	; 0x50
 8007b42:	e001      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d04a      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b58:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007b5c:	d031      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8007b5e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007b62:	d82b      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b68:	d02d      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8007b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b6e:	d825      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007b70:	2bc0      	cmp	r3, #192	; 0xc0
 8007b72:	d02a      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007b74:	2bc0      	cmp	r3, #192	; 0xc0
 8007b76:	d821      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007b78:	2b80      	cmp	r3, #128	; 0x80
 8007b7a:	d016      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007b7c:	2b80      	cmp	r3, #128	; 0x80
 8007b7e:	d81d      	bhi.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007b84:	2b40      	cmp	r3, #64	; 0x40
 8007b86:	d007      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8007b88:	e018      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b8a:	4b57      	ldr	r3, [pc, #348]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8e:	4a56      	ldr	r2, [pc, #344]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8007b96:	e019      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f001 fe8a 	bl	80098b8 <RCCEx_PLL2_Config>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8007ba8:	e010      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3324      	adds	r3, #36	; 0x24
 8007bae:	2100      	movs	r1, #0
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f001 ff33 	bl	8009a1c <RCCEx_PLL3_Config>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8007bba:	e007      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc0:	e004      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007bc2:	bf00      	nop
 8007bc4:	e002      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007bc6:	bf00      	nop
 8007bc8:	e000      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d109      	bne.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007bd2:	4b45      	ldr	r3, [pc, #276]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bde:	4942      	ldr	r1, [pc, #264]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	650b      	str	r3, [r1, #80]	; 0x50
 8007be4:	e001      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
 8007be8:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d04f      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bfa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007bfe:	d036      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007c00:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007c04:	d830      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c0a:	d032      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c10:	d82a      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007c12:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007c16:	d02e      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8007c18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007c1c:	d824      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c22:	d018      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8007c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c28:	d81e      	bhi.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8007c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c32:	d007      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8007c34:	e018      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c36:	4b2c      	ldr	r3, [pc, #176]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3a:	4a2b      	ldr	r2, [pc, #172]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007c42:	e019      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3304      	adds	r3, #4
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f001 fe34 	bl	80098b8 <RCCEx_PLL2_Config>
 8007c50:	4603      	mov	r3, r0
 8007c52:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007c54:	e010      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	3324      	adds	r3, #36	; 0x24
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f001 fedd 	bl	8009a1c <RCCEx_PLL3_Config>
 8007c62:	4603      	mov	r3, r0
 8007c64:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007c66:	e007      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c6c:	e004      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007c6e:	bf00      	nop
 8007c70:	e002      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007c72:	bf00      	nop
 8007c74:	e000      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d109      	bne.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007c7e:	4b1a      	ldr	r3, [pc, #104]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c82:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c8a:	4917      	ldr	r1, [pc, #92]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	650b      	str	r3, [r1, #80]	; 0x50
 8007c90:	e001      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d034      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ca6:	2b30      	cmp	r3, #48	; 0x30
 8007ca8:	d01c      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8007caa:	2b30      	cmp	r3, #48	; 0x30
 8007cac:	d817      	bhi.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	d00c      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	d813      	bhi.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d018      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8007cba:	2b10      	cmp	r3, #16
 8007cbc:	d10f      	bne.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cbe:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	4a09      	ldr	r2, [pc, #36]	; (8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007cca:	e010      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3304      	adds	r3, #4
 8007cd0:	2102      	movs	r1, #2
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 fdf0 	bl	80098b8 <RCCEx_PLL2_Config>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007cdc:	e007      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce2:	e004      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8007ce4:	bf00      	nop
 8007ce6:	e002      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ce8:	58024400 	.word	0x58024400
      break;
 8007cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d109      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007cf4:	4b9b      	ldr	r3, [pc, #620]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cf8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d00:	4998      	ldr	r1, [pc, #608]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d06:	e001      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d047      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d20:	d030      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007d22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d26:	d82a      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007d28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d2c:	d02c      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8007d2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d32:	d824      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d38:	d018      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d3e:	d81e      	bhi.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d48:	d007      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007d4a:	e018      	b.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d4c:	4b85      	ldr	r3, [pc, #532]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	4a84      	ldr	r2, [pc, #528]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d58:	e017      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	2100      	movs	r1, #0
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 fda9 	bl	80098b8 <RCCEx_PLL2_Config>
 8007d66:	4603      	mov	r3, r0
 8007d68:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d6a:	e00e      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3324      	adds	r3, #36	; 0x24
 8007d70:	2100      	movs	r1, #0
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 fe52 	bl	8009a1c <RCCEx_PLL3_Config>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007d7c:	e005      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	75fb      	strb	r3, [r7, #23]
      break;
 8007d82:	e002      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8007d84:	bf00      	nop
 8007d86:	e000      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8007d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d8a:	7dfb      	ldrb	r3, [r7, #23]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d109      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007d90:	4b74      	ldr	r3, [pc, #464]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d94:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d9c:	4971      	ldr	r1, [pc, #452]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	650b      	str	r3, [r1, #80]	; 0x50
 8007da2:	e001      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
 8007da6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d049      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dbc:	d02e      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007dbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dc2:	d828      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007dc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dc8:	d02a      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007dca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dce:	d822      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007dd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dd4:	d026      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8007dd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007dda:	d81c      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007de0:	d010      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007de6:	d816      	bhi.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d01d      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007df0:	d111      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3304      	adds	r3, #4
 8007df6:	2101      	movs	r1, #1
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f001 fd5d 	bl	80098b8 <RCCEx_PLL2_Config>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e02:	e012      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3324      	adds	r3, #36	; 0x24
 8007e08:	2101      	movs	r1, #1
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f001 fe06 	bl	8009a1c <RCCEx_PLL3_Config>
 8007e10:	4603      	mov	r3, r0
 8007e12:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007e14:	e009      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	75fb      	strb	r3, [r7, #23]
      break;
 8007e1a:	e006      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007e1c:	bf00      	nop
 8007e1e:	e004      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007e20:	bf00      	nop
 8007e22:	e002      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007e24:	bf00      	nop
 8007e26:	e000      	b.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d109      	bne.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007e30:	4b4c      	ldr	r3, [pc, #304]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e34:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e3c:	4949      	ldr	r1, [pc, #292]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	650b      	str	r3, [r1, #80]	; 0x50
 8007e42:	e001      	b.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e44:	7dfb      	ldrb	r3, [r7, #23]
 8007e46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d053      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e5a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007e5e:	d034      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007e60:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007e64:	d82e      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e6a:	d030      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8007e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e70:	d828      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e76:	d02c      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7c:	d822      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007e7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e82:	d028      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007e84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e88:	d81c      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e8e:	d010      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8007e90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e94:	d816      	bhi.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01f      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e9e:	d111      	bne.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f001 fd06 	bl	80098b8 <RCCEx_PLL2_Config>
 8007eac:	4603      	mov	r3, r0
 8007eae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007eb0:	e014      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3324      	adds	r3, #36	; 0x24
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f001 fdaf 	bl	8009a1c <RCCEx_PLL3_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007ec2:	e00b      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ec8:	e008      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007eca:	bf00      	nop
 8007ecc:	e006      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007ece:	bf00      	nop
 8007ed0:	e004      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007ed2:	bf00      	nop
 8007ed4:	e002      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007ed6:	bf00      	nop
 8007ed8:	e000      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007edc:	7dfb      	ldrb	r3, [r7, #23]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d10a      	bne.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ee2:	4b20      	ldr	r3, [pc, #128]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ef0:	491c      	ldr	r1, [pc, #112]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	658b      	str	r3, [r1, #88]	; 0x58
 8007ef6:	e001      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef8:	7dfb      	ldrb	r3, [r7, #23]
 8007efa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d031      	beq.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f10:	d00e      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f16:	d814      	bhi.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d015      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007f1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f20:	d10f      	bne.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f22:	4b10      	ldr	r3, [pc, #64]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f26:	4a0f      	ldr	r2, [pc, #60]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f2e:	e00c      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3304      	adds	r3, #4
 8007f34:	2101      	movs	r1, #1
 8007f36:	4618      	mov	r0, r3
 8007f38:	f001 fcbe 	bl	80098b8 <RCCEx_PLL2_Config>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007f40:	e003      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	75fb      	strb	r3, [r7, #23]
      break;
 8007f46:	e000      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8007f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f4a:	7dfb      	ldrb	r3, [r7, #23]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10b      	bne.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f50:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f5c:	4901      	ldr	r1, [pc, #4]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	650b      	str	r3, [r1, #80]	; 0x50
 8007f62:	e003      	b.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x548>
 8007f64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f68:	7dfb      	ldrb	r3, [r7, #23]
 8007f6a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d032      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	d81b      	bhi.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007f80:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f86:	bf00      	nop
 8007f88:	08007fbf 	.word	0x08007fbf
 8007f8c:	08007f99 	.word	0x08007f99
 8007f90:	08007fa7 	.word	0x08007fa7
 8007f94:	08007fbf 	.word	0x08007fbf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f98:	4bb2      	ldr	r3, [pc, #712]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	4ab1      	ldr	r2, [pc, #708]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007fa4:	e00c      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3304      	adds	r3, #4
 8007faa:	2102      	movs	r1, #2
 8007fac:	4618      	mov	r0, r3
 8007fae:	f001 fc83 	bl	80098b8 <RCCEx_PLL2_Config>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007fb6:	e003      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	75fb      	strb	r3, [r7, #23]
      break;
 8007fbc:	e000      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d109      	bne.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007fc6:	4ba7      	ldr	r3, [pc, #668]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fca:	f023 0203 	bic.w	r2, r3, #3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd2:	49a4      	ldr	r1, [pc, #656]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007fd8:	e001      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 8086 	beq.w	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007fec:	4b9e      	ldr	r3, [pc, #632]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a9d      	ldr	r2, [pc, #628]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ff6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ff8:	f7fa fc40 	bl	800287c <HAL_GetTick>
 8007ffc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ffe:	e009      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008000:	f7fa fc3c 	bl	800287c <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b64      	cmp	r3, #100	; 0x64
 800800c:	d902      	bls.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	75fb      	strb	r3, [r7, #23]
        break;
 8008012:	e005      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008014:	4b94      	ldr	r3, [pc, #592]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800801c:	2b00      	cmp	r3, #0
 800801e:	d0ef      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d166      	bne.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008026:	4b8f      	ldr	r3, [pc, #572]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008028:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008030:	4053      	eors	r3, r2
 8008032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008036:	2b00      	cmp	r3, #0
 8008038:	d013      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800803a:	4b8a      	ldr	r3, [pc, #552]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800803c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008042:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008044:	4b87      	ldr	r3, [pc, #540]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008048:	4a86      	ldr	r2, [pc, #536]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800804a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800804e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008050:	4b84      	ldr	r3, [pc, #528]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008054:	4a83      	ldr	r2, [pc, #524]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800805a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800805c:	4a81      	ldr	r2, [pc, #516]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800806c:	d115      	bne.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806e:	f7fa fc05 	bl	800287c <HAL_GetTick>
 8008072:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008074:	e00b      	b.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008076:	f7fa fc01 	bl	800287c <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	f241 3288 	movw	r2, #5000	; 0x1388
 8008084:	4293      	cmp	r3, r2
 8008086:	d902      	bls.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	75fb      	strb	r3, [r7, #23]
            break;
 800808c:	e005      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800808e:	4b75      	ldr	r3, [pc, #468]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d0ed      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800809a:	7dfb      	ldrb	r3, [r7, #23]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d126      	bne.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080ae:	d10d      	bne.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80080b0:	4b6c      	ldr	r3, [pc, #432]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080be:	0919      	lsrs	r1, r3, #4
 80080c0:	4b6a      	ldr	r3, [pc, #424]	; (800826c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80080c2:	400b      	ands	r3, r1
 80080c4:	4967      	ldr	r1, [pc, #412]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	610b      	str	r3, [r1, #16]
 80080ca:	e005      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80080cc:	4b65      	ldr	r3, [pc, #404]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	4a64      	ldr	r2, [pc, #400]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80080d6:	6113      	str	r3, [r2, #16]
 80080d8:	4b62      	ldr	r3, [pc, #392]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080e6:	495f      	ldr	r1, [pc, #380]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	670b      	str	r3, [r1, #112]	; 0x70
 80080ec:	e004      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	75bb      	strb	r3, [r7, #22]
 80080f2:	e001      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f4:	7dfb      	ldrb	r3, [r7, #23]
 80080f6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	2b00      	cmp	r3, #0
 8008102:	d07f      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800810a:	2b28      	cmp	r3, #40	; 0x28
 800810c:	d866      	bhi.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 800810e:	a201      	add	r2, pc, #4	; (adr r2, 8008114 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8008110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008114:	080081e3 	.word	0x080081e3
 8008118:	080081dd 	.word	0x080081dd
 800811c:	080081dd 	.word	0x080081dd
 8008120:	080081dd 	.word	0x080081dd
 8008124:	080081dd 	.word	0x080081dd
 8008128:	080081dd 	.word	0x080081dd
 800812c:	080081dd 	.word	0x080081dd
 8008130:	080081dd 	.word	0x080081dd
 8008134:	080081b9 	.word	0x080081b9
 8008138:	080081dd 	.word	0x080081dd
 800813c:	080081dd 	.word	0x080081dd
 8008140:	080081dd 	.word	0x080081dd
 8008144:	080081dd 	.word	0x080081dd
 8008148:	080081dd 	.word	0x080081dd
 800814c:	080081dd 	.word	0x080081dd
 8008150:	080081dd 	.word	0x080081dd
 8008154:	080081cb 	.word	0x080081cb
 8008158:	080081dd 	.word	0x080081dd
 800815c:	080081dd 	.word	0x080081dd
 8008160:	080081dd 	.word	0x080081dd
 8008164:	080081dd 	.word	0x080081dd
 8008168:	080081dd 	.word	0x080081dd
 800816c:	080081dd 	.word	0x080081dd
 8008170:	080081dd 	.word	0x080081dd
 8008174:	080081e3 	.word	0x080081e3
 8008178:	080081dd 	.word	0x080081dd
 800817c:	080081dd 	.word	0x080081dd
 8008180:	080081dd 	.word	0x080081dd
 8008184:	080081dd 	.word	0x080081dd
 8008188:	080081dd 	.word	0x080081dd
 800818c:	080081dd 	.word	0x080081dd
 8008190:	080081dd 	.word	0x080081dd
 8008194:	080081e3 	.word	0x080081e3
 8008198:	080081dd 	.word	0x080081dd
 800819c:	080081dd 	.word	0x080081dd
 80081a0:	080081dd 	.word	0x080081dd
 80081a4:	080081dd 	.word	0x080081dd
 80081a8:	080081dd 	.word	0x080081dd
 80081ac:	080081dd 	.word	0x080081dd
 80081b0:	080081dd 	.word	0x080081dd
 80081b4:	080081e3 	.word	0x080081e3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3304      	adds	r3, #4
 80081bc:	2101      	movs	r1, #1
 80081be:	4618      	mov	r0, r3
 80081c0:	f001 fb7a 	bl	80098b8 <RCCEx_PLL2_Config>
 80081c4:	4603      	mov	r3, r0
 80081c6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80081c8:	e00c      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3324      	adds	r3, #36	; 0x24
 80081ce:	2101      	movs	r1, #1
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 fc23 	bl	8009a1c <RCCEx_PLL3_Config>
 80081d6:	4603      	mov	r3, r0
 80081d8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80081da:	e003      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	75fb      	strb	r3, [r7, #23]
      break;
 80081e0:	e000      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80081e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80081ea:	4b1e      	ldr	r3, [pc, #120]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80081ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081f8:	491a      	ldr	r1, [pc, #104]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	654b      	str	r3, [r1, #84]	; 0x54
 80081fe:	e001      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008200:	7dfb      	ldrb	r3, [r7, #23]
 8008202:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0302 	and.w	r3, r3, #2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d03f      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008214:	2b05      	cmp	r3, #5
 8008216:	d821      	bhi.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8008218:	a201      	add	r2, pc, #4	; (adr r2, 8008220 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800821a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821e:	bf00      	nop
 8008220:	08008271 	.word	0x08008271
 8008224:	08008239 	.word	0x08008239
 8008228:	0800824b 	.word	0x0800824b
 800822c:	08008271 	.word	0x08008271
 8008230:	08008271 	.word	0x08008271
 8008234:	08008271 	.word	0x08008271
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3304      	adds	r3, #4
 800823c:	2101      	movs	r1, #1
 800823e:	4618      	mov	r0, r3
 8008240:	f001 fb3a 	bl	80098b8 <RCCEx_PLL2_Config>
 8008244:	4603      	mov	r3, r0
 8008246:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008248:	e013      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	3324      	adds	r3, #36	; 0x24
 800824e:	2101      	movs	r1, #1
 8008250:	4618      	mov	r0, r3
 8008252:	f001 fbe3 	bl	8009a1c <RCCEx_PLL3_Config>
 8008256:	4603      	mov	r3, r0
 8008258:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800825a:	e00a      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	75fb      	strb	r3, [r7, #23]
      break;
 8008260:	e007      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8008262:	bf00      	nop
 8008264:	58024400 	.word	0x58024400
 8008268:	58024800 	.word	0x58024800
 800826c:	00ffffcf 	.word	0x00ffffcf
      break;
 8008270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d109      	bne.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008278:	4b9f      	ldr	r3, [pc, #636]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800827a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800827c:	f023 0207 	bic.w	r2, r3, #7
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008284:	499c      	ldr	r1, [pc, #624]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008286:	4313      	orrs	r3, r2
 8008288:	654b      	str	r3, [r1, #84]	; 0x54
 800828a:	e001      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800828c:	7dfb      	ldrb	r3, [r7, #23]
 800828e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	d039      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082a2:	2b05      	cmp	r3, #5
 80082a4:	d820      	bhi.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80082a6:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	080082ef 	.word	0x080082ef
 80082b0:	080082c5 	.word	0x080082c5
 80082b4:	080082d7 	.word	0x080082d7
 80082b8:	080082ef 	.word	0x080082ef
 80082bc:	080082ef 	.word	0x080082ef
 80082c0:	080082ef 	.word	0x080082ef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3304      	adds	r3, #4
 80082c8:	2101      	movs	r1, #1
 80082ca:	4618      	mov	r0, r3
 80082cc:	f001 faf4 	bl	80098b8 <RCCEx_PLL2_Config>
 80082d0:	4603      	mov	r3, r0
 80082d2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80082d4:	e00c      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3324      	adds	r3, #36	; 0x24
 80082da:	2101      	movs	r1, #1
 80082dc:	4618      	mov	r0, r3
 80082de:	f001 fb9d 	bl	8009a1c <RCCEx_PLL3_Config>
 80082e2:	4603      	mov	r3, r0
 80082e4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80082e6:	e003      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	75fb      	strb	r3, [r7, #23]
      break;
 80082ec:	e000      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80082ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10a      	bne.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082f6:	4b80      	ldr	r3, [pc, #512]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80082f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082fa:	f023 0207 	bic.w	r2, r3, #7
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008304:	497c      	ldr	r1, [pc, #496]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008306:	4313      	orrs	r3, r2
 8008308:	658b      	str	r3, [r1, #88]	; 0x58
 800830a:	e001      	b.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800830c:	7dfb      	ldrb	r3, [r7, #23]
 800830e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0320 	and.w	r3, r3, #32
 8008318:	2b00      	cmp	r3, #0
 800831a:	d04b      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008322:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008326:	d02e      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8008328:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800832c:	d828      	bhi.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800832e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008332:	d02a      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008338:	d822      	bhi.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800833a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800833e:	d026      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008340:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008344:	d81c      	bhi.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800834a:	d010      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800834c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008350:	d816      	bhi.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008352:	2b00      	cmp	r3, #0
 8008354:	d01d      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008356:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800835a:	d111      	bne.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3304      	adds	r3, #4
 8008360:	2100      	movs	r1, #0
 8008362:	4618      	mov	r0, r3
 8008364:	f001 faa8 	bl	80098b8 <RCCEx_PLL2_Config>
 8008368:	4603      	mov	r3, r0
 800836a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800836c:	e012      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	3324      	adds	r3, #36	; 0x24
 8008372:	2102      	movs	r1, #2
 8008374:	4618      	mov	r0, r3
 8008376:	f001 fb51 	bl	8009a1c <RCCEx_PLL3_Config>
 800837a:	4603      	mov	r3, r0
 800837c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800837e:	e009      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	75fb      	strb	r3, [r7, #23]
      break;
 8008384:	e006      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008386:	bf00      	nop
 8008388:	e004      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800838a:	bf00      	nop
 800838c:	e002      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800838e:	bf00      	nop
 8008390:	e000      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008392:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10a      	bne.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800839a:	4b57      	ldr	r3, [pc, #348]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800839c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083a8:	4953      	ldr	r1, [pc, #332]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	654b      	str	r3, [r1, #84]	; 0x54
 80083ae:	e001      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d04b      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80083c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083ca:	d02e      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80083cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083d0:	d828      	bhi.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80083d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d6:	d02a      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80083d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083dc:	d822      	bhi.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80083de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083e2:	d026      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80083e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083e8:	d81c      	bhi.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80083ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ee:	d010      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80083f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083f4:	d816      	bhi.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d01d      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80083fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083fe:	d111      	bne.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3304      	adds	r3, #4
 8008404:	2100      	movs	r1, #0
 8008406:	4618      	mov	r0, r3
 8008408:	f001 fa56 	bl	80098b8 <RCCEx_PLL2_Config>
 800840c:	4603      	mov	r3, r0
 800840e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008410:	e012      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	3324      	adds	r3, #36	; 0x24
 8008416:	2102      	movs	r1, #2
 8008418:	4618      	mov	r0, r3
 800841a:	f001 faff 	bl	8009a1c <RCCEx_PLL3_Config>
 800841e:	4603      	mov	r3, r0
 8008420:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008422:	e009      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	75fb      	strb	r3, [r7, #23]
      break;
 8008428:	e006      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800842a:	bf00      	nop
 800842c:	e004      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800842e:	bf00      	nop
 8008430:	e002      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008432:	bf00      	nop
 8008434:	e000      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008438:	7dfb      	ldrb	r3, [r7, #23]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800843e:	4b2e      	ldr	r3, [pc, #184]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008442:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800844c:	492a      	ldr	r1, [pc, #168]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800844e:	4313      	orrs	r3, r2
 8008450:	658b      	str	r3, [r1, #88]	; 0x58
 8008452:	e001      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008454:	7dfb      	ldrb	r3, [r7, #23]
 8008456:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008460:	2b00      	cmp	r3, #0
 8008462:	d04d      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800846a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800846e:	d02e      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8008470:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008474:	d828      	bhi.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800847a:	d02a      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800847c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008480:	d822      	bhi.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008482:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008486:	d026      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008488:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800848c:	d81c      	bhi.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800848e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008492:	d010      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8008494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008498:	d816      	bhi.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d01d      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800849e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a2:	d111      	bne.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	3304      	adds	r3, #4
 80084a8:	2100      	movs	r1, #0
 80084aa:	4618      	mov	r0, r3
 80084ac:	f001 fa04 	bl	80098b8 <RCCEx_PLL2_Config>
 80084b0:	4603      	mov	r3, r0
 80084b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084b4:	e012      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	3324      	adds	r3, #36	; 0x24
 80084ba:	2102      	movs	r1, #2
 80084bc:	4618      	mov	r0, r3
 80084be:	f001 faad 	bl	8009a1c <RCCEx_PLL3_Config>
 80084c2:	4603      	mov	r3, r0
 80084c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80084c6:	e009      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	75fb      	strb	r3, [r7, #23]
      break;
 80084cc:	e006      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80084ce:	bf00      	nop
 80084d0:	e004      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80084d2:	bf00      	nop
 80084d4:	e002      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80084d6:	bf00      	nop
 80084d8:	e000      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80084da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10c      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80084e2:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80084e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80084f0:	4901      	ldr	r1, [pc, #4]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	658b      	str	r3, [r1, #88]	; 0x58
 80084f6:	e003      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80084f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
 80084fe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0308 	and.w	r3, r3, #8
 8008508:	2b00      	cmp	r3, #0
 800850a:	d01a      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008516:	d10a      	bne.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3324      	adds	r3, #36	; 0x24
 800851c:	2102      	movs	r1, #2
 800851e:	4618      	mov	r0, r3
 8008520:	f001 fa7c 	bl	8009a1c <RCCEx_PLL3_Config>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800852e:	4b8c      	ldr	r3, [pc, #560]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008532:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800853c:	4988      	ldr	r1, [pc, #544]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800853e:	4313      	orrs	r3, r2
 8008540:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0310 	and.w	r3, r3, #16
 800854a:	2b00      	cmp	r3, #0
 800854c:	d01a      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008558:	d10a      	bne.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	3324      	adds	r3, #36	; 0x24
 800855e:	2102      	movs	r1, #2
 8008560:	4618      	mov	r0, r3
 8008562:	f001 fa5b 	bl	8009a1c <RCCEx_PLL3_Config>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008570:	4b7b      	ldr	r3, [pc, #492]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008574:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800857e:	4978      	ldr	r1, [pc, #480]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008580:	4313      	orrs	r3, r2
 8008582:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d034      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800859a:	d01d      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800859c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085a0:	d817      	bhi.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80085a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085aa:	d009      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80085ac:	e011      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3304      	adds	r3, #4
 80085b2:	2100      	movs	r1, #0
 80085b4:	4618      	mov	r0, r3
 80085b6:	f001 f97f 	bl	80098b8 <RCCEx_PLL2_Config>
 80085ba:	4603      	mov	r3, r0
 80085bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80085be:	e00c      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	3324      	adds	r3, #36	; 0x24
 80085c4:	2102      	movs	r1, #2
 80085c6:	4618      	mov	r0, r3
 80085c8:	f001 fa28 	bl	8009a1c <RCCEx_PLL3_Config>
 80085cc:	4603      	mov	r3, r0
 80085ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80085d0:	e003      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	75fb      	strb	r3, [r7, #23]
      break;
 80085d6:	e000      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80085d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085e0:	4b5f      	ldr	r3, [pc, #380]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80085e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80085ee:	495c      	ldr	r1, [pc, #368]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	658b      	str	r3, [r1, #88]	; 0x58
 80085f4:	e001      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
 80085f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d033      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800860c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008610:	d01c      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008612:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008616:	d816      	bhi.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008618:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800861c:	d003      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800861e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008622:	d007      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008624:	e00f      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008626:	4b4e      	ldr	r3, [pc, #312]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862a:	4a4d      	ldr	r2, [pc, #308]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800862c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008630:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008632:	e00c      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3324      	adds	r3, #36	; 0x24
 8008638:	2101      	movs	r1, #1
 800863a:	4618      	mov	r0, r3
 800863c:	f001 f9ee 	bl	8009a1c <RCCEx_PLL3_Config>
 8008640:	4603      	mov	r3, r0
 8008642:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008644:	e003      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	75fb      	strb	r3, [r7, #23]
      break;
 800864a:	e000      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800864c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800864e:	7dfb      	ldrb	r3, [r7, #23]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10a      	bne.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008654:	4b42      	ldr	r3, [pc, #264]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008658:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008662:	493f      	ldr	r1, [pc, #252]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008664:	4313      	orrs	r3, r2
 8008666:	654b      	str	r3, [r1, #84]	; 0x54
 8008668:	e001      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800866a:	7dfb      	ldrb	r3, [r7, #23]
 800866c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d029      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8008682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008686:	d007      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008688:	e00f      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800868a:	4b35      	ldr	r3, [pc, #212]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800868c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868e:	4a34      	ldr	r2, [pc, #208]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008694:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008696:	e00b      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	3304      	adds	r3, #4
 800869c:	2102      	movs	r1, #2
 800869e:	4618      	mov	r0, r3
 80086a0:	f001 f90a 	bl	80098b8 <RCCEx_PLL2_Config>
 80086a4:	4603      	mov	r3, r0
 80086a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80086a8:	e002      	b.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	75fb      	strb	r3, [r7, #23]
      break;
 80086ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086b0:	7dfb      	ldrb	r3, [r7, #23]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d109      	bne.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80086b6:	4b2a      	ldr	r3, [pc, #168]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80086b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c2:	4927      	ldr	r1, [pc, #156]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80086c8:	e001      	b.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ca:	7dfb      	ldrb	r3, [r7, #23]
 80086cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3324      	adds	r3, #36	; 0x24
 80086de:	2102      	movs	r1, #2
 80086e0:	4618      	mov	r0, r3
 80086e2:	f001 f99b 	bl	8009a1c <RCCEx_PLL3_Config>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d035      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008706:	d017      	beq.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800870c:	d811      	bhi.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800870e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008712:	d013      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008718:	d80b      	bhi.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800871a:	2b00      	cmp	r3, #0
 800871c:	d010      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800871e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008722:	d106      	bne.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008724:	4b0e      	ldr	r3, [pc, #56]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	4a0d      	ldr	r2, [pc, #52]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800872a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800872e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008730:	e007      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	75fb      	strb	r3, [r7, #23]
      break;
 8008736:	e004      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008738:	bf00      	nop
 800873a:	e002      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800873c:	bf00      	nop
 800873e:	e000      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10d      	bne.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008748:	4b05      	ldr	r3, [pc, #20]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800874a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800874c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008756:	4902      	ldr	r1, [pc, #8]	; (8008760 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008758:	4313      	orrs	r3, r2
 800875a:	654b      	str	r3, [r1, #84]	; 0x54
 800875c:	e004      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800875e:	bf00      	nop
 8008760:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d008      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008774:	4b30      	ldr	r3, [pc, #192]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008778:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008780:	492d      	ldr	r1, [pc, #180]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008782:	4313      	orrs	r3, r2
 8008784:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d008      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008792:	4b29      	ldr	r3, [pc, #164]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008796:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800879e:	4926      	ldr	r1, [pc, #152]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d008      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80087b0:	4b21      	ldr	r3, [pc, #132]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80087b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087bc:	491e      	ldr	r1, [pc, #120]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00d      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087ce:	4b1a      	ldr	r3, [pc, #104]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	4a19      	ldr	r2, [pc, #100]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80087d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087d8:	6113      	str	r3, [r2, #16]
 80087da:	4b17      	ldr	r3, [pc, #92]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80087dc:	691a      	ldr	r2, [r3, #16]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087e4:	4914      	ldr	r1, [pc, #80]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	da08      	bge.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80087f2:	4b11      	ldr	r3, [pc, #68]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80087f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087fe:	490e      	ldr	r1, [pc, #56]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008800:	4313      	orrs	r3, r2
 8008802:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d009      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008810:	4b09      	ldr	r3, [pc, #36]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008814:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800881e:	4906      	ldr	r1, [pc, #24]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008820:	4313      	orrs	r3, r2
 8008822:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008824:	7dbb      	ldrb	r3, [r7, #22]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	e000      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	58024400 	.word	0x58024400

0800883c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b090      	sub	sp, #64	; 0x40
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800884a:	f040 8089 	bne.w	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800884e:	4b91      	ldr	r3, [pc, #580]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008852:	f003 0307 	and.w	r3, r3, #7
 8008856:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885a:	2b04      	cmp	r3, #4
 800885c:	d87d      	bhi.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800885e:	a201      	add	r2, pc, #4	; (adr r2, 8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008864:	08008879 	.word	0x08008879
 8008868:	0800889d 	.word	0x0800889d
 800886c:	080088c1 	.word	0x080088c1
 8008870:	08008955 	.word	0x08008955
 8008874:	080088e5 	.word	0x080088e5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008878:	4b86      	ldr	r3, [pc, #536]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008880:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008884:	d107      	bne.n	8008896 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800888a:	4618      	mov	r0, r3
 800888c:	f000 fec2 	bl	8009614 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008894:	e3f4      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800889a:	e3f1      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800889c:	4b7d      	ldr	r3, [pc, #500]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088a8:	d107      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088aa:	f107 0318 	add.w	r3, r7, #24
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 fc08 	bl	80090c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088b8:	e3e2      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088be:	e3df      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088c0:	4b74      	ldr	r3, [pc, #464]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088cc:	d107      	bne.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ce:	f107 030c 	add.w	r3, r7, #12
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 fd4a 	bl	800936c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088dc:	e3d0      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088e2:	e3cd      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80088e4:	4b6b      	ldr	r3, [pc, #428]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80088e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088ec:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088ee:	4b69      	ldr	r3, [pc, #420]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0304 	and.w	r3, r3, #4
 80088f6:	2b04      	cmp	r3, #4
 80088f8:	d10c      	bne.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80088fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d109      	bne.n	8008914 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008900:	4b64      	ldr	r3, [pc, #400]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	08db      	lsrs	r3, r3, #3
 8008906:	f003 0303 	and.w	r3, r3, #3
 800890a:	4a63      	ldr	r2, [pc, #396]	; (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800890c:	fa22 f303 	lsr.w	r3, r2, r3
 8008910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008912:	e01e      	b.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008914:	4b5f      	ldr	r3, [pc, #380]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008920:	d106      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008928:	d102      	bne.n	8008930 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800892a:	4b5c      	ldr	r3, [pc, #368]	; (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800892c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800892e:	e010      	b.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008930:	4b58      	ldr	r3, [pc, #352]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800893c:	d106      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008944:	d102      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008946:	4b56      	ldr	r3, [pc, #344]	; (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800894a:	e002      	b.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800894c:	2300      	movs	r3, #0
 800894e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008950:	e396      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008952:	e395      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008954:	4b53      	ldr	r3, [pc, #332]	; (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008956:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008958:	e392      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800895e:	e38f      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008966:	f040 809f 	bne.w	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800896a:	4b4a      	ldr	r3, [pc, #296]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800896c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800896e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008972:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800897a:	d04d      	beq.n	8008a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008982:	f200 8084 	bhi.w	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	2bc0      	cmp	r3, #192	; 0xc0
 800898a:	d07d      	beq.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	2bc0      	cmp	r3, #192	; 0xc0
 8008990:	d87d      	bhi.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008994:	2b80      	cmp	r3, #128	; 0x80
 8008996:	d02d      	beq.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	2b80      	cmp	r3, #128	; 0x80
 800899c:	d877      	bhi.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d003      	beq.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80089a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a6:	2b40      	cmp	r3, #64	; 0x40
 80089a8:	d012      	beq.n	80089d0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80089aa:	e070      	b.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089ac:	4b39      	ldr	r3, [pc, #228]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089b8:	d107      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fe28 	bl	8009614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089c8:	e35a      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089ce:	e357      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089d0:	4b30      	ldr	r3, [pc, #192]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089dc:	d107      	bne.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089de:	f107 0318 	add.w	r3, r7, #24
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 fb6e 	bl	80090c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089ec:	e348      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089f2:	e345      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089f4:	4b27      	ldr	r3, [pc, #156]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a00:	d107      	bne.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a02:	f107 030c 	add.w	r3, r7, #12
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 fcb0 	bl	800936c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a10:	e336      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a16:	e333      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a18:	4b1e      	ldr	r3, [pc, #120]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a20:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a22:	4b1c      	ldr	r3, [pc, #112]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0304 	and.w	r3, r3, #4
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	d10c      	bne.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8008a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d109      	bne.n	8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a34:	4b17      	ldr	r3, [pc, #92]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	08db      	lsrs	r3, r3, #3
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	4a16      	ldr	r2, [pc, #88]	; (8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008a40:	fa22 f303 	lsr.w	r3, r2, r3
 8008a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a46:	e01e      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a48:	4b12      	ldr	r3, [pc, #72]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a54:	d106      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8008a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a5c:	d102      	bne.n	8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a5e:	4b0f      	ldr	r3, [pc, #60]	; (8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a62:	e010      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a64:	4b0b      	ldr	r3, [pc, #44]	; (8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a70:	d106      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a78:	d102      	bne.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a7a:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a7e:	e002      	b.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a80:	2300      	movs	r3, #0
 8008a82:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a84:	e2fc      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008a86:	e2fb      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a88:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a8c:	e2f8      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a92:	e2f5      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008a94:	58024400 	.word	0x58024400
 8008a98:	03d09000 	.word	0x03d09000
 8008a9c:	003d0900 	.word	0x003d0900
 8008aa0:	007a1200 	.word	0x007a1200
 8008aa4:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aae:	f040 809c 	bne.w	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8008ab2:	4b9d      	ldr	r3, [pc, #628]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008aba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ac2:	d054      	beq.n	8008b6e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008aca:	f200 808b 	bhi.w	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008ad4:	f000 8083 	beq.w	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ada:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008ade:	f200 8081 	bhi.w	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ae8:	d02f      	beq.n	8008b4a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008af0:	d878      	bhi.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d004      	beq.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008afe:	d012      	beq.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8008b00:	e070      	b.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b02:	4b89      	ldr	r3, [pc, #548]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b0e:	d107      	bne.n	8008b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b14:	4618      	mov	r0, r3
 8008b16:	f000 fd7d 	bl	8009614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b1e:	e2af      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008b20:	2300      	movs	r3, #0
 8008b22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b24:	e2ac      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b26:	4b80      	ldr	r3, [pc, #512]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b32:	d107      	bne.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b34:	f107 0318 	add.w	r3, r7, #24
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 fac3 	bl	80090c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b42:	e29d      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b48:	e29a      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b4a:	4b77      	ldr	r3, [pc, #476]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b56:	d107      	bne.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b58:	f107 030c 	add.w	r3, r7, #12
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fc05 	bl	800936c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008b66:	e28b      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b6c:	e288      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008b6e:	4b6e      	ldr	r3, [pc, #440]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b76:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b78:	4b6b      	ldr	r3, [pc, #428]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d10c      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8008b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d109      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b8a:	4b67      	ldr	r3, [pc, #412]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	08db      	lsrs	r3, r3, #3
 8008b90:	f003 0303 	and.w	r3, r3, #3
 8008b94:	4a65      	ldr	r2, [pc, #404]	; (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8008b96:	fa22 f303 	lsr.w	r3, r2, r3
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b9c:	e01e      	b.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b9e:	4b62      	ldr	r3, [pc, #392]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008baa:	d106      	bne.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8008bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bb2:	d102      	bne.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008bb4:	4b5e      	ldr	r3, [pc, #376]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bb8:	e010      	b.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bba:	4b5b      	ldr	r3, [pc, #364]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008bc6:	d106      	bne.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8008bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bce:	d102      	bne.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008bd0:	4b58      	ldr	r3, [pc, #352]	; (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8008bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bd4:	e002      	b.n	8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8008bda:	e251      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008bdc:	e250      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008bde:	4b56      	ldr	r3, [pc, #344]	; (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008be0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008be2:	e24d      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008be8:	e24a      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bf0:	f040 80a7 	bne.w	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008bf4:	4b4c      	ldr	r3, [pc, #304]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008bfc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c04:	d055      	beq.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c0c:	f200 8096 	bhi.w	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c16:	f000 8084 	beq.w	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c20:	f200 808c 	bhi.w	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c2a:	d030      	beq.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c32:	f200 8083 	bhi.w	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d004      	beq.n	8008c46 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c42:	d012      	beq.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8008c44:	e07a      	b.n	8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c46:	4b38      	ldr	r3, [pc, #224]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c52:	d107      	bne.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f000 fcdb 	bl	8009614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c62:	e20d      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c68:	e20a      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c6a:	4b2f      	ldr	r3, [pc, #188]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c76:	d107      	bne.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c78:	f107 0318 	add.w	r3, r7, #24
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f000 fa21 	bl	80090c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c86:	e1fb      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c8c:	e1f8      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c8e:	4b26      	ldr	r3, [pc, #152]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c9a:	d107      	bne.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c9c:	f107 030c 	add.w	r3, r7, #12
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f000 fb63 	bl	800936c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008caa:	e1e9      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008cac:	2300      	movs	r3, #0
 8008cae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cb0:	e1e6      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008cb2:	4b1d      	ldr	r3, [pc, #116]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cbc:	4b1a      	ldr	r3, [pc, #104]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	d10c      	bne.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8008cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d109      	bne.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cce:	4b16      	ldr	r3, [pc, #88]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	08db      	lsrs	r3, r3, #3
 8008cd4:	f003 0303 	and.w	r3, r3, #3
 8008cd8:	4a14      	ldr	r2, [pc, #80]	; (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8008cda:	fa22 f303 	lsr.w	r3, r2, r3
 8008cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ce0:	e01e      	b.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ce2:	4b11      	ldr	r3, [pc, #68]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cee:	d106      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8008cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cf6:	d102      	bne.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008cf8:	4b0d      	ldr	r3, [pc, #52]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cfc:	e010      	b.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cfe:	4b0a      	ldr	r3, [pc, #40]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d0a:	d106      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d12:	d102      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d14:	4b07      	ldr	r3, [pc, #28]	; (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8008d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d18:	e002      	b.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008d1e:	e1af      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008d20:	e1ae      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008d22:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d26:	e1ab      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008d28:	58024400 	.word	0x58024400
 8008d2c:	03d09000 	.word	0x03d09000
 8008d30:	003d0900 	.word	0x003d0900
 8008d34:	007a1200 	.word	0x007a1200
 8008d38:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d40:	e19e      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d48:	d173      	bne.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008d4a:	4b9d      	ldr	r3, [pc, #628]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008d52:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d5a:	d02f      	beq.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d62:	d863      	bhi.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d004      	beq.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d70:	d012      	beq.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8008d72:	e05b      	b.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d74:	4b92      	ldr	r3, [pc, #584]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d80:	d107      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d82:	f107 0318 	add.w	r3, r7, #24
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 f99c 	bl	80090c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d90:	e176      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d96:	e173      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d98:	4b89      	ldr	r3, [pc, #548]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008da4:	d107      	bne.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008da6:	f107 030c 	add.w	r3, r7, #12
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 fade 	bl	800936c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008db4:	e164      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dba:	e161      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008dbc:	4b80      	ldr	r3, [pc, #512]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008dc4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dc6:	4b7e      	ldr	r3, [pc, #504]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	2b04      	cmp	r3, #4
 8008dd0:	d10c      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8008dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d109      	bne.n	8008dec <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008dd8:	4b79      	ldr	r3, [pc, #484]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	08db      	lsrs	r3, r3, #3
 8008dde:	f003 0303 	and.w	r3, r3, #3
 8008de2:	4a78      	ldr	r2, [pc, #480]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008de4:	fa22 f303 	lsr.w	r3, r2, r3
 8008de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dea:	e01e      	b.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dec:	4b74      	ldr	r3, [pc, #464]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008df8:	d106      	bne.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e00:	d102      	bne.n	8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008e02:	4b71      	ldr	r3, [pc, #452]	; (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e06:	e010      	b.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e08:	4b6d      	ldr	r3, [pc, #436]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e14:	d106      	bne.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e1c:	d102      	bne.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008e1e:	4b6b      	ldr	r3, [pc, #428]	; (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e22:	e002      	b.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008e24:	2300      	movs	r3, #0
 8008e26:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008e28:	e12a      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008e2a:	e129      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e30:	e126      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e38:	d133      	bne.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008e3a:	4b61      	ldr	r3, [pc, #388]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e42:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d004      	beq.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e50:	d012      	beq.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008e52:	e023      	b.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e54:	4b5a      	ldr	r3, [pc, #360]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e60:	d107      	bne.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 fbd4 	bl	8009614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e70:	e106      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008e72:	2300      	movs	r3, #0
 8008e74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e76:	e103      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e78:	4b51      	ldr	r3, [pc, #324]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e84:	d107      	bne.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e86:	f107 0318 	add.w	r3, r7, #24
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 f91a 	bl	80090c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008e94:	e0f4      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e9a:	e0f1      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ea0:	e0ee      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ea8:	f040 809b 	bne.w	8008fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008eac:	4b44      	ldr	r3, [pc, #272]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008eb4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008ebc:	f000 808b 	beq.w	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008ec6:	f200 8089 	bhi.w	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ed0:	d06c      	beq.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ed8:	f200 8080 	bhi.w	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee2:	d056      	beq.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8008ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eea:	d877      	bhi.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ef2:	d03b      	beq.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8008ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008efa:	d86f      	bhi.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f02:	d021      	beq.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8008f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f0a:	d867      	bhi.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d004      	beq.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f18:	d004      	beq.n	8008f24 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8008f1a:	e05f      	b.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008f1c:	f000 f8bc 	bl	8009098 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f20:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008f22:	e0ad      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f24:	4b26      	ldr	r3, [pc, #152]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f30:	d107      	bne.n	8008f42 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f32:	f107 0318 	add.w	r3, r7, #24
 8008f36:	4618      	mov	r0, r3
 8008f38:	f000 f8c4 	bl	80090c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f40:	e09e      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008f42:	2300      	movs	r3, #0
 8008f44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f46:	e09b      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f48:	4b1d      	ldr	r3, [pc, #116]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f54:	d107      	bne.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f56:	f107 030c 	add.w	r3, r7, #12
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f000 fa06 	bl	800936c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f64:	e08c      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f6a:	e089      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f6c:	4b14      	ldr	r3, [pc, #80]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0304 	and.w	r3, r3, #4
 8008f74:	2b04      	cmp	r3, #4
 8008f76:	d109      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f78:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	08db      	lsrs	r3, r3, #3
 8008f7e:	f003 0303 	and.w	r3, r3, #3
 8008f82:	4a10      	ldr	r2, [pc, #64]	; (8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008f84:	fa22 f303 	lsr.w	r3, r2, r3
 8008f88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f8a:	e079      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f90:	e076      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008f92:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f9e:	d102      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8008fa0:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fa4:	e06c      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008faa:	e069      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008fac:	4b04      	ldr	r3, [pc, #16]	; (8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fb8:	d10a      	bne.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 8008fba:	4b04      	ldr	r3, [pc, #16]	; (8008fcc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008fbe:	e05f      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008fc0:	58024400 	.word	0x58024400
 8008fc4:	03d09000 	.word	0x03d09000
 8008fc8:	003d0900 	.word	0x003d0900
 8008fcc:	007a1200 	.word	0x007a1200
          frequency = 0;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fd4:	e054      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008fd6:	4b2d      	ldr	r3, [pc, #180]	; (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fda:	e051      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fe0:	e04e      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe8:	d148      	bne.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008fea:	4b29      	ldr	r3, [pc, #164]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ff2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ffa:	d02a      	beq.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009002:	d838      	bhi.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009006:	2b00      	cmp	r3, #0
 8009008:	d004      	beq.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 800900a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009010:	d00d      	beq.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009012:	e030      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009014:	4b1e      	ldr	r3, [pc, #120]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800901c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009020:	d102      	bne.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 8009022:	4b1c      	ldr	r3, [pc, #112]	; (8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009024:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009026:	e02b      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800902c:	e028      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800902e:	4b18      	ldr	r3, [pc, #96]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800903a:	d107      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800903c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009040:	4618      	mov	r0, r3
 8009042:	f000 fae7 	bl	8009614 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800904a:	e019      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009050:	e016      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009052:	4b0f      	ldr	r3, [pc, #60]	; (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800905a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800905e:	d107      	bne.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009060:	f107 0318 	add.w	r3, r7, #24
 8009064:	4618      	mov	r0, r3
 8009066:	f000 f82d 	bl	80090c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800906e:	e007      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009070:	2300      	movs	r3, #0
 8009072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009074:	e004      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8009076:	2300      	movs	r3, #0
 8009078:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800907a:	e001      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009082:	4618      	mov	r0, r3
 8009084:	3740      	adds	r7, #64	; 0x40
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	00bb8000 	.word	0x00bb8000
 8009090:	58024400 	.word	0x58024400
 8009094:	007a1200 	.word	0x007a1200

08009098 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800909c:	f7fe fc66 	bl	800796c <HAL_RCC_GetHCLKFreq>
 80090a0:	4602      	mov	r2, r0
 80090a2:	4b06      	ldr	r3, [pc, #24]	; (80090bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	091b      	lsrs	r3, r3, #4
 80090a8:	f003 0307 	and.w	r3, r3, #7
 80090ac:	4904      	ldr	r1, [pc, #16]	; (80090c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80090ae:	5ccb      	ldrb	r3, [r1, r3]
 80090b0:	f003 031f 	and.w	r3, r3, #31
 80090b4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	58024400 	.word	0x58024400
 80090c0:	0800ba50 	.word	0x0800ba50

080090c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b089      	sub	sp, #36	; 0x24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090cc:	4ba1      	ldr	r3, [pc, #644]	; (8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d0:	f003 0303 	and.w	r3, r3, #3
 80090d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80090d6:	4b9f      	ldr	r3, [pc, #636]	; (8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090da:	0b1b      	lsrs	r3, r3, #12
 80090dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80090e2:	4b9c      	ldr	r3, [pc, #624]	; (8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e6:	091b      	lsrs	r3, r3, #4
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80090ee:	4b99      	ldr	r3, [pc, #612]	; (8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f2:	08db      	lsrs	r3, r3, #3
 80090f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	fb02 f303 	mul.w	r3, r2, r3
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009106:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 8111 	beq.w	8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	2b02      	cmp	r3, #2
 8009116:	f000 8083 	beq.w	8009220 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	2b02      	cmp	r3, #2
 800911e:	f200 80a1 	bhi.w	8009264 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d003      	beq.n	8009130 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d056      	beq.n	80091dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800912e:	e099      	b.n	8009264 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009130:	4b88      	ldr	r3, [pc, #544]	; (8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0320 	and.w	r3, r3, #32
 8009138:	2b00      	cmp	r3, #0
 800913a:	d02d      	beq.n	8009198 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800913c:	4b85      	ldr	r3, [pc, #532]	; (8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	08db      	lsrs	r3, r3, #3
 8009142:	f003 0303 	and.w	r3, r3, #3
 8009146:	4a84      	ldr	r2, [pc, #528]	; (8009358 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009148:	fa22 f303 	lsr.w	r3, r2, r3
 800914c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	ee07 3a90 	vmov	s15, r3
 8009154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009166:	4b7b      	ldr	r3, [pc, #492]	; (8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916e:	ee07 3a90 	vmov	s15, r3
 8009172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009176:	ed97 6a03 	vldr	s12, [r7, #12]
 800917a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800935c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800917e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800918a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800918e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009192:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009196:	e087      	b.n	80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	ee07 3a90 	vmov	s15, r3
 800919e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80091a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091aa:	4b6a      	ldr	r3, [pc, #424]	; (8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80091be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800935c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091da:	e065      	b.n	80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	ee07 3a90 	vmov	s15, r3
 80091e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ee:	4b59      	ldr	r3, [pc, #356]	; (8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009202:	eddf 5a56 	vldr	s11, [pc, #344]	; 800935c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800920a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800920e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800921a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800921e:	e043      	b.n	80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	ee07 3a90 	vmov	s15, r3
 8009226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009368 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800922e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009232:	4b48      	ldr	r3, [pc, #288]	; (8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800923a:	ee07 3a90 	vmov	s15, r3
 800923e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009242:	ed97 6a03 	vldr	s12, [r7, #12]
 8009246:	eddf 5a45 	vldr	s11, [pc, #276]	; 800935c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800924a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800924e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800925a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800925e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009262:	e021      	b.n	80092a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	ee07 3a90 	vmov	s15, r3
 800926a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009276:	4b37      	ldr	r3, [pc, #220]	; (8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800927e:	ee07 3a90 	vmov	s15, r3
 8009282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009286:	ed97 6a03 	vldr	s12, [r7, #12]
 800928a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800935c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800928e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800929a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800929e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80092a8:	4b2a      	ldr	r3, [pc, #168]	; (8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ac:	0a5b      	lsrs	r3, r3, #9
 80092ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092b2:	ee07 3a90 	vmov	s15, r3
 80092b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80092c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ce:	ee17 2a90 	vmov	r2, s15
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80092d6:	4b1f      	ldr	r3, [pc, #124]	; (8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092da:	0c1b      	lsrs	r3, r3, #16
 80092dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092e0:	ee07 3a90 	vmov	s15, r3
 80092e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80092f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092fc:	ee17 2a90 	vmov	r2, s15
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009304:	4b13      	ldr	r3, [pc, #76]	; (8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009308:	0e1b      	lsrs	r3, r3, #24
 800930a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800930e:	ee07 3a90 	vmov	s15, r3
 8009312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800931a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800931e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800932a:	ee17 2a90 	vmov	r2, s15
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009332:	e008      	b.n	8009346 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	609a      	str	r2, [r3, #8]
}
 8009346:	bf00      	nop
 8009348:	3724      	adds	r7, #36	; 0x24
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	58024400 	.word	0x58024400
 8009358:	03d09000 	.word	0x03d09000
 800935c:	46000000 	.word	0x46000000
 8009360:	4c742400 	.word	0x4c742400
 8009364:	4a742400 	.word	0x4a742400
 8009368:	4af42400 	.word	0x4af42400

0800936c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800936c:	b480      	push	{r7}
 800936e:	b089      	sub	sp, #36	; 0x24
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009374:	4ba1      	ldr	r3, [pc, #644]	; (80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009378:	f003 0303 	and.w	r3, r3, #3
 800937c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800937e:	4b9f      	ldr	r3, [pc, #636]	; (80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009382:	0d1b      	lsrs	r3, r3, #20
 8009384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009388:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800938a:	4b9c      	ldr	r3, [pc, #624]	; (80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800938c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938e:	0a1b      	lsrs	r3, r3, #8
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009396:	4b99      	ldr	r3, [pc, #612]	; (80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800939a:	08db      	lsrs	r3, r3, #3
 800939c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	fb02 f303 	mul.w	r3, r2, r3
 80093a6:	ee07 3a90 	vmov	s15, r3
 80093aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 8111 	beq.w	80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	2b02      	cmp	r3, #2
 80093be:	f000 8083 	beq.w	80094c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	f200 80a1 	bhi.w	800950c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d003      	beq.n	80093d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d056      	beq.n	8009484 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80093d6:	e099      	b.n	800950c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093d8:	4b88      	ldr	r3, [pc, #544]	; (80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 0320 	and.w	r3, r3, #32
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d02d      	beq.n	8009440 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093e4:	4b85      	ldr	r3, [pc, #532]	; (80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	08db      	lsrs	r3, r3, #3
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	4a84      	ldr	r2, [pc, #528]	; (8009600 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80093f0:	fa22 f303 	lsr.w	r3, r2, r3
 80093f4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	ee07 3a90 	vmov	s15, r3
 80093fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940e:	4b7b      	ldr	r3, [pc, #492]	; (80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009422:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800942a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800943e:	e087      	b.n	8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800944e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009452:	4b6a      	ldr	r3, [pc, #424]	; (80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009462:	ed97 6a03 	vldr	s12, [r7, #12]
 8009466:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800946a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800947a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009482:	e065      	b.n	8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	ee07 3a90 	vmov	s15, r3
 800948a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800960c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009496:	4b59      	ldr	r3, [pc, #356]	; (80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094c6:	e043      	b.n	8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009610 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80094d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094da:	4b48      	ldr	r3, [pc, #288]	; (80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009506:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800950a:	e021      	b.n	8009550 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	ee07 3a90 	vmov	s15, r3
 8009512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009516:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800960c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800951a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800951e:	4b37      	ldr	r3, [pc, #220]	; (80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009526:	ee07 3a90 	vmov	s15, r3
 800952a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800952e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009532:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009604 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800953a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800953e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800954a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800954e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009550:	4b2a      	ldr	r3, [pc, #168]	; (80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009554:	0a5b      	lsrs	r3, r3, #9
 8009556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800955a:	ee07 3a90 	vmov	s15, r3
 800955e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800956a:	edd7 6a07 	vldr	s13, [r7, #28]
 800956e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009576:	ee17 2a90 	vmov	r2, s15
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800957e:	4b1f      	ldr	r3, [pc, #124]	; (80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009582:	0c1b      	lsrs	r3, r3, #16
 8009584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009588:	ee07 3a90 	vmov	s15, r3
 800958c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009594:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009598:	edd7 6a07 	vldr	s13, [r7, #28]
 800959c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095a4:	ee17 2a90 	vmov	r2, s15
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80095ac:	4b13      	ldr	r3, [pc, #76]	; (80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b0:	0e1b      	lsrs	r3, r3, #24
 80095b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095b6:	ee07 3a90 	vmov	s15, r3
 80095ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80095ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095d2:	ee17 2a90 	vmov	r2, s15
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80095da:	e008      	b.n	80095ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	609a      	str	r2, [r3, #8]
}
 80095ee:	bf00      	nop
 80095f0:	3724      	adds	r7, #36	; 0x24
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	58024400 	.word	0x58024400
 8009600:	03d09000 	.word	0x03d09000
 8009604:	46000000 	.word	0x46000000
 8009608:	4c742400 	.word	0x4c742400
 800960c:	4a742400 	.word	0x4a742400
 8009610:	4af42400 	.word	0x4af42400

08009614 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009614:	b480      	push	{r7}
 8009616:	b089      	sub	sp, #36	; 0x24
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800961c:	4ba0      	ldr	r3, [pc, #640]	; (80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800961e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009620:	f003 0303 	and.w	r3, r3, #3
 8009624:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009626:	4b9e      	ldr	r3, [pc, #632]	; (80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962a:	091b      	lsrs	r3, r3, #4
 800962c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009630:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009632:	4b9b      	ldr	r3, [pc, #620]	; (80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800963c:	4b98      	ldr	r3, [pc, #608]	; (80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800963e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009640:	08db      	lsrs	r3, r3, #3
 8009642:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	fb02 f303 	mul.w	r3, r2, r3
 800964c:	ee07 3a90 	vmov	s15, r3
 8009650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009654:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 8111 	beq.w	8009882 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	2b02      	cmp	r3, #2
 8009664:	f000 8083 	beq.w	800976e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	2b02      	cmp	r3, #2
 800966c:	f200 80a1 	bhi.w	80097b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d056      	beq.n	800972a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800967c:	e099      	b.n	80097b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800967e:	4b88      	ldr	r3, [pc, #544]	; (80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f003 0320 	and.w	r3, r3, #32
 8009686:	2b00      	cmp	r3, #0
 8009688:	d02d      	beq.n	80096e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800968a:	4b85      	ldr	r3, [pc, #532]	; (80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	08db      	lsrs	r3, r3, #3
 8009690:	f003 0303 	and.w	r3, r3, #3
 8009694:	4a83      	ldr	r2, [pc, #524]	; (80098a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009696:	fa22 f303 	lsr.w	r3, r2, r3
 800969a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	ee07 3a90 	vmov	s15, r3
 80096ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b4:	4b7a      	ldr	r3, [pc, #488]	; (80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096bc:	ee07 3a90 	vmov	s15, r3
 80096c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80096c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80098a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80096e4:	e087      	b.n	80097f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	ee07 3a90 	vmov	s15, r3
 80096ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80096f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f8:	4b69      	ldr	r3, [pc, #420]	; (80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009700:	ee07 3a90 	vmov	s15, r3
 8009704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009708:	ed97 6a03 	vldr	s12, [r7, #12]
 800970c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80098a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800971c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009724:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009728:	e065      	b.n	80097f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	ee07 3a90 	vmov	s15, r3
 8009730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009734:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80098b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800973c:	4b58      	ldr	r3, [pc, #352]	; (80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800973e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009744:	ee07 3a90 	vmov	s15, r3
 8009748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800974c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009750:	eddf 5a55 	vldr	s11, [pc, #340]	; 80098a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800975c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009768:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800976c:	e043      	b.n	80097f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	ee07 3a90 	vmov	s15, r3
 8009774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009778:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80098b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800977c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009780:	4b47      	ldr	r3, [pc, #284]	; (80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009788:	ee07 3a90 	vmov	s15, r3
 800978c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009790:	ed97 6a03 	vldr	s12, [r7, #12]
 8009794:	eddf 5a44 	vldr	s11, [pc, #272]	; 80098a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800979c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097b0:	e021      	b.n	80097f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	ee07 3a90 	vmov	s15, r3
 80097b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097bc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80097c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097c4:	4b36      	ldr	r3, [pc, #216]	; (80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097cc:	ee07 3a90 	vmov	s15, r3
 80097d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80097d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80098a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80097f6:	4b2a      	ldr	r3, [pc, #168]	; (80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fa:	0a5b      	lsrs	r3, r3, #9
 80097fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009800:	ee07 3a90 	vmov	s15, r3
 8009804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800980c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009810:	edd7 6a07 	vldr	s13, [r7, #28]
 8009814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800981c:	ee17 2a90 	vmov	r2, s15
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009824:	4b1e      	ldr	r3, [pc, #120]	; (80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009828:	0c1b      	lsrs	r3, r3, #16
 800982a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800982e:	ee07 3a90 	vmov	s15, r3
 8009832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800983a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800983e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800984a:	ee17 2a90 	vmov	r2, s15
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009852:	4b13      	ldr	r3, [pc, #76]	; (80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009856:	0e1b      	lsrs	r3, r3, #24
 8009858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800985c:	ee07 3a90 	vmov	s15, r3
 8009860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800986c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009878:	ee17 2a90 	vmov	r2, s15
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009880:	e008      	b.n	8009894 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	609a      	str	r2, [r3, #8]
}
 8009894:	bf00      	nop
 8009896:	3724      	adds	r7, #36	; 0x24
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	58024400 	.word	0x58024400
 80098a4:	03d09000 	.word	0x03d09000
 80098a8:	46000000 	.word	0x46000000
 80098ac:	4c742400 	.word	0x4c742400
 80098b0:	4a742400 	.word	0x4a742400
 80098b4:	4af42400 	.word	0x4af42400

080098b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098c6:	4b53      	ldr	r3, [pc, #332]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 80098c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ca:	f003 0303 	and.w	r3, r3, #3
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d101      	bne.n	80098d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e099      	b.n	8009a0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80098d6:	4b4f      	ldr	r3, [pc, #316]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a4e      	ldr	r2, [pc, #312]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 80098dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80098e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098e2:	f7f8 ffcb 	bl	800287c <HAL_GetTick>
 80098e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098e8:	e008      	b.n	80098fc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80098ea:	f7f8 ffc7 	bl	800287c <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d901      	bls.n	80098fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e086      	b.n	8009a0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098fc:	4b45      	ldr	r3, [pc, #276]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1f0      	bne.n	80098ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009908:	4b42      	ldr	r3, [pc, #264]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 800990a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	031b      	lsls	r3, r3, #12
 8009916:	493f      	ldr	r1, [pc, #252]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 8009918:	4313      	orrs	r3, r2
 800991a:	628b      	str	r3, [r1, #40]	; 0x28
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	3b01      	subs	r3, #1
 8009922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	3b01      	subs	r3, #1
 800992c:	025b      	lsls	r3, r3, #9
 800992e:	b29b      	uxth	r3, r3
 8009930:	431a      	orrs	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	3b01      	subs	r3, #1
 8009938:	041b      	lsls	r3, r3, #16
 800993a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800993e:	431a      	orrs	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	3b01      	subs	r3, #1
 8009946:	061b      	lsls	r3, r3, #24
 8009948:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800994c:	4931      	ldr	r1, [pc, #196]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 800994e:	4313      	orrs	r3, r2
 8009950:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009952:	4b30      	ldr	r3, [pc, #192]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 8009954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	492d      	ldr	r1, [pc, #180]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 8009960:	4313      	orrs	r3, r2
 8009962:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009964:	4b2b      	ldr	r3, [pc, #172]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	f023 0220 	bic.w	r2, r3, #32
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	4928      	ldr	r1, [pc, #160]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 8009972:	4313      	orrs	r3, r2
 8009974:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009976:	4b27      	ldr	r3, [pc, #156]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 8009978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997a:	4a26      	ldr	r2, [pc, #152]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 800997c:	f023 0310 	bic.w	r3, r3, #16
 8009980:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009982:	4b24      	ldr	r3, [pc, #144]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 8009984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009986:	4b24      	ldr	r3, [pc, #144]	; (8009a18 <RCCEx_PLL2_Config+0x160>)
 8009988:	4013      	ands	r3, r2
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	69d2      	ldr	r2, [r2, #28]
 800998e:	00d2      	lsls	r2, r2, #3
 8009990:	4920      	ldr	r1, [pc, #128]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 8009992:	4313      	orrs	r3, r2
 8009994:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009996:	4b1f      	ldr	r3, [pc, #124]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 8009998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999a:	4a1e      	ldr	r2, [pc, #120]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 800999c:	f043 0310 	orr.w	r3, r3, #16
 80099a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d106      	bne.n	80099b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80099a8:	4b1a      	ldr	r3, [pc, #104]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 80099aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ac:	4a19      	ldr	r2, [pc, #100]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 80099ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099b4:	e00f      	b.n	80099d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d106      	bne.n	80099ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80099bc:	4b15      	ldr	r3, [pc, #84]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 80099be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c0:	4a14      	ldr	r2, [pc, #80]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 80099c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80099c8:	e005      	b.n	80099d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80099ca:	4b12      	ldr	r3, [pc, #72]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 80099cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ce:	4a11      	ldr	r2, [pc, #68]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 80099d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80099d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80099d6:	4b0f      	ldr	r3, [pc, #60]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a0e      	ldr	r2, [pc, #56]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 80099dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80099e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099e2:	f7f8 ff4b 	bl	800287c <HAL_GetTick>
 80099e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099e8:	e008      	b.n	80099fc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80099ea:	f7f8 ff47 	bl	800287c <HAL_GetTick>
 80099ee:	4602      	mov	r2, r0
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d901      	bls.n	80099fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e006      	b.n	8009a0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80099fc:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <RCCEx_PLL2_Config+0x15c>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d0f0      	beq.n	80099ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	58024400 	.word	0x58024400
 8009a18:	ffff0007 	.word	0xffff0007

08009a1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a2a:	4b53      	ldr	r3, [pc, #332]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2e:	f003 0303 	and.w	r3, r3, #3
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	d101      	bne.n	8009a3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e099      	b.n	8009b6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009a3a:	4b4f      	ldr	r3, [pc, #316]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a4e      	ldr	r2, [pc, #312]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a46:	f7f8 ff19 	bl	800287c <HAL_GetTick>
 8009a4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a4c:	e008      	b.n	8009a60 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009a4e:	f7f8 ff15 	bl	800287c <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d901      	bls.n	8009a60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e086      	b.n	8009b6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a60:	4b45      	ldr	r3, [pc, #276]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1f0      	bne.n	8009a4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a6c:	4b42      	ldr	r3, [pc, #264]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	051b      	lsls	r3, r3, #20
 8009a7a:	493f      	ldr	r1, [pc, #252]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	628b      	str	r3, [r1, #40]	; 0x28
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	3b01      	subs	r3, #1
 8009a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	025b      	lsls	r3, r3, #9
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	431a      	orrs	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	041b      	lsls	r3, r3, #16
 8009a9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	061b      	lsls	r3, r3, #24
 8009aac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ab0:	4931      	ldr	r1, [pc, #196]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009ab6:	4b30      	ldr	r3, [pc, #192]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	492d      	ldr	r1, [pc, #180]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009ac8:	4b2b      	ldr	r3, [pc, #172]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	4928      	ldr	r1, [pc, #160]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009ada:	4b27      	ldr	r3, [pc, #156]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ade:	4a26      	ldr	r2, [pc, #152]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009ae6:	4b24      	ldr	r3, [pc, #144]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009aea:	4b24      	ldr	r3, [pc, #144]	; (8009b7c <RCCEx_PLL3_Config+0x160>)
 8009aec:	4013      	ands	r3, r2
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	69d2      	ldr	r2, [r2, #28]
 8009af2:	00d2      	lsls	r2, r2, #3
 8009af4:	4920      	ldr	r1, [pc, #128]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009af6:	4313      	orrs	r3, r2
 8009af8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009afa:	4b1f      	ldr	r3, [pc, #124]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afe:	4a1e      	ldr	r2, [pc, #120]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d106      	bne.n	8009b1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009b0c:	4b1a      	ldr	r3, [pc, #104]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b10:	4a19      	ldr	r2, [pc, #100]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009b12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b18:	e00f      	b.n	8009b3a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d106      	bne.n	8009b2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009b20:	4b15      	ldr	r3, [pc, #84]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b24:	4a14      	ldr	r2, [pc, #80]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009b26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b2c:	e005      	b.n	8009b3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009b2e:	4b12      	ldr	r3, [pc, #72]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b32:	4a11      	ldr	r2, [pc, #68]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009b34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009b3a:	4b0f      	ldr	r3, [pc, #60]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a0e      	ldr	r2, [pc, #56]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b46:	f7f8 fe99 	bl	800287c <HAL_GetTick>
 8009b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b4c:	e008      	b.n	8009b60 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009b4e:	f7f8 fe95 	bl	800287c <HAL_GetTick>
 8009b52:	4602      	mov	r2, r0
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d901      	bls.n	8009b60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e006      	b.n	8009b6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b60:	4b05      	ldr	r3, [pc, #20]	; (8009b78 <RCCEx_PLL3_Config+0x15c>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d0f0      	beq.n	8009b4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	58024400 	.word	0x58024400
 8009b7c:	ffff0007 	.word	0xffff0007

08009b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d101      	bne.n	8009b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e049      	b.n	8009c26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d106      	bne.n	8009bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7f8 fcc4 	bl	8002534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2202      	movs	r2, #2
 8009bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	3304      	adds	r3, #4
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	4610      	mov	r0, r2
 8009bc0:	f000 f99e 	bl	8009f00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d001      	beq.n	8009c48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e04c      	b.n	8009ce2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2202      	movs	r2, #2
 8009c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a26      	ldr	r2, [pc, #152]	; (8009cf0 <HAL_TIM_Base_Start+0xc0>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d022      	beq.n	8009ca0 <HAL_TIM_Base_Start+0x70>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c62:	d01d      	beq.n	8009ca0 <HAL_TIM_Base_Start+0x70>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a22      	ldr	r2, [pc, #136]	; (8009cf4 <HAL_TIM_Base_Start+0xc4>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d018      	beq.n	8009ca0 <HAL_TIM_Base_Start+0x70>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a21      	ldr	r2, [pc, #132]	; (8009cf8 <HAL_TIM_Base_Start+0xc8>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d013      	beq.n	8009ca0 <HAL_TIM_Base_Start+0x70>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a1f      	ldr	r2, [pc, #124]	; (8009cfc <HAL_TIM_Base_Start+0xcc>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d00e      	beq.n	8009ca0 <HAL_TIM_Base_Start+0x70>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a1e      	ldr	r2, [pc, #120]	; (8009d00 <HAL_TIM_Base_Start+0xd0>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d009      	beq.n	8009ca0 <HAL_TIM_Base_Start+0x70>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a1c      	ldr	r2, [pc, #112]	; (8009d04 <HAL_TIM_Base_Start+0xd4>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d004      	beq.n	8009ca0 <HAL_TIM_Base_Start+0x70>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a1b      	ldr	r2, [pc, #108]	; (8009d08 <HAL_TIM_Base_Start+0xd8>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d115      	bne.n	8009ccc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	689a      	ldr	r2, [r3, #8]
 8009ca6:	4b19      	ldr	r3, [pc, #100]	; (8009d0c <HAL_TIM_Base_Start+0xdc>)
 8009ca8:	4013      	ands	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b06      	cmp	r3, #6
 8009cb0:	d015      	beq.n	8009cde <HAL_TIM_Base_Start+0xae>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cb8:	d011      	beq.n	8009cde <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f042 0201 	orr.w	r2, r2, #1
 8009cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cca:	e008      	b.n	8009cde <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f042 0201 	orr.w	r2, r2, #1
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	e000      	b.n	8009ce0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3714      	adds	r7, #20
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	40010000 	.word	0x40010000
 8009cf4:	40000400 	.word	0x40000400
 8009cf8:	40000800 	.word	0x40000800
 8009cfc:	40000c00 	.word	0x40000c00
 8009d00:	40010400 	.word	0x40010400
 8009d04:	40001800 	.word	0x40001800
 8009d08:	40014000 	.word	0x40014000
 8009d0c:	00010007 	.word	0x00010007

08009d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d101      	bne.n	8009d2c <HAL_TIM_ConfigClockSource+0x1c>
 8009d28:	2302      	movs	r3, #2
 8009d2a:	e0dc      	b.n	8009ee6 <HAL_TIM_ConfigClockSource+0x1d6>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2202      	movs	r2, #2
 8009d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	4b6a      	ldr	r3, [pc, #424]	; (8009ef0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009d48:	4013      	ands	r3, r2
 8009d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a64      	ldr	r2, [pc, #400]	; (8009ef4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	f000 80a9 	beq.w	8009eba <HAL_TIM_ConfigClockSource+0x1aa>
 8009d68:	4a62      	ldr	r2, [pc, #392]	; (8009ef4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	f200 80ae 	bhi.w	8009ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8009d70:	4a61      	ldr	r2, [pc, #388]	; (8009ef8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	f000 80a1 	beq.w	8009eba <HAL_TIM_ConfigClockSource+0x1aa>
 8009d78:	4a5f      	ldr	r2, [pc, #380]	; (8009ef8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	f200 80a6 	bhi.w	8009ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8009d80:	4a5e      	ldr	r2, [pc, #376]	; (8009efc <HAL_TIM_ConfigClockSource+0x1ec>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	f000 8099 	beq.w	8009eba <HAL_TIM_ConfigClockSource+0x1aa>
 8009d88:	4a5c      	ldr	r2, [pc, #368]	; (8009efc <HAL_TIM_ConfigClockSource+0x1ec>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	f200 809e 	bhi.w	8009ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8009d90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009d94:	f000 8091 	beq.w	8009eba <HAL_TIM_ConfigClockSource+0x1aa>
 8009d98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009d9c:	f200 8096 	bhi.w	8009ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8009da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009da4:	f000 8089 	beq.w	8009eba <HAL_TIM_ConfigClockSource+0x1aa>
 8009da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dac:	f200 808e 	bhi.w	8009ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8009db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009db4:	d03e      	beq.n	8009e34 <HAL_TIM_ConfigClockSource+0x124>
 8009db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dba:	f200 8087 	bhi.w	8009ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8009dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dc2:	f000 8086 	beq.w	8009ed2 <HAL_TIM_ConfigClockSource+0x1c2>
 8009dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dca:	d87f      	bhi.n	8009ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8009dcc:	2b70      	cmp	r3, #112	; 0x70
 8009dce:	d01a      	beq.n	8009e06 <HAL_TIM_ConfigClockSource+0xf6>
 8009dd0:	2b70      	cmp	r3, #112	; 0x70
 8009dd2:	d87b      	bhi.n	8009ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8009dd4:	2b60      	cmp	r3, #96	; 0x60
 8009dd6:	d050      	beq.n	8009e7a <HAL_TIM_ConfigClockSource+0x16a>
 8009dd8:	2b60      	cmp	r3, #96	; 0x60
 8009dda:	d877      	bhi.n	8009ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8009ddc:	2b50      	cmp	r3, #80	; 0x50
 8009dde:	d03c      	beq.n	8009e5a <HAL_TIM_ConfigClockSource+0x14a>
 8009de0:	2b50      	cmp	r3, #80	; 0x50
 8009de2:	d873      	bhi.n	8009ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8009de4:	2b40      	cmp	r3, #64	; 0x40
 8009de6:	d058      	beq.n	8009e9a <HAL_TIM_ConfigClockSource+0x18a>
 8009de8:	2b40      	cmp	r3, #64	; 0x40
 8009dea:	d86f      	bhi.n	8009ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8009dec:	2b30      	cmp	r3, #48	; 0x30
 8009dee:	d064      	beq.n	8009eba <HAL_TIM_ConfigClockSource+0x1aa>
 8009df0:	2b30      	cmp	r3, #48	; 0x30
 8009df2:	d86b      	bhi.n	8009ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8009df4:	2b20      	cmp	r3, #32
 8009df6:	d060      	beq.n	8009eba <HAL_TIM_ConfigClockSource+0x1aa>
 8009df8:	2b20      	cmp	r3, #32
 8009dfa:	d867      	bhi.n	8009ecc <HAL_TIM_ConfigClockSource+0x1bc>
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d05c      	beq.n	8009eba <HAL_TIM_ConfigClockSource+0x1aa>
 8009e00:	2b10      	cmp	r3, #16
 8009e02:	d05a      	beq.n	8009eba <HAL_TIM_ConfigClockSource+0x1aa>
 8009e04:	e062      	b.n	8009ecc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	6899      	ldr	r1, [r3, #8]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	f000 f98b 	bl	800a130 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	609a      	str	r2, [r3, #8]
      break;
 8009e32:	e04f      	b.n	8009ed4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6818      	ldr	r0, [r3, #0]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	6899      	ldr	r1, [r3, #8]
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	f000 f974 	bl	800a130 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	689a      	ldr	r2, [r3, #8]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e56:	609a      	str	r2, [r3, #8]
      break;
 8009e58:	e03c      	b.n	8009ed4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6818      	ldr	r0, [r3, #0]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	6859      	ldr	r1, [r3, #4]
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	461a      	mov	r2, r3
 8009e68:	f000 f8e4 	bl	800a034 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2150      	movs	r1, #80	; 0x50
 8009e72:	4618      	mov	r0, r3
 8009e74:	f000 f93e 	bl	800a0f4 <TIM_ITRx_SetConfig>
      break;
 8009e78:	e02c      	b.n	8009ed4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6818      	ldr	r0, [r3, #0]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	6859      	ldr	r1, [r3, #4]
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	461a      	mov	r2, r3
 8009e88:	f000 f903 	bl	800a092 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2160      	movs	r1, #96	; 0x60
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 f92e 	bl	800a0f4 <TIM_ITRx_SetConfig>
      break;
 8009e98:	e01c      	b.n	8009ed4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6818      	ldr	r0, [r3, #0]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	6859      	ldr	r1, [r3, #4]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	f000 f8c4 	bl	800a034 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2140      	movs	r1, #64	; 0x40
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 f91e 	bl	800a0f4 <TIM_ITRx_SetConfig>
      break;
 8009eb8:	e00c      	b.n	8009ed4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	f000 f915 	bl	800a0f4 <TIM_ITRx_SetConfig>
      break;
 8009eca:	e003      	b.n	8009ed4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	73fb      	strb	r3, [r7, #15]
      break;
 8009ed0:	e000      	b.n	8009ed4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	ffceff88 	.word	0xffceff88
 8009ef4:	00100040 	.word	0x00100040
 8009ef8:	00100030 	.word	0x00100030
 8009efc:	00100020 	.word	0x00100020

08009f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a40      	ldr	r2, [pc, #256]	; (800a014 <TIM_Base_SetConfig+0x114>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d013      	beq.n	8009f40 <TIM_Base_SetConfig+0x40>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f1e:	d00f      	beq.n	8009f40 <TIM_Base_SetConfig+0x40>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a3d      	ldr	r2, [pc, #244]	; (800a018 <TIM_Base_SetConfig+0x118>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d00b      	beq.n	8009f40 <TIM_Base_SetConfig+0x40>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a3c      	ldr	r2, [pc, #240]	; (800a01c <TIM_Base_SetConfig+0x11c>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d007      	beq.n	8009f40 <TIM_Base_SetConfig+0x40>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a3b      	ldr	r2, [pc, #236]	; (800a020 <TIM_Base_SetConfig+0x120>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d003      	beq.n	8009f40 <TIM_Base_SetConfig+0x40>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a3a      	ldr	r2, [pc, #232]	; (800a024 <TIM_Base_SetConfig+0x124>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d108      	bne.n	8009f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a2f      	ldr	r2, [pc, #188]	; (800a014 <TIM_Base_SetConfig+0x114>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d01f      	beq.n	8009f9a <TIM_Base_SetConfig+0x9a>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f60:	d01b      	beq.n	8009f9a <TIM_Base_SetConfig+0x9a>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a2c      	ldr	r2, [pc, #176]	; (800a018 <TIM_Base_SetConfig+0x118>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d017      	beq.n	8009f9a <TIM_Base_SetConfig+0x9a>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a2b      	ldr	r2, [pc, #172]	; (800a01c <TIM_Base_SetConfig+0x11c>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d013      	beq.n	8009f9a <TIM_Base_SetConfig+0x9a>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a2a      	ldr	r2, [pc, #168]	; (800a020 <TIM_Base_SetConfig+0x120>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d00f      	beq.n	8009f9a <TIM_Base_SetConfig+0x9a>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a29      	ldr	r2, [pc, #164]	; (800a024 <TIM_Base_SetConfig+0x124>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d00b      	beq.n	8009f9a <TIM_Base_SetConfig+0x9a>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a28      	ldr	r2, [pc, #160]	; (800a028 <TIM_Base_SetConfig+0x128>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d007      	beq.n	8009f9a <TIM_Base_SetConfig+0x9a>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a27      	ldr	r2, [pc, #156]	; (800a02c <TIM_Base_SetConfig+0x12c>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d003      	beq.n	8009f9a <TIM_Base_SetConfig+0x9a>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a26      	ldr	r2, [pc, #152]	; (800a030 <TIM_Base_SetConfig+0x130>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d108      	bne.n	8009fac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	689a      	ldr	r2, [r3, #8]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a10      	ldr	r2, [pc, #64]	; (800a014 <TIM_Base_SetConfig+0x114>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d00f      	beq.n	8009ff8 <TIM_Base_SetConfig+0xf8>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a12      	ldr	r2, [pc, #72]	; (800a024 <TIM_Base_SetConfig+0x124>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d00b      	beq.n	8009ff8 <TIM_Base_SetConfig+0xf8>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a11      	ldr	r2, [pc, #68]	; (800a028 <TIM_Base_SetConfig+0x128>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d007      	beq.n	8009ff8 <TIM_Base_SetConfig+0xf8>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	4a10      	ldr	r2, [pc, #64]	; (800a02c <TIM_Base_SetConfig+0x12c>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d003      	beq.n	8009ff8 <TIM_Base_SetConfig+0xf8>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a0f      	ldr	r2, [pc, #60]	; (800a030 <TIM_Base_SetConfig+0x130>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d103      	bne.n	800a000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	691a      	ldr	r2, [r3, #16]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	615a      	str	r2, [r3, #20]
}
 800a006:	bf00      	nop
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	40010000 	.word	0x40010000
 800a018:	40000400 	.word	0x40000400
 800a01c:	40000800 	.word	0x40000800
 800a020:	40000c00 	.word	0x40000c00
 800a024:	40010400 	.word	0x40010400
 800a028:	40014000 	.word	0x40014000
 800a02c:	40014400 	.word	0x40014400
 800a030:	40014800 	.word	0x40014800

0800a034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a034:	b480      	push	{r7}
 800a036:	b087      	sub	sp, #28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6a1b      	ldr	r3, [r3, #32]
 800a044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	f023 0201 	bic.w	r2, r3, #1
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a05e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	011b      	lsls	r3, r3, #4
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	4313      	orrs	r3, r2
 800a068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f023 030a 	bic.w	r3, r3, #10
 800a070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	4313      	orrs	r3, r2
 800a078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	621a      	str	r2, [r3, #32]
}
 800a086:	bf00      	nop
 800a088:	371c      	adds	r7, #28
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a092:	b480      	push	{r7}
 800a094:	b087      	sub	sp, #28
 800a096:	af00      	add	r7, sp, #0
 800a098:	60f8      	str	r0, [r7, #12]
 800a09a:	60b9      	str	r1, [r7, #8]
 800a09c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6a1b      	ldr	r3, [r3, #32]
 800a0a2:	f023 0210 	bic.w	r2, r3, #16
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6a1b      	ldr	r3, [r3, #32]
 800a0b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	031b      	lsls	r3, r3, #12
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a0ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	011b      	lsls	r3, r3, #4
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	621a      	str	r2, [r3, #32]
}
 800a0e6:	bf00      	nop
 800a0e8:	371c      	adds	r7, #28
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
	...

0800a0f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	4b09      	ldr	r3, [pc, #36]	; (800a12c <TIM_ITRx_SetConfig+0x38>)
 800a108:	4013      	ands	r3, r2
 800a10a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a10c:	683a      	ldr	r2, [r7, #0]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	4313      	orrs	r3, r2
 800a112:	f043 0307 	orr.w	r3, r3, #7
 800a116:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	609a      	str	r2, [r3, #8]
}
 800a11e:	bf00      	nop
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	ffcfff8f 	.word	0xffcfff8f

0800a130 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a130:	b480      	push	{r7}
 800a132:	b087      	sub	sp, #28
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	607a      	str	r2, [r7, #4]
 800a13c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a14a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	021a      	lsls	r2, r3, #8
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	431a      	orrs	r2, r3
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	4313      	orrs	r3, r2
 800a158:	697a      	ldr	r2, [r7, #20]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	697a      	ldr	r2, [r7, #20]
 800a162:	609a      	str	r2, [r3, #8]
}
 800a164:	bf00      	nop
 800a166:	371c      	adds	r7, #28
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a180:	2b01      	cmp	r3, #1
 800a182:	d101      	bne.n	800a188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a184:	2302      	movs	r3, #2
 800a186:	e06d      	b.n	800a264 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a30      	ldr	r2, [pc, #192]	; (800a270 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d004      	beq.n	800a1bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a2f      	ldr	r2, [pc, #188]	; (800a274 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d108      	bne.n	800a1ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a1c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a20      	ldr	r2, [pc, #128]	; (800a270 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d022      	beq.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1fa:	d01d      	beq.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a1d      	ldr	r2, [pc, #116]	; (800a278 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d018      	beq.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a1c      	ldr	r2, [pc, #112]	; (800a27c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d013      	beq.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a1a      	ldr	r2, [pc, #104]	; (800a280 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d00e      	beq.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a15      	ldr	r2, [pc, #84]	; (800a274 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d009      	beq.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a16      	ldr	r2, [pc, #88]	; (800a284 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d004      	beq.n	800a238 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a15      	ldr	r2, [pc, #84]	; (800a288 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d10c      	bne.n	800a252 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a23e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	4313      	orrs	r3, r2
 800a248:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	40010000 	.word	0x40010000
 800a274:	40010400 	.word	0x40010400
 800a278:	40000400 	.word	0x40000400
 800a27c:	40000800 	.word	0x40000800
 800a280:	40000c00 	.word	0x40000c00
 800a284:	40001800 	.word	0x40001800
 800a288:	40014000 	.word	0x40014000

0800a28c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e042      	b.n	800a324 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d106      	bne.n	800a2b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7f8 f9c5 	bl	8002640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2224      	movs	r2, #36	; 0x24
 800a2ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f022 0201 	bic.w	r2, r2, #1
 800a2cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 f82c 	bl	800a32c <UART_SetConfig>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d101      	bne.n	800a2de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e022      	b.n	800a324 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d002      	beq.n	800a2ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fe8c 	bl	800b004 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a2fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	689a      	ldr	r2, [r3, #8]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a30a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f042 0201 	orr.w	r2, r2, #1
 800a31a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 ff13 	bl	800b148 <UART_CheckIdleState>
 800a322:	4603      	mov	r3, r0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a32c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a330:	b092      	sub	sp, #72	; 0x48
 800a332:	af00      	add	r7, sp, #0
 800a334:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	689a      	ldr	r2, [r3, #8]
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	431a      	orrs	r2, r3
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	431a      	orrs	r2, r3
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	69db      	ldr	r3, [r3, #28]
 800a350:	4313      	orrs	r3, r2
 800a352:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	4bbe      	ldr	r3, [pc, #760]	; (800a654 <UART_SetConfig+0x328>)
 800a35c:	4013      	ands	r3, r2
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	6812      	ldr	r2, [r2, #0]
 800a362:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a364:	430b      	orrs	r3, r1
 800a366:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	68da      	ldr	r2, [r3, #12]
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	430a      	orrs	r2, r1
 800a37c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4ab3      	ldr	r2, [pc, #716]	; (800a658 <UART_SetConfig+0x32c>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d004      	beq.n	800a398 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	6a1b      	ldr	r3, [r3, #32]
 800a392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a394:	4313      	orrs	r3, r2
 800a396:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	689a      	ldr	r2, [r3, #8]
 800a39e:	4baf      	ldr	r3, [pc, #700]	; (800a65c <UART_SetConfig+0x330>)
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	6812      	ldr	r2, [r2, #0]
 800a3a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a3a8:	430b      	orrs	r3, r1
 800a3aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b2:	f023 010f 	bic.w	r1, r3, #15
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4aa6      	ldr	r2, [pc, #664]	; (800a660 <UART_SetConfig+0x334>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d177      	bne.n	800a4bc <UART_SetConfig+0x190>
 800a3cc:	4ba5      	ldr	r3, [pc, #660]	; (800a664 <UART_SetConfig+0x338>)
 800a3ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3d4:	2b28      	cmp	r3, #40	; 0x28
 800a3d6:	d86d      	bhi.n	800a4b4 <UART_SetConfig+0x188>
 800a3d8:	a201      	add	r2, pc, #4	; (adr r2, 800a3e0 <UART_SetConfig+0xb4>)
 800a3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3de:	bf00      	nop
 800a3e0:	0800a485 	.word	0x0800a485
 800a3e4:	0800a4b5 	.word	0x0800a4b5
 800a3e8:	0800a4b5 	.word	0x0800a4b5
 800a3ec:	0800a4b5 	.word	0x0800a4b5
 800a3f0:	0800a4b5 	.word	0x0800a4b5
 800a3f4:	0800a4b5 	.word	0x0800a4b5
 800a3f8:	0800a4b5 	.word	0x0800a4b5
 800a3fc:	0800a4b5 	.word	0x0800a4b5
 800a400:	0800a48d 	.word	0x0800a48d
 800a404:	0800a4b5 	.word	0x0800a4b5
 800a408:	0800a4b5 	.word	0x0800a4b5
 800a40c:	0800a4b5 	.word	0x0800a4b5
 800a410:	0800a4b5 	.word	0x0800a4b5
 800a414:	0800a4b5 	.word	0x0800a4b5
 800a418:	0800a4b5 	.word	0x0800a4b5
 800a41c:	0800a4b5 	.word	0x0800a4b5
 800a420:	0800a495 	.word	0x0800a495
 800a424:	0800a4b5 	.word	0x0800a4b5
 800a428:	0800a4b5 	.word	0x0800a4b5
 800a42c:	0800a4b5 	.word	0x0800a4b5
 800a430:	0800a4b5 	.word	0x0800a4b5
 800a434:	0800a4b5 	.word	0x0800a4b5
 800a438:	0800a4b5 	.word	0x0800a4b5
 800a43c:	0800a4b5 	.word	0x0800a4b5
 800a440:	0800a49d 	.word	0x0800a49d
 800a444:	0800a4b5 	.word	0x0800a4b5
 800a448:	0800a4b5 	.word	0x0800a4b5
 800a44c:	0800a4b5 	.word	0x0800a4b5
 800a450:	0800a4b5 	.word	0x0800a4b5
 800a454:	0800a4b5 	.word	0x0800a4b5
 800a458:	0800a4b5 	.word	0x0800a4b5
 800a45c:	0800a4b5 	.word	0x0800a4b5
 800a460:	0800a4a5 	.word	0x0800a4a5
 800a464:	0800a4b5 	.word	0x0800a4b5
 800a468:	0800a4b5 	.word	0x0800a4b5
 800a46c:	0800a4b5 	.word	0x0800a4b5
 800a470:	0800a4b5 	.word	0x0800a4b5
 800a474:	0800a4b5 	.word	0x0800a4b5
 800a478:	0800a4b5 	.word	0x0800a4b5
 800a47c:	0800a4b5 	.word	0x0800a4b5
 800a480:	0800a4ad 	.word	0x0800a4ad
 800a484:	2301      	movs	r3, #1
 800a486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a48a:	e326      	b.n	800aada <UART_SetConfig+0x7ae>
 800a48c:	2304      	movs	r3, #4
 800a48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a492:	e322      	b.n	800aada <UART_SetConfig+0x7ae>
 800a494:	2308      	movs	r3, #8
 800a496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a49a:	e31e      	b.n	800aada <UART_SetConfig+0x7ae>
 800a49c:	2310      	movs	r3, #16
 800a49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4a2:	e31a      	b.n	800aada <UART_SetConfig+0x7ae>
 800a4a4:	2320      	movs	r3, #32
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4aa:	e316      	b.n	800aada <UART_SetConfig+0x7ae>
 800a4ac:	2340      	movs	r3, #64	; 0x40
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4b2:	e312      	b.n	800aada <UART_SetConfig+0x7ae>
 800a4b4:	2380      	movs	r3, #128	; 0x80
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ba:	e30e      	b.n	800aada <UART_SetConfig+0x7ae>
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a69      	ldr	r2, [pc, #420]	; (800a668 <UART_SetConfig+0x33c>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d130      	bne.n	800a528 <UART_SetConfig+0x1fc>
 800a4c6:	4b67      	ldr	r3, [pc, #412]	; (800a664 <UART_SetConfig+0x338>)
 800a4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ca:	f003 0307 	and.w	r3, r3, #7
 800a4ce:	2b05      	cmp	r3, #5
 800a4d0:	d826      	bhi.n	800a520 <UART_SetConfig+0x1f4>
 800a4d2:	a201      	add	r2, pc, #4	; (adr r2, 800a4d8 <UART_SetConfig+0x1ac>)
 800a4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d8:	0800a4f1 	.word	0x0800a4f1
 800a4dc:	0800a4f9 	.word	0x0800a4f9
 800a4e0:	0800a501 	.word	0x0800a501
 800a4e4:	0800a509 	.word	0x0800a509
 800a4e8:	0800a511 	.word	0x0800a511
 800a4ec:	0800a519 	.word	0x0800a519
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4f6:	e2f0      	b.n	800aada <UART_SetConfig+0x7ae>
 800a4f8:	2304      	movs	r3, #4
 800a4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4fe:	e2ec      	b.n	800aada <UART_SetConfig+0x7ae>
 800a500:	2308      	movs	r3, #8
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a506:	e2e8      	b.n	800aada <UART_SetConfig+0x7ae>
 800a508:	2310      	movs	r3, #16
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a50e:	e2e4      	b.n	800aada <UART_SetConfig+0x7ae>
 800a510:	2320      	movs	r3, #32
 800a512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a516:	e2e0      	b.n	800aada <UART_SetConfig+0x7ae>
 800a518:	2340      	movs	r3, #64	; 0x40
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a51e:	e2dc      	b.n	800aada <UART_SetConfig+0x7ae>
 800a520:	2380      	movs	r3, #128	; 0x80
 800a522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a526:	e2d8      	b.n	800aada <UART_SetConfig+0x7ae>
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4a4f      	ldr	r2, [pc, #316]	; (800a66c <UART_SetConfig+0x340>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d130      	bne.n	800a594 <UART_SetConfig+0x268>
 800a532:	4b4c      	ldr	r3, [pc, #304]	; (800a664 <UART_SetConfig+0x338>)
 800a534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	2b05      	cmp	r3, #5
 800a53c:	d826      	bhi.n	800a58c <UART_SetConfig+0x260>
 800a53e:	a201      	add	r2, pc, #4	; (adr r2, 800a544 <UART_SetConfig+0x218>)
 800a540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a544:	0800a55d 	.word	0x0800a55d
 800a548:	0800a565 	.word	0x0800a565
 800a54c:	0800a56d 	.word	0x0800a56d
 800a550:	0800a575 	.word	0x0800a575
 800a554:	0800a57d 	.word	0x0800a57d
 800a558:	0800a585 	.word	0x0800a585
 800a55c:	2300      	movs	r3, #0
 800a55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a562:	e2ba      	b.n	800aada <UART_SetConfig+0x7ae>
 800a564:	2304      	movs	r3, #4
 800a566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a56a:	e2b6      	b.n	800aada <UART_SetConfig+0x7ae>
 800a56c:	2308      	movs	r3, #8
 800a56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a572:	e2b2      	b.n	800aada <UART_SetConfig+0x7ae>
 800a574:	2310      	movs	r3, #16
 800a576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a57a:	e2ae      	b.n	800aada <UART_SetConfig+0x7ae>
 800a57c:	2320      	movs	r3, #32
 800a57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a582:	e2aa      	b.n	800aada <UART_SetConfig+0x7ae>
 800a584:	2340      	movs	r3, #64	; 0x40
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a58a:	e2a6      	b.n	800aada <UART_SetConfig+0x7ae>
 800a58c:	2380      	movs	r3, #128	; 0x80
 800a58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a592:	e2a2      	b.n	800aada <UART_SetConfig+0x7ae>
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a35      	ldr	r2, [pc, #212]	; (800a670 <UART_SetConfig+0x344>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d130      	bne.n	800a600 <UART_SetConfig+0x2d4>
 800a59e:	4b31      	ldr	r3, [pc, #196]	; (800a664 <UART_SetConfig+0x338>)
 800a5a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5a2:	f003 0307 	and.w	r3, r3, #7
 800a5a6:	2b05      	cmp	r3, #5
 800a5a8:	d826      	bhi.n	800a5f8 <UART_SetConfig+0x2cc>
 800a5aa:	a201      	add	r2, pc, #4	; (adr r2, 800a5b0 <UART_SetConfig+0x284>)
 800a5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b0:	0800a5c9 	.word	0x0800a5c9
 800a5b4:	0800a5d1 	.word	0x0800a5d1
 800a5b8:	0800a5d9 	.word	0x0800a5d9
 800a5bc:	0800a5e1 	.word	0x0800a5e1
 800a5c0:	0800a5e9 	.word	0x0800a5e9
 800a5c4:	0800a5f1 	.word	0x0800a5f1
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ce:	e284      	b.n	800aada <UART_SetConfig+0x7ae>
 800a5d0:	2304      	movs	r3, #4
 800a5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5d6:	e280      	b.n	800aada <UART_SetConfig+0x7ae>
 800a5d8:	2308      	movs	r3, #8
 800a5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5de:	e27c      	b.n	800aada <UART_SetConfig+0x7ae>
 800a5e0:	2310      	movs	r3, #16
 800a5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5e6:	e278      	b.n	800aada <UART_SetConfig+0x7ae>
 800a5e8:	2320      	movs	r3, #32
 800a5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ee:	e274      	b.n	800aada <UART_SetConfig+0x7ae>
 800a5f0:	2340      	movs	r3, #64	; 0x40
 800a5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5f6:	e270      	b.n	800aada <UART_SetConfig+0x7ae>
 800a5f8:	2380      	movs	r3, #128	; 0x80
 800a5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5fe:	e26c      	b.n	800aada <UART_SetConfig+0x7ae>
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a1b      	ldr	r2, [pc, #108]	; (800a674 <UART_SetConfig+0x348>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d142      	bne.n	800a690 <UART_SetConfig+0x364>
 800a60a:	4b16      	ldr	r3, [pc, #88]	; (800a664 <UART_SetConfig+0x338>)
 800a60c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a60e:	f003 0307 	and.w	r3, r3, #7
 800a612:	2b05      	cmp	r3, #5
 800a614:	d838      	bhi.n	800a688 <UART_SetConfig+0x35c>
 800a616:	a201      	add	r2, pc, #4	; (adr r2, 800a61c <UART_SetConfig+0x2f0>)
 800a618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a61c:	0800a635 	.word	0x0800a635
 800a620:	0800a63d 	.word	0x0800a63d
 800a624:	0800a645 	.word	0x0800a645
 800a628:	0800a64d 	.word	0x0800a64d
 800a62c:	0800a679 	.word	0x0800a679
 800a630:	0800a681 	.word	0x0800a681
 800a634:	2300      	movs	r3, #0
 800a636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a63a:	e24e      	b.n	800aada <UART_SetConfig+0x7ae>
 800a63c:	2304      	movs	r3, #4
 800a63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a642:	e24a      	b.n	800aada <UART_SetConfig+0x7ae>
 800a644:	2308      	movs	r3, #8
 800a646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a64a:	e246      	b.n	800aada <UART_SetConfig+0x7ae>
 800a64c:	2310      	movs	r3, #16
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a652:	e242      	b.n	800aada <UART_SetConfig+0x7ae>
 800a654:	cfff69f3 	.word	0xcfff69f3
 800a658:	58000c00 	.word	0x58000c00
 800a65c:	11fff4ff 	.word	0x11fff4ff
 800a660:	40011000 	.word	0x40011000
 800a664:	58024400 	.word	0x58024400
 800a668:	40004400 	.word	0x40004400
 800a66c:	40004800 	.word	0x40004800
 800a670:	40004c00 	.word	0x40004c00
 800a674:	40005000 	.word	0x40005000
 800a678:	2320      	movs	r3, #32
 800a67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a67e:	e22c      	b.n	800aada <UART_SetConfig+0x7ae>
 800a680:	2340      	movs	r3, #64	; 0x40
 800a682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a686:	e228      	b.n	800aada <UART_SetConfig+0x7ae>
 800a688:	2380      	movs	r3, #128	; 0x80
 800a68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a68e:	e224      	b.n	800aada <UART_SetConfig+0x7ae>
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4ab1      	ldr	r2, [pc, #708]	; (800a95c <UART_SetConfig+0x630>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d176      	bne.n	800a788 <UART_SetConfig+0x45c>
 800a69a:	4bb1      	ldr	r3, [pc, #708]	; (800a960 <UART_SetConfig+0x634>)
 800a69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a69e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6a2:	2b28      	cmp	r3, #40	; 0x28
 800a6a4:	d86c      	bhi.n	800a780 <UART_SetConfig+0x454>
 800a6a6:	a201      	add	r2, pc, #4	; (adr r2, 800a6ac <UART_SetConfig+0x380>)
 800a6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ac:	0800a751 	.word	0x0800a751
 800a6b0:	0800a781 	.word	0x0800a781
 800a6b4:	0800a781 	.word	0x0800a781
 800a6b8:	0800a781 	.word	0x0800a781
 800a6bc:	0800a781 	.word	0x0800a781
 800a6c0:	0800a781 	.word	0x0800a781
 800a6c4:	0800a781 	.word	0x0800a781
 800a6c8:	0800a781 	.word	0x0800a781
 800a6cc:	0800a759 	.word	0x0800a759
 800a6d0:	0800a781 	.word	0x0800a781
 800a6d4:	0800a781 	.word	0x0800a781
 800a6d8:	0800a781 	.word	0x0800a781
 800a6dc:	0800a781 	.word	0x0800a781
 800a6e0:	0800a781 	.word	0x0800a781
 800a6e4:	0800a781 	.word	0x0800a781
 800a6e8:	0800a781 	.word	0x0800a781
 800a6ec:	0800a761 	.word	0x0800a761
 800a6f0:	0800a781 	.word	0x0800a781
 800a6f4:	0800a781 	.word	0x0800a781
 800a6f8:	0800a781 	.word	0x0800a781
 800a6fc:	0800a781 	.word	0x0800a781
 800a700:	0800a781 	.word	0x0800a781
 800a704:	0800a781 	.word	0x0800a781
 800a708:	0800a781 	.word	0x0800a781
 800a70c:	0800a769 	.word	0x0800a769
 800a710:	0800a781 	.word	0x0800a781
 800a714:	0800a781 	.word	0x0800a781
 800a718:	0800a781 	.word	0x0800a781
 800a71c:	0800a781 	.word	0x0800a781
 800a720:	0800a781 	.word	0x0800a781
 800a724:	0800a781 	.word	0x0800a781
 800a728:	0800a781 	.word	0x0800a781
 800a72c:	0800a771 	.word	0x0800a771
 800a730:	0800a781 	.word	0x0800a781
 800a734:	0800a781 	.word	0x0800a781
 800a738:	0800a781 	.word	0x0800a781
 800a73c:	0800a781 	.word	0x0800a781
 800a740:	0800a781 	.word	0x0800a781
 800a744:	0800a781 	.word	0x0800a781
 800a748:	0800a781 	.word	0x0800a781
 800a74c:	0800a779 	.word	0x0800a779
 800a750:	2301      	movs	r3, #1
 800a752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a756:	e1c0      	b.n	800aada <UART_SetConfig+0x7ae>
 800a758:	2304      	movs	r3, #4
 800a75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a75e:	e1bc      	b.n	800aada <UART_SetConfig+0x7ae>
 800a760:	2308      	movs	r3, #8
 800a762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a766:	e1b8      	b.n	800aada <UART_SetConfig+0x7ae>
 800a768:	2310      	movs	r3, #16
 800a76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a76e:	e1b4      	b.n	800aada <UART_SetConfig+0x7ae>
 800a770:	2320      	movs	r3, #32
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a776:	e1b0      	b.n	800aada <UART_SetConfig+0x7ae>
 800a778:	2340      	movs	r3, #64	; 0x40
 800a77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a77e:	e1ac      	b.n	800aada <UART_SetConfig+0x7ae>
 800a780:	2380      	movs	r3, #128	; 0x80
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a786:	e1a8      	b.n	800aada <UART_SetConfig+0x7ae>
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a75      	ldr	r2, [pc, #468]	; (800a964 <UART_SetConfig+0x638>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d130      	bne.n	800a7f4 <UART_SetConfig+0x4c8>
 800a792:	4b73      	ldr	r3, [pc, #460]	; (800a960 <UART_SetConfig+0x634>)
 800a794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a796:	f003 0307 	and.w	r3, r3, #7
 800a79a:	2b05      	cmp	r3, #5
 800a79c:	d826      	bhi.n	800a7ec <UART_SetConfig+0x4c0>
 800a79e:	a201      	add	r2, pc, #4	; (adr r2, 800a7a4 <UART_SetConfig+0x478>)
 800a7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a4:	0800a7bd 	.word	0x0800a7bd
 800a7a8:	0800a7c5 	.word	0x0800a7c5
 800a7ac:	0800a7cd 	.word	0x0800a7cd
 800a7b0:	0800a7d5 	.word	0x0800a7d5
 800a7b4:	0800a7dd 	.word	0x0800a7dd
 800a7b8:	0800a7e5 	.word	0x0800a7e5
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7c2:	e18a      	b.n	800aada <UART_SetConfig+0x7ae>
 800a7c4:	2304      	movs	r3, #4
 800a7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ca:	e186      	b.n	800aada <UART_SetConfig+0x7ae>
 800a7cc:	2308      	movs	r3, #8
 800a7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7d2:	e182      	b.n	800aada <UART_SetConfig+0x7ae>
 800a7d4:	2310      	movs	r3, #16
 800a7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7da:	e17e      	b.n	800aada <UART_SetConfig+0x7ae>
 800a7dc:	2320      	movs	r3, #32
 800a7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7e2:	e17a      	b.n	800aada <UART_SetConfig+0x7ae>
 800a7e4:	2340      	movs	r3, #64	; 0x40
 800a7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ea:	e176      	b.n	800aada <UART_SetConfig+0x7ae>
 800a7ec:	2380      	movs	r3, #128	; 0x80
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7f2:	e172      	b.n	800aada <UART_SetConfig+0x7ae>
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a5b      	ldr	r2, [pc, #364]	; (800a968 <UART_SetConfig+0x63c>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d130      	bne.n	800a860 <UART_SetConfig+0x534>
 800a7fe:	4b58      	ldr	r3, [pc, #352]	; (800a960 <UART_SetConfig+0x634>)
 800a800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a802:	f003 0307 	and.w	r3, r3, #7
 800a806:	2b05      	cmp	r3, #5
 800a808:	d826      	bhi.n	800a858 <UART_SetConfig+0x52c>
 800a80a:	a201      	add	r2, pc, #4	; (adr r2, 800a810 <UART_SetConfig+0x4e4>)
 800a80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a810:	0800a829 	.word	0x0800a829
 800a814:	0800a831 	.word	0x0800a831
 800a818:	0800a839 	.word	0x0800a839
 800a81c:	0800a841 	.word	0x0800a841
 800a820:	0800a849 	.word	0x0800a849
 800a824:	0800a851 	.word	0x0800a851
 800a828:	2300      	movs	r3, #0
 800a82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a82e:	e154      	b.n	800aada <UART_SetConfig+0x7ae>
 800a830:	2304      	movs	r3, #4
 800a832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a836:	e150      	b.n	800aada <UART_SetConfig+0x7ae>
 800a838:	2308      	movs	r3, #8
 800a83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a83e:	e14c      	b.n	800aada <UART_SetConfig+0x7ae>
 800a840:	2310      	movs	r3, #16
 800a842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a846:	e148      	b.n	800aada <UART_SetConfig+0x7ae>
 800a848:	2320      	movs	r3, #32
 800a84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a84e:	e144      	b.n	800aada <UART_SetConfig+0x7ae>
 800a850:	2340      	movs	r3, #64	; 0x40
 800a852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a856:	e140      	b.n	800aada <UART_SetConfig+0x7ae>
 800a858:	2380      	movs	r3, #128	; 0x80
 800a85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a85e:	e13c      	b.n	800aada <UART_SetConfig+0x7ae>
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a41      	ldr	r2, [pc, #260]	; (800a96c <UART_SetConfig+0x640>)
 800a866:	4293      	cmp	r3, r2
 800a868:	f040 8082 	bne.w	800a970 <UART_SetConfig+0x644>
 800a86c:	4b3c      	ldr	r3, [pc, #240]	; (800a960 <UART_SetConfig+0x634>)
 800a86e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a870:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a874:	2b28      	cmp	r3, #40	; 0x28
 800a876:	d86d      	bhi.n	800a954 <UART_SetConfig+0x628>
 800a878:	a201      	add	r2, pc, #4	; (adr r2, 800a880 <UART_SetConfig+0x554>)
 800a87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87e:	bf00      	nop
 800a880:	0800a925 	.word	0x0800a925
 800a884:	0800a955 	.word	0x0800a955
 800a888:	0800a955 	.word	0x0800a955
 800a88c:	0800a955 	.word	0x0800a955
 800a890:	0800a955 	.word	0x0800a955
 800a894:	0800a955 	.word	0x0800a955
 800a898:	0800a955 	.word	0x0800a955
 800a89c:	0800a955 	.word	0x0800a955
 800a8a0:	0800a92d 	.word	0x0800a92d
 800a8a4:	0800a955 	.word	0x0800a955
 800a8a8:	0800a955 	.word	0x0800a955
 800a8ac:	0800a955 	.word	0x0800a955
 800a8b0:	0800a955 	.word	0x0800a955
 800a8b4:	0800a955 	.word	0x0800a955
 800a8b8:	0800a955 	.word	0x0800a955
 800a8bc:	0800a955 	.word	0x0800a955
 800a8c0:	0800a935 	.word	0x0800a935
 800a8c4:	0800a955 	.word	0x0800a955
 800a8c8:	0800a955 	.word	0x0800a955
 800a8cc:	0800a955 	.word	0x0800a955
 800a8d0:	0800a955 	.word	0x0800a955
 800a8d4:	0800a955 	.word	0x0800a955
 800a8d8:	0800a955 	.word	0x0800a955
 800a8dc:	0800a955 	.word	0x0800a955
 800a8e0:	0800a93d 	.word	0x0800a93d
 800a8e4:	0800a955 	.word	0x0800a955
 800a8e8:	0800a955 	.word	0x0800a955
 800a8ec:	0800a955 	.word	0x0800a955
 800a8f0:	0800a955 	.word	0x0800a955
 800a8f4:	0800a955 	.word	0x0800a955
 800a8f8:	0800a955 	.word	0x0800a955
 800a8fc:	0800a955 	.word	0x0800a955
 800a900:	0800a945 	.word	0x0800a945
 800a904:	0800a955 	.word	0x0800a955
 800a908:	0800a955 	.word	0x0800a955
 800a90c:	0800a955 	.word	0x0800a955
 800a910:	0800a955 	.word	0x0800a955
 800a914:	0800a955 	.word	0x0800a955
 800a918:	0800a955 	.word	0x0800a955
 800a91c:	0800a955 	.word	0x0800a955
 800a920:	0800a94d 	.word	0x0800a94d
 800a924:	2301      	movs	r3, #1
 800a926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a92a:	e0d6      	b.n	800aada <UART_SetConfig+0x7ae>
 800a92c:	2304      	movs	r3, #4
 800a92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a932:	e0d2      	b.n	800aada <UART_SetConfig+0x7ae>
 800a934:	2308      	movs	r3, #8
 800a936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a93a:	e0ce      	b.n	800aada <UART_SetConfig+0x7ae>
 800a93c:	2310      	movs	r3, #16
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a942:	e0ca      	b.n	800aada <UART_SetConfig+0x7ae>
 800a944:	2320      	movs	r3, #32
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94a:	e0c6      	b.n	800aada <UART_SetConfig+0x7ae>
 800a94c:	2340      	movs	r3, #64	; 0x40
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a952:	e0c2      	b.n	800aada <UART_SetConfig+0x7ae>
 800a954:	2380      	movs	r3, #128	; 0x80
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a95a:	e0be      	b.n	800aada <UART_SetConfig+0x7ae>
 800a95c:	40011400 	.word	0x40011400
 800a960:	58024400 	.word	0x58024400
 800a964:	40007800 	.word	0x40007800
 800a968:	40007c00 	.word	0x40007c00
 800a96c:	40011800 	.word	0x40011800
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4aad      	ldr	r2, [pc, #692]	; (800ac2c <UART_SetConfig+0x900>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d176      	bne.n	800aa68 <UART_SetConfig+0x73c>
 800a97a:	4bad      	ldr	r3, [pc, #692]	; (800ac30 <UART_SetConfig+0x904>)
 800a97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a97e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a982:	2b28      	cmp	r3, #40	; 0x28
 800a984:	d86c      	bhi.n	800aa60 <UART_SetConfig+0x734>
 800a986:	a201      	add	r2, pc, #4	; (adr r2, 800a98c <UART_SetConfig+0x660>)
 800a988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98c:	0800aa31 	.word	0x0800aa31
 800a990:	0800aa61 	.word	0x0800aa61
 800a994:	0800aa61 	.word	0x0800aa61
 800a998:	0800aa61 	.word	0x0800aa61
 800a99c:	0800aa61 	.word	0x0800aa61
 800a9a0:	0800aa61 	.word	0x0800aa61
 800a9a4:	0800aa61 	.word	0x0800aa61
 800a9a8:	0800aa61 	.word	0x0800aa61
 800a9ac:	0800aa39 	.word	0x0800aa39
 800a9b0:	0800aa61 	.word	0x0800aa61
 800a9b4:	0800aa61 	.word	0x0800aa61
 800a9b8:	0800aa61 	.word	0x0800aa61
 800a9bc:	0800aa61 	.word	0x0800aa61
 800a9c0:	0800aa61 	.word	0x0800aa61
 800a9c4:	0800aa61 	.word	0x0800aa61
 800a9c8:	0800aa61 	.word	0x0800aa61
 800a9cc:	0800aa41 	.word	0x0800aa41
 800a9d0:	0800aa61 	.word	0x0800aa61
 800a9d4:	0800aa61 	.word	0x0800aa61
 800a9d8:	0800aa61 	.word	0x0800aa61
 800a9dc:	0800aa61 	.word	0x0800aa61
 800a9e0:	0800aa61 	.word	0x0800aa61
 800a9e4:	0800aa61 	.word	0x0800aa61
 800a9e8:	0800aa61 	.word	0x0800aa61
 800a9ec:	0800aa49 	.word	0x0800aa49
 800a9f0:	0800aa61 	.word	0x0800aa61
 800a9f4:	0800aa61 	.word	0x0800aa61
 800a9f8:	0800aa61 	.word	0x0800aa61
 800a9fc:	0800aa61 	.word	0x0800aa61
 800aa00:	0800aa61 	.word	0x0800aa61
 800aa04:	0800aa61 	.word	0x0800aa61
 800aa08:	0800aa61 	.word	0x0800aa61
 800aa0c:	0800aa51 	.word	0x0800aa51
 800aa10:	0800aa61 	.word	0x0800aa61
 800aa14:	0800aa61 	.word	0x0800aa61
 800aa18:	0800aa61 	.word	0x0800aa61
 800aa1c:	0800aa61 	.word	0x0800aa61
 800aa20:	0800aa61 	.word	0x0800aa61
 800aa24:	0800aa61 	.word	0x0800aa61
 800aa28:	0800aa61 	.word	0x0800aa61
 800aa2c:	0800aa59 	.word	0x0800aa59
 800aa30:	2301      	movs	r3, #1
 800aa32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa36:	e050      	b.n	800aada <UART_SetConfig+0x7ae>
 800aa38:	2304      	movs	r3, #4
 800aa3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa3e:	e04c      	b.n	800aada <UART_SetConfig+0x7ae>
 800aa40:	2308      	movs	r3, #8
 800aa42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa46:	e048      	b.n	800aada <UART_SetConfig+0x7ae>
 800aa48:	2310      	movs	r3, #16
 800aa4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa4e:	e044      	b.n	800aada <UART_SetConfig+0x7ae>
 800aa50:	2320      	movs	r3, #32
 800aa52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa56:	e040      	b.n	800aada <UART_SetConfig+0x7ae>
 800aa58:	2340      	movs	r3, #64	; 0x40
 800aa5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa5e:	e03c      	b.n	800aada <UART_SetConfig+0x7ae>
 800aa60:	2380      	movs	r3, #128	; 0x80
 800aa62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa66:	e038      	b.n	800aada <UART_SetConfig+0x7ae>
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a71      	ldr	r2, [pc, #452]	; (800ac34 <UART_SetConfig+0x908>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d130      	bne.n	800aad4 <UART_SetConfig+0x7a8>
 800aa72:	4b6f      	ldr	r3, [pc, #444]	; (800ac30 <UART_SetConfig+0x904>)
 800aa74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa76:	f003 0307 	and.w	r3, r3, #7
 800aa7a:	2b05      	cmp	r3, #5
 800aa7c:	d826      	bhi.n	800aacc <UART_SetConfig+0x7a0>
 800aa7e:	a201      	add	r2, pc, #4	; (adr r2, 800aa84 <UART_SetConfig+0x758>)
 800aa80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa84:	0800aa9d 	.word	0x0800aa9d
 800aa88:	0800aaa5 	.word	0x0800aaa5
 800aa8c:	0800aaad 	.word	0x0800aaad
 800aa90:	0800aab5 	.word	0x0800aab5
 800aa94:	0800aabd 	.word	0x0800aabd
 800aa98:	0800aac5 	.word	0x0800aac5
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaa2:	e01a      	b.n	800aada <UART_SetConfig+0x7ae>
 800aaa4:	2304      	movs	r3, #4
 800aaa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaaa:	e016      	b.n	800aada <UART_SetConfig+0x7ae>
 800aaac:	2308      	movs	r3, #8
 800aaae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aab2:	e012      	b.n	800aada <UART_SetConfig+0x7ae>
 800aab4:	2310      	movs	r3, #16
 800aab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaba:	e00e      	b.n	800aada <UART_SetConfig+0x7ae>
 800aabc:	2320      	movs	r3, #32
 800aabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aac2:	e00a      	b.n	800aada <UART_SetConfig+0x7ae>
 800aac4:	2340      	movs	r3, #64	; 0x40
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaca:	e006      	b.n	800aada <UART_SetConfig+0x7ae>
 800aacc:	2380      	movs	r3, #128	; 0x80
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aad2:	e002      	b.n	800aada <UART_SetConfig+0x7ae>
 800aad4:	2380      	movs	r3, #128	; 0x80
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a55      	ldr	r2, [pc, #340]	; (800ac34 <UART_SetConfig+0x908>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	f040 80f8 	bne.w	800acd6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aae6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aaea:	2b20      	cmp	r3, #32
 800aaec:	dc46      	bgt.n	800ab7c <UART_SetConfig+0x850>
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	db75      	blt.n	800abde <UART_SetConfig+0x8b2>
 800aaf2:	3b02      	subs	r3, #2
 800aaf4:	2b1e      	cmp	r3, #30
 800aaf6:	d872      	bhi.n	800abde <UART_SetConfig+0x8b2>
 800aaf8:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <UART_SetConfig+0x7d4>)
 800aafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafe:	bf00      	nop
 800ab00:	0800ab83 	.word	0x0800ab83
 800ab04:	0800abdf 	.word	0x0800abdf
 800ab08:	0800ab8b 	.word	0x0800ab8b
 800ab0c:	0800abdf 	.word	0x0800abdf
 800ab10:	0800abdf 	.word	0x0800abdf
 800ab14:	0800abdf 	.word	0x0800abdf
 800ab18:	0800ab9b 	.word	0x0800ab9b
 800ab1c:	0800abdf 	.word	0x0800abdf
 800ab20:	0800abdf 	.word	0x0800abdf
 800ab24:	0800abdf 	.word	0x0800abdf
 800ab28:	0800abdf 	.word	0x0800abdf
 800ab2c:	0800abdf 	.word	0x0800abdf
 800ab30:	0800abdf 	.word	0x0800abdf
 800ab34:	0800abdf 	.word	0x0800abdf
 800ab38:	0800abab 	.word	0x0800abab
 800ab3c:	0800abdf 	.word	0x0800abdf
 800ab40:	0800abdf 	.word	0x0800abdf
 800ab44:	0800abdf 	.word	0x0800abdf
 800ab48:	0800abdf 	.word	0x0800abdf
 800ab4c:	0800abdf 	.word	0x0800abdf
 800ab50:	0800abdf 	.word	0x0800abdf
 800ab54:	0800abdf 	.word	0x0800abdf
 800ab58:	0800abdf 	.word	0x0800abdf
 800ab5c:	0800abdf 	.word	0x0800abdf
 800ab60:	0800abdf 	.word	0x0800abdf
 800ab64:	0800abdf 	.word	0x0800abdf
 800ab68:	0800abdf 	.word	0x0800abdf
 800ab6c:	0800abdf 	.word	0x0800abdf
 800ab70:	0800abdf 	.word	0x0800abdf
 800ab74:	0800abdf 	.word	0x0800abdf
 800ab78:	0800abd1 	.word	0x0800abd1
 800ab7c:	2b40      	cmp	r3, #64	; 0x40
 800ab7e:	d02a      	beq.n	800abd6 <UART_SetConfig+0x8aa>
 800ab80:	e02d      	b.n	800abde <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ab82:	f7fe fa89 	bl	8009098 <HAL_RCCEx_GetD3PCLK1Freq>
 800ab86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab88:	e02f      	b.n	800abea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fe fa98 	bl	80090c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab98:	e027      	b.n	800abea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab9a:	f107 0318 	add.w	r3, r7, #24
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fe fbe4 	bl	800936c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba8:	e01f      	b.n	800abea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abaa:	4b21      	ldr	r3, [pc, #132]	; (800ac30 <UART_SetConfig+0x904>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 0320 	and.w	r3, r3, #32
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d009      	beq.n	800abca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abb6:	4b1e      	ldr	r3, [pc, #120]	; (800ac30 <UART_SetConfig+0x904>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	08db      	lsrs	r3, r3, #3
 800abbc:	f003 0303 	and.w	r3, r3, #3
 800abc0:	4a1d      	ldr	r2, [pc, #116]	; (800ac38 <UART_SetConfig+0x90c>)
 800abc2:	fa22 f303 	lsr.w	r3, r2, r3
 800abc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abc8:	e00f      	b.n	800abea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800abca:	4b1b      	ldr	r3, [pc, #108]	; (800ac38 <UART_SetConfig+0x90c>)
 800abcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abce:	e00c      	b.n	800abea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abd0:	4b1a      	ldr	r3, [pc, #104]	; (800ac3c <UART_SetConfig+0x910>)
 800abd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abd4:	e009      	b.n	800abea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abdc:	e005      	b.n	800abea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800abde:	2300      	movs	r3, #0
 800abe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800abe8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800abea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abec:	2b00      	cmp	r3, #0
 800abee:	f000 81ee 	beq.w	800afce <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf6:	4a12      	ldr	r2, [pc, #72]	; (800ac40 <UART_SetConfig+0x914>)
 800abf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abfc:	461a      	mov	r2, r3
 800abfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac00:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac04:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	4413      	add	r3, r2
 800ac10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d305      	bcc.n	800ac22 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d910      	bls.n	800ac44 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ac28:	e1d1      	b.n	800afce <UART_SetConfig+0xca2>
 800ac2a:	bf00      	nop
 800ac2c:	40011c00 	.word	0x40011c00
 800ac30:	58024400 	.word	0x58024400
 800ac34:	58000c00 	.word	0x58000c00
 800ac38:	03d09000 	.word	0x03d09000
 800ac3c:	003d0900 	.word	0x003d0900
 800ac40:	0800ba68 	.word	0x0800ba68
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac46:	2200      	movs	r2, #0
 800ac48:	60bb      	str	r3, [r7, #8]
 800ac4a:	60fa      	str	r2, [r7, #12]
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac50:	4ac0      	ldr	r2, [pc, #768]	; (800af54 <UART_SetConfig+0xc28>)
 800ac52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	2200      	movs	r2, #0
 800ac5a:	603b      	str	r3, [r7, #0]
 800ac5c:	607a      	str	r2, [r7, #4]
 800ac5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac66:	f7f5 fcff 	bl	8000668 <__aeabi_uldivmod>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	4610      	mov	r0, r2
 800ac70:	4619      	mov	r1, r3
 800ac72:	f04f 0200 	mov.w	r2, #0
 800ac76:	f04f 0300 	mov.w	r3, #0
 800ac7a:	020b      	lsls	r3, r1, #8
 800ac7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac80:	0202      	lsls	r2, r0, #8
 800ac82:	6979      	ldr	r1, [r7, #20]
 800ac84:	6849      	ldr	r1, [r1, #4]
 800ac86:	0849      	lsrs	r1, r1, #1
 800ac88:	2000      	movs	r0, #0
 800ac8a:	460c      	mov	r4, r1
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	eb12 0804 	adds.w	r8, r2, r4
 800ac92:	eb43 0905 	adc.w	r9, r3, r5
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	469a      	mov	sl, r3
 800ac9e:	4693      	mov	fp, r2
 800aca0:	4652      	mov	r2, sl
 800aca2:	465b      	mov	r3, fp
 800aca4:	4640      	mov	r0, r8
 800aca6:	4649      	mov	r1, r9
 800aca8:	f7f5 fcde 	bl	8000668 <__aeabi_uldivmod>
 800acac:	4602      	mov	r2, r0
 800acae:	460b      	mov	r3, r1
 800acb0:	4613      	mov	r3, r2
 800acb2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800acb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acba:	d308      	bcc.n	800acce <UART_SetConfig+0x9a2>
 800acbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acc2:	d204      	bcs.n	800acce <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acca:	60da      	str	r2, [r3, #12]
 800accc:	e17f      	b.n	800afce <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800acd4:	e17b      	b.n	800afce <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	69db      	ldr	r3, [r3, #28]
 800acda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acde:	f040 80bd 	bne.w	800ae5c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ace2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ace6:	2b20      	cmp	r3, #32
 800ace8:	dc48      	bgt.n	800ad7c <UART_SetConfig+0xa50>
 800acea:	2b00      	cmp	r3, #0
 800acec:	db7b      	blt.n	800ade6 <UART_SetConfig+0xaba>
 800acee:	2b20      	cmp	r3, #32
 800acf0:	d879      	bhi.n	800ade6 <UART_SetConfig+0xaba>
 800acf2:	a201      	add	r2, pc, #4	; (adr r2, 800acf8 <UART_SetConfig+0x9cc>)
 800acf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf8:	0800ad83 	.word	0x0800ad83
 800acfc:	0800ad8b 	.word	0x0800ad8b
 800ad00:	0800ade7 	.word	0x0800ade7
 800ad04:	0800ade7 	.word	0x0800ade7
 800ad08:	0800ad93 	.word	0x0800ad93
 800ad0c:	0800ade7 	.word	0x0800ade7
 800ad10:	0800ade7 	.word	0x0800ade7
 800ad14:	0800ade7 	.word	0x0800ade7
 800ad18:	0800ada3 	.word	0x0800ada3
 800ad1c:	0800ade7 	.word	0x0800ade7
 800ad20:	0800ade7 	.word	0x0800ade7
 800ad24:	0800ade7 	.word	0x0800ade7
 800ad28:	0800ade7 	.word	0x0800ade7
 800ad2c:	0800ade7 	.word	0x0800ade7
 800ad30:	0800ade7 	.word	0x0800ade7
 800ad34:	0800ade7 	.word	0x0800ade7
 800ad38:	0800adb3 	.word	0x0800adb3
 800ad3c:	0800ade7 	.word	0x0800ade7
 800ad40:	0800ade7 	.word	0x0800ade7
 800ad44:	0800ade7 	.word	0x0800ade7
 800ad48:	0800ade7 	.word	0x0800ade7
 800ad4c:	0800ade7 	.word	0x0800ade7
 800ad50:	0800ade7 	.word	0x0800ade7
 800ad54:	0800ade7 	.word	0x0800ade7
 800ad58:	0800ade7 	.word	0x0800ade7
 800ad5c:	0800ade7 	.word	0x0800ade7
 800ad60:	0800ade7 	.word	0x0800ade7
 800ad64:	0800ade7 	.word	0x0800ade7
 800ad68:	0800ade7 	.word	0x0800ade7
 800ad6c:	0800ade7 	.word	0x0800ade7
 800ad70:	0800ade7 	.word	0x0800ade7
 800ad74:	0800ade7 	.word	0x0800ade7
 800ad78:	0800add9 	.word	0x0800add9
 800ad7c:	2b40      	cmp	r3, #64	; 0x40
 800ad7e:	d02e      	beq.n	800adde <UART_SetConfig+0xab2>
 800ad80:	e031      	b.n	800ade6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad82:	f7fc fe23 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 800ad86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ad88:	e033      	b.n	800adf2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad8a:	f7fc fe35 	bl	80079f8 <HAL_RCC_GetPCLK2Freq>
 800ad8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ad90:	e02f      	b.n	800adf2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7fe f994 	bl	80090c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ada0:	e027      	b.n	800adf2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ada2:	f107 0318 	add.w	r3, r7, #24
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fe fae0 	bl	800936c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adb0:	e01f      	b.n	800adf2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adb2:	4b69      	ldr	r3, [pc, #420]	; (800af58 <UART_SetConfig+0xc2c>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 0320 	and.w	r3, r3, #32
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d009      	beq.n	800add2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800adbe:	4b66      	ldr	r3, [pc, #408]	; (800af58 <UART_SetConfig+0xc2c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	08db      	lsrs	r3, r3, #3
 800adc4:	f003 0303 	and.w	r3, r3, #3
 800adc8:	4a64      	ldr	r2, [pc, #400]	; (800af5c <UART_SetConfig+0xc30>)
 800adca:	fa22 f303 	lsr.w	r3, r2, r3
 800adce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800add0:	e00f      	b.n	800adf2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800add2:	4b62      	ldr	r3, [pc, #392]	; (800af5c <UART_SetConfig+0xc30>)
 800add4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800add6:	e00c      	b.n	800adf2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800add8:	4b61      	ldr	r3, [pc, #388]	; (800af60 <UART_SetConfig+0xc34>)
 800adda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800addc:	e009      	b.n	800adf2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ade2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ade4:	e005      	b.n	800adf2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ade6:	2300      	movs	r3, #0
 800ade8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800adf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f000 80ea 	beq.w	800afce <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfe:	4a55      	ldr	r2, [pc, #340]	; (800af54 <UART_SetConfig+0xc28>)
 800ae00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae04:	461a      	mov	r2, r3
 800ae06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae08:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae0c:	005a      	lsls	r2, r3, #1
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	085b      	lsrs	r3, r3, #1
 800ae14:	441a      	add	r2, r3
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae22:	2b0f      	cmp	r3, #15
 800ae24:	d916      	bls.n	800ae54 <UART_SetConfig+0xb28>
 800ae26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae2c:	d212      	bcs.n	800ae54 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	f023 030f 	bic.w	r3, r3, #15
 800ae36:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3a:	085b      	lsrs	r3, r3, #1
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	f003 0307 	and.w	r3, r3, #7
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae46:	4313      	orrs	r3, r2
 800ae48:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ae50:	60da      	str	r2, [r3, #12]
 800ae52:	e0bc      	b.n	800afce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ae54:	2301      	movs	r3, #1
 800ae56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ae5a:	e0b8      	b.n	800afce <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ae60:	2b20      	cmp	r3, #32
 800ae62:	dc4b      	bgt.n	800aefc <UART_SetConfig+0xbd0>
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	f2c0 8087 	blt.w	800af78 <UART_SetConfig+0xc4c>
 800ae6a:	2b20      	cmp	r3, #32
 800ae6c:	f200 8084 	bhi.w	800af78 <UART_SetConfig+0xc4c>
 800ae70:	a201      	add	r2, pc, #4	; (adr r2, 800ae78 <UART_SetConfig+0xb4c>)
 800ae72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae76:	bf00      	nop
 800ae78:	0800af03 	.word	0x0800af03
 800ae7c:	0800af0b 	.word	0x0800af0b
 800ae80:	0800af79 	.word	0x0800af79
 800ae84:	0800af79 	.word	0x0800af79
 800ae88:	0800af13 	.word	0x0800af13
 800ae8c:	0800af79 	.word	0x0800af79
 800ae90:	0800af79 	.word	0x0800af79
 800ae94:	0800af79 	.word	0x0800af79
 800ae98:	0800af23 	.word	0x0800af23
 800ae9c:	0800af79 	.word	0x0800af79
 800aea0:	0800af79 	.word	0x0800af79
 800aea4:	0800af79 	.word	0x0800af79
 800aea8:	0800af79 	.word	0x0800af79
 800aeac:	0800af79 	.word	0x0800af79
 800aeb0:	0800af79 	.word	0x0800af79
 800aeb4:	0800af79 	.word	0x0800af79
 800aeb8:	0800af33 	.word	0x0800af33
 800aebc:	0800af79 	.word	0x0800af79
 800aec0:	0800af79 	.word	0x0800af79
 800aec4:	0800af79 	.word	0x0800af79
 800aec8:	0800af79 	.word	0x0800af79
 800aecc:	0800af79 	.word	0x0800af79
 800aed0:	0800af79 	.word	0x0800af79
 800aed4:	0800af79 	.word	0x0800af79
 800aed8:	0800af79 	.word	0x0800af79
 800aedc:	0800af79 	.word	0x0800af79
 800aee0:	0800af79 	.word	0x0800af79
 800aee4:	0800af79 	.word	0x0800af79
 800aee8:	0800af79 	.word	0x0800af79
 800aeec:	0800af79 	.word	0x0800af79
 800aef0:	0800af79 	.word	0x0800af79
 800aef4:	0800af79 	.word	0x0800af79
 800aef8:	0800af6b 	.word	0x0800af6b
 800aefc:	2b40      	cmp	r3, #64	; 0x40
 800aefe:	d037      	beq.n	800af70 <UART_SetConfig+0xc44>
 800af00:	e03a      	b.n	800af78 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af02:	f7fc fd63 	bl	80079cc <HAL_RCC_GetPCLK1Freq>
 800af06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af08:	e03c      	b.n	800af84 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af0a:	f7fc fd75 	bl	80079f8 <HAL_RCC_GetPCLK2Freq>
 800af0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af10:	e038      	b.n	800af84 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af16:	4618      	mov	r0, r3
 800af18:	f7fe f8d4 	bl	80090c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af20:	e030      	b.n	800af84 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af22:	f107 0318 	add.w	r3, r7, #24
 800af26:	4618      	mov	r0, r3
 800af28:	f7fe fa20 	bl	800936c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af30:	e028      	b.n	800af84 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af32:	4b09      	ldr	r3, [pc, #36]	; (800af58 <UART_SetConfig+0xc2c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 0320 	and.w	r3, r3, #32
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d012      	beq.n	800af64 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af3e:	4b06      	ldr	r3, [pc, #24]	; (800af58 <UART_SetConfig+0xc2c>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	08db      	lsrs	r3, r3, #3
 800af44:	f003 0303 	and.w	r3, r3, #3
 800af48:	4a04      	ldr	r2, [pc, #16]	; (800af5c <UART_SetConfig+0xc30>)
 800af4a:	fa22 f303 	lsr.w	r3, r2, r3
 800af4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af50:	e018      	b.n	800af84 <UART_SetConfig+0xc58>
 800af52:	bf00      	nop
 800af54:	0800ba68 	.word	0x0800ba68
 800af58:	58024400 	.word	0x58024400
 800af5c:	03d09000 	.word	0x03d09000
 800af60:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800af64:	4b24      	ldr	r3, [pc, #144]	; (800aff8 <UART_SetConfig+0xccc>)
 800af66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af68:	e00c      	b.n	800af84 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af6a:	4b24      	ldr	r3, [pc, #144]	; (800affc <UART_SetConfig+0xcd0>)
 800af6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af6e:	e009      	b.n	800af84 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af76:	e005      	b.n	800af84 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800af78:	2300      	movs	r3, #0
 800af7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800af82:	bf00      	nop
    }

    if (pclk != 0U)
 800af84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af86:	2b00      	cmp	r3, #0
 800af88:	d021      	beq.n	800afce <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	4a1c      	ldr	r2, [pc, #112]	; (800b000 <UART_SetConfig+0xcd4>)
 800af90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af94:	461a      	mov	r2, r3
 800af96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af98:	fbb3 f2f2 	udiv	r2, r3, r2
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	085b      	lsrs	r3, r3, #1
 800afa2:	441a      	add	r2, r3
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	fbb2 f3f3 	udiv	r3, r2, r3
 800afac:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb0:	2b0f      	cmp	r3, #15
 800afb2:	d909      	bls.n	800afc8 <UART_SetConfig+0xc9c>
 800afb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afba:	d205      	bcs.n	800afc8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800afbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	60da      	str	r2, [r3, #12]
 800afc6:	e002      	b.n	800afce <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	2201      	movs	r2, #1
 800afd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	2201      	movs	r2, #1
 800afda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	2200      	movs	r2, #0
 800afe2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	2200      	movs	r2, #0
 800afe8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800afea:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3748      	adds	r7, #72	; 0x48
 800aff2:	46bd      	mov	sp, r7
 800aff4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aff8:	03d09000 	.word	0x03d09000
 800affc:	003d0900 	.word	0x003d0900
 800b000:	0800ba68 	.word	0x0800ba68

0800b004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00a      	beq.n	800b02e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	430a      	orrs	r2, r1
 800b02c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b032:	f003 0302 	and.w	r3, r3, #2
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00a      	beq.n	800b050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	430a      	orrs	r2, r1
 800b04e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b054:	f003 0304 	and.w	r3, r3, #4
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d00a      	beq.n	800b072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	430a      	orrs	r2, r1
 800b070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b076:	f003 0308 	and.w	r3, r3, #8
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00a      	beq.n	800b094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	430a      	orrs	r2, r1
 800b092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b098:	f003 0310 	and.w	r3, r3, #16
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00a      	beq.n	800b0b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	430a      	orrs	r2, r1
 800b0b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ba:	f003 0320 	and.w	r3, r3, #32
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00a      	beq.n	800b0d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	430a      	orrs	r2, r1
 800b0d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d01a      	beq.n	800b11a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	430a      	orrs	r2, r1
 800b0f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b102:	d10a      	bne.n	800b11a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	430a      	orrs	r2, r1
 800b118:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00a      	beq.n	800b13c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	430a      	orrs	r2, r1
 800b13a:	605a      	str	r2, [r3, #4]
  }
}
 800b13c:	bf00      	nop
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af02      	add	r7, sp, #8
 800b14e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b158:	f7f7 fb90 	bl	800287c <HAL_GetTick>
 800b15c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f003 0308 	and.w	r3, r3, #8
 800b168:	2b08      	cmp	r3, #8
 800b16a:	d10e      	bne.n	800b18a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b16c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 f82f 	bl	800b1de <UART_WaitOnFlagUntilTimeout>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d001      	beq.n	800b18a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b186:	2303      	movs	r3, #3
 800b188:	e025      	b.n	800b1d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 0304 	and.w	r3, r3, #4
 800b194:	2b04      	cmp	r3, #4
 800b196:	d10e      	bne.n	800b1b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 f819 	bl	800b1de <UART_WaitOnFlagUntilTimeout>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d001      	beq.n	800b1b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1b2:	2303      	movs	r3, #3
 800b1b4:	e00f      	b.n	800b1d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2220      	movs	r2, #32
 800b1ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2220      	movs	r2, #32
 800b1c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b09c      	sub	sp, #112	; 0x70
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	60f8      	str	r0, [r7, #12]
 800b1e6:	60b9      	str	r1, [r7, #8]
 800b1e8:	603b      	str	r3, [r7, #0]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1ee:	e0a9      	b.n	800b344 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f6:	f000 80a5 	beq.w	800b344 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1fa:	f7f7 fb3f 	bl	800287c <HAL_GetTick>
 800b1fe:	4602      	mov	r2, r0
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b206:	429a      	cmp	r2, r3
 800b208:	d302      	bcc.n	800b210 <UART_WaitOnFlagUntilTimeout+0x32>
 800b20a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d140      	bne.n	800b292 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b218:	e853 3f00 	ldrex	r3, [r3]
 800b21c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b21e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b220:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b224:	667b      	str	r3, [r7, #100]	; 0x64
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	461a      	mov	r2, r3
 800b22c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b22e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b230:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b232:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b234:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b236:	e841 2300 	strex	r3, r2, [r1]
 800b23a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b23c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1e6      	bne.n	800b210 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	3308      	adds	r3, #8
 800b248:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b24c:	e853 3f00 	ldrex	r3, [r3]
 800b250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b254:	f023 0301 	bic.w	r3, r3, #1
 800b258:	663b      	str	r3, [r7, #96]	; 0x60
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	3308      	adds	r3, #8
 800b260:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b262:	64ba      	str	r2, [r7, #72]	; 0x48
 800b264:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b266:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b26a:	e841 2300 	strex	r3, r2, [r1]
 800b26e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b272:	2b00      	cmp	r3, #0
 800b274:	d1e5      	bne.n	800b242 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2220      	movs	r2, #32
 800b27a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2220      	movs	r2, #32
 800b282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b28e:	2303      	movs	r3, #3
 800b290:	e069      	b.n	800b366 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f003 0304 	and.w	r3, r3, #4
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d051      	beq.n	800b344 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2ae:	d149      	bne.n	800b344 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c2:	e853 3f00 	ldrex	r3, [r3]
 800b2c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b2ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b2da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2e0:	e841 2300 	strex	r3, r2, [r1]
 800b2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1e6      	bne.n	800b2ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	e853 3f00 	ldrex	r3, [r3]
 800b2fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	f023 0301 	bic.w	r3, r3, #1
 800b302:	66bb      	str	r3, [r7, #104]	; 0x68
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	3308      	adds	r3, #8
 800b30a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b30c:	623a      	str	r2, [r7, #32]
 800b30e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b310:	69f9      	ldr	r1, [r7, #28]
 800b312:	6a3a      	ldr	r2, [r7, #32]
 800b314:	e841 2300 	strex	r3, r2, [r1]
 800b318:	61bb      	str	r3, [r7, #24]
   return(result);
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1e5      	bne.n	800b2ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2220      	movs	r2, #32
 800b324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2220      	movs	r2, #32
 800b32c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2220      	movs	r2, #32
 800b334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b340:	2303      	movs	r3, #3
 800b342:	e010      	b.n	800b366 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	69da      	ldr	r2, [r3, #28]
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	4013      	ands	r3, r2
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	429a      	cmp	r2, r3
 800b352:	bf0c      	ite	eq
 800b354:	2301      	moveq	r3, #1
 800b356:	2300      	movne	r3, #0
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	461a      	mov	r2, r3
 800b35c:	79fb      	ldrb	r3, [r7, #7]
 800b35e:	429a      	cmp	r2, r3
 800b360:	f43f af46 	beq.w	800b1f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3770      	adds	r7, #112	; 0x70
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b36e:	b480      	push	{r7}
 800b370:	b085      	sub	sp, #20
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d101      	bne.n	800b384 <HAL_UARTEx_DisableFifoMode+0x16>
 800b380:	2302      	movs	r3, #2
 800b382:	e027      	b.n	800b3d4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2224      	movs	r2, #36	; 0x24
 800b390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f022 0201 	bic.w	r2, r2, #1
 800b3aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b3b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2220      	movs	r2, #32
 800b3c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3714      	adds	r7, #20
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d101      	bne.n	800b3f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	e02d      	b.n	800b454 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2224      	movs	r2, #36	; 0x24
 800b404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f022 0201 	bic.w	r2, r2, #1
 800b41e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	689b      	ldr	r3, [r3, #8]
 800b426:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	430a      	orrs	r2, r1
 800b432:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 f84f 	bl	800b4d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2220      	movs	r2, #32
 800b446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d101      	bne.n	800b474 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b470:	2302      	movs	r3, #2
 800b472:	e02d      	b.n	800b4d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2224      	movs	r2, #36	; 0x24
 800b480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f022 0201 	bic.w	r2, r2, #1
 800b49a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	430a      	orrs	r2, r1
 800b4ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f811 	bl	800b4d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2220      	movs	r2, #32
 800b4c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4ce:	2300      	movs	r3, #0
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d108      	bne.n	800b4fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b4f8:	e031      	b.n	800b55e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4fa:	2310      	movs	r3, #16
 800b4fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4fe:	2310      	movs	r3, #16
 800b500:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	0e5b      	lsrs	r3, r3, #25
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	f003 0307 	and.w	r3, r3, #7
 800b510:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	0f5b      	lsrs	r3, r3, #29
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	f003 0307 	and.w	r3, r3, #7
 800b520:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b522:	7bbb      	ldrb	r3, [r7, #14]
 800b524:	7b3a      	ldrb	r2, [r7, #12]
 800b526:	4911      	ldr	r1, [pc, #68]	; (800b56c <UARTEx_SetNbDataToProcess+0x94>)
 800b528:	5c8a      	ldrb	r2, [r1, r2]
 800b52a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b52e:	7b3a      	ldrb	r2, [r7, #12]
 800b530:	490f      	ldr	r1, [pc, #60]	; (800b570 <UARTEx_SetNbDataToProcess+0x98>)
 800b532:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b534:	fb93 f3f2 	sdiv	r3, r3, r2
 800b538:	b29a      	uxth	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b540:	7bfb      	ldrb	r3, [r7, #15]
 800b542:	7b7a      	ldrb	r2, [r7, #13]
 800b544:	4909      	ldr	r1, [pc, #36]	; (800b56c <UARTEx_SetNbDataToProcess+0x94>)
 800b546:	5c8a      	ldrb	r2, [r1, r2]
 800b548:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b54c:	7b7a      	ldrb	r2, [r7, #13]
 800b54e:	4908      	ldr	r1, [pc, #32]	; (800b570 <UARTEx_SetNbDataToProcess+0x98>)
 800b550:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b552:	fb93 f3f2 	sdiv	r3, r3, r2
 800b556:	b29a      	uxth	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b55e:	bf00      	nop
 800b560:	3714      	adds	r7, #20
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	0800ba80 	.word	0x0800ba80
 800b570:	0800ba88 	.word	0x0800ba88

0800b574 <__errno>:
 800b574:	4b01      	ldr	r3, [pc, #4]	; (800b57c <__errno+0x8>)
 800b576:	6818      	ldr	r0, [r3, #0]
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	24000014 	.word	0x24000014

0800b580 <__libc_init_array>:
 800b580:	b570      	push	{r4, r5, r6, lr}
 800b582:	4d0d      	ldr	r5, [pc, #52]	; (800b5b8 <__libc_init_array+0x38>)
 800b584:	4c0d      	ldr	r4, [pc, #52]	; (800b5bc <__libc_init_array+0x3c>)
 800b586:	1b64      	subs	r4, r4, r5
 800b588:	10a4      	asrs	r4, r4, #2
 800b58a:	2600      	movs	r6, #0
 800b58c:	42a6      	cmp	r6, r4
 800b58e:	d109      	bne.n	800b5a4 <__libc_init_array+0x24>
 800b590:	4d0b      	ldr	r5, [pc, #44]	; (800b5c0 <__libc_init_array+0x40>)
 800b592:	4c0c      	ldr	r4, [pc, #48]	; (800b5c4 <__libc_init_array+0x44>)
 800b594:	f000 fa4e 	bl	800ba34 <_init>
 800b598:	1b64      	subs	r4, r4, r5
 800b59a:	10a4      	asrs	r4, r4, #2
 800b59c:	2600      	movs	r6, #0
 800b59e:	42a6      	cmp	r6, r4
 800b5a0:	d105      	bne.n	800b5ae <__libc_init_array+0x2e>
 800b5a2:	bd70      	pop	{r4, r5, r6, pc}
 800b5a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5a8:	4798      	blx	r3
 800b5aa:	3601      	adds	r6, #1
 800b5ac:	e7ee      	b.n	800b58c <__libc_init_array+0xc>
 800b5ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5b2:	4798      	blx	r3
 800b5b4:	3601      	adds	r6, #1
 800b5b6:	e7f2      	b.n	800b59e <__libc_init_array+0x1e>
 800b5b8:	0800bbd8 	.word	0x0800bbd8
 800b5bc:	0800bbd8 	.word	0x0800bbd8
 800b5c0:	0800bbd8 	.word	0x0800bbd8
 800b5c4:	0800bbdc 	.word	0x0800bbdc

0800b5c8 <malloc>:
 800b5c8:	4b02      	ldr	r3, [pc, #8]	; (800b5d4 <malloc+0xc>)
 800b5ca:	4601      	mov	r1, r0
 800b5cc:	6818      	ldr	r0, [r3, #0]
 800b5ce:	f000 b87f 	b.w	800b6d0 <_malloc_r>
 800b5d2:	bf00      	nop
 800b5d4:	24000014 	.word	0x24000014

0800b5d8 <free>:
 800b5d8:	4b02      	ldr	r3, [pc, #8]	; (800b5e4 <free+0xc>)
 800b5da:	4601      	mov	r1, r0
 800b5dc:	6818      	ldr	r0, [r3, #0]
 800b5de:	f000 b80b 	b.w	800b5f8 <_free_r>
 800b5e2:	bf00      	nop
 800b5e4:	24000014 	.word	0x24000014

0800b5e8 <memset>:
 800b5e8:	4402      	add	r2, r0
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d100      	bne.n	800b5f2 <memset+0xa>
 800b5f0:	4770      	bx	lr
 800b5f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b5f6:	e7f9      	b.n	800b5ec <memset+0x4>

0800b5f8 <_free_r>:
 800b5f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5fa:	2900      	cmp	r1, #0
 800b5fc:	d044      	beq.n	800b688 <_free_r+0x90>
 800b5fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b602:	9001      	str	r0, [sp, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	f1a1 0404 	sub.w	r4, r1, #4
 800b60a:	bfb8      	it	lt
 800b60c:	18e4      	addlt	r4, r4, r3
 800b60e:	f000 f8e3 	bl	800b7d8 <__malloc_lock>
 800b612:	4a1e      	ldr	r2, [pc, #120]	; (800b68c <_free_r+0x94>)
 800b614:	9801      	ldr	r0, [sp, #4]
 800b616:	6813      	ldr	r3, [r2, #0]
 800b618:	b933      	cbnz	r3, 800b628 <_free_r+0x30>
 800b61a:	6063      	str	r3, [r4, #4]
 800b61c:	6014      	str	r4, [r2, #0]
 800b61e:	b003      	add	sp, #12
 800b620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b624:	f000 b8de 	b.w	800b7e4 <__malloc_unlock>
 800b628:	42a3      	cmp	r3, r4
 800b62a:	d908      	bls.n	800b63e <_free_r+0x46>
 800b62c:	6825      	ldr	r5, [r4, #0]
 800b62e:	1961      	adds	r1, r4, r5
 800b630:	428b      	cmp	r3, r1
 800b632:	bf01      	itttt	eq
 800b634:	6819      	ldreq	r1, [r3, #0]
 800b636:	685b      	ldreq	r3, [r3, #4]
 800b638:	1949      	addeq	r1, r1, r5
 800b63a:	6021      	streq	r1, [r4, #0]
 800b63c:	e7ed      	b.n	800b61a <_free_r+0x22>
 800b63e:	461a      	mov	r2, r3
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	b10b      	cbz	r3, 800b648 <_free_r+0x50>
 800b644:	42a3      	cmp	r3, r4
 800b646:	d9fa      	bls.n	800b63e <_free_r+0x46>
 800b648:	6811      	ldr	r1, [r2, #0]
 800b64a:	1855      	adds	r5, r2, r1
 800b64c:	42a5      	cmp	r5, r4
 800b64e:	d10b      	bne.n	800b668 <_free_r+0x70>
 800b650:	6824      	ldr	r4, [r4, #0]
 800b652:	4421      	add	r1, r4
 800b654:	1854      	adds	r4, r2, r1
 800b656:	42a3      	cmp	r3, r4
 800b658:	6011      	str	r1, [r2, #0]
 800b65a:	d1e0      	bne.n	800b61e <_free_r+0x26>
 800b65c:	681c      	ldr	r4, [r3, #0]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	6053      	str	r3, [r2, #4]
 800b662:	4421      	add	r1, r4
 800b664:	6011      	str	r1, [r2, #0]
 800b666:	e7da      	b.n	800b61e <_free_r+0x26>
 800b668:	d902      	bls.n	800b670 <_free_r+0x78>
 800b66a:	230c      	movs	r3, #12
 800b66c:	6003      	str	r3, [r0, #0]
 800b66e:	e7d6      	b.n	800b61e <_free_r+0x26>
 800b670:	6825      	ldr	r5, [r4, #0]
 800b672:	1961      	adds	r1, r4, r5
 800b674:	428b      	cmp	r3, r1
 800b676:	bf04      	itt	eq
 800b678:	6819      	ldreq	r1, [r3, #0]
 800b67a:	685b      	ldreq	r3, [r3, #4]
 800b67c:	6063      	str	r3, [r4, #4]
 800b67e:	bf04      	itt	eq
 800b680:	1949      	addeq	r1, r1, r5
 800b682:	6021      	streq	r1, [r4, #0]
 800b684:	6054      	str	r4, [r2, #4]
 800b686:	e7ca      	b.n	800b61e <_free_r+0x26>
 800b688:	b003      	add	sp, #12
 800b68a:	bd30      	pop	{r4, r5, pc}
 800b68c:	24000c3c 	.word	0x24000c3c

0800b690 <sbrk_aligned>:
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	4e0e      	ldr	r6, [pc, #56]	; (800b6cc <sbrk_aligned+0x3c>)
 800b694:	460c      	mov	r4, r1
 800b696:	6831      	ldr	r1, [r6, #0]
 800b698:	4605      	mov	r5, r0
 800b69a:	b911      	cbnz	r1, 800b6a2 <sbrk_aligned+0x12>
 800b69c:	f000 f88c 	bl	800b7b8 <_sbrk_r>
 800b6a0:	6030      	str	r0, [r6, #0]
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	f000 f887 	bl	800b7b8 <_sbrk_r>
 800b6aa:	1c43      	adds	r3, r0, #1
 800b6ac:	d00a      	beq.n	800b6c4 <sbrk_aligned+0x34>
 800b6ae:	1cc4      	adds	r4, r0, #3
 800b6b0:	f024 0403 	bic.w	r4, r4, #3
 800b6b4:	42a0      	cmp	r0, r4
 800b6b6:	d007      	beq.n	800b6c8 <sbrk_aligned+0x38>
 800b6b8:	1a21      	subs	r1, r4, r0
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f000 f87c 	bl	800b7b8 <_sbrk_r>
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	d101      	bne.n	800b6c8 <sbrk_aligned+0x38>
 800b6c4:	f04f 34ff 	mov.w	r4, #4294967295
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	bd70      	pop	{r4, r5, r6, pc}
 800b6cc:	24000c40 	.word	0x24000c40

0800b6d0 <_malloc_r>:
 800b6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d4:	1ccd      	adds	r5, r1, #3
 800b6d6:	f025 0503 	bic.w	r5, r5, #3
 800b6da:	3508      	adds	r5, #8
 800b6dc:	2d0c      	cmp	r5, #12
 800b6de:	bf38      	it	cc
 800b6e0:	250c      	movcc	r5, #12
 800b6e2:	2d00      	cmp	r5, #0
 800b6e4:	4607      	mov	r7, r0
 800b6e6:	db01      	blt.n	800b6ec <_malloc_r+0x1c>
 800b6e8:	42a9      	cmp	r1, r5
 800b6ea:	d905      	bls.n	800b6f8 <_malloc_r+0x28>
 800b6ec:	230c      	movs	r3, #12
 800b6ee:	603b      	str	r3, [r7, #0]
 800b6f0:	2600      	movs	r6, #0
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f8:	4e2e      	ldr	r6, [pc, #184]	; (800b7b4 <_malloc_r+0xe4>)
 800b6fa:	f000 f86d 	bl	800b7d8 <__malloc_lock>
 800b6fe:	6833      	ldr	r3, [r6, #0]
 800b700:	461c      	mov	r4, r3
 800b702:	bb34      	cbnz	r4, 800b752 <_malloc_r+0x82>
 800b704:	4629      	mov	r1, r5
 800b706:	4638      	mov	r0, r7
 800b708:	f7ff ffc2 	bl	800b690 <sbrk_aligned>
 800b70c:	1c43      	adds	r3, r0, #1
 800b70e:	4604      	mov	r4, r0
 800b710:	d14d      	bne.n	800b7ae <_malloc_r+0xde>
 800b712:	6834      	ldr	r4, [r6, #0]
 800b714:	4626      	mov	r6, r4
 800b716:	2e00      	cmp	r6, #0
 800b718:	d140      	bne.n	800b79c <_malloc_r+0xcc>
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	4631      	mov	r1, r6
 800b71e:	4638      	mov	r0, r7
 800b720:	eb04 0803 	add.w	r8, r4, r3
 800b724:	f000 f848 	bl	800b7b8 <_sbrk_r>
 800b728:	4580      	cmp	r8, r0
 800b72a:	d13a      	bne.n	800b7a2 <_malloc_r+0xd2>
 800b72c:	6821      	ldr	r1, [r4, #0]
 800b72e:	3503      	adds	r5, #3
 800b730:	1a6d      	subs	r5, r5, r1
 800b732:	f025 0503 	bic.w	r5, r5, #3
 800b736:	3508      	adds	r5, #8
 800b738:	2d0c      	cmp	r5, #12
 800b73a:	bf38      	it	cc
 800b73c:	250c      	movcc	r5, #12
 800b73e:	4629      	mov	r1, r5
 800b740:	4638      	mov	r0, r7
 800b742:	f7ff ffa5 	bl	800b690 <sbrk_aligned>
 800b746:	3001      	adds	r0, #1
 800b748:	d02b      	beq.n	800b7a2 <_malloc_r+0xd2>
 800b74a:	6823      	ldr	r3, [r4, #0]
 800b74c:	442b      	add	r3, r5
 800b74e:	6023      	str	r3, [r4, #0]
 800b750:	e00e      	b.n	800b770 <_malloc_r+0xa0>
 800b752:	6822      	ldr	r2, [r4, #0]
 800b754:	1b52      	subs	r2, r2, r5
 800b756:	d41e      	bmi.n	800b796 <_malloc_r+0xc6>
 800b758:	2a0b      	cmp	r2, #11
 800b75a:	d916      	bls.n	800b78a <_malloc_r+0xba>
 800b75c:	1961      	adds	r1, r4, r5
 800b75e:	42a3      	cmp	r3, r4
 800b760:	6025      	str	r5, [r4, #0]
 800b762:	bf18      	it	ne
 800b764:	6059      	strne	r1, [r3, #4]
 800b766:	6863      	ldr	r3, [r4, #4]
 800b768:	bf08      	it	eq
 800b76a:	6031      	streq	r1, [r6, #0]
 800b76c:	5162      	str	r2, [r4, r5]
 800b76e:	604b      	str	r3, [r1, #4]
 800b770:	4638      	mov	r0, r7
 800b772:	f104 060b 	add.w	r6, r4, #11
 800b776:	f000 f835 	bl	800b7e4 <__malloc_unlock>
 800b77a:	f026 0607 	bic.w	r6, r6, #7
 800b77e:	1d23      	adds	r3, r4, #4
 800b780:	1af2      	subs	r2, r6, r3
 800b782:	d0b6      	beq.n	800b6f2 <_malloc_r+0x22>
 800b784:	1b9b      	subs	r3, r3, r6
 800b786:	50a3      	str	r3, [r4, r2]
 800b788:	e7b3      	b.n	800b6f2 <_malloc_r+0x22>
 800b78a:	6862      	ldr	r2, [r4, #4]
 800b78c:	42a3      	cmp	r3, r4
 800b78e:	bf0c      	ite	eq
 800b790:	6032      	streq	r2, [r6, #0]
 800b792:	605a      	strne	r2, [r3, #4]
 800b794:	e7ec      	b.n	800b770 <_malloc_r+0xa0>
 800b796:	4623      	mov	r3, r4
 800b798:	6864      	ldr	r4, [r4, #4]
 800b79a:	e7b2      	b.n	800b702 <_malloc_r+0x32>
 800b79c:	4634      	mov	r4, r6
 800b79e:	6876      	ldr	r6, [r6, #4]
 800b7a0:	e7b9      	b.n	800b716 <_malloc_r+0x46>
 800b7a2:	230c      	movs	r3, #12
 800b7a4:	603b      	str	r3, [r7, #0]
 800b7a6:	4638      	mov	r0, r7
 800b7a8:	f000 f81c 	bl	800b7e4 <__malloc_unlock>
 800b7ac:	e7a1      	b.n	800b6f2 <_malloc_r+0x22>
 800b7ae:	6025      	str	r5, [r4, #0]
 800b7b0:	e7de      	b.n	800b770 <_malloc_r+0xa0>
 800b7b2:	bf00      	nop
 800b7b4:	24000c3c 	.word	0x24000c3c

0800b7b8 <_sbrk_r>:
 800b7b8:	b538      	push	{r3, r4, r5, lr}
 800b7ba:	4d06      	ldr	r5, [pc, #24]	; (800b7d4 <_sbrk_r+0x1c>)
 800b7bc:	2300      	movs	r3, #0
 800b7be:	4604      	mov	r4, r0
 800b7c0:	4608      	mov	r0, r1
 800b7c2:	602b      	str	r3, [r5, #0]
 800b7c4:	f7f6 fd7e 	bl	80022c4 <_sbrk>
 800b7c8:	1c43      	adds	r3, r0, #1
 800b7ca:	d102      	bne.n	800b7d2 <_sbrk_r+0x1a>
 800b7cc:	682b      	ldr	r3, [r5, #0]
 800b7ce:	b103      	cbz	r3, 800b7d2 <_sbrk_r+0x1a>
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	bd38      	pop	{r3, r4, r5, pc}
 800b7d4:	24000c44 	.word	0x24000c44

0800b7d8 <__malloc_lock>:
 800b7d8:	4801      	ldr	r0, [pc, #4]	; (800b7e0 <__malloc_lock+0x8>)
 800b7da:	f000 b809 	b.w	800b7f0 <__retarget_lock_acquire_recursive>
 800b7de:	bf00      	nop
 800b7e0:	24000c48 	.word	0x24000c48

0800b7e4 <__malloc_unlock>:
 800b7e4:	4801      	ldr	r0, [pc, #4]	; (800b7ec <__malloc_unlock+0x8>)
 800b7e6:	f000 b804 	b.w	800b7f2 <__retarget_lock_release_recursive>
 800b7ea:	bf00      	nop
 800b7ec:	24000c48 	.word	0x24000c48

0800b7f0 <__retarget_lock_acquire_recursive>:
 800b7f0:	4770      	bx	lr

0800b7f2 <__retarget_lock_release_recursive>:
 800b7f2:	4770      	bx	lr

0800b7f4 <floorf>:
 800b7f4:	ee10 3a10 	vmov	r3, s0
 800b7f8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b7fc:	3a7f      	subs	r2, #127	; 0x7f
 800b7fe:	2a16      	cmp	r2, #22
 800b800:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b804:	dc2a      	bgt.n	800b85c <floorf+0x68>
 800b806:	2a00      	cmp	r2, #0
 800b808:	da11      	bge.n	800b82e <floorf+0x3a>
 800b80a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b86c <floorf+0x78>
 800b80e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b812:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b81a:	dd05      	ble.n	800b828 <floorf+0x34>
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	da23      	bge.n	800b868 <floorf+0x74>
 800b820:	4a13      	ldr	r2, [pc, #76]	; (800b870 <floorf+0x7c>)
 800b822:	2900      	cmp	r1, #0
 800b824:	bf18      	it	ne
 800b826:	4613      	movne	r3, r2
 800b828:	ee00 3a10 	vmov	s0, r3
 800b82c:	4770      	bx	lr
 800b82e:	4911      	ldr	r1, [pc, #68]	; (800b874 <floorf+0x80>)
 800b830:	4111      	asrs	r1, r2
 800b832:	420b      	tst	r3, r1
 800b834:	d0fa      	beq.n	800b82c <floorf+0x38>
 800b836:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b86c <floorf+0x78>
 800b83a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b83e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b846:	ddef      	ble.n	800b828 <floorf+0x34>
 800b848:	2b00      	cmp	r3, #0
 800b84a:	bfbe      	ittt	lt
 800b84c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b850:	fa40 f202 	asrlt.w	r2, r0, r2
 800b854:	189b      	addlt	r3, r3, r2
 800b856:	ea23 0301 	bic.w	r3, r3, r1
 800b85a:	e7e5      	b.n	800b828 <floorf+0x34>
 800b85c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b860:	d3e4      	bcc.n	800b82c <floorf+0x38>
 800b862:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b866:	4770      	bx	lr
 800b868:	2300      	movs	r3, #0
 800b86a:	e7dd      	b.n	800b828 <floorf+0x34>
 800b86c:	7149f2ca 	.word	0x7149f2ca
 800b870:	bf800000 	.word	0xbf800000
 800b874:	007fffff 	.word	0x007fffff

0800b878 <sinf_poly>:
 800b878:	07cb      	lsls	r3, r1, #31
 800b87a:	d412      	bmi.n	800b8a2 <sinf_poly+0x2a>
 800b87c:	ee21 5b00 	vmul.f64	d5, d1, d0
 800b880:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 800b884:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800b888:	eea6 7b01 	vfma.f64	d7, d6, d1
 800b88c:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 800b890:	ee21 1b05 	vmul.f64	d1, d1, d5
 800b894:	eea6 0b05 	vfma.f64	d0, d6, d5
 800b898:	eea7 0b01 	vfma.f64	d0, d7, d1
 800b89c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b8a0:	4770      	bx	lr
 800b8a2:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 800b8a6:	ee21 5b01 	vmul.f64	d5, d1, d1
 800b8aa:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800b8ae:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800b8b2:	eea1 7b06 	vfma.f64	d7, d1, d6
 800b8b6:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 800b8ba:	eea1 0b06 	vfma.f64	d0, d1, d6
 800b8be:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 800b8c2:	ee21 1b05 	vmul.f64	d1, d1, d5
 800b8c6:	eea5 0b06 	vfma.f64	d0, d5, d6
 800b8ca:	e7e5      	b.n	800b898 <sinf_poly+0x20>
 800b8cc:	0000      	movs	r0, r0
	...

0800b8d0 <sinf>:
 800b8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8d2:	ee10 4a10 	vmov	r4, s0
 800b8d6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800b8da:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800b8de:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800b8e2:	eef0 7a40 	vmov.f32	s15, s0
 800b8e6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800b8ea:	d218      	bcs.n	800b91e <sinf+0x4e>
 800b8ec:	ee26 1b06 	vmul.f64	d1, d6, d6
 800b8f0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800b8f4:	d20a      	bcs.n	800b90c <sinf+0x3c>
 800b8f6:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800b8fa:	d103      	bne.n	800b904 <sinf+0x34>
 800b8fc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800b900:	ed8d 1a01 	vstr	s2, [sp, #4]
 800b904:	eeb0 0a67 	vmov.f32	s0, s15
 800b908:	b003      	add	sp, #12
 800b90a:	bd30      	pop	{r4, r5, pc}
 800b90c:	483a      	ldr	r0, [pc, #232]	; (800b9f8 <sinf+0x128>)
 800b90e:	eeb0 0b46 	vmov.f64	d0, d6
 800b912:	2100      	movs	r1, #0
 800b914:	b003      	add	sp, #12
 800b916:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b91a:	f7ff bfad 	b.w	800b878 <sinf_poly>
 800b91e:	f240 422e 	movw	r2, #1070	; 0x42e
 800b922:	4293      	cmp	r3, r2
 800b924:	d824      	bhi.n	800b970 <sinf+0xa0>
 800b926:	4b34      	ldr	r3, [pc, #208]	; (800b9f8 <sinf+0x128>)
 800b928:	ed93 7b08 	vldr	d7, [r3, #32]
 800b92c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b930:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b934:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800b938:	ee17 1a90 	vmov	r1, s15
 800b93c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800b940:	1609      	asrs	r1, r1, #24
 800b942:	ee07 1a90 	vmov	s15, r1
 800b946:	f001 0203 	and.w	r2, r1, #3
 800b94a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b94e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800b952:	ed92 0b00 	vldr	d0, [r2]
 800b956:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800b95a:	f011 0f02 	tst.w	r1, #2
 800b95e:	eea5 6b47 	vfms.f64	d6, d5, d7
 800b962:	bf08      	it	eq
 800b964:	4618      	moveq	r0, r3
 800b966:	ee26 1b06 	vmul.f64	d1, d6, d6
 800b96a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800b96e:	e7d1      	b.n	800b914 <sinf+0x44>
 800b970:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800b974:	d237      	bcs.n	800b9e6 <sinf+0x116>
 800b976:	4a21      	ldr	r2, [pc, #132]	; (800b9fc <sinf+0x12c>)
 800b978:	f3c4 6183 	ubfx	r1, r4, #26, #4
 800b97c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800b980:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800b984:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800b988:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b98c:	4083      	lsls	r3, r0
 800b98e:	6a28      	ldr	r0, [r5, #32]
 800b990:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b994:	fba3 1000 	umull	r1, r0, r3, r0
 800b998:	6929      	ldr	r1, [r5, #16]
 800b99a:	435a      	muls	r2, r3
 800b99c:	fbe3 0201 	umlal	r0, r2, r3, r1
 800b9a0:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 800b9a4:	0f8d      	lsrs	r5, r1, #30
 800b9a6:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800b9aa:	1a51      	subs	r1, r2, r1
 800b9ac:	f7f4 fe2e 	bl	800060c <__aeabi_l2d>
 800b9b0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800b9b4:	4b10      	ldr	r3, [pc, #64]	; (800b9f8 <sinf+0x128>)
 800b9b6:	f004 0203 	and.w	r2, r4, #3
 800b9ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b9be:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800b9f0 <sinf+0x120>
 800b9c2:	ed92 0b00 	vldr	d0, [r2]
 800b9c6:	ec41 0b16 	vmov	d6, r0, r1
 800b9ca:	f014 0f02 	tst.w	r4, #2
 800b9ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b9d2:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	bf08      	it	eq
 800b9da:	4618      	moveq	r0, r3
 800b9dc:	ee27 1b07 	vmul.f64	d1, d7, d7
 800b9e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b9e4:	e796      	b.n	800b914 <sinf+0x44>
 800b9e6:	b003      	add	sp, #12
 800b9e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9ec:	f000 b813 	b.w	800ba16 <__math_invalidf>
 800b9f0:	54442d18 	.word	0x54442d18
 800b9f4:	3c1921fb 	.word	0x3c1921fb
 800b9f8:	0800baf0 	.word	0x0800baf0
 800b9fc:	0800ba90 	.word	0x0800ba90

0800ba00 <with_errnof>:
 800ba00:	b513      	push	{r0, r1, r4, lr}
 800ba02:	4604      	mov	r4, r0
 800ba04:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ba08:	f7ff fdb4 	bl	800b574 <__errno>
 800ba0c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ba10:	6004      	str	r4, [r0, #0]
 800ba12:	b002      	add	sp, #8
 800ba14:	bd10      	pop	{r4, pc}

0800ba16 <__math_invalidf>:
 800ba16:	eef0 7a40 	vmov.f32	s15, s0
 800ba1a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ba1e:	eef4 7a67 	vcmp.f32	s15, s15
 800ba22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba26:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800ba2a:	d602      	bvs.n	800ba32 <__math_invalidf+0x1c>
 800ba2c:	2021      	movs	r0, #33	; 0x21
 800ba2e:	f7ff bfe7 	b.w	800ba00 <with_errnof>
 800ba32:	4770      	bx	lr

0800ba34 <_init>:
 800ba34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba36:	bf00      	nop
 800ba38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba3a:	bc08      	pop	{r3}
 800ba3c:	469e      	mov	lr, r3
 800ba3e:	4770      	bx	lr

0800ba40 <_fini>:
 800ba40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba42:	bf00      	nop
 800ba44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba46:	bc08      	pop	{r3}
 800ba48:	469e      	mov	lr, r3
 800ba4a:	4770      	bx	lr
