
thesis-2-nucleo-h7a3zi-q.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b83c  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800baf0  0800baf0  0001baf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc70  0800bc70  0001bc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bc78  0800bc78  0001bc78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bc7c  0800bc7c  0001bc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800bc80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000be0  24000078  0800bcf8  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000c58  0800bcf8  00020c58  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f933  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f78  00000000  00000000  0003f9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001808  00000000  00000000  00043958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001640  00000000  00000000  00045160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034b82  00000000  00000000  000467a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021cbb  00000000  00000000  0007b322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001559cd  00000000  00000000  0009cfdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f29aa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000684c  00000000  00000000  001f29fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800bad4 	.word	0x0800bad4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800bad4 	.word	0x0800bad4

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b974 	b.w	8000968 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	4604      	mov	r4, r0
 80006a0:	468e      	mov	lr, r1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d14d      	bne.n	8000742 <__udivmoddi4+0xaa>
 80006a6:	428a      	cmp	r2, r1
 80006a8:	4694      	mov	ip, r2
 80006aa:	d969      	bls.n	8000780 <__udivmoddi4+0xe8>
 80006ac:	fab2 f282 	clz	r2, r2
 80006b0:	b152      	cbz	r2, 80006c8 <__udivmoddi4+0x30>
 80006b2:	fa01 f302 	lsl.w	r3, r1, r2
 80006b6:	f1c2 0120 	rsb	r1, r2, #32
 80006ba:	fa20 f101 	lsr.w	r1, r0, r1
 80006be:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c2:	ea41 0e03 	orr.w	lr, r1, r3
 80006c6:	4094      	lsls	r4, r2
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	0c21      	lsrs	r1, r4, #16
 80006ce:	fbbe f6f8 	udiv	r6, lr, r8
 80006d2:	fa1f f78c 	uxth.w	r7, ip
 80006d6:	fb08 e316 	mls	r3, r8, r6, lr
 80006da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006de:	fb06 f107 	mul.w	r1, r6, r7
 80006e2:	4299      	cmp	r1, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x64>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ee:	f080 811f 	bcs.w	8000930 <__udivmoddi4+0x298>
 80006f2:	4299      	cmp	r1, r3
 80006f4:	f240 811c 	bls.w	8000930 <__udivmoddi4+0x298>
 80006f8:	3e02      	subs	r6, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a5b      	subs	r3, r3, r1
 80006fe:	b2a4      	uxth	r4, r4
 8000700:	fbb3 f0f8 	udiv	r0, r3, r8
 8000704:	fb08 3310 	mls	r3, r8, r0, r3
 8000708:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800070c:	fb00 f707 	mul.w	r7, r0, r7
 8000710:	42a7      	cmp	r7, r4
 8000712:	d90a      	bls.n	800072a <__udivmoddi4+0x92>
 8000714:	eb1c 0404 	adds.w	r4, ip, r4
 8000718:	f100 33ff 	add.w	r3, r0, #4294967295
 800071c:	f080 810a 	bcs.w	8000934 <__udivmoddi4+0x29c>
 8000720:	42a7      	cmp	r7, r4
 8000722:	f240 8107 	bls.w	8000934 <__udivmoddi4+0x29c>
 8000726:	4464      	add	r4, ip
 8000728:	3802      	subs	r0, #2
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	1be4      	subs	r4, r4, r7
 8000730:	2600      	movs	r6, #0
 8000732:	b11d      	cbz	r5, 800073c <__udivmoddi4+0xa4>
 8000734:	40d4      	lsrs	r4, r2
 8000736:	2300      	movs	r3, #0
 8000738:	e9c5 4300 	strd	r4, r3, [r5]
 800073c:	4631      	mov	r1, r6
 800073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000742:	428b      	cmp	r3, r1
 8000744:	d909      	bls.n	800075a <__udivmoddi4+0xc2>
 8000746:	2d00      	cmp	r5, #0
 8000748:	f000 80ef 	beq.w	800092a <__udivmoddi4+0x292>
 800074c:	2600      	movs	r6, #0
 800074e:	e9c5 0100 	strd	r0, r1, [r5]
 8000752:	4630      	mov	r0, r6
 8000754:	4631      	mov	r1, r6
 8000756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075a:	fab3 f683 	clz	r6, r3
 800075e:	2e00      	cmp	r6, #0
 8000760:	d14a      	bne.n	80007f8 <__udivmoddi4+0x160>
 8000762:	428b      	cmp	r3, r1
 8000764:	d302      	bcc.n	800076c <__udivmoddi4+0xd4>
 8000766:	4282      	cmp	r2, r0
 8000768:	f200 80f9 	bhi.w	800095e <__udivmoddi4+0x2c6>
 800076c:	1a84      	subs	r4, r0, r2
 800076e:	eb61 0303 	sbc.w	r3, r1, r3
 8000772:	2001      	movs	r0, #1
 8000774:	469e      	mov	lr, r3
 8000776:	2d00      	cmp	r5, #0
 8000778:	d0e0      	beq.n	800073c <__udivmoddi4+0xa4>
 800077a:	e9c5 4e00 	strd	r4, lr, [r5]
 800077e:	e7dd      	b.n	800073c <__udivmoddi4+0xa4>
 8000780:	b902      	cbnz	r2, 8000784 <__udivmoddi4+0xec>
 8000782:	deff      	udf	#255	; 0xff
 8000784:	fab2 f282 	clz	r2, r2
 8000788:	2a00      	cmp	r2, #0
 800078a:	f040 8092 	bne.w	80008b2 <__udivmoddi4+0x21a>
 800078e:	eba1 010c 	sub.w	r1, r1, ip
 8000792:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000796:	fa1f fe8c 	uxth.w	lr, ip
 800079a:	2601      	movs	r6, #1
 800079c:	0c20      	lsrs	r0, r4, #16
 800079e:	fbb1 f3f7 	udiv	r3, r1, r7
 80007a2:	fb07 1113 	mls	r1, r7, r3, r1
 80007a6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007aa:	fb0e f003 	mul.w	r0, lr, r3
 80007ae:	4288      	cmp	r0, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0x12c>
 80007b2:	eb1c 0101 	adds.w	r1, ip, r1
 80007b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x12a>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f200 80cb 	bhi.w	8000958 <__udivmoddi4+0x2c0>
 80007c2:	4643      	mov	r3, r8
 80007c4:	1a09      	subs	r1, r1, r0
 80007c6:	b2a4      	uxth	r4, r4
 80007c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007cc:	fb07 1110 	mls	r1, r7, r0, r1
 80007d0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007d4:	fb0e fe00 	mul.w	lr, lr, r0
 80007d8:	45a6      	cmp	lr, r4
 80007da:	d908      	bls.n	80007ee <__udivmoddi4+0x156>
 80007dc:	eb1c 0404 	adds.w	r4, ip, r4
 80007e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007e4:	d202      	bcs.n	80007ec <__udivmoddi4+0x154>
 80007e6:	45a6      	cmp	lr, r4
 80007e8:	f200 80bb 	bhi.w	8000962 <__udivmoddi4+0x2ca>
 80007ec:	4608      	mov	r0, r1
 80007ee:	eba4 040e 	sub.w	r4, r4, lr
 80007f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007f6:	e79c      	b.n	8000732 <__udivmoddi4+0x9a>
 80007f8:	f1c6 0720 	rsb	r7, r6, #32
 80007fc:	40b3      	lsls	r3, r6
 80007fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000802:	ea4c 0c03 	orr.w	ip, ip, r3
 8000806:	fa20 f407 	lsr.w	r4, r0, r7
 800080a:	fa01 f306 	lsl.w	r3, r1, r6
 800080e:	431c      	orrs	r4, r3
 8000810:	40f9      	lsrs	r1, r7
 8000812:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000816:	fa00 f306 	lsl.w	r3, r0, r6
 800081a:	fbb1 f8f9 	udiv	r8, r1, r9
 800081e:	0c20      	lsrs	r0, r4, #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fb09 1118 	mls	r1, r9, r8, r1
 8000828:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800082c:	fb08 f00e 	mul.w	r0, r8, lr
 8000830:	4288      	cmp	r0, r1
 8000832:	fa02 f206 	lsl.w	r2, r2, r6
 8000836:	d90b      	bls.n	8000850 <__udivmoddi4+0x1b8>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000840:	f080 8088 	bcs.w	8000954 <__udivmoddi4+0x2bc>
 8000844:	4288      	cmp	r0, r1
 8000846:	f240 8085 	bls.w	8000954 <__udivmoddi4+0x2bc>
 800084a:	f1a8 0802 	sub.w	r8, r8, #2
 800084e:	4461      	add	r1, ip
 8000850:	1a09      	subs	r1, r1, r0
 8000852:	b2a4      	uxth	r4, r4
 8000854:	fbb1 f0f9 	udiv	r0, r1, r9
 8000858:	fb09 1110 	mls	r1, r9, r0, r1
 800085c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000860:	fb00 fe0e 	mul.w	lr, r0, lr
 8000864:	458e      	cmp	lr, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x1e2>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000870:	d26c      	bcs.n	800094c <__udivmoddi4+0x2b4>
 8000872:	458e      	cmp	lr, r1
 8000874:	d96a      	bls.n	800094c <__udivmoddi4+0x2b4>
 8000876:	3802      	subs	r0, #2
 8000878:	4461      	add	r1, ip
 800087a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800087e:	fba0 9402 	umull	r9, r4, r0, r2
 8000882:	eba1 010e 	sub.w	r1, r1, lr
 8000886:	42a1      	cmp	r1, r4
 8000888:	46c8      	mov	r8, r9
 800088a:	46a6      	mov	lr, r4
 800088c:	d356      	bcc.n	800093c <__udivmoddi4+0x2a4>
 800088e:	d053      	beq.n	8000938 <__udivmoddi4+0x2a0>
 8000890:	b15d      	cbz	r5, 80008aa <__udivmoddi4+0x212>
 8000892:	ebb3 0208 	subs.w	r2, r3, r8
 8000896:	eb61 010e 	sbc.w	r1, r1, lr
 800089a:	fa01 f707 	lsl.w	r7, r1, r7
 800089e:	fa22 f306 	lsr.w	r3, r2, r6
 80008a2:	40f1      	lsrs	r1, r6
 80008a4:	431f      	orrs	r7, r3
 80008a6:	e9c5 7100 	strd	r7, r1, [r5]
 80008aa:	2600      	movs	r6, #0
 80008ac:	4631      	mov	r1, r6
 80008ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b2:	f1c2 0320 	rsb	r3, r2, #32
 80008b6:	40d8      	lsrs	r0, r3
 80008b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008bc:	fa21 f303 	lsr.w	r3, r1, r3
 80008c0:	4091      	lsls	r1, r2
 80008c2:	4301      	orrs	r1, r0
 80008c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c8:	fa1f fe8c 	uxth.w	lr, ip
 80008cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80008d0:	fb07 3610 	mls	r6, r7, r0, r3
 80008d4:	0c0b      	lsrs	r3, r1, #16
 80008d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008da:	fb00 f60e 	mul.w	r6, r0, lr
 80008de:	429e      	cmp	r6, r3
 80008e0:	fa04 f402 	lsl.w	r4, r4, r2
 80008e4:	d908      	bls.n	80008f8 <__udivmoddi4+0x260>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ee:	d22f      	bcs.n	8000950 <__udivmoddi4+0x2b8>
 80008f0:	429e      	cmp	r6, r3
 80008f2:	d92d      	bls.n	8000950 <__udivmoddi4+0x2b8>
 80008f4:	3802      	subs	r0, #2
 80008f6:	4463      	add	r3, ip
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	b289      	uxth	r1, r1
 80008fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000900:	fb07 3316 	mls	r3, r7, r6, r3
 8000904:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000908:	fb06 f30e 	mul.w	r3, r6, lr
 800090c:	428b      	cmp	r3, r1
 800090e:	d908      	bls.n	8000922 <__udivmoddi4+0x28a>
 8000910:	eb1c 0101 	adds.w	r1, ip, r1
 8000914:	f106 38ff 	add.w	r8, r6, #4294967295
 8000918:	d216      	bcs.n	8000948 <__udivmoddi4+0x2b0>
 800091a:	428b      	cmp	r3, r1
 800091c:	d914      	bls.n	8000948 <__udivmoddi4+0x2b0>
 800091e:	3e02      	subs	r6, #2
 8000920:	4461      	add	r1, ip
 8000922:	1ac9      	subs	r1, r1, r3
 8000924:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000928:	e738      	b.n	800079c <__udivmoddi4+0x104>
 800092a:	462e      	mov	r6, r5
 800092c:	4628      	mov	r0, r5
 800092e:	e705      	b.n	800073c <__udivmoddi4+0xa4>
 8000930:	4606      	mov	r6, r0
 8000932:	e6e3      	b.n	80006fc <__udivmoddi4+0x64>
 8000934:	4618      	mov	r0, r3
 8000936:	e6f8      	b.n	800072a <__udivmoddi4+0x92>
 8000938:	454b      	cmp	r3, r9
 800093a:	d2a9      	bcs.n	8000890 <__udivmoddi4+0x1f8>
 800093c:	ebb9 0802 	subs.w	r8, r9, r2
 8000940:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000944:	3801      	subs	r0, #1
 8000946:	e7a3      	b.n	8000890 <__udivmoddi4+0x1f8>
 8000948:	4646      	mov	r6, r8
 800094a:	e7ea      	b.n	8000922 <__udivmoddi4+0x28a>
 800094c:	4620      	mov	r0, r4
 800094e:	e794      	b.n	800087a <__udivmoddi4+0x1e2>
 8000950:	4640      	mov	r0, r8
 8000952:	e7d1      	b.n	80008f8 <__udivmoddi4+0x260>
 8000954:	46d0      	mov	r8, sl
 8000956:	e77b      	b.n	8000850 <__udivmoddi4+0x1b8>
 8000958:	3b02      	subs	r3, #2
 800095a:	4461      	add	r1, ip
 800095c:	e732      	b.n	80007c4 <__udivmoddi4+0x12c>
 800095e:	4630      	mov	r0, r6
 8000960:	e709      	b.n	8000776 <__udivmoddi4+0xde>
 8000962:	4464      	add	r4, ip
 8000964:	3802      	subs	r0, #2
 8000966:	e742      	b.n	80007ee <__udivmoddi4+0x156>

08000968 <__aeabi_idiv0>:
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <Chorus_Init>:
#include <math.h>
#include <OnePoleLP.h>

ChorusEffect* chorus = NULL;

void Chorus_Init(int sampleRate) {
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	if(chorus != NULL) return;
 8000974:	4b5b      	ldr	r3, [pc, #364]	; (8000ae4 <Chorus_Init+0x178>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	f040 80ae 	bne.w	8000ada <Chorus_Init+0x16e>

	chorus = malloc(sizeof(ChorusEffect));
 800097e:	2054      	movs	r0, #84	; 0x54
 8000980:	f00a fe74 	bl	800b66c <malloc>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	4b56      	ldr	r3, [pc, #344]	; (8000ae4 <Chorus_Init+0x178>)
 800098a:	601a      	str	r2, [r3, #0]
	chorus->phase = 1.0f;
 800098c:	4b55      	ldr	r3, [pc, #340]	; (8000ae4 <Chorus_Init+0x178>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000994:	651a      	str	r2, [r3, #80]	; 0x50
	chorus->rate = 1.0f;
 8000996:	4b53      	ldr	r3, [pc, #332]	; (8000ae4 <Chorus_Init+0x178>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800099e:	611a      	str	r2, [r3, #16]
	chorus->sampleRate = sampleRate;
 80009a0:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <Chorus_Init+0x178>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	ee07 2a90 	vmov	s15, r2
 80009aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ae:	edc3 7a06 	vstr	s15, [r3, #24]
	chorus->delayTime = 7.0f;
 80009b2:	4b4c      	ldr	r3, [pc, #304]	; (8000ae4 <Chorus_Init+0x178>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a4c      	ldr	r2, [pc, #304]	; (8000ae8 <Chorus_Init+0x17c>)
 80009b8:	61da      	str	r2, [r3, #28]
	chorus->z1 = 0.0f;
 80009ba:	4b4a      	ldr	r3, [pc, #296]	; (8000ae4 <Chorus_Init+0x178>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f04f 0200 	mov.w	r2, #0
 80009c2:	639a      	str	r2, [r3, #56]	; 0x38
	chorus->sign = 0;
 80009c4:	4b47      	ldr	r3, [pc, #284]	; (8000ae4 <Chorus_Init+0x178>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f04f 0200 	mov.w	r2, #0
 80009cc:	641a      	str	r2, [r3, #64]	; 0x40
	chorus->lfoPhase = chorus->phase * 2.0f - 1.0f;
 80009ce:	4b45      	ldr	r3, [pc, #276]	; (8000ae4 <Chorus_Init+0x178>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80009d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009da:	4b42      	ldr	r3, [pc, #264]	; (8000ae4 <Chorus_Init+0x178>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009e6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	chorus->lfoStepSize = (4.0f * chorus->rate / chorus->sampleRate);
 80009ea:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <Chorus_Init+0x178>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80009f2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80009f6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80009fa:	4b3a      	ldr	r3, [pc, #232]	; (8000ae4 <Chorus_Init+0x178>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	ed93 7a06 	vldr	s14, [r3, #24]
 8000a02:	4b38      	ldr	r3, [pc, #224]	; (8000ae4 <Chorus_Init+0x178>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a0a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	chorus->lfoSign = 1.0f;
 8000a0e:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <Chorus_Init+0x178>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a16:	64da      	str	r2, [r3, #76]	; 0x4c

	// Compute required buffer size for desired delay and allocate it
	// Add extra point to aid in interpolation later
	chorus->delayLineLength = ((int)floorf(chorus->delayTime * sampleRate * 0.001f) * 2);
 8000a18:	4b32      	ldr	r3, [pc, #200]	; (8000ae4 <Chorus_Init+0x178>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	ed93 7a07 	vldr	s14, [r3, #28]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	ee07 3a90 	vmov	s15, r3
 8000a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a2e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000aec <Chorus_Init+0x180>
 8000a32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a36:	eeb0 0a67 	vmov.f32	s0, s15
 8000a3a:	f00a ff2d 	bl	800b898 <floorf>
 8000a3e:	eef0 7a40 	vmov.f32	s15, s0
 8000a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a46:	ee17 2a90 	vmov	r2, s15
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <Chorus_Init+0x178>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	0052      	lsls	r2, r2, #1
 8000a50:	60da      	str	r2, [r3, #12]
	chorus->delayLineStart = malloc(chorus->delayLineLength * sizeof(float));
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <Chorus_Init+0x178>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4a22      	ldr	r2, [pc, #136]	; (8000ae4 <Chorus_Init+0x178>)
 8000a5c:	6814      	ldr	r4, [r2, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00a fe04 	bl	800b66c <malloc>
 8000a64:	4603      	mov	r3, r0
 8000a66:	6023      	str	r3, [r4, #0]

	// Set up pointers for delay line
	chorus->delayLineEnd = chorus->delayLineStart + chorus->delayLineLength;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <Chorus_Init+0x178>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6819      	ldr	r1, [r3, #0]
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <Chorus_Init+0x178>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	009a      	lsls	r2, r3, #2
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <Chorus_Init+0x178>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	440a      	add	r2, r1
 8000a7c:	605a      	str	r2, [r3, #4]
	chorus->writePtr = chorus->delayLineStart;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <Chorus_Init+0x178>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <Chorus_Init+0x178>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	6812      	ldr	r2, [r2, #0]
 8000a88:	609a      	str	r2, [r3, #8]

	// Zero out the buffer (silence)
	do {
		*chorus->writePtr = 0.0f;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <Chorus_Init+0x178>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f04f 0200 	mov.w	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
	}
	while (++chorus->writePtr < chorus->delayLineEnd);
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <Chorus_Init+0x178>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	3204      	adds	r2, #4
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <Chorus_Init+0x178>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d3ee      	bcc.n	8000a8a <Chorus_Init+0x11e>

	// Set read pointer to end of delayline. Setting it to the end
	// ensures the interpolation below works correctly to produce
	// the first non-zero sample.
	chorus->writePtr = chorus->delayLineStart + chorus->delayLineLength -1;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <Chorus_Init+0x178>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	6819      	ldr	r1, [r3, #0]
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <Chorus_Init+0x178>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000abe:	4413      	add	r3, r2
 8000ac0:	009a      	lsls	r2, r3, #2
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <Chorus_Init+0x178>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	440a      	add	r2, r1
 8000ac8:	609a      	str	r2, [r3, #8]
	chorus->delayLineOutput = 0.0f;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <Chorus_Init+0x178>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f04f 0200 	mov.w	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
	OnePoleLP_Init();
 8000ad4:	f000 fb66 	bl	80011a4 <OnePoleLP_Init>
 8000ad8:	e000      	b.n	8000adc <Chorus_Init+0x170>
	if(chorus != NULL) return;
 8000ada:	bf00      	nop
}
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd90      	pop	{r4, r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	24000094 	.word	0x24000094
 8000ae8:	40e00000 	.word	0x40e00000
 8000aec:	3a83126f 	.word	0x3a83126f

08000af0 <Chorus_LFO>:

float Chorus_LFO() {
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
        if (chorus->lfoPhase >= 1.0f)
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <Chorus_LFO+0x84>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000afc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b08:	db04      	blt.n	8000b14 <Chorus_LFO+0x24>
        {
        	chorus->lfoSign = -1.0f;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <Chorus_LFO+0x84>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a1a      	ldr	r2, [pc, #104]	; (8000b78 <Chorus_LFO+0x88>)
 8000b10:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b12:	e00f      	b.n	8000b34 <Chorus_LFO+0x44>
        }
        else if (chorus->lfoPhase <= -1.0f)
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <Chorus_LFO+0x84>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000b1c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b28:	d804      	bhi.n	8000b34 <Chorus_LFO+0x44>
        {
        	chorus->lfoSign = +1.0f;
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <Chorus_LFO+0x84>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b32:	64da      	str	r2, [r3, #76]	; 0x4c
        }
        chorus->lfoPhase += chorus->lfoStepSize * chorus->lfoSign;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <Chorus_LFO+0x84>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <Chorus_LFO+0x84>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <Chorus_LFO+0x84>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <Chorus_LFO+0x84>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b58:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        return chorus->lfoPhase;
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <Chorus_LFO+0x84>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	ee07 3a90 	vmov	s15, r3
    }
 8000b66:	eeb0 0a67 	vmov.f32	s0, s15
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	24000094 	.word	0x24000094
 8000b78:	bf800000 	.word	0xbf800000

08000b7c <Chorus_Process>:

float Chorus_Process(float sample) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	ed87 0a01 	vstr	s0, [r7, #4]
	// Get delay time
	chorus->offset = (Chorus_LFO() * 0.3f + 0.4f) * chorus->delayTime * chorus->sampleRate * 0.001f;
 8000b86:	f7ff ffb3 	bl	8000af0 <Chorus_LFO>
 8000b8a:	eef0 7a40 	vmov.f32	s15, s0
 8000b8e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8000d20 <Chorus_Process+0x1a4>
 8000b92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b96:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8000d24 <Chorus_Process+0x1a8>
 8000b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000b9e:	4b62      	ldr	r3, [pc, #392]	; (8000d28 <Chorus_Process+0x1ac>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000baa:	4b5f      	ldr	r3, [pc, #380]	; (8000d28 <Chorus_Process+0x1ac>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	edd3 7a06 	vldr	s15, [r3, #24]
 8000bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bb6:	4b5c      	ldr	r3, [pc, #368]	; (8000d28 <Chorus_Process+0x1ac>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8000d2c <Chorus_Process+0x1b0>
 8000bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bc2:	edc3 7a08 	vstr	s15, [r3, #32]
	int offset = (int)floorf(chorus->offset);
 8000bc6:	4b58      	ldr	r3, [pc, #352]	; (8000d28 <Chorus_Process+0x1ac>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	edd3 7a08 	vldr	s15, [r3, #32]
 8000bce:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd2:	f00a fe61 	bl	800b898 <floorf>
 8000bd6:	eef0 7a40 	vmov.f32	s15, s0
 8000bda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bde:	ee17 3a90 	vmov	r3, s15
 8000be2:	60fb      	str	r3, [r7, #12]

	// Compute the largest read pointer based on the offset.  If ptr
	// is before the first delayline location, wrap around end point

	chorus->ptr = chorus->writePtr - offset;
 8000be4:	4b50      	ldr	r3, [pc, #320]	; (8000d28 <Chorus_Process+0x1ac>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6899      	ldr	r1, [r3, #8]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	425a      	negs	r2, r3
 8000bf0:	4b4d      	ldr	r3, [pc, #308]	; (8000d28 <Chorus_Process+0x1ac>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	440a      	add	r2, r1
 8000bf6:	62da      	str	r2, [r3, #44]	; 0x2c

	if (chorus->ptr < chorus->delayLineStart)
 8000bf8:	4b4b      	ldr	r3, [pc, #300]	; (8000d28 <Chorus_Process+0x1ac>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bfe:	4b4a      	ldr	r3, [pc, #296]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d20a      	bcs.n	8000c1e <Chorus_Process+0xa2>
		chorus->ptr += chorus->delayLineLength;
 8000c08:	4b47      	ldr	r3, [pc, #284]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c0e:	4b46      	ldr	r3, [pc, #280]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	009a      	lsls	r2, r3, #2
 8000c16:	4b44      	ldr	r3, [pc, #272]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	440a      	add	r2, r1
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c

	chorus->ptr2 = chorus->ptr - 1;
 8000c1e:	4b42      	ldr	r3, [pc, #264]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c24:	4b40      	ldr	r3, [pc, #256]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	3a04      	subs	r2, #4
 8000c2a:	631a      	str	r2, [r3, #48]	; 0x30
	if (chorus->ptr2 < chorus->delayLineStart)
 8000c2c:	4b3e      	ldr	r3, [pc, #248]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c32:	4b3d      	ldr	r3, [pc, #244]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d20a      	bcs.n	8000c52 <Chorus_Process+0xd6>
		chorus->ptr2 += chorus->delayLineLength;
 8000c3c:	4b3a      	ldr	r3, [pc, #232]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c42:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	009a      	lsls	r2, r3, #2
 8000c4a:	4b37      	ldr	r3, [pc, #220]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	440a      	add	r2, r1
 8000c50:	631a      	str	r2, [r3, #48]	; 0x30

	chorus->frac = chorus->offset - offset;
 8000c52:	4b35      	ldr	r3, [pc, #212]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	ed93 7a08 	vldr	s14, [r3, #32]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	ee07 3a90 	vmov	s15, r3
 8000c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c64:	4b30      	ldr	r3, [pc, #192]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c6c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	chorus->delayLineOutput = *chorus->ptr2 + *chorus->ptr * (1 - chorus->frac) - (1 - chorus->frac) * chorus->z1;
 8000c70:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	ed93 7a00 	vldr	s14, [r3]
 8000c7a:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c80:	edd3 6a00 	vldr	s13, [r3]
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000c8c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000c90:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <Chorus_Process+0x1ac>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000ca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000ca8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <Chorus_Process+0x1ac>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8000cb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <Chorus_Process+0x1ac>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cc0:	edc3 7a05 	vstr	s15, [r3, #20]
	chorus->z1 = chorus->delayLineOutput;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <Chorus_Process+0x1ac>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <Chorus_Process+0x1ac>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6952      	ldr	r2, [r2, #20]
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38

	// Low pass
	Tick(&chorus->delayLineOutput, 0.95f);
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <Chorus_Process+0x1ac>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3314      	adds	r3, #20
 8000cd6:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8000d30 <Chorus_Process+0x1b4>
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 fa78 	bl	80011d0 <Tick>

	// Write the input sample and any feedback to delayline
	*chorus->writePtr = sample;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <Chorus_Process+0x1ac>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	601a      	str	r2, [r3, #0]

	// Increment buffer index and wrap if necesary
	if (++chorus->writePtr >= chorus->delayLineEnd) {
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <Chorus_Process+0x1ac>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	3204      	adds	r2, #4
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <Chorus_Process+0x1ac>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d305      	bcc.n	8000d0c <Chorus_Process+0x190>
		chorus->writePtr = chorus->delayLineStart;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <Chorus_Process+0x1ac>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <Chorus_Process+0x1ac>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6812      	ldr	r2, [r2, #0]
 8000d0a:	609a      	str	r2, [r3, #8]
	}
	return chorus->delayLineOutput;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <Chorus_Process+0x1ac>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	ee07 3a90 	vmov	s15, r3
}
 8000d16:	eeb0 0a67 	vmov.f32	s0, s15
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	3e99999a 	.word	0x3e99999a
 8000d24:	3ecccccd 	.word	0x3ecccccd
 8000d28:	24000094 	.word	0x24000094
 8000d2c:	3a83126f 	.word	0x3a83126f
 8000d30:	3f733333 	.word	0x3f733333
 8000d34:	00000000 	.word	0x00000000

08000d38 <Chorus_Set_Params>:

void Chorus_Set_Params(float rate) {
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(rate - 0.1 > chorus->rate - 0.01  || rate + 0.1 < chorus->rate + 0.01) {
 8000d42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d4a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000dd8 <Chorus_Set_Params+0xa0>
 8000d4e:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000d52:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <Chorus_Set_Params+0xb0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d5e:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8000de0 <Chorus_Set_Params+0xa8>
 8000d62:	ee37 7b45 	vsub.f64	d7, d7, d5
 8000d66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6e:	dc17      	bgt.n	8000da0 <Chorus_Set_Params+0x68>
 8000d70:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d78:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000dd8 <Chorus_Set_Params+0xa0>
 8000d7c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <Chorus_Set_Params+0xb0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d8c:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8000de0 <Chorus_Set_Params+0xa8>
 8000d90:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000d94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9c:	d400      	bmi.n	8000da0 <Chorus_Set_Params+0x68>
		chorus->rate = rate;
		chorus->lfoStepSize = (4.0f * chorus->rate / chorus->sampleRate);
	}
}
 8000d9e:	e015      	b.n	8000dcc <Chorus_Set_Params+0x94>
		chorus->rate = rate;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <Chorus_Set_Params+0xb0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	611a      	str	r2, [r3, #16]
		chorus->lfoStepSize = (4.0f * chorus->rate / chorus->sampleRate);
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <Chorus_Set_Params+0xb0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	edd3 7a04 	vldr	s15, [r3, #16]
 8000db0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000db4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <Chorus_Set_Params+0xb0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	ed93 7a06 	vldr	s14, [r3, #24]
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <Chorus_Set_Params+0xb0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dc8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	9999999a 	.word	0x9999999a
 8000ddc:	3fb99999 	.word	0x3fb99999
 8000de0:	47ae147b 	.word	0x47ae147b
 8000de4:	3f847ae1 	.word	0x3f847ae1
 8000de8:	24000094 	.word	0x24000094

08000dec <Chorus_Free>:

void Chorus_Free() {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	if(chorus != NULL) {
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <Chorus_Free+0x2c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d00d      	beq.n	8000e14 <Chorus_Free+0x28>
		free(chorus->delayLineStart);
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <Chorus_Free+0x2c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f00a fc3c 	bl	800b67c <free>
		free(chorus);
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <Chorus_Free+0x2c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f00a fc37 	bl	800b67c <free>
		chorus = NULL;
 8000e0e:	4b02      	ldr	r3, [pc, #8]	; (8000e18 <Chorus_Free+0x2c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
	}
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	24000094 	.word	0x24000094

08000e1c <Delay_Init>:
// the size of the entire buffer for both adc and dac
#define BUFFER_SIZE 256

DelayEffect* delay = NULL;

void Delay_Init(int sampleRate) {
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	if(delay != NULL) return;
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <Delay_Init+0xb0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d14b      	bne.n	8000ec4 <Delay_Init+0xa8>

	delay = malloc(sizeof(DelayEffect));
 8000e2c:	2024      	movs	r0, #36	; 0x24
 8000e2e:	f00a fc1d 	bl	800b66c <malloc>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <Delay_Init+0xb0>)
 8000e38:	601a      	str	r2, [r3, #0]
	delay->sampleRate = sampleRate;
 8000e3a:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <Delay_Init+0xb0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	621a      	str	r2, [r3, #32]
	delay->delayBufferLength = 2*sampleRate;
 8000e42:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <Delay_Init+0xb0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	0052      	lsls	r2, r2, #1
 8000e4a:	611a      	str	r2, [r3, #16]
	delay->delayLength = 0.75f;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <Delay_Init+0xb0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8000e54:	60da      	str	r2, [r3, #12]
	delay->delayWritePtr = 0;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <Delay_Init+0xb0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
	delay->delayReadPtr = 0;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <Delay_Init+0xb0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
	delay->delayData = (uint16_t*) malloc(delay->delayBufferLength * sizeof(uint16_t));
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <Delay_Init+0xb0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <Delay_Init+0xb0>)
 8000e70:	6814      	ldr	r4, [r2, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f00a fbfa 	bl	800b66c <malloc>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	6023      	str	r3, [r4, #0]

	for (int i = 0; i < delay->delayBufferLength; ++i) {
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	e00a      	b.n	8000e98 <Delay_Init+0x7c>
		delay->delayData[i] = 0;
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <Delay_Init+0xb0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	2200      	movs	r2, #0
 8000e90:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < delay->delayBufferLength; ++i) {
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3301      	adds	r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <Delay_Init+0xb0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dbee      	blt.n	8000e82 <Delay_Init+0x66>
	}

	delay->feedback = 0.75f;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <Delay_Init+0xb0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8000eac:	615a      	str	r2, [r3, #20]
	delay->dryMix = 1;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <Delay_Init+0xb0>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000eb6:	619a      	str	r2, [r3, #24]
	delay->wetMix = 1;
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <Delay_Init+0xb0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ec0:	61da      	str	r2, [r3, #28]
 8000ec2:	e000      	b.n	8000ec6 <Delay_Init+0xaa>
	if(delay != NULL) return;
 8000ec4:	bf00      	nop
}
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd90      	pop	{r4, r7, pc}
 8000ecc:	24000098 	.word	0x24000098

08000ed0 <Delay_Process>:

uint16_t Delay_Process(uint16_t in) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
	uint16_t out = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	81fb      	strh	r3, [r7, #14]

	out = (delay->dryMix * in + delay->wetMix *delay->delayData[delay->delayReadPtr]);
 8000ede:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <Delay_Process+0xf4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	ed93 7a06 	vldr	s14, [r3, #24]
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ef4:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <Delay_Process+0xf4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	edd3 6a07 	vldr	s13, [r3, #28]
 8000efc:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <Delay_Process+0xf4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4b30      	ldr	r3, [pc, #192]	; (8000fc4 <Delay_Process+0xf4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f22:	ee17 3a90 	vmov	r3, s15
 8000f26:	81fb      	strh	r3, [r7, #14]

	delay->delayData[delay->delayWritePtr] = in + (delay->delayData[delay->delayReadPtr]*delay->feedback);
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	ee07 3a90 	vmov	s15, r3
 8000f2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f32:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <Delay_Process+0xf4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <Delay_Process+0xf4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	ee07 3a90 	vmov	s15, r3
 8000f48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <Delay_Process+0xf4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <Delay_Process+0xf4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <Delay_Process+0xf4>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f70:	ee17 2a90 	vmov	r2, s15
 8000f74:	b292      	uxth	r2, r2
 8000f76:	801a      	strh	r2, [r3, #0]

	if(++delay->delayReadPtr >= delay->delayBufferLength)
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <Delay_Process+0xf4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	3201      	adds	r2, #1
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <Delay_Process+0xf4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	db03      	blt.n	8000f96 <Delay_Process+0xc6>
		delay->delayReadPtr = 0;
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <Delay_Process+0xf4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]

	if(++delay->delayWritePtr >= delay->delayBufferLength)
 8000f96:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <Delay_Process+0xf4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	3201      	adds	r2, #1
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <Delay_Process+0xf4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	db03      	blt.n	8000fb4 <Delay_Process+0xe4>
		delay->delayWritePtr = 0;
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <Delay_Process+0xf4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]

	return out;
 8000fb4:	89fb      	ldrh	r3, [r7, #14]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	24000098 	.word	0x24000098

08000fc8 <Delay_Set_Params>:

void Delay_Set_Params(float delayLength, float feedback) {
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fd2:	edc7 0a00 	vstr	s1, [r7]
	if(delayLength < 0.05) delayLength = 0.05;
 8000fd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fde:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8001148 <Delay_Set_Params+0x180>
 8000fe2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fea:	d501      	bpl.n	8000ff0 <Delay_Set_Params+0x28>
 8000fec:	4b5e      	ldr	r3, [pc, #376]	; (8001168 <Delay_Set_Params+0x1a0>)
 8000fee:	607b      	str	r3, [r7, #4]

	delayLength *= 2.0f;
 8000ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ff8:	edc7 7a01 	vstr	s15, [r7, #4]

	if(delayLength - 0.1 > delay->delayLength - 0.01  || delayLength + 0.1 < delay->delayLength + 0.01) {
 8000ffc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001000:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001004:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8001150 <Delay_Set_Params+0x188>
 8001008:	ee37 6b46 	vsub.f64	d6, d7, d6
 800100c:	4b57      	ldr	r3, [pc, #348]	; (800116c <Delay_Set_Params+0x1a4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	edd3 7a03 	vldr	s15, [r3, #12]
 8001014:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001018:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8001158 <Delay_Set_Params+0x190>
 800101c:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001020:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001028:	dc16      	bgt.n	8001058 <Delay_Set_Params+0x90>
 800102a:	edd7 7a01 	vldr	s15, [r7, #4]
 800102e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001032:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001150 <Delay_Set_Params+0x188>
 8001036:	ee37 6b06 	vadd.f64	d6, d7, d6
 800103a:	4b4c      	ldr	r3, [pc, #304]	; (800116c <Delay_Set_Params+0x1a4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001042:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001046:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8001158 <Delay_Set_Params+0x190>
 800104a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800104e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001056:	d531      	bpl.n	80010bc <Delay_Set_Params+0xf4>
		delay->delayLength = delayLength;
 8001058:	4b44      	ldr	r3, [pc, #272]	; (800116c <Delay_Set_Params+0x1a4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	60da      	str	r2, [r3, #12]
		delay->delayReadPtr = (int)(delay->delayWritePtr - (delay->delayLength * delay->sampleRate) + delay->delayBufferLength) % delay->delayBufferLength;
 8001060:	4b42      	ldr	r3, [pc, #264]	; (800116c <Delay_Set_Params+0x1a4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106e:	4b3f      	ldr	r3, [pc, #252]	; (800116c <Delay_Set_Params+0x1a4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	edd3 6a03 	vldr	s13, [r3, #12]
 8001076:	4b3d      	ldr	r3, [pc, #244]	; (800116c <Delay_Set_Params+0x1a4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001088:	ee37 7a67 	vsub.f32	s14, s14, s15
 800108c:	4b37      	ldr	r3, [pc, #220]	; (800116c <Delay_Set_Params+0x1a4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	ee07 3a90 	vmov	s15, r3
 8001096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a2:	ee17 0a90 	vmov	r0, s15
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <Delay_Set_Params+0x1a4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	4a2f      	ldr	r2, [pc, #188]	; (800116c <Delay_Set_Params+0x1a4>)
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	fb90 f1f3 	sdiv	r1, r0, r3
 80010b4:	fb01 f303 	mul.w	r3, r1, r3
 80010b8:	1ac3      	subs	r3, r0, r3
 80010ba:	6093      	str	r3, [r2, #8]
	}

	if(feedback > 0.8) feedback = 0.8;
 80010bc:	edd7 7a00 	vldr	s15, [r7]
 80010c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c4:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8001160 <Delay_Set_Params+0x198>
 80010c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80010cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d0:	dd01      	ble.n	80010d6 <Delay_Set_Params+0x10e>
 80010d2:	4b27      	ldr	r3, [pc, #156]	; (8001170 <Delay_Set_Params+0x1a8>)
 80010d4:	603b      	str	r3, [r7, #0]

	if(feedback - 0.1 > delay->feedback - 0.01 || feedback + 0.1 < delay->feedback + 0.01) {
 80010d6:	edd7 7a00 	vldr	s15, [r7]
 80010da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010de:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8001150 <Delay_Set_Params+0x188>
 80010e2:	ee37 6b46 	vsub.f64	d6, d7, d6
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <Delay_Set_Params+0x1a4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80010ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010f2:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001158 <Delay_Set_Params+0x190>
 80010f6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80010fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001102:	dc17      	bgt.n	8001134 <Delay_Set_Params+0x16c>
 8001104:	edd7 7a00 	vldr	s15, [r7]
 8001108:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800110c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001150 <Delay_Set_Params+0x188>
 8001110:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <Delay_Set_Params+0x1a4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	edd3 7a05 	vldr	s15, [r3, #20]
 800111c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001120:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001158 <Delay_Set_Params+0x190>
 8001124:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001128:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800112c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001130:	d400      	bmi.n	8001134 <Delay_Set_Params+0x16c>
		delay->feedback = feedback;
	}
}
 8001132:	e003      	b.n	800113c <Delay_Set_Params+0x174>
		delay->feedback = feedback;
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <Delay_Set_Params+0x1a4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	615a      	str	r2, [r3, #20]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	9999999a 	.word	0x9999999a
 800114c:	3fa99999 	.word	0x3fa99999
 8001150:	9999999a 	.word	0x9999999a
 8001154:	3fb99999 	.word	0x3fb99999
 8001158:	47ae147b 	.word	0x47ae147b
 800115c:	3f847ae1 	.word	0x3f847ae1
 8001160:	9999999a 	.word	0x9999999a
 8001164:	3fe99999 	.word	0x3fe99999
 8001168:	3d4ccccd 	.word	0x3d4ccccd
 800116c:	24000098 	.word	0x24000098
 8001170:	3f4ccccd 	.word	0x3f4ccccd

08001174 <Delay_Free>:

void Delay_Free() {
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	if(delay != NULL) {
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <Delay_Free+0x2c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00d      	beq.n	800119c <Delay_Free+0x28>
		free(delay->delayData);
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <Delay_Free+0x2c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f00a fa78 	bl	800b67c <free>
		free(delay);
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <Delay_Free+0x2c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f00a fa73 	bl	800b67c <free>

		delay = NULL;
 8001196:	4b02      	ldr	r3, [pc, #8]	; (80011a0 <Delay_Free+0x2c>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
	}
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	24000098 	.word	0x24000098

080011a4 <OnePoleLP_Init>:

#include <OnePoleLP.h>

OnePoleLP onePoleLP;

void OnePoleLP_Init() {
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
	onePoleLP.lastOutput = onePoleLP.inputs = onePoleLP.outputs = 0.0f;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <OnePoleLP_Init+0x28>)
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <OnePoleLP_Init+0x28>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	4a05      	ldr	r2, [pc, #20]	; (80011cc <OnePoleLP_Init+0x28>)
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <OnePoleLP_Init+0x28>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a03      	ldr	r2, [pc, #12]	; (80011cc <OnePoleLP_Init+0x28>)
 80011be:	6093      	str	r3, [r2, #8]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	2400009c 	.word	0x2400009c

080011d0 <Tick>:

void Tick(float *sample, float cutoff) {
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	ed87 0a00 	vstr	s0, [r7]
	float p = (cutoff * 0.98f) * (cutoff * 0.98f) * (cutoff * 0.98f) * (cutoff * 0.98f);
 80011dc:	edd7 7a00 	vldr	s15, [r7]
 80011e0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001260 <Tick+0x90>
 80011e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011e8:	edd7 7a00 	vldr	s15, [r7]
 80011ec:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001260 <Tick+0x90>
 80011f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f8:	edd7 7a00 	vldr	s15, [r7]
 80011fc:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001260 <Tick+0x90>
 8001200:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001204:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001208:	edd7 7a00 	vldr	s15, [r7]
 800120c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001260 <Tick+0x90>
 8001210:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001218:	edc7 7a03 	vstr	s15, [r7, #12]
	onePoleLP.outputs = (1.0f - p) * (*sample) + p * onePoleLP.outputs;
 800121c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001220:	edd7 7a03 	vldr	s15, [r7, #12]
 8001224:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <Tick+0x94>)
 8001234:	edd3 6a01 	vldr	s13, [r3, #4]
 8001238:	edd7 7a03 	vldr	s15, [r7, #12]
 800123c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <Tick+0x94>)
 8001246:	edc3 7a01 	vstr	s15, [r3, #4]
	*sample = onePoleLP.outputs;
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <Tick+0x94>)
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	3f7ae148 	.word	0x3f7ae148
 8001264:	2400009c 	.word	0x2400009c

08001268 <Tremolo_LFO>:
#define PI 3.14159265359

TremoloEffect* tremolo = NULL;

float Tremolo_LFO(float phase, int waveform)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001272:	6038      	str	r0, [r7, #0]
	switch(waveform) {
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <Tremolo_LFO+0x1a>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d031      	beq.n	80012e4 <Tremolo_LFO+0x7c>
 8001280:	e03f      	b.n	8001302 <Tremolo_LFO+0x9a>
		case Triangle:
			if(phase < 0.25f)
 8001282:	edd7 7a01 	vldr	s15, [r7, #4]
 8001286:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800128a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	d508      	bpl.n	80012a6 <Tremolo_LFO+0x3e>
				return 0.5f + 2.0f*phase;
 8001294:	edd7 7a01 	vldr	s15, [r7, #4]
 8001298:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800129c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012a4:	e045      	b.n	8001332 <Tremolo_LFO+0xca>
			else if(phase < 0.75f)
 80012a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012aa:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80012ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b6:	d50c      	bpl.n	80012d2 <Tremolo_LFO+0x6a>
				return 1.0f - 2.0f*(phase - 0.25f);
 80012b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012bc:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80012c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d0:	e02f      	b.n	8001332 <Tremolo_LFO+0xca>
			else
				return 2.0f*(phase-0.75f);
 80012d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d6:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80012da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e2:	e026      	b.n	8001332 <Tremolo_LFO+0xca>
		case Square:
			if(phase < 0.5f)
 80012e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f4:	d502      	bpl.n	80012fc <Tremolo_LFO+0x94>
				return 1.0f;
 80012f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80012fa:	e01a      	b.n	8001332 <Tremolo_LFO+0xca>
			else
				return 0.0f;
 80012fc:	eddf 7a12 	vldr	s15, [pc, #72]	; 8001348 <Tremolo_LFO+0xe0>
 8001300:	e017      	b.n	8001332 <Tremolo_LFO+0xca>
		case Sine:
		default:
			return 0.5f + 0.5f*sinf(2.0 * PI * phase);
 8001302:	edd7 7a01 	vldr	s15, [r7, #4]
 8001306:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800130a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001340 <Tremolo_LFO+0xd8>
 800130e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001312:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	f00a fb29 	bl	800b970 <sinf>
 800131e:	eef0 7a40 	vmov.f32	s15, s0
 8001322:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001326:	ee67 7a87 	vmul.f32	s15, s15, s14
 800132a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800132e:	ee77 7a87 	vadd.f32	s15, s15, s14
		}
}
 8001332:	eeb0 0a67 	vmov.f32	s0, s15
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	f3af 8000 	nop.w
 8001340:	54442eea 	.word	0x54442eea
 8001344:	401921fb 	.word	0x401921fb
 8001348:	00000000 	.word	0x00000000

0800134c <Tremolo_Init>:

void Tremolo_Init(int sampleRate) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	if(tremolo != NULL) return;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <Tremolo_Init+0x60>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d122      	bne.n	80013a2 <Tremolo_Init+0x56>

	tremolo = malloc(sizeof(TremoloEffect));
 800135c:	2014      	movs	r0, #20
 800135e:	f00a f985 	bl	800b66c <malloc>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <Tremolo_Init+0x60>)
 8001368:	601a      	str	r2, [r3, #0]
	tremolo->phase = 0;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <Tremolo_Init+0x60>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
	tremolo->inverseSampleRate = 1.0f/sampleRate;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <Tremolo_Init+0x60>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138a:	edc3 7a01 	vstr	s15, [r3, #4]
	tremolo->depth = 1.0f;
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <Tremolo_Init+0x60>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001396:	609a      	str	r2, [r3, #8]
	tremolo->waveform = Triangle;
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <Tremolo_Init+0x60>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
 80013a0:	e000      	b.n	80013a4 <Tremolo_Init+0x58>
	if(tremolo != NULL) return;
 80013a2:	bf00      	nop
}
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	240000a8 	.word	0x240000a8

080013b0 <Tremolo_Process>:

float Tremolo_Process(float in, float depth, float frequency) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	ed2d 8b02 	vpush	{d8}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80013be:	edc7 0a02 	vstr	s1, [r7, #8]
 80013c2:	ed87 1a01 	vstr	s2, [r7, #4]
	tremolo->depth = depth;
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <Tremolo_Process+0xd8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	609a      	str	r2, [r3, #8]
	tremolo->frequency = 6.0f*frequency;
 80013ce:	4b2e      	ldr	r3, [pc, #184]	; (8001488 <Tremolo_Process+0xd8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80013da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013de:	edc3 7a03 	vstr	s15, [r3, #12]
	float out;
	out = in * (1.0f - tremolo->depth * Tremolo_LFO(tremolo->phase, tremolo->waveform));
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <Tremolo_Process+0xd8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	ed93 8a02 	vldr	s16, [r3, #8]
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <Tremolo_Process+0xd8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	4b25      	ldr	r3, [pc, #148]	; (8001488 <Tremolo_Process+0xd8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	4618      	mov	r0, r3
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	f7ff ff33 	bl	8001268 <Tremolo_LFO>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
 8001406:	ee68 7a27 	vmul.f32	s15, s16, s15
 800140a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800140e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001412:	ed97 7a03 	vldr	s14, [r7, #12]
 8001416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141a:	edc7 7a05 	vstr	s15, [r7, #20]

	tremolo->phase += tremolo->frequency*tremolo->inverseSampleRate;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <Tremolo_Process+0xd8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	ed93 7a00 	vldr	s14, [r3]
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <Tremolo_Process+0xd8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	edd3 6a03 	vldr	s13, [r3, #12]
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <Tremolo_Process+0xd8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	edd3 7a01 	vldr	s15, [r3, #4]
 8001436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <Tremolo_Process+0xd8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001442:	edc3 7a00 	vstr	s15, [r3]
	if(tremolo->phase >= 1.0)
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <Tremolo_Process+0xd8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	db0b      	blt.n	8001474 <Tremolo_Process+0xc4>
		tremolo->phase -= 1.0;
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <Tremolo_Process+0xd8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <Tremolo_Process+0xd8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800146c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001470:	edc3 7a00 	vstr	s15, [r3]

	return out;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	ee07 3a90 	vmov	s15, r3
}
 800147a:	eeb0 0a67 	vmov.f32	s0, s15
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	ecbd 8b02 	vpop	{d8}
 8001486:	bd80      	pop	{r7, pc}
 8001488:	240000a8 	.word	0x240000a8

0800148c <Tremolo_Set_Waveform>:

void Tremolo_Set_Waveform(int waveform) {
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	tremolo->waveform = waveform;
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <Tremolo_Set_Waveform+0x1c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	611a      	str	r2, [r3, #16]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	240000a8 	.word	0x240000a8

080014ac <Tremolo_Free>:

void Tremolo_Free() {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	if(tremolo != NULL) {
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <Tremolo_Free+0x20>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d007      	beq.n	80014c8 <Tremolo_Free+0x1c>
		free(tremolo);
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <Tremolo_Free+0x20>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f00a f8dd 	bl	800b67c <free>
		tremolo = NULL;
 80014c2:	4b02      	ldr	r3, [pc, #8]	; (80014cc <Tremolo_Free+0x20>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
	}
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	240000a8 	.word	0x240000a8

080014d0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014e2:	463b      	mov	r3, r7
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014f4:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <MX_ADC1_Init+0xe8>)
 80014f6:	4a31      	ldr	r2, [pc, #196]	; (80015bc <MX_ADC1_Init+0xec>)
 80014f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014fa:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <MX_ADC1_Init+0xe8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <MX_ADC1_Init+0xe8>)
 8001502:	2208      	movs	r2, #8
 8001504:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001506:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <MX_ADC1_Init+0xe8>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800150c:	4b2a      	ldr	r3, [pc, #168]	; (80015b8 <MX_ADC1_Init+0xe8>)
 800150e:	2204      	movs	r2, #4
 8001510:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <MX_ADC1_Init+0xe8>)
 8001514:	2200      	movs	r2, #0
 8001516:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <MX_ADC1_Init+0xe8>)
 800151a:	2200      	movs	r2, #0
 800151c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <MX_ADC1_Init+0xe8>)
 8001520:	2201      	movs	r2, #1
 8001522:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <MX_ADC1_Init+0xe8>)
 8001526:	2200      	movs	r2, #0
 8001528:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <MX_ADC1_Init+0xe8>)
 800152c:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <MX_ADC1_Init+0xe8>)
 8001534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <MX_ADC1_Init+0xe8>)
 800153c:	2203      	movs	r2, #3
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001540:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <MX_ADC1_Init+0xe8>)
 8001542:	2200      	movs	r2, #0
 8001544:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <MX_ADC1_Init+0xe8>)
 8001548:	2200      	movs	r2, #0
 800154a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800154c:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <MX_ADC1_Init+0xe8>)
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001554:	4818      	ldr	r0, [pc, #96]	; (80015b8 <MX_ADC1_Init+0xe8>)
 8001556:	f001 fbfb 	bl	8002d50 <HAL_ADC_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001560:	f000 fe92 	bl	8002288 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4812      	ldr	r0, [pc, #72]	; (80015b8 <MX_ADC1_Init+0xe8>)
 8001570:	f002 faee 	bl	8003b50 <HAL_ADCEx_MultiModeConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800157a:	f000 fe85 	bl	8002288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <MX_ADC1_Init+0xf0>)
 8001580:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001582:	2306      	movs	r3, #6
 8001584:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800158a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800158e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001590:	2304      	movs	r3, #4
 8001592:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159c:	463b      	mov	r3, r7
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_ADC1_Init+0xe8>)
 80015a2:	f001 fded 	bl	8003180 <HAL_ADC_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80015ac:	f000 fe6c 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	3728      	adds	r7, #40	; 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	240000ac 	.word	0x240000ac
 80015bc:	40022000 	.word	0x40022000
 80015c0:	08600004 	.word	0x08600004

080015c4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80015dc:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <MX_ADC2_Init+0xfc>)
 80015de:	4a39      	ldr	r2, [pc, #228]	; (80016c4 <MX_ADC2_Init+0x100>)
 80015e0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015e2:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <MX_ADC2_Init+0xfc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015e8:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <MX_ADC2_Init+0xfc>)
 80015ea:	2208      	movs	r2, #8
 80015ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015ee:	4b34      	ldr	r3, [pc, #208]	; (80016c0 <MX_ADC2_Init+0xfc>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015f4:	4b32      	ldr	r3, [pc, #200]	; (80016c0 <MX_ADC2_Init+0xfc>)
 80015f6:	2204      	movs	r2, #4
 80015f8:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80015fa:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <MX_ADC2_Init+0xfc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001600:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <MX_ADC2_Init+0xfc>)
 8001602:	2200      	movs	r2, #0
 8001604:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 3;
 8001606:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <MX_ADC2_Init+0xfc>)
 8001608:	2203      	movs	r2, #3
 800160a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800160c:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <MX_ADC2_Init+0xfc>)
 800160e:	2200      	movs	r2, #0
 8001610:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001612:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <MX_ADC2_Init+0xfc>)
 8001614:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <MX_ADC2_Init+0xfc>)
 800161c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001620:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001622:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <MX_ADC2_Init+0xfc>)
 8001624:	2203      	movs	r2, #3
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001628:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <MX_ADC2_Init+0xfc>)
 800162a:	2200      	movs	r2, #0
 800162c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800162e:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <MX_ADC2_Init+0xfc>)
 8001630:	2200      	movs	r2, #0
 8001632:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001634:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <MX_ADC2_Init+0xfc>)
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800163c:	4820      	ldr	r0, [pc, #128]	; (80016c0 <MX_ADC2_Init+0xfc>)
 800163e:	f001 fb87 	bl	8002d50 <HAL_ADC_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001648:	f000 fe1e 	bl	8002288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <MX_ADC2_Init+0x104>)
 800164e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001650:	2306      	movs	r3, #6
 8001652:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001658:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800165c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800165e:	2304      	movs	r3, #4
 8001660:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4619      	mov	r1, r3
 800166e:	4814      	ldr	r0, [pc, #80]	; (80016c0 <MX_ADC2_Init+0xfc>)
 8001670:	f001 fd86 	bl	8003180 <HAL_ADC_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800167a:	f000 fe05 	bl	8002288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <MX_ADC2_Init+0x108>)
 8001680:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001682:	230c      	movs	r3, #12
 8001684:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	4619      	mov	r1, r3
 800168a:	480d      	ldr	r0, [pc, #52]	; (80016c0 <MX_ADC2_Init+0xfc>)
 800168c:	f001 fd78 	bl	8003180 <HAL_ADC_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8001696:	f000 fdf7 	bl	8002288 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <MX_ADC2_Init+0x10c>)
 800169c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800169e:	2312      	movs	r3, #18
 80016a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	4619      	mov	r1, r3
 80016a6:	4806      	ldr	r0, [pc, #24]	; (80016c0 <MX_ADC2_Init+0xfc>)
 80016a8:	f001 fd6a 	bl	8003180 <HAL_ADC_ConfigChannel>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 80016b2:	f000 fde9 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	3720      	adds	r7, #32
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	24000110 	.word	0x24000110
 80016c4:	40022100 	.word	0x40022100
 80016c8:	19200040 	.word	0x19200040
 80016cc:	1d500080 	.word	0x1d500080
 80016d0:	21800100 	.word	0x21800100

080016d4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08e      	sub	sp, #56	; 0x38
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a86      	ldr	r2, [pc, #536]	; (800190c <HAL_ADC_MspInit+0x238>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d165      	bne.n	80017c2 <HAL_ADC_MspInit+0xee>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016f6:	4b86      	ldr	r3, [pc, #536]	; (8001910 <HAL_ADC_MspInit+0x23c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	4a84      	ldr	r2, [pc, #528]	; (8001910 <HAL_ADC_MspInit+0x23c>)
 80016fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001700:	4b83      	ldr	r3, [pc, #524]	; (8001910 <HAL_ADC_MspInit+0x23c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d10e      	bne.n	8001726 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001708:	4b82      	ldr	r3, [pc, #520]	; (8001914 <HAL_ADC_MspInit+0x240>)
 800170a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800170e:	4a81      	ldr	r2, [pc, #516]	; (8001914 <HAL_ADC_MspInit+0x240>)
 8001710:	f043 0320 	orr.w	r3, r3, #32
 8001714:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001718:	4b7e      	ldr	r3, [pc, #504]	; (8001914 <HAL_ADC_MspInit+0x240>)
 800171a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001726:	4b7b      	ldr	r3, [pc, #492]	; (8001914 <HAL_ADC_MspInit+0x240>)
 8001728:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800172c:	4a79      	ldr	r2, [pc, #484]	; (8001914 <HAL_ADC_MspInit+0x240>)
 800172e:	f043 0320 	orr.w	r3, r3, #32
 8001732:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001736:	4b77      	ldr	r3, [pc, #476]	; (8001914 <HAL_ADC_MspInit+0x240>)
 8001738:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	61fb      	str	r3, [r7, #28]
 8001742:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001744:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800174a:	2303      	movs	r3, #3
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001756:	4619      	mov	r1, r3
 8001758:	486f      	ldr	r0, [pc, #444]	; (8001918 <HAL_ADC_MspInit+0x244>)
 800175a:	f004 ffe7 	bl	800672c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800175e:	4b6f      	ldr	r3, [pc, #444]	; (800191c <HAL_ADC_MspInit+0x248>)
 8001760:	4a6f      	ldr	r2, [pc, #444]	; (8001920 <HAL_ADC_MspInit+0x24c>)
 8001762:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001764:	4b6d      	ldr	r3, [pc, #436]	; (800191c <HAL_ADC_MspInit+0x248>)
 8001766:	2209      	movs	r2, #9
 8001768:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800176a:	4b6c      	ldr	r3, [pc, #432]	; (800191c <HAL_ADC_MspInit+0x248>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001770:	4b6a      	ldr	r3, [pc, #424]	; (800191c <HAL_ADC_MspInit+0x248>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001776:	4b69      	ldr	r3, [pc, #420]	; (800191c <HAL_ADC_MspInit+0x248>)
 8001778:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800177c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800177e:	4b67      	ldr	r3, [pc, #412]	; (800191c <HAL_ADC_MspInit+0x248>)
 8001780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001784:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001786:	4b65      	ldr	r3, [pc, #404]	; (800191c <HAL_ADC_MspInit+0x248>)
 8001788:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800178c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800178e:	4b63      	ldr	r3, [pc, #396]	; (800191c <HAL_ADC_MspInit+0x248>)
 8001790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001794:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001796:	4b61      	ldr	r3, [pc, #388]	; (800191c <HAL_ADC_MspInit+0x248>)
 8001798:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800179c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800179e:	4b5f      	ldr	r3, [pc, #380]	; (800191c <HAL_ADC_MspInit+0x248>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017a4:	485d      	ldr	r0, [pc, #372]	; (800191c <HAL_ADC_MspInit+0x248>)
 80017a6:	f002 fe45 	bl	8004434 <HAL_DMA_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 80017b0:	f000 fd6a 	bl	8002288 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a59      	ldr	r2, [pc, #356]	; (800191c <HAL_ADC_MspInit+0x248>)
 80017b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80017ba:	4a58      	ldr	r2, [pc, #352]	; (800191c <HAL_ADC_MspInit+0x248>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80017c0:	e09f      	b.n	8001902 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC2)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a57      	ldr	r2, [pc, #348]	; (8001924 <HAL_ADC_MspInit+0x250>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	f040 809a 	bne.w	8001902 <HAL_ADC_MspInit+0x22e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017ce:	4b50      	ldr	r3, [pc, #320]	; (8001910 <HAL_ADC_MspInit+0x23c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a4e      	ldr	r2, [pc, #312]	; (8001910 <HAL_ADC_MspInit+0x23c>)
 80017d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80017d8:	4b4d      	ldr	r3, [pc, #308]	; (8001910 <HAL_ADC_MspInit+0x23c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d10e      	bne.n	80017fe <HAL_ADC_MspInit+0x12a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80017e0:	4b4c      	ldr	r3, [pc, #304]	; (8001914 <HAL_ADC_MspInit+0x240>)
 80017e2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80017e6:	4a4b      	ldr	r2, [pc, #300]	; (8001914 <HAL_ADC_MspInit+0x240>)
 80017e8:	f043 0320 	orr.w	r3, r3, #32
 80017ec:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80017f0:	4b48      	ldr	r3, [pc, #288]	; (8001914 <HAL_ADC_MspInit+0x240>)
 80017f2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	61bb      	str	r3, [r7, #24]
 80017fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b45      	ldr	r3, [pc, #276]	; (8001914 <HAL_ADC_MspInit+0x240>)
 8001800:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001804:	4a43      	ldr	r2, [pc, #268]	; (8001914 <HAL_ADC_MspInit+0x240>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800180e:	4b41      	ldr	r3, [pc, #260]	; (8001914 <HAL_ADC_MspInit+0x240>)
 8001810:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181c:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <HAL_ADC_MspInit+0x240>)
 800181e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001822:	4a3c      	ldr	r2, [pc, #240]	; (8001914 <HAL_ADC_MspInit+0x240>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800182c:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_ADC_MspInit+0x240>)
 800182e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800183a:	4b36      	ldr	r3, [pc, #216]	; (8001914 <HAL_ADC_MspInit+0x240>)
 800183c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001840:	4a34      	ldr	r2, [pc, #208]	; (8001914 <HAL_ADC_MspInit+0x240>)
 8001842:	f043 0320 	orr.w	r3, r3, #32
 8001846:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800184a:	4b32      	ldr	r3, [pc, #200]	; (8001914 <HAL_ADC_MspInit+0x240>)
 800184c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001850:	f003 0320 	and.w	r3, r3, #32
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185c:	2303      	movs	r3, #3
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	4619      	mov	r1, r3
 800186a:	482f      	ldr	r0, [pc, #188]	; (8001928 <HAL_ADC_MspInit+0x254>)
 800186c:	f004 ff5e 	bl	800672c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001870:	2320      	movs	r3, #32
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001874:	2303      	movs	r3, #3
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001880:	4619      	mov	r1, r3
 8001882:	482a      	ldr	r0, [pc, #168]	; (800192c <HAL_ADC_MspInit+0x258>)
 8001884:	f004 ff52 	bl	800672c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001888:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188e:	2303      	movs	r3, #3
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189a:	4619      	mov	r1, r3
 800189c:	481e      	ldr	r0, [pc, #120]	; (8001918 <HAL_ADC_MspInit+0x244>)
 800189e:	f004 ff45 	bl	800672c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream2;
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <HAL_ADC_MspInit+0x25c>)
 80018a4:	4a23      	ldr	r2, [pc, #140]	; (8001934 <HAL_ADC_MspInit+0x260>)
 80018a6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <HAL_ADC_MspInit+0x25c>)
 80018aa:	220a      	movs	r2, #10
 80018ac:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_ADC_MspInit+0x25c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_ADC_MspInit+0x25c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80018ba:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <HAL_ADC_MspInit+0x25c>)
 80018bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018c2:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_ADC_MspInit+0x25c>)
 80018c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018c8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_ADC_MspInit+0x25c>)
 80018cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018d0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80018d2:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_ADC_MspInit+0x25c>)
 80018d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018d8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_ADC_MspInit+0x25c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_ADC_MspInit+0x25c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80018e6:	4812      	ldr	r0, [pc, #72]	; (8001930 <HAL_ADC_MspInit+0x25c>)
 80018e8:	f002 fda4 	bl	8004434 <HAL_DMA_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_ADC_MspInit+0x222>
      Error_Handler();
 80018f2:	f000 fcc9 	bl	8002288 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <HAL_ADC_MspInit+0x25c>)
 80018fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80018fc:	4a0c      	ldr	r2, [pc, #48]	; (8001930 <HAL_ADC_MspInit+0x25c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001902:	bf00      	nop
 8001904:	3738      	adds	r7, #56	; 0x38
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40022000 	.word	0x40022000
 8001910:	24000264 	.word	0x24000264
 8001914:	58024400 	.word	0x58024400
 8001918:	58021400 	.word	0x58021400
 800191c:	24000174 	.word	0x24000174
 8001920:	40020010 	.word	0x40020010
 8001924:	40022100 	.word	0x40022100
 8001928:	58020000 	.word	0x58020000
 800192c:	58020800 	.word	0x58020800
 8001930:	240001ec 	.word	0x240001ec
 8001934:	40020040 	.word	0x40020040

08001938 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2224      	movs	r2, #36	; 0x24
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f009 fea1 	bl	800b68c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <MX_DAC1_Init+0x5c>)
 800194c:	4a12      	ldr	r2, [pc, #72]	; (8001998 <MX_DAC1_Init+0x60>)
 800194e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001950:	4810      	ldr	r0, [pc, #64]	; (8001994 <MX_DAC1_Init+0x5c>)
 8001952:	f002 faa8 	bl	8003ea6 <HAL_DAC_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800195c:	f000 fc94 	bl	8002288 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001964:	2316      	movs	r3, #22
 8001966:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800196c:	2301      	movs	r3, #1
 800196e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2200      	movs	r2, #0
 8001978:	4619      	mov	r1, r3
 800197a:	4806      	ldr	r0, [pc, #24]	; (8001994 <MX_DAC1_Init+0x5c>)
 800197c:	f002 fba0 	bl	80040c0 <HAL_DAC_ConfigChannel>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001986:	f000 fc7f 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	24000268 	.word	0x24000268
 8001998:	40007400 	.word	0x40007400

0800199c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a30      	ldr	r2, [pc, #192]	; (8001a7c <HAL_DAC_MspInit+0xe0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d15a      	bne.n	8001a74 <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80019be:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <HAL_DAC_MspInit+0xe4>)
 80019c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80019c4:	4a2e      	ldr	r2, [pc, #184]	; (8001a80 <HAL_DAC_MspInit+0xe4>)
 80019c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019ca:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80019ce:	4b2c      	ldr	r3, [pc, #176]	; (8001a80 <HAL_DAC_MspInit+0xe4>)
 80019d0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80019d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019dc:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <HAL_DAC_MspInit+0xe4>)
 80019de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019e2:	4a27      	ldr	r2, [pc, #156]	; (8001a80 <HAL_DAC_MspInit+0xe4>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80019ec:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_DAC_MspInit+0xe4>)
 80019ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019fa:	2310      	movs	r3, #16
 80019fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019fe:	2303      	movs	r3, #3
 8001a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	481d      	ldr	r0, [pc, #116]	; (8001a84 <HAL_DAC_MspInit+0xe8>)
 8001a0e:	f004 fe8d 	bl	800672c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8001a12:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <HAL_DAC_MspInit+0xec>)
 8001a14:	4a1d      	ldr	r2, [pc, #116]	; (8001a8c <HAL_DAC_MspInit+0xf0>)
 8001a16:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_DAC_MspInit+0xec>)
 8001a1a:	2243      	movs	r2, #67	; 0x43
 8001a1c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_DAC_MspInit+0xec>)
 8001a20:	2240      	movs	r2, #64	; 0x40
 8001a22:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_DAC_MspInit+0xec>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <HAL_DAC_MspInit+0xec>)
 8001a2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a30:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_DAC_MspInit+0xec>)
 8001a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a38:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a3a:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <HAL_DAC_MspInit+0xec>)
 8001a3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a40:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_DAC_MspInit+0xec>)
 8001a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a48:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <HAL_DAC_MspInit+0xec>)
 8001a4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a50:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <HAL_DAC_MspInit+0xec>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001a58:	480b      	ldr	r0, [pc, #44]	; (8001a88 <HAL_DAC_MspInit+0xec>)
 8001a5a:	f002 fceb 	bl	8004434 <HAL_DMA_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8001a64:	f000 fc10 	bl	8002288 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_DAC_MspInit+0xec>)
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <HAL_DAC_MspInit+0xec>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001a74:	bf00      	nop
 8001a76:	3728      	adds	r7, #40	; 0x28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40007400 	.word	0x40007400
 8001a80:	58024400 	.word	0x58024400
 8001a84:	58020000 	.word	0x58020000
 8001a88:	2400027c 	.word	0x2400027c
 8001a8c:	40020028 	.word	0x40020028

08001a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <MX_DMA_Init+0x5c>)
 8001a98:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001a9c:	4a13      	ldr	r2, [pc, #76]	; (8001aec <MX_DMA_Init+0x5c>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_DMA_Init+0x5c>)
 8001aa8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	200b      	movs	r0, #11
 8001aba:	f002 f9c0 	bl	8003e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001abe:	200b      	movs	r0, #11
 8001ac0:	f002 f9d7 	bl	8003e72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	200c      	movs	r0, #12
 8001aca:	f002 f9b8 	bl	8003e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ace:	200c      	movs	r0, #12
 8001ad0:	f002 f9cf 	bl	8003e72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	200d      	movs	r0, #13
 8001ada:	f002 f9b0 	bl	8003e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001ade:	200d      	movs	r0, #13
 8001ae0:	f002 f9c7 	bl	8003e72 <HAL_NVIC_EnableIRQ>

}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	58024400 	.word	0x58024400

08001af0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08c      	sub	sp, #48	; 0x30
 8001af4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	4b61      	ldr	r3, [pc, #388]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b0c:	4a5f      	ldr	r2, [pc, #380]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b16:	4b5d      	ldr	r3, [pc, #372]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b2a:	4a58      	ldr	r2, [pc, #352]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b2c:	f043 0320 	orr.w	r3, r3, #32
 8001b30:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b34:	4b55      	ldr	r3, [pc, #340]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b3a:	f003 0320 	and.w	r3, r3, #32
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b42:	4b52      	ldr	r3, [pc, #328]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b48:	4a50      	ldr	r2, [pc, #320]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b52:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	4b4a      	ldr	r3, [pc, #296]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b66:	4a49      	ldr	r2, [pc, #292]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b70:	4b46      	ldr	r3, [pc, #280]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b84:	4a41      	ldr	r2, [pc, #260]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b86:	f043 0308 	orr.w	r3, r3, #8
 8001b8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b8e:	4b3f      	ldr	r3, [pc, #252]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b9c:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001b9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ba2:	4a3a      	ldr	r2, [pc, #232]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ba8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001bac:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <MX_GPIO_Init+0x19c>)
 8001bae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bc0:	4833      	ldr	r0, [pc, #204]	; (8001c90 <MX_GPIO_Init+0x1a0>)
 8001bc2:	f004 ff63 	bl	8006a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bcc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	4619      	mov	r1, r3
 8001bdc:	482d      	ldr	r0, [pc, #180]	; (8001c94 <MX_GPIO_Init+0x1a4>)
 8001bde:	f004 fda5 	bl	800672c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4825      	ldr	r0, [pc, #148]	; (8001c90 <MX_GPIO_Init+0x1a0>)
 8001bfc:	f004 fd96 	bl	800672c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001c00:	2380      	movs	r3, #128	; 0x80
 8001c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001c0e:	f107 031c 	add.w	r3, r7, #28
 8001c12:	4619      	mov	r1, r3
 8001c14:	4820      	ldr	r0, [pc, #128]	; (8001c98 <MX_GPIO_Init+0x1a8>)
 8001c16:	f004 fd89 	bl	800672c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c28:	f107 031c 	add.w	r3, r7, #28
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	481b      	ldr	r0, [pc, #108]	; (8001c9c <MX_GPIO_Init+0x1ac>)
 8001c30:	f004 fd7c 	bl	800672c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001c46:	230a      	movs	r3, #10
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4812      	ldr	r0, [pc, #72]	; (8001c9c <MX_GPIO_Init+0x1ac>)
 8001c52:	f004 fd6b 	bl	800672c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001c56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	480b      	ldr	r0, [pc, #44]	; (8001c9c <MX_GPIO_Init+0x1ac>)
 8001c70:	f004 fd5c 	bl	800672c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2100      	movs	r1, #0
 8001c78:	2028      	movs	r0, #40	; 0x28
 8001c7a:	f002 f8e0 	bl	8003e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c7e:	2028      	movs	r0, #40	; 0x28
 8001c80:	f002 f8f7 	bl	8003e72 <HAL_NVIC_EnableIRQ>

}
 8001c84:	bf00      	nop
 8001c86:	3730      	adds	r7, #48	; 0x30
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	58024400 	.word	0x58024400
 8001c90:	58021400 	.word	0x58021400
 8001c94:	58020800 	.word	0x58020800
 8001c98:	58021800 	.word	0x58021800
 8001c9c:	58020000 	.word	0x58020000

08001ca0 <HAL_ADC_ConvHalfCpltCallback>:


// when we enter this function, first half of the buffer is complete
// so we set the input buffer pointer at the beginning
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1) {
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d108      	bne.n	8001cc2 <HAL_ADC_ConvHalfCpltCallback+0x22>
		inBuffPtr = &adcData[0];
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001cb2:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8001cb4:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[DATA_SIZE];
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001cb8:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001cba:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
	}

}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	240000ac 	.word	0x240000ac
 8001cd4:	24000afc 	.word	0x24000afc
 8001cd8:	240002f4 	.word	0x240002f4
 8001cdc:	24000b00 	.word	0x24000b00
 8001ce0:	240008f4 	.word	0x240008f4
 8001ce4:	24000b04 	.word	0x24000b04

08001ce8 <HAL_ADC_ConvCpltCallback>:

// when we enter this function, first half of the buffer is complete
// so we set the input buffer pointer at the beginning
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

	if(hadc == &hadc1) {
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a09      	ldr	r2, [pc, #36]	; (8001d18 <HAL_ADC_ConvCpltCallback+0x30>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d108      	bne.n	8001d0a <HAL_ADC_ConvCpltCallback+0x22>
		inBuffPtr = &adcData[DATA_SIZE];
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <HAL_ADC_ConvCpltCallback+0x34>)
 8001cfa:	4a09      	ldr	r2, [pc, #36]	; (8001d20 <HAL_ADC_ConvCpltCallback+0x38>)
 8001cfc:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[0];
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001d00:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_ADC_ConvCpltCallback+0x40>)
 8001d02:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_ADC_ConvCpltCallback+0x44>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
	}

}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	240000ac 	.word	0x240000ac
 8001d1c:	24000afc 	.word	0x24000afc
 8001d20:	240004f4 	.word	0x240004f4
 8001d24:	24000b00 	.word	0x24000b00
 8001d28:	240006f4 	.word	0x240006f4
 8001d2c:	24000b04 	.word	0x24000b04

08001d30 <Is_Tremolo>:
enum Effect { CleanEf, DelayEf, SineEf, SquareEf, TriangleEf, ChorusEf };
uint8_t currentEffect =  ChorusEf;

const float INT16_TO_FLOAT = 1.0f / 32768.0f;

uint8_t Is_Tremolo() {
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
	return currentEffect == SineEf || currentEffect == SquareEf || currentEffect == TriangleEf;
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <Is_Tremolo+0x30>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d007      	beq.n	8001d4c <Is_Tremolo+0x1c>
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <Is_Tremolo+0x30>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d003      	beq.n	8001d4c <Is_Tremolo+0x1c>
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <Is_Tremolo+0x30>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d101      	bne.n	8001d50 <Is_Tremolo+0x20>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <Is_Tremolo+0x22>
 8001d50:	2300      	movs	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	24000001 	.word	0x24000001

08001d64 <Init_Tremolo_Waveform>:

void Init_Tremolo_Waveform() {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	if(currentEffect == SineEf) Tremolo_Set_Waveform(Sine);
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <Init_Tremolo_Waveform+0x38>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d103      	bne.n	8001d78 <Init_Tremolo_Waveform+0x14>
 8001d70:	2002      	movs	r0, #2
 8001d72:	f7ff fb8b 	bl	800148c <Tremolo_Set_Waveform>
	else if(currentEffect == SquareEf) Tremolo_Set_Waveform(Square);
	else if(currentEffect == TriangleEf) Tremolo_Set_Waveform(Triangle);
}
 8001d76:	e00e      	b.n	8001d96 <Init_Tremolo_Waveform+0x32>
	else if(currentEffect == SquareEf) Tremolo_Set_Waveform(Square);
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <Init_Tremolo_Waveform+0x38>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d103      	bne.n	8001d88 <Init_Tremolo_Waveform+0x24>
 8001d80:	2001      	movs	r0, #1
 8001d82:	f7ff fb83 	bl	800148c <Tremolo_Set_Waveform>
}
 8001d86:	e006      	b.n	8001d96 <Init_Tremolo_Waveform+0x32>
	else if(currentEffect == TriangleEf) Tremolo_Set_Waveform(Triangle);
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <Init_Tremolo_Waveform+0x38>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d102      	bne.n	8001d96 <Init_Tremolo_Waveform+0x32>
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff fb7b 	bl	800148c <Tremolo_Set_Waveform>
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	24000001 	.word	0x24000001

08001da0 <processData>:
void processData()
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
	if(effectReady == 0) return;
 8001da6:	4b84      	ldr	r3, [pc, #528]	; (8001fb8 <processData+0x218>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80ff 	beq.w	8001fae <processData+0x20e>

	float knob1 = adc2Data[0]/4095.0f;
 8001db0:	4b82      	ldr	r3, [pc, #520]	; (8001fbc <processData+0x21c>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dbc:	eddf 6a80 	vldr	s13, [pc, #512]	; 8001fc0 <processData+0x220>
 8001dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dc4:	edc7 7a01 	vstr	s15, [r7, #4]
	float knob2 = adc2Data[1]/4095.0f;
 8001dc8:	4b7c      	ldr	r3, [pc, #496]	; (8001fbc <processData+0x21c>)
 8001dca:	885b      	ldrh	r3, [r3, #2]
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dd4:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8001fc0 <processData+0x220>
 8001dd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ddc:	edc7 7a00 	vstr	s15, [r7]

	if(currentEffect == CleanEf) {
 8001de0:	4b78      	ldr	r3, [pc, #480]	; (8001fc4 <processData+0x224>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d116      	bne.n	8001e16 <processData+0x76>
		for(int i = 0; i < DATA_SIZE; i++) {
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e00f      	b.n	8001e0e <processData+0x6e>
			 outBuffPtr[i] = inBuffPtr[i];
 8001dee:	4b76      	ldr	r3, [pc, #472]	; (8001fc8 <processData+0x228>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	441a      	add	r2, r3
 8001df8:	4b74      	ldr	r3, [pc, #464]	; (8001fcc <processData+0x22c>)
 8001dfa:	6819      	ldr	r1, [r3, #0]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	440b      	add	r3, r1
 8001e02:	8812      	ldrh	r2, [r2, #0]
 8001e04:	b292      	uxth	r2, r2
 8001e06:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2bff      	cmp	r3, #255	; 0xff
 8001e12:	ddec      	ble.n	8001dee <processData+0x4e>
 8001e14:	e0c7      	b.n	8001fa6 <processData+0x206>
		}
	}
	else if(currentEffect == DelayEf) {
 8001e16:	4b6b      	ldr	r3, [pc, #428]	; (8001fc4 <processData+0x224>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d120      	bne.n	8001e60 <processData+0xc0>
		Delay_Set_Params(knob1, knob2);
 8001e1e:	edd7 0a00 	vldr	s1, [r7]
 8001e22:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e26:	f7ff f8cf 	bl	8000fc8 <Delay_Set_Params>
		for(int i = 0; i < DATA_SIZE; i++) {
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	e013      	b.n	8001e58 <processData+0xb8>
			 outBuffPtr[i] = Delay_Process(inBuffPtr[i]);
 8001e30:	4b65      	ldr	r3, [pc, #404]	; (8001fc8 <processData+0x228>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	b299      	uxth	r1, r3
 8001e3e:	4b63      	ldr	r3, [pc, #396]	; (8001fcc <processData+0x22c>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	18d4      	adds	r4, r2, r3
 8001e48:	4608      	mov	r0, r1
 8001e4a:	f7ff f841 	bl	8000ed0 <Delay_Process>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	8023      	strh	r3, [r4, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	3301      	adds	r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2bff      	cmp	r3, #255	; 0xff
 8001e5c:	dde8      	ble.n	8001e30 <processData+0x90>
 8001e5e:	e0a2      	b.n	8001fa6 <processData+0x206>
		}
	} else if(Is_Tremolo()) {
 8001e60:	f7ff ff66 	bl	8001d30 <Is_Tremolo>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d057      	beq.n	8001f1a <processData+0x17a>
		Init_Tremolo_Waveform();
 8001e6a:	f7ff ff7b 	bl	8001d64 <Init_Tremolo_Waveform>

		static float in, out;
		for(int i = 0; i < DATA_SIZE; i++) {
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	e04e      	b.n	8001f12 <processData+0x172>
			in = INT16_TO_FLOAT * inBuffPtr[i];
 8001e74:	4b54      	ldr	r3, [pc, #336]	; (8001fc8 <processData+0x228>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e8a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001fd0 <processData+0x230>
 8001e8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e92:	4b50      	ldr	r3, [pc, #320]	; (8001fd4 <processData+0x234>)
 8001e94:	edc3 7a00 	vstr	s15, [r3]
			if(in > 1.0f) {
 8001e98:	4b4e      	ldr	r3, [pc, #312]	; (8001fd4 <processData+0x234>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eaa:	dd09      	ble.n	8001ec0 <processData+0x120>
				in -= 2.0f;
 8001eac:	4b49      	ldr	r3, [pc, #292]	; (8001fd4 <processData+0x234>)
 8001eae:	edd3 7a00 	vldr	s15, [r3]
 8001eb2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001eb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001eba:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <processData+0x234>)
 8001ebc:	edc3 7a00 	vstr	s15, [r3]
			}
			out = Tremolo_Process(in, knob1, knob2) * 1.4f;
 8001ec0:	4b44      	ldr	r3, [pc, #272]	; (8001fd4 <processData+0x234>)
 8001ec2:	edd3 7a00 	vldr	s15, [r3]
 8001ec6:	ed97 1a00 	vldr	s2, [r7]
 8001eca:	edd7 0a01 	vldr	s1, [r7, #4]
 8001ece:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed2:	f7ff fa6d 	bl	80013b0 <Tremolo_Process>
 8001ed6:	eef0 7a40 	vmov.f32	s15, s0
 8001eda:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001fd8 <processData+0x238>
 8001ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee2:	4b3e      	ldr	r3, [pc, #248]	; (8001fdc <processData+0x23c>)
 8001ee4:	edc3 7a00 	vstr	s15, [r3]
			outBuffPtr[i] = (uint16_t) (out * 32768.0f);
 8001ee8:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <processData+0x23c>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001fe0 <processData+0x240>
 8001ef2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef6:	4b35      	ldr	r3, [pc, #212]	; (8001fcc <processData+0x22c>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f04:	ee17 2a90 	vmov	r2, s15
 8001f08:	b292      	uxth	r2, r2
 8001f0a:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2bff      	cmp	r3, #255	; 0xff
 8001f16:	ddad      	ble.n	8001e74 <processData+0xd4>
 8001f18:	e045      	b.n	8001fa6 <processData+0x206>
		}
	} else if(currentEffect == ChorusEf) {
 8001f1a:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <processData+0x224>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b05      	cmp	r3, #5
 8001f20:	d141      	bne.n	8001fa6 <processData+0x206>
		Chorus_Set_Params(knob1);
 8001f22:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f26:	f7fe ff07 	bl	8000d38 <Chorus_Set_Params>
		static float in, out;
		for(int i = 0; i < DATA_SIZE; i++) {
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	e037      	b.n	8001fa0 <processData+0x200>
//			if(in > 1.0f) {
//				in -= 2.0f;
//			}
			in = INT16_TO_FLOAT * inBuffPtr[i];
 8001f30:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <processData+0x228>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f46:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001fd0 <processData+0x230>
 8001f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f4e:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <processData+0x244>)
 8001f50:	edc3 7a00 	vstr	s15, [r3]
			out = in+Chorus_Process(in);
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <processData+0x244>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f5e:	f7fe fe0d 	bl	8000b7c <Chorus_Process>
 8001f62:	eeb0 7a40 	vmov.f32	s14, s0
 8001f66:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <processData+0x244>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <processData+0x248>)
 8001f72:	edc3 7a00 	vstr	s15, [r3]
			outBuffPtr[i] = (uint16_t) (out * 32768.0f);
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <processData+0x248>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001fe0 <processData+0x240>
 8001f80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <processData+0x22c>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f92:	ee17 2a90 	vmov	r2, s15
 8001f96:	b292      	uxth	r2, r2
 8001f98:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2bff      	cmp	r3, #255	; 0xff
 8001fa4:	ddc4      	ble.n	8001f30 <processData+0x190>
//		out = Flanger_Process(in) * 1.4f;
//		outBuffPtr[i] = (uint16_t) (out * 32768.0f);
//	}


	dataReady = 0;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <processData+0x24c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
 8001fac:	e000      	b.n	8001fb0 <processData+0x210>
	if(effectReady == 0) return;
 8001fae:	bf00      	nop
}
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	24000000 	.word	0x24000000
 8001fbc:	24000af4 	.word	0x24000af4
 8001fc0:	457ff000 	.word	0x457ff000
 8001fc4:	24000001 	.word	0x24000001
 8001fc8:	24000afc 	.word	0x24000afc
 8001fcc:	24000b00 	.word	0x24000b00
 8001fd0:	38000000 	.word	0x38000000
 8001fd4:	24000b08 	.word	0x24000b08
 8001fd8:	3fb33333 	.word	0x3fb33333
 8001fdc:	24000b0c 	.word	0x24000b0c
 8001fe0:	47000000 	.word	0x47000000
 8001fe4:	24000b10 	.word	0x24000b10
 8001fe8:	24000b14 	.word	0x24000b14
 8001fec:	24000b04 	.word	0x24000b04

08001ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ff6:	f000 fc0d 	bl	8002814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ffa:	f000 f84d 	bl	8002098 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001ffe:	f000 f8c7 	bl	8002190 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002002:	f7ff fd75 	bl	8001af0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002006:	f000 fb21 	bl	800264c <MX_USART3_UART_Init>
  MX_DMA_Init();
 800200a:	f7ff fd41 	bl	8001a90 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 800200e:	f000 fbcf 	bl	80027b0 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 8002012:	f7ff fa5d 	bl	80014d0 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002016:	f000 faa9 	bl	800256c <MX_TIM6_Init>
  MX_DAC1_Init();
 800201a:	f7ff fc8d 	bl	8001938 <MX_DAC1_Init>
  MX_ADC2_Init();
 800201e:	f7ff fad1 	bl	80015c4 <MX_ADC2_Init>
  MX_TIM1_Init();
 8002022:	f000 fa4f 	bl	80024c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8002026:	4812      	ldr	r0, [pc, #72]	; (8002070 <main+0x80>)
 8002028:	f007 fe54 	bl	8009cd4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);
 800202c:	4811      	ldr	r0, [pc, #68]	; (8002074 <main+0x84>)
 800202e:	f007 fe51 	bl	8009cd4 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcData, BUFFER_SIZE);
 8002032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002036:	4910      	ldr	r1, [pc, #64]	; (8002078 <main+0x88>)
 8002038:	4810      	ldr	r0, [pc, #64]	; (800207c <main+0x8c>)
 800203a:	f000 ffe3 	bl	8003004 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) dacData, BUFFER_SIZE, DAC_ALIGN_12B_R);
 800203e:	2300      	movs	r3, #0
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002046:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <main+0x90>)
 8002048:	2100      	movs	r1, #0
 800204a:	480e      	ldr	r0, [pc, #56]	; (8002084 <main+0x94>)
 800204c:	f001 ff4e 	bl	8003eec <HAL_DAC_Start_DMA>

//  Delay_Init(SAMPLE_RATE);
  Chorus_Init(SAMPLE_RATE);
 8002050:	480d      	ldr	r0, [pc, #52]	; (8002088 <main+0x98>)
 8002052:	f7fe fc8b 	bl	800096c <Chorus_Init>
//  Tremolo_Init(SAMPLE_RATE);
//  Flanger_Init();
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2Data, 3);
 8002056:	2203      	movs	r2, #3
 8002058:	490c      	ldr	r1, [pc, #48]	; (800208c <main+0x9c>)
 800205a:	480d      	ldr	r0, [pc, #52]	; (8002090 <main+0xa0>)
 800205c:	f000 ffd2 	bl	8003004 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(dataReady) {
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <main+0xa4>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0fb      	beq.n	8002060 <main+0x70>
		  processData();
 8002068:	f7ff fe9a 	bl	8001da0 <processData>
	  if(dataReady) {
 800206c:	e7f8      	b.n	8002060 <main+0x70>
 800206e:	bf00      	nop
 8002070:	24000b1c 	.word	0x24000b1c
 8002074:	24000b68 	.word	0x24000b68
 8002078:	240002f4 	.word	0x240002f4
 800207c:	240000ac 	.word	0x240000ac
 8002080:	240006f4 	.word	0x240006f4
 8002084:	24000268 	.word	0x24000268
 8002088:	00017715 	.word	0x00017715
 800208c:	24000af4 	.word	0x24000af4
 8002090:	24000110 	.word	0x24000110
 8002094:	24000b04 	.word	0x24000b04

08002098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b09c      	sub	sp, #112	; 0x70
 800209c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800209e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a2:	224c      	movs	r2, #76	; 0x4c
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f009 faf0 	bl	800b68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	2220      	movs	r2, #32
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f009 faea 	bl	800b68c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80020b8:	2004      	movs	r0, #4
 80020ba:	f004 fd1b 	bl	8006af4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80020be:	2300      	movs	r3, #0
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	4b31      	ldr	r3, [pc, #196]	; (8002188 <SystemClock_Config+0xf0>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	4a30      	ldr	r2, [pc, #192]	; (8002188 <SystemClock_Config+0xf0>)
 80020c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020cc:	6193      	str	r3, [r2, #24]
 80020ce:	4b2e      	ldr	r3, [pc, #184]	; (8002188 <SystemClock_Config+0xf0>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80020da:	bf00      	nop
 80020dc:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <SystemClock_Config+0xf0>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e8:	d1f8      	bne.n	80020dc <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80020ea:	4b28      	ldr	r3, [pc, #160]	; (800218c <SystemClock_Config+0xf4>)
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	4a26      	ldr	r2, [pc, #152]	; (800218c <SystemClock_Config+0xf4>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80020fa:	2329      	movs	r3, #41	; 0x29
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80020fe:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002104:	2301      	movs	r3, #1
 8002106:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002108:	2301      	movs	r3, #1
 800210a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800210c:	2302      	movs	r3, #2
 800210e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002110:	2302      	movs	r3, #2
 8002112:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002114:	2301      	movs	r3, #1
 8002116:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8002118:	2346      	movs	r3, #70	; 0x46
 800211a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800211c:	2302      	movs	r3, #2
 800211e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002120:	2304      	movs	r3, #4
 8002122:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002124:	2302      	movs	r3, #2
 8002126:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002128:	230c      	movs	r3, #12
 800212a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800212c:	2300      	movs	r3, #0
 800212e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002138:	4618      	mov	r0, r3
 800213a:	f004 fd35 	bl	8006ba8 <HAL_RCC_OscConfig>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002144:	f000 f8a0 	bl	8002288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002148:	233f      	movs	r3, #63	; 0x3f
 800214a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800214c:	2303      	movs	r3, #3
 800214e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002158:	2340      	movs	r3, #64	; 0x40
 800215a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800215c:	2340      	movs	r3, #64	; 0x40
 800215e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002164:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002166:	2340      	movs	r3, #64	; 0x40
 8002168:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	2107      	movs	r1, #7
 800216e:	4618      	mov	r0, r3
 8002170:	f005 f91e 	bl	80073b0 <HAL_RCC_ClockConfig>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800217a:	f000 f885 	bl	8002288 <Error_Handler>
  }
}
 800217e:	bf00      	nop
 8002180:	3770      	adds	r7, #112	; 0x70
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	58024800 	.word	0x58024800
 800218c:	58024400 	.word	0x58024400

08002190 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b0ae      	sub	sp, #184	; 0xb8
 8002194:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002196:	463b      	mov	r3, r7
 8002198:	22b8      	movs	r2, #184	; 0xb8
 800219a:	2100      	movs	r1, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f009 fa75 	bl	800b68c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80021a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80021a6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80021a8:	2301      	movs	r3, #1
 80021aa:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80021ac:	2310      	movs	r3, #16
 80021ae:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80021b0:	2301      	movs	r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80021b4:	2302      	movs	r3, #2
 80021b6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80021b8:	2302      	movs	r3, #2
 80021ba:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80021bc:	23c0      	movs	r3, #192	; 0xc0
 80021be:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ce:	463b      	mov	r3, r7
 80021d0:	4618      	mov	r0, r3
 80021d2:	f005 fc79 	bl	8007ac8 <HAL_RCCEx_PeriphCLKConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80021dc:	f000 f854 	bl	8002288 <Error_Handler>
  }
}
 80021e0:	bf00      	nop
 80021e2:	37b8      	adds	r7, #184	; 0xb8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == GPIO_PIN_13) {
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f8:	d13b      	bne.n	8002272 <HAL_GPIO_EXTI_Callback+0x8a>
		effectReady = 0;
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_GPIO_EXTI_Callback+0x94>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]

		if(currentEffect == ChorusEf) {
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <HAL_GPIO_EXTI_Callback+0x98>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b05      	cmp	r3, #5
 8002206:	d105      	bne.n	8002214 <HAL_GPIO_EXTI_Callback+0x2c>
			currentEffect = 0;
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_GPIO_EXTI_Callback+0x98>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
			Chorus_Free();
 800220e:	f7fe fded 	bl	8000dec <Chorus_Free>
 8002212:	e00c      	b.n	800222e <HAL_GPIO_EXTI_Callback+0x46>
		} else if(currentEffect == DelayEf) {
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_GPIO_EXTI_Callback+0x98>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d102      	bne.n	8002222 <HAL_GPIO_EXTI_Callback+0x3a>
			Delay_Free();
 800221c:	f7fe ffaa 	bl	8001174 <Delay_Free>
 8002220:	e005      	b.n	800222e <HAL_GPIO_EXTI_Callback+0x46>
		} else if(currentEffect == 4) {
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_GPIO_EXTI_Callback+0x98>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b04      	cmp	r3, #4
 8002228:	d101      	bne.n	800222e <HAL_GPIO_EXTI_Callback+0x46>
			Tremolo_Free();
 800222a:	f7ff f93f 	bl	80014ac <Tremolo_Free>
		}

		currentEffect++;
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <HAL_GPIO_EXTI_Callback+0x98>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	3301      	adds	r3, #1
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_GPIO_EXTI_Callback+0x98>)
 8002238:	701a      	strb	r2, [r3, #0]

		if(currentEffect == ChorusEf) {
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_GPIO_EXTI_Callback+0x98>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b05      	cmp	r3, #5
 8002240:	d103      	bne.n	800224a <HAL_GPIO_EXTI_Callback+0x62>
			Chorus_Init(SAMPLE_RATE);
 8002242:	4810      	ldr	r0, [pc, #64]	; (8002284 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002244:	f7fe fb92 	bl	800096c <Chorus_Init>
 8002248:	e00f      	b.n	800226a <HAL_GPIO_EXTI_Callback+0x82>
		}
		else if(currentEffect == DelayEf) {
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_GPIO_EXTI_Callback+0x98>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d103      	bne.n	800225a <HAL_GPIO_EXTI_Callback+0x72>
			Delay_Init(SAMPLE_RATE);
 8002252:	480c      	ldr	r0, [pc, #48]	; (8002284 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002254:	f7fe fde2 	bl	8000e1c <Delay_Init>
 8002258:	e007      	b.n	800226a <HAL_GPIO_EXTI_Callback+0x82>
		} else if(Is_Tremolo()) {
 800225a:	f7ff fd69 	bl	8001d30 <Is_Tremolo>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <HAL_GPIO_EXTI_Callback+0x82>
			Tremolo_Init(SAMPLE_RATE);
 8002264:	4807      	ldr	r0, [pc, #28]	; (8002284 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002266:	f7ff f871 	bl	800134c <Tremolo_Init>
		}

		effectReady = 1;
 800226a:	4b04      	ldr	r3, [pc, #16]	; (800227c <HAL_GPIO_EXTI_Callback+0x94>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
	} else {
		__NOP();
	}
}
 8002270:	e000      	b.n	8002274 <HAL_GPIO_EXTI_Callback+0x8c>
		__NOP();
 8002272:	bf00      	nop
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	24000000 	.word	0x24000000
 8002280:	24000001 	.word	0x24000001
 8002284:	00017715 	.word	0x00017715

08002288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002290:	e7fe      	b.n	8002290 <Error_Handler+0x8>
	...

08002294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_MspInit+0x30>)
 800229c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80022a0:	4a08      	ldr	r2, [pc, #32]	; (80022c4 <HAL_MspInit+0x30>)
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_MspInit+0x30>)
 80022ac:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	58024400 	.word	0x58024400

080022c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022cc:	e7fe      	b.n	80022cc <NMI_Handler+0x4>

080022ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d2:	e7fe      	b.n	80022d2 <HardFault_Handler+0x4>

080022d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d8:	e7fe      	b.n	80022d8 <MemManage_Handler+0x4>

080022da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022de:	e7fe      	b.n	80022de <BusFault_Handler+0x4>

080022e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <UsageFault_Handler+0x4>

080022e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002314:	f000 faf0 	bl	80028f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}

0800231c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <DMA1_Stream0_IRQHandler+0x10>)
 8002322:	f002 fe81 	bl	8005028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	24000174 	.word	0x24000174

08002330 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002334:	4802      	ldr	r0, [pc, #8]	; (8002340 <DMA1_Stream1_IRQHandler+0x10>)
 8002336:	f002 fe77 	bl	8005028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2400027c 	.word	0x2400027c

08002344 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <DMA1_Stream2_IRQHandler+0x10>)
 800234a:	f002 fe6d 	bl	8005028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	240001ec 	.word	0x240001ec

08002358 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800235c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002360:	f004 fbad 	bl	8006abe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <_sbrk+0x5c>)
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <_sbrk+0x60>)
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <_sbrk+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <_sbrk+0x64>)
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <_sbrk+0x68>)
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	429a      	cmp	r2, r3
 8002396:	d207      	bcs.n	80023a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002398:	f009 f93e 	bl	800b618 <__errno>
 800239c:	4603      	mov	r3, r0
 800239e:	220c      	movs	r2, #12
 80023a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	e009      	b.n	80023bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <_sbrk+0x64>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	4a05      	ldr	r2, [pc, #20]	; (80023cc <_sbrk+0x64>)
 80023b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ba:	68fb      	ldr	r3, [r7, #12]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	24100000 	.word	0x24100000
 80023c8:	00000400 	.word	0x00000400
 80023cc:	24000b18 	.word	0x24000b18
 80023d0:	24000c58 	.word	0x24000c58

080023d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023d8:	4b32      	ldr	r3, [pc, #200]	; (80024a4 <SystemInit+0xd0>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	4a31      	ldr	r2, [pc, #196]	; (80024a4 <SystemInit+0xd0>)
 80023e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023e8:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <SystemInit+0xd4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d807      	bhi.n	8002404 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023f4:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <SystemInit+0xd4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 030f 	bic.w	r3, r3, #15
 80023fc:	4a2a      	ldr	r2, [pc, #168]	; (80024a8 <SystemInit+0xd4>)
 80023fe:	f043 0303 	orr.w	r3, r3, #3
 8002402:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002404:	4b29      	ldr	r3, [pc, #164]	; (80024ac <SystemInit+0xd8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a28      	ldr	r2, [pc, #160]	; (80024ac <SystemInit+0xd8>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002410:	4b26      	ldr	r3, [pc, #152]	; (80024ac <SystemInit+0xd8>)
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002416:	4b25      	ldr	r3, [pc, #148]	; (80024ac <SystemInit+0xd8>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4924      	ldr	r1, [pc, #144]	; (80024ac <SystemInit+0xd8>)
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <SystemInit+0xdc>)
 800241e:	4013      	ands	r3, r2
 8002420:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002422:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <SystemInit+0xd4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b00      	cmp	r3, #0
 800242c:	d007      	beq.n	800243e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800242e:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <SystemInit+0xd4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 030f 	bic.w	r3, r3, #15
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <SystemInit+0xd4>)
 8002438:	f043 0303 	orr.w	r3, r3, #3
 800243c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800243e:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <SystemInit+0xd8>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <SystemInit+0xd8>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <SystemInit+0xd8>)
 800244c:	2200      	movs	r2, #0
 800244e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002450:	4b16      	ldr	r3, [pc, #88]	; (80024ac <SystemInit+0xd8>)
 8002452:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <SystemInit+0xe0>)
 8002454:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <SystemInit+0xd8>)
 8002458:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <SystemInit+0xe4>)
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <SystemInit+0xd8>)
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <SystemInit+0xe8>)
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <SystemInit+0xd8>)
 8002464:	2200      	movs	r2, #0
 8002466:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <SystemInit+0xd8>)
 800246a:	4a14      	ldr	r2, [pc, #80]	; (80024bc <SystemInit+0xe8>)
 800246c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800246e:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <SystemInit+0xd8>)
 8002470:	2200      	movs	r2, #0
 8002472:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <SystemInit+0xd8>)
 8002476:	4a11      	ldr	r2, [pc, #68]	; (80024bc <SystemInit+0xe8>)
 8002478:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800247a:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <SystemInit+0xd8>)
 800247c:	2200      	movs	r2, #0
 800247e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <SystemInit+0xd8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a09      	ldr	r2, [pc, #36]	; (80024ac <SystemInit+0xd8>)
 8002486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800248c:	4b07      	ldr	r3, [pc, #28]	; (80024ac <SystemInit+0xd8>)
 800248e:	2200      	movs	r2, #0
 8002490:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <SystemInit+0xec>)
 8002494:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002498:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00
 80024a8:	52002000 	.word	0x52002000
 80024ac:	58024400 	.word	0x58024400
 80024b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80024b4:	02020200 	.word	0x02020200
 80024b8:	01ff0000 	.word	0x01ff0000
 80024bc:	01010280 	.word	0x01010280
 80024c0:	52004000 	.word	0x52004000

080024c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ca:	f107 0310 	add.w	r3, r7, #16
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <MX_TIM1_Init+0xa0>)
 80024e4:	4a20      	ldr	r2, [pc, #128]	; (8002568 <MX_TIM1_Init+0xa4>)
 80024e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <MX_TIM1_Init+0xa0>)
 80024ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f0:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <MX_TIM1_Init+0xa0>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2800-1;
 80024f6:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <MX_TIM1_Init+0xa0>)
 80024f8:	f640 22ef 	movw	r2, #2799	; 0xaef
 80024fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024fe:	4b19      	ldr	r3, [pc, #100]	; (8002564 <MX_TIM1_Init+0xa0>)
 8002500:	2200      	movs	r2, #0
 8002502:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002504:	4b17      	ldr	r3, [pc, #92]	; (8002564 <MX_TIM1_Init+0xa0>)
 8002506:	2200      	movs	r2, #0
 8002508:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800250a:	4b16      	ldr	r3, [pc, #88]	; (8002564 <MX_TIM1_Init+0xa0>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002510:	4814      	ldr	r0, [pc, #80]	; (8002564 <MX_TIM1_Init+0xa0>)
 8002512:	f007 fb87 	bl	8009c24 <HAL_TIM_Base_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800251c:	f7ff feb4 	bl	8002288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002524:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002526:	f107 0310 	add.w	r3, r7, #16
 800252a:	4619      	mov	r1, r3
 800252c:	480d      	ldr	r0, [pc, #52]	; (8002564 <MX_TIM1_Init+0xa0>)
 800252e:	f007 fc41 	bl	8009db4 <HAL_TIM_ConfigClockSource>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002538:	f7ff fea6 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800253c:	2320      	movs	r3, #32
 800253e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002548:	1d3b      	adds	r3, r7, #4
 800254a:	4619      	mov	r1, r3
 800254c:	4805      	ldr	r0, [pc, #20]	; (8002564 <MX_TIM1_Init+0xa0>)
 800254e:	f007 fe61 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002558:	f7ff fe96 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800255c:	bf00      	nop
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	24000b1c 	.word	0x24000b1c
 8002568:	40010000 	.word	0x40010000

0800256c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <MX_TIM6_Init+0x64>)
 800257e:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <MX_TIM6_Init+0x68>)
 8002580:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <MX_TIM6_Init+0x64>)
 8002584:	2200      	movs	r2, #0
 8002586:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <MX_TIM6_Init+0x64>)
 800258a:	2200      	movs	r2, #0
 800258c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2916-1;
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <MX_TIM6_Init+0x64>)
 8002590:	f640 3263 	movw	r2, #2915	; 0xb63
 8002594:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002596:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <MX_TIM6_Init+0x64>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800259c:	480c      	ldr	r0, [pc, #48]	; (80025d0 <MX_TIM6_Init+0x64>)
 800259e:	f007 fb41 	bl	8009c24 <HAL_TIM_Base_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80025a8:	f7ff fe6e 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025ac:	2320      	movs	r3, #32
 80025ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_TIM6_Init+0x64>)
 80025ba:	f007 fe2b 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80025c4:	f7ff fe60 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	24000b68 	.word	0x24000b68
 80025d4:	40001000 	.word	0x40001000

080025d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a16      	ldr	r2, [pc, #88]	; (8002640 <HAL_TIM_Base_MspInit+0x68>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10f      	bne.n	800260a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <HAL_TIM_Base_MspInit+0x6c>)
 80025ec:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <HAL_TIM_Base_MspInit+0x6c>)
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_TIM_Base_MspInit+0x6c>)
 80025fc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002608:	e013      	b.n	8002632 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM6)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <HAL_TIM_Base_MspInit+0x70>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d10e      	bne.n	8002632 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_TIM_Base_MspInit+0x6c>)
 8002616:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <HAL_TIM_Base_MspInit+0x6c>)
 800261c:	f043 0310 	orr.w	r3, r3, #16
 8002620:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <HAL_TIM_Base_MspInit+0x6c>)
 8002626:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40010000 	.word	0x40010000
 8002644:	58024400 	.word	0x58024400
 8002648:	40001000 	.word	0x40001000

0800264c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002650:	4b22      	ldr	r3, [pc, #136]	; (80026dc <MX_USART3_UART_Init+0x90>)
 8002652:	4a23      	ldr	r2, [pc, #140]	; (80026e0 <MX_USART3_UART_Init+0x94>)
 8002654:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <MX_USART3_UART_Init+0x90>)
 8002658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800265c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800265e:	4b1f      	ldr	r3, [pc, #124]	; (80026dc <MX_USART3_UART_Init+0x90>)
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <MX_USART3_UART_Init+0x90>)
 8002666:	2200      	movs	r2, #0
 8002668:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <MX_USART3_UART_Init+0x90>)
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <MX_USART3_UART_Init+0x90>)
 8002672:	220c      	movs	r2, #12
 8002674:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002676:	4b19      	ldr	r3, [pc, #100]	; (80026dc <MX_USART3_UART_Init+0x90>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800267c:	4b17      	ldr	r3, [pc, #92]	; (80026dc <MX_USART3_UART_Init+0x90>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002682:	4b16      	ldr	r3, [pc, #88]	; (80026dc <MX_USART3_UART_Init+0x90>)
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <MX_USART3_UART_Init+0x90>)
 800268a:	2200      	movs	r2, #0
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <MX_USART3_UART_Init+0x90>)
 8002690:	2200      	movs	r2, #0
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002694:	4811      	ldr	r0, [pc, #68]	; (80026dc <MX_USART3_UART_Init+0x90>)
 8002696:	f007 fe4b 	bl	800a330 <HAL_UART_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80026a0:	f7ff fdf2 	bl	8002288 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026a4:	2100      	movs	r1, #0
 80026a6:	480d      	ldr	r0, [pc, #52]	; (80026dc <MX_USART3_UART_Init+0x90>)
 80026a8:	f008 feec 	bl	800b484 <HAL_UARTEx_SetTxFifoThreshold>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80026b2:	f7ff fde9 	bl	8002288 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026b6:	2100      	movs	r1, #0
 80026b8:	4808      	ldr	r0, [pc, #32]	; (80026dc <MX_USART3_UART_Init+0x90>)
 80026ba:	f008 ff21 	bl	800b500 <HAL_UARTEx_SetRxFifoThreshold>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80026c4:	f7ff fde0 	bl	8002288 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80026c8:	4804      	ldr	r0, [pc, #16]	; (80026dc <MX_USART3_UART_Init+0x90>)
 80026ca:	f008 fea2 	bl	800b412 <HAL_UARTEx_DisableFifoMode>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80026d4:	f7ff fdd8 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	24000bb4 	.word	0x24000bb4
 80026e0:	40004800 	.word	0x40004800

080026e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b0b8      	sub	sp, #224	; 0xe0
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	22b8      	movs	r2, #184	; 0xb8
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f008 ffc1 	bl	800b68c <memset>
  if(uartHandle->Instance==USART3)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a25      	ldr	r2, [pc, #148]	; (80027a4 <HAL_UART_MspInit+0xc0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d142      	bne.n	800279a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002714:	2302      	movs	r3, #2
 8002716:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800271e:	f107 0314 	add.w	r3, r7, #20
 8002722:	4618      	mov	r0, r3
 8002724:	f005 f9d0 	bl	8007ac8 <HAL_RCCEx_PeriphCLKConfig>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800272e:	f7ff fdab 	bl	8002288 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_UART_MspInit+0xc4>)
 8002734:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002738:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <HAL_UART_MspInit+0xc4>)
 800273a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002742:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_UART_MspInit+0xc4>)
 8002744:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002750:	4b15      	ldr	r3, [pc, #84]	; (80027a8 <HAL_UART_MspInit+0xc4>)
 8002752:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002756:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <HAL_UART_MspInit+0xc4>)
 8002758:	f043 0308 	orr.w	r3, r3, #8
 800275c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <HAL_UART_MspInit+0xc4>)
 8002762:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800276e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002788:	2307      	movs	r3, #7
 800278a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800278e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002792:	4619      	mov	r1, r3
 8002794:	4805      	ldr	r0, [pc, #20]	; (80027ac <HAL_UART_MspInit+0xc8>)
 8002796:	f003 ffc9 	bl	800672c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800279a:	bf00      	nop
 800279c:	37e0      	adds	r7, #224	; 0xe0
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40004800 	.word	0x40004800
 80027a8:	58024400 	.word	0x58024400
 80027ac:	58020c00 	.word	0x58020c00

080027b0 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027c4:	f7ff fe06 	bl	80023d4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027c8:	480c      	ldr	r0, [pc, #48]	; (80027fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ca:	490d      	ldr	r1, [pc, #52]	; (8002800 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027cc:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027d0:	e002      	b.n	80027d8 <LoopCopyDataInit>

080027d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027d6:	3304      	adds	r3, #4

080027d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80027d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027dc:	d3f9      	bcc.n	80027d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027e0:	4c0a      	ldr	r4, [pc, #40]	; (800280c <LoopFillZerobss+0x22>)
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e4:	e001      	b.n	80027ea <LoopFillZerobss>

080027e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e8:	3204      	adds	r2, #4

080027ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027ec:	d3fb      	bcc.n	80027e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80027ee:	f008 ff19 	bl	800b624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027f2:	f7ff fbfd 	bl	8001ff0 <main>
  bx  lr
 80027f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027f8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80027fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002800:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8002804:	0800bc80 	.word	0x0800bc80
  ldr r2, =_sbss
 8002808:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800280c:	24000c58 	.word	0x24000c58

08002810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002810:	e7fe      	b.n	8002810 <ADC_IRQHandler>
	...

08002814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800281a:	2003      	movs	r0, #3
 800281c:	f001 fb04 	bl	8003e28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002820:	f004 ff7c 	bl	800771c <HAL_RCC_GetSysClockFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_Init+0x68>)
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	4913      	ldr	r1, [pc, #76]	; (8002880 <HAL_Init+0x6c>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
 800283c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800283e:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_Init+0x68>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <HAL_Init+0x6c>)
 8002848:	5cd3      	ldrb	r3, [r2, r3]
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
 8002854:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <HAL_Init+0x70>)
 8002856:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002858:	4a0b      	ldr	r2, [pc, #44]	; (8002888 <HAL_Init+0x74>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800285e:	2000      	movs	r0, #0
 8002860:	f000 f814 	bl	800288c <HAL_InitTick>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e002      	b.n	8002874 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800286e:	f7ff fd11 	bl	8002294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	58024400 	.word	0x58024400
 8002880:	0800baf0 	.word	0x0800baf0
 8002884:	24000008 	.word	0x24000008
 8002888:	24000004 	.word	0x24000004

0800288c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002894:	4b15      	ldr	r3, [pc, #84]	; (80028ec <HAL_InitTick+0x60>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e021      	b.n	80028e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <HAL_InitTick+0x64>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_InitTick+0x60>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	f001 fae9 	bl	8003e8e <HAL_SYSTICK_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00e      	b.n	80028e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0f      	cmp	r3, #15
 80028ca:	d80a      	bhi.n	80028e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028cc:	2200      	movs	r2, #0
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	f001 fab3 	bl	8003e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d8:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <HAL_InitTick+0x68>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	24000010 	.word	0x24000010
 80028f0:	24000004 	.word	0x24000004
 80028f4:	2400000c 	.word	0x2400000c

080028f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x20>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x24>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4413      	add	r3, r2
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_IncTick+0x24>)
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	24000010 	.word	0x24000010
 800291c:	24000c44 	.word	0x24000c44

08002920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return uwTick;
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_GetTick+0x14>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	24000c44 	.word	0x24000c44

08002938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff ffee 	bl	8002920 <HAL_GetTick>
 8002944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d005      	beq.n	800295e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_Delay+0x44>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800295e:	bf00      	nop
 8002960:	f7ff ffde 	bl	8002920 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	429a      	cmp	r2, r3
 800296e:	d8f7      	bhi.n	8002960 <HAL_Delay+0x28>
  {
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	24000010 	.word	0x24000010

08002980 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	609a      	str	r2, [r3, #8]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	609a      	str	r2, [r3, #8]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3360      	adds	r3, #96	; 0x60
 80029fa:	461a      	mov	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	430b      	orrs	r3, r1
 8002a16:	431a      	orrs	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	611a      	str	r2, [r3, #16]
}
 8002a4e:	bf00      	nop
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b087      	sub	sp, #28
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	3360      	adds	r3, #96	; 0x60
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	601a      	str	r2, [r3, #0]
  }
}
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b087      	sub	sp, #28
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3330      	adds	r3, #48	; 0x30
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	0a1b      	lsrs	r3, r3, #8
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	4413      	add	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	211f      	movs	r1, #31
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	401a      	ands	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	f003 011f 	and.w	r1, r3, #31
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	431a      	orrs	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f023 0203 	bic.w	r2, r3, #3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	60da      	str	r2, [r3, #12]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	3314      	adds	r3, #20
 8002b44:	461a      	mov	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	0e5b      	lsrs	r3, r3, #25
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	4413      	add	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	0d1b      	lsrs	r3, r3, #20
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	2107      	movs	r1, #7
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	401a      	ands	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	0d1b      	lsrs	r3, r3, #20
 8002b6e:	f003 031f 	and.w	r3, r3, #31
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f003 0318 	and.w	r3, r3, #24
 8002bae:	4908      	ldr	r1, [pc, #32]	; (8002bd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bb0:	40d9      	lsrs	r1, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	000fffff 	.word	0x000fffff

08002bd4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 031f 	and.w	r3, r3, #31
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	4b04      	ldr	r3, [pc, #16]	; (8002c10 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6093      	str	r3, [r2, #8]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	5fffffc0 	.word	0x5fffffc0

08002c14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c28:	d101      	bne.n	8002c2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <LL_ADC_EnableInternalRegulator+0x24>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	6fffffc0 	.word	0x6fffffc0

08002c64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c78:	d101      	bne.n	8002c7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <LL_ADC_Enable+0x24>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	f043 0201 	orr.w	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	7fffffc0 	.word	0x7fffffc0

08002cb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <LL_ADC_IsEnabled+0x18>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <LL_ADC_IsEnabled+0x1a>
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <LL_ADC_REG_StartConversion+0x24>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	f043 0204 	orr.w	r2, r3, #4
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	7fffffc0 	.word	0x7fffffc0

08002d04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d101      	bne.n	8002d1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d101      	bne.n	8002d42 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e138      	b.n	8002fdc <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7fe fcab 	bl	80016d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff3f 	bl	8002c14 <LL_ADC_IsDeepPowerDownEnabled>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d004      	beq.n	8002da6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff25 	bl	8002bf0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff5a 	bl	8002c64 <LL_ADC_IsInternalRegulatorEnabled>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d114      	bne.n	8002de0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff3e 	bl	8002c3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dc0:	4b88      	ldr	r3, [pc, #544]	; (8002fe4 <HAL_ADC_Init+0x294>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	099b      	lsrs	r3, r3, #6
 8002dc6:	4a88      	ldr	r2, [pc, #544]	; (8002fe8 <HAL_ADC_Init+0x298>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	099b      	lsrs	r3, r3, #6
 8002dce:	3301      	adds	r3, #1
 8002dd0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dd2:	e002      	b.n	8002dda <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f9      	bne.n	8002dd4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff3d 	bl	8002c64 <LL_ADC_IsInternalRegulatorEnabled>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10d      	bne.n	8002e0c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df4:	f043 0210 	orr.w	r2, r3, #16
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	f043 0201 	orr.w	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff77 	bl	8002d04 <LL_ADC_REG_IsConversionOngoing>
 8002e16:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f040 80d2 	bne.w	8002fca <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f040 80ce 	bne.w	8002fca <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e32:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e36:	f043 0202 	orr.w	r2, r3, #2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff ff36 	bl	8002cb4 <LL_ADC_IsEnabled>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d110      	bne.n	8002e70 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e4e:	4867      	ldr	r0, [pc, #412]	; (8002fec <HAL_ADC_Init+0x29c>)
 8002e50:	f7ff ff30 	bl	8002cb4 <LL_ADC_IsEnabled>
 8002e54:	4604      	mov	r4, r0
 8002e56:	4866      	ldr	r0, [pc, #408]	; (8002ff0 <HAL_ADC_Init+0x2a0>)
 8002e58:	f7ff ff2c 	bl	8002cb4 <LL_ADC_IsEnabled>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4323      	orrs	r3, r4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d105      	bne.n	8002e70 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	4862      	ldr	r0, [pc, #392]	; (8002ff4 <HAL_ADC_Init+0x2a4>)
 8002e6c:	f7ff fd88 	bl	8002980 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	7d5b      	ldrb	r3, [r3, #21]
 8002e74:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e7a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002e80:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	7f1b      	ldrb	r3, [r3, #28]
 8002e86:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	7f1b      	ldrb	r3, [r3, #28]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d106      	bne.n	8002ea2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	045b      	lsls	r3, r3, #17
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	4b4c      	ldr	r3, [pc, #304]	; (8002ff8 <HAL_ADC_Init+0x2a8>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	69b9      	ldr	r1, [r7, #24]
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff14 	bl	8002d04 <LL_ADC_REG_IsConversionOngoing>
 8002edc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ff21 	bl	8002d2a <LL_ADC_INJ_IsConversionOngoing>
 8002ee8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d14a      	bne.n	8002f86 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d147      	bne.n	8002f86 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	7d1b      	ldrb	r3, [r3, #20]
 8002efa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <HAL_ADC_Init+0x2ac>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	69b9      	ldr	r1, [r7, #24]
 8002f14:	430b      	orrs	r3, r1
 8002f16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d11b      	bne.n	8002f5a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	4b34      	ldr	r3, [pc, #208]	; (8003000 <HAL_ADC_Init+0x2b0>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f36:	3a01      	subs	r2, #1
 8002f38:	0411      	lsls	r1, r2, #16
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f3e:	4311      	orrs	r1, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f44:	4311      	orrs	r1, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	611a      	str	r2, [r3, #16]
 8002f58:	e007      	b.n	8002f6a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691a      	ldr	r2, [r3, #16]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fcf3 	bl	800396c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	f023 010f 	bic.w	r1, r3, #15
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	1e5a      	subs	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa6:	e007      	b.n	8002fb8 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 020f 	bic.w	r2, r2, #15
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	f023 0303 	bic.w	r3, r3, #3
 8002fc0:	f043 0201 	orr.w	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	655a      	str	r2, [r3, #84]	; 0x54
 8002fc8:	e007      	b.n	8002fda <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	f043 0210 	orr.w	r2, r3, #16
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fda:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3724      	adds	r7, #36	; 0x24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd90      	pop	{r4, r7, pc}
 8002fe4:	24000004 	.word	0x24000004
 8002fe8:	053e2d63 	.word	0x053e2d63
 8002fec:	40022000 	.word	0x40022000
 8002ff0:	40022100 	.word	0x40022100
 8002ff4:	40022300 	.word	0x40022300
 8002ff8:	fff0c003 	.word	0xfff0c003
 8002ffc:	ffffbffc 	.word	0xffffbffc
 8003000:	fc00f81e 	.word	0xfc00f81e

08003004 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003010:	484f      	ldr	r0, [pc, #316]	; (8003150 <HAL_ADC_Start_DMA+0x14c>)
 8003012:	f7ff fddf 	bl	8002bd4 <LL_ADC_GetMultimode>
 8003016:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fe71 	bl	8002d04 <LL_ADC_REG_IsConversionOngoing>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	f040 808c 	bne.w	8003142 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_ADC_Start_DMA+0x34>
 8003034:	2302      	movs	r3, #2
 8003036:	e087      	b.n	8003148 <HAL_ADC_Start_DMA+0x144>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	2b05      	cmp	r3, #5
 800304a:	d002      	beq.n	8003052 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2b09      	cmp	r3, #9
 8003050:	d170      	bne.n	8003134 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fb7a 	bl	800374c <ADC_Enable>
 8003058:	4603      	mov	r3, r0
 800305a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d163      	bne.n	800312a <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003066:	4b3b      	ldr	r3, [pc, #236]	; (8003154 <HAL_ADC_Start_DMA+0x150>)
 8003068:	4013      	ands	r3, r2
 800306a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a38      	ldr	r2, [pc, #224]	; (8003158 <HAL_ADC_Start_DMA+0x154>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d002      	beq.n	8003082 <HAL_ADC_Start_DMA+0x7e>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	e000      	b.n	8003084 <HAL_ADC_Start_DMA+0x80>
 8003082:	4b36      	ldr	r3, [pc, #216]	; (800315c <HAL_ADC_Start_DMA+0x158>)
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	4293      	cmp	r3, r2
 800308a:	d002      	beq.n	8003092 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d105      	bne.n	800309e <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d006      	beq.n	80030b8 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	f023 0206 	bic.w	r2, r3, #6
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	659a      	str	r2, [r3, #88]	; 0x58
 80030b6:	e002      	b.n	80030be <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c2:	4a27      	ldr	r2, [pc, #156]	; (8003160 <HAL_ADC_Start_DMA+0x15c>)
 80030c4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ca:	4a26      	ldr	r2, [pc, #152]	; (8003164 <HAL_ADC_Start_DMA+0x160>)
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	4a25      	ldr	r2, [pc, #148]	; (8003168 <HAL_ADC_Start_DMA+0x164>)
 80030d4:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	221c      	movs	r2, #28
 80030dc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f042 0210 	orr.w	r2, r2, #16
 80030f4:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	4619      	mov	r1, r3
 8003100:	4610      	mov	r0, r2
 8003102:	f7ff fd04 	bl	8002b0e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3340      	adds	r3, #64	; 0x40
 8003110:	4619      	mov	r1, r3
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f001 fd1d 	bl	8004b54 <HAL_DMA_Start_IT>
 800311a:	4603      	mov	r3, r0
 800311c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff fdda 	bl	8002cdc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003128:	e00d      	b.n	8003146 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003132:	e008      	b.n	8003146 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003140:	e001      	b.n	8003146 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003142:	2302      	movs	r3, #2
 8003144:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003146:	7dfb      	ldrb	r3, [r7, #23]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40022300 	.word	0x40022300
 8003154:	fffff0fe 	.word	0xfffff0fe
 8003158:	40022100 	.word	0x40022100
 800315c:	40022000 	.word	0x40022000
 8003160:	08003845 	.word	0x08003845
 8003164:	0800391d 	.word	0x0800391d
 8003168:	08003939 	.word	0x08003939

0800316c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b0a1      	sub	sp, #132	; 0x84
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a9a      	ldr	r2, [pc, #616]	; (8003404 <HAL_ADC_ConfigChannel+0x284>)
 800319a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x2a>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e2bc      	b.n	8003724 <HAL_ADC_ConfigChannel+0x5a4>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fda4 	bl	8002d04 <LL_ADC_REG_IsConversionOngoing>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f040 82a1 	bne.w	8003706 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d108      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x62>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	0e9b      	lsrs	r3, r3, #26
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2201      	movs	r2, #1
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	e016      	b.n	8003210 <HAL_ADC_ConfigChannel+0x90>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031f2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80031f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80031fa:	2320      	movs	r3, #32
 80031fc:	e003      	b.n	8003206 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80031fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	2201      	movs	r2, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	69d1      	ldr	r1, [r2, #28]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	430b      	orrs	r3, r1
 800321c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6859      	ldr	r1, [r3, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	f7ff fc43 	bl	8002ab6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fd65 	bl	8002d04 <LL_ADC_REG_IsConversionOngoing>
 800323a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fd72 	bl	8002d2a <LL_ADC_INJ_IsConversionOngoing>
 8003246:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800324a:	2b00      	cmp	r3, #0
 800324c:	f040 80a0 	bne.w	8003390 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003252:	2b00      	cmp	r3, #0
 8003254:	f040 809c 	bne.w	8003390 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	6819      	ldr	r1, [r3, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	461a      	mov	r2, r3
 8003266:	f7ff fc65 	bl	8002b34 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10b      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x110>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	e00a      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x126>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d027      	beq.n	8003300 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	6919      	ldr	r1, [r3, #16]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032be:	f7ff fb93 	bl	80029e8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6919      	ldr	r1, [r3, #16]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	7e5b      	ldrb	r3, [r3, #25]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d102      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x158>
 80032d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80032d6:	e000      	b.n	80032da <HAL_ADC_ConfigChannel+0x15a>
 80032d8:	2300      	movs	r3, #0
 80032da:	461a      	mov	r2, r3
 80032dc:	f7ff fbbd 	bl	8002a5a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6818      	ldr	r0, [r3, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	6919      	ldr	r1, [r3, #16]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	7e1b      	ldrb	r3, [r3, #24]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d102      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x176>
 80032f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032f4:	e000      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x178>
 80032f6:	2300      	movs	r3, #0
 80032f8:	461a      	mov	r2, r3
 80032fa:	f7ff fb95 	bl	8002a28 <LL_ADC_SetDataRightShift>
 80032fe:	e047      	b.n	8003390 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003306:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	069b      	lsls	r3, r3, #26
 8003310:	429a      	cmp	r2, r3
 8003312:	d107      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003322:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800332a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	069b      	lsls	r3, r3, #26
 8003334:	429a      	cmp	r2, r3
 8003336:	d107      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003346:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800334e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	069b      	lsls	r3, r3, #26
 8003358:	429a      	cmp	r2, r3
 800335a:	d107      	bne.n	800336c <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800336a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003372:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	069b      	lsls	r3, r3, #26
 800337c:	429a      	cmp	r2, r3
 800337e:	d107      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800338e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fc8d 	bl	8002cb4 <LL_ADC_IsEnabled>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	f040 81bb 	bne.w	8003718 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f7ff fbec 	bl	8002b8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a12      	ldr	r2, [pc, #72]	; (8003404 <HAL_ADC_ConfigChannel+0x284>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	f040 8130 	bne.w	8003620 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x268>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	3301      	adds	r3, #1
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	2b09      	cmp	r3, #9
 80033de:	bf94      	ite	ls
 80033e0:	2301      	movls	r3, #1
 80033e2:	2300      	movhi	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e01b      	b.n	8003420 <HAL_ADC_ConfigChannel+0x2a0>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80033f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80033fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d103      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8003400:	2320      	movs	r3, #32
 8003402:	e005      	b.n	8003410 <HAL_ADC_ConfigChannel+0x290>
 8003404:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8003408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	3301      	adds	r3, #1
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	2b09      	cmp	r3, #9
 8003418:	bf94      	ite	ls
 800341a:	2301      	movls	r3, #1
 800341c:	2300      	movhi	r3, #0
 800341e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003420:	2b00      	cmp	r3, #0
 8003422:	d079      	beq.n	8003518 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800342c:	2b00      	cmp	r3, #0
 800342e:	d107      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x2c0>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0e9b      	lsrs	r3, r3, #26
 8003436:	3301      	adds	r3, #1
 8003438:	069b      	lsls	r3, r3, #26
 800343a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800343e:	e015      	b.n	800346c <HAL_ADC_ConfigChannel+0x2ec>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800344e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003450:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003458:	2320      	movs	r3, #32
 800345a:	e003      	b.n	8003464 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800345c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	3301      	adds	r3, #1
 8003466:	069b      	lsls	r3, r3, #26
 8003468:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <HAL_ADC_ConfigChannel+0x30c>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	0e9b      	lsrs	r3, r3, #26
 800347e:	3301      	adds	r3, #1
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	2101      	movs	r1, #1
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	e017      	b.n	80034bc <HAL_ADC_ConfigChannel+0x33c>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800349a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800349c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800349e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80034a4:	2320      	movs	r3, #32
 80034a6:	e003      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80034a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	3301      	adds	r3, #1
 80034b2:	f003 031f 	and.w	r3, r3, #31
 80034b6:	2101      	movs	r1, #1
 80034b8:	fa01 f303 	lsl.w	r3, r1, r3
 80034bc:	ea42 0103 	orr.w	r1, r2, r3
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x362>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	0e9b      	lsrs	r3, r3, #26
 80034d2:	3301      	adds	r3, #1
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	4613      	mov	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4413      	add	r3, r2
 80034de:	051b      	lsls	r3, r3, #20
 80034e0:	e018      	b.n	8003514 <HAL_ADC_ConfigChannel+0x394>
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80034f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80034fa:	2320      	movs	r3, #32
 80034fc:	e003      	b.n	8003506 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003500:	fab3 f383 	clz	r3, r3
 8003504:	b2db      	uxtb	r3, r3
 8003506:	3301      	adds	r3, #1
 8003508:	f003 021f 	and.w	r2, r3, #31
 800350c:	4613      	mov	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4413      	add	r3, r2
 8003512:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003514:	430b      	orrs	r3, r1
 8003516:	e07e      	b.n	8003616 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003520:	2b00      	cmp	r3, #0
 8003522:	d107      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x3b4>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0e9b      	lsrs	r3, r3, #26
 800352a:	3301      	adds	r3, #1
 800352c:	069b      	lsls	r3, r3, #26
 800352e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003532:	e015      	b.n	8003560 <HAL_ADC_ConfigChannel+0x3e0>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800354c:	2320      	movs	r3, #32
 800354e:	e003      	b.n	8003558 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003552:	fab3 f383 	clz	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	3301      	adds	r3, #1
 800355a:	069b      	lsls	r3, r3, #26
 800355c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003568:	2b00      	cmp	r3, #0
 800356a:	d109      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x400>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	0e9b      	lsrs	r3, r3, #26
 8003572:	3301      	adds	r3, #1
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2101      	movs	r1, #1
 800357a:	fa01 f303 	lsl.w	r3, r1, r3
 800357e:	e017      	b.n	80035b0 <HAL_ADC_ConfigChannel+0x430>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	fa93 f3a3 	rbit	r3, r3
 800358c:	61bb      	str	r3, [r7, #24]
  return result;
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8003598:	2320      	movs	r3, #32
 800359a:	e003      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	3301      	adds	r3, #1
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	2101      	movs	r1, #1
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	ea42 0103 	orr.w	r1, r2, r3
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10d      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x45c>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	0e9b      	lsrs	r3, r3, #26
 80035c6:	3301      	adds	r3, #1
 80035c8:	f003 021f 	and.w	r2, r3, #31
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	3b1e      	subs	r3, #30
 80035d4:	051b      	lsls	r3, r3, #20
 80035d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035da:	e01b      	b.n	8003614 <HAL_ADC_ConfigChannel+0x494>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	60fb      	str	r3, [r7, #12]
  return result;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80035f4:	2320      	movs	r3, #32
 80035f6:	e003      	b.n	8003600 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	3301      	adds	r3, #1
 8003602:	f003 021f 	and.w	r2, r3, #31
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	3b1e      	subs	r3, #30
 800360e:	051b      	lsls	r3, r3, #20
 8003610:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003614:	430b      	orrs	r3, r1
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	6892      	ldr	r2, [r2, #8]
 800361a:	4619      	mov	r1, r3
 800361c:	f7ff fa8a 	bl	8002b34 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	da77      	bge.n	8003718 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003628:	4840      	ldr	r0, [pc, #256]	; (800372c <HAL_ADC_ConfigChannel+0x5ac>)
 800362a:	f7ff f9cf 	bl	80029cc <LL_ADC_GetCommonPathInternalCh>
 800362e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003630:	483f      	ldr	r0, [pc, #252]	; (8003730 <HAL_ADC_ConfigChannel+0x5b0>)
 8003632:	f7ff fb3f 	bl	8002cb4 <LL_ADC_IsEnabled>
 8003636:	4604      	mov	r4, r0
 8003638:	483e      	ldr	r0, [pc, #248]	; (8003734 <HAL_ADC_ConfigChannel+0x5b4>)
 800363a:	f7ff fb3b 	bl	8002cb4 <LL_ADC_IsEnabled>
 800363e:	4603      	mov	r3, r0
 8003640:	4323      	orrs	r3, r4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d155      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a3b      	ldr	r2, [pc, #236]	; (8003738 <HAL_ADC_ConfigChannel+0x5b8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d122      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x516>
 8003650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d11d      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a35      	ldr	r2, [pc, #212]	; (8003734 <HAL_ADC_ConfigChannel+0x5b4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d159      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003666:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800366a:	4619      	mov	r1, r3
 800366c:	482f      	ldr	r0, [pc, #188]	; (800372c <HAL_ADC_ConfigChannel+0x5ac>)
 800366e:	f7ff f99a 	bl	80029a6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003672:	4b32      	ldr	r3, [pc, #200]	; (800373c <HAL_ADC_ConfigChannel+0x5bc>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	099b      	lsrs	r3, r3, #6
 8003678:	4a31      	ldr	r2, [pc, #196]	; (8003740 <HAL_ADC_ConfigChannel+0x5c0>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	099b      	lsrs	r3, r3, #6
 8003680:	3301      	adds	r3, #1
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003686:	e002      	b.n	800368e <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	3b01      	subs	r3, #1
 800368c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f9      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003694:	e040      	b.n	8003718 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2a      	ldr	r2, [pc, #168]	; (8003744 <HAL_ADC_ConfigChannel+0x5c4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d111      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x544>
 80036a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10c      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a21      	ldr	r2, [pc, #132]	; (8003734 <HAL_ADC_ConfigChannel+0x5b4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d131      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80036b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ba:	4619      	mov	r1, r3
 80036bc:	481b      	ldr	r0, [pc, #108]	; (800372c <HAL_ADC_ConfigChannel+0x5ac>)
 80036be:	f7ff f972 	bl	80029a6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036c2:	e029      	b.n	8003718 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <HAL_ADC_ConfigChannel+0x5c8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d124      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x598>
 80036ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d11f      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a15      	ldr	r2, [pc, #84]	; (8003734 <HAL_ADC_ConfigChannel+0x5b4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d11a      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80036e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036e8:	4619      	mov	r1, r3
 80036ea:	4810      	ldr	r0, [pc, #64]	; (800372c <HAL_ADC_ConfigChannel+0x5ac>)
 80036ec:	f7ff f95b 	bl	80029a6 <LL_ADC_SetCommonPathInternalCh>
 80036f0:	e012      	b.n	8003718 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	f043 0220 	orr.w	r2, r3, #32
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003704:	e008      	b.n	8003718 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	f043 0220 	orr.w	r2, r3, #32
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003720:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003724:	4618      	mov	r0, r3
 8003726:	3784      	adds	r7, #132	; 0x84
 8003728:	46bd      	mov	sp, r7
 800372a:	bd90      	pop	{r4, r7, pc}
 800372c:	40022300 	.word	0x40022300
 8003730:	40022000 	.word	0x40022000
 8003734:	40022100 	.word	0x40022100
 8003738:	cb840000 	.word	0xcb840000
 800373c:	24000004 	.word	0x24000004
 8003740:	053e2d63 	.word	0x053e2d63
 8003744:	bac04000 	.word	0xbac04000
 8003748:	cfb80000 	.word	0xcfb80000

0800374c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff faab 	bl	8002cb4 <LL_ADC_IsEnabled>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d161      	bne.n	8003828 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	4b32      	ldr	r3, [pc, #200]	; (8003834 <ADC_Enable+0xe8>)
 800376c:	4013      	ands	r3, r2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003776:	f043 0210 	orr.w	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	f043 0201 	orr.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e04d      	b.n	800382a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fa7a 	bl	8002c8c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003798:	f7ff f8c2 	bl	8002920 <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800379e:	4826      	ldr	r0, [pc, #152]	; (8003838 <ADC_Enable+0xec>)
 80037a0:	f7ff fa18 	bl	8002bd4 <LL_ADC_GetMultimode>
 80037a4:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a24      	ldr	r2, [pc, #144]	; (800383c <ADC_Enable+0xf0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d002      	beq.n	80037b6 <ADC_Enable+0x6a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	e000      	b.n	80037b8 <ADC_Enable+0x6c>
 80037b6:	4b22      	ldr	r3, [pc, #136]	; (8003840 <ADC_Enable+0xf4>)
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	4293      	cmp	r3, r2
 80037be:	d02c      	beq.n	800381a <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d130      	bne.n	8003828 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037c6:	e028      	b.n	800381a <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff fa71 	bl	8002cb4 <LL_ADC_IsEnabled>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d104      	bne.n	80037e2 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff fa55 	bl	8002c8c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037e2:	f7ff f89d 	bl	8002920 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d914      	bls.n	800381a <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d00d      	beq.n	800381a <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f043 0210 	orr.w	r2, r3, #16
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	f043 0201 	orr.w	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e007      	b.n	800382a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d1cf      	bne.n	80037c8 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	8000003f 	.word	0x8000003f
 8003838:	40022300 	.word	0x40022300
 800383c:	40022100 	.word	0x40022100
 8003840:	40022000 	.word	0x40022000

08003844 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800385a:	2b00      	cmp	r3, #0
 800385c:	d14b      	bne.n	80038f6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003862:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d021      	beq.n	80038bc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff f907 	bl	8002a90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d032      	beq.n	80038ee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d12b      	bne.n	80038ee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11f      	bne.n	80038ee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	f043 0201 	orr.w	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
 80038ba:	e018      	b.n	80038ee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d111      	bne.n	80038ee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	f043 0201 	orr.w	r2, r3, #1
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f7fe f9fa 	bl	8001ce8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038f4:	e00e      	b.n	8003914 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff fc32 	bl	800316c <HAL_ADC_ErrorCallback>
}
 8003908:	e004      	b.n	8003914 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7fe f9b8 	bl	8001ca0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	f043 0204 	orr.w	r2, r3, #4
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f7ff fc04 	bl	800316c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003974:	4b5f      	ldr	r3, [pc, #380]	; (8003af4 <ADC_ConfigureBoostMode+0x188>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01c      	beq.n	80039ba <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003980:	f004 f846 	bl	8007a10 <HAL_RCC_GetHCLKFreq>
 8003984:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800398e:	d010      	beq.n	80039b2 <ADC_ConfigureBoostMode+0x46>
 8003990:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003994:	d871      	bhi.n	8003a7a <ADC_ConfigureBoostMode+0x10e>
 8003996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399a:	d002      	beq.n	80039a2 <ADC_ConfigureBoostMode+0x36>
 800399c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039a0:	d16b      	bne.n	8003a7a <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	0c1b      	lsrs	r3, r3, #16
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ae:	60fb      	str	r3, [r7, #12]
        break;
 80039b0:	e066      	b.n	8003a80 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	089b      	lsrs	r3, r3, #2
 80039b6:	60fb      	str	r3, [r7, #12]
        break;
 80039b8:	e062      	b.n	8003a80 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80039ba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80039be:	f004 ff8f 	bl	80088e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80039c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80039cc:	d051      	beq.n	8003a72 <ADC_ConfigureBoostMode+0x106>
 80039ce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80039d2:	d854      	bhi.n	8003a7e <ADC_ConfigureBoostMode+0x112>
 80039d4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80039d8:	d047      	beq.n	8003a6a <ADC_ConfigureBoostMode+0xfe>
 80039da:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80039de:	d84e      	bhi.n	8003a7e <ADC_ConfigureBoostMode+0x112>
 80039e0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80039e4:	d03d      	beq.n	8003a62 <ADC_ConfigureBoostMode+0xf6>
 80039e6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80039ea:	d848      	bhi.n	8003a7e <ADC_ConfigureBoostMode+0x112>
 80039ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039f0:	d033      	beq.n	8003a5a <ADC_ConfigureBoostMode+0xee>
 80039f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039f6:	d842      	bhi.n	8003a7e <ADC_ConfigureBoostMode+0x112>
 80039f8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80039fc:	d029      	beq.n	8003a52 <ADC_ConfigureBoostMode+0xe6>
 80039fe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a02:	d83c      	bhi.n	8003a7e <ADC_ConfigureBoostMode+0x112>
 8003a04:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a08:	d01a      	beq.n	8003a40 <ADC_ConfigureBoostMode+0xd4>
 8003a0a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a0e:	d836      	bhi.n	8003a7e <ADC_ConfigureBoostMode+0x112>
 8003a10:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a14:	d014      	beq.n	8003a40 <ADC_ConfigureBoostMode+0xd4>
 8003a16:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a1a:	d830      	bhi.n	8003a7e <ADC_ConfigureBoostMode+0x112>
 8003a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a20:	d00e      	beq.n	8003a40 <ADC_ConfigureBoostMode+0xd4>
 8003a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a26:	d82a      	bhi.n	8003a7e <ADC_ConfigureBoostMode+0x112>
 8003a28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a2c:	d008      	beq.n	8003a40 <ADC_ConfigureBoostMode+0xd4>
 8003a2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a32:	d824      	bhi.n	8003a7e <ADC_ConfigureBoostMode+0x112>
 8003a34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a38:	d002      	beq.n	8003a40 <ADC_ConfigureBoostMode+0xd4>
 8003a3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a3e:	d11e      	bne.n	8003a7e <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	0c9b      	lsrs	r3, r3, #18
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4e:	60fb      	str	r3, [r7, #12]
        break;
 8003a50:	e016      	b.n	8003a80 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	091b      	lsrs	r3, r3, #4
 8003a56:	60fb      	str	r3, [r7, #12]
        break;
 8003a58:	e012      	b.n	8003a80 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	60fb      	str	r3, [r7, #12]
        break;
 8003a60:	e00e      	b.n	8003a80 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	60fb      	str	r3, [r7, #12]
        break;
 8003a68:	e00a      	b.n	8003a80 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	09db      	lsrs	r3, r3, #7
 8003a6e:	60fb      	str	r3, [r7, #12]
        break;
 8003a70:	e006      	b.n	8003a80 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	60fb      	str	r3, [r7, #12]
        break;
 8003a78:	e002      	b.n	8003a80 <ADC_ConfigureBoostMode+0x114>
        break;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8003a7e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <ADC_ConfigureBoostMode+0x18c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d808      	bhi.n	8003aa0 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a9c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a9e:	e025      	b.n	8003aec <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a16      	ldr	r2, [pc, #88]	; (8003afc <ADC_ConfigureBoostMode+0x190>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d80a      	bhi.n	8003abe <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aba:	609a      	str	r2, [r3, #8]
}
 8003abc:	e016      	b.n	8003aec <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a0f      	ldr	r2, [pc, #60]	; (8003b00 <ADC_ConfigureBoostMode+0x194>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d80a      	bhi.n	8003adc <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad8:	609a      	str	r2, [r3, #8]
}
 8003ada:	e007      	b.n	8003aec <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003aea:	609a      	str	r2, [r3, #8]
}
 8003aec:	bf00      	nop
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40022300 	.word	0x40022300
 8003af8:	005f5e10 	.word	0x005f5e10
 8003afc:	00bebc20 	.word	0x00bebc20
 8003b00:	017d7840 	.word	0x017d7840

08003b04 <LL_ADC_IsEnabled>:
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <LL_ADC_IsEnabled+0x18>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <LL_ADC_IsEnabled+0x1a>
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <LL_ADC_REG_IsConversionOngoing>:
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d101      	bne.n	8003b42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b09f      	sub	sp, #124	; 0x7c
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e080      	b.n	8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003b76:	2300      	movs	r3, #0
 8003b78:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a3d      	ldr	r2, [pc, #244]	; (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d102      	bne.n	8003b8e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b88:	4b3c      	ldr	r3, [pc, #240]	; (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	e001      	b.n	8003b92 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10b      	bne.n	8003bb0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9c:	f043 0220 	orr.w	r2, r3, #32
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e05f      	b.n	8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7ff ffb9 	bl	8003b2a <LL_ADC_REG_IsConversionOngoing>
 8003bb8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff ffb3 	bl	8003b2a <LL_ADC_REG_IsConversionOngoing>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d141      	bne.n	8003c4e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d13e      	bne.n	8003c4e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bd0:	4b2b      	ldr	r3, [pc, #172]	; (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003bd2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d020      	beq.n	8003c1e <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bec:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bee:	4822      	ldr	r0, [pc, #136]	; (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003bf0:	f7ff ff88 	bl	8003b04 <LL_ADC_IsEnabled>
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	4821      	ldr	r0, [pc, #132]	; (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003bf8:	f7ff ff84 	bl	8003b04 <LL_ADC_IsEnabled>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4323      	orrs	r3, r4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d12e      	bne.n	8003c62 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	6811      	ldr	r1, [r2, #0]
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	6892      	ldr	r2, [r2, #8]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	431a      	orrs	r2, r3
 8003c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c1c:	e021      	b.n	8003c62 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c28:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c2a:	4813      	ldr	r0, [pc, #76]	; (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003c2c:	f7ff ff6a 	bl	8003b04 <LL_ADC_IsEnabled>
 8003c30:	4604      	mov	r4, r0
 8003c32:	4812      	ldr	r0, [pc, #72]	; (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003c34:	f7ff ff66 	bl	8003b04 <LL_ADC_IsEnabled>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4323      	orrs	r3, r4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d110      	bne.n	8003c62 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c4a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c4c:	e009      	b.n	8003c62 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	f043 0220 	orr.w	r2, r3, #32
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003c60:	e000      	b.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c62:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	377c      	adds	r7, #124	; 0x7c
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd90      	pop	{r4, r7, pc}
 8003c78:	40022000 	.word	0x40022000
 8003c7c:	40022100 	.word	0x40022100
 8003c80:	40022300 	.word	0x40022300
 8003c84:	fffff0e0 	.word	0xfffff0e0

08003c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <__NVIC_SetPriorityGrouping+0x40>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <__NVIC_SetPriorityGrouping+0x44>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cb6:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <__NVIC_SetPriorityGrouping+0x40>)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	60d3      	str	r3, [r2, #12]
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000ed00 	.word	0xe000ed00
 8003ccc:	05fa0000 	.word	0x05fa0000

08003cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cd4:	4b04      	ldr	r3, [pc, #16]	; (8003ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	f003 0307 	and.w	r3, r3, #7
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003cf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	db0b      	blt.n	8003d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cfe:	88fb      	ldrh	r3, [r7, #6]
 8003d00:	f003 021f 	and.w	r2, r3, #31
 8003d04:	4907      	ldr	r1, [pc, #28]	; (8003d24 <__NVIC_EnableIRQ+0x38>)
 8003d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	e000e100 	.word	0xe000e100

08003d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	6039      	str	r1, [r7, #0]
 8003d32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	db0a      	blt.n	8003d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	490c      	ldr	r1, [pc, #48]	; (8003d74 <__NVIC_SetPriority+0x4c>)
 8003d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d46:	0112      	lsls	r2, r2, #4
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d50:	e00a      	b.n	8003d68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4908      	ldr	r1, [pc, #32]	; (8003d78 <__NVIC_SetPriority+0x50>)
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	3b04      	subs	r3, #4
 8003d60:	0112      	lsls	r2, r2, #4
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	440b      	add	r3, r1
 8003d66:	761a      	strb	r2, [r3, #24]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	e000e100 	.word	0xe000e100
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b089      	sub	sp, #36	; 0x24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f1c3 0307 	rsb	r3, r3, #7
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	bf28      	it	cs
 8003d9a:	2304      	movcs	r3, #4
 8003d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	3304      	adds	r3, #4
 8003da2:	2b06      	cmp	r3, #6
 8003da4:	d902      	bls.n	8003dac <NVIC_EncodePriority+0x30>
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3b03      	subs	r3, #3
 8003daa:	e000      	b.n	8003dae <NVIC_EncodePriority+0x32>
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db0:	f04f 32ff 	mov.w	r2, #4294967295
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43da      	mvns	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	401a      	ands	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fa01 f303 	lsl.w	r3, r1, r3
 8003dce:	43d9      	mvns	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd4:	4313      	orrs	r3, r2
         );
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3724      	adds	r7, #36	; 0x24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003df4:	d301      	bcc.n	8003dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003df6:	2301      	movs	r3, #1
 8003df8:	e00f      	b.n	8003e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	; (8003e24 <SysTick_Config+0x40>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e02:	210f      	movs	r1, #15
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295
 8003e08:	f7ff ff8e 	bl	8003d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <SysTick_Config+0x40>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e12:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <SysTick_Config+0x40>)
 8003e14:	2207      	movs	r2, #7
 8003e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	e000e010 	.word	0xe000e010

08003e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ff29 	bl	8003c88 <__NVIC_SetPriorityGrouping>
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b086      	sub	sp, #24
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	4603      	mov	r3, r0
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e4c:	f7ff ff40 	bl	8003cd0 <__NVIC_GetPriorityGrouping>
 8003e50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	6978      	ldr	r0, [r7, #20]
 8003e58:	f7ff ff90 	bl	8003d7c <NVIC_EncodePriority>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff ff5f 	bl	8003d28 <__NVIC_SetPriority>
}
 8003e6a:	bf00      	nop
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	4603      	mov	r3, r0
 8003e7a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff ff33 	bl	8003cec <__NVIC_EnableIRQ>
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff ffa4 	bl	8003de4 <SysTick_Config>
 8003e9c:	4603      	mov	r3, r0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e014      	b.n	8003ee2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	791b      	ldrb	r3, [r3, #4]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d105      	bne.n	8003ece <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7fd fd67 	bl	800199c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	795b      	ldrb	r3, [r3, #5]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_DAC_Start_DMA+0x1e>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e0ab      	b.n	8004062 <HAL_DAC_Start_DMA+0x176>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2202      	movs	r2, #2
 8003f14:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d12f      	bne.n	8003f7c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4a52      	ldr	r2, [pc, #328]	; (800406c <HAL_DAC_Start_DMA+0x180>)
 8003f22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4a51      	ldr	r2, [pc, #324]	; (8004070 <HAL_DAC_Start_DMA+0x184>)
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	4a50      	ldr	r2, [pc, #320]	; (8004074 <HAL_DAC_Start_DMA+0x188>)
 8003f32:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f42:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	2b08      	cmp	r3, #8
 8003f48:	d013      	beq.n	8003f72 <HAL_DAC_Start_DMA+0x86>
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d845      	bhi.n	8003fdc <HAL_DAC_Start_DMA+0xf0>
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_DAC_Start_DMA+0x72>
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d005      	beq.n	8003f68 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003f5c:	e03e      	b.n	8003fdc <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	613b      	str	r3, [r7, #16]
        break;
 8003f66:	e03c      	b.n	8003fe2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	613b      	str	r3, [r7, #16]
        break;
 8003f70:	e037      	b.n	8003fe2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3310      	adds	r3, #16
 8003f78:	613b      	str	r3, [r7, #16]
        break;
 8003f7a:	e032      	b.n	8003fe2 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4a3d      	ldr	r2, [pc, #244]	; (8004078 <HAL_DAC_Start_DMA+0x18c>)
 8003f82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4a3c      	ldr	r2, [pc, #240]	; (800407c <HAL_DAC_Start_DMA+0x190>)
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4a3b      	ldr	r2, [pc, #236]	; (8004080 <HAL_DAC_Start_DMA+0x194>)
 8003f92:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003fa2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d013      	beq.n	8003fd2 <HAL_DAC_Start_DMA+0xe6>
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d817      	bhi.n	8003fe0 <HAL_DAC_Start_DMA+0xf4>
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_DAC_Start_DMA+0xd2>
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d005      	beq.n	8003fc8 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003fbc:	e010      	b.n	8003fe0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3314      	adds	r3, #20
 8003fc4:	613b      	str	r3, [r7, #16]
        break;
 8003fc6:	e00c      	b.n	8003fe2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3318      	adds	r3, #24
 8003fce:	613b      	str	r3, [r7, #16]
        break;
 8003fd0:	e007      	b.n	8003fe2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	331c      	adds	r3, #28
 8003fd8:	613b      	str	r3, [r7, #16]
        break;
 8003fda:	e002      	b.n	8003fe2 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003fdc:	bf00      	nop
 8003fde:	e000      	b.n	8003fe2 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003fe0:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d111      	bne.n	800400c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6898      	ldr	r0, [r3, #8]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	f000 fda7 	bl	8004b54 <HAL_DMA_Start_IT>
 8004006:	4603      	mov	r3, r0
 8004008:	75fb      	strb	r3, [r7, #23]
 800400a:	e010      	b.n	800402e <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800401a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	68d8      	ldr	r0, [r3, #12]
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	f000 fd95 	bl	8004b54 <HAL_DMA_Start_IT>
 800402a:	4603      	mov	r3, r0
 800402c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10c      	bne.n	8004054 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6819      	ldr	r1, [r3, #0]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	2201      	movs	r2, #1
 8004048:	409a      	lsls	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e005      	b.n	8004060 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f043 0204 	orr.w	r2, r3, #4
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004060:	7dfb      	ldrb	r3, [r7, #23]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	08004321 	.word	0x08004321
 8004070:	08004343 	.word	0x08004343
 8004074:	0800435f 	.word	0x0800435f
 8004078:	080043c9 	.word	0x080043c9
 800407c:	080043eb 	.word	0x080043eb
 8004080:	08004407 	.word	0x08004407

08004084 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	795b      	ldrb	r3, [r3, #5]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_DAC_ConfigChannel+0x18>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e11d      	b.n	8004314 <HAL_DAC_ConfigChannel+0x254>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2202      	movs	r2, #2
 80040e2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d174      	bne.n	80041d6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80040ec:	f7fe fc18 	bl	8002920 <HAL_GetTick>
 80040f0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d134      	bne.n	8004162 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80040f8:	e011      	b.n	800411e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80040fa:	f7fe fc11 	bl	8002920 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	d90a      	bls.n	800411e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f043 0208 	orr.w	r2, r3, #8
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2203      	movs	r2, #3
 8004118:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e0fa      	b.n	8004314 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004124:	4b7d      	ldr	r3, [pc, #500]	; (800431c <HAL_DAC_ConfigChannel+0x25c>)
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e6      	bne.n	80040fa <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800412c:	2001      	movs	r0, #1
 800412e:	f7fe fc03 	bl	8002938 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	6992      	ldr	r2, [r2, #24]
 800413a:	641a      	str	r2, [r3, #64]	; 0x40
 800413c:	e01e      	b.n	800417c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800413e:	f7fe fbef 	bl	8002920 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b01      	cmp	r3, #1
 800414a:	d90a      	bls.n	8004162 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f043 0208 	orr.w	r2, r3, #8
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2203      	movs	r2, #3
 800415c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e0d8      	b.n	8004314 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004168:	2b00      	cmp	r3, #0
 800416a:	dbe8      	blt.n	800413e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800416c:	2001      	movs	r0, #1
 800416e:	f7fe fbe3 	bl	8002938 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	6992      	ldr	r2, [r2, #24]
 800417a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800418c:	fa01 f303 	lsl.w	r3, r1, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	ea02 0103 	and.w	r1, r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f003 0310 	and.w	r3, r3, #16
 80041a0:	409a      	lsls	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	21ff      	movs	r1, #255	; 0xff
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	ea02 0103 	and.w	r1, r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6a1a      	ldr	r2, [r3, #32]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	409a      	lsls	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d11d      	bne.n	800421a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	221f      	movs	r2, #31
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	43db      	mvns	r3, r3
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4013      	ands	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004220:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2207      	movs	r2, #7
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4013      	ands	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d102      	bne.n	8004244 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	e00f      	b.n	8004264 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d102      	bne.n	8004252 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800424c:	2301      	movs	r3, #1
 800424e:	61fb      	str	r3, [r7, #28]
 8004250:	e008      	b.n	8004264 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800425a:	2301      	movs	r3, #1
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	e001      	b.n	8004264 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004260:	2300      	movs	r3, #0
 8004262:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4313      	orrs	r3, r2
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	4313      	orrs	r3, r2
 8004284:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6819      	ldr	r1, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43da      	mvns	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	400a      	ands	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	f640 72fe 	movw	r2, #4094	; 0xffe
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43db      	mvns	r3, r3
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	4013      	ands	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	22c0      	movs	r2, #192	; 0xc0
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	43da      	mvns	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	400a      	ands	r2, r1
 8004304:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3720      	adds	r7, #32
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20008000 	.word	0x20008000

08004320 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f7ff fea8 	bl	8004084 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	711a      	strb	r2, [r3, #4]
}
 800433a:	bf00      	nop
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7ff fea1 	bl	8004098 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b084      	sub	sp, #16
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f043 0204 	orr.w	r2, r3, #4
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff fe97 	bl	80040ac <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	711a      	strb	r2, [r3, #4]
}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f7ff ffd8 	bl	800438c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	711a      	strb	r2, [r3, #4]
}
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff ffd1 	bl	80043a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f043 0204 	orr.w	r2, r3, #4
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f7ff ffc7 	bl	80043b4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	711a      	strb	r2, [r3, #4]
}
 800442c:	bf00      	nop
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800443c:	f7fe fa70 	bl	8002920 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e37f      	b.n	8004b4c <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a66      	ldr	r2, [pc, #408]	; (80045ec <HAL_DMA_Init+0x1b8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d04a      	beq.n	80044ec <HAL_DMA_Init+0xb8>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a65      	ldr	r2, [pc, #404]	; (80045f0 <HAL_DMA_Init+0x1bc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d045      	beq.n	80044ec <HAL_DMA_Init+0xb8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a63      	ldr	r2, [pc, #396]	; (80045f4 <HAL_DMA_Init+0x1c0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d040      	beq.n	80044ec <HAL_DMA_Init+0xb8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a62      	ldr	r2, [pc, #392]	; (80045f8 <HAL_DMA_Init+0x1c4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d03b      	beq.n	80044ec <HAL_DMA_Init+0xb8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a60      	ldr	r2, [pc, #384]	; (80045fc <HAL_DMA_Init+0x1c8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d036      	beq.n	80044ec <HAL_DMA_Init+0xb8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a5f      	ldr	r2, [pc, #380]	; (8004600 <HAL_DMA_Init+0x1cc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d031      	beq.n	80044ec <HAL_DMA_Init+0xb8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a5d      	ldr	r2, [pc, #372]	; (8004604 <HAL_DMA_Init+0x1d0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d02c      	beq.n	80044ec <HAL_DMA_Init+0xb8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a5c      	ldr	r2, [pc, #368]	; (8004608 <HAL_DMA_Init+0x1d4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d027      	beq.n	80044ec <HAL_DMA_Init+0xb8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a5a      	ldr	r2, [pc, #360]	; (800460c <HAL_DMA_Init+0x1d8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d022      	beq.n	80044ec <HAL_DMA_Init+0xb8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a59      	ldr	r2, [pc, #356]	; (8004610 <HAL_DMA_Init+0x1dc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d01d      	beq.n	80044ec <HAL_DMA_Init+0xb8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a57      	ldr	r2, [pc, #348]	; (8004614 <HAL_DMA_Init+0x1e0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d018      	beq.n	80044ec <HAL_DMA_Init+0xb8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a56      	ldr	r2, [pc, #344]	; (8004618 <HAL_DMA_Init+0x1e4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <HAL_DMA_Init+0xb8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a54      	ldr	r2, [pc, #336]	; (800461c <HAL_DMA_Init+0x1e8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_DMA_Init+0xb8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a53      	ldr	r2, [pc, #332]	; (8004620 <HAL_DMA_Init+0x1ec>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_DMA_Init+0xb8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a51      	ldr	r2, [pc, #324]	; (8004624 <HAL_DMA_Init+0x1f0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_DMA_Init+0xb8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a50      	ldr	r2, [pc, #320]	; (8004628 <HAL_DMA_Init+0x1f4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d101      	bne.n	80044f0 <HAL_DMA_Init+0xbc>
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <HAL_DMA_Init+0xbe>
 80044f0:	2300      	movs	r3, #0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 813c 	beq.w	8004770 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a37      	ldr	r2, [pc, #220]	; (80045ec <HAL_DMA_Init+0x1b8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d04a      	beq.n	80045a8 <HAL_DMA_Init+0x174>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a36      	ldr	r2, [pc, #216]	; (80045f0 <HAL_DMA_Init+0x1bc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d045      	beq.n	80045a8 <HAL_DMA_Init+0x174>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a34      	ldr	r2, [pc, #208]	; (80045f4 <HAL_DMA_Init+0x1c0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d040      	beq.n	80045a8 <HAL_DMA_Init+0x174>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a33      	ldr	r2, [pc, #204]	; (80045f8 <HAL_DMA_Init+0x1c4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d03b      	beq.n	80045a8 <HAL_DMA_Init+0x174>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a31      	ldr	r2, [pc, #196]	; (80045fc <HAL_DMA_Init+0x1c8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d036      	beq.n	80045a8 <HAL_DMA_Init+0x174>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a30      	ldr	r2, [pc, #192]	; (8004600 <HAL_DMA_Init+0x1cc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d031      	beq.n	80045a8 <HAL_DMA_Init+0x174>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a2e      	ldr	r2, [pc, #184]	; (8004604 <HAL_DMA_Init+0x1d0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d02c      	beq.n	80045a8 <HAL_DMA_Init+0x174>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a2d      	ldr	r2, [pc, #180]	; (8004608 <HAL_DMA_Init+0x1d4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d027      	beq.n	80045a8 <HAL_DMA_Init+0x174>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a2b      	ldr	r2, [pc, #172]	; (800460c <HAL_DMA_Init+0x1d8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d022      	beq.n	80045a8 <HAL_DMA_Init+0x174>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2a      	ldr	r2, [pc, #168]	; (8004610 <HAL_DMA_Init+0x1dc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d01d      	beq.n	80045a8 <HAL_DMA_Init+0x174>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a28      	ldr	r2, [pc, #160]	; (8004614 <HAL_DMA_Init+0x1e0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d018      	beq.n	80045a8 <HAL_DMA_Init+0x174>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a27      	ldr	r2, [pc, #156]	; (8004618 <HAL_DMA_Init+0x1e4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d013      	beq.n	80045a8 <HAL_DMA_Init+0x174>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a25      	ldr	r2, [pc, #148]	; (800461c <HAL_DMA_Init+0x1e8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <HAL_DMA_Init+0x174>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a24      	ldr	r2, [pc, #144]	; (8004620 <HAL_DMA_Init+0x1ec>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <HAL_DMA_Init+0x174>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a22      	ldr	r2, [pc, #136]	; (8004624 <HAL_DMA_Init+0x1f0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <HAL_DMA_Init+0x174>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a21      	ldr	r2, [pc, #132]	; (8004628 <HAL_DMA_Init+0x1f4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d108      	bne.n	80045ba <HAL_DMA_Init+0x186>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0201 	bic.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e007      	b.n	80045ca <HAL_DMA_Init+0x196>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0201 	bic.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80045ca:	e02f      	b.n	800462c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045cc:	f7fe f9a8 	bl	8002920 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b05      	cmp	r3, #5
 80045d8:	d928      	bls.n	800462c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2203      	movs	r2, #3
 80045e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e2af      	b.n	8004b4c <HAL_DMA_Init+0x718>
 80045ec:	40020010 	.word	0x40020010
 80045f0:	40020028 	.word	0x40020028
 80045f4:	40020040 	.word	0x40020040
 80045f8:	40020058 	.word	0x40020058
 80045fc:	40020070 	.word	0x40020070
 8004600:	40020088 	.word	0x40020088
 8004604:	400200a0 	.word	0x400200a0
 8004608:	400200b8 	.word	0x400200b8
 800460c:	40020410 	.word	0x40020410
 8004610:	40020428 	.word	0x40020428
 8004614:	40020440 	.word	0x40020440
 8004618:	40020458 	.word	0x40020458
 800461c:	40020470 	.word	0x40020470
 8004620:	40020488 	.word	0x40020488
 8004624:	400204a0 	.word	0x400204a0
 8004628:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1c8      	bne.n	80045cc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4b73      	ldr	r3, [pc, #460]	; (8004814 <HAL_DMA_Init+0x3e0>)
 8004646:	4013      	ands	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004652:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800465e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800466a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	2b04      	cmp	r3, #4
 800467e:	d107      	bne.n	8004690 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	4313      	orrs	r3, r2
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b28      	cmp	r3, #40	; 0x28
 8004696:	d903      	bls.n	80046a0 <HAL_DMA_Init+0x26c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b2e      	cmp	r3, #46	; 0x2e
 800469e:	d91f      	bls.n	80046e0 <HAL_DMA_Init+0x2ac>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b3e      	cmp	r3, #62	; 0x3e
 80046a6:	d903      	bls.n	80046b0 <HAL_DMA_Init+0x27c>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b42      	cmp	r3, #66	; 0x42
 80046ae:	d917      	bls.n	80046e0 <HAL_DMA_Init+0x2ac>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b46      	cmp	r3, #70	; 0x46
 80046b6:	d903      	bls.n	80046c0 <HAL_DMA_Init+0x28c>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b48      	cmp	r3, #72	; 0x48
 80046be:	d90f      	bls.n	80046e0 <HAL_DMA_Init+0x2ac>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b4e      	cmp	r3, #78	; 0x4e
 80046c6:	d903      	bls.n	80046d0 <HAL_DMA_Init+0x29c>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b52      	cmp	r3, #82	; 0x52
 80046ce:	d907      	bls.n	80046e0 <HAL_DMA_Init+0x2ac>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b73      	cmp	r3, #115	; 0x73
 80046d6:	d905      	bls.n	80046e4 <HAL_DMA_Init+0x2b0>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b77      	cmp	r3, #119	; 0x77
 80046de:	d801      	bhi.n	80046e4 <HAL_DMA_Init+0x2b0>
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <HAL_DMA_Init+0x2b2>
 80046e4:	2300      	movs	r3, #0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046f0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f023 0307 	bic.w	r3, r3, #7
 8004708:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	2b04      	cmp	r3, #4
 800471a:	d117      	bne.n	800474c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00e      	beq.n	800474c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f001 fe72 	bl	8006418 <DMA_CheckFifoParam>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2240      	movs	r2, #64	; 0x40
 800473e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e1ff      	b.n	8004b4c <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f001 fdad 	bl	80062b4 <DMA_CalcBaseAndBitshift>
 800475a:	4603      	mov	r3, r0
 800475c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	223f      	movs	r2, #63	; 0x3f
 8004768:	409a      	lsls	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	609a      	str	r2, [r3, #8]
 800476e:	e0fe      	b.n	800496e <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a28      	ldr	r2, [pc, #160]	; (8004818 <HAL_DMA_Init+0x3e4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d04a      	beq.n	8004810 <HAL_DMA_Init+0x3dc>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a27      	ldr	r2, [pc, #156]	; (800481c <HAL_DMA_Init+0x3e8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d045      	beq.n	8004810 <HAL_DMA_Init+0x3dc>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a25      	ldr	r2, [pc, #148]	; (8004820 <HAL_DMA_Init+0x3ec>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d040      	beq.n	8004810 <HAL_DMA_Init+0x3dc>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a24      	ldr	r2, [pc, #144]	; (8004824 <HAL_DMA_Init+0x3f0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d03b      	beq.n	8004810 <HAL_DMA_Init+0x3dc>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a22      	ldr	r2, [pc, #136]	; (8004828 <HAL_DMA_Init+0x3f4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d036      	beq.n	8004810 <HAL_DMA_Init+0x3dc>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a21      	ldr	r2, [pc, #132]	; (800482c <HAL_DMA_Init+0x3f8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d031      	beq.n	8004810 <HAL_DMA_Init+0x3dc>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <HAL_DMA_Init+0x3fc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d02c      	beq.n	8004810 <HAL_DMA_Init+0x3dc>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <HAL_DMA_Init+0x400>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d027      	beq.n	8004810 <HAL_DMA_Init+0x3dc>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <HAL_DMA_Init+0x404>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <HAL_DMA_Init+0x3dc>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a1b      	ldr	r2, [pc, #108]	; (800483c <HAL_DMA_Init+0x408>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d01d      	beq.n	8004810 <HAL_DMA_Init+0x3dc>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a19      	ldr	r2, [pc, #100]	; (8004840 <HAL_DMA_Init+0x40c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_DMA_Init+0x3dc>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a18      	ldr	r2, [pc, #96]	; (8004844 <HAL_DMA_Init+0x410>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_DMA_Init+0x3dc>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a16      	ldr	r2, [pc, #88]	; (8004848 <HAL_DMA_Init+0x414>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_DMA_Init+0x3dc>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a15      	ldr	r2, [pc, #84]	; (800484c <HAL_DMA_Init+0x418>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_DMA_Init+0x3dc>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a13      	ldr	r2, [pc, #76]	; (8004850 <HAL_DMA_Init+0x41c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_DMA_Init+0x3dc>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a12      	ldr	r2, [pc, #72]	; (8004854 <HAL_DMA_Init+0x420>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d123      	bne.n	8004858 <HAL_DMA_Init+0x424>
 8004810:	2301      	movs	r3, #1
 8004812:	e022      	b.n	800485a <HAL_DMA_Init+0x426>
 8004814:	fe10803f 	.word	0xfe10803f
 8004818:	48022c08 	.word	0x48022c08
 800481c:	48022c1c 	.word	0x48022c1c
 8004820:	48022c30 	.word	0x48022c30
 8004824:	48022c44 	.word	0x48022c44
 8004828:	48022c58 	.word	0x48022c58
 800482c:	48022c6c 	.word	0x48022c6c
 8004830:	48022c80 	.word	0x48022c80
 8004834:	48022c94 	.word	0x48022c94
 8004838:	58025408 	.word	0x58025408
 800483c:	5802541c 	.word	0x5802541c
 8004840:	58025430 	.word	0x58025430
 8004844:	58025444 	.word	0x58025444
 8004848:	58025458 	.word	0x58025458
 800484c:	5802546c 	.word	0x5802546c
 8004850:	58025480 	.word	0x58025480
 8004854:	58025494 	.word	0x58025494
 8004858:	2300      	movs	r3, #0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d07e      	beq.n	800495c <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a80      	ldr	r2, [pc, #512]	; (8004a64 <HAL_DMA_Init+0x630>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d021      	beq.n	80048ac <HAL_DMA_Init+0x478>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a7e      	ldr	r2, [pc, #504]	; (8004a68 <HAL_DMA_Init+0x634>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01c      	beq.n	80048ac <HAL_DMA_Init+0x478>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a7d      	ldr	r2, [pc, #500]	; (8004a6c <HAL_DMA_Init+0x638>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d017      	beq.n	80048ac <HAL_DMA_Init+0x478>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a7b      	ldr	r2, [pc, #492]	; (8004a70 <HAL_DMA_Init+0x63c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d012      	beq.n	80048ac <HAL_DMA_Init+0x478>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a7a      	ldr	r2, [pc, #488]	; (8004a74 <HAL_DMA_Init+0x640>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00d      	beq.n	80048ac <HAL_DMA_Init+0x478>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a78      	ldr	r2, [pc, #480]	; (8004a78 <HAL_DMA_Init+0x644>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d008      	beq.n	80048ac <HAL_DMA_Init+0x478>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a77      	ldr	r2, [pc, #476]	; (8004a7c <HAL_DMA_Init+0x648>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d003      	beq.n	80048ac <HAL_DMA_Init+0x478>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a75      	ldr	r2, [pc, #468]	; (8004a80 <HAL_DMA_Init+0x64c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2202      	movs	r2, #2
 80048b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4b6e      	ldr	r3, [pc, #440]	; (8004a84 <HAL_DMA_Init+0x650>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	d008      	beq.n	80048e8 <HAL_DMA_Init+0x4b4>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b80      	cmp	r3, #128	; 0x80
 80048dc:	d102      	bne.n	80048e4 <HAL_DMA_Init+0x4b0>
 80048de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048e2:	e002      	b.n	80048ea <HAL_DMA_Init+0x4b6>
 80048e4:	2300      	movs	r3, #0
 80048e6:	e000      	b.n	80048ea <HAL_DMA_Init+0x4b6>
 80048e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	68d2      	ldr	r2, [r2, #12]
 80048ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80048f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80048f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004900:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004908:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004910:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004918:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	461a      	mov	r2, r3
 800492e:	4b56      	ldr	r3, [pc, #344]	; (8004a88 <HAL_DMA_Init+0x654>)
 8004930:	4413      	add	r3, r2
 8004932:	4a56      	ldr	r2, [pc, #344]	; (8004a8c <HAL_DMA_Init+0x658>)
 8004934:	fba2 2303 	umull	r2, r3, r2, r3
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	009a      	lsls	r2, r3, #2
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f001 fcb7 	bl	80062b4 <DMA_CalcBaseAndBitshift>
 8004946:	4603      	mov	r3, r0
 8004948:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	2201      	movs	r2, #1
 8004954:	409a      	lsls	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	605a      	str	r2, [r3, #4]
 800495a:	e008      	b.n	800496e <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2240      	movs	r2, #64	; 0x40
 8004960:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2203      	movs	r2, #3
 8004966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e0ee      	b.n	8004b4c <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a47      	ldr	r2, [pc, #284]	; (8004a90 <HAL_DMA_Init+0x65c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d072      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a45      	ldr	r2, [pc, #276]	; (8004a94 <HAL_DMA_Init+0x660>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d06d      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a44      	ldr	r2, [pc, #272]	; (8004a98 <HAL_DMA_Init+0x664>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d068      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a42      	ldr	r2, [pc, #264]	; (8004a9c <HAL_DMA_Init+0x668>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d063      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a41      	ldr	r2, [pc, #260]	; (8004aa0 <HAL_DMA_Init+0x66c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d05e      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a3f      	ldr	r2, [pc, #252]	; (8004aa4 <HAL_DMA_Init+0x670>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d059      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a3e      	ldr	r2, [pc, #248]	; (8004aa8 <HAL_DMA_Init+0x674>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d054      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a3c      	ldr	r2, [pc, #240]	; (8004aac <HAL_DMA_Init+0x678>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d04f      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a3b      	ldr	r2, [pc, #236]	; (8004ab0 <HAL_DMA_Init+0x67c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d04a      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a39      	ldr	r2, [pc, #228]	; (8004ab4 <HAL_DMA_Init+0x680>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d045      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a38      	ldr	r2, [pc, #224]	; (8004ab8 <HAL_DMA_Init+0x684>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d040      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a36      	ldr	r2, [pc, #216]	; (8004abc <HAL_DMA_Init+0x688>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d03b      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a35      	ldr	r2, [pc, #212]	; (8004ac0 <HAL_DMA_Init+0x68c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d036      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a33      	ldr	r2, [pc, #204]	; (8004ac4 <HAL_DMA_Init+0x690>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d031      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a32      	ldr	r2, [pc, #200]	; (8004ac8 <HAL_DMA_Init+0x694>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d02c      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a30      	ldr	r2, [pc, #192]	; (8004acc <HAL_DMA_Init+0x698>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d027      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a14      	ldr	r2, [pc, #80]	; (8004a64 <HAL_DMA_Init+0x630>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d022      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a12      	ldr	r2, [pc, #72]	; (8004a68 <HAL_DMA_Init+0x634>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01d      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a11      	ldr	r2, [pc, #68]	; (8004a6c <HAL_DMA_Init+0x638>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d018      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a0f      	ldr	r2, [pc, #60]	; (8004a70 <HAL_DMA_Init+0x63c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d013      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a0e      	ldr	r2, [pc, #56]	; (8004a74 <HAL_DMA_Init+0x640>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00e      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <HAL_DMA_Init+0x644>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d009      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a0b      	ldr	r2, [pc, #44]	; (8004a7c <HAL_DMA_Init+0x648>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d004      	beq.n	8004a5e <HAL_DMA_Init+0x62a>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <HAL_DMA_Init+0x64c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d138      	bne.n	8004ad0 <HAL_DMA_Init+0x69c>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e037      	b.n	8004ad2 <HAL_DMA_Init+0x69e>
 8004a62:	bf00      	nop
 8004a64:	58025408 	.word	0x58025408
 8004a68:	5802541c 	.word	0x5802541c
 8004a6c:	58025430 	.word	0x58025430
 8004a70:	58025444 	.word	0x58025444
 8004a74:	58025458 	.word	0x58025458
 8004a78:	5802546c 	.word	0x5802546c
 8004a7c:	58025480 	.word	0x58025480
 8004a80:	58025494 	.word	0x58025494
 8004a84:	fffe000f 	.word	0xfffe000f
 8004a88:	a7fdabf8 	.word	0xa7fdabf8
 8004a8c:	cccccccd 	.word	0xcccccccd
 8004a90:	40020010 	.word	0x40020010
 8004a94:	40020028 	.word	0x40020028
 8004a98:	40020040 	.word	0x40020040
 8004a9c:	40020058 	.word	0x40020058
 8004aa0:	40020070 	.word	0x40020070
 8004aa4:	40020088 	.word	0x40020088
 8004aa8:	400200a0 	.word	0x400200a0
 8004aac:	400200b8 	.word	0x400200b8
 8004ab0:	40020410 	.word	0x40020410
 8004ab4:	40020428 	.word	0x40020428
 8004ab8:	40020440 	.word	0x40020440
 8004abc:	40020458 	.word	0x40020458
 8004ac0:	40020470 	.word	0x40020470
 8004ac4:	40020488 	.word	0x40020488
 8004ac8:	400204a0 	.word	0x400204a0
 8004acc:	400204b8 	.word	0x400204b8
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d032      	beq.n	8004b3c <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f001 fd1a 	bl	8006510 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b80      	cmp	r3, #128	; 0x80
 8004ae2:	d102      	bne.n	8004aea <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004afe:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d010      	beq.n	8004b2a <HAL_DMA_Init+0x6f6>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d80c      	bhi.n	8004b2a <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f001 fd97 	bl	8006644 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b26:	605a      	str	r2, [r3, #4]
 8004b28:	e008      	b.n	8004b3c <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e226      	b.n	8004fbe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_DMA_Start_IT+0x2a>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e21f      	b.n	8004fbe <HAL_DMA_Start_IT+0x46a>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	f040 820a 	bne.w	8004fa8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a68      	ldr	r2, [pc, #416]	; (8004d48 <HAL_DMA_Start_IT+0x1f4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d04a      	beq.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a66      	ldr	r2, [pc, #408]	; (8004d4c <HAL_DMA_Start_IT+0x1f8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d045      	beq.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a65      	ldr	r2, [pc, #404]	; (8004d50 <HAL_DMA_Start_IT+0x1fc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d040      	beq.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a63      	ldr	r2, [pc, #396]	; (8004d54 <HAL_DMA_Start_IT+0x200>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d03b      	beq.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a62      	ldr	r2, [pc, #392]	; (8004d58 <HAL_DMA_Start_IT+0x204>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d036      	beq.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a60      	ldr	r2, [pc, #384]	; (8004d5c <HAL_DMA_Start_IT+0x208>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d031      	beq.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a5f      	ldr	r2, [pc, #380]	; (8004d60 <HAL_DMA_Start_IT+0x20c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d02c      	beq.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a5d      	ldr	r2, [pc, #372]	; (8004d64 <HAL_DMA_Start_IT+0x210>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d027      	beq.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a5c      	ldr	r2, [pc, #368]	; (8004d68 <HAL_DMA_Start_IT+0x214>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d022      	beq.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a5a      	ldr	r2, [pc, #360]	; (8004d6c <HAL_DMA_Start_IT+0x218>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01d      	beq.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a59      	ldr	r2, [pc, #356]	; (8004d70 <HAL_DMA_Start_IT+0x21c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d018      	beq.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a57      	ldr	r2, [pc, #348]	; (8004d74 <HAL_DMA_Start_IT+0x220>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d013      	beq.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a56      	ldr	r2, [pc, #344]	; (8004d78 <HAL_DMA_Start_IT+0x224>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00e      	beq.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a54      	ldr	r2, [pc, #336]	; (8004d7c <HAL_DMA_Start_IT+0x228>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d009      	beq.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a53      	ldr	r2, [pc, #332]	; (8004d80 <HAL_DMA_Start_IT+0x22c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d004      	beq.n	8004c42 <HAL_DMA_Start_IT+0xee>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a51      	ldr	r2, [pc, #324]	; (8004d84 <HAL_DMA_Start_IT+0x230>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d108      	bne.n	8004c54 <HAL_DMA_Start_IT+0x100>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0201 	bic.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e007      	b.n	8004c64 <HAL_DMA_Start_IT+0x110>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f001 f93e 	bl	8005eec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a34      	ldr	r2, [pc, #208]	; (8004d48 <HAL_DMA_Start_IT+0x1f4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d04a      	beq.n	8004d10 <HAL_DMA_Start_IT+0x1bc>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a33      	ldr	r2, [pc, #204]	; (8004d4c <HAL_DMA_Start_IT+0x1f8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d045      	beq.n	8004d10 <HAL_DMA_Start_IT+0x1bc>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a31      	ldr	r2, [pc, #196]	; (8004d50 <HAL_DMA_Start_IT+0x1fc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d040      	beq.n	8004d10 <HAL_DMA_Start_IT+0x1bc>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a30      	ldr	r2, [pc, #192]	; (8004d54 <HAL_DMA_Start_IT+0x200>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d03b      	beq.n	8004d10 <HAL_DMA_Start_IT+0x1bc>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a2e      	ldr	r2, [pc, #184]	; (8004d58 <HAL_DMA_Start_IT+0x204>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d036      	beq.n	8004d10 <HAL_DMA_Start_IT+0x1bc>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a2d      	ldr	r2, [pc, #180]	; (8004d5c <HAL_DMA_Start_IT+0x208>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d031      	beq.n	8004d10 <HAL_DMA_Start_IT+0x1bc>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a2b      	ldr	r2, [pc, #172]	; (8004d60 <HAL_DMA_Start_IT+0x20c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d02c      	beq.n	8004d10 <HAL_DMA_Start_IT+0x1bc>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a2a      	ldr	r2, [pc, #168]	; (8004d64 <HAL_DMA_Start_IT+0x210>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d027      	beq.n	8004d10 <HAL_DMA_Start_IT+0x1bc>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a28      	ldr	r2, [pc, #160]	; (8004d68 <HAL_DMA_Start_IT+0x214>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d022      	beq.n	8004d10 <HAL_DMA_Start_IT+0x1bc>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a27      	ldr	r2, [pc, #156]	; (8004d6c <HAL_DMA_Start_IT+0x218>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d01d      	beq.n	8004d10 <HAL_DMA_Start_IT+0x1bc>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a25      	ldr	r2, [pc, #148]	; (8004d70 <HAL_DMA_Start_IT+0x21c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d018      	beq.n	8004d10 <HAL_DMA_Start_IT+0x1bc>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a24      	ldr	r2, [pc, #144]	; (8004d74 <HAL_DMA_Start_IT+0x220>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d013      	beq.n	8004d10 <HAL_DMA_Start_IT+0x1bc>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a22      	ldr	r2, [pc, #136]	; (8004d78 <HAL_DMA_Start_IT+0x224>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00e      	beq.n	8004d10 <HAL_DMA_Start_IT+0x1bc>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a21      	ldr	r2, [pc, #132]	; (8004d7c <HAL_DMA_Start_IT+0x228>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d009      	beq.n	8004d10 <HAL_DMA_Start_IT+0x1bc>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1f      	ldr	r2, [pc, #124]	; (8004d80 <HAL_DMA_Start_IT+0x22c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <HAL_DMA_Start_IT+0x1bc>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	; (8004d84 <HAL_DMA_Start_IT+0x230>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d101      	bne.n	8004d14 <HAL_DMA_Start_IT+0x1c0>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <HAL_DMA_Start_IT+0x1c2>
 8004d14:	2300      	movs	r3, #0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d036      	beq.n	8004d88 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f023 021e 	bic.w	r2, r3, #30
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0216 	orr.w	r2, r2, #22
 8004d2c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d03e      	beq.n	8004db4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0208 	orr.w	r2, r2, #8
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	e035      	b.n	8004db4 <HAL_DMA_Start_IT+0x260>
 8004d48:	40020010 	.word	0x40020010
 8004d4c:	40020028 	.word	0x40020028
 8004d50:	40020040 	.word	0x40020040
 8004d54:	40020058 	.word	0x40020058
 8004d58:	40020070 	.word	0x40020070
 8004d5c:	40020088 	.word	0x40020088
 8004d60:	400200a0 	.word	0x400200a0
 8004d64:	400200b8 	.word	0x400200b8
 8004d68:	40020410 	.word	0x40020410
 8004d6c:	40020428 	.word	0x40020428
 8004d70:	40020440 	.word	0x40020440
 8004d74:	40020458 	.word	0x40020458
 8004d78:	40020470 	.word	0x40020470
 8004d7c:	40020488 	.word	0x40020488
 8004d80:	400204a0 	.word	0x400204a0
 8004d84:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 020e 	bic.w	r2, r3, #14
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 020a 	orr.w	r2, r2, #10
 8004d9a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d007      	beq.n	8004db4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0204 	orr.w	r2, r2, #4
 8004db2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a83      	ldr	r2, [pc, #524]	; (8004fc8 <HAL_DMA_Start_IT+0x474>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d072      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a82      	ldr	r2, [pc, #520]	; (8004fcc <HAL_DMA_Start_IT+0x478>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d06d      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a80      	ldr	r2, [pc, #512]	; (8004fd0 <HAL_DMA_Start_IT+0x47c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d068      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a7f      	ldr	r2, [pc, #508]	; (8004fd4 <HAL_DMA_Start_IT+0x480>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d063      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a7d      	ldr	r2, [pc, #500]	; (8004fd8 <HAL_DMA_Start_IT+0x484>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d05e      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a7c      	ldr	r2, [pc, #496]	; (8004fdc <HAL_DMA_Start_IT+0x488>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d059      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a7a      	ldr	r2, [pc, #488]	; (8004fe0 <HAL_DMA_Start_IT+0x48c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d054      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a79      	ldr	r2, [pc, #484]	; (8004fe4 <HAL_DMA_Start_IT+0x490>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d04f      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a77      	ldr	r2, [pc, #476]	; (8004fe8 <HAL_DMA_Start_IT+0x494>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d04a      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a76      	ldr	r2, [pc, #472]	; (8004fec <HAL_DMA_Start_IT+0x498>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d045      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a74      	ldr	r2, [pc, #464]	; (8004ff0 <HAL_DMA_Start_IT+0x49c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d040      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a73      	ldr	r2, [pc, #460]	; (8004ff4 <HAL_DMA_Start_IT+0x4a0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d03b      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a71      	ldr	r2, [pc, #452]	; (8004ff8 <HAL_DMA_Start_IT+0x4a4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d036      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a70      	ldr	r2, [pc, #448]	; (8004ffc <HAL_DMA_Start_IT+0x4a8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d031      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a6e      	ldr	r2, [pc, #440]	; (8005000 <HAL_DMA_Start_IT+0x4ac>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d02c      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a6d      	ldr	r2, [pc, #436]	; (8005004 <HAL_DMA_Start_IT+0x4b0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d027      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a6b      	ldr	r2, [pc, #428]	; (8005008 <HAL_DMA_Start_IT+0x4b4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d022      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a6a      	ldr	r2, [pc, #424]	; (800500c <HAL_DMA_Start_IT+0x4b8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d01d      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a68      	ldr	r2, [pc, #416]	; (8005010 <HAL_DMA_Start_IT+0x4bc>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d018      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a67      	ldr	r2, [pc, #412]	; (8005014 <HAL_DMA_Start_IT+0x4c0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d013      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a65      	ldr	r2, [pc, #404]	; (8005018 <HAL_DMA_Start_IT+0x4c4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00e      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a64      	ldr	r2, [pc, #400]	; (800501c <HAL_DMA_Start_IT+0x4c8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d009      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a62      	ldr	r2, [pc, #392]	; (8005020 <HAL_DMA_Start_IT+0x4cc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_DMA_Start_IT+0x350>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a61      	ldr	r2, [pc, #388]	; (8005024 <HAL_DMA_Start_IT+0x4d0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d101      	bne.n	8004ea8 <HAL_DMA_Start_IT+0x354>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <HAL_DMA_Start_IT+0x356>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d01a      	beq.n	8004ee4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ee2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a37      	ldr	r2, [pc, #220]	; (8004fc8 <HAL_DMA_Start_IT+0x474>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d04a      	beq.n	8004f84 <HAL_DMA_Start_IT+0x430>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a36      	ldr	r2, [pc, #216]	; (8004fcc <HAL_DMA_Start_IT+0x478>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d045      	beq.n	8004f84 <HAL_DMA_Start_IT+0x430>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a34      	ldr	r2, [pc, #208]	; (8004fd0 <HAL_DMA_Start_IT+0x47c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d040      	beq.n	8004f84 <HAL_DMA_Start_IT+0x430>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a33      	ldr	r2, [pc, #204]	; (8004fd4 <HAL_DMA_Start_IT+0x480>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d03b      	beq.n	8004f84 <HAL_DMA_Start_IT+0x430>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a31      	ldr	r2, [pc, #196]	; (8004fd8 <HAL_DMA_Start_IT+0x484>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d036      	beq.n	8004f84 <HAL_DMA_Start_IT+0x430>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a30      	ldr	r2, [pc, #192]	; (8004fdc <HAL_DMA_Start_IT+0x488>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d031      	beq.n	8004f84 <HAL_DMA_Start_IT+0x430>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a2e      	ldr	r2, [pc, #184]	; (8004fe0 <HAL_DMA_Start_IT+0x48c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d02c      	beq.n	8004f84 <HAL_DMA_Start_IT+0x430>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a2d      	ldr	r2, [pc, #180]	; (8004fe4 <HAL_DMA_Start_IT+0x490>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d027      	beq.n	8004f84 <HAL_DMA_Start_IT+0x430>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a2b      	ldr	r2, [pc, #172]	; (8004fe8 <HAL_DMA_Start_IT+0x494>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d022      	beq.n	8004f84 <HAL_DMA_Start_IT+0x430>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a2a      	ldr	r2, [pc, #168]	; (8004fec <HAL_DMA_Start_IT+0x498>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d01d      	beq.n	8004f84 <HAL_DMA_Start_IT+0x430>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a28      	ldr	r2, [pc, #160]	; (8004ff0 <HAL_DMA_Start_IT+0x49c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d018      	beq.n	8004f84 <HAL_DMA_Start_IT+0x430>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a27      	ldr	r2, [pc, #156]	; (8004ff4 <HAL_DMA_Start_IT+0x4a0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <HAL_DMA_Start_IT+0x430>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a25      	ldr	r2, [pc, #148]	; (8004ff8 <HAL_DMA_Start_IT+0x4a4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00e      	beq.n	8004f84 <HAL_DMA_Start_IT+0x430>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a24      	ldr	r2, [pc, #144]	; (8004ffc <HAL_DMA_Start_IT+0x4a8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d009      	beq.n	8004f84 <HAL_DMA_Start_IT+0x430>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a22      	ldr	r2, [pc, #136]	; (8005000 <HAL_DMA_Start_IT+0x4ac>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d004      	beq.n	8004f84 <HAL_DMA_Start_IT+0x430>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a21      	ldr	r2, [pc, #132]	; (8005004 <HAL_DMA_Start_IT+0x4b0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d108      	bne.n	8004f96 <HAL_DMA_Start_IT+0x442>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	e012      	b.n	8004fbc <HAL_DMA_Start_IT+0x468>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0201 	orr.w	r2, r2, #1
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e009      	b.n	8004fbc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40020010 	.word	0x40020010
 8004fcc:	40020028 	.word	0x40020028
 8004fd0:	40020040 	.word	0x40020040
 8004fd4:	40020058 	.word	0x40020058
 8004fd8:	40020070 	.word	0x40020070
 8004fdc:	40020088 	.word	0x40020088
 8004fe0:	400200a0 	.word	0x400200a0
 8004fe4:	400200b8 	.word	0x400200b8
 8004fe8:	40020410 	.word	0x40020410
 8004fec:	40020428 	.word	0x40020428
 8004ff0:	40020440 	.word	0x40020440
 8004ff4:	40020458 	.word	0x40020458
 8004ff8:	40020470 	.word	0x40020470
 8004ffc:	40020488 	.word	0x40020488
 8005000:	400204a0 	.word	0x400204a0
 8005004:	400204b8 	.word	0x400204b8
 8005008:	58025408 	.word	0x58025408
 800500c:	5802541c 	.word	0x5802541c
 8005010:	58025430 	.word	0x58025430
 8005014:	58025444 	.word	0x58025444
 8005018:	58025458 	.word	0x58025458
 800501c:	5802546c 	.word	0x5802546c
 8005020:	58025480 	.word	0x58025480
 8005024:	58025494 	.word	0x58025494

08005028 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b08a      	sub	sp, #40	; 0x28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005034:	4b67      	ldr	r3, [pc, #412]	; (80051d4 <HAL_DMA_IRQHandler+0x1ac>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a67      	ldr	r2, [pc, #412]	; (80051d8 <HAL_DMA_IRQHandler+0x1b0>)
 800503a:	fba2 2303 	umull	r2, r3, r2, r3
 800503e:	0a9b      	lsrs	r3, r3, #10
 8005040:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005046:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a5f      	ldr	r2, [pc, #380]	; (80051dc <HAL_DMA_IRQHandler+0x1b4>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d04a      	beq.n	80050fa <HAL_DMA_IRQHandler+0xd2>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a5d      	ldr	r2, [pc, #372]	; (80051e0 <HAL_DMA_IRQHandler+0x1b8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d045      	beq.n	80050fa <HAL_DMA_IRQHandler+0xd2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a5c      	ldr	r2, [pc, #368]	; (80051e4 <HAL_DMA_IRQHandler+0x1bc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d040      	beq.n	80050fa <HAL_DMA_IRQHandler+0xd2>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a5a      	ldr	r2, [pc, #360]	; (80051e8 <HAL_DMA_IRQHandler+0x1c0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d03b      	beq.n	80050fa <HAL_DMA_IRQHandler+0xd2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a59      	ldr	r2, [pc, #356]	; (80051ec <HAL_DMA_IRQHandler+0x1c4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d036      	beq.n	80050fa <HAL_DMA_IRQHandler+0xd2>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a57      	ldr	r2, [pc, #348]	; (80051f0 <HAL_DMA_IRQHandler+0x1c8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d031      	beq.n	80050fa <HAL_DMA_IRQHandler+0xd2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a56      	ldr	r2, [pc, #344]	; (80051f4 <HAL_DMA_IRQHandler+0x1cc>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d02c      	beq.n	80050fa <HAL_DMA_IRQHandler+0xd2>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a54      	ldr	r2, [pc, #336]	; (80051f8 <HAL_DMA_IRQHandler+0x1d0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d027      	beq.n	80050fa <HAL_DMA_IRQHandler+0xd2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a53      	ldr	r2, [pc, #332]	; (80051fc <HAL_DMA_IRQHandler+0x1d4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d022      	beq.n	80050fa <HAL_DMA_IRQHandler+0xd2>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a51      	ldr	r2, [pc, #324]	; (8005200 <HAL_DMA_IRQHandler+0x1d8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d01d      	beq.n	80050fa <HAL_DMA_IRQHandler+0xd2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a50      	ldr	r2, [pc, #320]	; (8005204 <HAL_DMA_IRQHandler+0x1dc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d018      	beq.n	80050fa <HAL_DMA_IRQHandler+0xd2>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a4e      	ldr	r2, [pc, #312]	; (8005208 <HAL_DMA_IRQHandler+0x1e0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <HAL_DMA_IRQHandler+0xd2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a4d      	ldr	r2, [pc, #308]	; (800520c <HAL_DMA_IRQHandler+0x1e4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00e      	beq.n	80050fa <HAL_DMA_IRQHandler+0xd2>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a4b      	ldr	r2, [pc, #300]	; (8005210 <HAL_DMA_IRQHandler+0x1e8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d009      	beq.n	80050fa <HAL_DMA_IRQHandler+0xd2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a4a      	ldr	r2, [pc, #296]	; (8005214 <HAL_DMA_IRQHandler+0x1ec>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d004      	beq.n	80050fa <HAL_DMA_IRQHandler+0xd2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a48      	ldr	r2, [pc, #288]	; (8005218 <HAL_DMA_IRQHandler+0x1f0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d101      	bne.n	80050fe <HAL_DMA_IRQHandler+0xd6>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <HAL_DMA_IRQHandler+0xd8>
 80050fe:	2300      	movs	r3, #0
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 842b 	beq.w	800595c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	2208      	movs	r2, #8
 8005110:	409a      	lsls	r2, r3
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	4013      	ands	r3, r2
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 80a2 	beq.w	8005260 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a2e      	ldr	r2, [pc, #184]	; (80051dc <HAL_DMA_IRQHandler+0x1b4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d04a      	beq.n	80051bc <HAL_DMA_IRQHandler+0x194>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a2d      	ldr	r2, [pc, #180]	; (80051e0 <HAL_DMA_IRQHandler+0x1b8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d045      	beq.n	80051bc <HAL_DMA_IRQHandler+0x194>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a2b      	ldr	r2, [pc, #172]	; (80051e4 <HAL_DMA_IRQHandler+0x1bc>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d040      	beq.n	80051bc <HAL_DMA_IRQHandler+0x194>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a2a      	ldr	r2, [pc, #168]	; (80051e8 <HAL_DMA_IRQHandler+0x1c0>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d03b      	beq.n	80051bc <HAL_DMA_IRQHandler+0x194>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a28      	ldr	r2, [pc, #160]	; (80051ec <HAL_DMA_IRQHandler+0x1c4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d036      	beq.n	80051bc <HAL_DMA_IRQHandler+0x194>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a27      	ldr	r2, [pc, #156]	; (80051f0 <HAL_DMA_IRQHandler+0x1c8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d031      	beq.n	80051bc <HAL_DMA_IRQHandler+0x194>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a25      	ldr	r2, [pc, #148]	; (80051f4 <HAL_DMA_IRQHandler+0x1cc>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d02c      	beq.n	80051bc <HAL_DMA_IRQHandler+0x194>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a24      	ldr	r2, [pc, #144]	; (80051f8 <HAL_DMA_IRQHandler+0x1d0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d027      	beq.n	80051bc <HAL_DMA_IRQHandler+0x194>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a22      	ldr	r2, [pc, #136]	; (80051fc <HAL_DMA_IRQHandler+0x1d4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d022      	beq.n	80051bc <HAL_DMA_IRQHandler+0x194>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a21      	ldr	r2, [pc, #132]	; (8005200 <HAL_DMA_IRQHandler+0x1d8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d01d      	beq.n	80051bc <HAL_DMA_IRQHandler+0x194>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <HAL_DMA_IRQHandler+0x1dc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d018      	beq.n	80051bc <HAL_DMA_IRQHandler+0x194>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1e      	ldr	r2, [pc, #120]	; (8005208 <HAL_DMA_IRQHandler+0x1e0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d013      	beq.n	80051bc <HAL_DMA_IRQHandler+0x194>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1c      	ldr	r2, [pc, #112]	; (800520c <HAL_DMA_IRQHandler+0x1e4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00e      	beq.n	80051bc <HAL_DMA_IRQHandler+0x194>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a1b      	ldr	r2, [pc, #108]	; (8005210 <HAL_DMA_IRQHandler+0x1e8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d009      	beq.n	80051bc <HAL_DMA_IRQHandler+0x194>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a19      	ldr	r2, [pc, #100]	; (8005214 <HAL_DMA_IRQHandler+0x1ec>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_DMA_IRQHandler+0x194>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a18      	ldr	r2, [pc, #96]	; (8005218 <HAL_DMA_IRQHandler+0x1f0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d12f      	bne.n	800521c <HAL_DMA_IRQHandler+0x1f4>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	bf14      	ite	ne
 80051ca:	2301      	movne	r3, #1
 80051cc:	2300      	moveq	r3, #0
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	e02e      	b.n	8005230 <HAL_DMA_IRQHandler+0x208>
 80051d2:	bf00      	nop
 80051d4:	24000004 	.word	0x24000004
 80051d8:	1b4e81b5 	.word	0x1b4e81b5
 80051dc:	40020010 	.word	0x40020010
 80051e0:	40020028 	.word	0x40020028
 80051e4:	40020040 	.word	0x40020040
 80051e8:	40020058 	.word	0x40020058
 80051ec:	40020070 	.word	0x40020070
 80051f0:	40020088 	.word	0x40020088
 80051f4:	400200a0 	.word	0x400200a0
 80051f8:	400200b8 	.word	0x400200b8
 80051fc:	40020410 	.word	0x40020410
 8005200:	40020428 	.word	0x40020428
 8005204:	40020440 	.word	0x40020440
 8005208:	40020458 	.word	0x40020458
 800520c:	40020470 	.word	0x40020470
 8005210:	40020488 	.word	0x40020488
 8005214:	400204a0 	.word	0x400204a0
 8005218:	400204b8 	.word	0x400204b8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b00      	cmp	r3, #0
 8005228:	bf14      	ite	ne
 800522a:	2301      	movne	r3, #1
 800522c:	2300      	moveq	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d015      	beq.n	8005260 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0204 	bic.w	r2, r2, #4
 8005242:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	2208      	movs	r2, #8
 800524e:	409a      	lsls	r2, r3
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005258:	f043 0201 	orr.w	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005264:	f003 031f 	and.w	r3, r3, #31
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	fa22 f303 	lsr.w	r3, r2, r3
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d06e      	beq.n	8005354 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a69      	ldr	r2, [pc, #420]	; (8005420 <HAL_DMA_IRQHandler+0x3f8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d04a      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2ee>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a67      	ldr	r2, [pc, #412]	; (8005424 <HAL_DMA_IRQHandler+0x3fc>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d045      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2ee>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a66      	ldr	r2, [pc, #408]	; (8005428 <HAL_DMA_IRQHandler+0x400>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d040      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2ee>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a64      	ldr	r2, [pc, #400]	; (800542c <HAL_DMA_IRQHandler+0x404>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d03b      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2ee>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a63      	ldr	r2, [pc, #396]	; (8005430 <HAL_DMA_IRQHandler+0x408>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d036      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2ee>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a61      	ldr	r2, [pc, #388]	; (8005434 <HAL_DMA_IRQHandler+0x40c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d031      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2ee>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a60      	ldr	r2, [pc, #384]	; (8005438 <HAL_DMA_IRQHandler+0x410>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d02c      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2ee>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a5e      	ldr	r2, [pc, #376]	; (800543c <HAL_DMA_IRQHandler+0x414>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d027      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2ee>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a5d      	ldr	r2, [pc, #372]	; (8005440 <HAL_DMA_IRQHandler+0x418>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d022      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2ee>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a5b      	ldr	r2, [pc, #364]	; (8005444 <HAL_DMA_IRQHandler+0x41c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d01d      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2ee>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a5a      	ldr	r2, [pc, #360]	; (8005448 <HAL_DMA_IRQHandler+0x420>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d018      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2ee>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a58      	ldr	r2, [pc, #352]	; (800544c <HAL_DMA_IRQHandler+0x424>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d013      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2ee>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a57      	ldr	r2, [pc, #348]	; (8005450 <HAL_DMA_IRQHandler+0x428>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00e      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2ee>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a55      	ldr	r2, [pc, #340]	; (8005454 <HAL_DMA_IRQHandler+0x42c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d009      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2ee>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a54      	ldr	r2, [pc, #336]	; (8005458 <HAL_DMA_IRQHandler+0x430>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d004      	beq.n	8005316 <HAL_DMA_IRQHandler+0x2ee>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a52      	ldr	r2, [pc, #328]	; (800545c <HAL_DMA_IRQHandler+0x434>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d10a      	bne.n	800532c <HAL_DMA_IRQHandler+0x304>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005320:	2b00      	cmp	r3, #0
 8005322:	bf14      	ite	ne
 8005324:	2301      	movne	r3, #1
 8005326:	2300      	moveq	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	e003      	b.n	8005334 <HAL_DMA_IRQHandler+0x30c>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2300      	movs	r3, #0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00d      	beq.n	8005354 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	2201      	movs	r2, #1
 8005342:	409a      	lsls	r2, r3
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534c:	f043 0202 	orr.w	r2, r3, #2
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005358:	f003 031f 	and.w	r3, r3, #31
 800535c:	2204      	movs	r2, #4
 800535e:	409a      	lsls	r2, r3
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	4013      	ands	r3, r2
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 808f 	beq.w	8005488 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a2c      	ldr	r2, [pc, #176]	; (8005420 <HAL_DMA_IRQHandler+0x3f8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d04a      	beq.n	800540a <HAL_DMA_IRQHandler+0x3e2>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a2a      	ldr	r2, [pc, #168]	; (8005424 <HAL_DMA_IRQHandler+0x3fc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d045      	beq.n	800540a <HAL_DMA_IRQHandler+0x3e2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a29      	ldr	r2, [pc, #164]	; (8005428 <HAL_DMA_IRQHandler+0x400>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d040      	beq.n	800540a <HAL_DMA_IRQHandler+0x3e2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a27      	ldr	r2, [pc, #156]	; (800542c <HAL_DMA_IRQHandler+0x404>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d03b      	beq.n	800540a <HAL_DMA_IRQHandler+0x3e2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a26      	ldr	r2, [pc, #152]	; (8005430 <HAL_DMA_IRQHandler+0x408>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d036      	beq.n	800540a <HAL_DMA_IRQHandler+0x3e2>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a24      	ldr	r2, [pc, #144]	; (8005434 <HAL_DMA_IRQHandler+0x40c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d031      	beq.n	800540a <HAL_DMA_IRQHandler+0x3e2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a23      	ldr	r2, [pc, #140]	; (8005438 <HAL_DMA_IRQHandler+0x410>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d02c      	beq.n	800540a <HAL_DMA_IRQHandler+0x3e2>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a21      	ldr	r2, [pc, #132]	; (800543c <HAL_DMA_IRQHandler+0x414>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d027      	beq.n	800540a <HAL_DMA_IRQHandler+0x3e2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a20      	ldr	r2, [pc, #128]	; (8005440 <HAL_DMA_IRQHandler+0x418>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d022      	beq.n	800540a <HAL_DMA_IRQHandler+0x3e2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a1e      	ldr	r2, [pc, #120]	; (8005444 <HAL_DMA_IRQHandler+0x41c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01d      	beq.n	800540a <HAL_DMA_IRQHandler+0x3e2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1d      	ldr	r2, [pc, #116]	; (8005448 <HAL_DMA_IRQHandler+0x420>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <HAL_DMA_IRQHandler+0x3e2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a1b      	ldr	r2, [pc, #108]	; (800544c <HAL_DMA_IRQHandler+0x424>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <HAL_DMA_IRQHandler+0x3e2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a1a      	ldr	r2, [pc, #104]	; (8005450 <HAL_DMA_IRQHandler+0x428>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <HAL_DMA_IRQHandler+0x3e2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a18      	ldr	r2, [pc, #96]	; (8005454 <HAL_DMA_IRQHandler+0x42c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_DMA_IRQHandler+0x3e2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a17      	ldr	r2, [pc, #92]	; (8005458 <HAL_DMA_IRQHandler+0x430>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <HAL_DMA_IRQHandler+0x3e2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a15      	ldr	r2, [pc, #84]	; (800545c <HAL_DMA_IRQHandler+0x434>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d12a      	bne.n	8005460 <HAL_DMA_IRQHandler+0x438>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	bf14      	ite	ne
 8005418:	2301      	movne	r3, #1
 800541a:	2300      	moveq	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	e023      	b.n	8005468 <HAL_DMA_IRQHandler+0x440>
 8005420:	40020010 	.word	0x40020010
 8005424:	40020028 	.word	0x40020028
 8005428:	40020040 	.word	0x40020040
 800542c:	40020058 	.word	0x40020058
 8005430:	40020070 	.word	0x40020070
 8005434:	40020088 	.word	0x40020088
 8005438:	400200a0 	.word	0x400200a0
 800543c:	400200b8 	.word	0x400200b8
 8005440:	40020410 	.word	0x40020410
 8005444:	40020428 	.word	0x40020428
 8005448:	40020440 	.word	0x40020440
 800544c:	40020458 	.word	0x40020458
 8005450:	40020470 	.word	0x40020470
 8005454:	40020488 	.word	0x40020488
 8005458:	400204a0 	.word	0x400204a0
 800545c:	400204b8 	.word	0x400204b8
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2300      	movs	r3, #0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00d      	beq.n	8005488 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005470:	f003 031f 	and.w	r3, r3, #31
 8005474:	2204      	movs	r2, #4
 8005476:	409a      	lsls	r2, r3
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005480:	f043 0204 	orr.w	r2, r3, #4
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	2210      	movs	r2, #16
 8005492:	409a      	lsls	r2, r3
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	4013      	ands	r3, r2
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 80a6 	beq.w	80055ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a85      	ldr	r2, [pc, #532]	; (80056b8 <HAL_DMA_IRQHandler+0x690>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d04a      	beq.n	800553e <HAL_DMA_IRQHandler+0x516>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a83      	ldr	r2, [pc, #524]	; (80056bc <HAL_DMA_IRQHandler+0x694>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d045      	beq.n	800553e <HAL_DMA_IRQHandler+0x516>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a82      	ldr	r2, [pc, #520]	; (80056c0 <HAL_DMA_IRQHandler+0x698>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d040      	beq.n	800553e <HAL_DMA_IRQHandler+0x516>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a80      	ldr	r2, [pc, #512]	; (80056c4 <HAL_DMA_IRQHandler+0x69c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d03b      	beq.n	800553e <HAL_DMA_IRQHandler+0x516>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a7f      	ldr	r2, [pc, #508]	; (80056c8 <HAL_DMA_IRQHandler+0x6a0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d036      	beq.n	800553e <HAL_DMA_IRQHandler+0x516>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a7d      	ldr	r2, [pc, #500]	; (80056cc <HAL_DMA_IRQHandler+0x6a4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d031      	beq.n	800553e <HAL_DMA_IRQHandler+0x516>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a7c      	ldr	r2, [pc, #496]	; (80056d0 <HAL_DMA_IRQHandler+0x6a8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d02c      	beq.n	800553e <HAL_DMA_IRQHandler+0x516>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a7a      	ldr	r2, [pc, #488]	; (80056d4 <HAL_DMA_IRQHandler+0x6ac>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d027      	beq.n	800553e <HAL_DMA_IRQHandler+0x516>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a79      	ldr	r2, [pc, #484]	; (80056d8 <HAL_DMA_IRQHandler+0x6b0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d022      	beq.n	800553e <HAL_DMA_IRQHandler+0x516>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a77      	ldr	r2, [pc, #476]	; (80056dc <HAL_DMA_IRQHandler+0x6b4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d01d      	beq.n	800553e <HAL_DMA_IRQHandler+0x516>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a76      	ldr	r2, [pc, #472]	; (80056e0 <HAL_DMA_IRQHandler+0x6b8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d018      	beq.n	800553e <HAL_DMA_IRQHandler+0x516>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a74      	ldr	r2, [pc, #464]	; (80056e4 <HAL_DMA_IRQHandler+0x6bc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d013      	beq.n	800553e <HAL_DMA_IRQHandler+0x516>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a73      	ldr	r2, [pc, #460]	; (80056e8 <HAL_DMA_IRQHandler+0x6c0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00e      	beq.n	800553e <HAL_DMA_IRQHandler+0x516>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a71      	ldr	r2, [pc, #452]	; (80056ec <HAL_DMA_IRQHandler+0x6c4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d009      	beq.n	800553e <HAL_DMA_IRQHandler+0x516>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a70      	ldr	r2, [pc, #448]	; (80056f0 <HAL_DMA_IRQHandler+0x6c8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d004      	beq.n	800553e <HAL_DMA_IRQHandler+0x516>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a6e      	ldr	r2, [pc, #440]	; (80056f4 <HAL_DMA_IRQHandler+0x6cc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d10a      	bne.n	8005554 <HAL_DMA_IRQHandler+0x52c>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	bf14      	ite	ne
 800554c:	2301      	movne	r3, #1
 800554e:	2300      	moveq	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	e009      	b.n	8005568 <HAL_DMA_IRQHandler+0x540>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	2b00      	cmp	r3, #0
 8005560:	bf14      	ite	ne
 8005562:	2301      	movne	r3, #1
 8005564:	2300      	moveq	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d03e      	beq.n	80055ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005570:	f003 031f 	and.w	r3, r3, #31
 8005574:	2210      	movs	r2, #16
 8005576:	409a      	lsls	r2, r3
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d018      	beq.n	80055bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d108      	bne.n	80055aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	2b00      	cmp	r3, #0
 800559e:	d024      	beq.n	80055ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	4798      	blx	r3
 80055a8:	e01f      	b.n	80055ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01b      	beq.n	80055ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	4798      	blx	r3
 80055ba:	e016      	b.n	80055ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d107      	bne.n	80055da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0208 	bic.w	r2, r2, #8
 80055d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	2220      	movs	r2, #32
 80055f4:	409a      	lsls	r2, r3
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 8110 	beq.w	8005820 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2c      	ldr	r2, [pc, #176]	; (80056b8 <HAL_DMA_IRQHandler+0x690>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d04a      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x678>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a2b      	ldr	r2, [pc, #172]	; (80056bc <HAL_DMA_IRQHandler+0x694>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d045      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x678>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a29      	ldr	r2, [pc, #164]	; (80056c0 <HAL_DMA_IRQHandler+0x698>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d040      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x678>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a28      	ldr	r2, [pc, #160]	; (80056c4 <HAL_DMA_IRQHandler+0x69c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d03b      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x678>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a26      	ldr	r2, [pc, #152]	; (80056c8 <HAL_DMA_IRQHandler+0x6a0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d036      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x678>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a25      	ldr	r2, [pc, #148]	; (80056cc <HAL_DMA_IRQHandler+0x6a4>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d031      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x678>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a23      	ldr	r2, [pc, #140]	; (80056d0 <HAL_DMA_IRQHandler+0x6a8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d02c      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x678>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a22      	ldr	r2, [pc, #136]	; (80056d4 <HAL_DMA_IRQHandler+0x6ac>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d027      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x678>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a20      	ldr	r2, [pc, #128]	; (80056d8 <HAL_DMA_IRQHandler+0x6b0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d022      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x678>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a1f      	ldr	r2, [pc, #124]	; (80056dc <HAL_DMA_IRQHandler+0x6b4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d01d      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x678>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a1d      	ldr	r2, [pc, #116]	; (80056e0 <HAL_DMA_IRQHandler+0x6b8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d018      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x678>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1c      	ldr	r2, [pc, #112]	; (80056e4 <HAL_DMA_IRQHandler+0x6bc>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x678>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a1a      	ldr	r2, [pc, #104]	; (80056e8 <HAL_DMA_IRQHandler+0x6c0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00e      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x678>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a19      	ldr	r2, [pc, #100]	; (80056ec <HAL_DMA_IRQHandler+0x6c4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d009      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x678>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a17      	ldr	r2, [pc, #92]	; (80056f0 <HAL_DMA_IRQHandler+0x6c8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_DMA_IRQHandler+0x678>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a16      	ldr	r2, [pc, #88]	; (80056f4 <HAL_DMA_IRQHandler+0x6cc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d12b      	bne.n	80056f8 <HAL_DMA_IRQHandler+0x6d0>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0310 	and.w	r3, r3, #16
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bf14      	ite	ne
 80056ae:	2301      	movne	r3, #1
 80056b0:	2300      	moveq	r3, #0
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	e02a      	b.n	800570c <HAL_DMA_IRQHandler+0x6e4>
 80056b6:	bf00      	nop
 80056b8:	40020010 	.word	0x40020010
 80056bc:	40020028 	.word	0x40020028
 80056c0:	40020040 	.word	0x40020040
 80056c4:	40020058 	.word	0x40020058
 80056c8:	40020070 	.word	0x40020070
 80056cc:	40020088 	.word	0x40020088
 80056d0:	400200a0 	.word	0x400200a0
 80056d4:	400200b8 	.word	0x400200b8
 80056d8:	40020410 	.word	0x40020410
 80056dc:	40020428 	.word	0x40020428
 80056e0:	40020440 	.word	0x40020440
 80056e4:	40020458 	.word	0x40020458
 80056e8:	40020470 	.word	0x40020470
 80056ec:	40020488 	.word	0x40020488
 80056f0:	400204a0 	.word	0x400204a0
 80056f4:	400204b8 	.word	0x400204b8
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	bf14      	ite	ne
 8005706:	2301      	movne	r3, #1
 8005708:	2300      	moveq	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8087 	beq.w	8005820 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2220      	movs	r2, #32
 800571c:	409a      	lsls	r2, r3
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b04      	cmp	r3, #4
 800572c:	d139      	bne.n	80057a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0216 	bic.w	r2, r2, #22
 800573c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695a      	ldr	r2, [r3, #20]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800574c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d103      	bne.n	800575e <HAL_DMA_IRQHandler+0x736>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800575a:	2b00      	cmp	r3, #0
 800575c:	d007      	beq.n	800576e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0208 	bic.w	r2, r2, #8
 800576c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	223f      	movs	r2, #63	; 0x3f
 8005778:	409a      	lsls	r2, r3
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 8382 	beq.w	8005e9c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	4798      	blx	r3
          }
          return;
 80057a0:	e37c      	b.n	8005e9c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d018      	beq.n	80057e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d108      	bne.n	80057d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d02c      	beq.n	8005820 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
 80057ce:	e027      	b.n	8005820 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d023      	beq.n	8005820 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	4798      	blx	r3
 80057e0:	e01e      	b.n	8005820 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10f      	bne.n	8005810 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0210 	bic.w	r2, r2, #16
 80057fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 833e 	beq.w	8005ea6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	f000 8088 	beq.w	8005948 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2204      	movs	r2, #4
 800583c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a89      	ldr	r2, [pc, #548]	; (8005a6c <HAL_DMA_IRQHandler+0xa44>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d04a      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x8b8>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a88      	ldr	r2, [pc, #544]	; (8005a70 <HAL_DMA_IRQHandler+0xa48>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d045      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x8b8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a86      	ldr	r2, [pc, #536]	; (8005a74 <HAL_DMA_IRQHandler+0xa4c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d040      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x8b8>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a85      	ldr	r2, [pc, #532]	; (8005a78 <HAL_DMA_IRQHandler+0xa50>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d03b      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x8b8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a83      	ldr	r2, [pc, #524]	; (8005a7c <HAL_DMA_IRQHandler+0xa54>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d036      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x8b8>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a82      	ldr	r2, [pc, #520]	; (8005a80 <HAL_DMA_IRQHandler+0xa58>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d031      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x8b8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a80      	ldr	r2, [pc, #512]	; (8005a84 <HAL_DMA_IRQHandler+0xa5c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d02c      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x8b8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a7f      	ldr	r2, [pc, #508]	; (8005a88 <HAL_DMA_IRQHandler+0xa60>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d027      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x8b8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a7d      	ldr	r2, [pc, #500]	; (8005a8c <HAL_DMA_IRQHandler+0xa64>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d022      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x8b8>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a7c      	ldr	r2, [pc, #496]	; (8005a90 <HAL_DMA_IRQHandler+0xa68>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d01d      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x8b8>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a7a      	ldr	r2, [pc, #488]	; (8005a94 <HAL_DMA_IRQHandler+0xa6c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d018      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x8b8>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a79      	ldr	r2, [pc, #484]	; (8005a98 <HAL_DMA_IRQHandler+0xa70>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d013      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x8b8>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a77      	ldr	r2, [pc, #476]	; (8005a9c <HAL_DMA_IRQHandler+0xa74>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00e      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x8b8>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a76      	ldr	r2, [pc, #472]	; (8005aa0 <HAL_DMA_IRQHandler+0xa78>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d009      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x8b8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a74      	ldr	r2, [pc, #464]	; (8005aa4 <HAL_DMA_IRQHandler+0xa7c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_DMA_IRQHandler+0x8b8>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a73      	ldr	r2, [pc, #460]	; (8005aa8 <HAL_DMA_IRQHandler+0xa80>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d108      	bne.n	80058f2 <HAL_DMA_IRQHandler+0x8ca>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0201 	bic.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	e007      	b.n	8005902 <HAL_DMA_IRQHandler+0x8da>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0201 	bic.w	r2, r2, #1
 8005900:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3301      	adds	r3, #1
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590a:	429a      	cmp	r2, r3
 800590c:	d307      	bcc.n	800591e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1f2      	bne.n	8005902 <HAL_DMA_IRQHandler+0x8da>
 800591c:	e000      	b.n	8005920 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800591e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2203      	movs	r2, #3
 8005932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005936:	e003      	b.n	8005940 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 82aa 	beq.w	8005ea6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	4798      	blx	r3
 800595a:	e2a4      	b.n	8005ea6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a52      	ldr	r2, [pc, #328]	; (8005aac <HAL_DMA_IRQHandler+0xa84>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d04a      	beq.n	80059fc <HAL_DMA_IRQHandler+0x9d4>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a51      	ldr	r2, [pc, #324]	; (8005ab0 <HAL_DMA_IRQHandler+0xa88>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d045      	beq.n	80059fc <HAL_DMA_IRQHandler+0x9d4>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a4f      	ldr	r2, [pc, #316]	; (8005ab4 <HAL_DMA_IRQHandler+0xa8c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d040      	beq.n	80059fc <HAL_DMA_IRQHandler+0x9d4>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a4e      	ldr	r2, [pc, #312]	; (8005ab8 <HAL_DMA_IRQHandler+0xa90>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d03b      	beq.n	80059fc <HAL_DMA_IRQHandler+0x9d4>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a4c      	ldr	r2, [pc, #304]	; (8005abc <HAL_DMA_IRQHandler+0xa94>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d036      	beq.n	80059fc <HAL_DMA_IRQHandler+0x9d4>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a4b      	ldr	r2, [pc, #300]	; (8005ac0 <HAL_DMA_IRQHandler+0xa98>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d031      	beq.n	80059fc <HAL_DMA_IRQHandler+0x9d4>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a49      	ldr	r2, [pc, #292]	; (8005ac4 <HAL_DMA_IRQHandler+0xa9c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d02c      	beq.n	80059fc <HAL_DMA_IRQHandler+0x9d4>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a48      	ldr	r2, [pc, #288]	; (8005ac8 <HAL_DMA_IRQHandler+0xaa0>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d027      	beq.n	80059fc <HAL_DMA_IRQHandler+0x9d4>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a46      	ldr	r2, [pc, #280]	; (8005acc <HAL_DMA_IRQHandler+0xaa4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d022      	beq.n	80059fc <HAL_DMA_IRQHandler+0x9d4>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a45      	ldr	r2, [pc, #276]	; (8005ad0 <HAL_DMA_IRQHandler+0xaa8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d01d      	beq.n	80059fc <HAL_DMA_IRQHandler+0x9d4>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a43      	ldr	r2, [pc, #268]	; (8005ad4 <HAL_DMA_IRQHandler+0xaac>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d018      	beq.n	80059fc <HAL_DMA_IRQHandler+0x9d4>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a42      	ldr	r2, [pc, #264]	; (8005ad8 <HAL_DMA_IRQHandler+0xab0>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d013      	beq.n	80059fc <HAL_DMA_IRQHandler+0x9d4>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a40      	ldr	r2, [pc, #256]	; (8005adc <HAL_DMA_IRQHandler+0xab4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00e      	beq.n	80059fc <HAL_DMA_IRQHandler+0x9d4>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a3f      	ldr	r2, [pc, #252]	; (8005ae0 <HAL_DMA_IRQHandler+0xab8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_DMA_IRQHandler+0x9d4>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a3d      	ldr	r2, [pc, #244]	; (8005ae4 <HAL_DMA_IRQHandler+0xabc>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_DMA_IRQHandler+0x9d4>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a3c      	ldr	r2, [pc, #240]	; (8005ae8 <HAL_DMA_IRQHandler+0xac0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d101      	bne.n	8005a00 <HAL_DMA_IRQHandler+0x9d8>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <HAL_DMA_IRQHandler+0x9da>
 8005a00:	2300      	movs	r3, #0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 824f 	beq.w	8005ea6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a14:	f003 031f 	and.w	r3, r3, #31
 8005a18:	2204      	movs	r2, #4
 8005a1a:	409a      	lsls	r2, r3
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80dd 	beq.w	8005be0 <HAL_DMA_IRQHandler+0xbb8>
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80d7 	beq.w	8005be0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	2204      	movs	r2, #4
 8005a3c:	409a      	lsls	r2, r3
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d059      	beq.n	8005b00 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d14a      	bne.n	8005aec <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 8220 	beq.w	8005ea0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a68:	e21a      	b.n	8005ea0 <HAL_DMA_IRQHandler+0xe78>
 8005a6a:	bf00      	nop
 8005a6c:	40020010 	.word	0x40020010
 8005a70:	40020028 	.word	0x40020028
 8005a74:	40020040 	.word	0x40020040
 8005a78:	40020058 	.word	0x40020058
 8005a7c:	40020070 	.word	0x40020070
 8005a80:	40020088 	.word	0x40020088
 8005a84:	400200a0 	.word	0x400200a0
 8005a88:	400200b8 	.word	0x400200b8
 8005a8c:	40020410 	.word	0x40020410
 8005a90:	40020428 	.word	0x40020428
 8005a94:	40020440 	.word	0x40020440
 8005a98:	40020458 	.word	0x40020458
 8005a9c:	40020470 	.word	0x40020470
 8005aa0:	40020488 	.word	0x40020488
 8005aa4:	400204a0 	.word	0x400204a0
 8005aa8:	400204b8 	.word	0x400204b8
 8005aac:	48022c08 	.word	0x48022c08
 8005ab0:	48022c1c 	.word	0x48022c1c
 8005ab4:	48022c30 	.word	0x48022c30
 8005ab8:	48022c44 	.word	0x48022c44
 8005abc:	48022c58 	.word	0x48022c58
 8005ac0:	48022c6c 	.word	0x48022c6c
 8005ac4:	48022c80 	.word	0x48022c80
 8005ac8:	48022c94 	.word	0x48022c94
 8005acc:	58025408 	.word	0x58025408
 8005ad0:	5802541c 	.word	0x5802541c
 8005ad4:	58025430 	.word	0x58025430
 8005ad8:	58025444 	.word	0x58025444
 8005adc:	58025458 	.word	0x58025458
 8005ae0:	5802546c 	.word	0x5802546c
 8005ae4:	58025480 	.word	0x58025480
 8005ae8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 81d5 	beq.w	8005ea0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005afe:	e1cf      	b.n	8005ea0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d160      	bne.n	8005bcc <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a7f      	ldr	r2, [pc, #508]	; (8005d0c <HAL_DMA_IRQHandler+0xce4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d04a      	beq.n	8005baa <HAL_DMA_IRQHandler+0xb82>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a7d      	ldr	r2, [pc, #500]	; (8005d10 <HAL_DMA_IRQHandler+0xce8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d045      	beq.n	8005baa <HAL_DMA_IRQHandler+0xb82>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a7c      	ldr	r2, [pc, #496]	; (8005d14 <HAL_DMA_IRQHandler+0xcec>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d040      	beq.n	8005baa <HAL_DMA_IRQHandler+0xb82>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a7a      	ldr	r2, [pc, #488]	; (8005d18 <HAL_DMA_IRQHandler+0xcf0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d03b      	beq.n	8005baa <HAL_DMA_IRQHandler+0xb82>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a79      	ldr	r2, [pc, #484]	; (8005d1c <HAL_DMA_IRQHandler+0xcf4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d036      	beq.n	8005baa <HAL_DMA_IRQHandler+0xb82>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a77      	ldr	r2, [pc, #476]	; (8005d20 <HAL_DMA_IRQHandler+0xcf8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d031      	beq.n	8005baa <HAL_DMA_IRQHandler+0xb82>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a76      	ldr	r2, [pc, #472]	; (8005d24 <HAL_DMA_IRQHandler+0xcfc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d02c      	beq.n	8005baa <HAL_DMA_IRQHandler+0xb82>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a74      	ldr	r2, [pc, #464]	; (8005d28 <HAL_DMA_IRQHandler+0xd00>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d027      	beq.n	8005baa <HAL_DMA_IRQHandler+0xb82>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a73      	ldr	r2, [pc, #460]	; (8005d2c <HAL_DMA_IRQHandler+0xd04>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d022      	beq.n	8005baa <HAL_DMA_IRQHandler+0xb82>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a71      	ldr	r2, [pc, #452]	; (8005d30 <HAL_DMA_IRQHandler+0xd08>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01d      	beq.n	8005baa <HAL_DMA_IRQHandler+0xb82>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a70      	ldr	r2, [pc, #448]	; (8005d34 <HAL_DMA_IRQHandler+0xd0c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d018      	beq.n	8005baa <HAL_DMA_IRQHandler+0xb82>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a6e      	ldr	r2, [pc, #440]	; (8005d38 <HAL_DMA_IRQHandler+0xd10>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <HAL_DMA_IRQHandler+0xb82>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a6d      	ldr	r2, [pc, #436]	; (8005d3c <HAL_DMA_IRQHandler+0xd14>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00e      	beq.n	8005baa <HAL_DMA_IRQHandler+0xb82>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a6b      	ldr	r2, [pc, #428]	; (8005d40 <HAL_DMA_IRQHandler+0xd18>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d009      	beq.n	8005baa <HAL_DMA_IRQHandler+0xb82>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a6a      	ldr	r2, [pc, #424]	; (8005d44 <HAL_DMA_IRQHandler+0xd1c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_DMA_IRQHandler+0xb82>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a68      	ldr	r2, [pc, #416]	; (8005d48 <HAL_DMA_IRQHandler+0xd20>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d108      	bne.n	8005bbc <HAL_DMA_IRQHandler+0xb94>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0208 	bic.w	r2, r2, #8
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	e007      	b.n	8005bcc <HAL_DMA_IRQHandler+0xba4>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0204 	bic.w	r2, r2, #4
 8005bca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 8165 	beq.w	8005ea0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bde:	e15f      	b.n	8005ea0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	2202      	movs	r2, #2
 8005bea:	409a      	lsls	r2, r3
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80c5 	beq.w	8005d80 <HAL_DMA_IRQHandler+0xd58>
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 80bf 	beq.w	8005d80 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c06:	f003 031f 	and.w	r3, r3, #31
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	409a      	lsls	r2, r3
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d018      	beq.n	8005c4e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 813a 	beq.w	8005ea4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c38:	e134      	b.n	8005ea4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 8130 	beq.w	8005ea4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c4c:	e12a      	b.n	8005ea4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f040 8089 	bne.w	8005d6c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a2b      	ldr	r2, [pc, #172]	; (8005d0c <HAL_DMA_IRQHandler+0xce4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d04a      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xcd2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a29      	ldr	r2, [pc, #164]	; (8005d10 <HAL_DMA_IRQHandler+0xce8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d045      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xcd2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a28      	ldr	r2, [pc, #160]	; (8005d14 <HAL_DMA_IRQHandler+0xcec>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d040      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xcd2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a26      	ldr	r2, [pc, #152]	; (8005d18 <HAL_DMA_IRQHandler+0xcf0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d03b      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xcd2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a25      	ldr	r2, [pc, #148]	; (8005d1c <HAL_DMA_IRQHandler+0xcf4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d036      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xcd2>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a23      	ldr	r2, [pc, #140]	; (8005d20 <HAL_DMA_IRQHandler+0xcf8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d031      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xcd2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a22      	ldr	r2, [pc, #136]	; (8005d24 <HAL_DMA_IRQHandler+0xcfc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d02c      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xcd2>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a20      	ldr	r2, [pc, #128]	; (8005d28 <HAL_DMA_IRQHandler+0xd00>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d027      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xcd2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a1f      	ldr	r2, [pc, #124]	; (8005d2c <HAL_DMA_IRQHandler+0xd04>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d022      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xcd2>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a1d      	ldr	r2, [pc, #116]	; (8005d30 <HAL_DMA_IRQHandler+0xd08>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d01d      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xcd2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a1c      	ldr	r2, [pc, #112]	; (8005d34 <HAL_DMA_IRQHandler+0xd0c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d018      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xcd2>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1a      	ldr	r2, [pc, #104]	; (8005d38 <HAL_DMA_IRQHandler+0xd10>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d013      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xcd2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a19      	ldr	r2, [pc, #100]	; (8005d3c <HAL_DMA_IRQHandler+0xd14>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d00e      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xcd2>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a17      	ldr	r2, [pc, #92]	; (8005d40 <HAL_DMA_IRQHandler+0xd18>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d009      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xcd2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a16      	ldr	r2, [pc, #88]	; (8005d44 <HAL_DMA_IRQHandler+0xd1c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d004      	beq.n	8005cfa <HAL_DMA_IRQHandler+0xcd2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a14      	ldr	r2, [pc, #80]	; (8005d48 <HAL_DMA_IRQHandler+0xd20>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d128      	bne.n	8005d4c <HAL_DMA_IRQHandler+0xd24>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0214 	bic.w	r2, r2, #20
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	e027      	b.n	8005d5c <HAL_DMA_IRQHandler+0xd34>
 8005d0c:	40020010 	.word	0x40020010
 8005d10:	40020028 	.word	0x40020028
 8005d14:	40020040 	.word	0x40020040
 8005d18:	40020058 	.word	0x40020058
 8005d1c:	40020070 	.word	0x40020070
 8005d20:	40020088 	.word	0x40020088
 8005d24:	400200a0 	.word	0x400200a0
 8005d28:	400200b8 	.word	0x400200b8
 8005d2c:	40020410 	.word	0x40020410
 8005d30:	40020428 	.word	0x40020428
 8005d34:	40020440 	.word	0x40020440
 8005d38:	40020458 	.word	0x40020458
 8005d3c:	40020470 	.word	0x40020470
 8005d40:	40020488 	.word	0x40020488
 8005d44:	400204a0 	.word	0x400204a0
 8005d48:	400204b8 	.word	0x400204b8
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 020a 	bic.w	r2, r2, #10
 8005d5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 8097 	beq.w	8005ea4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d7e:	e091      	b.n	8005ea4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d84:	f003 031f 	and.w	r3, r3, #31
 8005d88:	2208      	movs	r2, #8
 8005d8a:	409a      	lsls	r2, r3
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 8088 	beq.w	8005ea6 <HAL_DMA_IRQHandler+0xe7e>
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f003 0308 	and.w	r3, r3, #8
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8082 	beq.w	8005ea6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a41      	ldr	r2, [pc, #260]	; (8005eac <HAL_DMA_IRQHandler+0xe84>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d04a      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xe1a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a3f      	ldr	r2, [pc, #252]	; (8005eb0 <HAL_DMA_IRQHandler+0xe88>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d045      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xe1a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a3e      	ldr	r2, [pc, #248]	; (8005eb4 <HAL_DMA_IRQHandler+0xe8c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d040      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xe1a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a3c      	ldr	r2, [pc, #240]	; (8005eb8 <HAL_DMA_IRQHandler+0xe90>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d03b      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xe1a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a3b      	ldr	r2, [pc, #236]	; (8005ebc <HAL_DMA_IRQHandler+0xe94>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d036      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xe1a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a39      	ldr	r2, [pc, #228]	; (8005ec0 <HAL_DMA_IRQHandler+0xe98>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d031      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xe1a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a38      	ldr	r2, [pc, #224]	; (8005ec4 <HAL_DMA_IRQHandler+0xe9c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d02c      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xe1a>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a36      	ldr	r2, [pc, #216]	; (8005ec8 <HAL_DMA_IRQHandler+0xea0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d027      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xe1a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a35      	ldr	r2, [pc, #212]	; (8005ecc <HAL_DMA_IRQHandler+0xea4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d022      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xe1a>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a33      	ldr	r2, [pc, #204]	; (8005ed0 <HAL_DMA_IRQHandler+0xea8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d01d      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xe1a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a32      	ldr	r2, [pc, #200]	; (8005ed4 <HAL_DMA_IRQHandler+0xeac>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d018      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xe1a>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a30      	ldr	r2, [pc, #192]	; (8005ed8 <HAL_DMA_IRQHandler+0xeb0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d013      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xe1a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a2f      	ldr	r2, [pc, #188]	; (8005edc <HAL_DMA_IRQHandler+0xeb4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00e      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xe1a>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a2d      	ldr	r2, [pc, #180]	; (8005ee0 <HAL_DMA_IRQHandler+0xeb8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d009      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xe1a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a2c      	ldr	r2, [pc, #176]	; (8005ee4 <HAL_DMA_IRQHandler+0xebc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d004      	beq.n	8005e42 <HAL_DMA_IRQHandler+0xe1a>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ee8 <HAL_DMA_IRQHandler+0xec0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d108      	bne.n	8005e54 <HAL_DMA_IRQHandler+0xe2c>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 021c 	bic.w	r2, r2, #28
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	e007      	b.n	8005e64 <HAL_DMA_IRQHandler+0xe3c>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 020e 	bic.w	r2, r2, #14
 8005e62:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e68:	f003 031f 	and.w	r3, r3, #31
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	409a      	lsls	r2, r3
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d009      	beq.n	8005ea6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	4798      	blx	r3
 8005e9a:	e004      	b.n	8005ea6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005e9c:	bf00      	nop
 8005e9e:	e002      	b.n	8005ea6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ea0:	bf00      	nop
 8005ea2:	e000      	b.n	8005ea6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ea4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ea6:	3728      	adds	r7, #40	; 0x28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40020010 	.word	0x40020010
 8005eb0:	40020028 	.word	0x40020028
 8005eb4:	40020040 	.word	0x40020040
 8005eb8:	40020058 	.word	0x40020058
 8005ebc:	40020070 	.word	0x40020070
 8005ec0:	40020088 	.word	0x40020088
 8005ec4:	400200a0 	.word	0x400200a0
 8005ec8:	400200b8 	.word	0x400200b8
 8005ecc:	40020410 	.word	0x40020410
 8005ed0:	40020428 	.word	0x40020428
 8005ed4:	40020440 	.word	0x40020440
 8005ed8:	40020458 	.word	0x40020458
 8005edc:	40020470 	.word	0x40020470
 8005ee0:	40020488 	.word	0x40020488
 8005ee4:	400204a0 	.word	0x400204a0
 8005ee8:	400204b8 	.word	0x400204b8

08005eec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f04:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a7f      	ldr	r2, [pc, #508]	; (8006108 <DMA_SetConfig+0x21c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d072      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a7d      	ldr	r2, [pc, #500]	; (800610c <DMA_SetConfig+0x220>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d06d      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a7c      	ldr	r2, [pc, #496]	; (8006110 <DMA_SetConfig+0x224>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d068      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a7a      	ldr	r2, [pc, #488]	; (8006114 <DMA_SetConfig+0x228>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d063      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a79      	ldr	r2, [pc, #484]	; (8006118 <DMA_SetConfig+0x22c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d05e      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a77      	ldr	r2, [pc, #476]	; (800611c <DMA_SetConfig+0x230>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d059      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a76      	ldr	r2, [pc, #472]	; (8006120 <DMA_SetConfig+0x234>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d054      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a74      	ldr	r2, [pc, #464]	; (8006124 <DMA_SetConfig+0x238>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d04f      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a73      	ldr	r2, [pc, #460]	; (8006128 <DMA_SetConfig+0x23c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d04a      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a71      	ldr	r2, [pc, #452]	; (800612c <DMA_SetConfig+0x240>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d045      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a70      	ldr	r2, [pc, #448]	; (8006130 <DMA_SetConfig+0x244>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d040      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a6e      	ldr	r2, [pc, #440]	; (8006134 <DMA_SetConfig+0x248>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d03b      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a6d      	ldr	r2, [pc, #436]	; (8006138 <DMA_SetConfig+0x24c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d036      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a6b      	ldr	r2, [pc, #428]	; (800613c <DMA_SetConfig+0x250>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d031      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a6a      	ldr	r2, [pc, #424]	; (8006140 <DMA_SetConfig+0x254>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d02c      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a68      	ldr	r2, [pc, #416]	; (8006144 <DMA_SetConfig+0x258>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d027      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a67      	ldr	r2, [pc, #412]	; (8006148 <DMA_SetConfig+0x25c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d022      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a65      	ldr	r2, [pc, #404]	; (800614c <DMA_SetConfig+0x260>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d01d      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a64      	ldr	r2, [pc, #400]	; (8006150 <DMA_SetConfig+0x264>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d018      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a62      	ldr	r2, [pc, #392]	; (8006154 <DMA_SetConfig+0x268>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d013      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a61      	ldr	r2, [pc, #388]	; (8006158 <DMA_SetConfig+0x26c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d00e      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a5f      	ldr	r2, [pc, #380]	; (800615c <DMA_SetConfig+0x270>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d009      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a5e      	ldr	r2, [pc, #376]	; (8006160 <DMA_SetConfig+0x274>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d004      	beq.n	8005ff6 <DMA_SetConfig+0x10a>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a5c      	ldr	r2, [pc, #368]	; (8006164 <DMA_SetConfig+0x278>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d101      	bne.n	8005ffa <DMA_SetConfig+0x10e>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <DMA_SetConfig+0x110>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00d      	beq.n	800601c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006008:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800601a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a39      	ldr	r2, [pc, #228]	; (8006108 <DMA_SetConfig+0x21c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d04a      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a38      	ldr	r2, [pc, #224]	; (800610c <DMA_SetConfig+0x220>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d045      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a36      	ldr	r2, [pc, #216]	; (8006110 <DMA_SetConfig+0x224>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d040      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a35      	ldr	r2, [pc, #212]	; (8006114 <DMA_SetConfig+0x228>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d03b      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a33      	ldr	r2, [pc, #204]	; (8006118 <DMA_SetConfig+0x22c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d036      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a32      	ldr	r2, [pc, #200]	; (800611c <DMA_SetConfig+0x230>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d031      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a30      	ldr	r2, [pc, #192]	; (8006120 <DMA_SetConfig+0x234>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d02c      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a2f      	ldr	r2, [pc, #188]	; (8006124 <DMA_SetConfig+0x238>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d027      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a2d      	ldr	r2, [pc, #180]	; (8006128 <DMA_SetConfig+0x23c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d022      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a2c      	ldr	r2, [pc, #176]	; (800612c <DMA_SetConfig+0x240>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d01d      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a2a      	ldr	r2, [pc, #168]	; (8006130 <DMA_SetConfig+0x244>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d018      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a29      	ldr	r2, [pc, #164]	; (8006134 <DMA_SetConfig+0x248>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d013      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a27      	ldr	r2, [pc, #156]	; (8006138 <DMA_SetConfig+0x24c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00e      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a26      	ldr	r2, [pc, #152]	; (800613c <DMA_SetConfig+0x250>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d009      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a24      	ldr	r2, [pc, #144]	; (8006140 <DMA_SetConfig+0x254>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d004      	beq.n	80060bc <DMA_SetConfig+0x1d0>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a23      	ldr	r2, [pc, #140]	; (8006144 <DMA_SetConfig+0x258>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d101      	bne.n	80060c0 <DMA_SetConfig+0x1d4>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <DMA_SetConfig+0x1d6>
 80060c0:	2300      	movs	r3, #0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d059      	beq.n	800617a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	223f      	movs	r2, #63	; 0x3f
 80060d0:	409a      	lsls	r2, r3
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b40      	cmp	r3, #64	; 0x40
 80060f4:	d138      	bne.n	8006168 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006106:	e0ae      	b.n	8006266 <DMA_SetConfig+0x37a>
 8006108:	40020010 	.word	0x40020010
 800610c:	40020028 	.word	0x40020028
 8006110:	40020040 	.word	0x40020040
 8006114:	40020058 	.word	0x40020058
 8006118:	40020070 	.word	0x40020070
 800611c:	40020088 	.word	0x40020088
 8006120:	400200a0 	.word	0x400200a0
 8006124:	400200b8 	.word	0x400200b8
 8006128:	40020410 	.word	0x40020410
 800612c:	40020428 	.word	0x40020428
 8006130:	40020440 	.word	0x40020440
 8006134:	40020458 	.word	0x40020458
 8006138:	40020470 	.word	0x40020470
 800613c:	40020488 	.word	0x40020488
 8006140:	400204a0 	.word	0x400204a0
 8006144:	400204b8 	.word	0x400204b8
 8006148:	58025408 	.word	0x58025408
 800614c:	5802541c 	.word	0x5802541c
 8006150:	58025430 	.word	0x58025430
 8006154:	58025444 	.word	0x58025444
 8006158:	58025458 	.word	0x58025458
 800615c:	5802546c 	.word	0x5802546c
 8006160:	58025480 	.word	0x58025480
 8006164:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	60da      	str	r2, [r3, #12]
}
 8006178:	e075      	b.n	8006266 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a3d      	ldr	r2, [pc, #244]	; (8006274 <DMA_SetConfig+0x388>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d04a      	beq.n	800621a <DMA_SetConfig+0x32e>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a3b      	ldr	r2, [pc, #236]	; (8006278 <DMA_SetConfig+0x38c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d045      	beq.n	800621a <DMA_SetConfig+0x32e>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a3a      	ldr	r2, [pc, #232]	; (800627c <DMA_SetConfig+0x390>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d040      	beq.n	800621a <DMA_SetConfig+0x32e>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a38      	ldr	r2, [pc, #224]	; (8006280 <DMA_SetConfig+0x394>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d03b      	beq.n	800621a <DMA_SetConfig+0x32e>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a37      	ldr	r2, [pc, #220]	; (8006284 <DMA_SetConfig+0x398>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d036      	beq.n	800621a <DMA_SetConfig+0x32e>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a35      	ldr	r2, [pc, #212]	; (8006288 <DMA_SetConfig+0x39c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d031      	beq.n	800621a <DMA_SetConfig+0x32e>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a34      	ldr	r2, [pc, #208]	; (800628c <DMA_SetConfig+0x3a0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d02c      	beq.n	800621a <DMA_SetConfig+0x32e>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a32      	ldr	r2, [pc, #200]	; (8006290 <DMA_SetConfig+0x3a4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d027      	beq.n	800621a <DMA_SetConfig+0x32e>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a31      	ldr	r2, [pc, #196]	; (8006294 <DMA_SetConfig+0x3a8>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d022      	beq.n	800621a <DMA_SetConfig+0x32e>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a2f      	ldr	r2, [pc, #188]	; (8006298 <DMA_SetConfig+0x3ac>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d01d      	beq.n	800621a <DMA_SetConfig+0x32e>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a2e      	ldr	r2, [pc, #184]	; (800629c <DMA_SetConfig+0x3b0>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d018      	beq.n	800621a <DMA_SetConfig+0x32e>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a2c      	ldr	r2, [pc, #176]	; (80062a0 <DMA_SetConfig+0x3b4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d013      	beq.n	800621a <DMA_SetConfig+0x32e>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a2b      	ldr	r2, [pc, #172]	; (80062a4 <DMA_SetConfig+0x3b8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00e      	beq.n	800621a <DMA_SetConfig+0x32e>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a29      	ldr	r2, [pc, #164]	; (80062a8 <DMA_SetConfig+0x3bc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d009      	beq.n	800621a <DMA_SetConfig+0x32e>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a28      	ldr	r2, [pc, #160]	; (80062ac <DMA_SetConfig+0x3c0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d004      	beq.n	800621a <DMA_SetConfig+0x32e>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a26      	ldr	r2, [pc, #152]	; (80062b0 <DMA_SetConfig+0x3c4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d101      	bne.n	800621e <DMA_SetConfig+0x332>
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <DMA_SetConfig+0x334>
 800621e:	2300      	movs	r3, #0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d020      	beq.n	8006266 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006228:	f003 031f 	and.w	r3, r3, #31
 800622c:	2201      	movs	r2, #1
 800622e:	409a      	lsls	r2, r3
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	2b40      	cmp	r3, #64	; 0x40
 8006242:	d108      	bne.n	8006256 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	60da      	str	r2, [r3, #12]
}
 8006254:	e007      	b.n	8006266 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	60da      	str	r2, [r3, #12]
}
 8006266:	bf00      	nop
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	48022c08 	.word	0x48022c08
 8006278:	48022c1c 	.word	0x48022c1c
 800627c:	48022c30 	.word	0x48022c30
 8006280:	48022c44 	.word	0x48022c44
 8006284:	48022c58 	.word	0x48022c58
 8006288:	48022c6c 	.word	0x48022c6c
 800628c:	48022c80 	.word	0x48022c80
 8006290:	48022c94 	.word	0x48022c94
 8006294:	58025408 	.word	0x58025408
 8006298:	5802541c 	.word	0x5802541c
 800629c:	58025430 	.word	0x58025430
 80062a0:	58025444 	.word	0x58025444
 80062a4:	58025458 	.word	0x58025458
 80062a8:	5802546c 	.word	0x5802546c
 80062ac:	58025480 	.word	0x58025480
 80062b0:	58025494 	.word	0x58025494

080062b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a42      	ldr	r2, [pc, #264]	; (80063cc <DMA_CalcBaseAndBitshift+0x118>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d04a      	beq.n	800635c <DMA_CalcBaseAndBitshift+0xa8>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a41      	ldr	r2, [pc, #260]	; (80063d0 <DMA_CalcBaseAndBitshift+0x11c>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d045      	beq.n	800635c <DMA_CalcBaseAndBitshift+0xa8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a3f      	ldr	r2, [pc, #252]	; (80063d4 <DMA_CalcBaseAndBitshift+0x120>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d040      	beq.n	800635c <DMA_CalcBaseAndBitshift+0xa8>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a3e      	ldr	r2, [pc, #248]	; (80063d8 <DMA_CalcBaseAndBitshift+0x124>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d03b      	beq.n	800635c <DMA_CalcBaseAndBitshift+0xa8>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a3c      	ldr	r2, [pc, #240]	; (80063dc <DMA_CalcBaseAndBitshift+0x128>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d036      	beq.n	800635c <DMA_CalcBaseAndBitshift+0xa8>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a3b      	ldr	r2, [pc, #236]	; (80063e0 <DMA_CalcBaseAndBitshift+0x12c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d031      	beq.n	800635c <DMA_CalcBaseAndBitshift+0xa8>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a39      	ldr	r2, [pc, #228]	; (80063e4 <DMA_CalcBaseAndBitshift+0x130>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d02c      	beq.n	800635c <DMA_CalcBaseAndBitshift+0xa8>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a38      	ldr	r2, [pc, #224]	; (80063e8 <DMA_CalcBaseAndBitshift+0x134>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d027      	beq.n	800635c <DMA_CalcBaseAndBitshift+0xa8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a36      	ldr	r2, [pc, #216]	; (80063ec <DMA_CalcBaseAndBitshift+0x138>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d022      	beq.n	800635c <DMA_CalcBaseAndBitshift+0xa8>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a35      	ldr	r2, [pc, #212]	; (80063f0 <DMA_CalcBaseAndBitshift+0x13c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d01d      	beq.n	800635c <DMA_CalcBaseAndBitshift+0xa8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a33      	ldr	r2, [pc, #204]	; (80063f4 <DMA_CalcBaseAndBitshift+0x140>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d018      	beq.n	800635c <DMA_CalcBaseAndBitshift+0xa8>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a32      	ldr	r2, [pc, #200]	; (80063f8 <DMA_CalcBaseAndBitshift+0x144>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d013      	beq.n	800635c <DMA_CalcBaseAndBitshift+0xa8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a30      	ldr	r2, [pc, #192]	; (80063fc <DMA_CalcBaseAndBitshift+0x148>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00e      	beq.n	800635c <DMA_CalcBaseAndBitshift+0xa8>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a2f      	ldr	r2, [pc, #188]	; (8006400 <DMA_CalcBaseAndBitshift+0x14c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d009      	beq.n	800635c <DMA_CalcBaseAndBitshift+0xa8>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a2d      	ldr	r2, [pc, #180]	; (8006404 <DMA_CalcBaseAndBitshift+0x150>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d004      	beq.n	800635c <DMA_CalcBaseAndBitshift+0xa8>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a2c      	ldr	r2, [pc, #176]	; (8006408 <DMA_CalcBaseAndBitshift+0x154>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d101      	bne.n	8006360 <DMA_CalcBaseAndBitshift+0xac>
 800635c:	2301      	movs	r3, #1
 800635e:	e000      	b.n	8006362 <DMA_CalcBaseAndBitshift+0xae>
 8006360:	2300      	movs	r3, #0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d024      	beq.n	80063b0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	3b10      	subs	r3, #16
 800636e:	4a27      	ldr	r2, [pc, #156]	; (800640c <DMA_CalcBaseAndBitshift+0x158>)
 8006370:	fba2 2303 	umull	r2, r3, r2, r3
 8006374:	091b      	lsrs	r3, r3, #4
 8006376:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	4a24      	ldr	r2, [pc, #144]	; (8006410 <DMA_CalcBaseAndBitshift+0x15c>)
 8006380:	5cd3      	ldrb	r3, [r2, r3]
 8006382:	461a      	mov	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2b03      	cmp	r3, #3
 800638c:	d908      	bls.n	80063a0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	4b1f      	ldr	r3, [pc, #124]	; (8006414 <DMA_CalcBaseAndBitshift+0x160>)
 8006396:	4013      	ands	r3, r2
 8006398:	1d1a      	adds	r2, r3, #4
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	659a      	str	r2, [r3, #88]	; 0x58
 800639e:	e00d      	b.n	80063bc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	461a      	mov	r2, r3
 80063a6:	4b1b      	ldr	r3, [pc, #108]	; (8006414 <DMA_CalcBaseAndBitshift+0x160>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	6593      	str	r3, [r2, #88]	; 0x58
 80063ae:	e005      	b.n	80063bc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	40020010 	.word	0x40020010
 80063d0:	40020028 	.word	0x40020028
 80063d4:	40020040 	.word	0x40020040
 80063d8:	40020058 	.word	0x40020058
 80063dc:	40020070 	.word	0x40020070
 80063e0:	40020088 	.word	0x40020088
 80063e4:	400200a0 	.word	0x400200a0
 80063e8:	400200b8 	.word	0x400200b8
 80063ec:	40020410 	.word	0x40020410
 80063f0:	40020428 	.word	0x40020428
 80063f4:	40020440 	.word	0x40020440
 80063f8:	40020458 	.word	0x40020458
 80063fc:	40020470 	.word	0x40020470
 8006400:	40020488 	.word	0x40020488
 8006404:	400204a0 	.word	0x400204a0
 8006408:	400204b8 	.word	0x400204b8
 800640c:	aaaaaaab 	.word	0xaaaaaaab
 8006410:	0800bb00 	.word	0x0800bb00
 8006414:	fffffc00 	.word	0xfffffc00

08006418 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d120      	bne.n	800646e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006430:	2b03      	cmp	r3, #3
 8006432:	d858      	bhi.n	80064e6 <DMA_CheckFifoParam+0xce>
 8006434:	a201      	add	r2, pc, #4	; (adr r2, 800643c <DMA_CheckFifoParam+0x24>)
 8006436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643a:	bf00      	nop
 800643c:	0800644d 	.word	0x0800644d
 8006440:	0800645f 	.word	0x0800645f
 8006444:	0800644d 	.word	0x0800644d
 8006448:	080064e7 	.word	0x080064e7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d048      	beq.n	80064ea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800645c:	e045      	b.n	80064ea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006466:	d142      	bne.n	80064ee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800646c:	e03f      	b.n	80064ee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006476:	d123      	bne.n	80064c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647c:	2b03      	cmp	r3, #3
 800647e:	d838      	bhi.n	80064f2 <DMA_CheckFifoParam+0xda>
 8006480:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <DMA_CheckFifoParam+0x70>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	08006499 	.word	0x08006499
 800648c:	0800649f 	.word	0x0800649f
 8006490:	08006499 	.word	0x08006499
 8006494:	080064b1 	.word	0x080064b1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]
        break;
 800649c:	e030      	b.n	8006500 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d025      	beq.n	80064f6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064ae:	e022      	b.n	80064f6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064b8:	d11f      	bne.n	80064fa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064be:	e01c      	b.n	80064fa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d902      	bls.n	80064ce <DMA_CheckFifoParam+0xb6>
 80064c8:	2b03      	cmp	r3, #3
 80064ca:	d003      	beq.n	80064d4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80064cc:	e018      	b.n	8006500 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	73fb      	strb	r3, [r7, #15]
        break;
 80064d2:	e015      	b.n	8006500 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00e      	beq.n	80064fe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
    break;
 80064e4:	e00b      	b.n	80064fe <DMA_CheckFifoParam+0xe6>
        break;
 80064e6:	bf00      	nop
 80064e8:	e00a      	b.n	8006500 <DMA_CheckFifoParam+0xe8>
        break;
 80064ea:	bf00      	nop
 80064ec:	e008      	b.n	8006500 <DMA_CheckFifoParam+0xe8>
        break;
 80064ee:	bf00      	nop
 80064f0:	e006      	b.n	8006500 <DMA_CheckFifoParam+0xe8>
        break;
 80064f2:	bf00      	nop
 80064f4:	e004      	b.n	8006500 <DMA_CheckFifoParam+0xe8>
        break;
 80064f6:	bf00      	nop
 80064f8:	e002      	b.n	8006500 <DMA_CheckFifoParam+0xe8>
        break;
 80064fa:	bf00      	nop
 80064fc:	e000      	b.n	8006500 <DMA_CheckFifoParam+0xe8>
    break;
 80064fe:	bf00      	nop
    }
  }

  return status;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop

08006510 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a38      	ldr	r2, [pc, #224]	; (8006604 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d022      	beq.n	800656e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a36      	ldr	r2, [pc, #216]	; (8006608 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d01d      	beq.n	800656e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a35      	ldr	r2, [pc, #212]	; (800660c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d018      	beq.n	800656e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a33      	ldr	r2, [pc, #204]	; (8006610 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d013      	beq.n	800656e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a32      	ldr	r2, [pc, #200]	; (8006614 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00e      	beq.n	800656e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a30      	ldr	r2, [pc, #192]	; (8006618 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d009      	beq.n	800656e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a2f      	ldr	r2, [pc, #188]	; (800661c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d004      	beq.n	800656e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a2d      	ldr	r2, [pc, #180]	; (8006620 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d101      	bne.n	8006572 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006572:	2300      	movs	r3, #0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01a      	beq.n	80065ae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	b2db      	uxtb	r3, r3
 800657e:	3b08      	subs	r3, #8
 8006580:	4a28      	ldr	r2, [pc, #160]	; (8006624 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	091b      	lsrs	r3, r3, #4
 8006588:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4b26      	ldr	r3, [pc, #152]	; (8006628 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	461a      	mov	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a24      	ldr	r2, [pc, #144]	; (800662c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800659c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	2201      	movs	r2, #1
 80065a6:	409a      	lsls	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80065ac:	e024      	b.n	80065f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	3b10      	subs	r3, #16
 80065b6:	4a1e      	ldr	r2, [pc, #120]	; (8006630 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80065b8:	fba2 2303 	umull	r2, r3, r2, r3
 80065bc:	091b      	lsrs	r3, r3, #4
 80065be:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4a1c      	ldr	r2, [pc, #112]	; (8006634 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d806      	bhi.n	80065d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4a1b      	ldr	r2, [pc, #108]	; (8006638 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d902      	bls.n	80065d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3308      	adds	r3, #8
 80065d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4b18      	ldr	r3, [pc, #96]	; (800663c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	461a      	mov	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a16      	ldr	r2, [pc, #88]	; (8006640 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80065e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f003 031f 	and.w	r3, r3, #31
 80065f0:	2201      	movs	r2, #1
 80065f2:	409a      	lsls	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80065f8:	bf00      	nop
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	58025408 	.word	0x58025408
 8006608:	5802541c 	.word	0x5802541c
 800660c:	58025430 	.word	0x58025430
 8006610:	58025444 	.word	0x58025444
 8006614:	58025458 	.word	0x58025458
 8006618:	5802546c 	.word	0x5802546c
 800661c:	58025480 	.word	0x58025480
 8006620:	58025494 	.word	0x58025494
 8006624:	cccccccd 	.word	0xcccccccd
 8006628:	16009600 	.word	0x16009600
 800662c:	58025880 	.word	0x58025880
 8006630:	aaaaaaab 	.word	0xaaaaaaab
 8006634:	400204b8 	.word	0x400204b8
 8006638:	4002040f 	.word	0x4002040f
 800663c:	10008200 	.word	0x10008200
 8006640:	40020880 	.word	0x40020880

08006644 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d04a      	beq.n	80066f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d847      	bhi.n	80066f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a25      	ldr	r2, [pc, #148]	; (80066fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d022      	beq.n	80066b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a24      	ldr	r2, [pc, #144]	; (8006700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d01d      	beq.n	80066b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a22      	ldr	r2, [pc, #136]	; (8006704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d018      	beq.n	80066b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a21      	ldr	r2, [pc, #132]	; (8006708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d013      	beq.n	80066b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1f      	ldr	r2, [pc, #124]	; (800670c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d00e      	beq.n	80066b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a1e      	ldr	r2, [pc, #120]	; (8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d009      	beq.n	80066b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a1c      	ldr	r2, [pc, #112]	; (8006714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d004      	beq.n	80066b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a1b      	ldr	r2, [pc, #108]	; (8006718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d101      	bne.n	80066b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80066b0:	2301      	movs	r3, #1
 80066b2:	e000      	b.n	80066b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80066b4:	2300      	movs	r3, #0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4b17      	ldr	r3, [pc, #92]	; (800671c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	461a      	mov	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a15      	ldr	r2, [pc, #84]	; (8006720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80066cc:	671a      	str	r2, [r3, #112]	; 0x70
 80066ce:	e009      	b.n	80066e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4b14      	ldr	r3, [pc, #80]	; (8006724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	461a      	mov	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a11      	ldr	r2, [pc, #68]	; (8006728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80066e2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	2201      	movs	r2, #1
 80066ea:	409a      	lsls	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80066f0:	bf00      	nop
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	58025408 	.word	0x58025408
 8006700:	5802541c 	.word	0x5802541c
 8006704:	58025430 	.word	0x58025430
 8006708:	58025444 	.word	0x58025444
 800670c:	58025458 	.word	0x58025458
 8006710:	5802546c 	.word	0x5802546c
 8006714:	58025480 	.word	0x58025480
 8006718:	58025494 	.word	0x58025494
 800671c:	1600963f 	.word	0x1600963f
 8006720:	58025940 	.word	0x58025940
 8006724:	1000823f 	.word	0x1000823f
 8006728:	40020940 	.word	0x40020940

0800672c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800672c:	b480      	push	{r7}
 800672e:	b089      	sub	sp, #36	; 0x24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006736:	2300      	movs	r3, #0
 8006738:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800673a:	4b89      	ldr	r3, [pc, #548]	; (8006960 <HAL_GPIO_Init+0x234>)
 800673c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800673e:	e194      	b.n	8006a6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	2101      	movs	r1, #1
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	fa01 f303 	lsl.w	r3, r1, r3
 800674c:	4013      	ands	r3, r2
 800674e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 8186 	beq.w	8006a64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f003 0303 	and.w	r3, r3, #3
 8006760:	2b01      	cmp	r3, #1
 8006762:	d005      	beq.n	8006770 <HAL_GPIO_Init+0x44>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 0303 	and.w	r3, r3, #3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d130      	bne.n	80067d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	2203      	movs	r2, #3
 800677c:	fa02 f303 	lsl.w	r3, r2, r3
 8006780:	43db      	mvns	r3, r3
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	4013      	ands	r3, r2
 8006786:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	005b      	lsls	r3, r3, #1
 8006790:	fa02 f303 	lsl.w	r3, r2, r3
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	4313      	orrs	r3, r2
 8006798:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067a6:	2201      	movs	r2, #1
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	43db      	mvns	r3, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	4013      	ands	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	091b      	lsrs	r3, r3, #4
 80067bc:	f003 0201 	and.w	r2, r3, #1
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d017      	beq.n	800680e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	2203      	movs	r2, #3
 80067ea:	fa02 f303 	lsl.w	r3, r2, r3
 80067ee:	43db      	mvns	r3, r3
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	4013      	ands	r3, r2
 80067f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	005b      	lsls	r3, r3, #1
 80067fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	4313      	orrs	r3, r2
 8006806:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f003 0303 	and.w	r3, r3, #3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d123      	bne.n	8006862 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	08da      	lsrs	r2, r3, #3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	3208      	adds	r2, #8
 8006822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	220f      	movs	r2, #15
 8006832:	fa02 f303 	lsl.w	r3, r2, r3
 8006836:	43db      	mvns	r3, r3
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	4013      	ands	r3, r2
 800683c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	691a      	ldr	r2, [r3, #16]
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	f003 0307 	and.w	r3, r3, #7
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	4313      	orrs	r3, r2
 8006852:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	08da      	lsrs	r2, r3, #3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3208      	adds	r2, #8
 800685c:	69b9      	ldr	r1, [r7, #24]
 800685e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	2203      	movs	r2, #3
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	43db      	mvns	r3, r3
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	4013      	ands	r3, r2
 8006878:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f003 0203 	and.w	r2, r3, #3
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	fa02 f303 	lsl.w	r3, r2, r3
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	4313      	orrs	r3, r2
 800688e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 80e0 	beq.w	8006a64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068a4:	4b2f      	ldr	r3, [pc, #188]	; (8006964 <HAL_GPIO_Init+0x238>)
 80068a6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80068aa:	4a2e      	ldr	r2, [pc, #184]	; (8006964 <HAL_GPIO_Init+0x238>)
 80068ac:	f043 0302 	orr.w	r3, r3, #2
 80068b0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80068b4:	4b2b      	ldr	r3, [pc, #172]	; (8006964 <HAL_GPIO_Init+0x238>)
 80068b6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80068c2:	4a29      	ldr	r2, [pc, #164]	; (8006968 <HAL_GPIO_Init+0x23c>)
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	089b      	lsrs	r3, r3, #2
 80068c8:	3302      	adds	r3, #2
 80068ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	220f      	movs	r2, #15
 80068da:	fa02 f303 	lsl.w	r3, r2, r3
 80068de:	43db      	mvns	r3, r3
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	4013      	ands	r3, r2
 80068e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a20      	ldr	r2, [pc, #128]	; (800696c <HAL_GPIO_Init+0x240>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d052      	beq.n	8006994 <HAL_GPIO_Init+0x268>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a1f      	ldr	r2, [pc, #124]	; (8006970 <HAL_GPIO_Init+0x244>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d031      	beq.n	800695a <HAL_GPIO_Init+0x22e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a1e      	ldr	r2, [pc, #120]	; (8006974 <HAL_GPIO_Init+0x248>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d02b      	beq.n	8006956 <HAL_GPIO_Init+0x22a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a1d      	ldr	r2, [pc, #116]	; (8006978 <HAL_GPIO_Init+0x24c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d025      	beq.n	8006952 <HAL_GPIO_Init+0x226>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a1c      	ldr	r2, [pc, #112]	; (800697c <HAL_GPIO_Init+0x250>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01f      	beq.n	800694e <HAL_GPIO_Init+0x222>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a1b      	ldr	r2, [pc, #108]	; (8006980 <HAL_GPIO_Init+0x254>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d019      	beq.n	800694a <HAL_GPIO_Init+0x21e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a1a      	ldr	r2, [pc, #104]	; (8006984 <HAL_GPIO_Init+0x258>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <HAL_GPIO_Init+0x21a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a19      	ldr	r2, [pc, #100]	; (8006988 <HAL_GPIO_Init+0x25c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00d      	beq.n	8006942 <HAL_GPIO_Init+0x216>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a18      	ldr	r2, [pc, #96]	; (800698c <HAL_GPIO_Init+0x260>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d007      	beq.n	800693e <HAL_GPIO_Init+0x212>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a17      	ldr	r2, [pc, #92]	; (8006990 <HAL_GPIO_Init+0x264>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d101      	bne.n	800693a <HAL_GPIO_Init+0x20e>
 8006936:	2309      	movs	r3, #9
 8006938:	e02d      	b.n	8006996 <HAL_GPIO_Init+0x26a>
 800693a:	230a      	movs	r3, #10
 800693c:	e02b      	b.n	8006996 <HAL_GPIO_Init+0x26a>
 800693e:	2308      	movs	r3, #8
 8006940:	e029      	b.n	8006996 <HAL_GPIO_Init+0x26a>
 8006942:	2307      	movs	r3, #7
 8006944:	e027      	b.n	8006996 <HAL_GPIO_Init+0x26a>
 8006946:	2306      	movs	r3, #6
 8006948:	e025      	b.n	8006996 <HAL_GPIO_Init+0x26a>
 800694a:	2305      	movs	r3, #5
 800694c:	e023      	b.n	8006996 <HAL_GPIO_Init+0x26a>
 800694e:	2304      	movs	r3, #4
 8006950:	e021      	b.n	8006996 <HAL_GPIO_Init+0x26a>
 8006952:	2303      	movs	r3, #3
 8006954:	e01f      	b.n	8006996 <HAL_GPIO_Init+0x26a>
 8006956:	2302      	movs	r3, #2
 8006958:	e01d      	b.n	8006996 <HAL_GPIO_Init+0x26a>
 800695a:	2301      	movs	r3, #1
 800695c:	e01b      	b.n	8006996 <HAL_GPIO_Init+0x26a>
 800695e:	bf00      	nop
 8006960:	58000080 	.word	0x58000080
 8006964:	58024400 	.word	0x58024400
 8006968:	58000400 	.word	0x58000400
 800696c:	58020000 	.word	0x58020000
 8006970:	58020400 	.word	0x58020400
 8006974:	58020800 	.word	0x58020800
 8006978:	58020c00 	.word	0x58020c00
 800697c:	58021000 	.word	0x58021000
 8006980:	58021400 	.word	0x58021400
 8006984:	58021800 	.word	0x58021800
 8006988:	58021c00 	.word	0x58021c00
 800698c:	58022000 	.word	0x58022000
 8006990:	58022400 	.word	0x58022400
 8006994:	2300      	movs	r3, #0
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	f002 0203 	and.w	r2, r2, #3
 800699c:	0092      	lsls	r2, r2, #2
 800699e:	4093      	lsls	r3, r2
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069a6:	4938      	ldr	r1, [pc, #224]	; (8006a88 <HAL_GPIO_Init+0x35c>)
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	089b      	lsrs	r3, r3, #2
 80069ac:	3302      	adds	r3, #2
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	43db      	mvns	r3, r3
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	4013      	ands	r3, r2
 80069c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80069da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80069e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	43db      	mvns	r3, r3
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	4013      	ands	r3, r2
 80069f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	43db      	mvns	r3, r3
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	4013      	ands	r3, r2
 8006a48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	3301      	adds	r3, #1
 8006a68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	fa22 f303 	lsr.w	r3, r2, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f47f ae63 	bne.w	8006740 <HAL_GPIO_Init+0x14>
  }
}
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	3724      	adds	r7, #36	; 0x24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	58000400 	.word	0x58000400

08006a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	807b      	strh	r3, [r7, #2]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a9c:	787b      	ldrb	r3, [r7, #1]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006aa2:	887a      	ldrh	r2, [r7, #2]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006aa8:	e003      	b.n	8006ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006aaa:	887b      	ldrh	r3, [r7, #2]
 8006aac:	041a      	lsls	r2, r3, #16
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	619a      	str	r2, [r3, #24]
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006acc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006ad0:	88fb      	ldrh	r3, [r7, #6]
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d008      	beq.n	8006aea <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006adc:	88fb      	ldrh	r3, [r7, #6]
 8006ade:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ae2:	88fb      	ldrh	r3, [r7, #6]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fb fb7f 	bl	80021e8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006afc:	4b29      	ldr	r3, [pc, #164]	; (8006ba4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	2b06      	cmp	r3, #6
 8006b06:	d00a      	beq.n	8006b1e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b08:	4b26      	ldr	r3, [pc, #152]	; (8006ba4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d001      	beq.n	8006b1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e040      	b.n	8006b9c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e03e      	b.n	8006b9c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b1e:	4b21      	ldr	r3, [pc, #132]	; (8006ba4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006b26:	491f      	ldr	r1, [pc, #124]	; (8006ba4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b2e:	f7fb fef7 	bl	8002920 <HAL_GetTick>
 8006b32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b34:	e009      	b.n	8006b4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b36:	f7fb fef3 	bl	8002920 <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b44:	d901      	bls.n	8006b4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e028      	b.n	8006b9c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b4a:	4b16      	ldr	r3, [pc, #88]	; (8006ba4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b56:	d1ee      	bne.n	8006b36 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b1e      	cmp	r3, #30
 8006b5c:	d008      	beq.n	8006b70 <HAL_PWREx_ConfigSupply+0x7c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b2e      	cmp	r3, #46	; 0x2e
 8006b62:	d005      	beq.n	8006b70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b1d      	cmp	r3, #29
 8006b68:	d002      	beq.n	8006b70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b2d      	cmp	r3, #45	; 0x2d
 8006b6e:	d114      	bne.n	8006b9a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006b70:	f7fb fed6 	bl	8002920 <HAL_GetTick>
 8006b74:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006b76:	e009      	b.n	8006b8c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b78:	f7fb fed2 	bl	8002920 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b86:	d901      	bls.n	8006b8c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e007      	b.n	8006b9c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006b8c:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <HAL_PWREx_ConfigSupply+0xb0>)
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b98:	d1ee      	bne.n	8006b78 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	58024800 	.word	0x58024800

08006ba8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08c      	sub	sp, #48	; 0x30
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e3f4      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 80b3 	beq.w	8006d2e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bc8:	4b95      	ldr	r3, [pc, #596]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bd2:	4b93      	ldr	r3, [pc, #588]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bda:	2b10      	cmp	r3, #16
 8006bdc:	d007      	beq.n	8006bee <HAL_RCC_OscConfig+0x46>
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	2b18      	cmp	r3, #24
 8006be2:	d112      	bne.n	8006c0a <HAL_RCC_OscConfig+0x62>
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d10d      	bne.n	8006c0a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bee:	4b8c      	ldr	r3, [pc, #560]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 8098 	beq.w	8006d2c <HAL_RCC_OscConfig+0x184>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f040 8093 	bne.w	8006d2c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e3cc      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c12:	d106      	bne.n	8006c22 <HAL_RCC_OscConfig+0x7a>
 8006c14:	4b82      	ldr	r3, [pc, #520]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a81      	ldr	r2, [pc, #516]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	e058      	b.n	8006cd4 <HAL_RCC_OscConfig+0x12c>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d112      	bne.n	8006c50 <HAL_RCC_OscConfig+0xa8>
 8006c2a:	4b7d      	ldr	r3, [pc, #500]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a7c      	ldr	r2, [pc, #496]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	4b7a      	ldr	r3, [pc, #488]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a79      	ldr	r2, [pc, #484]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c40:	6013      	str	r3, [r2, #0]
 8006c42:	4b77      	ldr	r3, [pc, #476]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a76      	ldr	r2, [pc, #472]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c4c:	6013      	str	r3, [r2, #0]
 8006c4e:	e041      	b.n	8006cd4 <HAL_RCC_OscConfig+0x12c>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c58:	d112      	bne.n	8006c80 <HAL_RCC_OscConfig+0xd8>
 8006c5a:	4b71      	ldr	r3, [pc, #452]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a70      	ldr	r2, [pc, #448]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	4b6e      	ldr	r3, [pc, #440]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a6d      	ldr	r2, [pc, #436]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	4b6b      	ldr	r3, [pc, #428]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a6a      	ldr	r2, [pc, #424]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	e029      	b.n	8006cd4 <HAL_RCC_OscConfig+0x12c>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8006c88:	d112      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x108>
 8006c8a:	4b65      	ldr	r3, [pc, #404]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a64      	ldr	r2, [pc, #400]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	4b62      	ldr	r3, [pc, #392]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a61      	ldr	r2, [pc, #388]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006c9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	4b5f      	ldr	r3, [pc, #380]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a5e      	ldr	r2, [pc, #376]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cac:	6013      	str	r3, [r2, #0]
 8006cae:	e011      	b.n	8006cd4 <HAL_RCC_OscConfig+0x12c>
 8006cb0:	4b5b      	ldr	r3, [pc, #364]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a5a      	ldr	r2, [pc, #360]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	4b58      	ldr	r3, [pc, #352]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a57      	ldr	r2, [pc, #348]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	4b55      	ldr	r3, [pc, #340]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a54      	ldr	r2, [pc, #336]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006cce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d013      	beq.n	8006d04 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cdc:	f7fb fe20 	bl	8002920 <HAL_GetTick>
 8006ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ce4:	f7fb fe1c 	bl	8002920 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b64      	cmp	r3, #100	; 0x64
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e356      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006cf6:	4b4a      	ldr	r3, [pc, #296]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d0f0      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x13c>
 8006d02:	e014      	b.n	8006d2e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d04:	f7fb fe0c 	bl	8002920 <HAL_GetTick>
 8006d08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d0c:	f7fb fe08 	bl	8002920 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b64      	cmp	r3, #100	; 0x64
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e342      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d1e:	4b40      	ldr	r3, [pc, #256]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1f0      	bne.n	8006d0c <HAL_RCC_OscConfig+0x164>
 8006d2a:	e000      	b.n	8006d2e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 808d 	beq.w	8006e56 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d3c:	4b38      	ldr	r3, [pc, #224]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d46:	4b36      	ldr	r3, [pc, #216]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d007      	beq.n	8006d62 <HAL_RCC_OscConfig+0x1ba>
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	2b18      	cmp	r3, #24
 8006d56:	d137      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x220>
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d132      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d62:	4b2f      	ldr	r3, [pc, #188]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0304 	and.w	r3, r3, #4
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <HAL_RCC_OscConfig+0x1d2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e314      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d7a:	4b29      	ldr	r3, [pc, #164]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f023 0219 	bic.w	r2, r3, #25
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	4926      	ldr	r1, [pc, #152]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d8c:	f7fb fdc8 	bl	8002920 <HAL_GetTick>
 8006d90:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d92:	e008      	b.n	8006da6 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d94:	f7fb fdc4 	bl	8002920 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e2fe      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006da6:	4b1e      	ldr	r3, [pc, #120]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0304 	and.w	r3, r3, #4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0f0      	beq.n	8006d94 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006db2:	4b1b      	ldr	r3, [pc, #108]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	061b      	lsls	r3, r3, #24
 8006dc0:	4917      	ldr	r1, [pc, #92]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dc6:	e046      	b.n	8006e56 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d029      	beq.n	8006e24 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006dd0:	4b13      	ldr	r3, [pc, #76]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f023 0219 	bic.w	r2, r3, #25
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	4910      	ldr	r1, [pc, #64]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de2:	f7fb fd9d 	bl	8002920 <HAL_GetTick>
 8006de6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006de8:	e008      	b.n	8006dfc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dea:	f7fb fd99 	bl	8002920 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d901      	bls.n	8006dfc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e2d3      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dfc:	4b08      	ldr	r3, [pc, #32]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0f0      	beq.n	8006dea <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e08:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	061b      	lsls	r3, r3, #24
 8006e16:	4902      	ldr	r1, [pc, #8]	; (8006e20 <HAL_RCC_OscConfig+0x278>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	604b      	str	r3, [r1, #4]
 8006e1c:	e01b      	b.n	8006e56 <HAL_RCC_OscConfig+0x2ae>
 8006e1e:	bf00      	nop
 8006e20:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e24:	4b97      	ldr	r3, [pc, #604]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a96      	ldr	r2, [pc, #600]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006e2a:	f023 0301 	bic.w	r3, r3, #1
 8006e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e30:	f7fb fd76 	bl	8002920 <HAL_GetTick>
 8006e34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e36:	e008      	b.n	8006e4a <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e38:	f7fb fd72 	bl	8002920 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e2ac      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e4a:	4b8e      	ldr	r3, [pc, #568]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0304 	and.w	r3, r3, #4
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1f0      	bne.n	8006e38 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0310 	and.w	r3, r3, #16
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d06a      	beq.n	8006f38 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e62:	4b88      	ldr	r3, [pc, #544]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e6c:	4b85      	ldr	r3, [pc, #532]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	2b08      	cmp	r3, #8
 8006e76:	d007      	beq.n	8006e88 <HAL_RCC_OscConfig+0x2e0>
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	2b18      	cmp	r3, #24
 8006e7c:	d11b      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x30e>
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f003 0303 	and.w	r3, r3, #3
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d116      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e88:	4b7e      	ldr	r3, [pc, #504]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x2f8>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	2b80      	cmp	r3, #128	; 0x80
 8006e9a:	d001      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e281      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ea0:	4b78      	ldr	r3, [pc, #480]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	061b      	lsls	r3, r3, #24
 8006eae:	4975      	ldr	r1, [pc, #468]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006eb4:	e040      	b.n	8006f38 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d023      	beq.n	8006f06 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006ebe:	4b71      	ldr	r3, [pc, #452]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a70      	ldr	r2, [pc, #448]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eca:	f7fb fd29 	bl	8002920 <HAL_GetTick>
 8006ece:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ed0:	e008      	b.n	8006ee4 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ed2:	f7fb fd25 	bl	8002920 <HAL_GetTick>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d901      	bls.n	8006ee4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e25f      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ee4:	4b67      	ldr	r3, [pc, #412]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0f0      	beq.n	8006ed2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ef0:	4b64      	ldr	r3, [pc, #400]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	061b      	lsls	r3, r3, #24
 8006efe:	4961      	ldr	r1, [pc, #388]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60cb      	str	r3, [r1, #12]
 8006f04:	e018      	b.n	8006f38 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006f06:	4b5f      	ldr	r3, [pc, #380]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a5e      	ldr	r2, [pc, #376]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f12:	f7fb fd05 	bl	8002920 <HAL_GetTick>
 8006f16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f18:	e008      	b.n	8006f2c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006f1a:	f7fb fd01 	bl	8002920 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e23b      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f2c:	4b55      	ldr	r3, [pc, #340]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1f0      	bne.n	8006f1a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d036      	beq.n	8006fb2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d019      	beq.n	8006f80 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f4c:	4b4d      	ldr	r3, [pc, #308]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f50:	4a4c      	ldr	r2, [pc, #304]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006f52:	f043 0301 	orr.w	r3, r3, #1
 8006f56:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f58:	f7fb fce2 	bl	8002920 <HAL_GetTick>
 8006f5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f60:	f7fb fcde 	bl	8002920 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e218      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f72:	4b44      	ldr	r3, [pc, #272]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d0f0      	beq.n	8006f60 <HAL_RCC_OscConfig+0x3b8>
 8006f7e:	e018      	b.n	8006fb2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f80:	4b40      	ldr	r3, [pc, #256]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f84:	4a3f      	ldr	r2, [pc, #252]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006f86:	f023 0301 	bic.w	r3, r3, #1
 8006f8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f8c:	f7fb fcc8 	bl	8002920 <HAL_GetTick>
 8006f90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f92:	e008      	b.n	8006fa6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f94:	f7fb fcc4 	bl	8002920 <HAL_GetTick>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e1fe      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fa6:	4b37      	ldr	r3, [pc, #220]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1f0      	bne.n	8006f94 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d036      	beq.n	800702c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d019      	beq.n	8006ffa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006fc6:	4b2f      	ldr	r3, [pc, #188]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a2e      	ldr	r2, [pc, #184]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006fcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fd0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fd2:	f7fb fca5 	bl	8002920 <HAL_GetTick>
 8006fd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fd8:	e008      	b.n	8006fec <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006fda:	f7fb fca1 	bl	8002920 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e1db      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fec:	4b25      	ldr	r3, [pc, #148]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0f0      	beq.n	8006fda <HAL_RCC_OscConfig+0x432>
 8006ff8:	e018      	b.n	800702c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ffa:	4b22      	ldr	r3, [pc, #136]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a21      	ldr	r2, [pc, #132]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8007000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007004:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007006:	f7fb fc8b 	bl	8002920 <HAL_GetTick>
 800700a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800700c:	e008      	b.n	8007020 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800700e:	f7fb fc87 	bl	8002920 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b02      	cmp	r3, #2
 800701a:	d901      	bls.n	8007020 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e1c1      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007020:	4b18      	ldr	r3, [pc, #96]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1f0      	bne.n	800700e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 80af 	beq.w	8007198 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800703a:	4b13      	ldr	r3, [pc, #76]	; (8007088 <HAL_RCC_OscConfig+0x4e0>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a12      	ldr	r2, [pc, #72]	; (8007088 <HAL_RCC_OscConfig+0x4e0>)
 8007040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007044:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007046:	f7fb fc6b 	bl	8002920 <HAL_GetTick>
 800704a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800704c:	e008      	b.n	8007060 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800704e:	f7fb fc67 	bl	8002920 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b64      	cmp	r3, #100	; 0x64
 800705a:	d901      	bls.n	8007060 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e1a1      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007060:	4b09      	ldr	r3, [pc, #36]	; (8007088 <HAL_RCC_OscConfig+0x4e0>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0f0      	beq.n	800704e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d10b      	bne.n	800708c <HAL_RCC_OscConfig+0x4e4>
 8007074:	4b03      	ldr	r3, [pc, #12]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 8007076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007078:	4a02      	ldr	r2, [pc, #8]	; (8007084 <HAL_RCC_OscConfig+0x4dc>)
 800707a:	f043 0301 	orr.w	r3, r3, #1
 800707e:	6713      	str	r3, [r2, #112]	; 0x70
 8007080:	e05b      	b.n	800713a <HAL_RCC_OscConfig+0x592>
 8007082:	bf00      	nop
 8007084:	58024400 	.word	0x58024400
 8007088:	58024800 	.word	0x58024800
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d112      	bne.n	80070ba <HAL_RCC_OscConfig+0x512>
 8007094:	4b9d      	ldr	r3, [pc, #628]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007098:	4a9c      	ldr	r2, [pc, #624]	; (800730c <HAL_RCC_OscConfig+0x764>)
 800709a:	f023 0301 	bic.w	r3, r3, #1
 800709e:	6713      	str	r3, [r2, #112]	; 0x70
 80070a0:	4b9a      	ldr	r3, [pc, #616]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80070a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a4:	4a99      	ldr	r2, [pc, #612]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80070a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070aa:	6713      	str	r3, [r2, #112]	; 0x70
 80070ac:	4b97      	ldr	r3, [pc, #604]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80070ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b0:	4a96      	ldr	r2, [pc, #600]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80070b2:	f023 0304 	bic.w	r3, r3, #4
 80070b6:	6713      	str	r3, [r2, #112]	; 0x70
 80070b8:	e03f      	b.n	800713a <HAL_RCC_OscConfig+0x592>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	2b05      	cmp	r3, #5
 80070c0:	d112      	bne.n	80070e8 <HAL_RCC_OscConfig+0x540>
 80070c2:	4b92      	ldr	r3, [pc, #584]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80070c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c6:	4a91      	ldr	r2, [pc, #580]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80070c8:	f043 0304 	orr.w	r3, r3, #4
 80070cc:	6713      	str	r3, [r2, #112]	; 0x70
 80070ce:	4b8f      	ldr	r3, [pc, #572]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80070d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d2:	4a8e      	ldr	r2, [pc, #568]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80070d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070d8:	6713      	str	r3, [r2, #112]	; 0x70
 80070da:	4b8c      	ldr	r3, [pc, #560]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80070dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070de:	4a8b      	ldr	r2, [pc, #556]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80070e0:	f043 0301 	orr.w	r3, r3, #1
 80070e4:	6713      	str	r3, [r2, #112]	; 0x70
 80070e6:	e028      	b.n	800713a <HAL_RCC_OscConfig+0x592>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	2b85      	cmp	r3, #133	; 0x85
 80070ee:	d112      	bne.n	8007116 <HAL_RCC_OscConfig+0x56e>
 80070f0:	4b86      	ldr	r3, [pc, #536]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80070f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f4:	4a85      	ldr	r2, [pc, #532]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80070f6:	f043 0304 	orr.w	r3, r3, #4
 80070fa:	6713      	str	r3, [r2, #112]	; 0x70
 80070fc:	4b83      	ldr	r3, [pc, #524]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80070fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007100:	4a82      	ldr	r2, [pc, #520]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007106:	6713      	str	r3, [r2, #112]	; 0x70
 8007108:	4b80      	ldr	r3, [pc, #512]	; (800730c <HAL_RCC_OscConfig+0x764>)
 800710a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710c:	4a7f      	ldr	r2, [pc, #508]	; (800730c <HAL_RCC_OscConfig+0x764>)
 800710e:	f043 0301 	orr.w	r3, r3, #1
 8007112:	6713      	str	r3, [r2, #112]	; 0x70
 8007114:	e011      	b.n	800713a <HAL_RCC_OscConfig+0x592>
 8007116:	4b7d      	ldr	r3, [pc, #500]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711a:	4a7c      	ldr	r2, [pc, #496]	; (800730c <HAL_RCC_OscConfig+0x764>)
 800711c:	f023 0301 	bic.w	r3, r3, #1
 8007120:	6713      	str	r3, [r2, #112]	; 0x70
 8007122:	4b7a      	ldr	r3, [pc, #488]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007126:	4a79      	ldr	r2, [pc, #484]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007128:	f023 0304 	bic.w	r3, r3, #4
 800712c:	6713      	str	r3, [r2, #112]	; 0x70
 800712e:	4b77      	ldr	r3, [pc, #476]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007132:	4a76      	ldr	r2, [pc, #472]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007138:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d015      	beq.n	800716e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007142:	f7fb fbed 	bl	8002920 <HAL_GetTick>
 8007146:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007148:	e00a      	b.n	8007160 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800714a:	f7fb fbe9 	bl	8002920 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	f241 3288 	movw	r2, #5000	; 0x1388
 8007158:	4293      	cmp	r3, r2
 800715a:	d901      	bls.n	8007160 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e121      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007160:	4b6a      	ldr	r3, [pc, #424]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d0ee      	beq.n	800714a <HAL_RCC_OscConfig+0x5a2>
 800716c:	e014      	b.n	8007198 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800716e:	f7fb fbd7 	bl	8002920 <HAL_GetTick>
 8007172:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007174:	e00a      	b.n	800718c <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007176:	f7fb fbd3 	bl	8002920 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	f241 3288 	movw	r2, #5000	; 0x1388
 8007184:	4293      	cmp	r3, r2
 8007186:	d901      	bls.n	800718c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e10b      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800718c:	4b5f      	ldr	r3, [pc, #380]	; (800730c <HAL_RCC_OscConfig+0x764>)
 800718e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1ee      	bne.n	8007176 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 8100 	beq.w	80073a2 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80071a2:	4b5a      	ldr	r3, [pc, #360]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071aa:	2b18      	cmp	r3, #24
 80071ac:	f000 80bb 	beq.w	8007326 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	f040 8095 	bne.w	80072e4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ba:	4b54      	ldr	r3, [pc, #336]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a53      	ldr	r2, [pc, #332]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80071c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c6:	f7fb fbab 	bl	8002920 <HAL_GetTick>
 80071ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071cc:	e008      	b.n	80071e0 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071ce:	f7fb fba7 	bl	8002920 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d901      	bls.n	80071e0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e0e1      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80071e0:	4b4a      	ldr	r3, [pc, #296]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1f0      	bne.n	80071ce <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071ec:	4b47      	ldr	r3, [pc, #284]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80071ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071f0:	4b47      	ldr	r3, [pc, #284]	; (8007310 <HAL_RCC_OscConfig+0x768>)
 80071f2:	4013      	ands	r3, r2
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80071fc:	0112      	lsls	r2, r2, #4
 80071fe:	430a      	orrs	r2, r1
 8007200:	4942      	ldr	r1, [pc, #264]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007202:	4313      	orrs	r3, r2
 8007204:	628b      	str	r3, [r1, #40]	; 0x28
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	3b01      	subs	r3, #1
 800720c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007214:	3b01      	subs	r3, #1
 8007216:	025b      	lsls	r3, r3, #9
 8007218:	b29b      	uxth	r3, r3
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007220:	3b01      	subs	r3, #1
 8007222:	041b      	lsls	r3, r3, #16
 8007224:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722e:	3b01      	subs	r3, #1
 8007230:	061b      	lsls	r3, r3, #24
 8007232:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007236:	4935      	ldr	r1, [pc, #212]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007238:	4313      	orrs	r3, r2
 800723a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800723c:	4b33      	ldr	r3, [pc, #204]	; (800730c <HAL_RCC_OscConfig+0x764>)
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	4a32      	ldr	r2, [pc, #200]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007242:	f023 0301 	bic.w	r3, r3, #1
 8007246:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007248:	4b30      	ldr	r3, [pc, #192]	; (800730c <HAL_RCC_OscConfig+0x764>)
 800724a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800724c:	4b31      	ldr	r3, [pc, #196]	; (8007314 <HAL_RCC_OscConfig+0x76c>)
 800724e:	4013      	ands	r3, r2
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007254:	00d2      	lsls	r2, r2, #3
 8007256:	492d      	ldr	r1, [pc, #180]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007258:	4313      	orrs	r3, r2
 800725a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800725c:	4b2b      	ldr	r3, [pc, #172]	; (800730c <HAL_RCC_OscConfig+0x764>)
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	f023 020c 	bic.w	r2, r3, #12
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007268:	4928      	ldr	r1, [pc, #160]	; (800730c <HAL_RCC_OscConfig+0x764>)
 800726a:	4313      	orrs	r3, r2
 800726c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800726e:	4b27      	ldr	r3, [pc, #156]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007272:	f023 0202 	bic.w	r2, r3, #2
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727a:	4924      	ldr	r1, [pc, #144]	; (800730c <HAL_RCC_OscConfig+0x764>)
 800727c:	4313      	orrs	r3, r2
 800727e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007280:	4b22      	ldr	r3, [pc, #136]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007284:	4a21      	ldr	r2, [pc, #132]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800728a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800728c:	4b1f      	ldr	r3, [pc, #124]	; (800730c <HAL_RCC_OscConfig+0x764>)
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	4a1e      	ldr	r2, [pc, #120]	; (800730c <HAL_RCC_OscConfig+0x764>)
 8007292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007296:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007298:	4b1c      	ldr	r3, [pc, #112]	; (800730c <HAL_RCC_OscConfig+0x764>)
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	4a1b      	ldr	r2, [pc, #108]	; (800730c <HAL_RCC_OscConfig+0x764>)
 800729e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80072a4:	4b19      	ldr	r3, [pc, #100]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	4a18      	ldr	r2, [pc, #96]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80072aa:	f043 0301 	orr.w	r3, r3, #1
 80072ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072b0:	4b16      	ldr	r3, [pc, #88]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a15      	ldr	r2, [pc, #84]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80072b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072bc:	f7fb fb30 	bl	8002920 <HAL_GetTick>
 80072c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072c2:	e008      	b.n	80072d6 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072c4:	f7fb fb2c 	bl	8002920 <HAL_GetTick>
 80072c8:	4602      	mov	r2, r0
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d901      	bls.n	80072d6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e066      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072d6:	4b0d      	ldr	r3, [pc, #52]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0f0      	beq.n	80072c4 <HAL_RCC_OscConfig+0x71c>
 80072e2:	e05e      	b.n	80073a2 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072e4:	4b09      	ldr	r3, [pc, #36]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a08      	ldr	r2, [pc, #32]	; (800730c <HAL_RCC_OscConfig+0x764>)
 80072ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f0:	f7fb fb16 	bl	8002920 <HAL_GetTick>
 80072f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80072f6:	e00f      	b.n	8007318 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072f8:	f7fb fb12 	bl	8002920 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	2b02      	cmp	r3, #2
 8007304:	d908      	bls.n	8007318 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e04c      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
 800730a:	bf00      	nop
 800730c:	58024400 	.word	0x58024400
 8007310:	fffffc0c 	.word	0xfffffc0c
 8007314:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007318:	4b24      	ldr	r3, [pc, #144]	; (80073ac <HAL_RCC_OscConfig+0x804>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e9      	bne.n	80072f8 <HAL_RCC_OscConfig+0x750>
 8007324:	e03d      	b.n	80073a2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007326:	4b21      	ldr	r3, [pc, #132]	; (80073ac <HAL_RCC_OscConfig+0x804>)
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800732c:	4b1f      	ldr	r3, [pc, #124]	; (80073ac <HAL_RCC_OscConfig+0x804>)
 800732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007330:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	2b01      	cmp	r3, #1
 8007338:	d031      	beq.n	800739e <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f003 0203 	and.w	r2, r3, #3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007344:	429a      	cmp	r2, r3
 8007346:	d12a      	bne.n	800739e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	091b      	lsrs	r3, r3, #4
 800734c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007354:	429a      	cmp	r2, r3
 8007356:	d122      	bne.n	800739e <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007362:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007364:	429a      	cmp	r2, r3
 8007366:	d11a      	bne.n	800739e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	0a5b      	lsrs	r3, r3, #9
 800736c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007374:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007376:	429a      	cmp	r2, r3
 8007378:	d111      	bne.n	800739e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	0c1b      	lsrs	r3, r3, #16
 800737e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007388:	429a      	cmp	r2, r3
 800738a:	d108      	bne.n	800739e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	0e1b      	lsrs	r3, r3, #24
 8007390:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007398:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800739a:	429a      	cmp	r2, r3
 800739c:	d001      	beq.n	80073a2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e000      	b.n	80073a4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3730      	adds	r7, #48	; 0x30
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	58024400 	.word	0x58024400

080073b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e19c      	b.n	80076fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073c4:	4b8a      	ldr	r3, [pc, #552]	; (80075f0 <HAL_RCC_ClockConfig+0x240>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 030f 	and.w	r3, r3, #15
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d910      	bls.n	80073f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073d2:	4b87      	ldr	r3, [pc, #540]	; (80075f0 <HAL_RCC_ClockConfig+0x240>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f023 020f 	bic.w	r2, r3, #15
 80073da:	4985      	ldr	r1, [pc, #532]	; (80075f0 <HAL_RCC_ClockConfig+0x240>)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	4313      	orrs	r3, r2
 80073e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073e2:	4b83      	ldr	r3, [pc, #524]	; (80075f0 <HAL_RCC_ClockConfig+0x240>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 030f 	and.w	r3, r3, #15
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d001      	beq.n	80073f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e184      	b.n	80076fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d010      	beq.n	8007422 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	691a      	ldr	r2, [r3, #16]
 8007404:	4b7b      	ldr	r3, [pc, #492]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800740c:	429a      	cmp	r2, r3
 800740e:	d908      	bls.n	8007422 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007410:	4b78      	ldr	r3, [pc, #480]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	4975      	ldr	r1, [pc, #468]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 800741e:	4313      	orrs	r3, r2
 8007420:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0308 	and.w	r3, r3, #8
 800742a:	2b00      	cmp	r3, #0
 800742c:	d010      	beq.n	8007450 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	695a      	ldr	r2, [r3, #20]
 8007432:	4b70      	ldr	r3, [pc, #448]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800743a:	429a      	cmp	r2, r3
 800743c:	d908      	bls.n	8007450 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800743e:	4b6d      	ldr	r3, [pc, #436]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	496a      	ldr	r1, [pc, #424]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 800744c:	4313      	orrs	r3, r2
 800744e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b00      	cmp	r3, #0
 800745a:	d010      	beq.n	800747e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699a      	ldr	r2, [r3, #24]
 8007460:	4b64      	ldr	r3, [pc, #400]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 8007462:	69db      	ldr	r3, [r3, #28]
 8007464:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007468:	429a      	cmp	r2, r3
 800746a:	d908      	bls.n	800747e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800746c:	4b61      	ldr	r3, [pc, #388]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	495e      	ldr	r1, [pc, #376]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 800747a:	4313      	orrs	r3, r2
 800747c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0320 	and.w	r3, r3, #32
 8007486:	2b00      	cmp	r3, #0
 8007488:	d010      	beq.n	80074ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	69da      	ldr	r2, [r3, #28]
 800748e:	4b59      	ldr	r3, [pc, #356]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007496:	429a      	cmp	r2, r3
 8007498:	d908      	bls.n	80074ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800749a:	4b56      	ldr	r3, [pc, #344]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	4953      	ldr	r1, [pc, #332]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d010      	beq.n	80074da <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68da      	ldr	r2, [r3, #12]
 80074bc:	4b4d      	ldr	r3, [pc, #308]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	f003 030f 	and.w	r3, r3, #15
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d908      	bls.n	80074da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074c8:	4b4a      	ldr	r3, [pc, #296]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	f023 020f 	bic.w	r2, r3, #15
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	4947      	ldr	r1, [pc, #284]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d055      	beq.n	8007592 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80074e6:	4b43      	ldr	r3, [pc, #268]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	4940      	ldr	r1, [pc, #256]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d107      	bne.n	8007510 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007500:	4b3c      	ldr	r3, [pc, #240]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d121      	bne.n	8007550 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e0f6      	b.n	80076fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	2b03      	cmp	r3, #3
 8007516:	d107      	bne.n	8007528 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007518:	4b36      	ldr	r3, [pc, #216]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d115      	bne.n	8007550 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e0ea      	b.n	80076fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d107      	bne.n	8007540 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007530:	4b30      	ldr	r3, [pc, #192]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007538:	2b00      	cmp	r3, #0
 800753a:	d109      	bne.n	8007550 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e0de      	b.n	80076fe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007540:	4b2c      	ldr	r3, [pc, #176]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e0d6      	b.n	80076fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007550:	4b28      	ldr	r3, [pc, #160]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	f023 0207 	bic.w	r2, r3, #7
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	4925      	ldr	r1, [pc, #148]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 800755e:	4313      	orrs	r3, r2
 8007560:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007562:	f7fb f9dd 	bl	8002920 <HAL_GetTick>
 8007566:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007568:	e00a      	b.n	8007580 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800756a:	f7fb f9d9 	bl	8002920 <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	f241 3288 	movw	r2, #5000	; 0x1388
 8007578:	4293      	cmp	r3, r2
 800757a:	d901      	bls.n	8007580 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e0be      	b.n	80076fe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007580:	4b1c      	ldr	r3, [pc, #112]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	429a      	cmp	r2, r3
 8007590:	d1eb      	bne.n	800756a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d010      	beq.n	80075c0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	4b14      	ldr	r3, [pc, #80]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	f003 030f 	and.w	r3, r3, #15
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d208      	bcs.n	80075c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075ae:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	f023 020f 	bic.w	r2, r3, #15
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	490e      	ldr	r1, [pc, #56]	; (80075f4 <HAL_RCC_ClockConfig+0x244>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075c0:	4b0b      	ldr	r3, [pc, #44]	; (80075f0 <HAL_RCC_ClockConfig+0x240>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 030f 	and.w	r3, r3, #15
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d214      	bcs.n	80075f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ce:	4b08      	ldr	r3, [pc, #32]	; (80075f0 <HAL_RCC_ClockConfig+0x240>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f023 020f 	bic.w	r2, r3, #15
 80075d6:	4906      	ldr	r1, [pc, #24]	; (80075f0 <HAL_RCC_ClockConfig+0x240>)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	4313      	orrs	r3, r2
 80075dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075de:	4b04      	ldr	r3, [pc, #16]	; (80075f0 <HAL_RCC_ClockConfig+0x240>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 030f 	and.w	r3, r3, #15
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d005      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e086      	b.n	80076fe <HAL_RCC_ClockConfig+0x34e>
 80075f0:	52002000 	.word	0x52002000
 80075f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d010      	beq.n	8007626 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	4b3f      	ldr	r3, [pc, #252]	; (8007708 <HAL_RCC_ClockConfig+0x358>)
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007610:	429a      	cmp	r2, r3
 8007612:	d208      	bcs.n	8007626 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007614:	4b3c      	ldr	r3, [pc, #240]	; (8007708 <HAL_RCC_ClockConfig+0x358>)
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	4939      	ldr	r1, [pc, #228]	; (8007708 <HAL_RCC_ClockConfig+0x358>)
 8007622:	4313      	orrs	r3, r2
 8007624:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0308 	and.w	r3, r3, #8
 800762e:	2b00      	cmp	r3, #0
 8007630:	d010      	beq.n	8007654 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	695a      	ldr	r2, [r3, #20]
 8007636:	4b34      	ldr	r3, [pc, #208]	; (8007708 <HAL_RCC_ClockConfig+0x358>)
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800763e:	429a      	cmp	r2, r3
 8007640:	d208      	bcs.n	8007654 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007642:	4b31      	ldr	r3, [pc, #196]	; (8007708 <HAL_RCC_ClockConfig+0x358>)
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	492e      	ldr	r1, [pc, #184]	; (8007708 <HAL_RCC_ClockConfig+0x358>)
 8007650:	4313      	orrs	r3, r2
 8007652:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b00      	cmp	r3, #0
 800765e:	d010      	beq.n	8007682 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	699a      	ldr	r2, [r3, #24]
 8007664:	4b28      	ldr	r3, [pc, #160]	; (8007708 <HAL_RCC_ClockConfig+0x358>)
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800766c:	429a      	cmp	r2, r3
 800766e:	d208      	bcs.n	8007682 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007670:	4b25      	ldr	r3, [pc, #148]	; (8007708 <HAL_RCC_ClockConfig+0x358>)
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	4922      	ldr	r1, [pc, #136]	; (8007708 <HAL_RCC_ClockConfig+0x358>)
 800767e:	4313      	orrs	r3, r2
 8007680:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b00      	cmp	r3, #0
 800768c:	d010      	beq.n	80076b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	69da      	ldr	r2, [r3, #28]
 8007692:	4b1d      	ldr	r3, [pc, #116]	; (8007708 <HAL_RCC_ClockConfig+0x358>)
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800769a:	429a      	cmp	r2, r3
 800769c:	d208      	bcs.n	80076b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800769e:	4b1a      	ldr	r3, [pc, #104]	; (8007708 <HAL_RCC_ClockConfig+0x358>)
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	4917      	ldr	r1, [pc, #92]	; (8007708 <HAL_RCC_ClockConfig+0x358>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80076b0:	f000 f834 	bl	800771c <HAL_RCC_GetSysClockFreq>
 80076b4:	4602      	mov	r2, r0
 80076b6:	4b14      	ldr	r3, [pc, #80]	; (8007708 <HAL_RCC_ClockConfig+0x358>)
 80076b8:	699b      	ldr	r3, [r3, #24]
 80076ba:	0a1b      	lsrs	r3, r3, #8
 80076bc:	f003 030f 	and.w	r3, r3, #15
 80076c0:	4912      	ldr	r1, [pc, #72]	; (800770c <HAL_RCC_ClockConfig+0x35c>)
 80076c2:	5ccb      	ldrb	r3, [r1, r3]
 80076c4:	f003 031f 	and.w	r3, r3, #31
 80076c8:	fa22 f303 	lsr.w	r3, r2, r3
 80076cc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80076ce:	4b0e      	ldr	r3, [pc, #56]	; (8007708 <HAL_RCC_ClockConfig+0x358>)
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	f003 030f 	and.w	r3, r3, #15
 80076d6:	4a0d      	ldr	r2, [pc, #52]	; (800770c <HAL_RCC_ClockConfig+0x35c>)
 80076d8:	5cd3      	ldrb	r3, [r2, r3]
 80076da:	f003 031f 	and.w	r3, r3, #31
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	fa22 f303 	lsr.w	r3, r2, r3
 80076e4:	4a0a      	ldr	r2, [pc, #40]	; (8007710 <HAL_RCC_ClockConfig+0x360>)
 80076e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076e8:	4a0a      	ldr	r2, [pc, #40]	; (8007714 <HAL_RCC_ClockConfig+0x364>)
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80076ee:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <HAL_RCC_ClockConfig+0x368>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fb f8ca 	bl	800288c <HAL_InitTick>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	58024400 	.word	0x58024400
 800770c:	0800baf0 	.word	0x0800baf0
 8007710:	24000008 	.word	0x24000008
 8007714:	24000004 	.word	0x24000004
 8007718:	2400000c 	.word	0x2400000c

0800771c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800771c:	b480      	push	{r7}
 800771e:	b089      	sub	sp, #36	; 0x24
 8007720:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007722:	4bb3      	ldr	r3, [pc, #716]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800772a:	2b18      	cmp	r3, #24
 800772c:	f200 8155 	bhi.w	80079da <HAL_RCC_GetSysClockFreq+0x2be>
 8007730:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007736:	bf00      	nop
 8007738:	0800779d 	.word	0x0800779d
 800773c:	080079db 	.word	0x080079db
 8007740:	080079db 	.word	0x080079db
 8007744:	080079db 	.word	0x080079db
 8007748:	080079db 	.word	0x080079db
 800774c:	080079db 	.word	0x080079db
 8007750:	080079db 	.word	0x080079db
 8007754:	080079db 	.word	0x080079db
 8007758:	080077c3 	.word	0x080077c3
 800775c:	080079db 	.word	0x080079db
 8007760:	080079db 	.word	0x080079db
 8007764:	080079db 	.word	0x080079db
 8007768:	080079db 	.word	0x080079db
 800776c:	080079db 	.word	0x080079db
 8007770:	080079db 	.word	0x080079db
 8007774:	080079db 	.word	0x080079db
 8007778:	080077c9 	.word	0x080077c9
 800777c:	080079db 	.word	0x080079db
 8007780:	080079db 	.word	0x080079db
 8007784:	080079db 	.word	0x080079db
 8007788:	080079db 	.word	0x080079db
 800778c:	080079db 	.word	0x080079db
 8007790:	080079db 	.word	0x080079db
 8007794:	080079db 	.word	0x080079db
 8007798:	080077cf 	.word	0x080077cf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800779c:	4b94      	ldr	r3, [pc, #592]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0320 	and.w	r3, r3, #32
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d009      	beq.n	80077bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077a8:	4b91      	ldr	r3, [pc, #580]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	08db      	lsrs	r3, r3, #3
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	4a90      	ldr	r2, [pc, #576]	; (80079f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077b4:	fa22 f303 	lsr.w	r3, r2, r3
 80077b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80077ba:	e111      	b.n	80079e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80077bc:	4b8d      	ldr	r3, [pc, #564]	; (80079f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077be:	61bb      	str	r3, [r7, #24]
    break;
 80077c0:	e10e      	b.n	80079e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80077c2:	4b8d      	ldr	r3, [pc, #564]	; (80079f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077c4:	61bb      	str	r3, [r7, #24]
    break;
 80077c6:	e10b      	b.n	80079e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80077c8:	4b8c      	ldr	r3, [pc, #560]	; (80079fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80077ca:	61bb      	str	r3, [r7, #24]
    break;
 80077cc:	e108      	b.n	80079e0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077ce:	4b88      	ldr	r3, [pc, #544]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d2:	f003 0303 	and.w	r3, r3, #3
 80077d6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80077d8:	4b85      	ldr	r3, [pc, #532]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077dc:	091b      	lsrs	r3, r3, #4
 80077de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077e2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80077e4:	4b82      	ldr	r3, [pc, #520]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80077ee:	4b80      	ldr	r3, [pc, #512]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f2:	08db      	lsrs	r3, r3, #3
 80077f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	fb02 f303 	mul.w	r3, r2, r3
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007806:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 80e1 	beq.w	80079d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2b02      	cmp	r3, #2
 8007816:	f000 8083 	beq.w	8007920 <HAL_RCC_GetSysClockFreq+0x204>
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2b02      	cmp	r3, #2
 800781e:	f200 80a1 	bhi.w	8007964 <HAL_RCC_GetSysClockFreq+0x248>
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <HAL_RCC_GetSysClockFreq+0x114>
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d056      	beq.n	80078dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800782e:	e099      	b.n	8007964 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007830:	4b6f      	ldr	r3, [pc, #444]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0320 	and.w	r3, r3, #32
 8007838:	2b00      	cmp	r3, #0
 800783a:	d02d      	beq.n	8007898 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800783c:	4b6c      	ldr	r3, [pc, #432]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	08db      	lsrs	r3, r3, #3
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	4a6b      	ldr	r2, [pc, #428]	; (80079f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007848:	fa22 f303 	lsr.w	r3, r2, r3
 800784c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	ee07 3a90 	vmov	s15, r3
 8007854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007866:	4b62      	ldr	r3, [pc, #392]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007876:	ed97 6a02 	vldr	s12, [r7, #8]
 800787a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800787e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800788a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800788e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007892:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007896:	e087      	b.n	80079a8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007a04 <HAL_RCC_GetSysClockFreq+0x2e8>
 80078a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078aa:	4b51      	ldr	r3, [pc, #324]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80078be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078da:	e065      	b.n	80079a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007a08 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ee:	4b40      	ldr	r3, [pc, #256]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007902:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800790a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800791a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800791e:	e043      	b.n	80079a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007a0c <HAL_RCC_GetSysClockFreq+0x2f0>
 800792e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007932:	4b2f      	ldr	r3, [pc, #188]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793a:	ee07 3a90 	vmov	s15, r3
 800793e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007942:	ed97 6a02 	vldr	s12, [r7, #8]
 8007946:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800794a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800795a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007962:	e021      	b.n	80079a8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007a08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007976:	4b1e      	ldr	r3, [pc, #120]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007986:	ed97 6a02 	vldr	s12, [r7, #8]
 800798a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007a00 <HAL_RCC_GetSysClockFreq+0x2e4>
 800798e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800799a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079a6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80079a8:	4b11      	ldr	r3, [pc, #68]	; (80079f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ac:	0a5b      	lsrs	r3, r3, #9
 80079ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079b2:	3301      	adds	r3, #1
 80079b4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	ee07 3a90 	vmov	s15, r3
 80079bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80079c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079cc:	ee17 3a90 	vmov	r3, s15
 80079d0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80079d2:	e005      	b.n	80079e0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	61bb      	str	r3, [r7, #24]
    break;
 80079d8:	e002      	b.n	80079e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80079da:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079dc:	61bb      	str	r3, [r7, #24]
    break;
 80079de:	bf00      	nop
  }

  return sysclockfreq;
 80079e0:	69bb      	ldr	r3, [r7, #24]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3724      	adds	r7, #36	; 0x24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	58024400 	.word	0x58024400
 80079f4:	03d09000 	.word	0x03d09000
 80079f8:	003d0900 	.word	0x003d0900
 80079fc:	007a1200 	.word	0x007a1200
 8007a00:	46000000 	.word	0x46000000
 8007a04:	4c742400 	.word	0x4c742400
 8007a08:	4a742400 	.word	0x4a742400
 8007a0c:	4af42400 	.word	0x4af42400

08007a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007a16:	f7ff fe81 	bl	800771c <HAL_RCC_GetSysClockFreq>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <HAL_RCC_GetHCLKFreq+0x50>)
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	0a1b      	lsrs	r3, r3, #8
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	490f      	ldr	r1, [pc, #60]	; (8007a64 <HAL_RCC_GetHCLKFreq+0x54>)
 8007a28:	5ccb      	ldrb	r3, [r1, r3]
 8007a2a:	f003 031f 	and.w	r3, r3, #31
 8007a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a32:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007a34:	4b0a      	ldr	r3, [pc, #40]	; (8007a60 <HAL_RCC_GetHCLKFreq+0x50>)
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	4a09      	ldr	r2, [pc, #36]	; (8007a64 <HAL_RCC_GetHCLKFreq+0x54>)
 8007a3e:	5cd3      	ldrb	r3, [r2, r3]
 8007a40:	f003 031f 	and.w	r3, r3, #31
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4a:	4a07      	ldr	r2, [pc, #28]	; (8007a68 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a4e:	4a07      	ldr	r2, [pc, #28]	; (8007a6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007a54:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a56:	681b      	ldr	r3, [r3, #0]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	58024400 	.word	0x58024400
 8007a64:	0800baf0 	.word	0x0800baf0
 8007a68:	24000008 	.word	0x24000008
 8007a6c:	24000004 	.word	0x24000004

08007a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007a74:	f7ff ffcc 	bl	8007a10 <HAL_RCC_GetHCLKFreq>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	4b06      	ldr	r3, [pc, #24]	; (8007a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	091b      	lsrs	r3, r3, #4
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	4904      	ldr	r1, [pc, #16]	; (8007a98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a86:	5ccb      	ldrb	r3, [r1, r3]
 8007a88:	f003 031f 	and.w	r3, r3, #31
 8007a8c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	58024400 	.word	0x58024400
 8007a98:	0800baf0 	.word	0x0800baf0

08007a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007aa0:	f7ff ffb6 	bl	8007a10 <HAL_RCC_GetHCLKFreq>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	4b06      	ldr	r3, [pc, #24]	; (8007ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	0a1b      	lsrs	r3, r3, #8
 8007aac:	f003 0307 	and.w	r3, r3, #7
 8007ab0:	4904      	ldr	r1, [pc, #16]	; (8007ac4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007ab2:	5ccb      	ldrb	r3, [r1, r3]
 8007ab4:	f003 031f 	and.w	r3, r3, #31
 8007ab8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	58024400 	.word	0x58024400
 8007ac4:	0800baf0 	.word	0x0800baf0

08007ac8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b086      	sub	sp, #24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d03f      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ae8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007aec:	d02a      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007aee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007af2:	d824      	bhi.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007af8:	d018      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007afa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007afe:	d81e      	bhi.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b08:	d007      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007b0a:	e018      	b.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b0c:	4b9f      	ldr	r3, [pc, #636]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	4a9e      	ldr	r2, [pc, #632]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b18:	e015      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	2102      	movs	r1, #2
 8007b20:	4618      	mov	r0, r3
 8007b22:	f001 ff1b 	bl	800995c <RCCEx_PLL2_Config>
 8007b26:	4603      	mov	r3, r0
 8007b28:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b2a:	e00c      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3324      	adds	r3, #36	; 0x24
 8007b30:	2102      	movs	r1, #2
 8007b32:	4618      	mov	r0, r3
 8007b34:	f001 ffc4 	bl	8009ac0 <RCCEx_PLL3_Config>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b3c:	e003      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	75fb      	strb	r3, [r7, #23]
      break;
 8007b42:	e000      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d109      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b4c:	4b8f      	ldr	r3, [pc, #572]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b58:	498c      	ldr	r1, [pc, #560]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	650b      	str	r3, [r1, #80]	; 0x50
 8007b5e:	e001      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d03d      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b74:	2b04      	cmp	r3, #4
 8007b76:	d826      	bhi.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007b78:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7e:	bf00      	nop
 8007b80:	08007b95 	.word	0x08007b95
 8007b84:	08007ba3 	.word	0x08007ba3
 8007b88:	08007bb5 	.word	0x08007bb5
 8007b8c:	08007bcd 	.word	0x08007bcd
 8007b90:	08007bcd 	.word	0x08007bcd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b94:	4b7d      	ldr	r3, [pc, #500]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	4a7c      	ldr	r2, [pc, #496]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ba0:	e015      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f001 fed7 	bl	800995c <RCCEx_PLL2_Config>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bb2:	e00c      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3324      	adds	r3, #36	; 0x24
 8007bb8:	2100      	movs	r1, #0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f001 ff80 	bl	8009ac0 <RCCEx_PLL3_Config>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bc4:	e003      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bca:	e000      	b.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d109      	bne.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bd4:	4b6d      	ldr	r3, [pc, #436]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd8:	f023 0207 	bic.w	r2, r3, #7
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be0:	496a      	ldr	r1, [pc, #424]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	650b      	str	r3, [r1, #80]	; 0x50
 8007be6:	e001      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d04a      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007c00:	d031      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8007c02:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007c06:	d82b      	bhi.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c0c:	d02d      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8007c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c12:	d825      	bhi.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007c14:	2bc0      	cmp	r3, #192	; 0xc0
 8007c16:	d02a      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007c18:	2bc0      	cmp	r3, #192	; 0xc0
 8007c1a:	d821      	bhi.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007c1c:	2b80      	cmp	r3, #128	; 0x80
 8007c1e:	d016      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007c20:	2b80      	cmp	r3, #128	; 0x80
 8007c22:	d81d      	bhi.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007c28:	2b40      	cmp	r3, #64	; 0x40
 8007c2a:	d007      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8007c2c:	e018      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c2e:	4b57      	ldr	r3, [pc, #348]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c32:	4a56      	ldr	r2, [pc, #344]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8007c3a:	e019      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	2100      	movs	r1, #0
 8007c42:	4618      	mov	r0, r3
 8007c44:	f001 fe8a 	bl	800995c <RCCEx_PLL2_Config>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8007c4c:	e010      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3324      	adds	r3, #36	; 0x24
 8007c52:	2100      	movs	r1, #0
 8007c54:	4618      	mov	r0, r3
 8007c56:	f001 ff33 	bl	8009ac0 <RCCEx_PLL3_Config>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8007c5e:	e007      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	75fb      	strb	r3, [r7, #23]
      break;
 8007c64:	e004      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007c66:	bf00      	nop
 8007c68:	e002      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007c6a:	bf00      	nop
 8007c6c:	e000      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007c6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d109      	bne.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007c76:	4b45      	ldr	r3, [pc, #276]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c7a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c82:	4942      	ldr	r1, [pc, #264]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	650b      	str	r3, [r1, #80]	; 0x50
 8007c88:	e001      	b.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d04f      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c9e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007ca2:	d036      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007ca4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007ca8:	d830      	bhi.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cae:	d032      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cb4:	d82a      	bhi.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007cb6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007cba:	d02e      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8007cbc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007cc0:	d824      	bhi.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc6:	d018      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x232>
 8007cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ccc:	d81e      	bhi.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x212>
 8007cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd6:	d007      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8007cd8:	e018      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cda:	4b2c      	ldr	r3, [pc, #176]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cde:	4a2b      	ldr	r2, [pc, #172]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007ce6:	e019      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3304      	adds	r3, #4
 8007cec:	2100      	movs	r1, #0
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 fe34 	bl	800995c <RCCEx_PLL2_Config>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007cf8:	e010      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3324      	adds	r3, #36	; 0x24
 8007cfe:	2100      	movs	r1, #0
 8007d00:	4618      	mov	r0, r3
 8007d02:	f001 fedd 	bl	8009ac0 <RCCEx_PLL3_Config>
 8007d06:	4603      	mov	r3, r0
 8007d08:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007d0a:	e007      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d10:	e004      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007d12:	bf00      	nop
 8007d14:	e002      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007d16:	bf00      	nop
 8007d18:	e000      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d1c:	7dfb      	ldrb	r3, [r7, #23]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d109      	bne.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007d22:	4b1a      	ldr	r3, [pc, #104]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d26:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d2e:	4917      	ldr	r1, [pc, #92]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	650b      	str	r3, [r1, #80]	; 0x50
 8007d34:	e001      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
 8007d38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d034      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d4a:	2b30      	cmp	r3, #48	; 0x30
 8007d4c:	d01c      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8007d4e:	2b30      	cmp	r3, #48	; 0x30
 8007d50:	d817      	bhi.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007d52:	2b20      	cmp	r3, #32
 8007d54:	d00c      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d56:	2b20      	cmp	r3, #32
 8007d58:	d813      	bhi.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d018      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8007d5e:	2b10      	cmp	r3, #16
 8007d60:	d10f      	bne.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d62:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d66:	4a09      	ldr	r2, [pc, #36]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007d6e:	e010      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3304      	adds	r3, #4
 8007d74:	2102      	movs	r1, #2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f001 fdf0 	bl	800995c <RCCEx_PLL2_Config>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007d80:	e007      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	75fb      	strb	r3, [r7, #23]
      break;
 8007d86:	e004      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8007d88:	bf00      	nop
 8007d8a:	e002      	b.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007d8c:	58024400 	.word	0x58024400
      break;
 8007d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d109      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007d98:	4b9b      	ldr	r3, [pc, #620]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da4:	4998      	ldr	r1, [pc, #608]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007daa:	e001      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d047      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dc4:	d030      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dca:	d82a      	bhi.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007dcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dd0:	d02c      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8007dd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dd6:	d824      	bhi.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ddc:	d018      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007de2:	d81e      	bhi.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dec:	d007      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007dee:	e018      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007df0:	4b85      	ldr	r3, [pc, #532]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df4:	4a84      	ldr	r2, [pc, #528]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007dfc:	e017      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3304      	adds	r3, #4
 8007e02:	2100      	movs	r1, #0
 8007e04:	4618      	mov	r0, r3
 8007e06:	f001 fda9 	bl	800995c <RCCEx_PLL2_Config>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e0e:	e00e      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3324      	adds	r3, #36	; 0x24
 8007e14:	2100      	movs	r1, #0
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fe52 	bl	8009ac0 <RCCEx_PLL3_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e20:	e005      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	75fb      	strb	r3, [r7, #23]
      break;
 8007e26:	e002      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8007e28:	bf00      	nop
 8007e2a:	e000      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8007e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d109      	bne.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007e34:	4b74      	ldr	r3, [pc, #464]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e38:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e40:	4971      	ldr	r1, [pc, #452]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	650b      	str	r3, [r1, #80]	; 0x50
 8007e46:	e001      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d049      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e60:	d02e      	beq.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007e62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e66:	d828      	bhi.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007e68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e6c:	d02a      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007e6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e72:	d822      	bhi.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007e74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e78:	d026      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8007e7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e7e:	d81c      	bhi.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007e80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e84:	d010      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007e86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e8a:	d816      	bhi.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01d      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e94:	d111      	bne.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 fd5d 	bl	800995c <RCCEx_PLL2_Config>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007ea6:	e012      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3324      	adds	r3, #36	; 0x24
 8007eac:	2101      	movs	r1, #1
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f001 fe06 	bl	8009ac0 <RCCEx_PLL3_Config>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007eb8:	e009      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ebe:	e006      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007ec0:	bf00      	nop
 8007ec2:	e004      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007ec4:	bf00      	nop
 8007ec6:	e002      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007ec8:	bf00      	nop
 8007eca:	e000      	b.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d109      	bne.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007ed4:	4b4c      	ldr	r3, [pc, #304]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ee0:	4949      	ldr	r1, [pc, #292]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	650b      	str	r3, [r1, #80]	; 0x50
 8007ee6:	e001      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee8:	7dfb      	ldrb	r3, [r7, #23]
 8007eea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d053      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007efe:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007f02:	d034      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007f04:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007f08:	d82e      	bhi.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f0e:	d030      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8007f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f14:	d828      	bhi.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1a:	d02c      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f20:	d822      	bhi.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007f22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f26:	d028      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007f28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f2c:	d81c      	bhi.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f32:	d010      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8007f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f38:	d816      	bhi.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01f      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007f3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f42:	d111      	bne.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3304      	adds	r3, #4
 8007f48:	2101      	movs	r1, #1
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f001 fd06 	bl	800995c <RCCEx_PLL2_Config>
 8007f50:	4603      	mov	r3, r0
 8007f52:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007f54:	e014      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3324      	adds	r3, #36	; 0x24
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f001 fdaf 	bl	8009ac0 <RCCEx_PLL3_Config>
 8007f62:	4603      	mov	r3, r0
 8007f64:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007f66:	e00b      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f6c:	e008      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007f6e:	bf00      	nop
 8007f70:	e006      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007f72:	bf00      	nop
 8007f74:	e004      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007f76:	bf00      	nop
 8007f78:	e002      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007f7a:	bf00      	nop
 8007f7c:	e000      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f80:	7dfb      	ldrb	r3, [r7, #23]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10a      	bne.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007f86:	4b20      	ldr	r3, [pc, #128]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f94:	491c      	ldr	r1, [pc, #112]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	658b      	str	r3, [r1, #88]	; 0x58
 8007f9a:	e001      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9c:	7dfb      	ldrb	r3, [r7, #23]
 8007f9e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d031      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fb4:	d00e      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fba:	d814      	bhi.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d015      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007fc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fc4:	d10f      	bne.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc6:	4b10      	ldr	r3, [pc, #64]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fca:	4a0f      	ldr	r2, [pc, #60]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007fd2:	e00c      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	2101      	movs	r1, #1
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f001 fcbe 	bl	800995c <RCCEx_PLL2_Config>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007fe4:	e003      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8007fea:	e000      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8007fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10b      	bne.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ff4:	4b04      	ldr	r3, [pc, #16]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008000:	4901      	ldr	r1, [pc, #4]	; (8008008 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008002:	4313      	orrs	r3, r2
 8008004:	650b      	str	r3, [r1, #80]	; 0x50
 8008006:	e003      	b.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8008008:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008018:	2b00      	cmp	r3, #0
 800801a:	d032      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008020:	2b03      	cmp	r3, #3
 8008022:	d81b      	bhi.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008024:	a201      	add	r2, pc, #4	; (adr r2, 800802c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8008026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802a:	bf00      	nop
 800802c:	08008063 	.word	0x08008063
 8008030:	0800803d 	.word	0x0800803d
 8008034:	0800804b 	.word	0x0800804b
 8008038:	08008063 	.word	0x08008063
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800803c:	4bb2      	ldr	r3, [pc, #712]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008040:	4ab1      	ldr	r2, [pc, #708]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008046:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008048:	e00c      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3304      	adds	r3, #4
 800804e:	2102      	movs	r1, #2
 8008050:	4618      	mov	r0, r3
 8008052:	f001 fc83 	bl	800995c <RCCEx_PLL2_Config>
 8008056:	4603      	mov	r3, r0
 8008058:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800805a:	e003      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	75fb      	strb	r3, [r7, #23]
      break;
 8008060:	e000      	b.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d109      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800806a:	4ba7      	ldr	r3, [pc, #668]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800806c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800806e:	f023 0203 	bic.w	r2, r3, #3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008076:	49a4      	ldr	r1, [pc, #656]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008078:	4313      	orrs	r3, r2
 800807a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800807c:	e001      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 8086 	beq.w	800819c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008090:	4b9e      	ldr	r3, [pc, #632]	; (800830c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a9d      	ldr	r2, [pc, #628]	; (800830c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800809a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800809c:	f7fa fc40 	bl	8002920 <HAL_GetTick>
 80080a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080a2:	e009      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080a4:	f7fa fc3c 	bl	8002920 <HAL_GetTick>
 80080a8:	4602      	mov	r2, r0
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	2b64      	cmp	r3, #100	; 0x64
 80080b0:	d902      	bls.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	75fb      	strb	r3, [r7, #23]
        break;
 80080b6:	e005      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080b8:	4b94      	ldr	r3, [pc, #592]	; (800830c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0ef      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d166      	bne.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80080ca:	4b8f      	ldr	r3, [pc, #572]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80080d4:	4053      	eors	r3, r2
 80080d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d013      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080de:	4b8a      	ldr	r3, [pc, #552]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80080e8:	4b87      	ldr	r3, [pc, #540]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ec:	4a86      	ldr	r2, [pc, #536]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080f4:	4b84      	ldr	r3, [pc, #528]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f8:	4a83      	ldr	r2, [pc, #524]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008100:	4a81      	ldr	r2, [pc, #516]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800810c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008110:	d115      	bne.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008112:	f7fa fc05 	bl	8002920 <HAL_GetTick>
 8008116:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008118:	e00b      	b.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800811a:	f7fa fc01 	bl	8002920 <HAL_GetTick>
 800811e:	4602      	mov	r2, r0
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	f241 3288 	movw	r2, #5000	; 0x1388
 8008128:	4293      	cmp	r3, r2
 800812a:	d902      	bls.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	75fb      	strb	r3, [r7, #23]
            break;
 8008130:	e005      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008132:	4b75      	ldr	r3, [pc, #468]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008136:	f003 0302 	and.w	r3, r3, #2
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0ed      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d126      	bne.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800814a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800814e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008152:	d10d      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8008154:	4b6c      	ldr	r3, [pc, #432]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008162:	0919      	lsrs	r1, r3, #4
 8008164:	4b6a      	ldr	r3, [pc, #424]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008166:	400b      	ands	r3, r1
 8008168:	4967      	ldr	r1, [pc, #412]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800816a:	4313      	orrs	r3, r2
 800816c:	610b      	str	r3, [r1, #16]
 800816e:	e005      	b.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8008170:	4b65      	ldr	r3, [pc, #404]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	4a64      	ldr	r2, [pc, #400]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008176:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800817a:	6113      	str	r3, [r2, #16]
 800817c:	4b62      	ldr	r3, [pc, #392]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800817e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800818a:	495f      	ldr	r1, [pc, #380]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800818c:	4313      	orrs	r3, r2
 800818e:	670b      	str	r3, [r1, #112]	; 0x70
 8008190:	e004      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
 8008194:	75bb      	strb	r3, [r7, #22]
 8008196:	e001      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008198:	7dfb      	ldrb	r3, [r7, #23]
 800819a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d07f      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081ae:	2b28      	cmp	r3, #40	; 0x28
 80081b0:	d866      	bhi.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80081b2:	a201      	add	r2, pc, #4	; (adr r2, 80081b8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80081b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b8:	08008287 	.word	0x08008287
 80081bc:	08008281 	.word	0x08008281
 80081c0:	08008281 	.word	0x08008281
 80081c4:	08008281 	.word	0x08008281
 80081c8:	08008281 	.word	0x08008281
 80081cc:	08008281 	.word	0x08008281
 80081d0:	08008281 	.word	0x08008281
 80081d4:	08008281 	.word	0x08008281
 80081d8:	0800825d 	.word	0x0800825d
 80081dc:	08008281 	.word	0x08008281
 80081e0:	08008281 	.word	0x08008281
 80081e4:	08008281 	.word	0x08008281
 80081e8:	08008281 	.word	0x08008281
 80081ec:	08008281 	.word	0x08008281
 80081f0:	08008281 	.word	0x08008281
 80081f4:	08008281 	.word	0x08008281
 80081f8:	0800826f 	.word	0x0800826f
 80081fc:	08008281 	.word	0x08008281
 8008200:	08008281 	.word	0x08008281
 8008204:	08008281 	.word	0x08008281
 8008208:	08008281 	.word	0x08008281
 800820c:	08008281 	.word	0x08008281
 8008210:	08008281 	.word	0x08008281
 8008214:	08008281 	.word	0x08008281
 8008218:	08008287 	.word	0x08008287
 800821c:	08008281 	.word	0x08008281
 8008220:	08008281 	.word	0x08008281
 8008224:	08008281 	.word	0x08008281
 8008228:	08008281 	.word	0x08008281
 800822c:	08008281 	.word	0x08008281
 8008230:	08008281 	.word	0x08008281
 8008234:	08008281 	.word	0x08008281
 8008238:	08008287 	.word	0x08008287
 800823c:	08008281 	.word	0x08008281
 8008240:	08008281 	.word	0x08008281
 8008244:	08008281 	.word	0x08008281
 8008248:	08008281 	.word	0x08008281
 800824c:	08008281 	.word	0x08008281
 8008250:	08008281 	.word	0x08008281
 8008254:	08008281 	.word	0x08008281
 8008258:	08008287 	.word	0x08008287
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	3304      	adds	r3, #4
 8008260:	2101      	movs	r1, #1
 8008262:	4618      	mov	r0, r3
 8008264:	f001 fb7a 	bl	800995c <RCCEx_PLL2_Config>
 8008268:	4603      	mov	r3, r0
 800826a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800826c:	e00c      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	3324      	adds	r3, #36	; 0x24
 8008272:	2101      	movs	r1, #1
 8008274:	4618      	mov	r0, r3
 8008276:	f001 fc23 	bl	8009ac0 <RCCEx_PLL3_Config>
 800827a:	4603      	mov	r3, r0
 800827c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800827e:	e003      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	75fb      	strb	r3, [r7, #23]
      break;
 8008284:	e000      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8008286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008288:	7dfb      	ldrb	r3, [r7, #23]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10a      	bne.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800828e:	4b1e      	ldr	r3, [pc, #120]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008292:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800829c:	491a      	ldr	r1, [pc, #104]	; (8008308 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	654b      	str	r3, [r1, #84]	; 0x54
 80082a2:	e001      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
 80082a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d03f      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082b8:	2b05      	cmp	r3, #5
 80082ba:	d821      	bhi.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80082bc:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80082be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c2:	bf00      	nop
 80082c4:	08008315 	.word	0x08008315
 80082c8:	080082dd 	.word	0x080082dd
 80082cc:	080082ef 	.word	0x080082ef
 80082d0:	08008315 	.word	0x08008315
 80082d4:	08008315 	.word	0x08008315
 80082d8:	08008315 	.word	0x08008315
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3304      	adds	r3, #4
 80082e0:	2101      	movs	r1, #1
 80082e2:	4618      	mov	r0, r3
 80082e4:	f001 fb3a 	bl	800995c <RCCEx_PLL2_Config>
 80082e8:	4603      	mov	r3, r0
 80082ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80082ec:	e013      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	3324      	adds	r3, #36	; 0x24
 80082f2:	2101      	movs	r1, #1
 80082f4:	4618      	mov	r0, r3
 80082f6:	f001 fbe3 	bl	8009ac0 <RCCEx_PLL3_Config>
 80082fa:	4603      	mov	r3, r0
 80082fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80082fe:	e00a      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	75fb      	strb	r3, [r7, #23]
      break;
 8008304:	e007      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8008306:	bf00      	nop
 8008308:	58024400 	.word	0x58024400
 800830c:	58024800 	.word	0x58024800
 8008310:	00ffffcf 	.word	0x00ffffcf
      break;
 8008314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d109      	bne.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800831c:	4b9f      	ldr	r3, [pc, #636]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800831e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008320:	f023 0207 	bic.w	r2, r3, #7
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008328:	499c      	ldr	r1, [pc, #624]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800832a:	4313      	orrs	r3, r2
 800832c:	654b      	str	r3, [r1, #84]	; 0x54
 800832e:	e001      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008330:	7dfb      	ldrb	r3, [r7, #23]
 8008332:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0304 	and.w	r3, r3, #4
 800833c:	2b00      	cmp	r3, #0
 800833e:	d039      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008346:	2b05      	cmp	r3, #5
 8008348:	d820      	bhi.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800834a:	a201      	add	r2, pc, #4	; (adr r2, 8008350 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800834c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008350:	08008393 	.word	0x08008393
 8008354:	08008369 	.word	0x08008369
 8008358:	0800837b 	.word	0x0800837b
 800835c:	08008393 	.word	0x08008393
 8008360:	08008393 	.word	0x08008393
 8008364:	08008393 	.word	0x08008393
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3304      	adds	r3, #4
 800836c:	2101      	movs	r1, #1
 800836e:	4618      	mov	r0, r3
 8008370:	f001 faf4 	bl	800995c <RCCEx_PLL2_Config>
 8008374:	4603      	mov	r3, r0
 8008376:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008378:	e00c      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	3324      	adds	r3, #36	; 0x24
 800837e:	2101      	movs	r1, #1
 8008380:	4618      	mov	r0, r3
 8008382:	f001 fb9d 	bl	8009ac0 <RCCEx_PLL3_Config>
 8008386:	4603      	mov	r3, r0
 8008388:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800838a:	e003      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	75fb      	strb	r3, [r7, #23]
      break;
 8008390:	e000      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8008392:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008394:	7dfb      	ldrb	r3, [r7, #23]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10a      	bne.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800839a:	4b80      	ldr	r3, [pc, #512]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800839c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800839e:	f023 0207 	bic.w	r2, r3, #7
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083a8:	497c      	ldr	r1, [pc, #496]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	658b      	str	r3, [r1, #88]	; 0x58
 80083ae:	e001      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0320 	and.w	r3, r3, #32
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d04b      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083ca:	d02e      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x962>
 80083cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083d0:	d828      	bhi.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80083d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d6:	d02a      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80083d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083dc:	d822      	bhi.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80083de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083e2:	d026      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80083e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80083e8:	d81c      	bhi.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80083ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ee:	d010      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80083f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083f4:	d816      	bhi.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d01d      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80083fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083fe:	d111      	bne.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3304      	adds	r3, #4
 8008404:	2100      	movs	r1, #0
 8008406:	4618      	mov	r0, r3
 8008408:	f001 faa8 	bl	800995c <RCCEx_PLL2_Config>
 800840c:	4603      	mov	r3, r0
 800840e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008410:	e012      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	3324      	adds	r3, #36	; 0x24
 8008416:	2102      	movs	r1, #2
 8008418:	4618      	mov	r0, r3
 800841a:	f001 fb51 	bl	8009ac0 <RCCEx_PLL3_Config>
 800841e:	4603      	mov	r3, r0
 8008420:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008422:	e009      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	75fb      	strb	r3, [r7, #23]
      break;
 8008428:	e006      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800842a:	bf00      	nop
 800842c:	e004      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800842e:	bf00      	nop
 8008430:	e002      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008432:	bf00      	nop
 8008434:	e000      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008438:	7dfb      	ldrb	r3, [r7, #23]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800843e:	4b57      	ldr	r3, [pc, #348]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008442:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800844c:	4953      	ldr	r1, [pc, #332]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800844e:	4313      	orrs	r3, r2
 8008450:	654b      	str	r3, [r1, #84]	; 0x54
 8008452:	e001      	b.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008454:	7dfb      	ldrb	r3, [r7, #23]
 8008456:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008460:	2b00      	cmp	r3, #0
 8008462:	d04b      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800846a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800846e:	d02e      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8008470:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008474:	d828      	bhi.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800847a:	d02a      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800847c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008480:	d822      	bhi.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008482:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008486:	d026      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800848c:	d81c      	bhi.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800848e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008492:	d010      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8008494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008498:	d816      	bhi.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d01d      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800849e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a2:	d111      	bne.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	3304      	adds	r3, #4
 80084a8:	2100      	movs	r1, #0
 80084aa:	4618      	mov	r0, r3
 80084ac:	f001 fa56 	bl	800995c <RCCEx_PLL2_Config>
 80084b0:	4603      	mov	r3, r0
 80084b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80084b4:	e012      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	3324      	adds	r3, #36	; 0x24
 80084ba:	2102      	movs	r1, #2
 80084bc:	4618      	mov	r0, r3
 80084be:	f001 faff 	bl	8009ac0 <RCCEx_PLL3_Config>
 80084c2:	4603      	mov	r3, r0
 80084c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80084c6:	e009      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	75fb      	strb	r3, [r7, #23]
      break;
 80084cc:	e006      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80084ce:	bf00      	nop
 80084d0:	e004      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80084d2:	bf00      	nop
 80084d4:	e002      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80084d6:	bf00      	nop
 80084d8:	e000      	b.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80084da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084dc:	7dfb      	ldrb	r3, [r7, #23]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10a      	bne.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80084e2:	4b2e      	ldr	r3, [pc, #184]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80084e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80084f0:	492a      	ldr	r1, [pc, #168]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	658b      	str	r3, [r1, #88]	; 0x58
 80084f6:	e001      	b.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
 80084fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008504:	2b00      	cmp	r3, #0
 8008506:	d04d      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800850e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008512:	d02e      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8008514:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008518:	d828      	bhi.n	800856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800851a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800851e:	d02a      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008524:	d822      	bhi.n	800856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008526:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800852a:	d026      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800852c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008530:	d81c      	bhi.n	800856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008536:	d010      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8008538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800853c:	d816      	bhi.n	800856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800853e:	2b00      	cmp	r3, #0
 8008540:	d01d      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008546:	d111      	bne.n	800856c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3304      	adds	r3, #4
 800854c:	2100      	movs	r1, #0
 800854e:	4618      	mov	r0, r3
 8008550:	f001 fa04 	bl	800995c <RCCEx_PLL2_Config>
 8008554:	4603      	mov	r3, r0
 8008556:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008558:	e012      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	3324      	adds	r3, #36	; 0x24
 800855e:	2102      	movs	r1, #2
 8008560:	4618      	mov	r0, r3
 8008562:	f001 faad 	bl	8009ac0 <RCCEx_PLL3_Config>
 8008566:	4603      	mov	r3, r0
 8008568:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800856a:	e009      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	75fb      	strb	r3, [r7, #23]
      break;
 8008570:	e006      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008572:	bf00      	nop
 8008574:	e004      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008576:	bf00      	nop
 8008578:	e002      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800857a:	bf00      	nop
 800857c:	e000      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800857e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10c      	bne.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008586:	4b05      	ldr	r3, [pc, #20]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800858a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008594:	4901      	ldr	r1, [pc, #4]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008596:	4313      	orrs	r3, r2
 8008598:	658b      	str	r3, [r1, #88]	; 0x58
 800859a:	e003      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800859c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
 80085a2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f003 0308 	and.w	r3, r3, #8
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d01a      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ba:	d10a      	bne.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	3324      	adds	r3, #36	; 0x24
 80085c0:	2102      	movs	r1, #2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f001 fa7c 	bl	8009ac0 <RCCEx_PLL3_Config>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80085d2:	4b8c      	ldr	r3, [pc, #560]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80085d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e0:	4988      	ldr	r1, [pc, #544]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0310 	and.w	r3, r3, #16
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d01a      	beq.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085fc:	d10a      	bne.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	3324      	adds	r3, #36	; 0x24
 8008602:	2102      	movs	r1, #2
 8008604:	4618      	mov	r0, r3
 8008606:	f001 fa5b 	bl	8009ac0 <RCCEx_PLL3_Config>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008614:	4b7b      	ldr	r3, [pc, #492]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008622:	4978      	ldr	r1, [pc, #480]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008624:	4313      	orrs	r3, r2
 8008626:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d034      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800863a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800863e:	d01d      	beq.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8008640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008644:	d817      	bhi.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800864a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800864e:	d009      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008650:	e011      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	3304      	adds	r3, #4
 8008656:	2100      	movs	r1, #0
 8008658:	4618      	mov	r0, r3
 800865a:	f001 f97f 	bl	800995c <RCCEx_PLL2_Config>
 800865e:	4603      	mov	r3, r0
 8008660:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008662:	e00c      	b.n	800867e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	3324      	adds	r3, #36	; 0x24
 8008668:	2102      	movs	r1, #2
 800866a:	4618      	mov	r0, r3
 800866c:	f001 fa28 	bl	8009ac0 <RCCEx_PLL3_Config>
 8008670:	4603      	mov	r3, r0
 8008672:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008674:	e003      	b.n	800867e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	75fb      	strb	r3, [r7, #23]
      break;
 800867a:	e000      	b.n	800867e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800867c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800867e:	7dfb      	ldrb	r3, [r7, #23]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10a      	bne.n	800869a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008684:	4b5f      	ldr	r3, [pc, #380]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008688:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008692:	495c      	ldr	r1, [pc, #368]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008694:	4313      	orrs	r3, r2
 8008696:	658b      	str	r3, [r1, #88]	; 0x58
 8008698:	e001      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d033      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086b4:	d01c      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80086b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086ba:	d816      	bhi.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80086bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086c0:	d003      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80086c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086c6:	d007      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80086c8:	e00f      	b.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086ca:	4b4e      	ldr	r3, [pc, #312]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80086cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ce:	4a4d      	ldr	r2, [pc, #308]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80086d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80086d6:	e00c      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3324      	adds	r3, #36	; 0x24
 80086dc:	2101      	movs	r1, #1
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 f9ee 	bl	8009ac0 <RCCEx_PLL3_Config>
 80086e4:	4603      	mov	r3, r0
 80086e6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80086e8:	e003      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	75fb      	strb	r3, [r7, #23]
      break;
 80086ee:	e000      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80086f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10a      	bne.n	800870e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80086f8:	4b42      	ldr	r3, [pc, #264]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80086fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008706:	493f      	ldr	r1, [pc, #252]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008708:	4313      	orrs	r3, r2
 800870a:	654b      	str	r3, [r1, #84]	; 0x54
 800870c:	e001      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800870e:	7dfb      	ldrb	r3, [r7, #23]
 8008710:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d029      	beq.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8008726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800872a:	d007      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800872c:	e00f      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800872e:	4b35      	ldr	r3, [pc, #212]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008732:	4a34      	ldr	r2, [pc, #208]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008738:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800873a:	e00b      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	3304      	adds	r3, #4
 8008740:	2102      	movs	r1, #2
 8008742:	4618      	mov	r0, r3
 8008744:	f001 f90a 	bl	800995c <RCCEx_PLL2_Config>
 8008748:	4603      	mov	r3, r0
 800874a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800874c:	e002      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	75fb      	strb	r3, [r7, #23]
      break;
 8008752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d109      	bne.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800875a:	4b2a      	ldr	r3, [pc, #168]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800875c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800875e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008766:	4927      	ldr	r1, [pc, #156]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008768:	4313      	orrs	r3, r2
 800876a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800876c:	e001      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00a      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	3324      	adds	r3, #36	; 0x24
 8008782:	2102      	movs	r1, #2
 8008784:	4618      	mov	r0, r3
 8008786:	f001 f99b 	bl	8009ac0 <RCCEx_PLL3_Config>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800879c:	2b00      	cmp	r3, #0
 800879e:	d035      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087aa:	d017      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80087ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087b0:	d811      	bhi.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80087b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087b6:	d013      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80087b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087bc:	d80b      	bhi.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d010      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80087c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c6:	d106      	bne.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087c8:	4b0e      	ldr	r3, [pc, #56]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80087ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087cc:	4a0d      	ldr	r2, [pc, #52]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80087ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80087d4:	e007      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	75fb      	strb	r3, [r7, #23]
      break;
 80087da:	e004      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80087dc:	bf00      	nop
 80087de:	e002      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80087e0:	bf00      	nop
 80087e2:	e000      	b.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80087e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10d      	bne.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80087ec:	4b05      	ldr	r3, [pc, #20]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80087ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087fa:	4902      	ldr	r1, [pc, #8]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	654b      	str	r3, [r1, #84]	; 0x54
 8008800:	e004      	b.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008802:	bf00      	nop
 8008804:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008808:	7dfb      	ldrb	r3, [r7, #23]
 800880a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d008      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008818:	4b30      	ldr	r3, [pc, #192]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800881a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800881c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008824:	492d      	ldr	r1, [pc, #180]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008826:	4313      	orrs	r3, r2
 8008828:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d008      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008836:	4b29      	ldr	r3, [pc, #164]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800883a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008842:	4926      	ldr	r1, [pc, #152]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008844:	4313      	orrs	r3, r2
 8008846:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008850:	2b00      	cmp	r3, #0
 8008852:	d008      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008854:	4b21      	ldr	r3, [pc, #132]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008858:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008860:	491e      	ldr	r1, [pc, #120]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008862:	4313      	orrs	r3, r2
 8008864:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00d      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008872:	4b1a      	ldr	r3, [pc, #104]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	4a19      	ldr	r2, [pc, #100]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008878:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800887c:	6113      	str	r3, [r2, #16]
 800887e:	4b17      	ldr	r3, [pc, #92]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008880:	691a      	ldr	r2, [r3, #16]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008888:	4914      	ldr	r1, [pc, #80]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800888a:	4313      	orrs	r3, r2
 800888c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	da08      	bge.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008896:	4b11      	ldr	r3, [pc, #68]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800889a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a2:	490e      	ldr	r1, [pc, #56]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d009      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80088b4:	4b09      	ldr	r3, [pc, #36]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80088b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c2:	4906      	ldr	r1, [pc, #24]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80088c4:	4313      	orrs	r3, r2
 80088c6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80088c8:	7dbb      	ldrb	r3, [r7, #22]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	e000      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	58024400 	.word	0x58024400

080088e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b090      	sub	sp, #64	; 0x40
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ee:	f040 8089 	bne.w	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80088f2:	4b91      	ldr	r3, [pc, #580]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80088f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f6:	f003 0307 	and.w	r3, r3, #7
 80088fa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80088fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d87d      	bhi.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8008902:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	0800891d 	.word	0x0800891d
 800890c:	08008941 	.word	0x08008941
 8008910:	08008965 	.word	0x08008965
 8008914:	080089f9 	.word	0x080089f9
 8008918:	08008989 	.word	0x08008989
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800891c:	4b86      	ldr	r3, [pc, #536]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008928:	d107      	bne.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800892a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800892e:	4618      	mov	r0, r3
 8008930:	f000 fec2 	bl	80096b8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008936:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008938:	e3f4      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800893a:	2300      	movs	r3, #0
 800893c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800893e:	e3f1      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008940:	4b7d      	ldr	r3, [pc, #500]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800894c:	d107      	bne.n	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800894e:	f107 0318 	add.w	r3, r7, #24
 8008952:	4618      	mov	r0, r3
 8008954:	f000 fc08 	bl	8009168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800895c:	e3e2      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800895e:	2300      	movs	r3, #0
 8008960:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008962:	e3df      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008964:	4b74      	ldr	r3, [pc, #464]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800896c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008970:	d107      	bne.n	8008982 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008972:	f107 030c 	add.w	r3, r7, #12
 8008976:	4618      	mov	r0, r3
 8008978:	f000 fd4a 	bl	8009410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008980:	e3d0      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008986:	e3cd      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008988:	4b6b      	ldr	r3, [pc, #428]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800898a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800898c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008990:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008992:	4b69      	ldr	r3, [pc, #420]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 0304 	and.w	r3, r3, #4
 800899a:	2b04      	cmp	r3, #4
 800899c:	d10c      	bne.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800899e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d109      	bne.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089a4:	4b64      	ldr	r3, [pc, #400]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	08db      	lsrs	r3, r3, #3
 80089aa:	f003 0303 	and.w	r3, r3, #3
 80089ae:	4a63      	ldr	r2, [pc, #396]	; (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80089b0:	fa22 f303 	lsr.w	r3, r2, r3
 80089b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089b6:	e01e      	b.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089b8:	4b5f      	ldr	r3, [pc, #380]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089c4:	d106      	bne.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80089c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089cc:	d102      	bne.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80089ce:	4b5c      	ldr	r3, [pc, #368]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80089d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089d2:	e010      	b.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089d4:	4b58      	ldr	r3, [pc, #352]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089e0:	d106      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80089e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089e8:	d102      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80089ea:	4b56      	ldr	r3, [pc, #344]	; (8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80089ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ee:	e002      	b.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80089f4:	e396      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80089f6:	e395      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80089f8:	4b53      	ldr	r3, [pc, #332]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089fc:	e392      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a02:	e38f      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a0a:	f040 809f 	bne.w	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8008a0e:	4b4a      	ldr	r3, [pc, #296]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a12:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008a16:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a1e:	d04d      	beq.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8008a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a26:	f200 8084 	bhi.w	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2c:	2bc0      	cmp	r3, #192	; 0xc0
 8008a2e:	d07d      	beq.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8008a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a32:	2bc0      	cmp	r3, #192	; 0xc0
 8008a34:	d87d      	bhi.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	2b80      	cmp	r3, #128	; 0x80
 8008a3a:	d02d      	beq.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3e:	2b80      	cmp	r3, #128	; 0x80
 8008a40:	d877      	bhi.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8008a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4a:	2b40      	cmp	r3, #64	; 0x40
 8008a4c:	d012      	beq.n	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8008a4e:	e070      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a50:	4b39      	ldr	r3, [pc, #228]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a5c:	d107      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fe28 	bl	80096b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a6c:	e35a      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a72:	e357      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a74:	4b30      	ldr	r3, [pc, #192]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a80:	d107      	bne.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a82:	f107 0318 	add.w	r3, r7, #24
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 fb6e 	bl	8009168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a90:	e348      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a96:	e345      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a98:	4b27      	ldr	r3, [pc, #156]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa4:	d107      	bne.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aa6:	f107 030c 	add.w	r3, r7, #12
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 fcb0 	bl	8009410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ab4:	e336      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aba:	e333      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008abc:	4b1e      	ldr	r3, [pc, #120]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ac0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ac4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ac6:	4b1c      	ldr	r3, [pc, #112]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0304 	and.w	r3, r3, #4
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d10c      	bne.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8008ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d109      	bne.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ad8:	4b17      	ldr	r3, [pc, #92]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	08db      	lsrs	r3, r3, #3
 8008ade:	f003 0303 	and.w	r3, r3, #3
 8008ae2:	4a16      	ldr	r2, [pc, #88]	; (8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aea:	e01e      	b.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008aec:	4b12      	ldr	r3, [pc, #72]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008af8:	d106      	bne.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8008afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b00:	d102      	bne.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008b02:	4b0f      	ldr	r3, [pc, #60]	; (8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b06:	e010      	b.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b08:	4b0b      	ldr	r3, [pc, #44]	; (8008b38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b14:	d106      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b1c:	d102      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008b1e:	4b09      	ldr	r3, [pc, #36]	; (8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b22:	e002      	b.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008b28:	e2fc      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008b2a:	e2fb      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008b2c:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b30:	e2f8      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008b32:	2300      	movs	r3, #0
 8008b34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b36:	e2f5      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008b38:	58024400 	.word	0x58024400
 8008b3c:	03d09000 	.word	0x03d09000
 8008b40:	003d0900 	.word	0x003d0900
 8008b44:	007a1200 	.word	0x007a1200
 8008b48:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b52:	f040 809c 	bne.w	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8008b56:	4b9d      	ldr	r3, [pc, #628]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b5a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008b5e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b66:	d054      	beq.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b6e:	f200 808b 	bhi.w	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008b78:	f000 8083 	beq.w	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008b82:	f200 8081 	bhi.w	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b8c:	d02f      	beq.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b94:	d878      	bhi.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d004      	beq.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ba2:	d012      	beq.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8008ba4:	e070      	b.n	8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ba6:	4b89      	ldr	r3, [pc, #548]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bb2:	d107      	bne.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 fd7d 	bl	80096b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bc2:	e2af      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bc8:	e2ac      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bca:	4b80      	ldr	r3, [pc, #512]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bd6:	d107      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bd8:	f107 0318 	add.w	r3, r7, #24
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 fac3 	bl	8009168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008be6:	e29d      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bec:	e29a      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bee:	4b77      	ldr	r3, [pc, #476]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bfa:	d107      	bne.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bfc:	f107 030c 	add.w	r3, r7, #12
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 fc05 	bl	8009410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c0a:	e28b      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c10:	e288      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c12:	4b6e      	ldr	r3, [pc, #440]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c1a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c1c:	4b6b      	ldr	r3, [pc, #428]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0304 	and.w	r3, r3, #4
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	d10c      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8008c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d109      	bne.n	8008c42 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c2e:	4b67      	ldr	r3, [pc, #412]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	08db      	lsrs	r3, r3, #3
 8008c34:	f003 0303 	and.w	r3, r3, #3
 8008c38:	4a65      	ldr	r2, [pc, #404]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8008c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c40:	e01e      	b.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c42:	4b62      	ldr	r3, [pc, #392]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c4e:	d106      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8008c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c56:	d102      	bne.n	8008c5e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008c58:	4b5e      	ldr	r3, [pc, #376]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c5c:	e010      	b.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c5e:	4b5b      	ldr	r3, [pc, #364]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c6a:	d106      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c72:	d102      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008c74:	4b58      	ldr	r3, [pc, #352]	; (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8008c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c78:	e002      	b.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8008c7e:	e251      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008c80:	e250      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c82:	4b56      	ldr	r3, [pc, #344]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008c84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c86:	e24d      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c8c:	e24a      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c94:	f040 80a7 	bne.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008c98:	4b4c      	ldr	r3, [pc, #304]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c9c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008ca0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ca8:	d055      	beq.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cb0:	f200 8096 	bhi.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cba:	f000 8084 	beq.w	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cc4:	f200 808c 	bhi.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cce:	d030      	beq.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cd6:	f200 8083 	bhi.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d004      	beq.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce6:	d012      	beq.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8008ce8:	e07a      	b.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cea:	4b38      	ldr	r3, [pc, #224]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cf6:	d107      	bne.n	8008d08 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 fcdb 	bl	80096b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d04:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d06:	e20d      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d0c:	e20a      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d0e:	4b2f      	ldr	r3, [pc, #188]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d1a:	d107      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d1c:	f107 0318 	add.w	r3, r7, #24
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 fa21 	bl	8009168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d2a:	e1fb      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d30:	e1f8      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d32:	4b26      	ldr	r3, [pc, #152]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d3e:	d107      	bne.n	8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d40:	f107 030c 	add.w	r3, r7, #12
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 fb63 	bl	8009410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d4e:	e1e9      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008d50:	2300      	movs	r3, #0
 8008d52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d54:	e1e6      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d56:	4b1d      	ldr	r3, [pc, #116]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d5e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d60:	4b1a      	ldr	r3, [pc, #104]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	2b04      	cmp	r3, #4
 8008d6a:	d10c      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8008d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d109      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d72:	4b16      	ldr	r3, [pc, #88]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	08db      	lsrs	r3, r3, #3
 8008d78:	f003 0303 	and.w	r3, r3, #3
 8008d7c:	4a14      	ldr	r2, [pc, #80]	; (8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8008d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d84:	e01e      	b.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d86:	4b11      	ldr	r3, [pc, #68]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d92:	d106      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8008d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d9a:	d102      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d9c:	4b0d      	ldr	r3, [pc, #52]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008da0:	e010      	b.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008da2:	4b0a      	ldr	r3, [pc, #40]	; (8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dae:	d106      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008db6:	d102      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008db8:	4b07      	ldr	r3, [pc, #28]	; (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8008dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dbc:	e002      	b.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008dc2:	e1af      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008dc4:	e1ae      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008dc6:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dca:	e1ab      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008dcc:	58024400 	.word	0x58024400
 8008dd0:	03d09000 	.word	0x03d09000
 8008dd4:	003d0900 	.word	0x003d0900
 8008dd8:	007a1200 	.word	0x007a1200
 8008ddc:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008de4:	e19e      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008dec:	d173      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008dee:	4b9d      	ldr	r3, [pc, #628]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008df6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dfe:	d02f      	beq.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8008e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e06:	d863      	bhi.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d004      	beq.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e14:	d012      	beq.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8008e16:	e05b      	b.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e18:	4b92      	ldr	r3, [pc, #584]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e24:	d107      	bne.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e26:	f107 0318 	add.w	r3, r7, #24
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 f99c 	bl	8009168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e34:	e176      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e3a:	e173      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e3c:	4b89      	ldr	r3, [pc, #548]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e48:	d107      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e4a:	f107 030c 	add.w	r3, r7, #12
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f000 fade 	bl	8009410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e58:	e164      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e5e:	e161      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e60:	4b80      	ldr	r3, [pc, #512]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e68:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e6a:	4b7e      	ldr	r3, [pc, #504]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0304 	and.w	r3, r3, #4
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	d10c      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8008e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d109      	bne.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e7c:	4b79      	ldr	r3, [pc, #484]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	08db      	lsrs	r3, r3, #3
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	4a78      	ldr	r2, [pc, #480]	; (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008e88:	fa22 f303 	lsr.w	r3, r2, r3
 8008e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e8e:	e01e      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e90:	4b74      	ldr	r3, [pc, #464]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e9c:	d106      	bne.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ea4:	d102      	bne.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008ea6:	4b71      	ldr	r3, [pc, #452]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eaa:	e010      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008eac:	4b6d      	ldr	r3, [pc, #436]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eb8:	d106      	bne.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ec0:	d102      	bne.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008ec2:	4b6b      	ldr	r3, [pc, #428]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ec6:	e002      	b.n	8008ece <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008ecc:	e12a      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008ece:	e129      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ed4:	e126      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008edc:	d133      	bne.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008ede:	4b61      	ldr	r3, [pc, #388]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ee6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d004      	beq.n	8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ef4:	d012      	beq.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008ef6:	e023      	b.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ef8:	4b5a      	ldr	r3, [pc, #360]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f04:	d107      	bne.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fbd4 	bl	80096b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f14:	e106      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f1a:	e103      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f1c:	4b51      	ldr	r3, [pc, #324]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f28:	d107      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f2a:	f107 0318 	add.w	r3, r7, #24
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 f91a 	bl	8009168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f38:	e0f4      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f3e:	e0f1      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008f40:	2300      	movs	r3, #0
 8008f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f44:	e0ee      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f4c:	f040 809b 	bne.w	8009086 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008f50:	4b44      	ldr	r3, [pc, #272]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f54:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008f58:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008f60:	f000 808b 	beq.w	800907a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f66:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008f6a:	f200 8089 	bhi.w	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f74:	d06c      	beq.n	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f7c:	f200 8080 	bhi.w	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f86:	d056      	beq.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8008f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f8e:	d877      	bhi.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f96:	d03b      	beq.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8008f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f9e:	d86f      	bhi.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fa6:	d021      	beq.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fae:	d867      	bhi.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d004      	beq.n	8008fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fbc:	d004      	beq.n	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8008fbe:	e05f      	b.n	8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008fc0:	f000 f8bc 	bl	800913c <HAL_RCCEx_GetD3PCLK1Freq>
 8008fc4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008fc6:	e0ad      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fc8:	4b26      	ldr	r3, [pc, #152]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fd4:	d107      	bne.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fd6:	f107 0318 	add.w	r3, r7, #24
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 f8c4 	bl	8009168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008fe4:	e09e      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fea:	e09b      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fec:	4b1d      	ldr	r3, [pc, #116]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff8:	d107      	bne.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ffa:	f107 030c 	add.w	r3, r7, #12
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 fa06 	bl	8009410 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009008:	e08c      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800900e:	e089      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009010:	4b14      	ldr	r3, [pc, #80]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0304 	and.w	r3, r3, #4
 8009018:	2b04      	cmp	r3, #4
 800901a:	d109      	bne.n	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800901c:	4b11      	ldr	r3, [pc, #68]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	08db      	lsrs	r3, r3, #3
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	4a10      	ldr	r2, [pc, #64]	; (8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009028:	fa22 f303 	lsr.w	r3, r2, r3
 800902c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800902e:	e079      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009034:	e076      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009036:	4b0b      	ldr	r3, [pc, #44]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800903e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009042:	d102      	bne.n	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8009044:	4b09      	ldr	r3, [pc, #36]	; (800906c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009046:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009048:	e06c      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800904a:	2300      	movs	r3, #0
 800904c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800904e:	e069      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009050:	4b04      	ldr	r3, [pc, #16]	; (8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800905c:	d10a      	bne.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 800905e:	4b04      	ldr	r3, [pc, #16]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009060:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009062:	e05f      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009064:	58024400 	.word	0x58024400
 8009068:	03d09000 	.word	0x03d09000
 800906c:	003d0900 	.word	0x003d0900
 8009070:	007a1200 	.word	0x007a1200
          frequency = 0;
 8009074:	2300      	movs	r3, #0
 8009076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009078:	e054      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800907a:	4b2d      	ldr	r3, [pc, #180]	; (8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800907c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800907e:	e051      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009084:	e04e      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800908c:	d148      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800908e:	4b29      	ldr	r3, [pc, #164]	; (8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009092:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009096:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800909e:	d02a      	beq.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80090a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090a6:	d838      	bhi.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80090a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d004      	beq.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 80090ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090b4:	d00d      	beq.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80090b6:	e030      	b.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80090b8:	4b1e      	ldr	r3, [pc, #120]	; (8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090c4:	d102      	bne.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 80090c6:	4b1c      	ldr	r3, [pc, #112]	; (8009138 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80090c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80090ca:	e02b      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090d0:	e028      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090d2:	4b18      	ldr	r3, [pc, #96]	; (8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090de:	d107      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 fae7 	bl	80096b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80090ee:	e019      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090f4:	e016      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090f6:	4b0f      	ldr	r3, [pc, #60]	; (8009134 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009102:	d107      	bne.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009104:	f107 0318 	add.w	r3, r7, #24
 8009108:	4618      	mov	r0, r3
 800910a:	f000 f82d 	bl	8009168 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009112:	e007      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009114:	2300      	movs	r3, #0
 8009116:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009118:	e004      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800911e:	e001      	b.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8009120:	2300      	movs	r3, #0
 8009122:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009126:	4618      	mov	r0, r3
 8009128:	3740      	adds	r7, #64	; 0x40
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	00bb8000 	.word	0x00bb8000
 8009134:	58024400 	.word	0x58024400
 8009138:	007a1200 	.word	0x007a1200

0800913c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009140:	f7fe fc66 	bl	8007a10 <HAL_RCC_GetHCLKFreq>
 8009144:	4602      	mov	r2, r0
 8009146:	4b06      	ldr	r3, [pc, #24]	; (8009160 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	091b      	lsrs	r3, r3, #4
 800914c:	f003 0307 	and.w	r3, r3, #7
 8009150:	4904      	ldr	r1, [pc, #16]	; (8009164 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009152:	5ccb      	ldrb	r3, [r1, r3]
 8009154:	f003 031f 	and.w	r3, r3, #31
 8009158:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800915c:	4618      	mov	r0, r3
 800915e:	bd80      	pop	{r7, pc}
 8009160:	58024400 	.word	0x58024400
 8009164:	0800baf0 	.word	0x0800baf0

08009168 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009168:	b480      	push	{r7}
 800916a:	b089      	sub	sp, #36	; 0x24
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009170:	4ba1      	ldr	r3, [pc, #644]	; (80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009174:	f003 0303 	and.w	r3, r3, #3
 8009178:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800917a:	4b9f      	ldr	r3, [pc, #636]	; (80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800917c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917e:	0b1b      	lsrs	r3, r3, #12
 8009180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009184:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009186:	4b9c      	ldr	r3, [pc, #624]	; (80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918a:	091b      	lsrs	r3, r3, #4
 800918c:	f003 0301 	and.w	r3, r3, #1
 8009190:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009192:	4b99      	ldr	r3, [pc, #612]	; (80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009196:	08db      	lsrs	r3, r3, #3
 8009198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	fb02 f303 	mul.w	r3, r2, r3
 80091a2:	ee07 3a90 	vmov	s15, r3
 80091a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f000 8111 	beq.w	80093d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	f000 8083 	beq.w	80092c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	f200 80a1 	bhi.w	8009308 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d056      	beq.n	8009280 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80091d2:	e099      	b.n	8009308 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091d4:	4b88      	ldr	r3, [pc, #544]	; (80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0320 	and.w	r3, r3, #32
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d02d      	beq.n	800923c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80091e0:	4b85      	ldr	r3, [pc, #532]	; (80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	08db      	lsrs	r3, r3, #3
 80091e6:	f003 0303 	and.w	r3, r3, #3
 80091ea:	4a84      	ldr	r2, [pc, #528]	; (80093fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80091ec:	fa22 f303 	lsr.w	r3, r2, r3
 80091f0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	ee07 3a90 	vmov	s15, r3
 80091f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	ee07 3a90 	vmov	s15, r3
 8009202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800920a:	4b7b      	ldr	r3, [pc, #492]	; (80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800920c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009212:	ee07 3a90 	vmov	s15, r3
 8009216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800921a:	ed97 6a03 	vldr	s12, [r7, #12]
 800921e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009400 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800922a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800922e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009236:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800923a:	e087      	b.n	800934c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	ee07 3a90 	vmov	s15, r3
 8009242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009246:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009404 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800924a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800924e:	4b6a      	ldr	r3, [pc, #424]	; (80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009256:	ee07 3a90 	vmov	s15, r3
 800925a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800925e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009262:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009400 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800926a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800926e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800927a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800927e:	e065      	b.n	800934c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	ee07 3a90 	vmov	s15, r3
 8009286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800928e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009292:	4b59      	ldr	r3, [pc, #356]	; (80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800929a:	ee07 3a90 	vmov	s15, r3
 800929e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80092a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009400 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092c2:	e043      	b.n	800934c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	ee07 3a90 	vmov	s15, r3
 80092ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800940c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80092d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d6:	4b48      	ldr	r3, [pc, #288]	; (80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092de:	ee07 3a90 	vmov	s15, r3
 80092e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80092ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009400 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009302:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009306:	e021      	b.n	800934c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	ee07 3a90 	vmov	s15, r3
 800930e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009312:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800931a:	4b37      	ldr	r3, [pc, #220]	; (80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800931c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009322:	ee07 3a90 	vmov	s15, r3
 8009326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800932a:	ed97 6a03 	vldr	s12, [r7, #12]
 800932e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009400 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800933a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800933e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009346:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800934a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800934c:	4b2a      	ldr	r3, [pc, #168]	; (80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800934e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009350:	0a5b      	lsrs	r3, r3, #9
 8009352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009356:	ee07 3a90 	vmov	s15, r3
 800935a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009362:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009366:	edd7 6a07 	vldr	s13, [r7, #28]
 800936a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800936e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009372:	ee17 2a90 	vmov	r2, s15
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800937a:	4b1f      	ldr	r3, [pc, #124]	; (80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800937c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937e:	0c1b      	lsrs	r3, r3, #16
 8009380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009384:	ee07 3a90 	vmov	s15, r3
 8009388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800938c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009390:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009394:	edd7 6a07 	vldr	s13, [r7, #28]
 8009398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800939c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093a0:	ee17 2a90 	vmov	r2, s15
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80093a8:	4b13      	ldr	r3, [pc, #76]	; (80093f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ac:	0e1b      	lsrs	r3, r3, #24
 80093ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80093c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ce:	ee17 2a90 	vmov	r2, s15
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80093d6:	e008      	b.n	80093ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	609a      	str	r2, [r3, #8]
}
 80093ea:	bf00      	nop
 80093ec:	3724      	adds	r7, #36	; 0x24
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	58024400 	.word	0x58024400
 80093fc:	03d09000 	.word	0x03d09000
 8009400:	46000000 	.word	0x46000000
 8009404:	4c742400 	.word	0x4c742400
 8009408:	4a742400 	.word	0x4a742400
 800940c:	4af42400 	.word	0x4af42400

08009410 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009410:	b480      	push	{r7}
 8009412:	b089      	sub	sp, #36	; 0x24
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009418:	4ba1      	ldr	r3, [pc, #644]	; (80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800941a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941c:	f003 0303 	and.w	r3, r3, #3
 8009420:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009422:	4b9f      	ldr	r3, [pc, #636]	; (80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009426:	0d1b      	lsrs	r3, r3, #20
 8009428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800942c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800942e:	4b9c      	ldr	r3, [pc, #624]	; (80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009432:	0a1b      	lsrs	r3, r3, #8
 8009434:	f003 0301 	and.w	r3, r3, #1
 8009438:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800943a:	4b99      	ldr	r3, [pc, #612]	; (80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800943c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800943e:	08db      	lsrs	r3, r3, #3
 8009440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	fb02 f303 	mul.w	r3, r2, r3
 800944a:	ee07 3a90 	vmov	s15, r3
 800944e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009452:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 8111 	beq.w	8009680 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	2b02      	cmp	r3, #2
 8009462:	f000 8083 	beq.w	800956c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	2b02      	cmp	r3, #2
 800946a:	f200 80a1 	bhi.w	80095b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d003      	beq.n	800947c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d056      	beq.n	8009528 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800947a:	e099      	b.n	80095b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800947c:	4b88      	ldr	r3, [pc, #544]	; (80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0320 	and.w	r3, r3, #32
 8009484:	2b00      	cmp	r3, #0
 8009486:	d02d      	beq.n	80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009488:	4b85      	ldr	r3, [pc, #532]	; (80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	08db      	lsrs	r3, r3, #3
 800948e:	f003 0303 	and.w	r3, r3, #3
 8009492:	4a84      	ldr	r2, [pc, #528]	; (80096a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009494:	fa22 f303 	lsr.w	r3, r2, r3
 8009498:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	ee07 3a90 	vmov	s15, r3
 80094a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	ee07 3a90 	vmov	s15, r3
 80094aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094b2:	4b7b      	ldr	r3, [pc, #492]	; (80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ba:	ee07 3a90 	vmov	s15, r3
 80094be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80096a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80094e2:	e087      	b.n	80095f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80096ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80094f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094f6:	4b6a      	ldr	r3, [pc, #424]	; (80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094fe:	ee07 3a90 	vmov	s15, r3
 8009502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009506:	ed97 6a03 	vldr	s12, [r7, #12]
 800950a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80096a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800950e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800951a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800951e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009522:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009526:	e065      	b.n	80095f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	ee07 3a90 	vmov	s15, r3
 800952e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009532:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800953a:	4b59      	ldr	r3, [pc, #356]	; (80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800953c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009542:	ee07 3a90 	vmov	s15, r3
 8009546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800954a:	ed97 6a03 	vldr	s12, [r7, #12]
 800954e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80096a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800955a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800955e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009566:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800956a:	e043      	b.n	80095f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	ee07 3a90 	vmov	s15, r3
 8009572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009576:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80096b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800957a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800957e:	4b48      	ldr	r3, [pc, #288]	; (80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009586:	ee07 3a90 	vmov	s15, r3
 800958a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800958e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009592:	eddf 5a45 	vldr	s11, [pc, #276]	; 80096a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800959a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800959e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095ae:	e021      	b.n	80095f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	ee07 3a90 	vmov	s15, r3
 80095b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095c2:	4b37      	ldr	r3, [pc, #220]	; (80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ca:	ee07 3a90 	vmov	s15, r3
 80095ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80096a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80095f4:	4b2a      	ldr	r3, [pc, #168]	; (80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f8:	0a5b      	lsrs	r3, r3, #9
 80095fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800960a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800960e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800961a:	ee17 2a90 	vmov	r2, s15
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009622:	4b1f      	ldr	r3, [pc, #124]	; (80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009626:	0c1b      	lsrs	r3, r3, #16
 8009628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800962c:	ee07 3a90 	vmov	s15, r3
 8009630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009634:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009638:	ee37 7a87 	vadd.f32	s14, s15, s14
 800963c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009648:	ee17 2a90 	vmov	r2, s15
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009650:	4b13      	ldr	r3, [pc, #76]	; (80096a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009654:	0e1b      	lsrs	r3, r3, #24
 8009656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009666:	ee37 7a87 	vadd.f32	s14, s15, s14
 800966a:	edd7 6a07 	vldr	s13, [r7, #28]
 800966e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009676:	ee17 2a90 	vmov	r2, s15
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800967e:	e008      	b.n	8009692 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	609a      	str	r2, [r3, #8]
}
 8009692:	bf00      	nop
 8009694:	3724      	adds	r7, #36	; 0x24
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	58024400 	.word	0x58024400
 80096a4:	03d09000 	.word	0x03d09000
 80096a8:	46000000 	.word	0x46000000
 80096ac:	4c742400 	.word	0x4c742400
 80096b0:	4a742400 	.word	0x4a742400
 80096b4:	4af42400 	.word	0x4af42400

080096b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b089      	sub	sp, #36	; 0x24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096c0:	4ba0      	ldr	r3, [pc, #640]	; (8009944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c4:	f003 0303 	and.w	r3, r3, #3
 80096c8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80096ca:	4b9e      	ldr	r3, [pc, #632]	; (8009944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ce:	091b      	lsrs	r3, r3, #4
 80096d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096d4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80096d6:	4b9b      	ldr	r3, [pc, #620]	; (8009944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80096e0:	4b98      	ldr	r3, [pc, #608]	; (8009944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e4:	08db      	lsrs	r3, r3, #3
 80096e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	fb02 f303 	mul.w	r3, r2, r3
 80096f0:	ee07 3a90 	vmov	s15, r3
 80096f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 8111 	beq.w	8009926 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	2b02      	cmp	r3, #2
 8009708:	f000 8083 	beq.w	8009812 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	2b02      	cmp	r3, #2
 8009710:	f200 80a1 	bhi.w	8009856 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d003      	beq.n	8009722 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d056      	beq.n	80097ce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009720:	e099      	b.n	8009856 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009722:	4b88      	ldr	r3, [pc, #544]	; (8009944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b00      	cmp	r3, #0
 800972c:	d02d      	beq.n	800978a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800972e:	4b85      	ldr	r3, [pc, #532]	; (8009944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	08db      	lsrs	r3, r3, #3
 8009734:	f003 0303 	and.w	r3, r3, #3
 8009738:	4a83      	ldr	r2, [pc, #524]	; (8009948 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800973a:	fa22 f303 	lsr.w	r3, r2, r3
 800973e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	ee07 3a90 	vmov	s15, r3
 8009746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	ee07 3a90 	vmov	s15, r3
 8009750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009758:	4b7a      	ldr	r3, [pc, #488]	; (8009944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800975a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009760:	ee07 3a90 	vmov	s15, r3
 8009764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009768:	ed97 6a03 	vldr	s12, [r7, #12]
 800976c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800994c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009770:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009774:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009778:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800977c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009784:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009788:	e087      	b.n	800989a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	ee07 3a90 	vmov	s15, r3
 8009790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009794:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009950 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800979c:	4b69      	ldr	r3, [pc, #420]	; (8009944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800979e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097a4:	ee07 3a90 	vmov	s15, r3
 80097a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80097b0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800994c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097cc:	e065      	b.n	800989a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	ee07 3a90 	vmov	s15, r3
 80097d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009954 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80097dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097e0:	4b58      	ldr	r3, [pc, #352]	; (8009944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e8:	ee07 3a90 	vmov	s15, r3
 80097ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80097f4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800994c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009800:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800980c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009810:	e043      	b.n	800989a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	ee07 3a90 	vmov	s15, r3
 8009818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800981c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009958 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009824:	4b47      	ldr	r3, [pc, #284]	; (8009944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800982c:	ee07 3a90 	vmov	s15, r3
 8009830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009834:	ed97 6a03 	vldr	s12, [r7, #12]
 8009838:	eddf 5a44 	vldr	s11, [pc, #272]	; 800994c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800983c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009844:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800984c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009850:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009854:	e021      	b.n	800989a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	ee07 3a90 	vmov	s15, r3
 800985c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009860:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009950 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009868:	4b36      	ldr	r3, [pc, #216]	; (8009944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800986a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009870:	ee07 3a90 	vmov	s15, r3
 8009874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009878:	ed97 6a03 	vldr	s12, [r7, #12]
 800987c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800994c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009888:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800988c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009894:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009898:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800989a:	4b2a      	ldr	r3, [pc, #168]	; (8009944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800989c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989e:	0a5b      	lsrs	r3, r3, #9
 80098a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a4:	ee07 3a90 	vmov	s15, r3
 80098a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80098b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098c0:	ee17 2a90 	vmov	r2, s15
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80098c8:	4b1e      	ldr	r3, [pc, #120]	; (8009944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098cc:	0c1b      	lsrs	r3, r3, #16
 80098ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098d2:	ee07 3a90 	vmov	s15, r3
 80098d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80098e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098ee:	ee17 2a90 	vmov	r2, s15
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80098f6:	4b13      	ldr	r3, [pc, #76]	; (8009944 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fa:	0e1b      	lsrs	r3, r3, #24
 80098fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009900:	ee07 3a90 	vmov	s15, r3
 8009904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800990c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009910:	edd7 6a07 	vldr	s13, [r7, #28]
 8009914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800991c:	ee17 2a90 	vmov	r2, s15
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009924:	e008      	b.n	8009938 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	609a      	str	r2, [r3, #8]
}
 8009938:	bf00      	nop
 800993a:	3724      	adds	r7, #36	; 0x24
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	58024400 	.word	0x58024400
 8009948:	03d09000 	.word	0x03d09000
 800994c:	46000000 	.word	0x46000000
 8009950:	4c742400 	.word	0x4c742400
 8009954:	4a742400 	.word	0x4a742400
 8009958:	4af42400 	.word	0x4af42400

0800995c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009966:	2300      	movs	r3, #0
 8009968:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800996a:	4b53      	ldr	r3, [pc, #332]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 800996c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800996e:	f003 0303 	and.w	r3, r3, #3
 8009972:	2b03      	cmp	r3, #3
 8009974:	d101      	bne.n	800997a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e099      	b.n	8009aae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800997a:	4b4f      	ldr	r3, [pc, #316]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a4e      	ldr	r2, [pc, #312]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009980:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009986:	f7f8 ffcb 	bl	8002920 <HAL_GetTick>
 800998a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800998c:	e008      	b.n	80099a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800998e:	f7f8 ffc7 	bl	8002920 <HAL_GetTick>
 8009992:	4602      	mov	r2, r0
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	1ad3      	subs	r3, r2, r3
 8009998:	2b02      	cmp	r3, #2
 800999a:	d901      	bls.n	80099a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e086      	b.n	8009aae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099a0:	4b45      	ldr	r3, [pc, #276]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1f0      	bne.n	800998e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80099ac:	4b42      	ldr	r3, [pc, #264]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 80099ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	031b      	lsls	r3, r3, #12
 80099ba:	493f      	ldr	r1, [pc, #252]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 80099bc:	4313      	orrs	r3, r2
 80099be:	628b      	str	r3, [r1, #40]	; 0x28
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	3b01      	subs	r3, #1
 80099d0:	025b      	lsls	r3, r3, #9
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	431a      	orrs	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	3b01      	subs	r3, #1
 80099dc:	041b      	lsls	r3, r3, #16
 80099de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80099e2:	431a      	orrs	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	061b      	lsls	r3, r3, #24
 80099ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80099f0:	4931      	ldr	r1, [pc, #196]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80099f6:	4b30      	ldr	r3, [pc, #192]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 80099f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	492d      	ldr	r1, [pc, #180]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a04:	4313      	orrs	r3, r2
 8009a06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009a08:	4b2b      	ldr	r3, [pc, #172]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0c:	f023 0220 	bic.w	r2, r3, #32
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	699b      	ldr	r3, [r3, #24]
 8009a14:	4928      	ldr	r1, [pc, #160]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009a1a:	4b27      	ldr	r3, [pc, #156]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1e:	4a26      	ldr	r2, [pc, #152]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a20:	f023 0310 	bic.w	r3, r3, #16
 8009a24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009a26:	4b24      	ldr	r3, [pc, #144]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a2a:	4b24      	ldr	r3, [pc, #144]	; (8009abc <RCCEx_PLL2_Config+0x160>)
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	69d2      	ldr	r2, [r2, #28]
 8009a32:	00d2      	lsls	r2, r2, #3
 8009a34:	4920      	ldr	r1, [pc, #128]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a36:	4313      	orrs	r3, r2
 8009a38:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009a3a:	4b1f      	ldr	r3, [pc, #124]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3e:	4a1e      	ldr	r2, [pc, #120]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a40:	f043 0310 	orr.w	r3, r3, #16
 8009a44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d106      	bne.n	8009a5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009a4c:	4b1a      	ldr	r3, [pc, #104]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a50:	4a19      	ldr	r2, [pc, #100]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a58:	e00f      	b.n	8009a7a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d106      	bne.n	8009a6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009a60:	4b15      	ldr	r3, [pc, #84]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a64:	4a14      	ldr	r2, [pc, #80]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a6c:	e005      	b.n	8009a7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009a6e:	4b12      	ldr	r3, [pc, #72]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a72:	4a11      	ldr	r2, [pc, #68]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009a7a:	4b0f      	ldr	r3, [pc, #60]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a0e      	ldr	r2, [pc, #56]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009a80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a86:	f7f8 ff4b 	bl	8002920 <HAL_GetTick>
 8009a8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a8c:	e008      	b.n	8009aa0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009a8e:	f7f8 ff47 	bl	8002920 <HAL_GetTick>
 8009a92:	4602      	mov	r2, r0
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d901      	bls.n	8009aa0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e006      	b.n	8009aae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009aa0:	4b05      	ldr	r3, [pc, #20]	; (8009ab8 <RCCEx_PLL2_Config+0x15c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d0f0      	beq.n	8009a8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	58024400 	.word	0x58024400
 8009abc:	ffff0007 	.word	0xffff0007

08009ac0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009aca:	2300      	movs	r3, #0
 8009acc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ace:	4b53      	ldr	r3, [pc, #332]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad2:	f003 0303 	and.w	r3, r3, #3
 8009ad6:	2b03      	cmp	r3, #3
 8009ad8:	d101      	bne.n	8009ade <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e099      	b.n	8009c12 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009ade:	4b4f      	ldr	r3, [pc, #316]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a4e      	ldr	r2, [pc, #312]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ae8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aea:	f7f8 ff19 	bl	8002920 <HAL_GetTick>
 8009aee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009af0:	e008      	b.n	8009b04 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009af2:	f7f8 ff15 	bl	8002920 <HAL_GetTick>
 8009af6:	4602      	mov	r2, r0
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d901      	bls.n	8009b04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b00:	2303      	movs	r3, #3
 8009b02:	e086      	b.n	8009c12 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b04:	4b45      	ldr	r3, [pc, #276]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d1f0      	bne.n	8009af2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009b10:	4b42      	ldr	r3, [pc, #264]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b14:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	051b      	lsls	r3, r3, #20
 8009b1e:	493f      	ldr	r1, [pc, #252]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009b20:	4313      	orrs	r3, r2
 8009b22:	628b      	str	r3, [r1, #40]	; 0x28
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	025b      	lsls	r3, r3, #9
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	431a      	orrs	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	041b      	lsls	r3, r3, #16
 8009b42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b46:	431a      	orrs	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	061b      	lsls	r3, r3, #24
 8009b50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b54:	4931      	ldr	r1, [pc, #196]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b5a:	4b30      	ldr	r3, [pc, #192]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	492d      	ldr	r1, [pc, #180]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009b6c:	4b2b      	ldr	r3, [pc, #172]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	699b      	ldr	r3, [r3, #24]
 8009b78:	4928      	ldr	r1, [pc, #160]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009b7e:	4b27      	ldr	r3, [pc, #156]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b82:	4a26      	ldr	r2, [pc, #152]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b8a:	4b24      	ldr	r3, [pc, #144]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b8e:	4b24      	ldr	r3, [pc, #144]	; (8009c20 <RCCEx_PLL3_Config+0x160>)
 8009b90:	4013      	ands	r3, r2
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	69d2      	ldr	r2, [r2, #28]
 8009b96:	00d2      	lsls	r2, r2, #3
 8009b98:	4920      	ldr	r1, [pc, #128]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009b9e:	4b1f      	ldr	r3, [pc, #124]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	4a1e      	ldr	r2, [pc, #120]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ba8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d106      	bne.n	8009bbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009bb0:	4b1a      	ldr	r3, [pc, #104]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb4:	4a19      	ldr	r2, [pc, #100]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009bb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009bba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009bbc:	e00f      	b.n	8009bde <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d106      	bne.n	8009bd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009bc4:	4b15      	ldr	r3, [pc, #84]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc8:	4a14      	ldr	r2, [pc, #80]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009bca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009bce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009bd0:	e005      	b.n	8009bde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009bd2:	4b12      	ldr	r3, [pc, #72]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	4a11      	ldr	r2, [pc, #68]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009bd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009bdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009bde:	4b0f      	ldr	r3, [pc, #60]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a0e      	ldr	r2, [pc, #56]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bea:	f7f8 fe99 	bl	8002920 <HAL_GetTick>
 8009bee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bf0:	e008      	b.n	8009c04 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009bf2:	f7f8 fe95 	bl	8002920 <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d901      	bls.n	8009c04 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e006      	b.n	8009c12 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c04:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <RCCEx_PLL3_Config+0x15c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0f0      	beq.n	8009bf2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	58024400 	.word	0x58024400
 8009c20:	ffff0007 	.word	0xffff0007

08009c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e049      	b.n	8009cca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d106      	bne.n	8009c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7f8 fcc4 	bl	80025d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2202      	movs	r2, #2
 8009c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	3304      	adds	r3, #4
 8009c60:	4619      	mov	r1, r3
 8009c62:	4610      	mov	r0, r2
 8009c64:	f000 f99e 	bl	8009fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
	...

08009cd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d001      	beq.n	8009cec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e04c      	b.n	8009d86 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2202      	movs	r2, #2
 8009cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a26      	ldr	r2, [pc, #152]	; (8009d94 <HAL_TIM_Base_Start+0xc0>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d022      	beq.n	8009d44 <HAL_TIM_Base_Start+0x70>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d06:	d01d      	beq.n	8009d44 <HAL_TIM_Base_Start+0x70>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a22      	ldr	r2, [pc, #136]	; (8009d98 <HAL_TIM_Base_Start+0xc4>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d018      	beq.n	8009d44 <HAL_TIM_Base_Start+0x70>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a21      	ldr	r2, [pc, #132]	; (8009d9c <HAL_TIM_Base_Start+0xc8>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d013      	beq.n	8009d44 <HAL_TIM_Base_Start+0x70>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a1f      	ldr	r2, [pc, #124]	; (8009da0 <HAL_TIM_Base_Start+0xcc>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d00e      	beq.n	8009d44 <HAL_TIM_Base_Start+0x70>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a1e      	ldr	r2, [pc, #120]	; (8009da4 <HAL_TIM_Base_Start+0xd0>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d009      	beq.n	8009d44 <HAL_TIM_Base_Start+0x70>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a1c      	ldr	r2, [pc, #112]	; (8009da8 <HAL_TIM_Base_Start+0xd4>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d004      	beq.n	8009d44 <HAL_TIM_Base_Start+0x70>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a1b      	ldr	r2, [pc, #108]	; (8009dac <HAL_TIM_Base_Start+0xd8>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d115      	bne.n	8009d70 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	689a      	ldr	r2, [r3, #8]
 8009d4a:	4b19      	ldr	r3, [pc, #100]	; (8009db0 <HAL_TIM_Base_Start+0xdc>)
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2b06      	cmp	r3, #6
 8009d54:	d015      	beq.n	8009d82 <HAL_TIM_Base_Start+0xae>
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d5c:	d011      	beq.n	8009d82 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f042 0201 	orr.w	r2, r2, #1
 8009d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d6e:	e008      	b.n	8009d82 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f042 0201 	orr.w	r2, r2, #1
 8009d7e:	601a      	str	r2, [r3, #0]
 8009d80:	e000      	b.n	8009d84 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	40010000 	.word	0x40010000
 8009d98:	40000400 	.word	0x40000400
 8009d9c:	40000800 	.word	0x40000800
 8009da0:	40000c00 	.word	0x40000c00
 8009da4:	40010400 	.word	0x40010400
 8009da8:	40001800 	.word	0x40001800
 8009dac:	40014000 	.word	0x40014000
 8009db0:	00010007 	.word	0x00010007

08009db4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d101      	bne.n	8009dd0 <HAL_TIM_ConfigClockSource+0x1c>
 8009dcc:	2302      	movs	r3, #2
 8009dce:	e0dc      	b.n	8009f8a <HAL_TIM_ConfigClockSource+0x1d6>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	4b6a      	ldr	r3, [pc, #424]	; (8009f94 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009dec:	4013      	ands	r3, r2
 8009dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009df6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a64      	ldr	r2, [pc, #400]	; (8009f98 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	f000 80a9 	beq.w	8009f5e <HAL_TIM_ConfigClockSource+0x1aa>
 8009e0c:	4a62      	ldr	r2, [pc, #392]	; (8009f98 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	f200 80ae 	bhi.w	8009f70 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e14:	4a61      	ldr	r2, [pc, #388]	; (8009f9c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	f000 80a1 	beq.w	8009f5e <HAL_TIM_ConfigClockSource+0x1aa>
 8009e1c:	4a5f      	ldr	r2, [pc, #380]	; (8009f9c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	f200 80a6 	bhi.w	8009f70 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e24:	4a5e      	ldr	r2, [pc, #376]	; (8009fa0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	f000 8099 	beq.w	8009f5e <HAL_TIM_ConfigClockSource+0x1aa>
 8009e2c:	4a5c      	ldr	r2, [pc, #368]	; (8009fa0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	f200 809e 	bhi.w	8009f70 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009e38:	f000 8091 	beq.w	8009f5e <HAL_TIM_ConfigClockSource+0x1aa>
 8009e3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009e40:	f200 8096 	bhi.w	8009f70 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e48:	f000 8089 	beq.w	8009f5e <HAL_TIM_ConfigClockSource+0x1aa>
 8009e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e50:	f200 808e 	bhi.w	8009f70 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e58:	d03e      	beq.n	8009ed8 <HAL_TIM_ConfigClockSource+0x124>
 8009e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e5e:	f200 8087 	bhi.w	8009f70 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e66:	f000 8086 	beq.w	8009f76 <HAL_TIM_ConfigClockSource+0x1c2>
 8009e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e6e:	d87f      	bhi.n	8009f70 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e70:	2b70      	cmp	r3, #112	; 0x70
 8009e72:	d01a      	beq.n	8009eaa <HAL_TIM_ConfigClockSource+0xf6>
 8009e74:	2b70      	cmp	r3, #112	; 0x70
 8009e76:	d87b      	bhi.n	8009f70 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e78:	2b60      	cmp	r3, #96	; 0x60
 8009e7a:	d050      	beq.n	8009f1e <HAL_TIM_ConfigClockSource+0x16a>
 8009e7c:	2b60      	cmp	r3, #96	; 0x60
 8009e7e:	d877      	bhi.n	8009f70 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e80:	2b50      	cmp	r3, #80	; 0x50
 8009e82:	d03c      	beq.n	8009efe <HAL_TIM_ConfigClockSource+0x14a>
 8009e84:	2b50      	cmp	r3, #80	; 0x50
 8009e86:	d873      	bhi.n	8009f70 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e88:	2b40      	cmp	r3, #64	; 0x40
 8009e8a:	d058      	beq.n	8009f3e <HAL_TIM_ConfigClockSource+0x18a>
 8009e8c:	2b40      	cmp	r3, #64	; 0x40
 8009e8e:	d86f      	bhi.n	8009f70 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e90:	2b30      	cmp	r3, #48	; 0x30
 8009e92:	d064      	beq.n	8009f5e <HAL_TIM_ConfigClockSource+0x1aa>
 8009e94:	2b30      	cmp	r3, #48	; 0x30
 8009e96:	d86b      	bhi.n	8009f70 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e98:	2b20      	cmp	r3, #32
 8009e9a:	d060      	beq.n	8009f5e <HAL_TIM_ConfigClockSource+0x1aa>
 8009e9c:	2b20      	cmp	r3, #32
 8009e9e:	d867      	bhi.n	8009f70 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d05c      	beq.n	8009f5e <HAL_TIM_ConfigClockSource+0x1aa>
 8009ea4:	2b10      	cmp	r3, #16
 8009ea6:	d05a      	beq.n	8009f5e <HAL_TIM_ConfigClockSource+0x1aa>
 8009ea8:	e062      	b.n	8009f70 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6818      	ldr	r0, [r3, #0]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	6899      	ldr	r1, [r3, #8]
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	685a      	ldr	r2, [r3, #4]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	f000 f98b 	bl	800a1d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ecc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	609a      	str	r2, [r3, #8]
      break;
 8009ed6:	e04f      	b.n	8009f78 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6818      	ldr	r0, [r3, #0]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	6899      	ldr	r1, [r3, #8]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	f000 f974 	bl	800a1d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	689a      	ldr	r2, [r3, #8]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009efa:	609a      	str	r2, [r3, #8]
      break;
 8009efc:	e03c      	b.n	8009f78 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6818      	ldr	r0, [r3, #0]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	6859      	ldr	r1, [r3, #4]
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f000 f8e4 	bl	800a0d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2150      	movs	r1, #80	; 0x50
 8009f16:	4618      	mov	r0, r3
 8009f18:	f000 f93e 	bl	800a198 <TIM_ITRx_SetConfig>
      break;
 8009f1c:	e02c      	b.n	8009f78 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6818      	ldr	r0, [r3, #0]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	6859      	ldr	r1, [r3, #4]
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f000 f903 	bl	800a136 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2160      	movs	r1, #96	; 0x60
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 f92e 	bl	800a198 <TIM_ITRx_SetConfig>
      break;
 8009f3c:	e01c      	b.n	8009f78 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6818      	ldr	r0, [r3, #0]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	6859      	ldr	r1, [r3, #4]
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f000 f8c4 	bl	800a0d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2140      	movs	r1, #64	; 0x40
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 f91e 	bl	800a198 <TIM_ITRx_SetConfig>
      break;
 8009f5c:	e00c      	b.n	8009f78 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4619      	mov	r1, r3
 8009f68:	4610      	mov	r0, r2
 8009f6a:	f000 f915 	bl	800a198 <TIM_ITRx_SetConfig>
      break;
 8009f6e:	e003      	b.n	8009f78 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	73fb      	strb	r3, [r7, #15]
      break;
 8009f74:	e000      	b.n	8009f78 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009f76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	ffceff88 	.word	0xffceff88
 8009f98:	00100040 	.word	0x00100040
 8009f9c:	00100030 	.word	0x00100030
 8009fa0:	00100020 	.word	0x00100020

08009fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a40      	ldr	r2, [pc, #256]	; (800a0b8 <TIM_Base_SetConfig+0x114>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d013      	beq.n	8009fe4 <TIM_Base_SetConfig+0x40>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc2:	d00f      	beq.n	8009fe4 <TIM_Base_SetConfig+0x40>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	4a3d      	ldr	r2, [pc, #244]	; (800a0bc <TIM_Base_SetConfig+0x118>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d00b      	beq.n	8009fe4 <TIM_Base_SetConfig+0x40>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a3c      	ldr	r2, [pc, #240]	; (800a0c0 <TIM_Base_SetConfig+0x11c>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d007      	beq.n	8009fe4 <TIM_Base_SetConfig+0x40>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a3b      	ldr	r2, [pc, #236]	; (800a0c4 <TIM_Base_SetConfig+0x120>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d003      	beq.n	8009fe4 <TIM_Base_SetConfig+0x40>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a3a      	ldr	r2, [pc, #232]	; (800a0c8 <TIM_Base_SetConfig+0x124>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d108      	bne.n	8009ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a2f      	ldr	r2, [pc, #188]	; (800a0b8 <TIM_Base_SetConfig+0x114>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d01f      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a004:	d01b      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a2c      	ldr	r2, [pc, #176]	; (800a0bc <TIM_Base_SetConfig+0x118>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d017      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a2b      	ldr	r2, [pc, #172]	; (800a0c0 <TIM_Base_SetConfig+0x11c>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d013      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a2a      	ldr	r2, [pc, #168]	; (800a0c4 <TIM_Base_SetConfig+0x120>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d00f      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a29      	ldr	r2, [pc, #164]	; (800a0c8 <TIM_Base_SetConfig+0x124>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d00b      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a28      	ldr	r2, [pc, #160]	; (800a0cc <TIM_Base_SetConfig+0x128>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d007      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a27      	ldr	r2, [pc, #156]	; (800a0d0 <TIM_Base_SetConfig+0x12c>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d003      	beq.n	800a03e <TIM_Base_SetConfig+0x9a>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a26      	ldr	r2, [pc, #152]	; (800a0d4 <TIM_Base_SetConfig+0x130>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d108      	bne.n	800a050 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	689a      	ldr	r2, [r3, #8]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a10      	ldr	r2, [pc, #64]	; (800a0b8 <TIM_Base_SetConfig+0x114>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d00f      	beq.n	800a09c <TIM_Base_SetConfig+0xf8>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4a12      	ldr	r2, [pc, #72]	; (800a0c8 <TIM_Base_SetConfig+0x124>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d00b      	beq.n	800a09c <TIM_Base_SetConfig+0xf8>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a11      	ldr	r2, [pc, #68]	; (800a0cc <TIM_Base_SetConfig+0x128>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d007      	beq.n	800a09c <TIM_Base_SetConfig+0xf8>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a10      	ldr	r2, [pc, #64]	; (800a0d0 <TIM_Base_SetConfig+0x12c>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d003      	beq.n	800a09c <TIM_Base_SetConfig+0xf8>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a0f      	ldr	r2, [pc, #60]	; (800a0d4 <TIM_Base_SetConfig+0x130>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d103      	bne.n	800a0a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	691a      	ldr	r2, [r3, #16]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	615a      	str	r2, [r3, #20]
}
 800a0aa:	bf00      	nop
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	40010000 	.word	0x40010000
 800a0bc:	40000400 	.word	0x40000400
 800a0c0:	40000800 	.word	0x40000800
 800a0c4:	40000c00 	.word	0x40000c00
 800a0c8:	40010400 	.word	0x40010400
 800a0cc:	40014000 	.word	0x40014000
 800a0d0:	40014400 	.word	0x40014400
 800a0d4:	40014800 	.word	0x40014800

0800a0d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b087      	sub	sp, #28
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	f023 0201 	bic.w	r2, r3, #1
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	011b      	lsls	r3, r3, #4
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f023 030a 	bic.w	r3, r3, #10
 800a114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a116:	697a      	ldr	r2, [r7, #20]
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	697a      	ldr	r2, [r7, #20]
 800a128:	621a      	str	r2, [r3, #32]
}
 800a12a:	bf00      	nop
 800a12c:	371c      	adds	r7, #28
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr

0800a136 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a136:	b480      	push	{r7}
 800a138:	b087      	sub	sp, #28
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	60f8      	str	r0, [r7, #12]
 800a13e:	60b9      	str	r1, [r7, #8]
 800a140:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	f023 0210 	bic.w	r2, r3, #16
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6a1b      	ldr	r3, [r3, #32]
 800a158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a160:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	031b      	lsls	r3, r3, #12
 800a166:	697a      	ldr	r2, [r7, #20]
 800a168:	4313      	orrs	r3, r2
 800a16a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a172:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	011b      	lsls	r3, r3, #4
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	621a      	str	r2, [r3, #32]
}
 800a18a:	bf00      	nop
 800a18c:	371c      	adds	r7, #28
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
	...

0800a198 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	4b09      	ldr	r3, [pc, #36]	; (800a1d0 <TIM_ITRx_SetConfig+0x38>)
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	f043 0307 	orr.w	r3, r3, #7
 800a1ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	609a      	str	r2, [r3, #8]
}
 800a1c2:	bf00      	nop
 800a1c4:	3714      	adds	r7, #20
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	ffcfff8f 	.word	0xffcfff8f

0800a1d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
 800a1e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	021a      	lsls	r2, r3, #8
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	431a      	orrs	r2, r3
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	609a      	str	r2, [r3, #8]
}
 800a208:	bf00      	nop
 800a20a:	371c      	adds	r7, #28
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a224:	2b01      	cmp	r3, #1
 800a226:	d101      	bne.n	800a22c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a228:	2302      	movs	r3, #2
 800a22a:	e06d      	b.n	800a308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2202      	movs	r2, #2
 800a238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a30      	ldr	r2, [pc, #192]	; (800a314 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d004      	beq.n	800a260 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a2f      	ldr	r2, [pc, #188]	; (800a318 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d108      	bne.n	800a272 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a266:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	4313      	orrs	r3, r2
 800a270:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a278:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	4313      	orrs	r3, r2
 800a282:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a20      	ldr	r2, [pc, #128]	; (800a314 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d022      	beq.n	800a2dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a29e:	d01d      	beq.n	800a2dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a1d      	ldr	r2, [pc, #116]	; (800a31c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d018      	beq.n	800a2dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a1c      	ldr	r2, [pc, #112]	; (800a320 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d013      	beq.n	800a2dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a1a      	ldr	r2, [pc, #104]	; (800a324 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d00e      	beq.n	800a2dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a15      	ldr	r2, [pc, #84]	; (800a318 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d009      	beq.n	800a2dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a16      	ldr	r2, [pc, #88]	; (800a328 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d004      	beq.n	800a2dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a15      	ldr	r2, [pc, #84]	; (800a32c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d10c      	bne.n	800a2f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3714      	adds	r7, #20
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr
 800a314:	40010000 	.word	0x40010000
 800a318:	40010400 	.word	0x40010400
 800a31c:	40000400 	.word	0x40000400
 800a320:	40000800 	.word	0x40000800
 800a324:	40000c00 	.word	0x40000c00
 800a328:	40001800 	.word	0x40001800
 800a32c:	40014000 	.word	0x40014000

0800a330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d101      	bne.n	800a342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	e042      	b.n	800a3c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d106      	bne.n	800a35a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7f8 f9c5 	bl	80026e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2224      	movs	r2, #36	; 0x24
 800a35e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f022 0201 	bic.w	r2, r2, #1
 800a370:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f82c 	bl	800a3d0 <UART_SetConfig>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d101      	bne.n	800a382 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e022      	b.n	800a3c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a386:	2b00      	cmp	r3, #0
 800a388:	d002      	beq.n	800a390 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fe8c 	bl	800b0a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a39e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	689a      	ldr	r2, [r3, #8]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f042 0201 	orr.w	r2, r2, #1
 800a3be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 ff13 	bl	800b1ec <UART_CheckIdleState>
 800a3c6:	4603      	mov	r3, r0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3d4:	b092      	sub	sp, #72	; 0x48
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	689a      	ldr	r2, [r3, #8]
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	431a      	orrs	r2, r3
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	431a      	orrs	r2, r3
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	69db      	ldr	r3, [r3, #28]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	4bbe      	ldr	r3, [pc, #760]	; (800a6f8 <UART_SetConfig+0x328>)
 800a400:	4013      	ands	r3, r2
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	6812      	ldr	r2, [r2, #0]
 800a406:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a408:	430b      	orrs	r3, r1
 800a40a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	68da      	ldr	r2, [r3, #12]
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4ab3      	ldr	r2, [pc, #716]	; (800a6fc <UART_SetConfig+0x32c>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d004      	beq.n	800a43c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a438:	4313      	orrs	r3, r2
 800a43a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	689a      	ldr	r2, [r3, #8]
 800a442:	4baf      	ldr	r3, [pc, #700]	; (800a700 <UART_SetConfig+0x330>)
 800a444:	4013      	ands	r3, r2
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	6812      	ldr	r2, [r2, #0]
 800a44a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a44c:	430b      	orrs	r3, r1
 800a44e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a456:	f023 010f 	bic.w	r1, r3, #15
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	430a      	orrs	r2, r1
 800a464:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4aa6      	ldr	r2, [pc, #664]	; (800a704 <UART_SetConfig+0x334>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d177      	bne.n	800a560 <UART_SetConfig+0x190>
 800a470:	4ba5      	ldr	r3, [pc, #660]	; (800a708 <UART_SetConfig+0x338>)
 800a472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a474:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a478:	2b28      	cmp	r3, #40	; 0x28
 800a47a:	d86d      	bhi.n	800a558 <UART_SetConfig+0x188>
 800a47c:	a201      	add	r2, pc, #4	; (adr r2, 800a484 <UART_SetConfig+0xb4>)
 800a47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a482:	bf00      	nop
 800a484:	0800a529 	.word	0x0800a529
 800a488:	0800a559 	.word	0x0800a559
 800a48c:	0800a559 	.word	0x0800a559
 800a490:	0800a559 	.word	0x0800a559
 800a494:	0800a559 	.word	0x0800a559
 800a498:	0800a559 	.word	0x0800a559
 800a49c:	0800a559 	.word	0x0800a559
 800a4a0:	0800a559 	.word	0x0800a559
 800a4a4:	0800a531 	.word	0x0800a531
 800a4a8:	0800a559 	.word	0x0800a559
 800a4ac:	0800a559 	.word	0x0800a559
 800a4b0:	0800a559 	.word	0x0800a559
 800a4b4:	0800a559 	.word	0x0800a559
 800a4b8:	0800a559 	.word	0x0800a559
 800a4bc:	0800a559 	.word	0x0800a559
 800a4c0:	0800a559 	.word	0x0800a559
 800a4c4:	0800a539 	.word	0x0800a539
 800a4c8:	0800a559 	.word	0x0800a559
 800a4cc:	0800a559 	.word	0x0800a559
 800a4d0:	0800a559 	.word	0x0800a559
 800a4d4:	0800a559 	.word	0x0800a559
 800a4d8:	0800a559 	.word	0x0800a559
 800a4dc:	0800a559 	.word	0x0800a559
 800a4e0:	0800a559 	.word	0x0800a559
 800a4e4:	0800a541 	.word	0x0800a541
 800a4e8:	0800a559 	.word	0x0800a559
 800a4ec:	0800a559 	.word	0x0800a559
 800a4f0:	0800a559 	.word	0x0800a559
 800a4f4:	0800a559 	.word	0x0800a559
 800a4f8:	0800a559 	.word	0x0800a559
 800a4fc:	0800a559 	.word	0x0800a559
 800a500:	0800a559 	.word	0x0800a559
 800a504:	0800a549 	.word	0x0800a549
 800a508:	0800a559 	.word	0x0800a559
 800a50c:	0800a559 	.word	0x0800a559
 800a510:	0800a559 	.word	0x0800a559
 800a514:	0800a559 	.word	0x0800a559
 800a518:	0800a559 	.word	0x0800a559
 800a51c:	0800a559 	.word	0x0800a559
 800a520:	0800a559 	.word	0x0800a559
 800a524:	0800a551 	.word	0x0800a551
 800a528:	2301      	movs	r3, #1
 800a52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a52e:	e326      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a530:	2304      	movs	r3, #4
 800a532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a536:	e322      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a538:	2308      	movs	r3, #8
 800a53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a53e:	e31e      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a540:	2310      	movs	r3, #16
 800a542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a546:	e31a      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a548:	2320      	movs	r3, #32
 800a54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a54e:	e316      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a550:	2340      	movs	r3, #64	; 0x40
 800a552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a556:	e312      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a558:	2380      	movs	r3, #128	; 0x80
 800a55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a55e:	e30e      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a69      	ldr	r2, [pc, #420]	; (800a70c <UART_SetConfig+0x33c>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d130      	bne.n	800a5cc <UART_SetConfig+0x1fc>
 800a56a:	4b67      	ldr	r3, [pc, #412]	; (800a708 <UART_SetConfig+0x338>)
 800a56c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a56e:	f003 0307 	and.w	r3, r3, #7
 800a572:	2b05      	cmp	r3, #5
 800a574:	d826      	bhi.n	800a5c4 <UART_SetConfig+0x1f4>
 800a576:	a201      	add	r2, pc, #4	; (adr r2, 800a57c <UART_SetConfig+0x1ac>)
 800a578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a57c:	0800a595 	.word	0x0800a595
 800a580:	0800a59d 	.word	0x0800a59d
 800a584:	0800a5a5 	.word	0x0800a5a5
 800a588:	0800a5ad 	.word	0x0800a5ad
 800a58c:	0800a5b5 	.word	0x0800a5b5
 800a590:	0800a5bd 	.word	0x0800a5bd
 800a594:	2300      	movs	r3, #0
 800a596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a59a:	e2f0      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a59c:	2304      	movs	r3, #4
 800a59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5a2:	e2ec      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a5a4:	2308      	movs	r3, #8
 800a5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5aa:	e2e8      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a5ac:	2310      	movs	r3, #16
 800a5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5b2:	e2e4      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a5b4:	2320      	movs	r3, #32
 800a5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ba:	e2e0      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a5bc:	2340      	movs	r3, #64	; 0x40
 800a5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5c2:	e2dc      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a5c4:	2380      	movs	r3, #128	; 0x80
 800a5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ca:	e2d8      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a4f      	ldr	r2, [pc, #316]	; (800a710 <UART_SetConfig+0x340>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d130      	bne.n	800a638 <UART_SetConfig+0x268>
 800a5d6:	4b4c      	ldr	r3, [pc, #304]	; (800a708 <UART_SetConfig+0x338>)
 800a5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5da:	f003 0307 	and.w	r3, r3, #7
 800a5de:	2b05      	cmp	r3, #5
 800a5e0:	d826      	bhi.n	800a630 <UART_SetConfig+0x260>
 800a5e2:	a201      	add	r2, pc, #4	; (adr r2, 800a5e8 <UART_SetConfig+0x218>)
 800a5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e8:	0800a601 	.word	0x0800a601
 800a5ec:	0800a609 	.word	0x0800a609
 800a5f0:	0800a611 	.word	0x0800a611
 800a5f4:	0800a619 	.word	0x0800a619
 800a5f8:	0800a621 	.word	0x0800a621
 800a5fc:	0800a629 	.word	0x0800a629
 800a600:	2300      	movs	r3, #0
 800a602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a606:	e2ba      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a608:	2304      	movs	r3, #4
 800a60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a60e:	e2b6      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a610:	2308      	movs	r3, #8
 800a612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a616:	e2b2      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a618:	2310      	movs	r3, #16
 800a61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a61e:	e2ae      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a620:	2320      	movs	r3, #32
 800a622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a626:	e2aa      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a628:	2340      	movs	r3, #64	; 0x40
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a62e:	e2a6      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a630:	2380      	movs	r3, #128	; 0x80
 800a632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a636:	e2a2      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a35      	ldr	r2, [pc, #212]	; (800a714 <UART_SetConfig+0x344>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d130      	bne.n	800a6a4 <UART_SetConfig+0x2d4>
 800a642:	4b31      	ldr	r3, [pc, #196]	; (800a708 <UART_SetConfig+0x338>)
 800a644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a646:	f003 0307 	and.w	r3, r3, #7
 800a64a:	2b05      	cmp	r3, #5
 800a64c:	d826      	bhi.n	800a69c <UART_SetConfig+0x2cc>
 800a64e:	a201      	add	r2, pc, #4	; (adr r2, 800a654 <UART_SetConfig+0x284>)
 800a650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a654:	0800a66d 	.word	0x0800a66d
 800a658:	0800a675 	.word	0x0800a675
 800a65c:	0800a67d 	.word	0x0800a67d
 800a660:	0800a685 	.word	0x0800a685
 800a664:	0800a68d 	.word	0x0800a68d
 800a668:	0800a695 	.word	0x0800a695
 800a66c:	2300      	movs	r3, #0
 800a66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a672:	e284      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a674:	2304      	movs	r3, #4
 800a676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a67a:	e280      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a67c:	2308      	movs	r3, #8
 800a67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a682:	e27c      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a684:	2310      	movs	r3, #16
 800a686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a68a:	e278      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a68c:	2320      	movs	r3, #32
 800a68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a692:	e274      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a694:	2340      	movs	r3, #64	; 0x40
 800a696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a69a:	e270      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a69c:	2380      	movs	r3, #128	; 0x80
 800a69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6a2:	e26c      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a1b      	ldr	r2, [pc, #108]	; (800a718 <UART_SetConfig+0x348>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d142      	bne.n	800a734 <UART_SetConfig+0x364>
 800a6ae:	4b16      	ldr	r3, [pc, #88]	; (800a708 <UART_SetConfig+0x338>)
 800a6b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6b2:	f003 0307 	and.w	r3, r3, #7
 800a6b6:	2b05      	cmp	r3, #5
 800a6b8:	d838      	bhi.n	800a72c <UART_SetConfig+0x35c>
 800a6ba:	a201      	add	r2, pc, #4	; (adr r2, 800a6c0 <UART_SetConfig+0x2f0>)
 800a6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c0:	0800a6d9 	.word	0x0800a6d9
 800a6c4:	0800a6e1 	.word	0x0800a6e1
 800a6c8:	0800a6e9 	.word	0x0800a6e9
 800a6cc:	0800a6f1 	.word	0x0800a6f1
 800a6d0:	0800a71d 	.word	0x0800a71d
 800a6d4:	0800a725 	.word	0x0800a725
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6de:	e24e      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a6e0:	2304      	movs	r3, #4
 800a6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6e6:	e24a      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a6e8:	2308      	movs	r3, #8
 800a6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ee:	e246      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a6f0:	2310      	movs	r3, #16
 800a6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6f6:	e242      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a6f8:	cfff69f3 	.word	0xcfff69f3
 800a6fc:	58000c00 	.word	0x58000c00
 800a700:	11fff4ff 	.word	0x11fff4ff
 800a704:	40011000 	.word	0x40011000
 800a708:	58024400 	.word	0x58024400
 800a70c:	40004400 	.word	0x40004400
 800a710:	40004800 	.word	0x40004800
 800a714:	40004c00 	.word	0x40004c00
 800a718:	40005000 	.word	0x40005000
 800a71c:	2320      	movs	r3, #32
 800a71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a722:	e22c      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a724:	2340      	movs	r3, #64	; 0x40
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72a:	e228      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a72c:	2380      	movs	r3, #128	; 0x80
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a732:	e224      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4ab1      	ldr	r2, [pc, #708]	; (800aa00 <UART_SetConfig+0x630>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d176      	bne.n	800a82c <UART_SetConfig+0x45c>
 800a73e:	4bb1      	ldr	r3, [pc, #708]	; (800aa04 <UART_SetConfig+0x634>)
 800a740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a746:	2b28      	cmp	r3, #40	; 0x28
 800a748:	d86c      	bhi.n	800a824 <UART_SetConfig+0x454>
 800a74a:	a201      	add	r2, pc, #4	; (adr r2, 800a750 <UART_SetConfig+0x380>)
 800a74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a750:	0800a7f5 	.word	0x0800a7f5
 800a754:	0800a825 	.word	0x0800a825
 800a758:	0800a825 	.word	0x0800a825
 800a75c:	0800a825 	.word	0x0800a825
 800a760:	0800a825 	.word	0x0800a825
 800a764:	0800a825 	.word	0x0800a825
 800a768:	0800a825 	.word	0x0800a825
 800a76c:	0800a825 	.word	0x0800a825
 800a770:	0800a7fd 	.word	0x0800a7fd
 800a774:	0800a825 	.word	0x0800a825
 800a778:	0800a825 	.word	0x0800a825
 800a77c:	0800a825 	.word	0x0800a825
 800a780:	0800a825 	.word	0x0800a825
 800a784:	0800a825 	.word	0x0800a825
 800a788:	0800a825 	.word	0x0800a825
 800a78c:	0800a825 	.word	0x0800a825
 800a790:	0800a805 	.word	0x0800a805
 800a794:	0800a825 	.word	0x0800a825
 800a798:	0800a825 	.word	0x0800a825
 800a79c:	0800a825 	.word	0x0800a825
 800a7a0:	0800a825 	.word	0x0800a825
 800a7a4:	0800a825 	.word	0x0800a825
 800a7a8:	0800a825 	.word	0x0800a825
 800a7ac:	0800a825 	.word	0x0800a825
 800a7b0:	0800a80d 	.word	0x0800a80d
 800a7b4:	0800a825 	.word	0x0800a825
 800a7b8:	0800a825 	.word	0x0800a825
 800a7bc:	0800a825 	.word	0x0800a825
 800a7c0:	0800a825 	.word	0x0800a825
 800a7c4:	0800a825 	.word	0x0800a825
 800a7c8:	0800a825 	.word	0x0800a825
 800a7cc:	0800a825 	.word	0x0800a825
 800a7d0:	0800a815 	.word	0x0800a815
 800a7d4:	0800a825 	.word	0x0800a825
 800a7d8:	0800a825 	.word	0x0800a825
 800a7dc:	0800a825 	.word	0x0800a825
 800a7e0:	0800a825 	.word	0x0800a825
 800a7e4:	0800a825 	.word	0x0800a825
 800a7e8:	0800a825 	.word	0x0800a825
 800a7ec:	0800a825 	.word	0x0800a825
 800a7f0:	0800a81d 	.word	0x0800a81d
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7fa:	e1c0      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a7fc:	2304      	movs	r3, #4
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a802:	e1bc      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a804:	2308      	movs	r3, #8
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a80a:	e1b8      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a80c:	2310      	movs	r3, #16
 800a80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a812:	e1b4      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a814:	2320      	movs	r3, #32
 800a816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a81a:	e1b0      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a81c:	2340      	movs	r3, #64	; 0x40
 800a81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a822:	e1ac      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a824:	2380      	movs	r3, #128	; 0x80
 800a826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a82a:	e1a8      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a75      	ldr	r2, [pc, #468]	; (800aa08 <UART_SetConfig+0x638>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d130      	bne.n	800a898 <UART_SetConfig+0x4c8>
 800a836:	4b73      	ldr	r3, [pc, #460]	; (800aa04 <UART_SetConfig+0x634>)
 800a838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a83a:	f003 0307 	and.w	r3, r3, #7
 800a83e:	2b05      	cmp	r3, #5
 800a840:	d826      	bhi.n	800a890 <UART_SetConfig+0x4c0>
 800a842:	a201      	add	r2, pc, #4	; (adr r2, 800a848 <UART_SetConfig+0x478>)
 800a844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a848:	0800a861 	.word	0x0800a861
 800a84c:	0800a869 	.word	0x0800a869
 800a850:	0800a871 	.word	0x0800a871
 800a854:	0800a879 	.word	0x0800a879
 800a858:	0800a881 	.word	0x0800a881
 800a85c:	0800a889 	.word	0x0800a889
 800a860:	2300      	movs	r3, #0
 800a862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a866:	e18a      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a868:	2304      	movs	r3, #4
 800a86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a86e:	e186      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a870:	2308      	movs	r3, #8
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a876:	e182      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a878:	2310      	movs	r3, #16
 800a87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a87e:	e17e      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a880:	2320      	movs	r3, #32
 800a882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a886:	e17a      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a888:	2340      	movs	r3, #64	; 0x40
 800a88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a88e:	e176      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a890:	2380      	movs	r3, #128	; 0x80
 800a892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a896:	e172      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a5b      	ldr	r2, [pc, #364]	; (800aa0c <UART_SetConfig+0x63c>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d130      	bne.n	800a904 <UART_SetConfig+0x534>
 800a8a2:	4b58      	ldr	r3, [pc, #352]	; (800aa04 <UART_SetConfig+0x634>)
 800a8a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8a6:	f003 0307 	and.w	r3, r3, #7
 800a8aa:	2b05      	cmp	r3, #5
 800a8ac:	d826      	bhi.n	800a8fc <UART_SetConfig+0x52c>
 800a8ae:	a201      	add	r2, pc, #4	; (adr r2, 800a8b4 <UART_SetConfig+0x4e4>)
 800a8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b4:	0800a8cd 	.word	0x0800a8cd
 800a8b8:	0800a8d5 	.word	0x0800a8d5
 800a8bc:	0800a8dd 	.word	0x0800a8dd
 800a8c0:	0800a8e5 	.word	0x0800a8e5
 800a8c4:	0800a8ed 	.word	0x0800a8ed
 800a8c8:	0800a8f5 	.word	0x0800a8f5
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8d2:	e154      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a8d4:	2304      	movs	r3, #4
 800a8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8da:	e150      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a8dc:	2308      	movs	r3, #8
 800a8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8e2:	e14c      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a8e4:	2310      	movs	r3, #16
 800a8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ea:	e148      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a8ec:	2320      	movs	r3, #32
 800a8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8f2:	e144      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a8f4:	2340      	movs	r3, #64	; 0x40
 800a8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8fa:	e140      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a8fc:	2380      	movs	r3, #128	; 0x80
 800a8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a902:	e13c      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a41      	ldr	r2, [pc, #260]	; (800aa10 <UART_SetConfig+0x640>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	f040 8082 	bne.w	800aa14 <UART_SetConfig+0x644>
 800a910:	4b3c      	ldr	r3, [pc, #240]	; (800aa04 <UART_SetConfig+0x634>)
 800a912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a914:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a918:	2b28      	cmp	r3, #40	; 0x28
 800a91a:	d86d      	bhi.n	800a9f8 <UART_SetConfig+0x628>
 800a91c:	a201      	add	r2, pc, #4	; (adr r2, 800a924 <UART_SetConfig+0x554>)
 800a91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a922:	bf00      	nop
 800a924:	0800a9c9 	.word	0x0800a9c9
 800a928:	0800a9f9 	.word	0x0800a9f9
 800a92c:	0800a9f9 	.word	0x0800a9f9
 800a930:	0800a9f9 	.word	0x0800a9f9
 800a934:	0800a9f9 	.word	0x0800a9f9
 800a938:	0800a9f9 	.word	0x0800a9f9
 800a93c:	0800a9f9 	.word	0x0800a9f9
 800a940:	0800a9f9 	.word	0x0800a9f9
 800a944:	0800a9d1 	.word	0x0800a9d1
 800a948:	0800a9f9 	.word	0x0800a9f9
 800a94c:	0800a9f9 	.word	0x0800a9f9
 800a950:	0800a9f9 	.word	0x0800a9f9
 800a954:	0800a9f9 	.word	0x0800a9f9
 800a958:	0800a9f9 	.word	0x0800a9f9
 800a95c:	0800a9f9 	.word	0x0800a9f9
 800a960:	0800a9f9 	.word	0x0800a9f9
 800a964:	0800a9d9 	.word	0x0800a9d9
 800a968:	0800a9f9 	.word	0x0800a9f9
 800a96c:	0800a9f9 	.word	0x0800a9f9
 800a970:	0800a9f9 	.word	0x0800a9f9
 800a974:	0800a9f9 	.word	0x0800a9f9
 800a978:	0800a9f9 	.word	0x0800a9f9
 800a97c:	0800a9f9 	.word	0x0800a9f9
 800a980:	0800a9f9 	.word	0x0800a9f9
 800a984:	0800a9e1 	.word	0x0800a9e1
 800a988:	0800a9f9 	.word	0x0800a9f9
 800a98c:	0800a9f9 	.word	0x0800a9f9
 800a990:	0800a9f9 	.word	0x0800a9f9
 800a994:	0800a9f9 	.word	0x0800a9f9
 800a998:	0800a9f9 	.word	0x0800a9f9
 800a99c:	0800a9f9 	.word	0x0800a9f9
 800a9a0:	0800a9f9 	.word	0x0800a9f9
 800a9a4:	0800a9e9 	.word	0x0800a9e9
 800a9a8:	0800a9f9 	.word	0x0800a9f9
 800a9ac:	0800a9f9 	.word	0x0800a9f9
 800a9b0:	0800a9f9 	.word	0x0800a9f9
 800a9b4:	0800a9f9 	.word	0x0800a9f9
 800a9b8:	0800a9f9 	.word	0x0800a9f9
 800a9bc:	0800a9f9 	.word	0x0800a9f9
 800a9c0:	0800a9f9 	.word	0x0800a9f9
 800a9c4:	0800a9f1 	.word	0x0800a9f1
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ce:	e0d6      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a9d0:	2304      	movs	r3, #4
 800a9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9d6:	e0d2      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a9d8:	2308      	movs	r3, #8
 800a9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9de:	e0ce      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a9e0:	2310      	movs	r3, #16
 800a9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9e6:	e0ca      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a9e8:	2320      	movs	r3, #32
 800a9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ee:	e0c6      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a9f0:	2340      	movs	r3, #64	; 0x40
 800a9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9f6:	e0c2      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800a9f8:	2380      	movs	r3, #128	; 0x80
 800a9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9fe:	e0be      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800aa00:	40011400 	.word	0x40011400
 800aa04:	58024400 	.word	0x58024400
 800aa08:	40007800 	.word	0x40007800
 800aa0c:	40007c00 	.word	0x40007c00
 800aa10:	40011800 	.word	0x40011800
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4aad      	ldr	r2, [pc, #692]	; (800acd0 <UART_SetConfig+0x900>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d176      	bne.n	800ab0c <UART_SetConfig+0x73c>
 800aa1e:	4bad      	ldr	r3, [pc, #692]	; (800acd4 <UART_SetConfig+0x904>)
 800aa20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa26:	2b28      	cmp	r3, #40	; 0x28
 800aa28:	d86c      	bhi.n	800ab04 <UART_SetConfig+0x734>
 800aa2a:	a201      	add	r2, pc, #4	; (adr r2, 800aa30 <UART_SetConfig+0x660>)
 800aa2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa30:	0800aad5 	.word	0x0800aad5
 800aa34:	0800ab05 	.word	0x0800ab05
 800aa38:	0800ab05 	.word	0x0800ab05
 800aa3c:	0800ab05 	.word	0x0800ab05
 800aa40:	0800ab05 	.word	0x0800ab05
 800aa44:	0800ab05 	.word	0x0800ab05
 800aa48:	0800ab05 	.word	0x0800ab05
 800aa4c:	0800ab05 	.word	0x0800ab05
 800aa50:	0800aadd 	.word	0x0800aadd
 800aa54:	0800ab05 	.word	0x0800ab05
 800aa58:	0800ab05 	.word	0x0800ab05
 800aa5c:	0800ab05 	.word	0x0800ab05
 800aa60:	0800ab05 	.word	0x0800ab05
 800aa64:	0800ab05 	.word	0x0800ab05
 800aa68:	0800ab05 	.word	0x0800ab05
 800aa6c:	0800ab05 	.word	0x0800ab05
 800aa70:	0800aae5 	.word	0x0800aae5
 800aa74:	0800ab05 	.word	0x0800ab05
 800aa78:	0800ab05 	.word	0x0800ab05
 800aa7c:	0800ab05 	.word	0x0800ab05
 800aa80:	0800ab05 	.word	0x0800ab05
 800aa84:	0800ab05 	.word	0x0800ab05
 800aa88:	0800ab05 	.word	0x0800ab05
 800aa8c:	0800ab05 	.word	0x0800ab05
 800aa90:	0800aaed 	.word	0x0800aaed
 800aa94:	0800ab05 	.word	0x0800ab05
 800aa98:	0800ab05 	.word	0x0800ab05
 800aa9c:	0800ab05 	.word	0x0800ab05
 800aaa0:	0800ab05 	.word	0x0800ab05
 800aaa4:	0800ab05 	.word	0x0800ab05
 800aaa8:	0800ab05 	.word	0x0800ab05
 800aaac:	0800ab05 	.word	0x0800ab05
 800aab0:	0800aaf5 	.word	0x0800aaf5
 800aab4:	0800ab05 	.word	0x0800ab05
 800aab8:	0800ab05 	.word	0x0800ab05
 800aabc:	0800ab05 	.word	0x0800ab05
 800aac0:	0800ab05 	.word	0x0800ab05
 800aac4:	0800ab05 	.word	0x0800ab05
 800aac8:	0800ab05 	.word	0x0800ab05
 800aacc:	0800ab05 	.word	0x0800ab05
 800aad0:	0800aafd 	.word	0x0800aafd
 800aad4:	2301      	movs	r3, #1
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aada:	e050      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800aadc:	2304      	movs	r3, #4
 800aade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aae2:	e04c      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800aae4:	2308      	movs	r3, #8
 800aae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaea:	e048      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800aaec:	2310      	movs	r3, #16
 800aaee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaf2:	e044      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800aaf4:	2320      	movs	r3, #32
 800aaf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aafa:	e040      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800aafc:	2340      	movs	r3, #64	; 0x40
 800aafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab02:	e03c      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800ab04:	2380      	movs	r3, #128	; 0x80
 800ab06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab0a:	e038      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a71      	ldr	r2, [pc, #452]	; (800acd8 <UART_SetConfig+0x908>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d130      	bne.n	800ab78 <UART_SetConfig+0x7a8>
 800ab16:	4b6f      	ldr	r3, [pc, #444]	; (800acd4 <UART_SetConfig+0x904>)
 800ab18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab1a:	f003 0307 	and.w	r3, r3, #7
 800ab1e:	2b05      	cmp	r3, #5
 800ab20:	d826      	bhi.n	800ab70 <UART_SetConfig+0x7a0>
 800ab22:	a201      	add	r2, pc, #4	; (adr r2, 800ab28 <UART_SetConfig+0x758>)
 800ab24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab28:	0800ab41 	.word	0x0800ab41
 800ab2c:	0800ab49 	.word	0x0800ab49
 800ab30:	0800ab51 	.word	0x0800ab51
 800ab34:	0800ab59 	.word	0x0800ab59
 800ab38:	0800ab61 	.word	0x0800ab61
 800ab3c:	0800ab69 	.word	0x0800ab69
 800ab40:	2302      	movs	r3, #2
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab46:	e01a      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800ab48:	2304      	movs	r3, #4
 800ab4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab4e:	e016      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800ab50:	2308      	movs	r3, #8
 800ab52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab56:	e012      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800ab58:	2310      	movs	r3, #16
 800ab5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab5e:	e00e      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800ab60:	2320      	movs	r3, #32
 800ab62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab66:	e00a      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800ab68:	2340      	movs	r3, #64	; 0x40
 800ab6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab6e:	e006      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800ab70:	2380      	movs	r3, #128	; 0x80
 800ab72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab76:	e002      	b.n	800ab7e <UART_SetConfig+0x7ae>
 800ab78:	2380      	movs	r3, #128	; 0x80
 800ab7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a55      	ldr	r2, [pc, #340]	; (800acd8 <UART_SetConfig+0x908>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	f040 80f8 	bne.w	800ad7a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab8e:	2b20      	cmp	r3, #32
 800ab90:	dc46      	bgt.n	800ac20 <UART_SetConfig+0x850>
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	db75      	blt.n	800ac82 <UART_SetConfig+0x8b2>
 800ab96:	3b02      	subs	r3, #2
 800ab98:	2b1e      	cmp	r3, #30
 800ab9a:	d872      	bhi.n	800ac82 <UART_SetConfig+0x8b2>
 800ab9c:	a201      	add	r2, pc, #4	; (adr r2, 800aba4 <UART_SetConfig+0x7d4>)
 800ab9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba2:	bf00      	nop
 800aba4:	0800ac27 	.word	0x0800ac27
 800aba8:	0800ac83 	.word	0x0800ac83
 800abac:	0800ac2f 	.word	0x0800ac2f
 800abb0:	0800ac83 	.word	0x0800ac83
 800abb4:	0800ac83 	.word	0x0800ac83
 800abb8:	0800ac83 	.word	0x0800ac83
 800abbc:	0800ac3f 	.word	0x0800ac3f
 800abc0:	0800ac83 	.word	0x0800ac83
 800abc4:	0800ac83 	.word	0x0800ac83
 800abc8:	0800ac83 	.word	0x0800ac83
 800abcc:	0800ac83 	.word	0x0800ac83
 800abd0:	0800ac83 	.word	0x0800ac83
 800abd4:	0800ac83 	.word	0x0800ac83
 800abd8:	0800ac83 	.word	0x0800ac83
 800abdc:	0800ac4f 	.word	0x0800ac4f
 800abe0:	0800ac83 	.word	0x0800ac83
 800abe4:	0800ac83 	.word	0x0800ac83
 800abe8:	0800ac83 	.word	0x0800ac83
 800abec:	0800ac83 	.word	0x0800ac83
 800abf0:	0800ac83 	.word	0x0800ac83
 800abf4:	0800ac83 	.word	0x0800ac83
 800abf8:	0800ac83 	.word	0x0800ac83
 800abfc:	0800ac83 	.word	0x0800ac83
 800ac00:	0800ac83 	.word	0x0800ac83
 800ac04:	0800ac83 	.word	0x0800ac83
 800ac08:	0800ac83 	.word	0x0800ac83
 800ac0c:	0800ac83 	.word	0x0800ac83
 800ac10:	0800ac83 	.word	0x0800ac83
 800ac14:	0800ac83 	.word	0x0800ac83
 800ac18:	0800ac83 	.word	0x0800ac83
 800ac1c:	0800ac75 	.word	0x0800ac75
 800ac20:	2b40      	cmp	r3, #64	; 0x40
 800ac22:	d02a      	beq.n	800ac7a <UART_SetConfig+0x8aa>
 800ac24:	e02d      	b.n	800ac82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ac26:	f7fe fa89 	bl	800913c <HAL_RCCEx_GetD3PCLK1Freq>
 800ac2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac2c:	e02f      	b.n	800ac8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7fe fa98 	bl	8009168 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac3c:	e027      	b.n	800ac8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac3e:	f107 0318 	add.w	r3, r7, #24
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fe fbe4 	bl	8009410 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac4c:	e01f      	b.n	800ac8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac4e:	4b21      	ldr	r3, [pc, #132]	; (800acd4 <UART_SetConfig+0x904>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 0320 	and.w	r3, r3, #32
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d009      	beq.n	800ac6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac5a:	4b1e      	ldr	r3, [pc, #120]	; (800acd4 <UART_SetConfig+0x904>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	08db      	lsrs	r3, r3, #3
 800ac60:	f003 0303 	and.w	r3, r3, #3
 800ac64:	4a1d      	ldr	r2, [pc, #116]	; (800acdc <UART_SetConfig+0x90c>)
 800ac66:	fa22 f303 	lsr.w	r3, r2, r3
 800ac6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac6c:	e00f      	b.n	800ac8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ac6e:	4b1b      	ldr	r3, [pc, #108]	; (800acdc <UART_SetConfig+0x90c>)
 800ac70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac72:	e00c      	b.n	800ac8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac74:	4b1a      	ldr	r3, [pc, #104]	; (800ace0 <UART_SetConfig+0x910>)
 800ac76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac78:	e009      	b.n	800ac8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac80:	e005      	b.n	800ac8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ac82:	2300      	movs	r3, #0
 800ac84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ac8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 81ee 	beq.w	800b072 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9a:	4a12      	ldr	r2, [pc, #72]	; (800ace4 <UART_SetConfig+0x914>)
 800ac9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aca0:	461a      	mov	r2, r3
 800aca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aca4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aca8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	4613      	mov	r3, r2
 800acb0:	005b      	lsls	r3, r3, #1
 800acb2:	4413      	add	r3, r2
 800acb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d305      	bcc.n	800acc6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d910      	bls.n	800ace8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800accc:	e1d1      	b.n	800b072 <UART_SetConfig+0xca2>
 800acce:	bf00      	nop
 800acd0:	40011c00 	.word	0x40011c00
 800acd4:	58024400 	.word	0x58024400
 800acd8:	58000c00 	.word	0x58000c00
 800acdc:	03d09000 	.word	0x03d09000
 800ace0:	003d0900 	.word	0x003d0900
 800ace4:	0800bb08 	.word	0x0800bb08
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ace8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acea:	2200      	movs	r2, #0
 800acec:	60bb      	str	r3, [r7, #8]
 800acee:	60fa      	str	r2, [r7, #12]
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf4:	4ac0      	ldr	r2, [pc, #768]	; (800aff8 <UART_SetConfig+0xc28>)
 800acf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	2200      	movs	r2, #0
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	607a      	str	r2, [r7, #4]
 800ad02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad0a:	f7f5 fcad 	bl	8000668 <__aeabi_uldivmod>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	460b      	mov	r3, r1
 800ad12:	4610      	mov	r0, r2
 800ad14:	4619      	mov	r1, r3
 800ad16:	f04f 0200 	mov.w	r2, #0
 800ad1a:	f04f 0300 	mov.w	r3, #0
 800ad1e:	020b      	lsls	r3, r1, #8
 800ad20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad24:	0202      	lsls	r2, r0, #8
 800ad26:	6979      	ldr	r1, [r7, #20]
 800ad28:	6849      	ldr	r1, [r1, #4]
 800ad2a:	0849      	lsrs	r1, r1, #1
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	460c      	mov	r4, r1
 800ad30:	4605      	mov	r5, r0
 800ad32:	eb12 0804 	adds.w	r8, r2, r4
 800ad36:	eb43 0905 	adc.w	r9, r3, r5
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	469a      	mov	sl, r3
 800ad42:	4693      	mov	fp, r2
 800ad44:	4652      	mov	r2, sl
 800ad46:	465b      	mov	r3, fp
 800ad48:	4640      	mov	r0, r8
 800ad4a:	4649      	mov	r1, r9
 800ad4c:	f7f5 fc8c 	bl	8000668 <__aeabi_uldivmod>
 800ad50:	4602      	mov	r2, r0
 800ad52:	460b      	mov	r3, r1
 800ad54:	4613      	mov	r3, r2
 800ad56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad5e:	d308      	bcc.n	800ad72 <UART_SetConfig+0x9a2>
 800ad60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad66:	d204      	bcs.n	800ad72 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad6e:	60da      	str	r2, [r3, #12]
 800ad70:	e17f      	b.n	800b072 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ad72:	2301      	movs	r3, #1
 800ad74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ad78:	e17b      	b.n	800b072 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	69db      	ldr	r3, [r3, #28]
 800ad7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad82:	f040 80bd 	bne.w	800af00 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ad86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ad8a:	2b20      	cmp	r3, #32
 800ad8c:	dc48      	bgt.n	800ae20 <UART_SetConfig+0xa50>
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	db7b      	blt.n	800ae8a <UART_SetConfig+0xaba>
 800ad92:	2b20      	cmp	r3, #32
 800ad94:	d879      	bhi.n	800ae8a <UART_SetConfig+0xaba>
 800ad96:	a201      	add	r2, pc, #4	; (adr r2, 800ad9c <UART_SetConfig+0x9cc>)
 800ad98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9c:	0800ae27 	.word	0x0800ae27
 800ada0:	0800ae2f 	.word	0x0800ae2f
 800ada4:	0800ae8b 	.word	0x0800ae8b
 800ada8:	0800ae8b 	.word	0x0800ae8b
 800adac:	0800ae37 	.word	0x0800ae37
 800adb0:	0800ae8b 	.word	0x0800ae8b
 800adb4:	0800ae8b 	.word	0x0800ae8b
 800adb8:	0800ae8b 	.word	0x0800ae8b
 800adbc:	0800ae47 	.word	0x0800ae47
 800adc0:	0800ae8b 	.word	0x0800ae8b
 800adc4:	0800ae8b 	.word	0x0800ae8b
 800adc8:	0800ae8b 	.word	0x0800ae8b
 800adcc:	0800ae8b 	.word	0x0800ae8b
 800add0:	0800ae8b 	.word	0x0800ae8b
 800add4:	0800ae8b 	.word	0x0800ae8b
 800add8:	0800ae8b 	.word	0x0800ae8b
 800addc:	0800ae57 	.word	0x0800ae57
 800ade0:	0800ae8b 	.word	0x0800ae8b
 800ade4:	0800ae8b 	.word	0x0800ae8b
 800ade8:	0800ae8b 	.word	0x0800ae8b
 800adec:	0800ae8b 	.word	0x0800ae8b
 800adf0:	0800ae8b 	.word	0x0800ae8b
 800adf4:	0800ae8b 	.word	0x0800ae8b
 800adf8:	0800ae8b 	.word	0x0800ae8b
 800adfc:	0800ae8b 	.word	0x0800ae8b
 800ae00:	0800ae8b 	.word	0x0800ae8b
 800ae04:	0800ae8b 	.word	0x0800ae8b
 800ae08:	0800ae8b 	.word	0x0800ae8b
 800ae0c:	0800ae8b 	.word	0x0800ae8b
 800ae10:	0800ae8b 	.word	0x0800ae8b
 800ae14:	0800ae8b 	.word	0x0800ae8b
 800ae18:	0800ae8b 	.word	0x0800ae8b
 800ae1c:	0800ae7d 	.word	0x0800ae7d
 800ae20:	2b40      	cmp	r3, #64	; 0x40
 800ae22:	d02e      	beq.n	800ae82 <UART_SetConfig+0xab2>
 800ae24:	e031      	b.n	800ae8a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae26:	f7fc fe23 	bl	8007a70 <HAL_RCC_GetPCLK1Freq>
 800ae2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae2c:	e033      	b.n	800ae96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae2e:	f7fc fe35 	bl	8007a9c <HAL_RCC_GetPCLK2Freq>
 800ae32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae34:	e02f      	b.n	800ae96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fe f994 	bl	8009168 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae44:	e027      	b.n	800ae96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae46:	f107 0318 	add.w	r3, r7, #24
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fe fae0 	bl	8009410 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae54:	e01f      	b.n	800ae96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae56:	4b69      	ldr	r3, [pc, #420]	; (800affc <UART_SetConfig+0xc2c>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 0320 	and.w	r3, r3, #32
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d009      	beq.n	800ae76 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae62:	4b66      	ldr	r3, [pc, #408]	; (800affc <UART_SetConfig+0xc2c>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	08db      	lsrs	r3, r3, #3
 800ae68:	f003 0303 	and.w	r3, r3, #3
 800ae6c:	4a64      	ldr	r2, [pc, #400]	; (800b000 <UART_SetConfig+0xc30>)
 800ae6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae74:	e00f      	b.n	800ae96 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ae76:	4b62      	ldr	r3, [pc, #392]	; (800b000 <UART_SetConfig+0xc30>)
 800ae78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae7a:	e00c      	b.n	800ae96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae7c:	4b61      	ldr	r3, [pc, #388]	; (800b004 <UART_SetConfig+0xc34>)
 800ae7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae80:	e009      	b.n	800ae96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae88:	e005      	b.n	800ae96 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ae94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f000 80ea 	beq.w	800b072 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea2:	4a55      	ldr	r2, [pc, #340]	; (800aff8 <UART_SetConfig+0xc28>)
 800aea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aea8:	461a      	mov	r2, r3
 800aeaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeac:	fbb3 f3f2 	udiv	r3, r3, r2
 800aeb0:	005a      	lsls	r2, r3, #1
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	085b      	lsrs	r3, r3, #1
 800aeb8:	441a      	add	r2, r3
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	fbb2 f3f3 	udiv	r3, r2, r3
 800aec2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec6:	2b0f      	cmp	r3, #15
 800aec8:	d916      	bls.n	800aef8 <UART_SetConfig+0xb28>
 800aeca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aed0:	d212      	bcs.n	800aef8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	f023 030f 	bic.w	r3, r3, #15
 800aeda:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aede:	085b      	lsrs	r3, r3, #1
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	f003 0307 	and.w	r3, r3, #7
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aeea:	4313      	orrs	r3, r2
 800aeec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800aef4:	60da      	str	r2, [r3, #12]
 800aef6:	e0bc      	b.n	800b072 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aefe:	e0b8      	b.n	800b072 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800af04:	2b20      	cmp	r3, #32
 800af06:	dc4b      	bgt.n	800afa0 <UART_SetConfig+0xbd0>
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f2c0 8087 	blt.w	800b01c <UART_SetConfig+0xc4c>
 800af0e:	2b20      	cmp	r3, #32
 800af10:	f200 8084 	bhi.w	800b01c <UART_SetConfig+0xc4c>
 800af14:	a201      	add	r2, pc, #4	; (adr r2, 800af1c <UART_SetConfig+0xb4c>)
 800af16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af1a:	bf00      	nop
 800af1c:	0800afa7 	.word	0x0800afa7
 800af20:	0800afaf 	.word	0x0800afaf
 800af24:	0800b01d 	.word	0x0800b01d
 800af28:	0800b01d 	.word	0x0800b01d
 800af2c:	0800afb7 	.word	0x0800afb7
 800af30:	0800b01d 	.word	0x0800b01d
 800af34:	0800b01d 	.word	0x0800b01d
 800af38:	0800b01d 	.word	0x0800b01d
 800af3c:	0800afc7 	.word	0x0800afc7
 800af40:	0800b01d 	.word	0x0800b01d
 800af44:	0800b01d 	.word	0x0800b01d
 800af48:	0800b01d 	.word	0x0800b01d
 800af4c:	0800b01d 	.word	0x0800b01d
 800af50:	0800b01d 	.word	0x0800b01d
 800af54:	0800b01d 	.word	0x0800b01d
 800af58:	0800b01d 	.word	0x0800b01d
 800af5c:	0800afd7 	.word	0x0800afd7
 800af60:	0800b01d 	.word	0x0800b01d
 800af64:	0800b01d 	.word	0x0800b01d
 800af68:	0800b01d 	.word	0x0800b01d
 800af6c:	0800b01d 	.word	0x0800b01d
 800af70:	0800b01d 	.word	0x0800b01d
 800af74:	0800b01d 	.word	0x0800b01d
 800af78:	0800b01d 	.word	0x0800b01d
 800af7c:	0800b01d 	.word	0x0800b01d
 800af80:	0800b01d 	.word	0x0800b01d
 800af84:	0800b01d 	.word	0x0800b01d
 800af88:	0800b01d 	.word	0x0800b01d
 800af8c:	0800b01d 	.word	0x0800b01d
 800af90:	0800b01d 	.word	0x0800b01d
 800af94:	0800b01d 	.word	0x0800b01d
 800af98:	0800b01d 	.word	0x0800b01d
 800af9c:	0800b00f 	.word	0x0800b00f
 800afa0:	2b40      	cmp	r3, #64	; 0x40
 800afa2:	d037      	beq.n	800b014 <UART_SetConfig+0xc44>
 800afa4:	e03a      	b.n	800b01c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afa6:	f7fc fd63 	bl	8007a70 <HAL_RCC_GetPCLK1Freq>
 800afaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800afac:	e03c      	b.n	800b028 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afae:	f7fc fd75 	bl	8007a9c <HAL_RCC_GetPCLK2Freq>
 800afb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800afb4:	e038      	b.n	800b028 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fe f8d4 	bl	8009168 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800afc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afc4:	e030      	b.n	800b028 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afc6:	f107 0318 	add.w	r3, r7, #24
 800afca:	4618      	mov	r0, r3
 800afcc:	f7fe fa20 	bl	8009410 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afd4:	e028      	b.n	800b028 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afd6:	4b09      	ldr	r3, [pc, #36]	; (800affc <UART_SetConfig+0xc2c>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0320 	and.w	r3, r3, #32
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d012      	beq.n	800b008 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800afe2:	4b06      	ldr	r3, [pc, #24]	; (800affc <UART_SetConfig+0xc2c>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	08db      	lsrs	r3, r3, #3
 800afe8:	f003 0303 	and.w	r3, r3, #3
 800afec:	4a04      	ldr	r2, [pc, #16]	; (800b000 <UART_SetConfig+0xc30>)
 800afee:	fa22 f303 	lsr.w	r3, r2, r3
 800aff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aff4:	e018      	b.n	800b028 <UART_SetConfig+0xc58>
 800aff6:	bf00      	nop
 800aff8:	0800bb08 	.word	0x0800bb08
 800affc:	58024400 	.word	0x58024400
 800b000:	03d09000 	.word	0x03d09000
 800b004:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b008:	4b24      	ldr	r3, [pc, #144]	; (800b09c <UART_SetConfig+0xccc>)
 800b00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b00c:	e00c      	b.n	800b028 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b00e:	4b24      	ldr	r3, [pc, #144]	; (800b0a0 <UART_SetConfig+0xcd0>)
 800b010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b012:	e009      	b.n	800b028 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b014:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b018:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b01a:	e005      	b.n	800b028 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b01c:	2300      	movs	r3, #0
 800b01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b026:	bf00      	nop
    }

    if (pclk != 0U)
 800b028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d021      	beq.n	800b072 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b032:	4a1c      	ldr	r2, [pc, #112]	; (800b0a4 <UART_SetConfig+0xcd4>)
 800b034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b038:	461a      	mov	r2, r3
 800b03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b03c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	085b      	lsrs	r3, r3, #1
 800b046:	441a      	add	r2, r3
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b050:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b054:	2b0f      	cmp	r3, #15
 800b056:	d909      	bls.n	800b06c <UART_SetConfig+0xc9c>
 800b058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b05e:	d205      	bcs.n	800b06c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	b29a      	uxth	r2, r3
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	60da      	str	r2, [r3, #12]
 800b06a:	e002      	b.n	800b072 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	2201      	movs	r2, #1
 800b076:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2200      	movs	r2, #0
 800b086:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	2200      	movs	r2, #0
 800b08c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b08e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b092:	4618      	mov	r0, r3
 800b094:	3748      	adds	r7, #72	; 0x48
 800b096:	46bd      	mov	sp, r7
 800b098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b09c:	03d09000 	.word	0x03d09000
 800b0a0:	003d0900 	.word	0x003d0900
 800b0a4:	0800bb08 	.word	0x0800bb08

0800b0a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b4:	f003 0301 	and.w	r3, r3, #1
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d00a      	beq.n	800b0d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	430a      	orrs	r2, r1
 800b0d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d6:	f003 0302 	and.w	r3, r3, #2
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00a      	beq.n	800b0f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	430a      	orrs	r2, r1
 800b0f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f8:	f003 0304 	and.w	r3, r3, #4
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00a      	beq.n	800b116 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	430a      	orrs	r2, r1
 800b114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11a:	f003 0308 	and.w	r3, r3, #8
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00a      	beq.n	800b138 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	430a      	orrs	r2, r1
 800b136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13c:	f003 0310 	and.w	r3, r3, #16
 800b140:	2b00      	cmp	r3, #0
 800b142:	d00a      	beq.n	800b15a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	430a      	orrs	r2, r1
 800b158:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b15e:	f003 0320 	and.w	r3, r3, #32
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00a      	beq.n	800b17c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	430a      	orrs	r2, r1
 800b17a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b184:	2b00      	cmp	r3, #0
 800b186:	d01a      	beq.n	800b1be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	430a      	orrs	r2, r1
 800b19c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1a6:	d10a      	bne.n	800b1be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	430a      	orrs	r2, r1
 800b1bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00a      	beq.n	800b1e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	430a      	orrs	r2, r1
 800b1de:	605a      	str	r2, [r3, #4]
  }
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af02      	add	r7, sp, #8
 800b1f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1fc:	f7f7 fb90 	bl	8002920 <HAL_GetTick>
 800b200:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f003 0308 	and.w	r3, r3, #8
 800b20c:	2b08      	cmp	r3, #8
 800b20e:	d10e      	bne.n	800b22e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b214:	9300      	str	r3, [sp, #0]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f82f 	bl	800b282 <UART_WaitOnFlagUntilTimeout>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b22a:	2303      	movs	r3, #3
 800b22c:	e025      	b.n	800b27a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 0304 	and.w	r3, r3, #4
 800b238:	2b04      	cmp	r3, #4
 800b23a:	d10e      	bne.n	800b25a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b23c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f819 	bl	800b282 <UART_WaitOnFlagUntilTimeout>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d001      	beq.n	800b25a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b256:	2303      	movs	r3, #3
 800b258:	e00f      	b.n	800b27a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2220      	movs	r2, #32
 800b25e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2220      	movs	r2, #32
 800b266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b09c      	sub	sp, #112	; 0x70
 800b286:	af00      	add	r7, sp, #0
 800b288:	60f8      	str	r0, [r7, #12]
 800b28a:	60b9      	str	r1, [r7, #8]
 800b28c:	603b      	str	r3, [r7, #0]
 800b28e:	4613      	mov	r3, r2
 800b290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b292:	e0a9      	b.n	800b3e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b29a:	f000 80a5 	beq.w	800b3e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b29e:	f7f7 fb3f 	bl	8002920 <HAL_GetTick>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d302      	bcc.n	800b2b4 <UART_WaitOnFlagUntilTimeout+0x32>
 800b2ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d140      	bne.n	800b336 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2bc:	e853 3f00 	ldrex	r3, [r3]
 800b2c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b2c8:	667b      	str	r3, [r7, #100]	; 0x64
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b2d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b2da:	e841 2300 	strex	r3, r2, [r1]
 800b2de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b2e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1e6      	bne.n	800b2b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2f0:	e853 3f00 	ldrex	r3, [r3]
 800b2f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f8:	f023 0301 	bic.w	r3, r3, #1
 800b2fc:	663b      	str	r3, [r7, #96]	; 0x60
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3308      	adds	r3, #8
 800b304:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b306:	64ba      	str	r2, [r7, #72]	; 0x48
 800b308:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b30c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b30e:	e841 2300 	strex	r3, r2, [r1]
 800b312:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1e5      	bne.n	800b2e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2220      	movs	r2, #32
 800b31e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2220      	movs	r2, #32
 800b326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b332:	2303      	movs	r3, #3
 800b334:	e069      	b.n	800b40a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 0304 	and.w	r3, r3, #4
 800b340:	2b00      	cmp	r3, #0
 800b342:	d051      	beq.n	800b3e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	69db      	ldr	r3, [r3, #28]
 800b34a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b34e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b352:	d149      	bne.n	800b3e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b35c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	e853 3f00 	ldrex	r3, [r3]
 800b36a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b372:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	461a      	mov	r2, r3
 800b37a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b37c:	637b      	str	r3, [r7, #52]	; 0x34
 800b37e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b384:	e841 2300 	strex	r3, r2, [r1]
 800b388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1e6      	bne.n	800b35e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3308      	adds	r3, #8
 800b396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	e853 3f00 	ldrex	r3, [r3]
 800b39e:	613b      	str	r3, [r7, #16]
   return(result);
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	f023 0301 	bic.w	r3, r3, #1
 800b3a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	3308      	adds	r3, #8
 800b3ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b3b0:	623a      	str	r2, [r7, #32]
 800b3b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b4:	69f9      	ldr	r1, [r7, #28]
 800b3b6:	6a3a      	ldr	r2, [r7, #32]
 800b3b8:	e841 2300 	strex	r3, r2, [r1]
 800b3bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d1e5      	bne.n	800b390 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2220      	movs	r2, #32
 800b3c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2220      	movs	r2, #32
 800b3d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	2220      	movs	r2, #32
 800b3d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e010      	b.n	800b40a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	69da      	ldr	r2, [r3, #28]
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	4013      	ands	r3, r2
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	bf0c      	ite	eq
 800b3f8:	2301      	moveq	r3, #1
 800b3fa:	2300      	movne	r3, #0
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	461a      	mov	r2, r3
 800b400:	79fb      	ldrb	r3, [r7, #7]
 800b402:	429a      	cmp	r2, r3
 800b404:	f43f af46 	beq.w	800b294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3770      	adds	r7, #112	; 0x70
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b412:	b480      	push	{r7}
 800b414:	b085      	sub	sp, #20
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b420:	2b01      	cmp	r3, #1
 800b422:	d101      	bne.n	800b428 <HAL_UARTEx_DisableFifoMode+0x16>
 800b424:	2302      	movs	r3, #2
 800b426:	e027      	b.n	800b478 <HAL_UARTEx_DisableFifoMode+0x66>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2224      	movs	r2, #36	; 0x24
 800b434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f022 0201 	bic.w	r2, r2, #1
 800b44e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b456:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2220      	movs	r2, #32
 800b46a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b494:	2b01      	cmp	r3, #1
 800b496:	d101      	bne.n	800b49c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b498:	2302      	movs	r3, #2
 800b49a:	e02d      	b.n	800b4f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2224      	movs	r2, #36	; 0x24
 800b4a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f022 0201 	bic.w	r2, r2, #1
 800b4c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	430a      	orrs	r2, r1
 800b4d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 f84f 	bl	800b57c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2220      	movs	r2, #32
 800b4ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b510:	2b01      	cmp	r3, #1
 800b512:	d101      	bne.n	800b518 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b514:	2302      	movs	r3, #2
 800b516:	e02d      	b.n	800b574 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2224      	movs	r2, #36	; 0x24
 800b524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f022 0201 	bic.w	r2, r2, #1
 800b53e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	683a      	ldr	r2, [r7, #0]
 800b550:	430a      	orrs	r2, r1
 800b552:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 f811 	bl	800b57c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2220      	movs	r2, #32
 800b566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d108      	bne.n	800b59e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2201      	movs	r2, #1
 800b598:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b59c:	e031      	b.n	800b602 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b59e:	2310      	movs	r3, #16
 800b5a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b5a2:	2310      	movs	r3, #16
 800b5a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	0e5b      	lsrs	r3, r3, #25
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	f003 0307 	and.w	r3, r3, #7
 800b5b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	0f5b      	lsrs	r3, r3, #29
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	f003 0307 	and.w	r3, r3, #7
 800b5c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5c6:	7bbb      	ldrb	r3, [r7, #14]
 800b5c8:	7b3a      	ldrb	r2, [r7, #12]
 800b5ca:	4911      	ldr	r1, [pc, #68]	; (800b610 <UARTEx_SetNbDataToProcess+0x94>)
 800b5cc:	5c8a      	ldrb	r2, [r1, r2]
 800b5ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b5d2:	7b3a      	ldrb	r2, [r7, #12]
 800b5d4:	490f      	ldr	r1, [pc, #60]	; (800b614 <UARTEx_SetNbDataToProcess+0x98>)
 800b5d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
 800b5e6:	7b7a      	ldrb	r2, [r7, #13]
 800b5e8:	4909      	ldr	r1, [pc, #36]	; (800b610 <UARTEx_SetNbDataToProcess+0x94>)
 800b5ea:	5c8a      	ldrb	r2, [r1, r2]
 800b5ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b5f0:	7b7a      	ldrb	r2, [r7, #13]
 800b5f2:	4908      	ldr	r1, [pc, #32]	; (800b614 <UARTEx_SetNbDataToProcess+0x98>)
 800b5f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b602:	bf00      	nop
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	0800bb20 	.word	0x0800bb20
 800b614:	0800bb28 	.word	0x0800bb28

0800b618 <__errno>:
 800b618:	4b01      	ldr	r3, [pc, #4]	; (800b620 <__errno+0x8>)
 800b61a:	6818      	ldr	r0, [r3, #0]
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	24000014 	.word	0x24000014

0800b624 <__libc_init_array>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	4d0d      	ldr	r5, [pc, #52]	; (800b65c <__libc_init_array+0x38>)
 800b628:	4c0d      	ldr	r4, [pc, #52]	; (800b660 <__libc_init_array+0x3c>)
 800b62a:	1b64      	subs	r4, r4, r5
 800b62c:	10a4      	asrs	r4, r4, #2
 800b62e:	2600      	movs	r6, #0
 800b630:	42a6      	cmp	r6, r4
 800b632:	d109      	bne.n	800b648 <__libc_init_array+0x24>
 800b634:	4d0b      	ldr	r5, [pc, #44]	; (800b664 <__libc_init_array+0x40>)
 800b636:	4c0c      	ldr	r4, [pc, #48]	; (800b668 <__libc_init_array+0x44>)
 800b638:	f000 fa4c 	bl	800bad4 <_init>
 800b63c:	1b64      	subs	r4, r4, r5
 800b63e:	10a4      	asrs	r4, r4, #2
 800b640:	2600      	movs	r6, #0
 800b642:	42a6      	cmp	r6, r4
 800b644:	d105      	bne.n	800b652 <__libc_init_array+0x2e>
 800b646:	bd70      	pop	{r4, r5, r6, pc}
 800b648:	f855 3b04 	ldr.w	r3, [r5], #4
 800b64c:	4798      	blx	r3
 800b64e:	3601      	adds	r6, #1
 800b650:	e7ee      	b.n	800b630 <__libc_init_array+0xc>
 800b652:	f855 3b04 	ldr.w	r3, [r5], #4
 800b656:	4798      	blx	r3
 800b658:	3601      	adds	r6, #1
 800b65a:	e7f2      	b.n	800b642 <__libc_init_array+0x1e>
 800b65c:	0800bc78 	.word	0x0800bc78
 800b660:	0800bc78 	.word	0x0800bc78
 800b664:	0800bc78 	.word	0x0800bc78
 800b668:	0800bc7c 	.word	0x0800bc7c

0800b66c <malloc>:
 800b66c:	4b02      	ldr	r3, [pc, #8]	; (800b678 <malloc+0xc>)
 800b66e:	4601      	mov	r1, r0
 800b670:	6818      	ldr	r0, [r3, #0]
 800b672:	f000 b87f 	b.w	800b774 <_malloc_r>
 800b676:	bf00      	nop
 800b678:	24000014 	.word	0x24000014

0800b67c <free>:
 800b67c:	4b02      	ldr	r3, [pc, #8]	; (800b688 <free+0xc>)
 800b67e:	4601      	mov	r1, r0
 800b680:	6818      	ldr	r0, [r3, #0]
 800b682:	f000 b80b 	b.w	800b69c <_free_r>
 800b686:	bf00      	nop
 800b688:	24000014 	.word	0x24000014

0800b68c <memset>:
 800b68c:	4402      	add	r2, r0
 800b68e:	4603      	mov	r3, r0
 800b690:	4293      	cmp	r3, r2
 800b692:	d100      	bne.n	800b696 <memset+0xa>
 800b694:	4770      	bx	lr
 800b696:	f803 1b01 	strb.w	r1, [r3], #1
 800b69a:	e7f9      	b.n	800b690 <memset+0x4>

0800b69c <_free_r>:
 800b69c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b69e:	2900      	cmp	r1, #0
 800b6a0:	d044      	beq.n	800b72c <_free_r+0x90>
 800b6a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6a6:	9001      	str	r0, [sp, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f1a1 0404 	sub.w	r4, r1, #4
 800b6ae:	bfb8      	it	lt
 800b6b0:	18e4      	addlt	r4, r4, r3
 800b6b2:	f000 f8e3 	bl	800b87c <__malloc_lock>
 800b6b6:	4a1e      	ldr	r2, [pc, #120]	; (800b730 <_free_r+0x94>)
 800b6b8:	9801      	ldr	r0, [sp, #4]
 800b6ba:	6813      	ldr	r3, [r2, #0]
 800b6bc:	b933      	cbnz	r3, 800b6cc <_free_r+0x30>
 800b6be:	6063      	str	r3, [r4, #4]
 800b6c0:	6014      	str	r4, [r2, #0]
 800b6c2:	b003      	add	sp, #12
 800b6c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6c8:	f000 b8de 	b.w	800b888 <__malloc_unlock>
 800b6cc:	42a3      	cmp	r3, r4
 800b6ce:	d908      	bls.n	800b6e2 <_free_r+0x46>
 800b6d0:	6825      	ldr	r5, [r4, #0]
 800b6d2:	1961      	adds	r1, r4, r5
 800b6d4:	428b      	cmp	r3, r1
 800b6d6:	bf01      	itttt	eq
 800b6d8:	6819      	ldreq	r1, [r3, #0]
 800b6da:	685b      	ldreq	r3, [r3, #4]
 800b6dc:	1949      	addeq	r1, r1, r5
 800b6de:	6021      	streq	r1, [r4, #0]
 800b6e0:	e7ed      	b.n	800b6be <_free_r+0x22>
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	b10b      	cbz	r3, 800b6ec <_free_r+0x50>
 800b6e8:	42a3      	cmp	r3, r4
 800b6ea:	d9fa      	bls.n	800b6e2 <_free_r+0x46>
 800b6ec:	6811      	ldr	r1, [r2, #0]
 800b6ee:	1855      	adds	r5, r2, r1
 800b6f0:	42a5      	cmp	r5, r4
 800b6f2:	d10b      	bne.n	800b70c <_free_r+0x70>
 800b6f4:	6824      	ldr	r4, [r4, #0]
 800b6f6:	4421      	add	r1, r4
 800b6f8:	1854      	adds	r4, r2, r1
 800b6fa:	42a3      	cmp	r3, r4
 800b6fc:	6011      	str	r1, [r2, #0]
 800b6fe:	d1e0      	bne.n	800b6c2 <_free_r+0x26>
 800b700:	681c      	ldr	r4, [r3, #0]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	6053      	str	r3, [r2, #4]
 800b706:	4421      	add	r1, r4
 800b708:	6011      	str	r1, [r2, #0]
 800b70a:	e7da      	b.n	800b6c2 <_free_r+0x26>
 800b70c:	d902      	bls.n	800b714 <_free_r+0x78>
 800b70e:	230c      	movs	r3, #12
 800b710:	6003      	str	r3, [r0, #0]
 800b712:	e7d6      	b.n	800b6c2 <_free_r+0x26>
 800b714:	6825      	ldr	r5, [r4, #0]
 800b716:	1961      	adds	r1, r4, r5
 800b718:	428b      	cmp	r3, r1
 800b71a:	bf04      	itt	eq
 800b71c:	6819      	ldreq	r1, [r3, #0]
 800b71e:	685b      	ldreq	r3, [r3, #4]
 800b720:	6063      	str	r3, [r4, #4]
 800b722:	bf04      	itt	eq
 800b724:	1949      	addeq	r1, r1, r5
 800b726:	6021      	streq	r1, [r4, #0]
 800b728:	6054      	str	r4, [r2, #4]
 800b72a:	e7ca      	b.n	800b6c2 <_free_r+0x26>
 800b72c:	b003      	add	sp, #12
 800b72e:	bd30      	pop	{r4, r5, pc}
 800b730:	24000c48 	.word	0x24000c48

0800b734 <sbrk_aligned>:
 800b734:	b570      	push	{r4, r5, r6, lr}
 800b736:	4e0e      	ldr	r6, [pc, #56]	; (800b770 <sbrk_aligned+0x3c>)
 800b738:	460c      	mov	r4, r1
 800b73a:	6831      	ldr	r1, [r6, #0]
 800b73c:	4605      	mov	r5, r0
 800b73e:	b911      	cbnz	r1, 800b746 <sbrk_aligned+0x12>
 800b740:	f000 f88c 	bl	800b85c <_sbrk_r>
 800b744:	6030      	str	r0, [r6, #0]
 800b746:	4621      	mov	r1, r4
 800b748:	4628      	mov	r0, r5
 800b74a:	f000 f887 	bl	800b85c <_sbrk_r>
 800b74e:	1c43      	adds	r3, r0, #1
 800b750:	d00a      	beq.n	800b768 <sbrk_aligned+0x34>
 800b752:	1cc4      	adds	r4, r0, #3
 800b754:	f024 0403 	bic.w	r4, r4, #3
 800b758:	42a0      	cmp	r0, r4
 800b75a:	d007      	beq.n	800b76c <sbrk_aligned+0x38>
 800b75c:	1a21      	subs	r1, r4, r0
 800b75e:	4628      	mov	r0, r5
 800b760:	f000 f87c 	bl	800b85c <_sbrk_r>
 800b764:	3001      	adds	r0, #1
 800b766:	d101      	bne.n	800b76c <sbrk_aligned+0x38>
 800b768:	f04f 34ff 	mov.w	r4, #4294967295
 800b76c:	4620      	mov	r0, r4
 800b76e:	bd70      	pop	{r4, r5, r6, pc}
 800b770:	24000c4c 	.word	0x24000c4c

0800b774 <_malloc_r>:
 800b774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b778:	1ccd      	adds	r5, r1, #3
 800b77a:	f025 0503 	bic.w	r5, r5, #3
 800b77e:	3508      	adds	r5, #8
 800b780:	2d0c      	cmp	r5, #12
 800b782:	bf38      	it	cc
 800b784:	250c      	movcc	r5, #12
 800b786:	2d00      	cmp	r5, #0
 800b788:	4607      	mov	r7, r0
 800b78a:	db01      	blt.n	800b790 <_malloc_r+0x1c>
 800b78c:	42a9      	cmp	r1, r5
 800b78e:	d905      	bls.n	800b79c <_malloc_r+0x28>
 800b790:	230c      	movs	r3, #12
 800b792:	603b      	str	r3, [r7, #0]
 800b794:	2600      	movs	r6, #0
 800b796:	4630      	mov	r0, r6
 800b798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b79c:	4e2e      	ldr	r6, [pc, #184]	; (800b858 <_malloc_r+0xe4>)
 800b79e:	f000 f86d 	bl	800b87c <__malloc_lock>
 800b7a2:	6833      	ldr	r3, [r6, #0]
 800b7a4:	461c      	mov	r4, r3
 800b7a6:	bb34      	cbnz	r4, 800b7f6 <_malloc_r+0x82>
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	f7ff ffc2 	bl	800b734 <sbrk_aligned>
 800b7b0:	1c43      	adds	r3, r0, #1
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	d14d      	bne.n	800b852 <_malloc_r+0xde>
 800b7b6:	6834      	ldr	r4, [r6, #0]
 800b7b8:	4626      	mov	r6, r4
 800b7ba:	2e00      	cmp	r6, #0
 800b7bc:	d140      	bne.n	800b840 <_malloc_r+0xcc>
 800b7be:	6823      	ldr	r3, [r4, #0]
 800b7c0:	4631      	mov	r1, r6
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	eb04 0803 	add.w	r8, r4, r3
 800b7c8:	f000 f848 	bl	800b85c <_sbrk_r>
 800b7cc:	4580      	cmp	r8, r0
 800b7ce:	d13a      	bne.n	800b846 <_malloc_r+0xd2>
 800b7d0:	6821      	ldr	r1, [r4, #0]
 800b7d2:	3503      	adds	r5, #3
 800b7d4:	1a6d      	subs	r5, r5, r1
 800b7d6:	f025 0503 	bic.w	r5, r5, #3
 800b7da:	3508      	adds	r5, #8
 800b7dc:	2d0c      	cmp	r5, #12
 800b7de:	bf38      	it	cc
 800b7e0:	250c      	movcc	r5, #12
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	4638      	mov	r0, r7
 800b7e6:	f7ff ffa5 	bl	800b734 <sbrk_aligned>
 800b7ea:	3001      	adds	r0, #1
 800b7ec:	d02b      	beq.n	800b846 <_malloc_r+0xd2>
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	442b      	add	r3, r5
 800b7f2:	6023      	str	r3, [r4, #0]
 800b7f4:	e00e      	b.n	800b814 <_malloc_r+0xa0>
 800b7f6:	6822      	ldr	r2, [r4, #0]
 800b7f8:	1b52      	subs	r2, r2, r5
 800b7fa:	d41e      	bmi.n	800b83a <_malloc_r+0xc6>
 800b7fc:	2a0b      	cmp	r2, #11
 800b7fe:	d916      	bls.n	800b82e <_malloc_r+0xba>
 800b800:	1961      	adds	r1, r4, r5
 800b802:	42a3      	cmp	r3, r4
 800b804:	6025      	str	r5, [r4, #0]
 800b806:	bf18      	it	ne
 800b808:	6059      	strne	r1, [r3, #4]
 800b80a:	6863      	ldr	r3, [r4, #4]
 800b80c:	bf08      	it	eq
 800b80e:	6031      	streq	r1, [r6, #0]
 800b810:	5162      	str	r2, [r4, r5]
 800b812:	604b      	str	r3, [r1, #4]
 800b814:	4638      	mov	r0, r7
 800b816:	f104 060b 	add.w	r6, r4, #11
 800b81a:	f000 f835 	bl	800b888 <__malloc_unlock>
 800b81e:	f026 0607 	bic.w	r6, r6, #7
 800b822:	1d23      	adds	r3, r4, #4
 800b824:	1af2      	subs	r2, r6, r3
 800b826:	d0b6      	beq.n	800b796 <_malloc_r+0x22>
 800b828:	1b9b      	subs	r3, r3, r6
 800b82a:	50a3      	str	r3, [r4, r2]
 800b82c:	e7b3      	b.n	800b796 <_malloc_r+0x22>
 800b82e:	6862      	ldr	r2, [r4, #4]
 800b830:	42a3      	cmp	r3, r4
 800b832:	bf0c      	ite	eq
 800b834:	6032      	streq	r2, [r6, #0]
 800b836:	605a      	strne	r2, [r3, #4]
 800b838:	e7ec      	b.n	800b814 <_malloc_r+0xa0>
 800b83a:	4623      	mov	r3, r4
 800b83c:	6864      	ldr	r4, [r4, #4]
 800b83e:	e7b2      	b.n	800b7a6 <_malloc_r+0x32>
 800b840:	4634      	mov	r4, r6
 800b842:	6876      	ldr	r6, [r6, #4]
 800b844:	e7b9      	b.n	800b7ba <_malloc_r+0x46>
 800b846:	230c      	movs	r3, #12
 800b848:	603b      	str	r3, [r7, #0]
 800b84a:	4638      	mov	r0, r7
 800b84c:	f000 f81c 	bl	800b888 <__malloc_unlock>
 800b850:	e7a1      	b.n	800b796 <_malloc_r+0x22>
 800b852:	6025      	str	r5, [r4, #0]
 800b854:	e7de      	b.n	800b814 <_malloc_r+0xa0>
 800b856:	bf00      	nop
 800b858:	24000c48 	.word	0x24000c48

0800b85c <_sbrk_r>:
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	4d06      	ldr	r5, [pc, #24]	; (800b878 <_sbrk_r+0x1c>)
 800b860:	2300      	movs	r3, #0
 800b862:	4604      	mov	r4, r0
 800b864:	4608      	mov	r0, r1
 800b866:	602b      	str	r3, [r5, #0]
 800b868:	f7f6 fd7e 	bl	8002368 <_sbrk>
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d102      	bne.n	800b876 <_sbrk_r+0x1a>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	b103      	cbz	r3, 800b876 <_sbrk_r+0x1a>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	24000c50 	.word	0x24000c50

0800b87c <__malloc_lock>:
 800b87c:	4801      	ldr	r0, [pc, #4]	; (800b884 <__malloc_lock+0x8>)
 800b87e:	f000 b809 	b.w	800b894 <__retarget_lock_acquire_recursive>
 800b882:	bf00      	nop
 800b884:	24000c54 	.word	0x24000c54

0800b888 <__malloc_unlock>:
 800b888:	4801      	ldr	r0, [pc, #4]	; (800b890 <__malloc_unlock+0x8>)
 800b88a:	f000 b804 	b.w	800b896 <__retarget_lock_release_recursive>
 800b88e:	bf00      	nop
 800b890:	24000c54 	.word	0x24000c54

0800b894 <__retarget_lock_acquire_recursive>:
 800b894:	4770      	bx	lr

0800b896 <__retarget_lock_release_recursive>:
 800b896:	4770      	bx	lr

0800b898 <floorf>:
 800b898:	ee10 3a10 	vmov	r3, s0
 800b89c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b8a0:	3a7f      	subs	r2, #127	; 0x7f
 800b8a2:	2a16      	cmp	r2, #22
 800b8a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b8a8:	dc2a      	bgt.n	800b900 <floorf+0x68>
 800b8aa:	2a00      	cmp	r2, #0
 800b8ac:	da11      	bge.n	800b8d2 <floorf+0x3a>
 800b8ae:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b910 <floorf+0x78>
 800b8b2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b8b6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8be:	dd05      	ble.n	800b8cc <floorf+0x34>
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	da23      	bge.n	800b90c <floorf+0x74>
 800b8c4:	4a13      	ldr	r2, [pc, #76]	; (800b914 <floorf+0x7c>)
 800b8c6:	2900      	cmp	r1, #0
 800b8c8:	bf18      	it	ne
 800b8ca:	4613      	movne	r3, r2
 800b8cc:	ee00 3a10 	vmov	s0, r3
 800b8d0:	4770      	bx	lr
 800b8d2:	4911      	ldr	r1, [pc, #68]	; (800b918 <floorf+0x80>)
 800b8d4:	4111      	asrs	r1, r2
 800b8d6:	420b      	tst	r3, r1
 800b8d8:	d0fa      	beq.n	800b8d0 <floorf+0x38>
 800b8da:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b910 <floorf+0x78>
 800b8de:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b8e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ea:	ddef      	ble.n	800b8cc <floorf+0x34>
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	bfbe      	ittt	lt
 800b8f0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b8f4:	fa40 f202 	asrlt.w	r2, r0, r2
 800b8f8:	189b      	addlt	r3, r3, r2
 800b8fa:	ea23 0301 	bic.w	r3, r3, r1
 800b8fe:	e7e5      	b.n	800b8cc <floorf+0x34>
 800b900:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b904:	d3e4      	bcc.n	800b8d0 <floorf+0x38>
 800b906:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b90a:	4770      	bx	lr
 800b90c:	2300      	movs	r3, #0
 800b90e:	e7dd      	b.n	800b8cc <floorf+0x34>
 800b910:	7149f2ca 	.word	0x7149f2ca
 800b914:	bf800000 	.word	0xbf800000
 800b918:	007fffff 	.word	0x007fffff

0800b91c <sinf_poly>:
 800b91c:	07cb      	lsls	r3, r1, #31
 800b91e:	d412      	bmi.n	800b946 <sinf_poly+0x2a>
 800b920:	ee21 5b00 	vmul.f64	d5, d1, d0
 800b924:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 800b928:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800b92c:	eea6 7b01 	vfma.f64	d7, d6, d1
 800b930:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 800b934:	ee21 1b05 	vmul.f64	d1, d1, d5
 800b938:	eea6 0b05 	vfma.f64	d0, d6, d5
 800b93c:	eea7 0b01 	vfma.f64	d0, d7, d1
 800b940:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b944:	4770      	bx	lr
 800b946:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 800b94a:	ee21 5b01 	vmul.f64	d5, d1, d1
 800b94e:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800b952:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800b956:	eea1 7b06 	vfma.f64	d7, d1, d6
 800b95a:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 800b95e:	eea1 0b06 	vfma.f64	d0, d1, d6
 800b962:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 800b966:	ee21 1b05 	vmul.f64	d1, d1, d5
 800b96a:	eea5 0b06 	vfma.f64	d0, d5, d6
 800b96e:	e7e5      	b.n	800b93c <sinf_poly+0x20>

0800b970 <sinf>:
 800b970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b972:	ee10 4a10 	vmov	r4, s0
 800b976:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800b97a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800b97e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800b982:	eef0 7a40 	vmov.f32	s15, s0
 800b986:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800b98a:	d218      	bcs.n	800b9be <sinf+0x4e>
 800b98c:	ee26 1b06 	vmul.f64	d1, d6, d6
 800b990:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800b994:	d20a      	bcs.n	800b9ac <sinf+0x3c>
 800b996:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800b99a:	d103      	bne.n	800b9a4 <sinf+0x34>
 800b99c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800b9a0:	ed8d 1a01 	vstr	s2, [sp, #4]
 800b9a4:	eeb0 0a67 	vmov.f32	s0, s15
 800b9a8:	b003      	add	sp, #12
 800b9aa:	bd30      	pop	{r4, r5, pc}
 800b9ac:	483a      	ldr	r0, [pc, #232]	; (800ba98 <sinf+0x128>)
 800b9ae:	eeb0 0b46 	vmov.f64	d0, d6
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	b003      	add	sp, #12
 800b9b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9ba:	f7ff bfaf 	b.w	800b91c <sinf_poly>
 800b9be:	f240 422e 	movw	r2, #1070	; 0x42e
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d824      	bhi.n	800ba10 <sinf+0xa0>
 800b9c6:	4b34      	ldr	r3, [pc, #208]	; (800ba98 <sinf+0x128>)
 800b9c8:	ed93 7b08 	vldr	d7, [r3, #32]
 800b9cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b9d0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b9d4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800b9d8:	ee17 1a90 	vmov	r1, s15
 800b9dc:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800b9e0:	1609      	asrs	r1, r1, #24
 800b9e2:	ee07 1a90 	vmov	s15, r1
 800b9e6:	f001 0203 	and.w	r2, r1, #3
 800b9ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b9ee:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800b9f2:	ed92 0b00 	vldr	d0, [r2]
 800b9f6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800b9fa:	f011 0f02 	tst.w	r1, #2
 800b9fe:	eea5 6b47 	vfms.f64	d6, d5, d7
 800ba02:	bf08      	it	eq
 800ba04:	4618      	moveq	r0, r3
 800ba06:	ee26 1b06 	vmul.f64	d1, d6, d6
 800ba0a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ba0e:	e7d1      	b.n	800b9b4 <sinf+0x44>
 800ba10:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800ba14:	d237      	bcs.n	800ba86 <sinf+0x116>
 800ba16:	4a21      	ldr	r2, [pc, #132]	; (800ba9c <sinf+0x12c>)
 800ba18:	f3c4 6183 	ubfx	r1, r4, #26, #4
 800ba1c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800ba20:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800ba24:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800ba28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ba2c:	4083      	lsls	r3, r0
 800ba2e:	6a28      	ldr	r0, [r5, #32]
 800ba30:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ba34:	fba3 1000 	umull	r1, r0, r3, r0
 800ba38:	6929      	ldr	r1, [r5, #16]
 800ba3a:	435a      	muls	r2, r3
 800ba3c:	fbe3 0201 	umlal	r0, r2, r3, r1
 800ba40:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 800ba44:	0f8d      	lsrs	r5, r1, #30
 800ba46:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800ba4a:	1a51      	subs	r1, r2, r1
 800ba4c:	f7f4 fdde 	bl	800060c <__aeabi_l2d>
 800ba50:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800ba54:	4b10      	ldr	r3, [pc, #64]	; (800ba98 <sinf+0x128>)
 800ba56:	f004 0203 	and.w	r2, r4, #3
 800ba5a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ba5e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800ba90 <sinf+0x120>
 800ba62:	ed92 0b00 	vldr	d0, [r2]
 800ba66:	ec41 0b16 	vmov	d6, r0, r1
 800ba6a:	f014 0f02 	tst.w	r4, #2
 800ba6e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ba72:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800ba76:	4629      	mov	r1, r5
 800ba78:	bf08      	it	eq
 800ba7a:	4618      	moveq	r0, r3
 800ba7c:	ee27 1b07 	vmul.f64	d1, d7, d7
 800ba80:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ba84:	e796      	b.n	800b9b4 <sinf+0x44>
 800ba86:	b003      	add	sp, #12
 800ba88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba8c:	f000 b813 	b.w	800bab6 <__math_invalidf>
 800ba90:	54442d18 	.word	0x54442d18
 800ba94:	3c1921fb 	.word	0x3c1921fb
 800ba98:	0800bb90 	.word	0x0800bb90
 800ba9c:	0800bb30 	.word	0x0800bb30

0800baa0 <with_errnof>:
 800baa0:	b513      	push	{r0, r1, r4, lr}
 800baa2:	4604      	mov	r4, r0
 800baa4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800baa8:	f7ff fdb6 	bl	800b618 <__errno>
 800baac:	ed9d 0a01 	vldr	s0, [sp, #4]
 800bab0:	6004      	str	r4, [r0, #0]
 800bab2:	b002      	add	sp, #8
 800bab4:	bd10      	pop	{r4, pc}

0800bab6 <__math_invalidf>:
 800bab6:	eef0 7a40 	vmov.f32	s15, s0
 800baba:	ee30 7a40 	vsub.f32	s14, s0, s0
 800babe:	eef4 7a67 	vcmp.f32	s15, s15
 800bac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac6:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800baca:	d602      	bvs.n	800bad2 <__math_invalidf+0x1c>
 800bacc:	2021      	movs	r0, #33	; 0x21
 800bace:	f7ff bfe7 	b.w	800baa0 <with_errnof>
 800bad2:	4770      	bx	lr

0800bad4 <_init>:
 800bad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad6:	bf00      	nop
 800bad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bada:	bc08      	pop	{r3}
 800badc:	469e      	mov	lr, r3
 800bade:	4770      	bx	lr

0800bae0 <_fini>:
 800bae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae2:	bf00      	nop
 800bae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bae6:	bc08      	pop	{r3}
 800bae8:	469e      	mov	lr, r3
 800baea:	4770      	bx	lr
