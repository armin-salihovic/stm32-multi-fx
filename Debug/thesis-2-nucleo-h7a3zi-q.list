
thesis-2-nucleo-h7a3zi-q.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ceac  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  0800d160  0800d160  0001d160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d350  0800d350  0001d350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d358  0800d358  0001d358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d35c  0800d35c  0001d35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800d360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000cc0  24000078  0800d3d8  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000d38  0800d3d8  00020d38  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024f3b  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000047ca  00000000  00000000  00044fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b78  00000000  00000000  000497b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001980  00000000  00000000  0004b328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000357d6  00000000  00000000  0004cca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00027538  00000000  00000000  0008247e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00156b7a  00000000  00000000  000a99b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00200530  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007770  00000000  00000000  00200580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800d144 	.word	0x0800d144

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800d144 	.word	0x0800d144

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b974 	b.w	8000968 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	4604      	mov	r4, r0
 80006a0:	468e      	mov	lr, r1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d14d      	bne.n	8000742 <__udivmoddi4+0xaa>
 80006a6:	428a      	cmp	r2, r1
 80006a8:	4694      	mov	ip, r2
 80006aa:	d969      	bls.n	8000780 <__udivmoddi4+0xe8>
 80006ac:	fab2 f282 	clz	r2, r2
 80006b0:	b152      	cbz	r2, 80006c8 <__udivmoddi4+0x30>
 80006b2:	fa01 f302 	lsl.w	r3, r1, r2
 80006b6:	f1c2 0120 	rsb	r1, r2, #32
 80006ba:	fa20 f101 	lsr.w	r1, r0, r1
 80006be:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c2:	ea41 0e03 	orr.w	lr, r1, r3
 80006c6:	4094      	lsls	r4, r2
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	0c21      	lsrs	r1, r4, #16
 80006ce:	fbbe f6f8 	udiv	r6, lr, r8
 80006d2:	fa1f f78c 	uxth.w	r7, ip
 80006d6:	fb08 e316 	mls	r3, r8, r6, lr
 80006da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006de:	fb06 f107 	mul.w	r1, r6, r7
 80006e2:	4299      	cmp	r1, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x64>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ee:	f080 811f 	bcs.w	8000930 <__udivmoddi4+0x298>
 80006f2:	4299      	cmp	r1, r3
 80006f4:	f240 811c 	bls.w	8000930 <__udivmoddi4+0x298>
 80006f8:	3e02      	subs	r6, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a5b      	subs	r3, r3, r1
 80006fe:	b2a4      	uxth	r4, r4
 8000700:	fbb3 f0f8 	udiv	r0, r3, r8
 8000704:	fb08 3310 	mls	r3, r8, r0, r3
 8000708:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800070c:	fb00 f707 	mul.w	r7, r0, r7
 8000710:	42a7      	cmp	r7, r4
 8000712:	d90a      	bls.n	800072a <__udivmoddi4+0x92>
 8000714:	eb1c 0404 	adds.w	r4, ip, r4
 8000718:	f100 33ff 	add.w	r3, r0, #4294967295
 800071c:	f080 810a 	bcs.w	8000934 <__udivmoddi4+0x29c>
 8000720:	42a7      	cmp	r7, r4
 8000722:	f240 8107 	bls.w	8000934 <__udivmoddi4+0x29c>
 8000726:	4464      	add	r4, ip
 8000728:	3802      	subs	r0, #2
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	1be4      	subs	r4, r4, r7
 8000730:	2600      	movs	r6, #0
 8000732:	b11d      	cbz	r5, 800073c <__udivmoddi4+0xa4>
 8000734:	40d4      	lsrs	r4, r2
 8000736:	2300      	movs	r3, #0
 8000738:	e9c5 4300 	strd	r4, r3, [r5]
 800073c:	4631      	mov	r1, r6
 800073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000742:	428b      	cmp	r3, r1
 8000744:	d909      	bls.n	800075a <__udivmoddi4+0xc2>
 8000746:	2d00      	cmp	r5, #0
 8000748:	f000 80ef 	beq.w	800092a <__udivmoddi4+0x292>
 800074c:	2600      	movs	r6, #0
 800074e:	e9c5 0100 	strd	r0, r1, [r5]
 8000752:	4630      	mov	r0, r6
 8000754:	4631      	mov	r1, r6
 8000756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075a:	fab3 f683 	clz	r6, r3
 800075e:	2e00      	cmp	r6, #0
 8000760:	d14a      	bne.n	80007f8 <__udivmoddi4+0x160>
 8000762:	428b      	cmp	r3, r1
 8000764:	d302      	bcc.n	800076c <__udivmoddi4+0xd4>
 8000766:	4282      	cmp	r2, r0
 8000768:	f200 80f9 	bhi.w	800095e <__udivmoddi4+0x2c6>
 800076c:	1a84      	subs	r4, r0, r2
 800076e:	eb61 0303 	sbc.w	r3, r1, r3
 8000772:	2001      	movs	r0, #1
 8000774:	469e      	mov	lr, r3
 8000776:	2d00      	cmp	r5, #0
 8000778:	d0e0      	beq.n	800073c <__udivmoddi4+0xa4>
 800077a:	e9c5 4e00 	strd	r4, lr, [r5]
 800077e:	e7dd      	b.n	800073c <__udivmoddi4+0xa4>
 8000780:	b902      	cbnz	r2, 8000784 <__udivmoddi4+0xec>
 8000782:	deff      	udf	#255	; 0xff
 8000784:	fab2 f282 	clz	r2, r2
 8000788:	2a00      	cmp	r2, #0
 800078a:	f040 8092 	bne.w	80008b2 <__udivmoddi4+0x21a>
 800078e:	eba1 010c 	sub.w	r1, r1, ip
 8000792:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000796:	fa1f fe8c 	uxth.w	lr, ip
 800079a:	2601      	movs	r6, #1
 800079c:	0c20      	lsrs	r0, r4, #16
 800079e:	fbb1 f3f7 	udiv	r3, r1, r7
 80007a2:	fb07 1113 	mls	r1, r7, r3, r1
 80007a6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007aa:	fb0e f003 	mul.w	r0, lr, r3
 80007ae:	4288      	cmp	r0, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0x12c>
 80007b2:	eb1c 0101 	adds.w	r1, ip, r1
 80007b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x12a>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f200 80cb 	bhi.w	8000958 <__udivmoddi4+0x2c0>
 80007c2:	4643      	mov	r3, r8
 80007c4:	1a09      	subs	r1, r1, r0
 80007c6:	b2a4      	uxth	r4, r4
 80007c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007cc:	fb07 1110 	mls	r1, r7, r0, r1
 80007d0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007d4:	fb0e fe00 	mul.w	lr, lr, r0
 80007d8:	45a6      	cmp	lr, r4
 80007da:	d908      	bls.n	80007ee <__udivmoddi4+0x156>
 80007dc:	eb1c 0404 	adds.w	r4, ip, r4
 80007e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007e4:	d202      	bcs.n	80007ec <__udivmoddi4+0x154>
 80007e6:	45a6      	cmp	lr, r4
 80007e8:	f200 80bb 	bhi.w	8000962 <__udivmoddi4+0x2ca>
 80007ec:	4608      	mov	r0, r1
 80007ee:	eba4 040e 	sub.w	r4, r4, lr
 80007f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007f6:	e79c      	b.n	8000732 <__udivmoddi4+0x9a>
 80007f8:	f1c6 0720 	rsb	r7, r6, #32
 80007fc:	40b3      	lsls	r3, r6
 80007fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000802:	ea4c 0c03 	orr.w	ip, ip, r3
 8000806:	fa20 f407 	lsr.w	r4, r0, r7
 800080a:	fa01 f306 	lsl.w	r3, r1, r6
 800080e:	431c      	orrs	r4, r3
 8000810:	40f9      	lsrs	r1, r7
 8000812:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000816:	fa00 f306 	lsl.w	r3, r0, r6
 800081a:	fbb1 f8f9 	udiv	r8, r1, r9
 800081e:	0c20      	lsrs	r0, r4, #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fb09 1118 	mls	r1, r9, r8, r1
 8000828:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800082c:	fb08 f00e 	mul.w	r0, r8, lr
 8000830:	4288      	cmp	r0, r1
 8000832:	fa02 f206 	lsl.w	r2, r2, r6
 8000836:	d90b      	bls.n	8000850 <__udivmoddi4+0x1b8>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000840:	f080 8088 	bcs.w	8000954 <__udivmoddi4+0x2bc>
 8000844:	4288      	cmp	r0, r1
 8000846:	f240 8085 	bls.w	8000954 <__udivmoddi4+0x2bc>
 800084a:	f1a8 0802 	sub.w	r8, r8, #2
 800084e:	4461      	add	r1, ip
 8000850:	1a09      	subs	r1, r1, r0
 8000852:	b2a4      	uxth	r4, r4
 8000854:	fbb1 f0f9 	udiv	r0, r1, r9
 8000858:	fb09 1110 	mls	r1, r9, r0, r1
 800085c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000860:	fb00 fe0e 	mul.w	lr, r0, lr
 8000864:	458e      	cmp	lr, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x1e2>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000870:	d26c      	bcs.n	800094c <__udivmoddi4+0x2b4>
 8000872:	458e      	cmp	lr, r1
 8000874:	d96a      	bls.n	800094c <__udivmoddi4+0x2b4>
 8000876:	3802      	subs	r0, #2
 8000878:	4461      	add	r1, ip
 800087a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800087e:	fba0 9402 	umull	r9, r4, r0, r2
 8000882:	eba1 010e 	sub.w	r1, r1, lr
 8000886:	42a1      	cmp	r1, r4
 8000888:	46c8      	mov	r8, r9
 800088a:	46a6      	mov	lr, r4
 800088c:	d356      	bcc.n	800093c <__udivmoddi4+0x2a4>
 800088e:	d053      	beq.n	8000938 <__udivmoddi4+0x2a0>
 8000890:	b15d      	cbz	r5, 80008aa <__udivmoddi4+0x212>
 8000892:	ebb3 0208 	subs.w	r2, r3, r8
 8000896:	eb61 010e 	sbc.w	r1, r1, lr
 800089a:	fa01 f707 	lsl.w	r7, r1, r7
 800089e:	fa22 f306 	lsr.w	r3, r2, r6
 80008a2:	40f1      	lsrs	r1, r6
 80008a4:	431f      	orrs	r7, r3
 80008a6:	e9c5 7100 	strd	r7, r1, [r5]
 80008aa:	2600      	movs	r6, #0
 80008ac:	4631      	mov	r1, r6
 80008ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b2:	f1c2 0320 	rsb	r3, r2, #32
 80008b6:	40d8      	lsrs	r0, r3
 80008b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008bc:	fa21 f303 	lsr.w	r3, r1, r3
 80008c0:	4091      	lsls	r1, r2
 80008c2:	4301      	orrs	r1, r0
 80008c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c8:	fa1f fe8c 	uxth.w	lr, ip
 80008cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80008d0:	fb07 3610 	mls	r6, r7, r0, r3
 80008d4:	0c0b      	lsrs	r3, r1, #16
 80008d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008da:	fb00 f60e 	mul.w	r6, r0, lr
 80008de:	429e      	cmp	r6, r3
 80008e0:	fa04 f402 	lsl.w	r4, r4, r2
 80008e4:	d908      	bls.n	80008f8 <__udivmoddi4+0x260>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ee:	d22f      	bcs.n	8000950 <__udivmoddi4+0x2b8>
 80008f0:	429e      	cmp	r6, r3
 80008f2:	d92d      	bls.n	8000950 <__udivmoddi4+0x2b8>
 80008f4:	3802      	subs	r0, #2
 80008f6:	4463      	add	r3, ip
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	b289      	uxth	r1, r1
 80008fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000900:	fb07 3316 	mls	r3, r7, r6, r3
 8000904:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000908:	fb06 f30e 	mul.w	r3, r6, lr
 800090c:	428b      	cmp	r3, r1
 800090e:	d908      	bls.n	8000922 <__udivmoddi4+0x28a>
 8000910:	eb1c 0101 	adds.w	r1, ip, r1
 8000914:	f106 38ff 	add.w	r8, r6, #4294967295
 8000918:	d216      	bcs.n	8000948 <__udivmoddi4+0x2b0>
 800091a:	428b      	cmp	r3, r1
 800091c:	d914      	bls.n	8000948 <__udivmoddi4+0x2b0>
 800091e:	3e02      	subs	r6, #2
 8000920:	4461      	add	r1, ip
 8000922:	1ac9      	subs	r1, r1, r3
 8000924:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000928:	e738      	b.n	800079c <__udivmoddi4+0x104>
 800092a:	462e      	mov	r6, r5
 800092c:	4628      	mov	r0, r5
 800092e:	e705      	b.n	800073c <__udivmoddi4+0xa4>
 8000930:	4606      	mov	r6, r0
 8000932:	e6e3      	b.n	80006fc <__udivmoddi4+0x64>
 8000934:	4618      	mov	r0, r3
 8000936:	e6f8      	b.n	800072a <__udivmoddi4+0x92>
 8000938:	454b      	cmp	r3, r9
 800093a:	d2a9      	bcs.n	8000890 <__udivmoddi4+0x1f8>
 800093c:	ebb9 0802 	subs.w	r8, r9, r2
 8000940:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000944:	3801      	subs	r0, #1
 8000946:	e7a3      	b.n	8000890 <__udivmoddi4+0x1f8>
 8000948:	4646      	mov	r6, r8
 800094a:	e7ea      	b.n	8000922 <__udivmoddi4+0x28a>
 800094c:	4620      	mov	r0, r4
 800094e:	e794      	b.n	800087a <__udivmoddi4+0x1e2>
 8000950:	4640      	mov	r0, r8
 8000952:	e7d1      	b.n	80008f8 <__udivmoddi4+0x260>
 8000954:	46d0      	mov	r8, sl
 8000956:	e77b      	b.n	8000850 <__udivmoddi4+0x1b8>
 8000958:	3b02      	subs	r3, #2
 800095a:	4461      	add	r1, ip
 800095c:	e732      	b.n	80007c4 <__udivmoddi4+0x12c>
 800095e:	4630      	mov	r0, r6
 8000960:	e709      	b.n	8000776 <__udivmoddi4+0xde>
 8000962:	4464      	add	r4, ip
 8000964:	3802      	subs	r0, #2
 8000966:	e742      	b.n	80007ee <__udivmoddi4+0x156>

08000968 <__aeabi_idiv0>:
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <Chorus_Init>:
#include <stdlib.h>
#include <math.h>

ChorusEffect* chorus = NULL;

void Chorus_Init(int sampleRate) {
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	if(chorus != NULL) return;
 8000974:	4b5a      	ldr	r3, [pc, #360]	; (8000ae0 <Chorus_Init+0x174>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	f040 80ac 	bne.w	8000ad6 <Chorus_Init+0x16a>

	chorus = malloc(sizeof(ChorusEffect));
 800097e:	2054      	movs	r0, #84	; 0x54
 8000980:	f00c f9ac 	bl	800ccdc <malloc>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	4b55      	ldr	r3, [pc, #340]	; (8000ae0 <Chorus_Init+0x174>)
 800098a:	601a      	str	r2, [r3, #0]
	chorus->phase = 1.0f;
 800098c:	4b54      	ldr	r3, [pc, #336]	; (8000ae0 <Chorus_Init+0x174>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000994:	651a      	str	r2, [r3, #80]	; 0x50
	chorus->rate = 1.0f;
 8000996:	4b52      	ldr	r3, [pc, #328]	; (8000ae0 <Chorus_Init+0x174>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800099e:	611a      	str	r2, [r3, #16]
	chorus->sampleRate = sampleRate;
 80009a0:	4b4f      	ldr	r3, [pc, #316]	; (8000ae0 <Chorus_Init+0x174>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	ee07 2a90 	vmov	s15, r2
 80009aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ae:	edc3 7a06 	vstr	s15, [r3, #24]
	chorus->delayTime = 7.0f;
 80009b2:	4b4b      	ldr	r3, [pc, #300]	; (8000ae0 <Chorus_Init+0x174>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a4b      	ldr	r2, [pc, #300]	; (8000ae4 <Chorus_Init+0x178>)
 80009b8:	61da      	str	r2, [r3, #28]
	chorus->z1 = 0.0f;
 80009ba:	4b49      	ldr	r3, [pc, #292]	; (8000ae0 <Chorus_Init+0x174>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f04f 0200 	mov.w	r2, #0
 80009c2:	639a      	str	r2, [r3, #56]	; 0x38
	chorus->sign = 0;
 80009c4:	4b46      	ldr	r3, [pc, #280]	; (8000ae0 <Chorus_Init+0x174>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f04f 0200 	mov.w	r2, #0
 80009cc:	641a      	str	r2, [r3, #64]	; 0x40
	chorus->lfoPhase = chorus->phase * 2.0f - 1.0f;
 80009ce:	4b44      	ldr	r3, [pc, #272]	; (8000ae0 <Chorus_Init+0x174>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80009d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80009da:	4b41      	ldr	r3, [pc, #260]	; (8000ae0 <Chorus_Init+0x174>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009e6:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	chorus->lfoStepSize = (4.0f * chorus->rate / chorus->sampleRate);
 80009ea:	4b3d      	ldr	r3, [pc, #244]	; (8000ae0 <Chorus_Init+0x174>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80009f2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80009f6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80009fa:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <Chorus_Init+0x174>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	ed93 7a06 	vldr	s14, [r3, #24]
 8000a02:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <Chorus_Init+0x174>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a0a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	chorus->lfoSign = 1.0f;
 8000a0e:	4b34      	ldr	r3, [pc, #208]	; (8000ae0 <Chorus_Init+0x174>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a16:	64da      	str	r2, [r3, #76]	; 0x4c

	chorus->delayLineLength = ((int)floorf(chorus->delayTime * sampleRate * 0.001f) * 2);
 8000a18:	4b31      	ldr	r3, [pc, #196]	; (8000ae0 <Chorus_Init+0x174>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	ed93 7a07 	vldr	s14, [r3, #28]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	ee07 3a90 	vmov	s15, r3
 8000a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a2e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000ae8 <Chorus_Init+0x17c>
 8000a32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a36:	eeb0 0a67 	vmov.f32	s0, s15
 8000a3a:	f00c fa65 	bl	800cf08 <floorf>
 8000a3e:	eef0 7a40 	vmov.f32	s15, s0
 8000a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a46:	ee17 2a90 	vmov	r2, s15
 8000a4a:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <Chorus_Init+0x174>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	0052      	lsls	r2, r2, #1
 8000a50:	60da      	str	r2, [r3, #12]
	chorus->delayLineStart = malloc(chorus->delayLineLength * sizeof(float));
 8000a52:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <Chorus_Init+0x174>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <Chorus_Init+0x174>)
 8000a5c:	6814      	ldr	r4, [r2, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00c f93c 	bl	800ccdc <malloc>
 8000a64:	4603      	mov	r3, r0
 8000a66:	6023      	str	r3, [r4, #0]

	chorus->delayLineEnd = chorus->delayLineStart + chorus->delayLineLength;
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <Chorus_Init+0x174>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6819      	ldr	r1, [r3, #0]
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <Chorus_Init+0x174>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	009a      	lsls	r2, r3, #2
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <Chorus_Init+0x174>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	440a      	add	r2, r1
 8000a7c:	605a      	str	r2, [r3, #4]
	chorus->writePtr = chorus->delayLineStart;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <Chorus_Init+0x174>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <Chorus_Init+0x174>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	6812      	ldr	r2, [r2, #0]
 8000a88:	609a      	str	r2, [r3, #8]

	do {
		*chorus->writePtr = 0.0f;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <Chorus_Init+0x174>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f04f 0200 	mov.w	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
	}
	while (++chorus->writePtr < chorus->delayLineEnd);
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <Chorus_Init+0x174>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	689a      	ldr	r2, [r3, #8]
 8000a9c:	3204      	adds	r2, #4
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <Chorus_Init+0x174>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d3ee      	bcc.n	8000a8a <Chorus_Init+0x11e>

	chorus->writePtr = chorus->delayLineStart + chorus->delayLineLength - 1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <Chorus_Init+0x174>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	6819      	ldr	r1, [r3, #0]
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <Chorus_Init+0x174>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000abe:	4413      	add	r3, r2
 8000ac0:	009a      	lsls	r2, r3, #2
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <Chorus_Init+0x174>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	440a      	add	r2, r1
 8000ac8:	609a      	str	r2, [r3, #8]
	chorus->delayLineOutput = 0.0f;
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <Chorus_Init+0x174>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f04f 0200 	mov.w	r2, #0
 8000ad2:	615a      	str	r2, [r3, #20]
 8000ad4:	e000      	b.n	8000ad8 <Chorus_Init+0x16c>
	if(chorus != NULL) return;
 8000ad6:	bf00      	nop
}
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	24000094 	.word	0x24000094
 8000ae4:	40e00000 	.word	0x40e00000
 8000ae8:	3a83126f 	.word	0x3a83126f

08000aec <Chorus_LFO>:

float Chorus_LFO() {
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	if (chorus->lfoPhase >= 1.0f)
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <Chorus_LFO+0x84>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b04:	db04      	blt.n	8000b10 <Chorus_LFO+0x24>
	{
		chorus->lfoSign = -1.0f;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <Chorus_LFO+0x84>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a1a      	ldr	r2, [pc, #104]	; (8000b74 <Chorus_LFO+0x88>)
 8000b0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b0e:	e00f      	b.n	8000b30 <Chorus_LFO+0x44>
	}
	else if (chorus->lfoPhase <= -1.0f)
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <Chorus_LFO+0x84>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000b18:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b24:	d804      	bhi.n	8000b30 <Chorus_LFO+0x44>
	{
		chorus->lfoSign = +1.0f;
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <Chorus_LFO+0x84>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b2e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	chorus->lfoPhase += chorus->lfoStepSize * chorus->lfoSign;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <Chorus_LFO+0x84>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <Chorus_LFO+0x84>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <Chorus_LFO+0x84>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <Chorus_LFO+0x84>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b54:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	return chorus->lfoPhase;
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <Chorus_LFO+0x84>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	ee07 3a90 	vmov	s15, r3
}
 8000b62:	eeb0 0a67 	vmov.f32	s0, s15
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	24000094 	.word	0x24000094
 8000b74:	bf800000 	.word	0xbf800000

08000b78 <Chorus_Process>:

float Chorus_Process(float sample) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	ed87 0a01 	vstr	s0, [r7, #4]
	chorus->offset = (Chorus_LFO() * 0.3f + 0.4f) * chorus->delayTime * chorus->sampleRate * 0.001f;
 8000b82:	f7ff ffb3 	bl	8000aec <Chorus_LFO>
 8000b86:	eef0 7a40 	vmov.f32	s15, s0
 8000b8a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8000d0c <Chorus_Process+0x194>
 8000b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b92:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8000d10 <Chorus_Process+0x198>
 8000b96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000b9a:	4b5e      	ldr	r3, [pc, #376]	; (8000d14 <Chorus_Process+0x19c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ba6:	4b5b      	ldr	r3, [pc, #364]	; (8000d14 <Chorus_Process+0x19c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	edd3 7a06 	vldr	s15, [r3, #24]
 8000bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bb2:	4b58      	ldr	r3, [pc, #352]	; (8000d14 <Chorus_Process+0x19c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8000d18 <Chorus_Process+0x1a0>
 8000bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bbe:	edc3 7a08 	vstr	s15, [r3, #32]
	int offset = (int)floorf(chorus->offset);
 8000bc2:	4b54      	ldr	r3, [pc, #336]	; (8000d14 <Chorus_Process+0x19c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	edd3 7a08 	vldr	s15, [r3, #32]
 8000bca:	eeb0 0a67 	vmov.f32	s0, s15
 8000bce:	f00c f99b 	bl	800cf08 <floorf>
 8000bd2:	eef0 7a40 	vmov.f32	s15, s0
 8000bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bda:	ee17 3a90 	vmov	r3, s15
 8000bde:	60fb      	str	r3, [r7, #12]

	chorus->ptr = chorus->writePtr - offset;
 8000be0:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <Chorus_Process+0x19c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6899      	ldr	r1, [r3, #8]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	425a      	negs	r2, r3
 8000bec:	4b49      	ldr	r3, [pc, #292]	; (8000d14 <Chorus_Process+0x19c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	440a      	add	r2, r1
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c

	if (chorus->ptr < chorus->delayLineStart)
 8000bf4:	4b47      	ldr	r3, [pc, #284]	; (8000d14 <Chorus_Process+0x19c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bfa:	4b46      	ldr	r3, [pc, #280]	; (8000d14 <Chorus_Process+0x19c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d20a      	bcs.n	8000c1a <Chorus_Process+0xa2>
		chorus->ptr += chorus->delayLineLength;
 8000c04:	4b43      	ldr	r3, [pc, #268]	; (8000d14 <Chorus_Process+0x19c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c0a:	4b42      	ldr	r3, [pc, #264]	; (8000d14 <Chorus_Process+0x19c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	009a      	lsls	r2, r3, #2
 8000c12:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <Chorus_Process+0x19c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	440a      	add	r2, r1
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c

	chorus->ptr2 = chorus->ptr - 1;
 8000c1a:	4b3e      	ldr	r3, [pc, #248]	; (8000d14 <Chorus_Process+0x19c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c20:	4b3c      	ldr	r3, [pc, #240]	; (8000d14 <Chorus_Process+0x19c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3a04      	subs	r2, #4
 8000c26:	631a      	str	r2, [r3, #48]	; 0x30
	if (chorus->ptr2 < chorus->delayLineStart)
 8000c28:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <Chorus_Process+0x19c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c2e:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <Chorus_Process+0x19c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d20a      	bcs.n	8000c4e <Chorus_Process+0xd6>
		chorus->ptr2 += chorus->delayLineLength;
 8000c38:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <Chorus_Process+0x19c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c3e:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <Chorus_Process+0x19c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	009a      	lsls	r2, r3, #2
 8000c46:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <Chorus_Process+0x19c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	440a      	add	r2, r1
 8000c4c:	631a      	str	r2, [r3, #48]	; 0x30

	chorus->frac = chorus->offset - offset;
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <Chorus_Process+0x19c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	ed93 7a08 	vldr	s14, [r3, #32]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c60:	4b2c      	ldr	r3, [pc, #176]	; (8000d14 <Chorus_Process+0x19c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c68:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	chorus->delayLineOutput = *chorus->ptr2 + *chorus->ptr * (1 - chorus->frac) - (1 - chorus->frac) * chorus->z1 ;
 8000c6c:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <Chorus_Process+0x19c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	ed93 7a00 	vldr	s14, [r3]
 8000c76:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <Chorus_Process+0x19c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7c:	edd3 6a00 	vldr	s13, [r3]
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <Chorus_Process+0x19c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000c88:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000c8c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <Chorus_Process+0x19c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000ca0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000ca4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <Chorus_Process+0x19c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8000cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <Chorus_Process+0x19c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cbc:	edc3 7a05 	vstr	s15, [r3, #20]

	chorus->z1 = chorus->delayLineOutput;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <Chorus_Process+0x19c>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <Chorus_Process+0x19c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	6952      	ldr	r2, [r2, #20]
 8000cca:	639a      	str	r2, [r3, #56]	; 0x38

	*chorus->writePtr = sample;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <Chorus_Process+0x19c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	601a      	str	r2, [r3, #0]

	if (++chorus->writePtr >= chorus->delayLineEnd) {
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <Chorus_Process+0x19c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	3204      	adds	r2, #4
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <Chorus_Process+0x19c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d305      	bcc.n	8000cf8 <Chorus_Process+0x180>
		chorus->writePtr = chorus->delayLineStart;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <Chorus_Process+0x19c>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <Chorus_Process+0x19c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6812      	ldr	r2, [r2, #0]
 8000cf6:	609a      	str	r2, [r3, #8]
	}
	return chorus->delayLineOutput;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <Chorus_Process+0x19c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	ee07 3a90 	vmov	s15, r3
}
 8000d02:	eeb0 0a67 	vmov.f32	s0, s15
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	3e99999a 	.word	0x3e99999a
 8000d10:	3ecccccd 	.word	0x3ecccccd
 8000d14:	24000094 	.word	0x24000094
 8000d18:	3a83126f 	.word	0x3a83126f
 8000d1c:	00000000 	.word	0x00000000

08000d20 <Chorus_Set_Params>:

void Chorus_Set_Params(float rate) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	ed87 0a01 	vstr	s0, [r7, #4]
	if(rate - 0.1 > chorus->rate - 0.01  || rate + 0.1 < chorus->rate + 0.01) {
 8000d2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d32:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000dc0 <Chorus_Set_Params+0xa0>
 8000d36:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <Chorus_Set_Params+0xb0>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d42:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d46:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8000dc8 <Chorus_Set_Params+0xa8>
 8000d4a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8000d4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d56:	dc17      	bgt.n	8000d88 <Chorus_Set_Params+0x68>
 8000d58:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d60:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000dc0 <Chorus_Set_Params+0xa0>
 8000d64:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <Chorus_Set_Params+0xb0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d74:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8000dc8 <Chorus_Set_Params+0xa8>
 8000d78:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000d7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d84:	d400      	bmi.n	8000d88 <Chorus_Set_Params+0x68>
		chorus->rate = rate;
		chorus->lfoStepSize = (4.0f * chorus->rate / chorus->sampleRate);
	}
}
 8000d86:	e015      	b.n	8000db4 <Chorus_Set_Params+0x94>
		chorus->rate = rate;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <Chorus_Set_Params+0xb0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	611a      	str	r2, [r3, #16]
		chorus->lfoStepSize = (4.0f * chorus->rate / chorus->sampleRate);
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <Chorus_Set_Params+0xb0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d98:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000d9c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <Chorus_Set_Params+0xb0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	ed93 7a06 	vldr	s14, [r3, #24]
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <Chorus_Set_Params+0xb0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000db0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	9999999a 	.word	0x9999999a
 8000dc4:	3fb99999 	.word	0x3fb99999
 8000dc8:	47ae147b 	.word	0x47ae147b
 8000dcc:	3f847ae1 	.word	0x3f847ae1
 8000dd0:	24000094 	.word	0x24000094

08000dd4 <Chorus_Free>:

void Chorus_Free() {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	if(chorus != NULL) {
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <Chorus_Free+0x2c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d00d      	beq.n	8000dfc <Chorus_Free+0x28>
		free(chorus->delayLineStart);
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <Chorus_Free+0x2c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f00b ff80 	bl	800ccec <free>
		free(chorus);
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <Chorus_Free+0x2c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00b ff7b 	bl	800ccec <free>
		chorus = NULL;
 8000df6:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <Chorus_Free+0x2c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
	}
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	24000094 	.word	0x24000094

08000e04 <Delay_Init>:
// the size of the entire buffer for both adc and dac
#define BUFFER_SIZE 256

DelayEffect* delay = NULL;

void Delay_Init(int sampleRate) {
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	if(delay != NULL) return;
 8000e0c:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <Delay_Init+0xb0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d14b      	bne.n	8000eac <Delay_Init+0xa8>

	delay = malloc(sizeof(DelayEffect));
 8000e14:	2024      	movs	r0, #36	; 0x24
 8000e16:	f00b ff61 	bl	800ccdc <malloc>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <Delay_Init+0xb0>)
 8000e20:	601a      	str	r2, [r3, #0]
	delay->sampleRate = sampleRate;
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <Delay_Init+0xb0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	621a      	str	r2, [r3, #32]
	delay->delayBufferLength = 2*sampleRate;
 8000e2a:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <Delay_Init+0xb0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	0052      	lsls	r2, r2, #1
 8000e32:	611a      	str	r2, [r3, #16]
	delay->delayLength = 0.75f;
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <Delay_Init+0xb0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8000e3c:	60da      	str	r2, [r3, #12]
	delay->delayWritePtr = 0;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <Delay_Init+0xb0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
	delay->delayReadPtr = 0;
 8000e46:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <Delay_Init+0xb0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
	delay->delayData = (uint16_t*) malloc(delay->delayBufferLength * sizeof(uint16_t));
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <Delay_Init+0xb0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <Delay_Init+0xb0>)
 8000e58:	6814      	ldr	r4, [r2, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f00b ff3e 	bl	800ccdc <malloc>
 8000e60:	4603      	mov	r3, r0
 8000e62:	6023      	str	r3, [r4, #0]

	for (int i = 0; i < delay->delayBufferLength; ++i) {
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	e00a      	b.n	8000e80 <Delay_Init+0x7c>
		delay->delayData[i] = 0;
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <Delay_Init+0xb0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	2200      	movs	r2, #0
 8000e78:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < delay->delayBufferLength; ++i) {
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <Delay_Init+0xb0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	691b      	ldr	r3, [r3, #16]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbee      	blt.n	8000e6a <Delay_Init+0x66>
	}

	delay->feedback = 0.75f;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <Delay_Init+0xb0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8000e94:	615a      	str	r2, [r3, #20]
	delay->dryMix = 1;
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <Delay_Init+0xb0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e9e:	619a      	str	r2, [r3, #24]
	delay->wetMix = 1;
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <Delay_Init+0xb0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ea8:	61da      	str	r2, [r3, #28]
 8000eaa:	e000      	b.n	8000eae <Delay_Init+0xaa>
	if(delay != NULL) return;
 8000eac:	bf00      	nop
}
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd90      	pop	{r4, r7, pc}
 8000eb4:	24000098 	.word	0x24000098

08000eb8 <Delay_Process>:

uint16_t Delay_Process(uint16_t in) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
	uint16_t out = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	81fb      	strh	r3, [r7, #14]

	out = (delay->dryMix * in + delay->wetMix *delay->delayData[delay->delayReadPtr]);
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <Delay_Process+0xf4>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	ed93 7a06 	vldr	s14, [r3, #24]
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	ee07 3a90 	vmov	s15, r3
 8000ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000edc:	4b33      	ldr	r3, [pc, #204]	; (8000fac <Delay_Process+0xf4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	edd3 6a07 	vldr	s13, [r3, #28]
 8000ee4:	4b31      	ldr	r3, [pc, #196]	; (8000fac <Delay_Process+0xf4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4b30      	ldr	r3, [pc, #192]	; (8000fac <Delay_Process+0xf4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	4413      	add	r3, r2
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000efe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f0a:	ee17 3a90 	vmov	r3, s15
 8000f0e:	81fb      	strh	r3, [r7, #14]

	delay->delayData[delay->delayWritePtr] = in + (delay->delayData[delay->delayReadPtr]*delay->feedback);
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f1a:	4b24      	ldr	r3, [pc, #144]	; (8000fac <Delay_Process+0xf4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <Delay_Process+0xf4>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <Delay_Process+0xf4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <Delay_Process+0xf4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <Delay_Process+0xf4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f58:	ee17 2a90 	vmov	r2, s15
 8000f5c:	b292      	uxth	r2, r2
 8000f5e:	801a      	strh	r2, [r3, #0]

	if(++delay->delayReadPtr >= delay->delayBufferLength)
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <Delay_Process+0xf4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	3201      	adds	r2, #1
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <Delay_Process+0xf4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	db03      	blt.n	8000f7e <Delay_Process+0xc6>
		delay->delayReadPtr = 0;
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <Delay_Process+0xf4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]

	if(++delay->delayWritePtr >= delay->delayBufferLength)
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <Delay_Process+0xf4>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	3201      	adds	r2, #1
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <Delay_Process+0xf4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	db03      	blt.n	8000f9c <Delay_Process+0xe4>
		delay->delayWritePtr = 0;
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <Delay_Process+0xf4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	605a      	str	r2, [r3, #4]

	return out;
 8000f9c:	89fb      	ldrh	r3, [r7, #14]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	24000098 	.word	0x24000098

08000fb0 <Delay_Set_Params>:

void Delay_Set_Params(float delayLength, float feedback) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fba:	edc7 0a00 	vstr	s1, [r7]
	if(delayLength < 0.05) delayLength = 0.05;
 8000fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fc6:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8001130 <Delay_Set_Params+0x180>
 8000fca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd2:	d501      	bpl.n	8000fd8 <Delay_Set_Params+0x28>
 8000fd4:	4b5e      	ldr	r3, [pc, #376]	; (8001150 <Delay_Set_Params+0x1a0>)
 8000fd6:	607b      	str	r3, [r7, #4]

	delayLength *= 2.0f;
 8000fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fe0:	edc7 7a01 	vstr	s15, [r7, #4]

	if(delayLength - 0.1 > delay->delayLength - 0.01  || delayLength + 0.1 < delay->delayLength + 0.01) {
 8000fe4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fec:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8001138 <Delay_Set_Params+0x188>
 8000ff0:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000ff4:	4b57      	ldr	r3, [pc, #348]	; (8001154 <Delay_Set_Params+0x1a4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ffc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001000:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8001140 <Delay_Set_Params+0x190>
 8001004:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001008:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001010:	dc16      	bgt.n	8001040 <Delay_Set_Params+0x90>
 8001012:	edd7 7a01 	vldr	s15, [r7, #4]
 8001016:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800101a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8001138 <Delay_Set_Params+0x188>
 800101e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001022:	4b4c      	ldr	r3, [pc, #304]	; (8001154 <Delay_Set_Params+0x1a4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	edd3 7a03 	vldr	s15, [r3, #12]
 800102a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800102e:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8001140 <Delay_Set_Params+0x190>
 8001032:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001036:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800103a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103e:	d531      	bpl.n	80010a4 <Delay_Set_Params+0xf4>
		delay->delayLength = delayLength;
 8001040:	4b44      	ldr	r3, [pc, #272]	; (8001154 <Delay_Set_Params+0x1a4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	60da      	str	r2, [r3, #12]
		delay->delayReadPtr = (int)(delay->delayWritePtr - (delay->delayLength * delay->sampleRate) + delay->delayBufferLength) % delay->delayBufferLength;
 8001048:	4b42      	ldr	r3, [pc, #264]	; (8001154 <Delay_Set_Params+0x1a4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001056:	4b3f      	ldr	r3, [pc, #252]	; (8001154 <Delay_Set_Params+0x1a4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	edd3 6a03 	vldr	s13, [r3, #12]
 800105e:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <Delay_Set_Params+0x1a4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001070:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001074:	4b37      	ldr	r3, [pc, #220]	; (8001154 <Delay_Set_Params+0x1a4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800108a:	ee17 0a90 	vmov	r0, s15
 800108e:	4b31      	ldr	r3, [pc, #196]	; (8001154 <Delay_Set_Params+0x1a4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	4a2f      	ldr	r2, [pc, #188]	; (8001154 <Delay_Set_Params+0x1a4>)
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	fb90 f1f3 	sdiv	r1, r0, r3
 800109c:	fb01 f303 	mul.w	r3, r1, r3
 80010a0:	1ac3      	subs	r3, r0, r3
 80010a2:	6093      	str	r3, [r2, #8]
	}

	if(feedback > 0.8) feedback = 0.8;
 80010a4:	edd7 7a00 	vldr	s15, [r7]
 80010a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ac:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8001148 <Delay_Set_Params+0x198>
 80010b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	dd01      	ble.n	80010be <Delay_Set_Params+0x10e>
 80010ba:	4b27      	ldr	r3, [pc, #156]	; (8001158 <Delay_Set_Params+0x1a8>)
 80010bc:	603b      	str	r3, [r7, #0]

	if(feedback - 0.1 > delay->feedback - 0.01 || feedback + 0.1 < delay->feedback + 0.01) {
 80010be:	edd7 7a00 	vldr	s15, [r7]
 80010c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c6:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8001138 <Delay_Set_Params+0x188>
 80010ca:	ee37 6b46 	vsub.f64	d6, d7, d6
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <Delay_Set_Params+0x1a4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80010d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010da:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001140 <Delay_Set_Params+0x190>
 80010de:	ee37 7b45 	vsub.f64	d7, d7, d5
 80010e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80010e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ea:	dc17      	bgt.n	800111c <Delay_Set_Params+0x16c>
 80010ec:	edd7 7a00 	vldr	s15, [r7]
 80010f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010f4:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001138 <Delay_Set_Params+0x188>
 80010f8:	ee37 6b06 	vadd.f64	d6, d7, d6
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <Delay_Set_Params+0x1a4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	edd3 7a05 	vldr	s15, [r3, #20]
 8001104:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001108:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001140 <Delay_Set_Params+0x190>
 800110c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001110:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8001114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001118:	d400      	bmi.n	800111c <Delay_Set_Params+0x16c>
		delay->feedback = feedback;
	}
}
 800111a:	e003      	b.n	8001124 <Delay_Set_Params+0x174>
		delay->feedback = feedback;
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <Delay_Set_Params+0x1a4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	615a      	str	r2, [r3, #20]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	9999999a 	.word	0x9999999a
 8001134:	3fa99999 	.word	0x3fa99999
 8001138:	9999999a 	.word	0x9999999a
 800113c:	3fb99999 	.word	0x3fb99999
 8001140:	47ae147b 	.word	0x47ae147b
 8001144:	3f847ae1 	.word	0x3f847ae1
 8001148:	9999999a 	.word	0x9999999a
 800114c:	3fe99999 	.word	0x3fe99999
 8001150:	3d4ccccd 	.word	0x3d4ccccd
 8001154:	24000098 	.word	0x24000098
 8001158:	3f4ccccd 	.word	0x3f4ccccd

0800115c <Delay_Free>:

void Delay_Free() {
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	if(delay != NULL) {
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <Delay_Free+0x2c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00d      	beq.n	8001184 <Delay_Free+0x28>
		free(delay->delayData);
 8001168:	4b07      	ldr	r3, [pc, #28]	; (8001188 <Delay_Free+0x2c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f00b fdbc 	bl	800ccec <free>
		free(delay);
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <Delay_Free+0x2c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f00b fdb7 	bl	800ccec <free>

		delay = NULL;
 800117e:	4b02      	ldr	r3, [pc, #8]	; (8001188 <Delay_Free+0x2c>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
	}
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	24000098 	.word	0x24000098
 800118c:	00000000 	.word	0x00000000

08001190 <Tremolo_LFO>:
#define PI 3.14159265359

TremoloEffect* tremolo = NULL;

float Tremolo_LFO(float phase, int waveform)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	ed87 0a01 	vstr	s0, [r7, #4]
 800119a:	6038      	str	r0, [r7, #0]
	switch(waveform) {
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <Tremolo_LFO+0x1a>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d031      	beq.n	800120c <Tremolo_LFO+0x7c>
 80011a8:	e03f      	b.n	800122a <Tremolo_LFO+0x9a>
		case Triangle:
			if(phase < 0.25f)
 80011aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ae:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80011b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	d508      	bpl.n	80011ce <Tremolo_LFO+0x3e>
				return 0.5f + 2.0f*phase;
 80011bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80011c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011cc:	e045      	b.n	800125a <Tremolo_LFO+0xca>
			else if(phase < 0.75f)
 80011ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d2:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80011d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	d50c      	bpl.n	80011fa <Tremolo_LFO+0x6a>
				return 1.0f - 2.0f*(phase - 0.25f);
 80011e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e4:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80011e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f8:	e02f      	b.n	800125a <Tremolo_LFO+0xca>
			else
				return 2.0f*(phase-0.75f);
 80011fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80011fe:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8001202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001206:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800120a:	e026      	b.n	800125a <Tremolo_LFO+0xca>
		case Square:
			if(phase < 0.5f)
 800120c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001210:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	d502      	bpl.n	8001224 <Tremolo_LFO+0x94>
				return 1.0f;
 800121e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001222:	e01a      	b.n	800125a <Tremolo_LFO+0xca>
			else
				return 0.0f;
 8001224:	eddf 7a12 	vldr	s15, [pc, #72]	; 8001270 <Tremolo_LFO+0xe0>
 8001228:	e017      	b.n	800125a <Tremolo_LFO+0xca>
		case Sine:
		default:
			return 0.5f + 0.5f*sinf(2.0 * PI * phase);
 800122a:	edd7 7a01 	vldr	s15, [r7, #4]
 800122e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001232:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001268 <Tremolo_LFO+0xd8>
 8001236:	ee27 7b06 	vmul.f64	d7, d7, d6
 800123a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	f00b fecd 	bl	800cfe0 <sinf>
 8001246:	eef0 7a40 	vmov.f32	s15, s0
 800124a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800124e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001252:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001256:	ee77 7a87 	vadd.f32	s15, s15, s14
		}
}
 800125a:	eeb0 0a67 	vmov.f32	s0, s15
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	f3af 8000 	nop.w
 8001268:	54442eea 	.word	0x54442eea
 800126c:	401921fb 	.word	0x401921fb
 8001270:	00000000 	.word	0x00000000

08001274 <Tremolo_Init>:

void Tremolo_Init(int sampleRate) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	if(tremolo != NULL) return;
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <Tremolo_Init+0x60>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d122      	bne.n	80012ca <Tremolo_Init+0x56>

	tremolo = malloc(sizeof(TremoloEffect));
 8001284:	2014      	movs	r0, #20
 8001286:	f00b fd29 	bl	800ccdc <malloc>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <Tremolo_Init+0x60>)
 8001290:	601a      	str	r2, [r3, #0]
	tremolo->phase = 0;
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <Tremolo_Init+0x60>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
	tremolo->inverseSampleRate = 1.0f/sampleRate;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <Tremolo_Init+0x60>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012b2:	edc3 7a01 	vstr	s15, [r3, #4]
	tremolo->depth = 1.0f;
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <Tremolo_Init+0x60>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80012be:	609a      	str	r2, [r3, #8]
	tremolo->waveform = Triangle;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <Tremolo_Init+0x60>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
 80012c8:	e000      	b.n	80012cc <Tremolo_Init+0x58>
	if(tremolo != NULL) return;
 80012ca:	bf00      	nop
}
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2400009c 	.word	0x2400009c

080012d8 <Tremolo_Process>:

float Tremolo_Process(float in, float depth, float frequency) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	ed2d 8b02 	vpush	{d8}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80012e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80012ea:	ed87 1a01 	vstr	s2, [r7, #4]
	tremolo->depth = depth;
 80012ee:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <Tremolo_Process+0xd8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	609a      	str	r2, [r3, #8]
	tremolo->frequency = 6.0f*frequency;
 80012f6:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <Tremolo_Process+0xd8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80012fe:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001306:	edc3 7a03 	vstr	s15, [r3, #12]
	float out;
	out = in * (1.0f - tremolo->depth * Tremolo_LFO(tremolo->phase, tremolo->waveform));
 800130a:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <Tremolo_Process+0xd8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	ed93 8a02 	vldr	s16, [r3, #8]
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <Tremolo_Process+0xd8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <Tremolo_Process+0xd8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	4618      	mov	r0, r3
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	f7ff ff33 	bl	8001190 <Tremolo_LFO>
 800132a:	eef0 7a40 	vmov.f32	s15, s0
 800132e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001332:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001336:	ee77 7a67 	vsub.f32	s15, s14, s15
 800133a:	ed97 7a03 	vldr	s14, [r7, #12]
 800133e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001342:	edc7 7a05 	vstr	s15, [r7, #20]

	tremolo->phase += tremolo->frequency*tremolo->inverseSampleRate;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <Tremolo_Process+0xd8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <Tremolo_Process+0xd8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	edd3 6a03 	vldr	s13, [r3, #12]
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <Tremolo_Process+0xd8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	edd3 7a01 	vldr	s15, [r3, #4]
 800135e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <Tremolo_Process+0xd8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136a:	edc3 7a00 	vstr	s15, [r3]
	if(tremolo->phase >= 1.0)
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <Tremolo_Process+0xd8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800137a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	db0b      	blt.n	800139c <Tremolo_Process+0xc4>
		tremolo->phase -= 1.0;
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <Tremolo_Process+0xd8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <Tremolo_Process+0xd8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001394:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001398:	edc3 7a00 	vstr	s15, [r3]

	return out;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	ee07 3a90 	vmov	s15, r3
}
 80013a2:	eeb0 0a67 	vmov.f32	s0, s15
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	ecbd 8b02 	vpop	{d8}
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2400009c 	.word	0x2400009c

080013b4 <Tremolo_Set_Waveform>:

void Tremolo_Set_Waveform(int waveform) {
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	tremolo->waveform = waveform;
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <Tremolo_Set_Waveform+0x1c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	611a      	str	r2, [r3, #16]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	2400009c 	.word	0x2400009c

080013d4 <Tremolo_Free>:

void Tremolo_Free() {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	if(tremolo != NULL) {
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <Tremolo_Free+0x20>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <Tremolo_Free+0x1c>
		free(tremolo);
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <Tremolo_Free+0x20>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00b fc81 	bl	800ccec <free>
		tremolo = NULL;
 80013ea:	4b02      	ldr	r3, [pc, #8]	; (80013f4 <Tremolo_Free+0x20>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
	}
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	2400009c 	.word	0x2400009c

080013f8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800140a:	463b      	mov	r3, r7
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	615a      	str	r2, [r3, #20]
 800141a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <MX_ADC1_Init+0xe8>)
 800141e:	4a31      	ldr	r2, [pc, #196]	; (80014e4 <MX_ADC1_Init+0xec>)
 8001420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <MX_ADC1_Init+0xe8>)
 800142a:	2208      	movs	r2, #8
 800142c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800142e:	4b2c      	ldr	r3, [pc, #176]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001436:	2204      	movs	r2, #4
 8001438:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <MX_ADC1_Init+0xe8>)
 800143c:	2200      	movs	r2, #0
 800143e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001440:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001442:	2200      	movs	r2, #0
 8001444:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001448:	2201      	movs	r2, #1
 800144a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <MX_ADC1_Init+0xe8>)
 800144e:	2200      	movs	r2, #0
 8001450:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001454:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001458:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <MX_ADC1_Init+0xe8>)
 800145c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001464:	2203      	movs	r2, #3
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001468:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <MX_ADC1_Init+0xe8>)
 800146a:	2200      	movs	r2, #0
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001470:	2200      	movs	r2, #0
 8001472:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800147c:	4818      	ldr	r0, [pc, #96]	; (80014e0 <MX_ADC1_Init+0xe8>)
 800147e:	f002 f82d 	bl	80034dc <HAL_ADC_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001488:	f001 f98e 	bl	80027a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	4812      	ldr	r0, [pc, #72]	; (80014e0 <MX_ADC1_Init+0xe8>)
 8001498:	f002 ff20 	bl	80042dc <HAL_ADCEx_MultiModeConfigChannel>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80014a2:	f001 f981 	bl	80027a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_ADC1_Init+0xf0>)
 80014a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014aa:	2306      	movs	r3, #6
 80014ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014b2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014b6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014b8:	2304      	movs	r3, #4
 80014ba:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c4:	463b      	mov	r3, r7
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_ADC1_Init+0xe8>)
 80014ca:	f002 fa1f 	bl	800390c <HAL_ADC_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80014d4:	f001 f968 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	240000a0 	.word	0x240000a0
 80014e4:	40022000 	.word	0x40022000
 80014e8:	08600004 	.word	0x08600004

080014ec <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	615a      	str	r2, [r3, #20]
 8001502:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001504:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001506:	4a39      	ldr	r2, [pc, #228]	; (80015ec <MX_ADC2_Init+0x100>)
 8001508:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <MX_ADC2_Init+0xfc>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001510:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001512:	2208      	movs	r2, #8
 8001514:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001516:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001518:	2201      	movs	r2, #1
 800151a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800151c:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <MX_ADC2_Init+0xfc>)
 800151e:	2204      	movs	r2, #4
 8001520:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001522:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001524:	2200      	movs	r2, #0
 8001526:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001528:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <MX_ADC2_Init+0xfc>)
 800152a:	2200      	movs	r2, #0
 800152c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 3;
 800152e:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001530:	2203      	movs	r2, #3
 8001532:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001534:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001536:	2200      	movs	r2, #0
 8001538:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800153a:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <MX_ADC2_Init+0xfc>)
 800153c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001540:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001542:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001548:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800154a:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <MX_ADC2_Init+0xfc>)
 800154c:	2203      	movs	r2, #3
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001552:	2200      	movs	r2, #0
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001556:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001558:	2200      	movs	r2, #0
 800155a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <MX_ADC2_Init+0xfc>)
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001564:	4820      	ldr	r0, [pc, #128]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001566:	f001 ffb9 	bl	80034dc <HAL_ADC_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001570:	f001 f91a 	bl	80027a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_ADC2_Init+0x104>)
 8001576:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001578:	2306      	movs	r3, #6
 800157a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001580:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001584:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001586:	2304      	movs	r3, #4
 8001588:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	4619      	mov	r1, r3
 8001596:	4814      	ldr	r0, [pc, #80]	; (80015e8 <MX_ADC2_Init+0xfc>)
 8001598:	f002 f9b8 	bl	800390c <HAL_ADC_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80015a2:	f001 f901 	bl	80027a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <MX_ADC2_Init+0x108>)
 80015a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015aa:	230c      	movs	r3, #12
 80015ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	480d      	ldr	r0, [pc, #52]	; (80015e8 <MX_ADC2_Init+0xfc>)
 80015b4:	f002 f9aa 	bl	800390c <HAL_ADC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80015be:	f001 f8f3 	bl	80027a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <MX_ADC2_Init+0x10c>)
 80015c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015c6:	2312      	movs	r3, #18
 80015c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <MX_ADC2_Init+0xfc>)
 80015d0:	f002 f99c 	bl	800390c <HAL_ADC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 80015da:	f001 f8e5 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	24000104 	.word	0x24000104
 80015ec:	40022100 	.word	0x40022100
 80015f0:	19200040 	.word	0x19200040
 80015f4:	1d500080 	.word	0x1d500080
 80015f8:	21800100 	.word	0x21800100

080015fc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08e      	sub	sp, #56	; 0x38
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a86      	ldr	r2, [pc, #536]	; (8001834 <HAL_ADC_MspInit+0x238>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d165      	bne.n	80016ea <HAL_ADC_MspInit+0xee>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800161e:	4b86      	ldr	r3, [pc, #536]	; (8001838 <HAL_ADC_MspInit+0x23c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	4a84      	ldr	r2, [pc, #528]	; (8001838 <HAL_ADC_MspInit+0x23c>)
 8001626:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001628:	4b83      	ldr	r3, [pc, #524]	; (8001838 <HAL_ADC_MspInit+0x23c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d10e      	bne.n	800164e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001630:	4b82      	ldr	r3, [pc, #520]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001632:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001636:	4a81      	ldr	r2, [pc, #516]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001640:	4b7e      	ldr	r3, [pc, #504]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001642:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	623b      	str	r3, [r7, #32]
 800164c:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800164e:	4b7b      	ldr	r3, [pc, #492]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001650:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001654:	4a79      	ldr	r2, [pc, #484]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001656:	f043 0320 	orr.w	r3, r3, #32
 800165a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800165e:	4b77      	ldr	r3, [pc, #476]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001660:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001664:	f003 0320 	and.w	r3, r3, #32
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800166c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001672:	2303      	movs	r3, #3
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	486f      	ldr	r0, [pc, #444]	; (8001840 <HAL_ADC_MspInit+0x244>)
 8001682:	f005 fc19 	bl	8006eb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001686:	4b6f      	ldr	r3, [pc, #444]	; (8001844 <HAL_ADC_MspInit+0x248>)
 8001688:	4a6f      	ldr	r2, [pc, #444]	; (8001848 <HAL_ADC_MspInit+0x24c>)
 800168a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800168c:	4b6d      	ldr	r3, [pc, #436]	; (8001844 <HAL_ADC_MspInit+0x248>)
 800168e:	2209      	movs	r2, #9
 8001690:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001692:	4b6c      	ldr	r3, [pc, #432]	; (8001844 <HAL_ADC_MspInit+0x248>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001698:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_ADC_MspInit+0x248>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800169e:	4b69      	ldr	r3, [pc, #420]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016a6:	4b67      	ldr	r3, [pc, #412]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016ae:	4b65      	ldr	r3, [pc, #404]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016b6:	4b63      	ldr	r3, [pc, #396]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80016be:	4b61      	ldr	r3, [pc, #388]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016c4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016c6:	4b5f      	ldr	r3, [pc, #380]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016cc:	485d      	ldr	r0, [pc, #372]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016ce:	f003 fa77 	bl	8004bc0 <HAL_DMA_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 80016d8:	f001 f866 	bl	80027a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a59      	ldr	r2, [pc, #356]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80016e2:	4a58      	ldr	r2, [pc, #352]	; (8001844 <HAL_ADC_MspInit+0x248>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80016e8:	e09f      	b.n	800182a <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a57      	ldr	r2, [pc, #348]	; (800184c <HAL_ADC_MspInit+0x250>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	f040 809a 	bne.w	800182a <HAL_ADC_MspInit+0x22e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016f6:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_ADC_MspInit+0x23c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	4a4e      	ldr	r2, [pc, #312]	; (8001838 <HAL_ADC_MspInit+0x23c>)
 80016fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001700:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <HAL_ADC_MspInit+0x23c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d10e      	bne.n	8001726 <HAL_ADC_MspInit+0x12a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001708:	4b4c      	ldr	r3, [pc, #304]	; (800183c <HAL_ADC_MspInit+0x240>)
 800170a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800170e:	4a4b      	ldr	r2, [pc, #300]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001710:	f043 0320 	orr.w	r3, r3, #32
 8001714:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001718:	4b48      	ldr	r3, [pc, #288]	; (800183c <HAL_ADC_MspInit+0x240>)
 800171a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b45      	ldr	r3, [pc, #276]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001728:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800172c:	4a43      	ldr	r2, [pc, #268]	; (800183c <HAL_ADC_MspInit+0x240>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001736:	4b41      	ldr	r3, [pc, #260]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001738:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001744:	4b3d      	ldr	r3, [pc, #244]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001746:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800174a:	4a3c      	ldr	r2, [pc, #240]	; (800183c <HAL_ADC_MspInit+0x240>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001754:	4b39      	ldr	r3, [pc, #228]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001756:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001762:	4b36      	ldr	r3, [pc, #216]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001764:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001768:	4a34      	ldr	r2, [pc, #208]	; (800183c <HAL_ADC_MspInit+0x240>)
 800176a:	f043 0320 	orr.w	r3, r3, #32
 800176e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001772:	4b32      	ldr	r3, [pc, #200]	; (800183c <HAL_ADC_MspInit+0x240>)
 8001774:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001784:	2303      	movs	r3, #3
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001790:	4619      	mov	r1, r3
 8001792:	482f      	ldr	r0, [pc, #188]	; (8001850 <HAL_ADC_MspInit+0x254>)
 8001794:	f005 fb90 	bl	8006eb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001798:	2320      	movs	r3, #32
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179c:	2303      	movs	r3, #3
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	4619      	mov	r1, r3
 80017aa:	482a      	ldr	r0, [pc, #168]	; (8001854 <HAL_ADC_MspInit+0x258>)
 80017ac:	f005 fb84 	bl	8006eb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80017b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b6:	2303      	movs	r3, #3
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c2:	4619      	mov	r1, r3
 80017c4:	481e      	ldr	r0, [pc, #120]	; (8001840 <HAL_ADC_MspInit+0x244>)
 80017c6:	f005 fb77 	bl	8006eb8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream2;
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017cc:	4a23      	ldr	r2, [pc, #140]	; (800185c <HAL_ADC_MspInit+0x260>)
 80017ce:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80017d0:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017d2:	220a      	movs	r2, #10
 80017d4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d6:	4b20      	ldr	r3, [pc, #128]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017ea:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017f0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 80017fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001800:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800180e:	4812      	ldr	r0, [pc, #72]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 8001810:	f003 f9d6 	bl	8004bc0 <HAL_DMA_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_ADC_MspInit+0x222>
      Error_Handler();
 800181a:	f000 ffc5 	bl	80027a8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 8001822:	64da      	str	r2, [r3, #76]	; 0x4c
 8001824:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <HAL_ADC_MspInit+0x25c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6393      	str	r3, [r2, #56]	; 0x38
}
 800182a:	bf00      	nop
 800182c:	3738      	adds	r7, #56	; 0x38
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000
 8001838:	24000258 	.word	0x24000258
 800183c:	58024400 	.word	0x58024400
 8001840:	58021400 	.word	0x58021400
 8001844:	24000168 	.word	0x24000168
 8001848:	40020010 	.word	0x40020010
 800184c:	40022100 	.word	0x40022100
 8001850:	58020000 	.word	0x58020000
 8001854:	58020800 	.word	0x58020800
 8001858:	240001e0 	.word	0x240001e0
 800185c:	40020040 	.word	0x40020040

08001860 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2224      	movs	r2, #36	; 0x24
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f00b fa45 	bl	800ccfc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_DAC1_Init+0x5c>)
 8001874:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <MX_DAC1_Init+0x60>)
 8001876:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001878:	4810      	ldr	r0, [pc, #64]	; (80018bc <MX_DAC1_Init+0x5c>)
 800187a:	f002 feda 	bl	8004632 <HAL_DAC_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001884:	f000 ff90 	bl	80027a8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800188c:	2316      	movs	r3, #22
 800188e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001894:	2301      	movs	r3, #1
 8001896:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2200      	movs	r2, #0
 80018a0:	4619      	mov	r1, r3
 80018a2:	4806      	ldr	r0, [pc, #24]	; (80018bc <MX_DAC1_Init+0x5c>)
 80018a4:	f002 ffd2 	bl	800484c <HAL_DAC_ConfigChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80018ae:	f000 ff7b 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	3728      	adds	r7, #40	; 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2400025c 	.word	0x2400025c
 80018c0:	40007400 	.word	0x40007400

080018c4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08a      	sub	sp, #40	; 0x28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a30      	ldr	r2, [pc, #192]	; (80019a4 <HAL_DAC_MspInit+0xe0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d15a      	bne.n	800199c <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80018e6:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <HAL_DAC_MspInit+0xe4>)
 80018e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018ec:	4a2e      	ldr	r2, [pc, #184]	; (80019a8 <HAL_DAC_MspInit+0xe4>)
 80018ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018f2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80018f6:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <HAL_DAC_MspInit+0xe4>)
 80018f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <HAL_DAC_MspInit+0xe4>)
 8001906:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800190a:	4a27      	ldr	r2, [pc, #156]	; (80019a8 <HAL_DAC_MspInit+0xe4>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001914:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_DAC_MspInit+0xe4>)
 8001916:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001922:	2310      	movs	r3, #16
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001926:	2303      	movs	r3, #3
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	481d      	ldr	r0, [pc, #116]	; (80019ac <HAL_DAC_MspInit+0xe8>)
 8001936:	f005 fabf 	bl	8006eb8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 800193c:	4a1d      	ldr	r2, [pc, #116]	; (80019b4 <HAL_DAC_MspInit+0xf0>)
 800193e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001942:	2243      	movs	r2, #67	; 0x43
 8001944:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001948:	2240      	movs	r2, #64	; 0x40
 800194a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800194c:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001954:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001958:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 800195c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001960:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001964:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001968:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 800196c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001970:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001974:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001978:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 800197c:	2200      	movs	r2, #0
 800197e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001980:	480b      	ldr	r0, [pc, #44]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001982:	f003 f91d 	bl	8004bc0 <HAL_DMA_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 800198c:	f000 ff0c 	bl	80027a8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <HAL_DAC_MspInit+0xec>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800199c:	bf00      	nop
 800199e:	3728      	adds	r7, #40	; 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40007400 	.word	0x40007400
 80019a8:	58024400 	.word	0x58024400
 80019ac:	58020000 	.word	0x58020000
 80019b0:	24000270 	.word	0x24000270
 80019b4:	40020028 	.word	0x40020028

080019b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <MX_DMA_Init+0x5c>)
 80019c0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80019c4:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <MX_DMA_Init+0x5c>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_DMA_Init+0x5c>)
 80019d0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	200b      	movs	r0, #11
 80019e2:	f002 fdf2 	bl	80045ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019e6:	200b      	movs	r0, #11
 80019e8:	f002 fe09 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	200c      	movs	r0, #12
 80019f2:	f002 fdea 	bl	80045ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019f6:	200c      	movs	r0, #12
 80019f8:	f002 fe01 	bl	80045fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	2100      	movs	r1, #0
 8001a00:	200d      	movs	r0, #13
 8001a02:	f002 fde2 	bl	80045ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001a06:	200d      	movs	r0, #13
 8001a08:	f002 fdf9 	bl	80045fe <HAL_NVIC_EnableIRQ>

}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	58024400 	.word	0x58024400

08001a18 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	; 0x30
 8001a1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2e:	4b69      	ldr	r3, [pc, #420]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001a30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a34:	4a67      	ldr	r2, [pc, #412]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a3e:	4b65      	ldr	r3, [pc, #404]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001a40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a4c:	4b61      	ldr	r3, [pc, #388]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001a4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a52:	4a60      	ldr	r2, [pc, #384]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001a54:	f043 0320 	orr.w	r3, r3, #32
 8001a58:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a5c:	4b5d      	ldr	r3, [pc, #372]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001a5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a62:	f003 0320 	and.w	r3, r3, #32
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6a:	4b5a      	ldr	r3, [pc, #360]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001a6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a70:	4a58      	ldr	r2, [pc, #352]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a76:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a7a:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001a7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b52      	ldr	r3, [pc, #328]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001a8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a8e:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a98:	4b4e      	ldr	r3, [pc, #312]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001a9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	4b4b      	ldr	r3, [pc, #300]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001aa8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001aac:	4a49      	ldr	r2, [pc, #292]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001aae:	f043 0302 	orr.w	r3, r3, #2
 8001ab2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ab6:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001ab8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac4:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001ac6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001aca:	4a42      	ldr	r2, [pc, #264]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001acc:	f043 0308 	orr.w	r3, r3, #8
 8001ad0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ad4:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001ad6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ae2:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001ae4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ae8:	4a3a      	ldr	r2, [pc, #232]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001af2:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <MX_GPIO_Init+0x1bc>)
 8001af4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b06:	4834      	ldr	r0, [pc, #208]	; (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001b08:	f005 fb86 	bl	8007218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b12:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	482e      	ldr	r0, [pc, #184]	; (8001bdc <MX_GPIO_Init+0x1c4>)
 8001b24:	f005 f9c8 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	f107 031c 	add.w	r3, r7, #28
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4825      	ldr	r0, [pc, #148]	; (8001bd8 <MX_GPIO_Init+0x1c0>)
 8001b42:	f005 f9b9 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4821      	ldr	r0, [pc, #132]	; (8001be0 <MX_GPIO_Init+0x1c8>)
 8001b5c:	f005 f9ac 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	4619      	mov	r1, r3
 8001b74:	481b      	ldr	r0, [pc, #108]	; (8001be4 <MX_GPIO_Init+0x1cc>)
 8001b76:	f005 f99f 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001b8c:	230a      	movs	r3, #10
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	4619      	mov	r1, r3
 8001b96:	4813      	ldr	r0, [pc, #76]	; (8001be4 <MX_GPIO_Init+0x1cc>)
 8001b98:	f005 f98e 	bl	8006eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001b9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480b      	ldr	r0, [pc, #44]	; (8001be4 <MX_GPIO_Init+0x1cc>)
 8001bb6:	f005 f97f 	bl	8006eb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2028      	movs	r0, #40	; 0x28
 8001bc0:	f002 fd03 	bl	80045ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bc4:	2028      	movs	r0, #40	; 0x28
 8001bc6:	f002 fd1a 	bl	80045fe <HAL_NVIC_EnableIRQ>

}
 8001bca:	bf00      	nop
 8001bcc:	3730      	adds	r7, #48	; 0x30
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	58024400 	.word	0x58024400
 8001bd8:	58021400 	.word	0x58021400
 8001bdc:	58020800 	.word	0x58020800
 8001be0:	58021800 	.word	0x58021800
 8001be4:	58020000 	.word	0x58020000

08001be8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f023 030f 	bic.w	r3, r3, #15
 8001bf8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	f043 030c 	orr.w	r3, r3, #12
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001c14:	7bbb      	ldrb	r3, [r7, #14]
 8001c16:	f043 030c 	orr.w	r3, r3, #12
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001c1e:	7bbb      	ldrb	r3, [r7, #14]
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c28:	f107 0208 	add.w	r2, r7, #8
 8001c2c:	2364      	movs	r3, #100	; 0x64
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	2304      	movs	r3, #4
 8001c32:	214e      	movs	r1, #78	; 0x4e
 8001c34:	4803      	ldr	r0, [pc, #12]	; (8001c44 <lcd_send_cmd+0x5c>)
 8001c36:	f005 fbb3 	bl	80073a0 <HAL_I2C_Master_Transmit>
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	240002e8 	.word	0x240002e8

08001c48 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	f023 030f 	bic.w	r3, r3, #15
 8001c58:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	f043 030d 	orr.w	r3, r3, #13
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	f043 0309 	orr.w	r3, r3, #9
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001c74:	7bbb      	ldrb	r3, [r7, #14]
 8001c76:	f043 030d 	orr.w	r3, r3, #13
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001c7e:	7bbb      	ldrb	r3, [r7, #14]
 8001c80:	f043 0309 	orr.w	r3, r3, #9
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c88:	f107 0208 	add.w	r2, r7, #8
 8001c8c:	2364      	movs	r3, #100	; 0x64
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2304      	movs	r3, #4
 8001c92:	214e      	movs	r1, #78	; 0x4e
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <lcd_send_data+0x5c>)
 8001c96:	f005 fb83 	bl	80073a0 <HAL_I2C_Master_Transmit>
}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	240002e8 	.word	0x240002e8

08001ca8 <lcd_clear>:

void lcd_clear (void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001cae:	2080      	movs	r0, #128	; 0x80
 8001cb0:	f7ff ff9a 	bl	8001be8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	e005      	b.n	8001cc6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001cba:	2020      	movs	r0, #32
 8001cbc:	f7ff ffc4 	bl	8001c48 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b45      	cmp	r3, #69	; 0x45
 8001cca:	ddf6      	ble.n	8001cba <lcd_clear+0x12>
	}
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
    switch (row)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <lcd_put_cur+0x18>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d005      	beq.n	8001cf8 <lcd_put_cur+0x22>
 8001cec:	e009      	b.n	8001d02 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf4:	603b      	str	r3, [r7, #0]
            break;
 8001cf6:	e004      	b.n	8001d02 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cfe:	603b      	str	r3, [r7, #0]
            break;
 8001d00:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff6e 	bl	8001be8 <lcd_send_cmd>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <lcd_init>:


void lcd_init (void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001d18:	2032      	movs	r0, #50	; 0x32
 8001d1a:	f001 f9d3 	bl	80030c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001d1e:	2030      	movs	r0, #48	; 0x30
 8001d20:	f7ff ff62 	bl	8001be8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001d24:	2005      	movs	r0, #5
 8001d26:	f001 f9cd 	bl	80030c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001d2a:	2030      	movs	r0, #48	; 0x30
 8001d2c:	f7ff ff5c 	bl	8001be8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001d30:	2001      	movs	r0, #1
 8001d32:	f001 f9c7 	bl	80030c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001d36:	2030      	movs	r0, #48	; 0x30
 8001d38:	f7ff ff56 	bl	8001be8 <lcd_send_cmd>
	HAL_Delay(10);
 8001d3c:	200a      	movs	r0, #10
 8001d3e:	f001 f9c1 	bl	80030c4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001d42:	2020      	movs	r0, #32
 8001d44:	f7ff ff50 	bl	8001be8 <lcd_send_cmd>
	HAL_Delay(10);
 8001d48:	200a      	movs	r0, #10
 8001d4a:	f001 f9bb 	bl	80030c4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001d4e:	2028      	movs	r0, #40	; 0x28
 8001d50:	f7ff ff4a 	bl	8001be8 <lcd_send_cmd>
	HAL_Delay(1);
 8001d54:	2001      	movs	r0, #1
 8001d56:	f001 f9b5 	bl	80030c4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001d5a:	2008      	movs	r0, #8
 8001d5c:	f7ff ff44 	bl	8001be8 <lcd_send_cmd>
	HAL_Delay(1);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f001 f9af 	bl	80030c4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001d66:	2001      	movs	r0, #1
 8001d68:	f7ff ff3e 	bl	8001be8 <lcd_send_cmd>
	HAL_Delay(1);
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f001 f9a9 	bl	80030c4 <HAL_Delay>
	HAL_Delay(1);
 8001d72:	2001      	movs	r0, #1
 8001d74:	f001 f9a6 	bl	80030c4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001d78:	2006      	movs	r0, #6
 8001d7a:	f7ff ff35 	bl	8001be8 <lcd_send_cmd>
	HAL_Delay(1);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f001 f9a0 	bl	80030c4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001d84:	200c      	movs	r0, #12
 8001d86:	f7ff ff2f 	bl	8001be8 <lcd_send_cmd>
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001d96:	e006      	b.n	8001da6 <lcd_send_string+0x18>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff51 	bl	8001c48 <lcd_send_data>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f4      	bne.n	8001d98 <lcd_send_string+0xa>
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <MX_I2C2_Init+0x78>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001dc4:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <MX_I2C2_Init+0x7c>)
 8001dc6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001dda:	4b14      	ldr	r3, [pc, #80]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001df2:	480e      	ldr	r0, [pc, #56]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001df4:	f005 fa44 	bl	8007280 <HAL_I2C_Init>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001dfe:	f000 fcd3 	bl	80027a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e02:	2100      	movs	r1, #0
 8001e04:	4809      	ldr	r0, [pc, #36]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001e06:	f005 fdbd 	bl	8007984 <HAL_I2CEx_ConfigAnalogFilter>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e10:	f000 fcca 	bl	80027a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e14:	2100      	movs	r1, #0
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001e18:	f005 fdff 	bl	8007a1a <HAL_I2CEx_ConfigDigitalFilter>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e22:	f000 fcc1 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	240002e8 	.word	0x240002e8
 8001e30:	40005800 	.word	0x40005800
 8001e34:	20b0ccff 	.word	0x20b0ccff

08001e38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b0b8      	sub	sp, #224	; 0xe0
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	22b8      	movs	r2, #184	; 0xb8
 8001e56:	2100      	movs	r1, #0
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f00a ff4f 	bl	800ccfc <memset>
  if(i2cHandle->Instance==I2C2)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a25      	ldr	r2, [pc, #148]	; (8001ef8 <HAL_I2C_MspInit+0xc0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d142      	bne.n	8001eee <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e68:	2308      	movs	r3, #8
 8001e6a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4618      	mov	r0, r3
 8001e78:	f006 fe06 	bl	8008a88 <HAL_RCCEx_PeriphCLKConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e82:	f000 fc91 	bl	80027a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_I2C_MspInit+0xc4>)
 8001e88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e8c:	4a1b      	ldr	r2, [pc, #108]	; (8001efc <HAL_I2C_MspInit+0xc4>)
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <HAL_I2C_MspInit+0xc4>)
 8001e98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ea4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ea8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eac:	2312      	movs	r3, #18
 8001eae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ec8:	4619      	mov	r1, r3
 8001eca:	480d      	ldr	r0, [pc, #52]	; (8001f00 <HAL_I2C_MspInit+0xc8>)
 8001ecc:	f004 fff4 	bl	8006eb8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_I2C_MspInit+0xc4>)
 8001ed2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ed6:	4a09      	ldr	r2, [pc, #36]	; (8001efc <HAL_I2C_MspInit+0xc4>)
 8001ed8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001edc:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_I2C_MspInit+0xc4>)
 8001ee2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001eee:	bf00      	nop
 8001ef0:	37e0      	adds	r7, #224	; 0xe0
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40005800 	.word	0x40005800
 8001efc:	58024400 	.word	0x58024400
 8001f00:	58020400 	.word	0x58020400

08001f04 <HAL_ADC_ConvHalfCpltCallback>:


// when we enter this function, first half of the buffer is complete
// so we set the input buffer pointer at the beginning
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1) {
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d108      	bne.n	8001f26 <HAL_ADC_ConvHalfCpltCallback+0x22>
		inBuffPtr = &adcData[0];
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001f16:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8001f18:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[0];
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001f1c:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001f1e:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
	}

}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	240000a0 	.word	0x240000a0
 8001f38:	24000b3c 	.word	0x24000b3c
 8001f3c:	24000334 	.word	0x24000334
 8001f40:	24000b40 	.word	0x24000b40
 8001f44:	24000734 	.word	0x24000734
 8001f48:	24000b44 	.word	0x24000b44

08001f4c <HAL_ADC_ConvCpltCallback>:

// when we enter this function, first the second half of the buffer is complete
// so we set the input buffer pointer at the beginning
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1) {
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <HAL_ADC_ConvCpltCallback+0x30>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d108      	bne.n	8001f6e <HAL_ADC_ConvCpltCallback+0x22>
		inBuffPtr = &adcData[DATA_SIZE];
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <HAL_ADC_ConvCpltCallback+0x34>)
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_ADC_ConvCpltCallback+0x38>)
 8001f60:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[DATA_SIZE];
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001f64:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <HAL_ADC_ConvCpltCallback+0x40>)
 8001f66:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_ADC_ConvCpltCallback+0x44>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
	}

}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	240000a0 	.word	0x240000a0
 8001f80:	24000b3c 	.word	0x24000b3c
 8001f84:	24000534 	.word	0x24000534
 8001f88:	24000b40 	.word	0x24000b40
 8001f8c:	24000934 	.word	0x24000934
 8001f90:	24000b44 	.word	0x24000b44

08001f94 <Is_Tremolo>:
uint8_t currentEffect =  CleanEf;
enum Direction { Left, Right };

const float INT16_TO_FLOAT = 1.0f / 32768.0f;

uint8_t Is_Tremolo() {
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
	return currentEffect == SineEf || currentEffect == SquareEf || currentEffect == TriangleEf;
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <Is_Tremolo+0x30>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d007      	beq.n	8001fb0 <Is_Tremolo+0x1c>
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <Is_Tremolo+0x30>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d003      	beq.n	8001fb0 <Is_Tremolo+0x1c>
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <Is_Tremolo+0x30>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d101      	bne.n	8001fb4 <Is_Tremolo+0x20>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <Is_Tremolo+0x22>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	24000b45 	.word	0x24000b45

08001fc8 <Init_Tremolo_Waveform>:

void Init_Tremolo_Waveform() {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	if(currentEffect == SineEf) Tremolo_Set_Waveform(Sine);
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <Init_Tremolo_Waveform+0x38>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d103      	bne.n	8001fdc <Init_Tremolo_Waveform+0x14>
 8001fd4:	2002      	movs	r0, #2
 8001fd6:	f7ff f9ed 	bl	80013b4 <Tremolo_Set_Waveform>
	else if(currentEffect == SquareEf) Tremolo_Set_Waveform(Square);
	else if(currentEffect == TriangleEf) Tremolo_Set_Waveform(Triangle);
}
 8001fda:	e00e      	b.n	8001ffa <Init_Tremolo_Waveform+0x32>
	else if(currentEffect == SquareEf) Tremolo_Set_Waveform(Square);
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <Init_Tremolo_Waveform+0x38>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d103      	bne.n	8001fec <Init_Tremolo_Waveform+0x24>
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7ff f9e5 	bl	80013b4 <Tremolo_Set_Waveform>
}
 8001fea:	e006      	b.n	8001ffa <Init_Tremolo_Waveform+0x32>
	else if(currentEffect == TriangleEf) Tremolo_Set_Waveform(Triangle);
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <Init_Tremolo_Waveform+0x38>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d102      	bne.n	8001ffa <Init_Tremolo_Waveform+0x32>
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f7ff f9dd 	bl	80013b4 <Tremolo_Set_Waveform>
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	24000b45 	.word	0x24000b45

08002004 <processData>:

void processData()
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
	if(effectReady == 0) {
 800200a:	4b91      	ldr	r3, [pc, #580]	; (8002250 <processData+0x24c>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8119 	beq.w	8002246 <processData+0x242>
		return;
		HAL_Delay(100);
	}

	float volume = adc2Data[0]/4095.0f;
 8002014:	4b8f      	ldr	r3, [pc, #572]	; (8002254 <processData+0x250>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	ee07 3a90 	vmov	s15, r3
 800201c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002020:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8002258 <processData+0x254>
 8002024:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002028:	edc7 7a03 	vstr	s15, [r7, #12]
	float knob1 = adc2Data[1]/4095.0f;
 800202c:	4b89      	ldr	r3, [pc, #548]	; (8002254 <processData+0x250>)
 800202e:	885b      	ldrh	r3, [r3, #2]
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002038:	eddf 6a87 	vldr	s13, [pc, #540]	; 8002258 <processData+0x254>
 800203c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002040:	edc7 7a02 	vstr	s15, [r7, #8]
	float knob2 = adc2Data[2]/4095.0f;
 8002044:	4b83      	ldr	r3, [pc, #524]	; (8002254 <processData+0x250>)
 8002046:	889b      	ldrh	r3, [r3, #4]
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002050:	eddf 6a81 	vldr	s13, [pc, #516]	; 8002258 <processData+0x254>
 8002054:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002058:	edc7 7a01 	vstr	s15, [r7, #4]

	if(currentEffect == CleanEf) {
 800205c:	4b7f      	ldr	r3, [pc, #508]	; (800225c <processData+0x258>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d123      	bne.n	80020ac <processData+0xa8>
		for(int i = 0; i < DATA_SIZE; i++) {
 8002064:	2300      	movs	r3, #0
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	e01c      	b.n	80020a4 <processData+0xa0>
			 outBuffPtr[i] = (uint16_t) (volume * inBuffPtr[i]);
 800206a:	4b7d      	ldr	r3, [pc, #500]	; (8002260 <processData+0x25c>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	ee07 3a90 	vmov	s15, r3
 800207c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002080:	edd7 7a03 	vldr	s15, [r7, #12]
 8002084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002088:	4b76      	ldr	r3, [pc, #472]	; (8002264 <processData+0x260>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002096:	ee17 2a90 	vmov	r2, s15
 800209a:	b292      	uxth	r2, r2
 800209c:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3301      	adds	r3, #1
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	2bff      	cmp	r3, #255	; 0xff
 80020a8:	dddf      	ble.n	800206a <processData+0x66>
 80020aa:	e0c8      	b.n	800223e <processData+0x23a>
		}
	}
	else if(currentEffect == DelayEf) {
 80020ac:	4b6b      	ldr	r3, [pc, #428]	; (800225c <processData+0x258>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d12d      	bne.n	8002110 <processData+0x10c>
		Delay_Set_Params(knob1, knob2);
 80020b4:	edd7 0a01 	vldr	s1, [r7, #4]
 80020b8:	ed97 0a02 	vldr	s0, [r7, #8]
 80020bc:	f7fe ff78 	bl	8000fb0 <Delay_Set_Params>
		for(int i = 0; i < DATA_SIZE; i++) {
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]
 80020c4:	e020      	b.n	8002108 <processData+0x104>
			 outBuffPtr[i] = (uint16_t) (volume * Delay_Process(inBuffPtr[i]));
 80020c6:	4b66      	ldr	r3, [pc, #408]	; (8002260 <processData+0x25c>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe feef 	bl	8000eb8 <Delay_Process>
 80020da:	4603      	mov	r3, r0
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ec:	4b5d      	ldr	r3, [pc, #372]	; (8002264 <processData+0x260>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020fa:	ee17 2a90 	vmov	r2, s15
 80020fe:	b292      	uxth	r2, r2
 8002100:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	3301      	adds	r3, #1
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2bff      	cmp	r3, #255	; 0xff
 800210c:	dddb      	ble.n	80020c6 <processData+0xc2>
 800210e:	e096      	b.n	800223e <processData+0x23a>
		}
	} else if(Is_Tremolo()) {
 8002110:	f7ff ff40 	bl	8001f94 <Is_Tremolo>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d047      	beq.n	80021aa <processData+0x1a6>
		Init_Tremolo_Waveform();
 800211a:	f7ff ff55 	bl	8001fc8 <Init_Tremolo_Waveform>

		static float in, out;
		for(int i = 0; i < DATA_SIZE; i++) {
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e03e      	b.n	80021a2 <processData+0x19e>
			in = INT16_TO_FLOAT * inBuffPtr[i];
 8002124:	4b4e      	ldr	r3, [pc, #312]	; (8002260 <processData+0x25c>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	b29b      	uxth	r3, r3
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800213a:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002268 <processData+0x264>
 800213e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002142:	4b4a      	ldr	r3, [pc, #296]	; (800226c <processData+0x268>)
 8002144:	edc3 7a00 	vstr	s15, [r3]
			out = Tremolo_Process(in, knob1, knob2) * 1.4f;
 8002148:	4b48      	ldr	r3, [pc, #288]	; (800226c <processData+0x268>)
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	ed97 1a01 	vldr	s2, [r7, #4]
 8002152:	edd7 0a02 	vldr	s1, [r7, #8]
 8002156:	eeb0 0a67 	vmov.f32	s0, s15
 800215a:	f7ff f8bd 	bl	80012d8 <Tremolo_Process>
 800215e:	eef0 7a40 	vmov.f32	s15, s0
 8002162:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002270 <processData+0x26c>
 8002166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800216a:	4b42      	ldr	r3, [pc, #264]	; (8002274 <processData+0x270>)
 800216c:	edc3 7a00 	vstr	s15, [r3]
			outBuffPtr[i] =  (uint16_t) (volume * out * 32768.0f);
 8002170:	4b40      	ldr	r3, [pc, #256]	; (8002274 <processData+0x270>)
 8002172:	ed93 7a00 	vldr	s14, [r3]
 8002176:	edd7 7a03 	vldr	s15, [r7, #12]
 800217a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217e:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002278 <processData+0x274>
 8002182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002186:	4b37      	ldr	r3, [pc, #220]	; (8002264 <processData+0x260>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002194:	ee17 2a90 	vmov	r2, s15
 8002198:	b292      	uxth	r2, r2
 800219a:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	3301      	adds	r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	2bff      	cmp	r3, #255	; 0xff
 80021a6:	ddbd      	ble.n	8002124 <processData+0x120>
 80021a8:	e049      	b.n	800223e <processData+0x23a>
		}
	} else if(currentEffect == ChorusEf) {
 80021aa:	4b2c      	ldr	r3, [pc, #176]	; (800225c <processData+0x258>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d145      	bne.n	800223e <processData+0x23a>
		Chorus_Set_Params(knob1);
 80021b2:	ed97 0a02 	vldr	s0, [r7, #8]
 80021b6:	f7fe fdb3 	bl	8000d20 <Chorus_Set_Params>
		static float in, out;
		for(int i = 0; i < DATA_SIZE; i++) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	e03b      	b.n	8002238 <processData+0x234>
			in = INT16_TO_FLOAT * inBuffPtr[i];
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <processData+0x25c>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002268 <processData+0x264>
 80021da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021de:	4b27      	ldr	r3, [pc, #156]	; (800227c <processData+0x278>)
 80021e0:	edc3 7a00 	vstr	s15, [r3]
			out = in + Chorus_Process(in);
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <processData+0x278>)
 80021e6:	edd3 7a00 	vldr	s15, [r3]
 80021ea:	eeb0 0a67 	vmov.f32	s0, s15
 80021ee:	f7fe fcc3 	bl	8000b78 <Chorus_Process>
 80021f2:	eeb0 7a40 	vmov.f32	s14, s0
 80021f6:	4b21      	ldr	r3, [pc, #132]	; (800227c <processData+0x278>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <processData+0x27c>)
 8002202:	edc3 7a00 	vstr	s15, [r3]
			outBuffPtr[i] = (uint16_t) (volume * out * 32768.0f);
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <processData+0x27c>)
 8002208:	ed93 7a00 	vldr	s14, [r3]
 800220c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002214:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002278 <processData+0x274>
 8002218:	ee67 7a87 	vmul.f32	s15, s15, s14
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <processData+0x260>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800222a:	ee17 2a90 	vmov	r2, s15
 800222e:	b292      	uxth	r2, r2
 8002230:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	3301      	adds	r3, #1
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2bff      	cmp	r3, #255	; 0xff
 800223c:	ddc0      	ble.n	80021c0 <processData+0x1bc>
		}
	}

	dataReady = 0;
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <processData+0x280>)
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	e000      	b.n	8002248 <processData+0x244>
		return;
 8002246:	bf00      	nop
}
 8002248:	3720      	adds	r7, #32
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	24000000 	.word	0x24000000
 8002254:	24000b34 	.word	0x24000b34
 8002258:	457ff000 	.word	0x457ff000
 800225c:	24000b45 	.word	0x24000b45
 8002260:	24000b3c 	.word	0x24000b3c
 8002264:	24000b40 	.word	0x24000b40
 8002268:	38000000 	.word	0x38000000
 800226c:	24000b50 	.word	0x24000b50
 8002270:	3fb33333 	.word	0x3fb33333
 8002274:	24000b54 	.word	0x24000b54
 8002278:	47000000 	.word	0x47000000
 800227c:	24000b58 	.word	0x24000b58
 8002280:	24000b5c 	.word	0x24000b5c
 8002284:	24000b44 	.word	0x24000b44

08002288 <initEffect>:

void initEffect(uint8_t effect, uint8_t direction) {
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	460a      	mov	r2, r1
 8002292:	71fb      	strb	r3, [r7, #7]
 8002294:	4613      	mov	r3, r2
 8002296:	71bb      	strb	r3, [r7, #6]
	if(effect == ChorusEf && direction == Right) {
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	2b05      	cmp	r3, #5
 800229c:	d108      	bne.n	80022b0 <initEffect+0x28>
 800229e:	79bb      	ldrb	r3, [r7, #6]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d105      	bne.n	80022b0 <initEffect+0x28>
		Tremolo_Free();
 80022a4:	f7ff f896 	bl	80013d4 <Tremolo_Free>
		Chorus_Init(SAMPLE_RATE);
 80022a8:	481e      	ldr	r0, [pc, #120]	; (8002324 <initEffect+0x9c>)
 80022aa:	f7fe fb5f 	bl	800096c <Chorus_Init>
 80022ae:	e034      	b.n	800231a <initEffect+0x92>
	} else if(effect == TriangleEf && direction == Left ) {
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d106      	bne.n	80022c4 <initEffect+0x3c>
 80022b6:	79bb      	ldrb	r3, [r7, #6]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <initEffect+0x3c>
		Tremolo_Init(SAMPLE_RATE);
 80022bc:	4819      	ldr	r0, [pc, #100]	; (8002324 <initEffect+0x9c>)
 80022be:	f7fe ffd9 	bl	8001274 <Tremolo_Init>
 80022c2:	e02a      	b.n	800231a <initEffect+0x92>
	} else if(effect == SineEf && direction == Right) {
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d108      	bne.n	80022dc <initEffect+0x54>
 80022ca:	79bb      	ldrb	r3, [r7, #6]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d105      	bne.n	80022dc <initEffect+0x54>
		Delay_Free();
 80022d0:	f7fe ff44 	bl	800115c <Delay_Free>
		Tremolo_Init(SAMPLE_RATE);
 80022d4:	4813      	ldr	r0, [pc, #76]	; (8002324 <initEffect+0x9c>)
 80022d6:	f7fe ffcd 	bl	8001274 <Tremolo_Init>
 80022da:	e01e      	b.n	800231a <initEffect+0x92>
	} else if(effect == DelayEf && direction == Right) {
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d106      	bne.n	80022f0 <initEffect+0x68>
 80022e2:	79bb      	ldrb	r3, [r7, #6]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d103      	bne.n	80022f0 <initEffect+0x68>
		Delay_Init(SAMPLE_RATE);
 80022e8:	480e      	ldr	r0, [pc, #56]	; (8002324 <initEffect+0x9c>)
 80022ea:	f7fe fd8b 	bl	8000e04 <Delay_Init>
 80022ee:	e014      	b.n	800231a <initEffect+0x92>
	} else if(effect == DelayEf && direction == Left) {
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d108      	bne.n	8002308 <initEffect+0x80>
 80022f6:	79bb      	ldrb	r3, [r7, #6]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d105      	bne.n	8002308 <initEffect+0x80>
		Delay_Free();
 80022fc:	f7fe ff2e 	bl	800115c <Delay_Free>
		Delay_Init(SAMPLE_RATE);
 8002300:	4808      	ldr	r0, [pc, #32]	; (8002324 <initEffect+0x9c>)
 8002302:	f7fe fd7f 	bl	8000e04 <Delay_Init>
 8002306:	e008      	b.n	800231a <initEffect+0x92>
	} else if(effect == CleanEf && direction == Left) {
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d105      	bne.n	800231a <initEffect+0x92>
 800230e:	79bb      	ldrb	r3, [r7, #6]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <initEffect+0x92>
		Delay_Free();
 8002314:	f7fe ff22 	bl	800115c <Delay_Free>
	}
}
 8002318:	e7ff      	b.n	800231a <initEffect+0x92>
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	00017715 	.word	0x00017715

08002328 <changeEffect>:

void changeEffect(uint8_t direction) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
	if(currentEffect == ChorusEf && direction == Right) return;
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <changeEffect+0x70>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b05      	cmp	r3, #5
 8002338:	d102      	bne.n	8002340 <changeEffect+0x18>
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d024      	beq.n	800238a <changeEffect+0x62>
	if(currentEffect == CleanEf && direction == Left) return;
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <changeEffect+0x70>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <changeEffect+0x26>
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d01f      	beq.n	800238e <changeEffect+0x66>

	effectReady = 0;
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <changeEffect+0x74>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]

	if(direction == Right) {
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d106      	bne.n	8002368 <changeEffect+0x40>
		currentEffect++;
 800235a:	4b0f      	ldr	r3, [pc, #60]	; (8002398 <changeEffect+0x70>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	3301      	adds	r3, #1
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <changeEffect+0x70>)
 8002364:	701a      	strb	r2, [r3, #0]
 8002366:	e005      	b.n	8002374 <changeEffect+0x4c>
	} else {
		currentEffect--;
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <changeEffect+0x70>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	3b01      	subs	r3, #1
 800236e:	b2da      	uxtb	r2, r3
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <changeEffect+0x70>)
 8002372:	701a      	strb	r2, [r3, #0]
	}

	initEffect(currentEffect, direction);
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <changeEffect+0x70>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	79fa      	ldrb	r2, [r7, #7]
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff83 	bl	8002288 <initEffect>
	effectReady = 1;
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <changeEffect+0x74>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	e002      	b.n	8002390 <changeEffect+0x68>
	if(currentEffect == ChorusEf && direction == Right) return;
 800238a:	bf00      	nop
 800238c:	e000      	b.n	8002390 <changeEffect+0x68>
	if(currentEffect == CleanEf && direction == Left) return;
 800238e:	bf00      	nop
}
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	24000b45 	.word	0x24000b45
 800239c:	24000000 	.word	0x24000000

080023a0 <displayEffect>:

uint8_t MSG[50] = {'\0'};

void displayEffect(uint8_t effect) {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
	lcd_clear();
 80023aa:	f7ff fc7d 	bl	8001ca8 <lcd_clear>
//	lcd_put_cur(0,0);
//	sprintf(MSG, "%d\n\n\r", effect);
//	lcd_send_string(MSG);
	lcd_put_cur(1,0);
 80023ae:	2100      	movs	r1, #0
 80023b0:	2001      	movs	r0, #1
 80023b2:	f7ff fc90 	bl	8001cd6 <lcd_put_cur>
	if(effect == ChorusEf) {
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d103      	bne.n	80023c4 <displayEffect+0x24>
		lcd_send_string("Chorus");
 80023bc:	4814      	ldr	r0, [pc, #80]	; (8002410 <displayEffect+0x70>)
 80023be:	f7ff fce6 	bl	8001d8e <lcd_send_string>
	} else if(effect == SquareEf) {
		lcd_send_string("Tremolo: Square");
	} else if(effect == CleanEf) {
		lcd_send_string("Clean");
	}
}
 80023c2:	e021      	b.n	8002408 <displayEffect+0x68>
	} else if(effect == DelayEf) {
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d103      	bne.n	80023d2 <displayEffect+0x32>
		lcd_send_string("Delay");
 80023ca:	4812      	ldr	r0, [pc, #72]	; (8002414 <displayEffect+0x74>)
 80023cc:	f7ff fcdf 	bl	8001d8e <lcd_send_string>
}
 80023d0:	e01a      	b.n	8002408 <displayEffect+0x68>
	} else if(effect == SineEf) {
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d103      	bne.n	80023e0 <displayEffect+0x40>
		lcd_send_string("Tremolo: Sine");
 80023d8:	480f      	ldr	r0, [pc, #60]	; (8002418 <displayEffect+0x78>)
 80023da:	f7ff fcd8 	bl	8001d8e <lcd_send_string>
}
 80023de:	e013      	b.n	8002408 <displayEffect+0x68>
	} else if(effect == TriangleEf) {
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d103      	bne.n	80023ee <displayEffect+0x4e>
		lcd_send_string("Tremolo: Triangle");
 80023e6:	480d      	ldr	r0, [pc, #52]	; (800241c <displayEffect+0x7c>)
 80023e8:	f7ff fcd1 	bl	8001d8e <lcd_send_string>
}
 80023ec:	e00c      	b.n	8002408 <displayEffect+0x68>
	} else if(effect == SquareEf) {
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d103      	bne.n	80023fc <displayEffect+0x5c>
		lcd_send_string("Tremolo: Square");
 80023f4:	480a      	ldr	r0, [pc, #40]	; (8002420 <displayEffect+0x80>)
 80023f6:	f7ff fcca 	bl	8001d8e <lcd_send_string>
}
 80023fa:	e005      	b.n	8002408 <displayEffect+0x68>
	} else if(effect == CleanEf) {
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <displayEffect+0x68>
		lcd_send_string("Clean");
 8002402:	4808      	ldr	r0, [pc, #32]	; (8002424 <displayEffect+0x84>)
 8002404:	f7ff fcc3 	bl	8001d8e <lcd_send_string>
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	0800d160 	.word	0x0800d160
 8002414:	0800d168 	.word	0x0800d168
 8002418:	0800d170 	.word	0x0800d170
 800241c:	0800d180 	.word	0x0800d180
 8002420:	0800d194 	.word	0x0800d194
 8002424:	0800d1a4 	.word	0x0800d1a4

08002428 <HAL_TIM_PeriodElapsedCallback>:
int32_t counterOld = 0;

uint8_t encoderDirection = -1;
uint8_t triggerChange = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	if(htim == &htim4) {
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d12f      	bne.n	8002498 <HAL_TIM_PeriodElapsedCallback+0x70>
		uint16_t ctr = __HAL_TIM_GET_COUNTER(&htim3);
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	81fb      	strh	r3, [r7, #14]

		if(counterOld > ctr) {
 8002440:	89fa      	ldrh	r2, [r7, #14]
 8002442:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	da06      	bge.n	8002458 <HAL_TIM_PeriodElapsedCallback+0x30>
			encoderDirection = Left;
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x84>)
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
			triggerChange = 1;
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
 8002456:	e00e      	b.n	8002476 <HAL_TIM_PeriodElapsedCallback+0x4e>
		} else if (counterOld < ctr) {
 8002458:	89fa      	ldrh	r2, [r7, #14]
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	dd06      	ble.n	8002470 <HAL_TIM_PeriodElapsedCallback+0x48>
			encoderDirection = Right;
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
			triggerChange = 1;
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	e002      	b.n	8002476 <HAL_TIM_PeriodElapsedCallback+0x4e>
		} else {
			triggerChange = 0;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
		}
		if(triggerChange) {
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00c      	beq.n	8002498 <HAL_TIM_PeriodElapsedCallback+0x70>
			changeEffect(encoderDirection);
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff ff50 	bl	8002328 <changeEffect>
			displayEffect(currentEffect);
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff87 	bl	80023a0 <displayEffect>

			counterOld = ctr;
 8002492:	89fb      	ldrh	r3, [r7, #14]
 8002494:	4a04      	ldr	r2, [pc, #16]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002496:	6013      	str	r3, [r2, #0]
		}
	}
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	24000bfc 	.word	0x24000bfc
 80024a4:	24000bb0 	.word	0x24000bb0
 80024a8:	24000b48 	.word	0x24000b48
 80024ac:	24000001 	.word	0x24000001
 80024b0:	24000b4c 	.word	0x24000b4c
 80024b4:	24000b45 	.word	0x24000b45

080024b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024be:	f000 fd6f 	bl	8002fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024c2:	f000 f879 	bl	80025b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80024c6:	f000 f8f3 	bl	80026b0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024ca:	f7ff faa5 	bl	8001a18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80024ce:	f000 fc83 	bl	8002dd8 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80024d2:	f7ff fa71 	bl	80019b8 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 80024d6:	f000 fd31 	bl	8002f3c <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80024da:	f7fe ff8d 	bl	80013f8 <MX_ADC1_Init>
  MX_TIM6_Init();
 80024de:	f000 fb85 	bl	8002bec <MX_TIM6_Init>
  MX_DAC1_Init();
 80024e2:	f7ff f9bd 	bl	8001860 <MX_DAC1_Init>
  MX_ADC2_Init();
 80024e6:	f7ff f801 	bl	80014ec <MX_ADC2_Init>
  MX_TIM1_Init();
 80024ea:	f000 fa85 	bl	80029f8 <MX_TIM1_Init>
  MX_I2C2_Init();
 80024ee:	f7ff fc63 	bl	8001db8 <MX_I2C2_Init>
  MX_TIM4_Init();
 80024f2:	f000 fb2b 	bl	8002b4c <MX_TIM4_Init>
  MX_TIM3_Init();
 80024f6:	f000 fad3 	bl	8002aa0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80024fa:	4821      	ldr	r0, [pc, #132]	; (8002580 <main+0xc8>)
 80024fc:	f008 fbca 	bl	800ac94 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);
 8002500:	4820      	ldr	r0, [pc, #128]	; (8002584 <main+0xcc>)
 8002502:	f008 fbc7 	bl	800ac94 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcData, BUFFER_SIZE);
 8002506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250a:	491f      	ldr	r1, [pc, #124]	; (8002588 <main+0xd0>)
 800250c:	481f      	ldr	r0, [pc, #124]	; (800258c <main+0xd4>)
 800250e:	f001 f93f 	bl	8003790 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) dacData, BUFFER_SIZE, DAC_ALIGN_12B_R);
 8002512:	2300      	movs	r3, #0
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800251a:	4a1d      	ldr	r2, [pc, #116]	; (8002590 <main+0xd8>)
 800251c:	2100      	movs	r1, #0
 800251e:	481d      	ldr	r0, [pc, #116]	; (8002594 <main+0xdc>)
 8002520:	f002 f8aa 	bl	8004678 <HAL_DAC_Start_DMA>

//  Delay_Init(SAMPLE_RATE);
//  Chorus_Init(SAMPLE_RATE);
//  Tremolo_Init(SAMPLE_RATE);
//  Flanger_Init();
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2Data, 3);
 8002524:	2203      	movs	r2, #3
 8002526:	491c      	ldr	r1, [pc, #112]	; (8002598 <main+0xe0>)
 8002528:	481c      	ldr	r0, [pc, #112]	; (800259c <main+0xe4>)
 800252a:	f001 f931 	bl	8003790 <HAL_ADC_Start_DMA>

  lcd_init();
 800252e:	f7ff fbf1 	bl	8001d14 <lcd_init>
    lcd_send_string("Guitar Multi-FX");
 8002532:	481b      	ldr	r0, [pc, #108]	; (80025a0 <main+0xe8>)
 8002534:	f7ff fc2b 	bl	8001d8e <lcd_send_string>

    HAL_Delay(1000);
 8002538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800253c:	f000 fdc2 	bl	80030c4 <HAL_Delay>

    lcd_put_cur(1,0);
 8002540:	2100      	movs	r1, #0
 8002542:	2001      	movs	r0, #1
 8002544:	f7ff fbc7 	bl	8001cd6 <lcd_put_cur>
    lcd_send_string("v1.1 [SSST 2022]");
 8002548:	4816      	ldr	r0, [pc, #88]	; (80025a4 <main+0xec>)
 800254a:	f7ff fc20 	bl	8001d8e <lcd_send_string>

    HAL_Delay(1000);
 800254e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002552:	f000 fdb7 	bl	80030c4 <HAL_Delay>

    HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8002556:	213c      	movs	r1, #60	; 0x3c
 8002558:	4813      	ldr	r0, [pc, #76]	; (80025a8 <main+0xf0>)
 800255a:	f008 fd29 	bl	800afb0 <HAL_TIM_Encoder_Start_IT>

    HAL_TIM_Base_Start_IT(&htim4);
 800255e:	4813      	ldr	r0, [pc, #76]	; (80025ac <main+0xf4>)
 8002560:	f008 fc08 	bl	800ad74 <HAL_TIM_Base_Start_IT>

    lcd_clear();
 8002564:	f7ff fba0 	bl	8001ca8 <lcd_clear>
    displayEffect(currentEffect);
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <main+0xf8>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff17 	bl	80023a0 <displayEffect>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(dataReady) {
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <main+0xfc>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0fb      	beq.n	8002572 <main+0xba>
		  processData();
 800257a:	f7ff fd43 	bl	8002004 <processData>
	  if(dataReady) {
 800257e:	e7f8      	b.n	8002572 <main+0xba>
 8002580:	24000b64 	.word	0x24000b64
 8002584:	24000c48 	.word	0x24000c48
 8002588:	24000334 	.word	0x24000334
 800258c:	240000a0 	.word	0x240000a0
 8002590:	24000734 	.word	0x24000734
 8002594:	2400025c 	.word	0x2400025c
 8002598:	24000b34 	.word	0x24000b34
 800259c:	24000104 	.word	0x24000104
 80025a0:	0800d1ac 	.word	0x0800d1ac
 80025a4:	0800d1bc 	.word	0x0800d1bc
 80025a8:	24000bb0 	.word	0x24000bb0
 80025ac:	24000bfc 	.word	0x24000bfc
 80025b0:	24000b45 	.word	0x24000b45
 80025b4:	24000b44 	.word	0x24000b44

080025b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b09c      	sub	sp, #112	; 0x70
 80025bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c2:	224c      	movs	r2, #76	; 0x4c
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f00a fb98 	bl	800ccfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	2220      	movs	r2, #32
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f00a fb92 	bl	800ccfc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80025d8:	2004      	movs	r0, #4
 80025da:	f005 fa6b 	bl	8007ab4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80025de:	2300      	movs	r3, #0
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <SystemClock_Config+0xf0>)
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	4a30      	ldr	r2, [pc, #192]	; (80026a8 <SystemClock_Config+0xf0>)
 80025e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ec:	6193      	str	r3, [r2, #24]
 80025ee:	4b2e      	ldr	r3, [pc, #184]	; (80026a8 <SystemClock_Config+0xf0>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80025fa:	bf00      	nop
 80025fc:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <SystemClock_Config+0xf0>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002608:	d1f8      	bne.n	80025fc <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800260a:	4b28      	ldr	r3, [pc, #160]	; (80026ac <SystemClock_Config+0xf4>)
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	f023 0303 	bic.w	r3, r3, #3
 8002612:	4a26      	ldr	r2, [pc, #152]	; (80026ac <SystemClock_Config+0xf4>)
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 800261a:	2329      	movs	r3, #41	; 0x29
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800261e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002624:	2301      	movs	r3, #1
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002628:	2301      	movs	r3, #1
 800262a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800262c:	2302      	movs	r3, #2
 800262e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002630:	2302      	movs	r3, #2
 8002632:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002634:	2301      	movs	r3, #1
 8002636:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8002638:	2346      	movs	r3, #70	; 0x46
 800263a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800263c:	2302      	movs	r3, #2
 800263e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002640:	2304      	movs	r3, #4
 8002642:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002644:	2302      	movs	r3, #2
 8002646:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002648:	230c      	movs	r3, #12
 800264a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800264c:	2300      	movs	r3, #0
 800264e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002658:	4618      	mov	r0, r3
 800265a:	f005 fa85 	bl	8007b68 <HAL_RCC_OscConfig>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002664:	f000 f8a0 	bl	80027a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002668:	233f      	movs	r3, #63	; 0x3f
 800266a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800266c:	2303      	movs	r3, #3
 800266e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002678:	2340      	movs	r3, #64	; 0x40
 800267a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800267c:	2340      	movs	r3, #64	; 0x40
 800267e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002684:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002686:	2340      	movs	r3, #64	; 0x40
 8002688:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	2107      	movs	r1, #7
 800268e:	4618      	mov	r0, r3
 8002690:	f005 fe6e 	bl	8008370 <HAL_RCC_ClockConfig>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800269a:	f000 f885 	bl	80027a8 <Error_Handler>
  }
}
 800269e:	bf00      	nop
 80026a0:	3770      	adds	r7, #112	; 0x70
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	58024800 	.word	0x58024800
 80026ac:	58024400 	.word	0x58024400

080026b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b0ae      	sub	sp, #184	; 0xb8
 80026b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b6:	463b      	mov	r3, r7
 80026b8:	22b8      	movs	r2, #184	; 0xb8
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f00a fb1d 	bl	800ccfc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80026c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80026c6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80026c8:	2301      	movs	r3, #1
 80026ca:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80026cc:	2310      	movs	r3, #16
 80026ce:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80026d0:	2301      	movs	r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80026d4:	2302      	movs	r3, #2
 80026d6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80026d8:	2302      	movs	r3, #2
 80026da:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80026dc:	23c0      	movs	r3, #192	; 0xc0
 80026de:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026ee:	463b      	mov	r3, r7
 80026f0:	4618      	mov	r0, r3
 80026f2:	f006 f9c9 	bl	8008a88 <HAL_RCCEx_PeriphCLKConfig>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80026fc:	f000 f854 	bl	80027a8 <Error_Handler>
  }
}
 8002700:	bf00      	nop
 8002702:	37b8      	adds	r7, #184	; 0xb8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) {
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002718:	d13b      	bne.n	8002792 <HAL_GPIO_EXTI_Callback+0x8a>
		effectReady = 0;
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_GPIO_EXTI_Callback+0x94>)
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]

		if(currentEffect == ChorusEf) {
 8002720:	4b1f      	ldr	r3, [pc, #124]	; (80027a0 <HAL_GPIO_EXTI_Callback+0x98>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b05      	cmp	r3, #5
 8002726:	d105      	bne.n	8002734 <HAL_GPIO_EXTI_Callback+0x2c>
			currentEffect = 0;
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <HAL_GPIO_EXTI_Callback+0x98>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
			Chorus_Free();
 800272e:	f7fe fb51 	bl	8000dd4 <Chorus_Free>
 8002732:	e00c      	b.n	800274e <HAL_GPIO_EXTI_Callback+0x46>
		} else if(currentEffect == DelayEf) {
 8002734:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <HAL_GPIO_EXTI_Callback+0x98>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d102      	bne.n	8002742 <HAL_GPIO_EXTI_Callback+0x3a>
			Delay_Free();
 800273c:	f7fe fd0e 	bl	800115c <Delay_Free>
 8002740:	e005      	b.n	800274e <HAL_GPIO_EXTI_Callback+0x46>
		} else if(currentEffect == 4) {
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <HAL_GPIO_EXTI_Callback+0x98>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b04      	cmp	r3, #4
 8002748:	d101      	bne.n	800274e <HAL_GPIO_EXTI_Callback+0x46>
			Tremolo_Free();
 800274a:	f7fe fe43 	bl	80013d4 <Tremolo_Free>
		}

		currentEffect++;
 800274e:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <HAL_GPIO_EXTI_Callback+0x98>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	3301      	adds	r3, #1
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_GPIO_EXTI_Callback+0x98>)
 8002758:	701a      	strb	r2, [r3, #0]

		if(currentEffect == ChorusEf) {
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <HAL_GPIO_EXTI_Callback+0x98>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b05      	cmp	r3, #5
 8002760:	d103      	bne.n	800276a <HAL_GPIO_EXTI_Callback+0x62>
			Chorus_Init(SAMPLE_RATE);
 8002762:	4810      	ldr	r0, [pc, #64]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002764:	f7fe f902 	bl	800096c <Chorus_Init>
 8002768:	e00f      	b.n	800278a <HAL_GPIO_EXTI_Callback+0x82>
		}
		else if(currentEffect == DelayEf) {
 800276a:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <HAL_GPIO_EXTI_Callback+0x98>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d103      	bne.n	800277a <HAL_GPIO_EXTI_Callback+0x72>
			Delay_Init(SAMPLE_RATE);
 8002772:	480c      	ldr	r0, [pc, #48]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002774:	f7fe fb46 	bl	8000e04 <Delay_Init>
 8002778:	e007      	b.n	800278a <HAL_GPIO_EXTI_Callback+0x82>
		} else if(Is_Tremolo()) {
 800277a:	f7ff fc0b 	bl	8001f94 <Is_Tremolo>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_GPIO_EXTI_Callback+0x82>
			Tremolo_Init(SAMPLE_RATE);
 8002784:	4807      	ldr	r0, [pc, #28]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002786:	f7fe fd75 	bl	8001274 <Tremolo_Init>
		}

		effectReady = 1;
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <HAL_GPIO_EXTI_Callback+0x94>)
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
	} else {
		__NOP();
	}
}
 8002790:	e000      	b.n	8002794 <HAL_GPIO_EXTI_Callback+0x8c>
		__NOP();
 8002792:	bf00      	nop
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	24000000 	.word	0x24000000
 80027a0:	24000b45 	.word	0x24000b45
 80027a4:	00017715 	.word	0x00017715

080027a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ac:	b672      	cpsid	i
}
 80027ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <Error_Handler+0x8>
	...

080027b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_MspInit+0x30>)
 80027bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80027c0:	4a08      	ldr	r2, [pc, #32]	; (80027e4 <HAL_MspInit+0x30>)
 80027c2:	f043 0302 	orr.w	r3, r3, #2
 80027c6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_MspInit+0x30>)
 80027cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	607b      	str	r3, [r7, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	58024400 	.word	0x58024400

080027e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <NMI_Handler+0x4>

080027ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f2:	e7fe      	b.n	80027f2 <HardFault_Handler+0x4>

080027f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027f8:	e7fe      	b.n	80027f8 <MemManage_Handler+0x4>

080027fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027fe:	e7fe      	b.n	80027fe <BusFault_Handler+0x4>

08002800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002804:	e7fe      	b.n	8002804 <UsageFault_Handler+0x4>

08002806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002834:	f000 fc26 	bl	8003084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <DMA1_Stream0_IRQHandler+0x10>)
 8002842:	f002 ffb7 	bl	80057b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	24000168 	.word	0x24000168

08002850 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002854:	4802      	ldr	r0, [pc, #8]	; (8002860 <DMA1_Stream1_IRQHandler+0x10>)
 8002856:	f002 ffad 	bl	80057b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	24000270 	.word	0x24000270

08002864 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002868:	4802      	ldr	r0, [pc, #8]	; (8002874 <DMA1_Stream2_IRQHandler+0x10>)
 800286a:	f002 ffa3 	bl	80057b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	240001e0 	.word	0x240001e0

08002878 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800287c:	4802      	ldr	r0, [pc, #8]	; (8002888 <TIM4_IRQHandler+0x10>)
 800287e:	f008 fc45 	bl	800b10c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	24000bfc 	.word	0x24000bfc

0800288c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002890:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002894:	f004 fcd9 	bl	800724a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}

0800289c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <_sbrk+0x5c>)
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <_sbrk+0x60>)
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <_sbrk+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <_sbrk+0x64>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <_sbrk+0x68>)
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <_sbrk+0x64>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d207      	bcs.n	80028dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028cc:	f00a f9dc 	bl	800cc88 <__errno>
 80028d0:	4603      	mov	r3, r0
 80028d2:	220c      	movs	r2, #12
 80028d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	e009      	b.n	80028f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <_sbrk+0x64>)
 80028ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	24100000 	.word	0x24100000
 80028fc:	00000400 	.word	0x00000400
 8002900:	24000b60 	.word	0x24000b60
 8002904:	24000d38 	.word	0x24000d38

08002908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800290c:	4b32      	ldr	r3, [pc, #200]	; (80029d8 <SystemInit+0xd0>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	4a31      	ldr	r2, [pc, #196]	; (80029d8 <SystemInit+0xd0>)
 8002914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800291c:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <SystemInit+0xd4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	2b02      	cmp	r3, #2
 8002926:	d807      	bhi.n	8002938 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002928:	4b2c      	ldr	r3, [pc, #176]	; (80029dc <SystemInit+0xd4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 030f 	bic.w	r3, r3, #15
 8002930:	4a2a      	ldr	r2, [pc, #168]	; (80029dc <SystemInit+0xd4>)
 8002932:	f043 0303 	orr.w	r3, r3, #3
 8002936:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002938:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <SystemInit+0xd8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a28      	ldr	r2, [pc, #160]	; (80029e0 <SystemInit+0xd8>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002944:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <SystemInit+0xd8>)
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800294a:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <SystemInit+0xd8>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4924      	ldr	r1, [pc, #144]	; (80029e0 <SystemInit+0xd8>)
 8002950:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <SystemInit+0xdc>)
 8002952:	4013      	ands	r3, r2
 8002954:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <SystemInit+0xd4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002962:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <SystemInit+0xd4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 030f 	bic.w	r3, r3, #15
 800296a:	4a1c      	ldr	r2, [pc, #112]	; (80029dc <SystemInit+0xd4>)
 800296c:	f043 0303 	orr.w	r3, r3, #3
 8002970:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002972:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <SystemInit+0xd8>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <SystemInit+0xd8>)
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800297e:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <SystemInit+0xd8>)
 8002980:	2200      	movs	r2, #0
 8002982:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002984:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <SystemInit+0xd8>)
 8002986:	4a18      	ldr	r2, [pc, #96]	; (80029e8 <SystemInit+0xe0>)
 8002988:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <SystemInit+0xd8>)
 800298c:	4a17      	ldr	r2, [pc, #92]	; (80029ec <SystemInit+0xe4>)
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002990:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <SystemInit+0xd8>)
 8002992:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <SystemInit+0xe8>)
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <SystemInit+0xd8>)
 8002998:	2200      	movs	r2, #0
 800299a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800299c:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <SystemInit+0xd8>)
 800299e:	4a14      	ldr	r2, [pc, #80]	; (80029f0 <SystemInit+0xe8>)
 80029a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <SystemInit+0xd8>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80029a8:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <SystemInit+0xd8>)
 80029aa:	4a11      	ldr	r2, [pc, #68]	; (80029f0 <SystemInit+0xe8>)
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <SystemInit+0xd8>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029b4:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <SystemInit+0xd8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <SystemInit+0xd8>)
 80029ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <SystemInit+0xd8>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <SystemInit+0xec>)
 80029c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80029cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00
 80029dc:	52002000 	.word	0x52002000
 80029e0:	58024400 	.word	0x58024400
 80029e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80029e8:	02020200 	.word	0x02020200
 80029ec:	01ff0000 	.word	0x01ff0000
 80029f0:	01010280 	.word	0x01010280
 80029f4:	52004000 	.word	0x52004000

080029f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029fe:	f107 0310 	add.w	r3, r7, #16
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]
 8002a08:	609a      	str	r2, [r3, #8]
 8002a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a16:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <MX_TIM1_Init+0xa0>)
 8002a18:	4a20      	ldr	r2, [pc, #128]	; (8002a9c <MX_TIM1_Init+0xa4>)
 8002a1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8002a1c:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <MX_TIM1_Init+0xa0>)
 8002a1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a24:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <MX_TIM1_Init+0xa0>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2800-1;
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <MX_TIM1_Init+0xa0>)
 8002a2c:	f640 22ef 	movw	r2, #2799	; 0xaef
 8002a30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <MX_TIM1_Init+0xa0>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a38:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <MX_TIM1_Init+0xa0>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a3e:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <MX_TIM1_Init+0xa0>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a44:	4814      	ldr	r0, [pc, #80]	; (8002a98 <MX_TIM1_Init+0xa0>)
 8002a46:	f008 f8cd 	bl	800abe4 <HAL_TIM_Base_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002a50:	f7ff feaa 	bl	80027a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a5a:	f107 0310 	add.w	r3, r7, #16
 8002a5e:	4619      	mov	r1, r3
 8002a60:	480d      	ldr	r0, [pc, #52]	; (8002a98 <MX_TIM1_Init+0xa0>)
 8002a62:	f008 fc73 	bl	800b34c <HAL_TIM_ConfigClockSource>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002a6c:	f7ff fe9c 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a70:	2320      	movs	r3, #32
 8002a72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4805      	ldr	r0, [pc, #20]	; (8002a98 <MX_TIM1_Init+0xa0>)
 8002a82:	f008 fee1 	bl	800b848 <HAL_TIMEx_MasterConfigSynchronization>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002a8c:	f7ff fe8c 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002a90:	bf00      	nop
 8002a92:	3720      	adds	r7, #32
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	24000b64 	.word	0x24000b64
 8002a9c:	40010000 	.word	0x40010000

08002aa0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08c      	sub	sp, #48	; 0x30
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002aa6:	f107 030c 	add.w	r3, r7, #12
 8002aaa:	2224      	movs	r2, #36	; 0x24
 8002aac:	2100      	movs	r1, #0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f00a f924 	bl	800ccfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab4:	463b      	mov	r3, r7
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002abe:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <MX_TIM3_Init+0xa4>)
 8002ac0:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <MX_TIM3_Init+0xa8>)
 8002ac2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ac4:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <MX_TIM3_Init+0xa4>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <MX_TIM3_Init+0xa4>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ad0:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <MX_TIM3_Init+0xa4>)
 8002ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ad6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <MX_TIM3_Init+0xa4>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <MX_TIM3_Init+0xa4>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002aec:	2301      	movs	r3, #1
 8002aee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002af8:	2302      	movs	r3, #2
 8002afa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002afc:	2301      	movs	r3, #1
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b00:	2300      	movs	r3, #0
 8002b02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002b08:	f107 030c 	add.w	r3, r7, #12
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	480d      	ldr	r0, [pc, #52]	; (8002b44 <MX_TIM3_Init+0xa4>)
 8002b10:	f008 f9a8 	bl	800ae64 <HAL_TIM_Encoder_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002b1a:	f7ff fe45 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b26:	463b      	mov	r3, r7
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4806      	ldr	r0, [pc, #24]	; (8002b44 <MX_TIM3_Init+0xa4>)
 8002b2c:	f008 fe8c 	bl	800b848 <HAL_TIMEx_MasterConfigSynchronization>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002b36:	f7ff fe37 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b3a:	bf00      	nop
 8002b3c:	3730      	adds	r7, #48	; 0x30
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	24000bb0 	.word	0x24000bb0
 8002b48:	40000400 	.word	0x40000400

08002b4c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b52:	f107 0310 	add.w	r3, r7, #16
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <MX_TIM4_Init+0x98>)
 8002b6c:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <MX_TIM4_Init+0x9c>)
 8002b6e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2500;
 8002b70:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <MX_TIM4_Init+0x98>)
 8002b72:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002b76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b78:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <MX_TIM4_Init+0x98>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b7e:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <MX_TIM4_Init+0x98>)
 8002b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b86:	4b17      	ldr	r3, [pc, #92]	; (8002be4 <MX_TIM4_Init+0x98>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b8c:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <MX_TIM4_Init+0x98>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b92:	4814      	ldr	r0, [pc, #80]	; (8002be4 <MX_TIM4_Init+0x98>)
 8002b94:	f008 f826 	bl	800abe4 <HAL_TIM_Base_Init>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002b9e:	f7ff fe03 	bl	80027a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ba8:	f107 0310 	add.w	r3, r7, #16
 8002bac:	4619      	mov	r1, r3
 8002bae:	480d      	ldr	r0, [pc, #52]	; (8002be4 <MX_TIM4_Init+0x98>)
 8002bb0:	f008 fbcc 	bl	800b34c <HAL_TIM_ConfigClockSource>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002bba:	f7ff fdf5 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4806      	ldr	r0, [pc, #24]	; (8002be4 <MX_TIM4_Init+0x98>)
 8002bcc:	f008 fe3c 	bl	800b848 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002bd6:	f7ff fde7 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bda:	bf00      	nop
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	24000bfc 	.word	0x24000bfc
 8002be8:	40000800 	.word	0x40000800

08002bec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002bfc:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <MX_TIM6_Init+0x64>)
 8002bfe:	4a15      	ldr	r2, [pc, #84]	; (8002c54 <MX_TIM6_Init+0x68>)
 8002c00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002c02:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <MX_TIM6_Init+0x64>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <MX_TIM6_Init+0x64>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2916-1;
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <MX_TIM6_Init+0x64>)
 8002c10:	f640 3263 	movw	r2, #2915	; 0xb63
 8002c14:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <MX_TIM6_Init+0x64>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c1c:	480c      	ldr	r0, [pc, #48]	; (8002c50 <MX_TIM6_Init+0x64>)
 8002c1e:	f007 ffe1 	bl	800abe4 <HAL_TIM_Base_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002c28:	f7ff fdbe 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	4805      	ldr	r0, [pc, #20]	; (8002c50 <MX_TIM6_Init+0x64>)
 8002c3a:	f008 fe05 	bl	800b848 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002c44:	f7ff fdb0 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c48:	bf00      	nop
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	24000c48 	.word	0x24000c48
 8002c54:	40001000 	.word	0x40001000

08002c58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <HAL_TIM_Base_MspInit+0x9c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d10f      	bne.n	8002c8a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c6a:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <HAL_TIM_Base_MspInit+0xa0>)
 8002c6c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002c70:	4a21      	ldr	r2, [pc, #132]	; (8002cf8 <HAL_TIM_Base_MspInit+0xa0>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002c7a:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <HAL_TIM_Base_MspInit+0xa0>)
 8002c7c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002c88:	e030      	b.n	8002cec <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM4)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1b      	ldr	r2, [pc, #108]	; (8002cfc <HAL_TIM_Base_MspInit+0xa4>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d117      	bne.n	8002cc4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c94:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <HAL_TIM_Base_MspInit+0xa0>)
 8002c96:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002c9a:	4a17      	ldr	r2, [pc, #92]	; (8002cf8 <HAL_TIM_Base_MspInit+0xa0>)
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002ca4:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_TIM_Base_MspInit+0xa0>)
 8002ca6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	201e      	movs	r0, #30
 8002cb8:	f001 fc87 	bl	80045ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002cbc:	201e      	movs	r0, #30
 8002cbe:	f001 fc9e 	bl	80045fe <HAL_NVIC_EnableIRQ>
}
 8002cc2:	e013      	b.n	8002cec <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM6)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <HAL_TIM_Base_MspInit+0xa8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d10e      	bne.n	8002cec <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_TIM_Base_MspInit+0xa0>)
 8002cd0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002cd4:	4a08      	ldr	r2, [pc, #32]	; (8002cf8 <HAL_TIM_Base_MspInit+0xa0>)
 8002cd6:	f043 0310 	orr.w	r3, r3, #16
 8002cda:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_TIM_Base_MspInit+0xa0>)
 8002ce0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	bf00      	nop
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	58024400 	.word	0x58024400
 8002cfc:	40000800 	.word	0x40000800
 8002d00:	40001000 	.word	0x40001000

08002d04 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	60da      	str	r2, [r3, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a29      	ldr	r2, [pc, #164]	; (8002dc8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d14c      	bne.n	8002dc0 <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d26:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002d28:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002d2c:	4a27      	ldr	r2, [pc, #156]	; (8002dcc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002d36:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002d38:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d44:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002d46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d4a:	4a20      	ldr	r2, [pc, #128]	; (8002dcc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002d56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d62:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002d64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d68:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002d6a:	f043 0304 	orr.w	r3, r3, #4
 8002d6e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002d72:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <HAL_TIM_Encoder_MspInit+0xc8>)
 8002d74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d80:	2340      	movs	r3, #64	; 0x40
 8002d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d90:	2302      	movs	r3, #2
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4619      	mov	r1, r3
 8002d9a:	480d      	ldr	r0, [pc, #52]	; (8002dd0 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002d9c:	f004 f88c 	bl	8006eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002db0:	2302      	movs	r3, #2
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	4619      	mov	r1, r3
 8002dba:	4806      	ldr	r0, [pc, #24]	; (8002dd4 <HAL_TIM_Encoder_MspInit+0xd0>)
 8002dbc:	f004 f87c 	bl	8006eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	3728      	adds	r7, #40	; 0x28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	58024400 	.word	0x58024400
 8002dd0:	58020000 	.word	0x58020000
 8002dd4:	58020800 	.word	0x58020800

08002dd8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ddc:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <MX_USART3_UART_Init+0x90>)
 8002dde:	4a23      	ldr	r2, [pc, #140]	; (8002e6c <MX_USART3_UART_Init+0x94>)
 8002de0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002de2:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <MX_USART3_UART_Init+0x90>)
 8002de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002de8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dea:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <MX_USART3_UART_Init+0x90>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <MX_USART3_UART_Init+0x90>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002df6:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <MX_USART3_UART_Init+0x90>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <MX_USART3_UART_Init+0x90>)
 8002dfe:	220c      	movs	r2, #12
 8002e00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <MX_USART3_UART_Init+0x90>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <MX_USART3_UART_Init+0x90>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <MX_USART3_UART_Init+0x90>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e14:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <MX_USART3_UART_Init+0x90>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e1a:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <MX_USART3_UART_Init+0x90>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e20:	4811      	ldr	r0, [pc, #68]	; (8002e68 <MX_USART3_UART_Init+0x90>)
 8002e22:	f008 fdbd 	bl	800b9a0 <HAL_UART_Init>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e2c:	f7ff fcbc 	bl	80027a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e30:	2100      	movs	r1, #0
 8002e32:	480d      	ldr	r0, [pc, #52]	; (8002e68 <MX_USART3_UART_Init+0x90>)
 8002e34:	f009 fe5e 	bl	800caf4 <HAL_UARTEx_SetTxFifoThreshold>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e3e:	f7ff fcb3 	bl	80027a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e42:	2100      	movs	r1, #0
 8002e44:	4808      	ldr	r0, [pc, #32]	; (8002e68 <MX_USART3_UART_Init+0x90>)
 8002e46:	f009 fe93 	bl	800cb70 <HAL_UARTEx_SetRxFifoThreshold>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e50:	f7ff fcaa 	bl	80027a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e54:	4804      	ldr	r0, [pc, #16]	; (8002e68 <MX_USART3_UART_Init+0x90>)
 8002e56:	f009 fe14 	bl	800ca82 <HAL_UARTEx_DisableFifoMode>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e60:	f7ff fca2 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	24000c94 	.word	0x24000c94
 8002e6c:	40004800 	.word	0x40004800

08002e70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b0b8      	sub	sp, #224	; 0xe0
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	22b8      	movs	r2, #184	; 0xb8
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	f009 ff33 	bl	800ccfc <memset>
  if(uartHandle->Instance==USART3)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a25      	ldr	r2, [pc, #148]	; (8002f30 <HAL_UART_MspInit+0xc0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d142      	bne.n	8002f26 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eaa:	f107 0314 	add.w	r3, r7, #20
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f005 fdea 	bl	8008a88 <HAL_RCCEx_PeriphCLKConfig>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002eba:	f7ff fc75 	bl	80027a8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_UART_MspInit+0xc4>)
 8002ec0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002ec4:	4a1b      	ldr	r2, [pc, #108]	; (8002f34 <HAL_UART_MspInit+0xc4>)
 8002ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eca:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002ece:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_UART_MspInit+0xc4>)
 8002ed0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002edc:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <HAL_UART_MspInit+0xc4>)
 8002ede:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ee2:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <HAL_UART_MspInit+0xc4>)
 8002ee4:	f043 0308 	orr.w	r3, r3, #8
 8002ee8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_UART_MspInit+0xc4>)
 8002eee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002efa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002efe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f02:	2302      	movs	r3, #2
 8002f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f14:	2307      	movs	r3, #7
 8002f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f1a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4805      	ldr	r0, [pc, #20]	; (8002f38 <HAL_UART_MspInit+0xc8>)
 8002f22:	f003 ffc9 	bl	8006eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002f26:	bf00      	nop
 8002f28:	37e0      	adds	r7, #224	; 0xe0
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40004800 	.word	0x40004800
 8002f34:	58024400 	.word	0x58024400
 8002f38:	58020c00 	.word	0x58020c00

08002f3c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002f40:	bf00      	nop
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f50:	f7ff fcda 	bl	8002908 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f54:	480c      	ldr	r0, [pc, #48]	; (8002f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f56:	490d      	ldr	r1, [pc, #52]	; (8002f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f58:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f5c:	e002      	b.n	8002f64 <LoopCopyDataInit>

08002f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f62:	3304      	adds	r3, #4

08002f64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f68:	d3f9      	bcc.n	8002f5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6a:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f6c:	4c0a      	ldr	r4, [pc, #40]	; (8002f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f70:	e001      	b.n	8002f76 <LoopFillZerobss>

08002f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f74:	3204      	adds	r2, #4

08002f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f78:	d3fb      	bcc.n	8002f72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f7a:	f009 fe8b 	bl	800cc94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f7e:	f7ff fa9b 	bl	80024b8 <main>
  bx  lr
 8002f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f84:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002f88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f8c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8002f90:	0800d360 	.word	0x0800d360
  ldr r2, =_sbss
 8002f94:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8002f98:	24000d38 	.word	0x24000d38

08002f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f9c:	e7fe      	b.n	8002f9c <ADC_IRQHandler>
	...

08002fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa6:	2003      	movs	r0, #3
 8002fa8:	f001 fb04 	bl	80045b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002fac:	f005 fb96 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_Init+0x68>)
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	0a1b      	lsrs	r3, r3, #8
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	4913      	ldr	r1, [pc, #76]	; (800300c <HAL_Init+0x6c>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002fca:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <HAL_Init+0x68>)
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	4a0e      	ldr	r2, [pc, #56]	; (800300c <HAL_Init+0x6c>)
 8002fd4:	5cd3      	ldrb	r3, [r2, r3]
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe0:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <HAL_Init+0x70>)
 8002fe2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fe4:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <HAL_Init+0x74>)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fea:	2000      	movs	r0, #0
 8002fec:	f000 f814 	bl	8003018 <HAL_InitTick>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e002      	b.n	8003000 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ffa:	f7ff fbdb 	bl	80027b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	58024400 	.word	0x58024400
 800300c:	0800d1d0 	.word	0x0800d1d0
 8003010:	24000008 	.word	0x24000008
 8003014:	24000004 	.word	0x24000004

08003018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003020:	4b15      	ldr	r3, [pc, #84]	; (8003078 <HAL_InitTick+0x60>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e021      	b.n	8003070 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <HAL_InitTick+0x64>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <HAL_InitTick+0x60>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	4619      	mov	r1, r3
 8003036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800303a:	fbb3 f3f1 	udiv	r3, r3, r1
 800303e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003042:	4618      	mov	r0, r3
 8003044:	f001 fae9 	bl	800461a <HAL_SYSTICK_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e00e      	b.n	8003070 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b0f      	cmp	r3, #15
 8003056:	d80a      	bhi.n	800306e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003058:	2200      	movs	r2, #0
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	f04f 30ff 	mov.w	r0, #4294967295
 8003060:	f001 fab3 	bl	80045ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003064:	4a06      	ldr	r2, [pc, #24]	; (8003080 <HAL_InitTick+0x68>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
 800306c:	e000      	b.n	8003070 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
}
 8003070:	4618      	mov	r0, r3
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	24000010 	.word	0x24000010
 800307c:	24000004 	.word	0x24000004
 8003080:	2400000c 	.word	0x2400000c

08003084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_IncTick+0x20>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_IncTick+0x24>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4413      	add	r3, r2
 8003094:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <HAL_IncTick+0x24>)
 8003096:	6013      	str	r3, [r2, #0]
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	24000010 	.word	0x24000010
 80030a8:	24000d24 	.word	0x24000d24

080030ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return uwTick;
 80030b0:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <HAL_GetTick+0x14>)
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	24000d24 	.word	0x24000d24

080030c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030cc:	f7ff ffee 	bl	80030ac <HAL_GetTick>
 80030d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d005      	beq.n	80030ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <HAL_Delay+0x44>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030ea:	bf00      	nop
 80030ec:	f7ff ffde 	bl	80030ac <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d8f7      	bhi.n	80030ec <HAL_Delay+0x28>
  {
  }
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	24000010 	.word	0x24000010

0800310c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	609a      	str	r2, [r3, #8]
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	609a      	str	r2, [r3, #8]
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3360      	adds	r3, #96	; 0x60
 8003186:	461a      	mov	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	430b      	orrs	r3, r1
 80031a2:	431a      	orrs	r2, r3
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80031a8:	bf00      	nop
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	611a      	str	r2, [r3, #16]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b087      	sub	sp, #28
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3360      	adds	r3, #96	; 0x60
 80031f6:	461a      	mov	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	431a      	orrs	r2, r3
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	601a      	str	r2, [r3, #0]
  }
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003242:	b480      	push	{r7}
 8003244:	b087      	sub	sp, #28
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	3330      	adds	r3, #48	; 0x30
 8003252:	461a      	mov	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	0a1b      	lsrs	r3, r3, #8
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	4413      	add	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	211f      	movs	r1, #31
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	401a      	ands	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	0e9b      	lsrs	r3, r3, #26
 800327a:	f003 011f 	and.w	r1, r3, #31
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	431a      	orrs	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800328e:	bf00      	nop
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f023 0203 	bic.w	r2, r3, #3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	60da      	str	r2, [r3, #12]
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3314      	adds	r3, #20
 80032d0:	461a      	mov	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	0e5b      	lsrs	r3, r3, #25
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	4413      	add	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	0d1b      	lsrs	r3, r3, #20
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2107      	movs	r1, #7
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	401a      	ands	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	0d1b      	lsrs	r3, r3, #20
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	fa01 f303 	lsl.w	r3, r1, r3
 8003304:	431a      	orrs	r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003330:	43db      	mvns	r3, r3
 8003332:	401a      	ands	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f003 0318 	and.w	r3, r3, #24
 800333a:	4908      	ldr	r1, [pc, #32]	; (800335c <LL_ADC_SetChannelSingleDiff+0x44>)
 800333c:	40d9      	lsrs	r1, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	400b      	ands	r3, r1
 8003342:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003346:	431a      	orrs	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	000fffff 	.word	0x000fffff

08003360 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 031f 	and.w	r3, r3, #31
}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <LL_ADC_DisableDeepPowerDown+0x20>)
 800338a:	4013      	ands	r3, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6093      	str	r3, [r2, #8]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	5fffffc0 	.word	0x5fffffc0

080033a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033b4:	d101      	bne.n	80033ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <LL_ADC_EnableInternalRegulator+0x24>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	6fffffc0 	.word	0x6fffffc0

080033f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003400:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003404:	d101      	bne.n	800340a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <LL_ADC_Enable+0x24>)
 8003426:	4013      	ands	r3, r2
 8003428:	f043 0201 	orr.w	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	7fffffc0 	.word	0x7fffffc0

08003440 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <LL_ADC_IsEnabled+0x18>
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <LL_ADC_IsEnabled+0x1a>
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <LL_ADC_REG_StartConversion+0x24>)
 8003476:	4013      	ands	r3, r2
 8003478:	f043 0204 	orr.w	r2, r3, #4
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	7fffffc0 	.word	0x7fffffc0

08003490 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d101      	bne.n	80034a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d101      	bne.n	80034ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b089      	sub	sp, #36	; 0x24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e138      	b.n	8003768 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003500:	2b00      	cmp	r3, #0
 8003502:	d109      	bne.n	8003518 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7fe f879 	bl	80015fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff3f 	bl	80033a0 <LL_ADC_IsDeepPowerDownEnabled>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d004      	beq.n	8003532 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff25 	bl	800337c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff ff5a 	bl	80033f0 <LL_ADC_IsInternalRegulatorEnabled>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d114      	bne.n	800356c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff ff3e 	bl	80033c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800354c:	4b88      	ldr	r3, [pc, #544]	; (8003770 <HAL_ADC_Init+0x294>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	4a88      	ldr	r2, [pc, #544]	; (8003774 <HAL_ADC_Init+0x298>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	099b      	lsrs	r3, r3, #6
 800355a:	3301      	adds	r3, #1
 800355c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800355e:	e002      	b.n	8003566 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	3b01      	subs	r3, #1
 8003564:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f9      	bne.n	8003560 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff3d 	bl	80033f0 <LL_ADC_IsInternalRegulatorEnabled>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10d      	bne.n	8003598 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	f043 0210 	orr.w	r2, r3, #16
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	f043 0201 	orr.w	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff77 	bl	8003490 <LL_ADC_REG_IsConversionOngoing>
 80035a2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f040 80d2 	bne.w	8003756 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f040 80ce 	bne.w	8003756 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80035c2:	f043 0202 	orr.w	r2, r3, #2
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff ff36 	bl	8003440 <LL_ADC_IsEnabled>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d110      	bne.n	80035fc <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035da:	4867      	ldr	r0, [pc, #412]	; (8003778 <HAL_ADC_Init+0x29c>)
 80035dc:	f7ff ff30 	bl	8003440 <LL_ADC_IsEnabled>
 80035e0:	4604      	mov	r4, r0
 80035e2:	4866      	ldr	r0, [pc, #408]	; (800377c <HAL_ADC_Init+0x2a0>)
 80035e4:	f7ff ff2c 	bl	8003440 <LL_ADC_IsEnabled>
 80035e8:	4603      	mov	r3, r0
 80035ea:	4323      	orrs	r3, r4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d105      	bne.n	80035fc <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4619      	mov	r1, r3
 80035f6:	4862      	ldr	r0, [pc, #392]	; (8003780 <HAL_ADC_Init+0x2a4>)
 80035f8:	f7ff fd88 	bl	800310c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7d5b      	ldrb	r3, [r3, #21]
 8003600:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003606:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800360c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	7f1b      	ldrb	r3, [r3, #28]
 8003612:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	7f1b      	ldrb	r3, [r3, #28]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d106      	bne.n	800362e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	3b01      	subs	r3, #1
 8003626:	045b      	lsls	r3, r3, #17
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	4b4c      	ldr	r3, [pc, #304]	; (8003784 <HAL_ADC_Init+0x2a8>)
 8003652:	4013      	ands	r3, r2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	69b9      	ldr	r1, [r7, #24]
 800365a:	430b      	orrs	r3, r1
 800365c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff ff14 	bl	8003490 <LL_ADC_REG_IsConversionOngoing>
 8003668:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff ff21 	bl	80034b6 <LL_ADC_INJ_IsConversionOngoing>
 8003674:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d14a      	bne.n	8003712 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d147      	bne.n	8003712 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	7d1b      	ldrb	r3, [r3, #20]
 8003686:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	4b3c      	ldr	r3, [pc, #240]	; (8003788 <HAL_ADC_Init+0x2ac>)
 8003698:	4013      	ands	r3, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	69b9      	ldr	r1, [r7, #24]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d11b      	bne.n	80036e6 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	4b34      	ldr	r3, [pc, #208]	; (800378c <HAL_ADC_Init+0x2b0>)
 80036bc:	4013      	ands	r3, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036c2:	3a01      	subs	r2, #1
 80036c4:	0411      	lsls	r1, r2, #16
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036ca:	4311      	orrs	r1, r2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80036d0:	4311      	orrs	r1, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036d6:	430a      	orrs	r2, r1
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	611a      	str	r2, [r3, #16]
 80036e4:	e007      	b.n	80036f6 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fcf3 	bl	80040f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d10c      	bne.n	8003734 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	f023 010f 	bic.w	r1, r3, #15
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	1e5a      	subs	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	631a      	str	r2, [r3, #48]	; 0x30
 8003732:	e007      	b.n	8003744 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 020f 	bic.w	r2, r2, #15
 8003742:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003748:	f023 0303 	bic.w	r3, r3, #3
 800374c:	f043 0201 	orr.w	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	655a      	str	r2, [r3, #84]	; 0x54
 8003754:	e007      	b.n	8003766 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375a:	f043 0210 	orr.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003766:	7ffb      	ldrb	r3, [r7, #31]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3724      	adds	r7, #36	; 0x24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd90      	pop	{r4, r7, pc}
 8003770:	24000004 	.word	0x24000004
 8003774:	053e2d63 	.word	0x053e2d63
 8003778:	40022000 	.word	0x40022000
 800377c:	40022100 	.word	0x40022100
 8003780:	40022300 	.word	0x40022300
 8003784:	fff0c003 	.word	0xfff0c003
 8003788:	ffffbffc 	.word	0xffffbffc
 800378c:	fc00f81e 	.word	0xfc00f81e

08003790 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800379c:	484f      	ldr	r0, [pc, #316]	; (80038dc <HAL_ADC_Start_DMA+0x14c>)
 800379e:	f7ff fddf 	bl	8003360 <LL_ADC_GetMultimode>
 80037a2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fe71 	bl	8003490 <LL_ADC_REG_IsConversionOngoing>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f040 808c 	bne.w	80038ce <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_ADC_Start_DMA+0x34>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e087      	b.n	80038d4 <HAL_ADC_Start_DMA+0x144>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b05      	cmp	r3, #5
 80037d6:	d002      	beq.n	80037de <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b09      	cmp	r3, #9
 80037dc:	d170      	bne.n	80038c0 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fb7a 	bl	8003ed8 <ADC_Enable>
 80037e4:	4603      	mov	r3, r0
 80037e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80037e8:	7dfb      	ldrb	r3, [r7, #23]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d163      	bne.n	80038b6 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <HAL_ADC_Start_DMA+0x150>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a38      	ldr	r2, [pc, #224]	; (80038e4 <HAL_ADC_Start_DMA+0x154>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d002      	beq.n	800380e <HAL_ADC_Start_DMA+0x7e>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	e000      	b.n	8003810 <HAL_ADC_Start_DMA+0x80>
 800380e:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <HAL_ADC_Start_DMA+0x158>)
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	4293      	cmp	r3, r2
 8003816:	d002      	beq.n	800381e <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d105      	bne.n	800382a <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003822:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d006      	beq.n	8003844 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383a:	f023 0206 	bic.w	r2, r3, #6
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	659a      	str	r2, [r3, #88]	; 0x58
 8003842:	e002      	b.n	800384a <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384e:	4a27      	ldr	r2, [pc, #156]	; (80038ec <HAL_ADC_Start_DMA+0x15c>)
 8003850:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003856:	4a26      	ldr	r2, [pc, #152]	; (80038f0 <HAL_ADC_Start_DMA+0x160>)
 8003858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385e:	4a25      	ldr	r2, [pc, #148]	; (80038f4 <HAL_ADC_Start_DMA+0x164>)
 8003860:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	221c      	movs	r2, #28
 8003868:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0210 	orr.w	r2, r2, #16
 8003880:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	4619      	mov	r1, r3
 800388c:	4610      	mov	r0, r2
 800388e:	f7ff fd04 	bl	800329a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3340      	adds	r3, #64	; 0x40
 800389c:	4619      	mov	r1, r3
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f001 fd1d 	bl	80052e0 <HAL_DMA_Start_IT>
 80038a6:	4603      	mov	r3, r0
 80038a8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff fdda 	bl	8003468 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80038b4:	e00d      	b.n	80038d2 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80038be:	e008      	b.n	80038d2 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80038cc:	e001      	b.n	80038d2 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
 80038d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40022300 	.word	0x40022300
 80038e0:	fffff0fe 	.word	0xfffff0fe
 80038e4:	40022100 	.word	0x40022100
 80038e8:	40022000 	.word	0x40022000
 80038ec:	08003fd1 	.word	0x08003fd1
 80038f0:	080040a9 	.word	0x080040a9
 80038f4:	080040c5 	.word	0x080040c5

080038f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b0a1      	sub	sp, #132	; 0x84
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4a9a      	ldr	r2, [pc, #616]	; (8003b90 <HAL_ADC_ConfigChannel+0x284>)
 8003926:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <HAL_ADC_ConfigChannel+0x2a>
 8003932:	2302      	movs	r3, #2
 8003934:	e2bc      	b.n	8003eb0 <HAL_ADC_ConfigChannel+0x5a4>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fda4 	bl	8003490 <LL_ADC_REG_IsConversionOngoing>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	f040 82a1 	bne.w	8003e92 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003958:	2b00      	cmp	r3, #0
 800395a:	d108      	bne.n	800396e <HAL_ADC_ConfigChannel+0x62>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	0e9b      	lsrs	r3, r3, #26
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	2201      	movs	r2, #1
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	e016      	b.n	800399c <HAL_ADC_ConfigChannel+0x90>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003976:	fa93 f3a3 	rbit	r3, r3
 800397a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800397c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800397e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003986:	2320      	movs	r3, #32
 8003988:	e003      	b.n	8003992 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800398a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800398c:	fab3 f383 	clz	r3, r3
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	2201      	movs	r2, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	69d1      	ldr	r1, [r2, #28]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6812      	ldr	r2, [r2, #0]
 80039a6:	430b      	orrs	r3, r1
 80039a8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	f7ff fc43 	bl	8003242 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff fd65 	bl	8003490 <LL_ADC_REG_IsConversionOngoing>
 80039c6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fd72 	bl	80034b6 <LL_ADC_INJ_IsConversionOngoing>
 80039d2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f040 80a0 	bne.w	8003b1c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f040 809c 	bne.w	8003b1c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	6819      	ldr	r1, [r3, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	461a      	mov	r2, r3
 80039f2:	f7ff fc65 	bl	80032c0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x110>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	089b      	lsrs	r3, r3, #2
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	e00a      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x126>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	089b      	lsrs	r3, r3, #2
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d027      	beq.n	8003a8c <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6919      	ldr	r1, [r3, #16]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a4a:	f7ff fb93 	bl	8003174 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6919      	ldr	r1, [r3, #16]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	7e5b      	ldrb	r3, [r3, #25]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d102      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x158>
 8003a5e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a62:	e000      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x15a>
 8003a64:	2300      	movs	r3, #0
 8003a66:	461a      	mov	r2, r3
 8003a68:	f7ff fbbd 	bl	80031e6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	6919      	ldr	r1, [r3, #16]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	7e1b      	ldrb	r3, [r3, #24]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d102      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x176>
 8003a7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a80:	e000      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x178>
 8003a82:	2300      	movs	r3, #0
 8003a84:	461a      	mov	r2, r3
 8003a86:	f7ff fb95 	bl	80031b4 <LL_ADC_SetDataRightShift>
 8003a8a:	e047      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	069b      	lsls	r3, r3, #26
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d107      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003aae:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	069b      	lsls	r3, r3, #26
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d107      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ad2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ada:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	069b      	lsls	r3, r3, #26
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d107      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003af6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	069b      	lsls	r3, r3, #26
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d107      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b1a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fc8d 	bl	8003440 <LL_ADC_IsEnabled>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f040 81bb 	bne.w	8003ea4 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6819      	ldr	r1, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f7ff fbec 	bl	8003318 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <HAL_ADC_ConfigChannel+0x284>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	f040 8130 	bne.w	8003dac <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10b      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x268>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	0e9b      	lsrs	r3, r3, #26
 8003b62:	3301      	adds	r3, #1
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	2b09      	cmp	r3, #9
 8003b6a:	bf94      	ite	ls
 8003b6c:	2301      	movls	r3, #1
 8003b6e:	2300      	movhi	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	e01b      	b.n	8003bac <HAL_ADC_ConfigChannel+0x2a0>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b7c:	fa93 f3a3 	rbit	r3, r3
 8003b80:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d103      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8003b8c:	2320      	movs	r3, #32
 8003b8e:	e005      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x290>
 8003b90:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8003b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	2b09      	cmp	r3, #9
 8003ba4:	bf94      	ite	ls
 8003ba6:	2301      	movls	r3, #1
 8003ba8:	2300      	movhi	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d079      	beq.n	8003ca4 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d107      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x2c0>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	0e9b      	lsrs	r3, r3, #26
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	069b      	lsls	r3, r3, #26
 8003bc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bca:	e015      	b.n	8003bf8 <HAL_ADC_ConfigChannel+0x2ec>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd4:	fa93 f3a3 	rbit	r3, r3
 8003bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bdc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003be4:	2320      	movs	r3, #32
 8003be6:	e003      	b.n	8003bf0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bea:	fab3 f383 	clz	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	069b      	lsls	r3, r3, #26
 8003bf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x30c>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0e9b      	lsrs	r3, r3, #26
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	2101      	movs	r1, #1
 8003c12:	fa01 f303 	lsl.w	r3, r1, r3
 8003c16:	e017      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x33c>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c20:	fa93 f3a3 	rbit	r3, r3
 8003c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c28:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8003c30:	2320      	movs	r3, #32
 8003c32:	e003      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8003c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	2101      	movs	r1, #1
 8003c44:	fa01 f303 	lsl.w	r3, r1, r3
 8003c48:	ea42 0103 	orr.w	r1, r2, r3
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10a      	bne.n	8003c6e <HAL_ADC_ConfigChannel+0x362>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	0e9b      	lsrs	r3, r3, #26
 8003c5e:	3301      	adds	r3, #1
 8003c60:	f003 021f 	and.w	r2, r3, #31
 8003c64:	4613      	mov	r3, r2
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	4413      	add	r3, r2
 8003c6a:	051b      	lsls	r3, r3, #20
 8003c6c:	e018      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x394>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c76:	fa93 f3a3 	rbit	r3, r3
 8003c7a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003c86:	2320      	movs	r3, #32
 8003c88:	e003      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	fab3 f383 	clz	r3, r3
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	3301      	adds	r3, #1
 8003c94:	f003 021f 	and.w	r2, r3, #31
 8003c98:	4613      	mov	r3, r2
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4413      	add	r3, r2
 8003c9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	e07e      	b.n	8003da2 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d107      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x3b4>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	0e9b      	lsrs	r3, r3, #26
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	069b      	lsls	r3, r3, #26
 8003cba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cbe:	e015      	b.n	8003cec <HAL_ADC_ConfigChannel+0x3e0>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	fa93 f3a3 	rbit	r3, r3
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003cd8:	2320      	movs	r3, #32
 8003cda:	e003      	b.n	8003ce4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	fab3 f383 	clz	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	069b      	lsls	r3, r3, #26
 8003ce8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d109      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x400>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	0e9b      	lsrs	r3, r3, #26
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f003 031f 	and.w	r3, r3, #31
 8003d04:	2101      	movs	r1, #1
 8003d06:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0a:	e017      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x430>
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	fa93 f3a3 	rbit	r3, r3
 8003d18:	61bb      	str	r3, [r7, #24]
  return result;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8003d24:	2320      	movs	r3, #32
 8003d26:	e003      	b.n	8003d30 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	fab3 f383 	clz	r3, r3
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	3301      	adds	r3, #1
 8003d32:	f003 031f 	and.w	r3, r3, #31
 8003d36:	2101      	movs	r1, #1
 8003d38:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3c:	ea42 0103 	orr.w	r1, r2, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10d      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x45c>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	0e9b      	lsrs	r3, r3, #26
 8003d52:	3301      	adds	r3, #1
 8003d54:	f003 021f 	and.w	r2, r3, #31
 8003d58:	4613      	mov	r3, r2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3b1e      	subs	r3, #30
 8003d60:	051b      	lsls	r3, r3, #20
 8003d62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d66:	e01b      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x494>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	fa93 f3a3 	rbit	r3, r3
 8003d74:	60fb      	str	r3, [r7, #12]
  return result;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8003d80:	2320      	movs	r3, #32
 8003d82:	e003      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	f003 021f 	and.w	r2, r3, #31
 8003d92:	4613      	mov	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4413      	add	r3, r2
 8003d98:	3b1e      	subs	r3, #30
 8003d9a:	051b      	lsls	r3, r3, #20
 8003d9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003da0:	430b      	orrs	r3, r1
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	6892      	ldr	r2, [r2, #8]
 8003da6:	4619      	mov	r1, r3
 8003da8:	f7ff fa8a 	bl	80032c0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	da77      	bge.n	8003ea4 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003db4:	4840      	ldr	r0, [pc, #256]	; (8003eb8 <HAL_ADC_ConfigChannel+0x5ac>)
 8003db6:	f7ff f9cf 	bl	8003158 <LL_ADC_GetCommonPathInternalCh>
 8003dba:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dbc:	483f      	ldr	r0, [pc, #252]	; (8003ebc <HAL_ADC_ConfigChannel+0x5b0>)
 8003dbe:	f7ff fb3f 	bl	8003440 <LL_ADC_IsEnabled>
 8003dc2:	4604      	mov	r4, r0
 8003dc4:	483e      	ldr	r0, [pc, #248]	; (8003ec0 <HAL_ADC_ConfigChannel+0x5b4>)
 8003dc6:	f7ff fb3b 	bl	8003440 <LL_ADC_IsEnabled>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4323      	orrs	r3, r4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d155      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a3b      	ldr	r2, [pc, #236]	; (8003ec4 <HAL_ADC_ConfigChannel+0x5b8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d122      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x516>
 8003ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d11d      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a35      	ldr	r2, [pc, #212]	; (8003ec0 <HAL_ADC_ConfigChannel+0x5b4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d159      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003df6:	4619      	mov	r1, r3
 8003df8:	482f      	ldr	r0, [pc, #188]	; (8003eb8 <HAL_ADC_ConfigChannel+0x5ac>)
 8003dfa:	f7ff f99a 	bl	8003132 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dfe:	4b32      	ldr	r3, [pc, #200]	; (8003ec8 <HAL_ADC_ConfigChannel+0x5bc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	099b      	lsrs	r3, r3, #6
 8003e04:	4a31      	ldr	r2, [pc, #196]	; (8003ecc <HAL_ADC_ConfigChannel+0x5c0>)
 8003e06:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0a:	099b      	lsrs	r3, r3, #6
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e12:	e002      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f9      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e20:	e040      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a2a      	ldr	r2, [pc, #168]	; (8003ed0 <HAL_ADC_ConfigChannel+0x5c4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d111      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x544>
 8003e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10c      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a21      	ldr	r2, [pc, #132]	; (8003ec0 <HAL_ADC_ConfigChannel+0x5b4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d131      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e46:	4619      	mov	r1, r3
 8003e48:	481b      	ldr	r0, [pc, #108]	; (8003eb8 <HAL_ADC_ConfigChannel+0x5ac>)
 8003e4a:	f7ff f972 	bl	8003132 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e4e:	e029      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <HAL_ADC_ConfigChannel+0x5c8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d124      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x598>
 8003e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d11f      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <HAL_ADC_ConfigChannel+0x5b4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d11a      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e74:	4619      	mov	r1, r3
 8003e76:	4810      	ldr	r0, [pc, #64]	; (8003eb8 <HAL_ADC_ConfigChannel+0x5ac>)
 8003e78:	f7ff f95b 	bl	8003132 <LL_ADC_SetCommonPathInternalCh>
 8003e7c:	e012      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e90:	e008      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e96:	f043 0220 	orr.w	r2, r3, #32
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003eac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3784      	adds	r7, #132	; 0x84
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd90      	pop	{r4, r7, pc}
 8003eb8:	40022300 	.word	0x40022300
 8003ebc:	40022000 	.word	0x40022000
 8003ec0:	40022100 	.word	0x40022100
 8003ec4:	cb840000 	.word	0xcb840000
 8003ec8:	24000004 	.word	0x24000004
 8003ecc:	053e2d63 	.word	0x053e2d63
 8003ed0:	bac04000 	.word	0xbac04000
 8003ed4:	cfb80000 	.word	0xcfb80000

08003ed8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff faab 	bl	8003440 <LL_ADC_IsEnabled>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d161      	bne.n	8003fb4 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <ADC_Enable+0xe8>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00d      	beq.n	8003f1a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	f043 0210 	orr.w	r2, r3, #16
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	f043 0201 	orr.w	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e04d      	b.n	8003fb6 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fa7a 	bl	8003418 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003f24:	f7ff f8c2 	bl	80030ac <HAL_GetTick>
 8003f28:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f2a:	4826      	ldr	r0, [pc, #152]	; (8003fc4 <ADC_Enable+0xec>)
 8003f2c:	f7ff fa18 	bl	8003360 <LL_ADC_GetMultimode>
 8003f30:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a24      	ldr	r2, [pc, #144]	; (8003fc8 <ADC_Enable+0xf0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d002      	beq.n	8003f42 <ADC_Enable+0x6a>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	e000      	b.n	8003f44 <ADC_Enable+0x6c>
 8003f42:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <ADC_Enable+0xf4>)
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d02c      	beq.n	8003fa6 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d130      	bne.n	8003fb4 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f52:	e028      	b.n	8003fa6 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fa71 	bl	8003440 <LL_ADC_IsEnabled>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d104      	bne.n	8003f6e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff fa55 	bl	8003418 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f6e:	f7ff f89d 	bl	80030ac <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d914      	bls.n	8003fa6 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d00d      	beq.n	8003fa6 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8e:	f043 0210 	orr.w	r2, r3, #16
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	f043 0201 	orr.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e007      	b.n	8003fb6 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0301 	and.w	r3, r3, #1
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d1cf      	bne.n	8003f54 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	8000003f 	.word	0x8000003f
 8003fc4:	40022300 	.word	0x40022300
 8003fc8:	40022100 	.word	0x40022100
 8003fcc:	40022000 	.word	0x40022000

08003fd0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d14b      	bne.n	8004082 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d021      	beq.n	8004048 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff f907 	bl	800321c <LL_ADC_REG_IsTriggerSourceSWStart>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d032      	beq.n	800407a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d12b      	bne.n	800407a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d11f      	bne.n	800407a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403e:	f043 0201 	orr.w	r2, r3, #1
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
 8004046:	e018      	b.n	800407a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d111      	bne.n	800407a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d105      	bne.n	800407a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7fd ff66 	bl	8001f4c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004080:	e00e      	b.n	80040a0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f7ff fc32 	bl	80038f8 <HAL_ADC_ErrorCallback>
}
 8004094:	e004      	b.n	80040a0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
}
 80040a0:	bf00      	nop
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f7fd ff24 	bl	8001f04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040bc:	bf00      	nop
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e2:	f043 0204 	orr.w	r2, r3, #4
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f7ff fc04 	bl	80038f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004100:	4b5f      	ldr	r3, [pc, #380]	; (8004280 <ADC_ConfigureBoostMode+0x188>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01c      	beq.n	8004146 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800410c:	f004 fc60 	bl	80089d0 <HAL_RCC_GetHCLKFreq>
 8004110:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800411a:	d010      	beq.n	800413e <ADC_ConfigureBoostMode+0x46>
 800411c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004120:	d871      	bhi.n	8004206 <ADC_ConfigureBoostMode+0x10e>
 8004122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004126:	d002      	beq.n	800412e <ADC_ConfigureBoostMode+0x36>
 8004128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800412c:	d16b      	bne.n	8004206 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	0c1b      	lsrs	r3, r3, #16
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	fbb2 f3f3 	udiv	r3, r2, r3
 800413a:	60fb      	str	r3, [r7, #12]
        break;
 800413c:	e066      	b.n	800420c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	089b      	lsrs	r3, r3, #2
 8004142:	60fb      	str	r3, [r7, #12]
        break;
 8004144:	e062      	b.n	800420c <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004146:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800414a:	f005 fba9 	bl	80098a0 <HAL_RCCEx_GetPeriphCLKFreq>
 800414e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004158:	d051      	beq.n	80041fe <ADC_ConfigureBoostMode+0x106>
 800415a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800415e:	d854      	bhi.n	800420a <ADC_ConfigureBoostMode+0x112>
 8004160:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004164:	d047      	beq.n	80041f6 <ADC_ConfigureBoostMode+0xfe>
 8004166:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800416a:	d84e      	bhi.n	800420a <ADC_ConfigureBoostMode+0x112>
 800416c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004170:	d03d      	beq.n	80041ee <ADC_ConfigureBoostMode+0xf6>
 8004172:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004176:	d848      	bhi.n	800420a <ADC_ConfigureBoostMode+0x112>
 8004178:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800417c:	d033      	beq.n	80041e6 <ADC_ConfigureBoostMode+0xee>
 800417e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004182:	d842      	bhi.n	800420a <ADC_ConfigureBoostMode+0x112>
 8004184:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004188:	d029      	beq.n	80041de <ADC_ConfigureBoostMode+0xe6>
 800418a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800418e:	d83c      	bhi.n	800420a <ADC_ConfigureBoostMode+0x112>
 8004190:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004194:	d01a      	beq.n	80041cc <ADC_ConfigureBoostMode+0xd4>
 8004196:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800419a:	d836      	bhi.n	800420a <ADC_ConfigureBoostMode+0x112>
 800419c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80041a0:	d014      	beq.n	80041cc <ADC_ConfigureBoostMode+0xd4>
 80041a2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80041a6:	d830      	bhi.n	800420a <ADC_ConfigureBoostMode+0x112>
 80041a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ac:	d00e      	beq.n	80041cc <ADC_ConfigureBoostMode+0xd4>
 80041ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b2:	d82a      	bhi.n	800420a <ADC_ConfigureBoostMode+0x112>
 80041b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041b8:	d008      	beq.n	80041cc <ADC_ConfigureBoostMode+0xd4>
 80041ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041be:	d824      	bhi.n	800420a <ADC_ConfigureBoostMode+0x112>
 80041c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041c4:	d002      	beq.n	80041cc <ADC_ConfigureBoostMode+0xd4>
 80041c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041ca:	d11e      	bne.n	800420a <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	0c9b      	lsrs	r3, r3, #18
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	60fb      	str	r3, [r7, #12]
        break;
 80041dc:	e016      	b.n	800420c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	091b      	lsrs	r3, r3, #4
 80041e2:	60fb      	str	r3, [r7, #12]
        break;
 80041e4:	e012      	b.n	800420c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	095b      	lsrs	r3, r3, #5
 80041ea:	60fb      	str	r3, [r7, #12]
        break;
 80041ec:	e00e      	b.n	800420c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	099b      	lsrs	r3, r3, #6
 80041f2:	60fb      	str	r3, [r7, #12]
        break;
 80041f4:	e00a      	b.n	800420c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	09db      	lsrs	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]
        break;
 80041fc:	e006      	b.n	800420c <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	60fb      	str	r3, [r7, #12]
        break;
 8004204:	e002      	b.n	800420c <ADC_ConfigureBoostMode+0x114>
        break;
 8004206:	bf00      	nop
 8004208:	e000      	b.n	800420c <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 800420a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	085b      	lsrs	r3, r3, #1
 8004210:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a1b      	ldr	r2, [pc, #108]	; (8004284 <ADC_ConfigureBoostMode+0x18c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d808      	bhi.n	800422c <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004228:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800422a:	e025      	b.n	8004278 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4a16      	ldr	r2, [pc, #88]	; (8004288 <ADC_ConfigureBoostMode+0x190>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d80a      	bhi.n	800424a <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004246:	609a      	str	r2, [r3, #8]
}
 8004248:	e016      	b.n	8004278 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a0f      	ldr	r2, [pc, #60]	; (800428c <ADC_ConfigureBoostMode+0x194>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d80a      	bhi.n	8004268 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004264:	609a      	str	r2, [r3, #8]
}
 8004266:	e007      	b.n	8004278 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004276:	609a      	str	r2, [r3, #8]
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40022300 	.word	0x40022300
 8004284:	005f5e10 	.word	0x005f5e10
 8004288:	00bebc20 	.word	0x00bebc20
 800428c:	017d7840 	.word	0x017d7840

08004290 <LL_ADC_IsEnabled>:
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <LL_ADC_IsEnabled+0x18>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <LL_ADC_IsEnabled+0x1a>
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d101      	bne.n	80042ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80042dc:	b590      	push	{r4, r7, lr}
 80042de:	b09f      	sub	sp, #124	; 0x7c
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e080      	b.n	80043fc <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004302:	2300      	movs	r3, #0
 8004304:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004306:	2300      	movs	r3, #0
 8004308:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a3d      	ldr	r2, [pc, #244]	; (8004404 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d102      	bne.n	800431a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004314:	4b3c      	ldr	r3, [pc, #240]	; (8004408 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	e001      	b.n	800431e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004328:	f043 0220 	orr.w	r2, r3, #32
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e05f      	b.n	80043fc <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ffb9 	bl	80042b6 <LL_ADC_REG_IsConversionOngoing>
 8004344:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff ffb3 	bl	80042b6 <LL_ADC_REG_IsConversionOngoing>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d141      	bne.n	80043da <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004358:	2b00      	cmp	r3, #0
 800435a:	d13e      	bne.n	80043da <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 800435e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d020      	beq.n	80043aa <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	431a      	orrs	r2, r3
 8004376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004378:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800437a:	4822      	ldr	r0, [pc, #136]	; (8004404 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800437c:	f7ff ff88 	bl	8004290 <LL_ADC_IsEnabled>
 8004380:	4604      	mov	r4, r0
 8004382:	4821      	ldr	r0, [pc, #132]	; (8004408 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8004384:	f7ff ff84 	bl	8004290 <LL_ADC_IsEnabled>
 8004388:	4603      	mov	r3, r0
 800438a:	4323      	orrs	r3, r4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d12e      	bne.n	80043ee <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	4b1e      	ldr	r3, [pc, #120]	; (8004410 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8004396:	4013      	ands	r3, r2
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	6811      	ldr	r1, [r2, #0]
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	6892      	ldr	r2, [r2, #8]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	431a      	orrs	r2, r3
 80043a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043a8:	e021      	b.n	80043ee <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80043aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043b6:	4813      	ldr	r0, [pc, #76]	; (8004404 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80043b8:	f7ff ff6a 	bl	8004290 <LL_ADC_IsEnabled>
 80043bc:	4604      	mov	r4, r0
 80043be:	4812      	ldr	r0, [pc, #72]	; (8004408 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80043c0:	f7ff ff66 	bl	8004290 <LL_ADC_IsEnabled>
 80043c4:	4603      	mov	r3, r0
 80043c6:	4323      	orrs	r3, r4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d110      	bne.n	80043ee <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80043cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80043d2:	4013      	ands	r3, r2
 80043d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043d6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043d8:	e009      	b.n	80043ee <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80043ec:	e000      	b.n	80043f0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043ee:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	377c      	adds	r7, #124	; 0x7c
 8004400:	46bd      	mov	sp, r7
 8004402:	bd90      	pop	{r4, r7, pc}
 8004404:	40022000 	.word	0x40022000
 8004408:	40022100 	.word	0x40022100
 800440c:	40022300 	.word	0x40022300
 8004410:	fffff0e0 	.word	0xfffff0e0

08004414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <__NVIC_SetPriorityGrouping+0x40>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004430:	4013      	ands	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <__NVIC_SetPriorityGrouping+0x44>)
 800443e:	4313      	orrs	r3, r2
 8004440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004442:	4a04      	ldr	r2, [pc, #16]	; (8004454 <__NVIC_SetPriorityGrouping+0x40>)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	60d3      	str	r3, [r2, #12]
}
 8004448:	bf00      	nop
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	e000ed00 	.word	0xe000ed00
 8004458:	05fa0000 	.word	0x05fa0000

0800445c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004460:	4b04      	ldr	r3, [pc, #16]	; (8004474 <__NVIC_GetPriorityGrouping+0x18>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	0a1b      	lsrs	r3, r3, #8
 8004466:	f003 0307 	and.w	r3, r3, #7
}
 800446a:	4618      	mov	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	e000ed00 	.word	0xe000ed00

08004478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004486:	2b00      	cmp	r3, #0
 8004488:	db0b      	blt.n	80044a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800448a:	88fb      	ldrh	r3, [r7, #6]
 800448c:	f003 021f 	and.w	r2, r3, #31
 8004490:	4907      	ldr	r1, [pc, #28]	; (80044b0 <__NVIC_EnableIRQ+0x38>)
 8004492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	2001      	movs	r0, #1
 800449a:	fa00 f202 	lsl.w	r2, r0, r2
 800449e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	e000e100 	.word	0xe000e100

080044b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	6039      	str	r1, [r7, #0]
 80044be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	db0a      	blt.n	80044de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	490c      	ldr	r1, [pc, #48]	; (8004500 <__NVIC_SetPriority+0x4c>)
 80044ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044d2:	0112      	lsls	r2, r2, #4
 80044d4:	b2d2      	uxtb	r2, r2
 80044d6:	440b      	add	r3, r1
 80044d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044dc:	e00a      	b.n	80044f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	4908      	ldr	r1, [pc, #32]	; (8004504 <__NVIC_SetPriority+0x50>)
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	3b04      	subs	r3, #4
 80044ec:	0112      	lsls	r2, r2, #4
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	440b      	add	r3, r1
 80044f2:	761a      	strb	r2, [r3, #24]
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	e000e100 	.word	0xe000e100
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004508:	b480      	push	{r7}
 800450a:	b089      	sub	sp, #36	; 0x24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f1c3 0307 	rsb	r3, r3, #7
 8004522:	2b04      	cmp	r3, #4
 8004524:	bf28      	it	cs
 8004526:	2304      	movcs	r3, #4
 8004528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	3304      	adds	r3, #4
 800452e:	2b06      	cmp	r3, #6
 8004530:	d902      	bls.n	8004538 <NVIC_EncodePriority+0x30>
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3b03      	subs	r3, #3
 8004536:	e000      	b.n	800453a <NVIC_EncodePriority+0x32>
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800453c:	f04f 32ff 	mov.w	r2, #4294967295
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43da      	mvns	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	401a      	ands	r2, r3
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004550:	f04f 31ff 	mov.w	r1, #4294967295
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	fa01 f303 	lsl.w	r3, r1, r3
 800455a:	43d9      	mvns	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004560:	4313      	orrs	r3, r2
         );
}
 8004562:	4618      	mov	r0, r3
 8004564:	3724      	adds	r7, #36	; 0x24
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
	...

08004570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3b01      	subs	r3, #1
 800457c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004580:	d301      	bcc.n	8004586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004582:	2301      	movs	r3, #1
 8004584:	e00f      	b.n	80045a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004586:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <SysTick_Config+0x40>)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3b01      	subs	r3, #1
 800458c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800458e:	210f      	movs	r1, #15
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	f7ff ff8e 	bl	80044b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <SysTick_Config+0x40>)
 800459a:	2200      	movs	r2, #0
 800459c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800459e:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <SysTick_Config+0x40>)
 80045a0:	2207      	movs	r2, #7
 80045a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	e000e010 	.word	0xe000e010

080045b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff29 	bl	8004414 <__NVIC_SetPriorityGrouping>
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b086      	sub	sp, #24
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	4603      	mov	r3, r0
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
 80045d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045d8:	f7ff ff40 	bl	800445c <__NVIC_GetPriorityGrouping>
 80045dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68b9      	ldr	r1, [r7, #8]
 80045e2:	6978      	ldr	r0, [r7, #20]
 80045e4:	f7ff ff90 	bl	8004508 <NVIC_EncodePriority>
 80045e8:	4602      	mov	r2, r0
 80045ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045ee:	4611      	mov	r1, r2
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff5f 	bl	80044b4 <__NVIC_SetPriority>
}
 80045f6:	bf00      	nop
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	4603      	mov	r3, r0
 8004606:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004608:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff ff33 	bl	8004478 <__NVIC_EnableIRQ>
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff ffa4 	bl	8004570 <SysTick_Config>
 8004628:	4603      	mov	r3, r0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e014      	b.n	800466e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	791b      	ldrb	r3, [r3, #4]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d105      	bne.n	800465a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7fd f935 	bl	80018c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2202      	movs	r2, #2
 800465e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	795b      	ldrb	r3, [r3, #5]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_DAC_Start_DMA+0x1e>
 8004692:	2302      	movs	r3, #2
 8004694:	e0ab      	b.n	80047ee <HAL_DAC_Start_DMA+0x176>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2202      	movs	r2, #2
 80046a0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d12f      	bne.n	8004708 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	4a52      	ldr	r2, [pc, #328]	; (80047f8 <HAL_DAC_Start_DMA+0x180>)
 80046ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4a51      	ldr	r2, [pc, #324]	; (80047fc <HAL_DAC_Start_DMA+0x184>)
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	4a50      	ldr	r2, [pc, #320]	; (8004800 <HAL_DAC_Start_DMA+0x188>)
 80046be:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046ce:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d013      	beq.n	80046fe <HAL_DAC_Start_DMA+0x86>
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d845      	bhi.n	8004768 <HAL_DAC_Start_DMA+0xf0>
 80046dc:	6a3b      	ldr	r3, [r7, #32]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_DAC_Start_DMA+0x72>
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d005      	beq.n	80046f4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80046e8:	e03e      	b.n	8004768 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3308      	adds	r3, #8
 80046f0:	613b      	str	r3, [r7, #16]
        break;
 80046f2:	e03c      	b.n	800476e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	330c      	adds	r3, #12
 80046fa:	613b      	str	r3, [r7, #16]
        break;
 80046fc:	e037      	b.n	800476e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3310      	adds	r3, #16
 8004704:	613b      	str	r3, [r7, #16]
        break;
 8004706:	e032      	b.n	800476e <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4a3d      	ldr	r2, [pc, #244]	; (8004804 <HAL_DAC_Start_DMA+0x18c>)
 800470e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a3c      	ldr	r2, [pc, #240]	; (8004808 <HAL_DAC_Start_DMA+0x190>)
 8004716:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4a3b      	ldr	r2, [pc, #236]	; (800480c <HAL_DAC_Start_DMA+0x194>)
 800471e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800472e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	2b08      	cmp	r3, #8
 8004734:	d013      	beq.n	800475e <HAL_DAC_Start_DMA+0xe6>
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	2b08      	cmp	r3, #8
 800473a:	d817      	bhi.n	800476c <HAL_DAC_Start_DMA+0xf4>
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_DAC_Start_DMA+0xd2>
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	2b04      	cmp	r3, #4
 8004746:	d005      	beq.n	8004754 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004748:	e010      	b.n	800476c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3314      	adds	r3, #20
 8004750:	613b      	str	r3, [r7, #16]
        break;
 8004752:	e00c      	b.n	800476e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3318      	adds	r3, #24
 800475a:	613b      	str	r3, [r7, #16]
        break;
 800475c:	e007      	b.n	800476e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	331c      	adds	r3, #28
 8004764:	613b      	str	r3, [r7, #16]
        break;
 8004766:	e002      	b.n	800476e <HAL_DAC_Start_DMA+0xf6>
        break;
 8004768:	bf00      	nop
 800476a:	e000      	b.n	800476e <HAL_DAC_Start_DMA+0xf6>
        break;
 800476c:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d111      	bne.n	8004798 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004782:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6898      	ldr	r0, [r3, #8]
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	f000 fda7 	bl	80052e0 <HAL_DMA_Start_IT>
 8004792:	4603      	mov	r3, r0
 8004794:	75fb      	strb	r3, [r7, #23]
 8004796:	e010      	b.n	80047ba <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80047a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	68d8      	ldr	r0, [r3, #12]
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	f000 fd95 	bl	80052e0 <HAL_DMA_Start_IT>
 80047b6:	4603      	mov	r3, r0
 80047b8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80047c0:	7dfb      	ldrb	r3, [r7, #23]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10c      	bne.n	80047e0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6819      	ldr	r1, [r3, #0]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	2201      	movs	r2, #1
 80047d4:	409a      	lsls	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e005      	b.n	80047ec <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f043 0204 	orr.w	r2, r3, #4
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80047ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	08004aad 	.word	0x08004aad
 80047fc:	08004acf 	.word	0x08004acf
 8004800:	08004aeb 	.word	0x08004aeb
 8004804:	08004b55 	.word	0x08004b55
 8004808:	08004b77 	.word	0x08004b77
 800480c:	08004b93 	.word	0x08004b93

08004810 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	795b      	ldrb	r3, [r3, #5]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_DAC_ConfigChannel+0x18>
 8004860:	2302      	movs	r3, #2
 8004862:	e11d      	b.n	8004aa0 <HAL_DAC_ConfigChannel+0x254>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2202      	movs	r2, #2
 800486e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b04      	cmp	r3, #4
 8004876:	d174      	bne.n	8004962 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004878:	f7fe fc18 	bl	80030ac <HAL_GetTick>
 800487c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d134      	bne.n	80048ee <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004884:	e011      	b.n	80048aa <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004886:	f7fe fc11 	bl	80030ac <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b01      	cmp	r3, #1
 8004892:	d90a      	bls.n	80048aa <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f043 0208 	orr.w	r2, r3, #8
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2203      	movs	r2, #3
 80048a4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e0fa      	b.n	8004aa0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b0:	4b7d      	ldr	r3, [pc, #500]	; (8004aa8 <HAL_DAC_ConfigChannel+0x25c>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e6      	bne.n	8004886 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80048b8:	2001      	movs	r0, #1
 80048ba:	f7fe fc03 	bl	80030c4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	6992      	ldr	r2, [r2, #24]
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40
 80048c8:	e01e      	b.n	8004908 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80048ca:	f7fe fbef 	bl	80030ac <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d90a      	bls.n	80048ee <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f043 0208 	orr.w	r2, r3, #8
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2203      	movs	r2, #3
 80048e8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e0d8      	b.n	8004aa0 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	dbe8      	blt.n	80048ca <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80048f8:	2001      	movs	r0, #1
 80048fa:	f7fe fbe3 	bl	80030c4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	6992      	ldr	r2, [r2, #24]
 8004906:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004918:	fa01 f303 	lsl.w	r3, r1, r3
 800491c:	43db      	mvns	r3, r3
 800491e:	ea02 0103 	and.w	r1, r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	69da      	ldr	r2, [r3, #28]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	409a      	lsls	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	21ff      	movs	r1, #255	; 0xff
 8004944:	fa01 f303 	lsl.w	r3, r1, r3
 8004948:	43db      	mvns	r3, r3
 800494a:	ea02 0103 	and.w	r1, r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	6a1a      	ldr	r2, [r3, #32]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	409a      	lsls	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d11d      	bne.n	80049a6 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	221f      	movs	r2, #31
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4013      	ands	r3, r2
 8004984:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ac:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2207      	movs	r2, #7
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	43db      	mvns	r3, r3
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4013      	ands	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d102      	bne.n	80049d0 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80049ca:	2300      	movs	r3, #0
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	e00f      	b.n	80049f0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d102      	bne.n	80049de <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80049d8:	2301      	movs	r3, #1
 80049da:	61fb      	str	r3, [r7, #28]
 80049dc:	e008      	b.n	80049f0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80049e6:	2301      	movs	r3, #1
 80049e8:	61fb      	str	r3, [r7, #28]
 80049ea:	e001      	b.n	80049f0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6819      	ldr	r1, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43da      	mvns	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	400a      	ands	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	4013      	ands	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6819      	ldr	r1, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	22c0      	movs	r2, #192	; 0xc0
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43da      	mvns	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	400a      	ands	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3720      	adds	r7, #32
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20008000 	.word	0x20008000

08004aac <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f7ff fea8 	bl	8004810 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	711a      	strb	r2, [r3, #4]
}
 8004ac6:	bf00      	nop
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f7ff fea1 	bl	8004824 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004ae2:	bf00      	nop
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f043 0204 	orr.w	r2, r3, #4
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f7ff fe97 	bl	8004838 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	711a      	strb	r2, [r3, #4]
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff ffd8 	bl	8004b18 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	711a      	strb	r2, [r3, #4]
}
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b82:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff ffd1 	bl	8004b2c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004b8a:	bf00      	nop
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b084      	sub	sp, #16
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f043 0204 	orr.w	r2, r3, #4
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f7ff ffc7 	bl	8004b40 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	711a      	strb	r2, [r3, #4]
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004bc8:	f7fe fa70 	bl	80030ac <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e37f      	b.n	80052d8 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a66      	ldr	r2, [pc, #408]	; (8004d78 <HAL_DMA_Init+0x1b8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d04a      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a65      	ldr	r2, [pc, #404]	; (8004d7c <HAL_DMA_Init+0x1bc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d045      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a63      	ldr	r2, [pc, #396]	; (8004d80 <HAL_DMA_Init+0x1c0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d040      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a62      	ldr	r2, [pc, #392]	; (8004d84 <HAL_DMA_Init+0x1c4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d03b      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a60      	ldr	r2, [pc, #384]	; (8004d88 <HAL_DMA_Init+0x1c8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d036      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a5f      	ldr	r2, [pc, #380]	; (8004d8c <HAL_DMA_Init+0x1cc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d031      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a5d      	ldr	r2, [pc, #372]	; (8004d90 <HAL_DMA_Init+0x1d0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d02c      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a5c      	ldr	r2, [pc, #368]	; (8004d94 <HAL_DMA_Init+0x1d4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d027      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a5a      	ldr	r2, [pc, #360]	; (8004d98 <HAL_DMA_Init+0x1d8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d022      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a59      	ldr	r2, [pc, #356]	; (8004d9c <HAL_DMA_Init+0x1dc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d01d      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a57      	ldr	r2, [pc, #348]	; (8004da0 <HAL_DMA_Init+0x1e0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d018      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a56      	ldr	r2, [pc, #344]	; (8004da4 <HAL_DMA_Init+0x1e4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d013      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a54      	ldr	r2, [pc, #336]	; (8004da8 <HAL_DMA_Init+0x1e8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00e      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a53      	ldr	r2, [pc, #332]	; (8004dac <HAL_DMA_Init+0x1ec>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d009      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a51      	ldr	r2, [pc, #324]	; (8004db0 <HAL_DMA_Init+0x1f0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a50      	ldr	r2, [pc, #320]	; (8004db4 <HAL_DMA_Init+0x1f4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d101      	bne.n	8004c7c <HAL_DMA_Init+0xbc>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_DMA_Init+0xbe>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 813c 	beq.w	8004efc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a37      	ldr	r2, [pc, #220]	; (8004d78 <HAL_DMA_Init+0x1b8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d04a      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a36      	ldr	r2, [pc, #216]	; (8004d7c <HAL_DMA_Init+0x1bc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d045      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a34      	ldr	r2, [pc, #208]	; (8004d80 <HAL_DMA_Init+0x1c0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d040      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a33      	ldr	r2, [pc, #204]	; (8004d84 <HAL_DMA_Init+0x1c4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d03b      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a31      	ldr	r2, [pc, #196]	; (8004d88 <HAL_DMA_Init+0x1c8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d036      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a30      	ldr	r2, [pc, #192]	; (8004d8c <HAL_DMA_Init+0x1cc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d031      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2e      	ldr	r2, [pc, #184]	; (8004d90 <HAL_DMA_Init+0x1d0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d02c      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a2d      	ldr	r2, [pc, #180]	; (8004d94 <HAL_DMA_Init+0x1d4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d027      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a2b      	ldr	r2, [pc, #172]	; (8004d98 <HAL_DMA_Init+0x1d8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d022      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a2a      	ldr	r2, [pc, #168]	; (8004d9c <HAL_DMA_Init+0x1dc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d01d      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a28      	ldr	r2, [pc, #160]	; (8004da0 <HAL_DMA_Init+0x1e0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d018      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a27      	ldr	r2, [pc, #156]	; (8004da4 <HAL_DMA_Init+0x1e4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d013      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a25      	ldr	r2, [pc, #148]	; (8004da8 <HAL_DMA_Init+0x1e8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00e      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a24      	ldr	r2, [pc, #144]	; (8004dac <HAL_DMA_Init+0x1ec>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d009      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a22      	ldr	r2, [pc, #136]	; (8004db0 <HAL_DMA_Init+0x1f0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d004      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a21      	ldr	r2, [pc, #132]	; (8004db4 <HAL_DMA_Init+0x1f4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d108      	bne.n	8004d46 <HAL_DMA_Init+0x186>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	e007      	b.n	8004d56 <HAL_DMA_Init+0x196>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0201 	bic.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d56:	e02f      	b.n	8004db8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d58:	f7fe f9a8 	bl	80030ac <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b05      	cmp	r3, #5
 8004d64:	d928      	bls.n	8004db8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2203      	movs	r2, #3
 8004d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e2af      	b.n	80052d8 <HAL_DMA_Init+0x718>
 8004d78:	40020010 	.word	0x40020010
 8004d7c:	40020028 	.word	0x40020028
 8004d80:	40020040 	.word	0x40020040
 8004d84:	40020058 	.word	0x40020058
 8004d88:	40020070 	.word	0x40020070
 8004d8c:	40020088 	.word	0x40020088
 8004d90:	400200a0 	.word	0x400200a0
 8004d94:	400200b8 	.word	0x400200b8
 8004d98:	40020410 	.word	0x40020410
 8004d9c:	40020428 	.word	0x40020428
 8004da0:	40020440 	.word	0x40020440
 8004da4:	40020458 	.word	0x40020458
 8004da8:	40020470 	.word	0x40020470
 8004dac:	40020488 	.word	0x40020488
 8004db0:	400204a0 	.word	0x400204a0
 8004db4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1c8      	bne.n	8004d58 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4b73      	ldr	r3, [pc, #460]	; (8004fa0 <HAL_DMA_Init+0x3e0>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004dde:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d107      	bne.n	8004e1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	4313      	orrs	r3, r2
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b28      	cmp	r3, #40	; 0x28
 8004e22:	d903      	bls.n	8004e2c <HAL_DMA_Init+0x26c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b2e      	cmp	r3, #46	; 0x2e
 8004e2a:	d91f      	bls.n	8004e6c <HAL_DMA_Init+0x2ac>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b3e      	cmp	r3, #62	; 0x3e
 8004e32:	d903      	bls.n	8004e3c <HAL_DMA_Init+0x27c>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b42      	cmp	r3, #66	; 0x42
 8004e3a:	d917      	bls.n	8004e6c <HAL_DMA_Init+0x2ac>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b46      	cmp	r3, #70	; 0x46
 8004e42:	d903      	bls.n	8004e4c <HAL_DMA_Init+0x28c>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b48      	cmp	r3, #72	; 0x48
 8004e4a:	d90f      	bls.n	8004e6c <HAL_DMA_Init+0x2ac>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b4e      	cmp	r3, #78	; 0x4e
 8004e52:	d903      	bls.n	8004e5c <HAL_DMA_Init+0x29c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b52      	cmp	r3, #82	; 0x52
 8004e5a:	d907      	bls.n	8004e6c <HAL_DMA_Init+0x2ac>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b73      	cmp	r3, #115	; 0x73
 8004e62:	d905      	bls.n	8004e70 <HAL_DMA_Init+0x2b0>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b77      	cmp	r3, #119	; 0x77
 8004e6a:	d801      	bhi.n	8004e70 <HAL_DMA_Init+0x2b0>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <HAL_DMA_Init+0x2b2>
 8004e70:	2300      	movs	r3, #0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e7c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f023 0307 	bic.w	r3, r3, #7
 8004e94:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d117      	bne.n	8004ed8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00e      	beq.n	8004ed8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f001 fe72 	bl	8006ba4 <DMA_CheckFifoParam>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d008      	beq.n	8004ed8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2240      	movs	r2, #64	; 0x40
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e1ff      	b.n	80052d8 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f001 fdad 	bl	8006a40 <DMA_CalcBaseAndBitshift>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	223f      	movs	r2, #63	; 0x3f
 8004ef4:	409a      	lsls	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	609a      	str	r2, [r3, #8]
 8004efa:	e0fe      	b.n	80050fa <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a28      	ldr	r2, [pc, #160]	; (8004fa4 <HAL_DMA_Init+0x3e4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d04a      	beq.n	8004f9c <HAL_DMA_Init+0x3dc>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a27      	ldr	r2, [pc, #156]	; (8004fa8 <HAL_DMA_Init+0x3e8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d045      	beq.n	8004f9c <HAL_DMA_Init+0x3dc>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a25      	ldr	r2, [pc, #148]	; (8004fac <HAL_DMA_Init+0x3ec>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d040      	beq.n	8004f9c <HAL_DMA_Init+0x3dc>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a24      	ldr	r2, [pc, #144]	; (8004fb0 <HAL_DMA_Init+0x3f0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d03b      	beq.n	8004f9c <HAL_DMA_Init+0x3dc>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a22      	ldr	r2, [pc, #136]	; (8004fb4 <HAL_DMA_Init+0x3f4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d036      	beq.n	8004f9c <HAL_DMA_Init+0x3dc>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a21      	ldr	r2, [pc, #132]	; (8004fb8 <HAL_DMA_Init+0x3f8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d031      	beq.n	8004f9c <HAL_DMA_Init+0x3dc>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1f      	ldr	r2, [pc, #124]	; (8004fbc <HAL_DMA_Init+0x3fc>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d02c      	beq.n	8004f9c <HAL_DMA_Init+0x3dc>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1e      	ldr	r2, [pc, #120]	; (8004fc0 <HAL_DMA_Init+0x400>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d027      	beq.n	8004f9c <HAL_DMA_Init+0x3dc>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1c      	ldr	r2, [pc, #112]	; (8004fc4 <HAL_DMA_Init+0x404>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d022      	beq.n	8004f9c <HAL_DMA_Init+0x3dc>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <HAL_DMA_Init+0x408>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d01d      	beq.n	8004f9c <HAL_DMA_Init+0x3dc>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a19      	ldr	r2, [pc, #100]	; (8004fcc <HAL_DMA_Init+0x40c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d018      	beq.n	8004f9c <HAL_DMA_Init+0x3dc>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a18      	ldr	r2, [pc, #96]	; (8004fd0 <HAL_DMA_Init+0x410>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d013      	beq.n	8004f9c <HAL_DMA_Init+0x3dc>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a16      	ldr	r2, [pc, #88]	; (8004fd4 <HAL_DMA_Init+0x414>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00e      	beq.n	8004f9c <HAL_DMA_Init+0x3dc>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a15      	ldr	r2, [pc, #84]	; (8004fd8 <HAL_DMA_Init+0x418>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d009      	beq.n	8004f9c <HAL_DMA_Init+0x3dc>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a13      	ldr	r2, [pc, #76]	; (8004fdc <HAL_DMA_Init+0x41c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d004      	beq.n	8004f9c <HAL_DMA_Init+0x3dc>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a12      	ldr	r2, [pc, #72]	; (8004fe0 <HAL_DMA_Init+0x420>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d123      	bne.n	8004fe4 <HAL_DMA_Init+0x424>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e022      	b.n	8004fe6 <HAL_DMA_Init+0x426>
 8004fa0:	fe10803f 	.word	0xfe10803f
 8004fa4:	48022c08 	.word	0x48022c08
 8004fa8:	48022c1c 	.word	0x48022c1c
 8004fac:	48022c30 	.word	0x48022c30
 8004fb0:	48022c44 	.word	0x48022c44
 8004fb4:	48022c58 	.word	0x48022c58
 8004fb8:	48022c6c 	.word	0x48022c6c
 8004fbc:	48022c80 	.word	0x48022c80
 8004fc0:	48022c94 	.word	0x48022c94
 8004fc4:	58025408 	.word	0x58025408
 8004fc8:	5802541c 	.word	0x5802541c
 8004fcc:	58025430 	.word	0x58025430
 8004fd0:	58025444 	.word	0x58025444
 8004fd4:	58025458 	.word	0x58025458
 8004fd8:	5802546c 	.word	0x5802546c
 8004fdc:	58025480 	.word	0x58025480
 8004fe0:	58025494 	.word	0x58025494
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d07e      	beq.n	80050e8 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a80      	ldr	r2, [pc, #512]	; (80051f0 <HAL_DMA_Init+0x630>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d021      	beq.n	8005038 <HAL_DMA_Init+0x478>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a7e      	ldr	r2, [pc, #504]	; (80051f4 <HAL_DMA_Init+0x634>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d01c      	beq.n	8005038 <HAL_DMA_Init+0x478>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a7d      	ldr	r2, [pc, #500]	; (80051f8 <HAL_DMA_Init+0x638>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d017      	beq.n	8005038 <HAL_DMA_Init+0x478>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a7b      	ldr	r2, [pc, #492]	; (80051fc <HAL_DMA_Init+0x63c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d012      	beq.n	8005038 <HAL_DMA_Init+0x478>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a7a      	ldr	r2, [pc, #488]	; (8005200 <HAL_DMA_Init+0x640>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00d      	beq.n	8005038 <HAL_DMA_Init+0x478>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a78      	ldr	r2, [pc, #480]	; (8005204 <HAL_DMA_Init+0x644>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d008      	beq.n	8005038 <HAL_DMA_Init+0x478>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a77      	ldr	r2, [pc, #476]	; (8005208 <HAL_DMA_Init+0x648>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d003      	beq.n	8005038 <HAL_DMA_Init+0x478>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a75      	ldr	r2, [pc, #468]	; (800520c <HAL_DMA_Init+0x64c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4b6e      	ldr	r3, [pc, #440]	; (8005210 <HAL_DMA_Init+0x650>)
 8005056:	4013      	ands	r3, r2
 8005058:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	2b40      	cmp	r3, #64	; 0x40
 8005060:	d008      	beq.n	8005074 <HAL_DMA_Init+0x4b4>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2b80      	cmp	r3, #128	; 0x80
 8005068:	d102      	bne.n	8005070 <HAL_DMA_Init+0x4b0>
 800506a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800506e:	e002      	b.n	8005076 <HAL_DMA_Init+0x4b6>
 8005070:	2300      	movs	r3, #0
 8005072:	e000      	b.n	8005076 <HAL_DMA_Init+0x4b6>
 8005074:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68d2      	ldr	r2, [r2, #12]
 800507a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800507c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005084:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800508c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005094:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800509c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	4b56      	ldr	r3, [pc, #344]	; (8005214 <HAL_DMA_Init+0x654>)
 80050bc:	4413      	add	r3, r2
 80050be:	4a56      	ldr	r2, [pc, #344]	; (8005218 <HAL_DMA_Init+0x658>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	009a      	lsls	r2, r3, #2
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f001 fcb7 	bl	8006a40 <DMA_CalcBaseAndBitshift>
 80050d2:	4603      	mov	r3, r0
 80050d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	2201      	movs	r2, #1
 80050e0:	409a      	lsls	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	605a      	str	r2, [r3, #4]
 80050e6:	e008      	b.n	80050fa <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2240      	movs	r2, #64	; 0x40
 80050ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2203      	movs	r2, #3
 80050f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e0ee      	b.n	80052d8 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a47      	ldr	r2, [pc, #284]	; (800521c <HAL_DMA_Init+0x65c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d072      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a45      	ldr	r2, [pc, #276]	; (8005220 <HAL_DMA_Init+0x660>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d06d      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a44      	ldr	r2, [pc, #272]	; (8005224 <HAL_DMA_Init+0x664>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d068      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a42      	ldr	r2, [pc, #264]	; (8005228 <HAL_DMA_Init+0x668>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d063      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a41      	ldr	r2, [pc, #260]	; (800522c <HAL_DMA_Init+0x66c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d05e      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a3f      	ldr	r2, [pc, #252]	; (8005230 <HAL_DMA_Init+0x670>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d059      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a3e      	ldr	r2, [pc, #248]	; (8005234 <HAL_DMA_Init+0x674>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d054      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a3c      	ldr	r2, [pc, #240]	; (8005238 <HAL_DMA_Init+0x678>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d04f      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a3b      	ldr	r2, [pc, #236]	; (800523c <HAL_DMA_Init+0x67c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d04a      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a39      	ldr	r2, [pc, #228]	; (8005240 <HAL_DMA_Init+0x680>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d045      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a38      	ldr	r2, [pc, #224]	; (8005244 <HAL_DMA_Init+0x684>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d040      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a36      	ldr	r2, [pc, #216]	; (8005248 <HAL_DMA_Init+0x688>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d03b      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a35      	ldr	r2, [pc, #212]	; (800524c <HAL_DMA_Init+0x68c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d036      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a33      	ldr	r2, [pc, #204]	; (8005250 <HAL_DMA_Init+0x690>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d031      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a32      	ldr	r2, [pc, #200]	; (8005254 <HAL_DMA_Init+0x694>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d02c      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a30      	ldr	r2, [pc, #192]	; (8005258 <HAL_DMA_Init+0x698>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d027      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a14      	ldr	r2, [pc, #80]	; (80051f0 <HAL_DMA_Init+0x630>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d022      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a12      	ldr	r2, [pc, #72]	; (80051f4 <HAL_DMA_Init+0x634>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d01d      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a11      	ldr	r2, [pc, #68]	; (80051f8 <HAL_DMA_Init+0x638>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d018      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a0f      	ldr	r2, [pc, #60]	; (80051fc <HAL_DMA_Init+0x63c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a0e      	ldr	r2, [pc, #56]	; (8005200 <HAL_DMA_Init+0x640>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a0c      	ldr	r2, [pc, #48]	; (8005204 <HAL_DMA_Init+0x644>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a0b      	ldr	r2, [pc, #44]	; (8005208 <HAL_DMA_Init+0x648>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_DMA_Init+0x62a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a09      	ldr	r2, [pc, #36]	; (800520c <HAL_DMA_Init+0x64c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d138      	bne.n	800525c <HAL_DMA_Init+0x69c>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e037      	b.n	800525e <HAL_DMA_Init+0x69e>
 80051ee:	bf00      	nop
 80051f0:	58025408 	.word	0x58025408
 80051f4:	5802541c 	.word	0x5802541c
 80051f8:	58025430 	.word	0x58025430
 80051fc:	58025444 	.word	0x58025444
 8005200:	58025458 	.word	0x58025458
 8005204:	5802546c 	.word	0x5802546c
 8005208:	58025480 	.word	0x58025480
 800520c:	58025494 	.word	0x58025494
 8005210:	fffe000f 	.word	0xfffe000f
 8005214:	a7fdabf8 	.word	0xa7fdabf8
 8005218:	cccccccd 	.word	0xcccccccd
 800521c:	40020010 	.word	0x40020010
 8005220:	40020028 	.word	0x40020028
 8005224:	40020040 	.word	0x40020040
 8005228:	40020058 	.word	0x40020058
 800522c:	40020070 	.word	0x40020070
 8005230:	40020088 	.word	0x40020088
 8005234:	400200a0 	.word	0x400200a0
 8005238:	400200b8 	.word	0x400200b8
 800523c:	40020410 	.word	0x40020410
 8005240:	40020428 	.word	0x40020428
 8005244:	40020440 	.word	0x40020440
 8005248:	40020458 	.word	0x40020458
 800524c:	40020470 	.word	0x40020470
 8005250:	40020488 	.word	0x40020488
 8005254:	400204a0 	.word	0x400204a0
 8005258:	400204b8 	.word	0x400204b8
 800525c:	2300      	movs	r3, #0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d032      	beq.n	80052c8 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f001 fd1a 	bl	8006c9c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b80      	cmp	r3, #128	; 0x80
 800526e:	d102      	bne.n	8005276 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800528a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d010      	beq.n	80052b6 <HAL_DMA_Init+0x6f6>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d80c      	bhi.n	80052b6 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f001 fd97 	bl	8006dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052b2:	605a      	str	r2, [r3, #4]
 80052b4:	e008      	b.n	80052c8 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e226      	b.n	800574a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_DMA_Start_IT+0x2a>
 8005306:	2302      	movs	r3, #2
 8005308:	e21f      	b.n	800574a <HAL_DMA_Start_IT+0x46a>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b01      	cmp	r3, #1
 800531c:	f040 820a 	bne.w	8005734 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a68      	ldr	r2, [pc, #416]	; (80054d4 <HAL_DMA_Start_IT+0x1f4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d04a      	beq.n	80053ce <HAL_DMA_Start_IT+0xee>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a66      	ldr	r2, [pc, #408]	; (80054d8 <HAL_DMA_Start_IT+0x1f8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d045      	beq.n	80053ce <HAL_DMA_Start_IT+0xee>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a65      	ldr	r2, [pc, #404]	; (80054dc <HAL_DMA_Start_IT+0x1fc>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d040      	beq.n	80053ce <HAL_DMA_Start_IT+0xee>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a63      	ldr	r2, [pc, #396]	; (80054e0 <HAL_DMA_Start_IT+0x200>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d03b      	beq.n	80053ce <HAL_DMA_Start_IT+0xee>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a62      	ldr	r2, [pc, #392]	; (80054e4 <HAL_DMA_Start_IT+0x204>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d036      	beq.n	80053ce <HAL_DMA_Start_IT+0xee>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a60      	ldr	r2, [pc, #384]	; (80054e8 <HAL_DMA_Start_IT+0x208>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d031      	beq.n	80053ce <HAL_DMA_Start_IT+0xee>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a5f      	ldr	r2, [pc, #380]	; (80054ec <HAL_DMA_Start_IT+0x20c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d02c      	beq.n	80053ce <HAL_DMA_Start_IT+0xee>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a5d      	ldr	r2, [pc, #372]	; (80054f0 <HAL_DMA_Start_IT+0x210>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d027      	beq.n	80053ce <HAL_DMA_Start_IT+0xee>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a5c      	ldr	r2, [pc, #368]	; (80054f4 <HAL_DMA_Start_IT+0x214>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d022      	beq.n	80053ce <HAL_DMA_Start_IT+0xee>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a5a      	ldr	r2, [pc, #360]	; (80054f8 <HAL_DMA_Start_IT+0x218>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d01d      	beq.n	80053ce <HAL_DMA_Start_IT+0xee>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a59      	ldr	r2, [pc, #356]	; (80054fc <HAL_DMA_Start_IT+0x21c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d018      	beq.n	80053ce <HAL_DMA_Start_IT+0xee>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a57      	ldr	r2, [pc, #348]	; (8005500 <HAL_DMA_Start_IT+0x220>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <HAL_DMA_Start_IT+0xee>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a56      	ldr	r2, [pc, #344]	; (8005504 <HAL_DMA_Start_IT+0x224>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00e      	beq.n	80053ce <HAL_DMA_Start_IT+0xee>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a54      	ldr	r2, [pc, #336]	; (8005508 <HAL_DMA_Start_IT+0x228>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d009      	beq.n	80053ce <HAL_DMA_Start_IT+0xee>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a53      	ldr	r2, [pc, #332]	; (800550c <HAL_DMA_Start_IT+0x22c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d004      	beq.n	80053ce <HAL_DMA_Start_IT+0xee>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a51      	ldr	r2, [pc, #324]	; (8005510 <HAL_DMA_Start_IT+0x230>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d108      	bne.n	80053e0 <HAL_DMA_Start_IT+0x100>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0201 	bic.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	e007      	b.n	80053f0 <HAL_DMA_Start_IT+0x110>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68b9      	ldr	r1, [r7, #8]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f001 f93e 	bl	8006678 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a34      	ldr	r2, [pc, #208]	; (80054d4 <HAL_DMA_Start_IT+0x1f4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d04a      	beq.n	800549c <HAL_DMA_Start_IT+0x1bc>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a33      	ldr	r2, [pc, #204]	; (80054d8 <HAL_DMA_Start_IT+0x1f8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d045      	beq.n	800549c <HAL_DMA_Start_IT+0x1bc>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a31      	ldr	r2, [pc, #196]	; (80054dc <HAL_DMA_Start_IT+0x1fc>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d040      	beq.n	800549c <HAL_DMA_Start_IT+0x1bc>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a30      	ldr	r2, [pc, #192]	; (80054e0 <HAL_DMA_Start_IT+0x200>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d03b      	beq.n	800549c <HAL_DMA_Start_IT+0x1bc>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a2e      	ldr	r2, [pc, #184]	; (80054e4 <HAL_DMA_Start_IT+0x204>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d036      	beq.n	800549c <HAL_DMA_Start_IT+0x1bc>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a2d      	ldr	r2, [pc, #180]	; (80054e8 <HAL_DMA_Start_IT+0x208>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d031      	beq.n	800549c <HAL_DMA_Start_IT+0x1bc>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a2b      	ldr	r2, [pc, #172]	; (80054ec <HAL_DMA_Start_IT+0x20c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d02c      	beq.n	800549c <HAL_DMA_Start_IT+0x1bc>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2a      	ldr	r2, [pc, #168]	; (80054f0 <HAL_DMA_Start_IT+0x210>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d027      	beq.n	800549c <HAL_DMA_Start_IT+0x1bc>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a28      	ldr	r2, [pc, #160]	; (80054f4 <HAL_DMA_Start_IT+0x214>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d022      	beq.n	800549c <HAL_DMA_Start_IT+0x1bc>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a27      	ldr	r2, [pc, #156]	; (80054f8 <HAL_DMA_Start_IT+0x218>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d01d      	beq.n	800549c <HAL_DMA_Start_IT+0x1bc>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a25      	ldr	r2, [pc, #148]	; (80054fc <HAL_DMA_Start_IT+0x21c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d018      	beq.n	800549c <HAL_DMA_Start_IT+0x1bc>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a24      	ldr	r2, [pc, #144]	; (8005500 <HAL_DMA_Start_IT+0x220>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d013      	beq.n	800549c <HAL_DMA_Start_IT+0x1bc>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a22      	ldr	r2, [pc, #136]	; (8005504 <HAL_DMA_Start_IT+0x224>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00e      	beq.n	800549c <HAL_DMA_Start_IT+0x1bc>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a21      	ldr	r2, [pc, #132]	; (8005508 <HAL_DMA_Start_IT+0x228>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d009      	beq.n	800549c <HAL_DMA_Start_IT+0x1bc>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1f      	ldr	r2, [pc, #124]	; (800550c <HAL_DMA_Start_IT+0x22c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <HAL_DMA_Start_IT+0x1bc>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1e      	ldr	r2, [pc, #120]	; (8005510 <HAL_DMA_Start_IT+0x230>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d101      	bne.n	80054a0 <HAL_DMA_Start_IT+0x1c0>
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <HAL_DMA_Start_IT+0x1c2>
 80054a0:	2300      	movs	r3, #0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d036      	beq.n	8005514 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f023 021e 	bic.w	r2, r3, #30
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0216 	orr.w	r2, r2, #22
 80054b8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d03e      	beq.n	8005540 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0208 	orr.w	r2, r2, #8
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	e035      	b.n	8005540 <HAL_DMA_Start_IT+0x260>
 80054d4:	40020010 	.word	0x40020010
 80054d8:	40020028 	.word	0x40020028
 80054dc:	40020040 	.word	0x40020040
 80054e0:	40020058 	.word	0x40020058
 80054e4:	40020070 	.word	0x40020070
 80054e8:	40020088 	.word	0x40020088
 80054ec:	400200a0 	.word	0x400200a0
 80054f0:	400200b8 	.word	0x400200b8
 80054f4:	40020410 	.word	0x40020410
 80054f8:	40020428 	.word	0x40020428
 80054fc:	40020440 	.word	0x40020440
 8005500:	40020458 	.word	0x40020458
 8005504:	40020470 	.word	0x40020470
 8005508:	40020488 	.word	0x40020488
 800550c:	400204a0 	.word	0x400204a0
 8005510:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f023 020e 	bic.w	r2, r3, #14
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 020a 	orr.w	r2, r2, #10
 8005526:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	2b00      	cmp	r3, #0
 800552e:	d007      	beq.n	8005540 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0204 	orr.w	r2, r2, #4
 800553e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a83      	ldr	r2, [pc, #524]	; (8005754 <HAL_DMA_Start_IT+0x474>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d072      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a82      	ldr	r2, [pc, #520]	; (8005758 <HAL_DMA_Start_IT+0x478>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d06d      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a80      	ldr	r2, [pc, #512]	; (800575c <HAL_DMA_Start_IT+0x47c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d068      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a7f      	ldr	r2, [pc, #508]	; (8005760 <HAL_DMA_Start_IT+0x480>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d063      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a7d      	ldr	r2, [pc, #500]	; (8005764 <HAL_DMA_Start_IT+0x484>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d05e      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a7c      	ldr	r2, [pc, #496]	; (8005768 <HAL_DMA_Start_IT+0x488>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d059      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a7a      	ldr	r2, [pc, #488]	; (800576c <HAL_DMA_Start_IT+0x48c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d054      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a79      	ldr	r2, [pc, #484]	; (8005770 <HAL_DMA_Start_IT+0x490>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d04f      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a77      	ldr	r2, [pc, #476]	; (8005774 <HAL_DMA_Start_IT+0x494>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d04a      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a76      	ldr	r2, [pc, #472]	; (8005778 <HAL_DMA_Start_IT+0x498>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d045      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a74      	ldr	r2, [pc, #464]	; (800577c <HAL_DMA_Start_IT+0x49c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d040      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a73      	ldr	r2, [pc, #460]	; (8005780 <HAL_DMA_Start_IT+0x4a0>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d03b      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a71      	ldr	r2, [pc, #452]	; (8005784 <HAL_DMA_Start_IT+0x4a4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d036      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a70      	ldr	r2, [pc, #448]	; (8005788 <HAL_DMA_Start_IT+0x4a8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d031      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a6e      	ldr	r2, [pc, #440]	; (800578c <HAL_DMA_Start_IT+0x4ac>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d02c      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a6d      	ldr	r2, [pc, #436]	; (8005790 <HAL_DMA_Start_IT+0x4b0>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d027      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a6b      	ldr	r2, [pc, #428]	; (8005794 <HAL_DMA_Start_IT+0x4b4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d022      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a6a      	ldr	r2, [pc, #424]	; (8005798 <HAL_DMA_Start_IT+0x4b8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d01d      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a68      	ldr	r2, [pc, #416]	; (800579c <HAL_DMA_Start_IT+0x4bc>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d018      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a67      	ldr	r2, [pc, #412]	; (80057a0 <HAL_DMA_Start_IT+0x4c0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a65      	ldr	r2, [pc, #404]	; (80057a4 <HAL_DMA_Start_IT+0x4c4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00e      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a64      	ldr	r2, [pc, #400]	; (80057a8 <HAL_DMA_Start_IT+0x4c8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d009      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a62      	ldr	r2, [pc, #392]	; (80057ac <HAL_DMA_Start_IT+0x4cc>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <HAL_DMA_Start_IT+0x350>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a61      	ldr	r2, [pc, #388]	; (80057b0 <HAL_DMA_Start_IT+0x4d0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d101      	bne.n	8005634 <HAL_DMA_Start_IT+0x354>
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <HAL_DMA_Start_IT+0x356>
 8005634:	2300      	movs	r3, #0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01a      	beq.n	8005670 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d007      	beq.n	8005658 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005656:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d007      	beq.n	8005670 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800566a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800566e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a37      	ldr	r2, [pc, #220]	; (8005754 <HAL_DMA_Start_IT+0x474>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d04a      	beq.n	8005710 <HAL_DMA_Start_IT+0x430>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a36      	ldr	r2, [pc, #216]	; (8005758 <HAL_DMA_Start_IT+0x478>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d045      	beq.n	8005710 <HAL_DMA_Start_IT+0x430>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a34      	ldr	r2, [pc, #208]	; (800575c <HAL_DMA_Start_IT+0x47c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d040      	beq.n	8005710 <HAL_DMA_Start_IT+0x430>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a33      	ldr	r2, [pc, #204]	; (8005760 <HAL_DMA_Start_IT+0x480>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d03b      	beq.n	8005710 <HAL_DMA_Start_IT+0x430>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a31      	ldr	r2, [pc, #196]	; (8005764 <HAL_DMA_Start_IT+0x484>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d036      	beq.n	8005710 <HAL_DMA_Start_IT+0x430>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a30      	ldr	r2, [pc, #192]	; (8005768 <HAL_DMA_Start_IT+0x488>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d031      	beq.n	8005710 <HAL_DMA_Start_IT+0x430>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a2e      	ldr	r2, [pc, #184]	; (800576c <HAL_DMA_Start_IT+0x48c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d02c      	beq.n	8005710 <HAL_DMA_Start_IT+0x430>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2d      	ldr	r2, [pc, #180]	; (8005770 <HAL_DMA_Start_IT+0x490>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d027      	beq.n	8005710 <HAL_DMA_Start_IT+0x430>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a2b      	ldr	r2, [pc, #172]	; (8005774 <HAL_DMA_Start_IT+0x494>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d022      	beq.n	8005710 <HAL_DMA_Start_IT+0x430>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a2a      	ldr	r2, [pc, #168]	; (8005778 <HAL_DMA_Start_IT+0x498>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d01d      	beq.n	8005710 <HAL_DMA_Start_IT+0x430>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a28      	ldr	r2, [pc, #160]	; (800577c <HAL_DMA_Start_IT+0x49c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d018      	beq.n	8005710 <HAL_DMA_Start_IT+0x430>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a27      	ldr	r2, [pc, #156]	; (8005780 <HAL_DMA_Start_IT+0x4a0>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d013      	beq.n	8005710 <HAL_DMA_Start_IT+0x430>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a25      	ldr	r2, [pc, #148]	; (8005784 <HAL_DMA_Start_IT+0x4a4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00e      	beq.n	8005710 <HAL_DMA_Start_IT+0x430>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a24      	ldr	r2, [pc, #144]	; (8005788 <HAL_DMA_Start_IT+0x4a8>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d009      	beq.n	8005710 <HAL_DMA_Start_IT+0x430>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a22      	ldr	r2, [pc, #136]	; (800578c <HAL_DMA_Start_IT+0x4ac>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d004      	beq.n	8005710 <HAL_DMA_Start_IT+0x430>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a21      	ldr	r2, [pc, #132]	; (8005790 <HAL_DMA_Start_IT+0x4b0>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d108      	bne.n	8005722 <HAL_DMA_Start_IT+0x442>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	e012      	b.n	8005748 <HAL_DMA_Start_IT+0x468>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0201 	orr.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	e009      	b.n	8005748 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800573a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005748:	7dfb      	ldrb	r3, [r7, #23]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3718      	adds	r7, #24
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	40020010 	.word	0x40020010
 8005758:	40020028 	.word	0x40020028
 800575c:	40020040 	.word	0x40020040
 8005760:	40020058 	.word	0x40020058
 8005764:	40020070 	.word	0x40020070
 8005768:	40020088 	.word	0x40020088
 800576c:	400200a0 	.word	0x400200a0
 8005770:	400200b8 	.word	0x400200b8
 8005774:	40020410 	.word	0x40020410
 8005778:	40020428 	.word	0x40020428
 800577c:	40020440 	.word	0x40020440
 8005780:	40020458 	.word	0x40020458
 8005784:	40020470 	.word	0x40020470
 8005788:	40020488 	.word	0x40020488
 800578c:	400204a0 	.word	0x400204a0
 8005790:	400204b8 	.word	0x400204b8
 8005794:	58025408 	.word	0x58025408
 8005798:	5802541c 	.word	0x5802541c
 800579c:	58025430 	.word	0x58025430
 80057a0:	58025444 	.word	0x58025444
 80057a4:	58025458 	.word	0x58025458
 80057a8:	5802546c 	.word	0x5802546c
 80057ac:	58025480 	.word	0x58025480
 80057b0:	58025494 	.word	0x58025494

080057b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	; 0x28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057c0:	4b67      	ldr	r3, [pc, #412]	; (8005960 <HAL_DMA_IRQHandler+0x1ac>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a67      	ldr	r2, [pc, #412]	; (8005964 <HAL_DMA_IRQHandler+0x1b0>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	0a9b      	lsrs	r3, r3, #10
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a5f      	ldr	r2, [pc, #380]	; (8005968 <HAL_DMA_IRQHandler+0x1b4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d04a      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a5d      	ldr	r2, [pc, #372]	; (800596c <HAL_DMA_IRQHandler+0x1b8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d045      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a5c      	ldr	r2, [pc, #368]	; (8005970 <HAL_DMA_IRQHandler+0x1bc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d040      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a5a      	ldr	r2, [pc, #360]	; (8005974 <HAL_DMA_IRQHandler+0x1c0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d03b      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a59      	ldr	r2, [pc, #356]	; (8005978 <HAL_DMA_IRQHandler+0x1c4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d036      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a57      	ldr	r2, [pc, #348]	; (800597c <HAL_DMA_IRQHandler+0x1c8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d031      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a56      	ldr	r2, [pc, #344]	; (8005980 <HAL_DMA_IRQHandler+0x1cc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d02c      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a54      	ldr	r2, [pc, #336]	; (8005984 <HAL_DMA_IRQHandler+0x1d0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d027      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a53      	ldr	r2, [pc, #332]	; (8005988 <HAL_DMA_IRQHandler+0x1d4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d022      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a51      	ldr	r2, [pc, #324]	; (800598c <HAL_DMA_IRQHandler+0x1d8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01d      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a50      	ldr	r2, [pc, #320]	; (8005990 <HAL_DMA_IRQHandler+0x1dc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d018      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a4e      	ldr	r2, [pc, #312]	; (8005994 <HAL_DMA_IRQHandler+0x1e0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a4d      	ldr	r2, [pc, #308]	; (8005998 <HAL_DMA_IRQHandler+0x1e4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00e      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a4b      	ldr	r2, [pc, #300]	; (800599c <HAL_DMA_IRQHandler+0x1e8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d009      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a4a      	ldr	r2, [pc, #296]	; (80059a0 <HAL_DMA_IRQHandler+0x1ec>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d004      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a48      	ldr	r2, [pc, #288]	; (80059a4 <HAL_DMA_IRQHandler+0x1f0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d101      	bne.n	800588a <HAL_DMA_IRQHandler+0xd6>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <HAL_DMA_IRQHandler+0xd8>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 842b 	beq.w	80060e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	2208      	movs	r2, #8
 800589c:	409a      	lsls	r2, r3
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	4013      	ands	r3, r2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 80a2 	beq.w	80059ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a2e      	ldr	r2, [pc, #184]	; (8005968 <HAL_DMA_IRQHandler+0x1b4>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d04a      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a2d      	ldr	r2, [pc, #180]	; (800596c <HAL_DMA_IRQHandler+0x1b8>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d045      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2b      	ldr	r2, [pc, #172]	; (8005970 <HAL_DMA_IRQHandler+0x1bc>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d040      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2a      	ldr	r2, [pc, #168]	; (8005974 <HAL_DMA_IRQHandler+0x1c0>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d03b      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a28      	ldr	r2, [pc, #160]	; (8005978 <HAL_DMA_IRQHandler+0x1c4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d036      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a27      	ldr	r2, [pc, #156]	; (800597c <HAL_DMA_IRQHandler+0x1c8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d031      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a25      	ldr	r2, [pc, #148]	; (8005980 <HAL_DMA_IRQHandler+0x1cc>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d02c      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a24      	ldr	r2, [pc, #144]	; (8005984 <HAL_DMA_IRQHandler+0x1d0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d027      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a22      	ldr	r2, [pc, #136]	; (8005988 <HAL_DMA_IRQHandler+0x1d4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d022      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a21      	ldr	r2, [pc, #132]	; (800598c <HAL_DMA_IRQHandler+0x1d8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d01d      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1f      	ldr	r2, [pc, #124]	; (8005990 <HAL_DMA_IRQHandler+0x1dc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d018      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1e      	ldr	r2, [pc, #120]	; (8005994 <HAL_DMA_IRQHandler+0x1e0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d013      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1c      	ldr	r2, [pc, #112]	; (8005998 <HAL_DMA_IRQHandler+0x1e4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00e      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1b      	ldr	r2, [pc, #108]	; (800599c <HAL_DMA_IRQHandler+0x1e8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d009      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a19      	ldr	r2, [pc, #100]	; (80059a0 <HAL_DMA_IRQHandler+0x1ec>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d004      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a18      	ldr	r2, [pc, #96]	; (80059a4 <HAL_DMA_IRQHandler+0x1f0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d12f      	bne.n	80059a8 <HAL_DMA_IRQHandler+0x1f4>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0304 	and.w	r3, r3, #4
 8005952:	2b00      	cmp	r3, #0
 8005954:	bf14      	ite	ne
 8005956:	2301      	movne	r3, #1
 8005958:	2300      	moveq	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	e02e      	b.n	80059bc <HAL_DMA_IRQHandler+0x208>
 800595e:	bf00      	nop
 8005960:	24000004 	.word	0x24000004
 8005964:	1b4e81b5 	.word	0x1b4e81b5
 8005968:	40020010 	.word	0x40020010
 800596c:	40020028 	.word	0x40020028
 8005970:	40020040 	.word	0x40020040
 8005974:	40020058 	.word	0x40020058
 8005978:	40020070 	.word	0x40020070
 800597c:	40020088 	.word	0x40020088
 8005980:	400200a0 	.word	0x400200a0
 8005984:	400200b8 	.word	0x400200b8
 8005988:	40020410 	.word	0x40020410
 800598c:	40020428 	.word	0x40020428
 8005990:	40020440 	.word	0x40020440
 8005994:	40020458 	.word	0x40020458
 8005998:	40020470 	.word	0x40020470
 800599c:	40020488 	.word	0x40020488
 80059a0:	400204a0 	.word	0x400204a0
 80059a4:	400204b8 	.word	0x400204b8
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bf14      	ite	ne
 80059b6:	2301      	movne	r3, #1
 80059b8:	2300      	moveq	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d015      	beq.n	80059ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0204 	bic.w	r2, r2, #4
 80059ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	2208      	movs	r2, #8
 80059da:	409a      	lsls	r2, r3
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e4:	f043 0201 	orr.w	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f0:	f003 031f 	and.w	r3, r3, #31
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	fa22 f303 	lsr.w	r3, r2, r3
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d06e      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a69      	ldr	r2, [pc, #420]	; (8005bac <HAL_DMA_IRQHandler+0x3f8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d04a      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a67      	ldr	r2, [pc, #412]	; (8005bb0 <HAL_DMA_IRQHandler+0x3fc>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d045      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a66      	ldr	r2, [pc, #408]	; (8005bb4 <HAL_DMA_IRQHandler+0x400>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d040      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a64      	ldr	r2, [pc, #400]	; (8005bb8 <HAL_DMA_IRQHandler+0x404>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d03b      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a63      	ldr	r2, [pc, #396]	; (8005bbc <HAL_DMA_IRQHandler+0x408>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d036      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a61      	ldr	r2, [pc, #388]	; (8005bc0 <HAL_DMA_IRQHandler+0x40c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d031      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a60      	ldr	r2, [pc, #384]	; (8005bc4 <HAL_DMA_IRQHandler+0x410>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d02c      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a5e      	ldr	r2, [pc, #376]	; (8005bc8 <HAL_DMA_IRQHandler+0x414>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d027      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a5d      	ldr	r2, [pc, #372]	; (8005bcc <HAL_DMA_IRQHandler+0x418>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d022      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a5b      	ldr	r2, [pc, #364]	; (8005bd0 <HAL_DMA_IRQHandler+0x41c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01d      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a5a      	ldr	r2, [pc, #360]	; (8005bd4 <HAL_DMA_IRQHandler+0x420>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d018      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a58      	ldr	r2, [pc, #352]	; (8005bd8 <HAL_DMA_IRQHandler+0x424>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a57      	ldr	r2, [pc, #348]	; (8005bdc <HAL_DMA_IRQHandler+0x428>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a55      	ldr	r2, [pc, #340]	; (8005be0 <HAL_DMA_IRQHandler+0x42c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a54      	ldr	r2, [pc, #336]	; (8005be4 <HAL_DMA_IRQHandler+0x430>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a52      	ldr	r2, [pc, #328]	; (8005be8 <HAL_DMA_IRQHandler+0x434>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10a      	bne.n	8005ab8 <HAL_DMA_IRQHandler+0x304>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	bf14      	ite	ne
 8005ab0:	2301      	movne	r3, #1
 8005ab2:	2300      	moveq	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	e003      	b.n	8005ac0 <HAL_DMA_IRQHandler+0x30c>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00d      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	2201      	movs	r2, #1
 8005ace:	409a      	lsls	r2, r3
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad8:	f043 0202 	orr.w	r2, r3, #2
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	2204      	movs	r2, #4
 8005aea:	409a      	lsls	r2, r3
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 808f 	beq.w	8005c14 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a2c      	ldr	r2, [pc, #176]	; (8005bac <HAL_DMA_IRQHandler+0x3f8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d04a      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a2a      	ldr	r2, [pc, #168]	; (8005bb0 <HAL_DMA_IRQHandler+0x3fc>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d045      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a29      	ldr	r2, [pc, #164]	; (8005bb4 <HAL_DMA_IRQHandler+0x400>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d040      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a27      	ldr	r2, [pc, #156]	; (8005bb8 <HAL_DMA_IRQHandler+0x404>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d03b      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a26      	ldr	r2, [pc, #152]	; (8005bbc <HAL_DMA_IRQHandler+0x408>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d036      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a24      	ldr	r2, [pc, #144]	; (8005bc0 <HAL_DMA_IRQHandler+0x40c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d031      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a23      	ldr	r2, [pc, #140]	; (8005bc4 <HAL_DMA_IRQHandler+0x410>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d02c      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a21      	ldr	r2, [pc, #132]	; (8005bc8 <HAL_DMA_IRQHandler+0x414>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d027      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a20      	ldr	r2, [pc, #128]	; (8005bcc <HAL_DMA_IRQHandler+0x418>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d022      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1e      	ldr	r2, [pc, #120]	; (8005bd0 <HAL_DMA_IRQHandler+0x41c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d01d      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1d      	ldr	r2, [pc, #116]	; (8005bd4 <HAL_DMA_IRQHandler+0x420>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d018      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a1b      	ldr	r2, [pc, #108]	; (8005bd8 <HAL_DMA_IRQHandler+0x424>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a1a      	ldr	r2, [pc, #104]	; (8005bdc <HAL_DMA_IRQHandler+0x428>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00e      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a18      	ldr	r2, [pc, #96]	; (8005be0 <HAL_DMA_IRQHandler+0x42c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d009      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a17      	ldr	r2, [pc, #92]	; (8005be4 <HAL_DMA_IRQHandler+0x430>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d004      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a15      	ldr	r2, [pc, #84]	; (8005be8 <HAL_DMA_IRQHandler+0x434>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d12a      	bne.n	8005bec <HAL_DMA_IRQHandler+0x438>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	bf14      	ite	ne
 8005ba4:	2301      	movne	r3, #1
 8005ba6:	2300      	moveq	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	e023      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x440>
 8005bac:	40020010 	.word	0x40020010
 8005bb0:	40020028 	.word	0x40020028
 8005bb4:	40020040 	.word	0x40020040
 8005bb8:	40020058 	.word	0x40020058
 8005bbc:	40020070 	.word	0x40020070
 8005bc0:	40020088 	.word	0x40020088
 8005bc4:	400200a0 	.word	0x400200a0
 8005bc8:	400200b8 	.word	0x400200b8
 8005bcc:	40020410 	.word	0x40020410
 8005bd0:	40020428 	.word	0x40020428
 8005bd4:	40020440 	.word	0x40020440
 8005bd8:	40020458 	.word	0x40020458
 8005bdc:	40020470 	.word	0x40020470
 8005be0:	40020488 	.word	0x40020488
 8005be4:	400204a0 	.word	0x400204a0
 8005be8:	400204b8 	.word	0x400204b8
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00d      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	2204      	movs	r2, #4
 8005c02:	409a      	lsls	r2, r3
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0c:	f043 0204 	orr.w	r2, r3, #4
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c18:	f003 031f 	and.w	r3, r3, #31
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	409a      	lsls	r2, r3
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 80a6 	beq.w	8005d76 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a85      	ldr	r2, [pc, #532]	; (8005e44 <HAL_DMA_IRQHandler+0x690>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d04a      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a83      	ldr	r2, [pc, #524]	; (8005e48 <HAL_DMA_IRQHandler+0x694>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d045      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a82      	ldr	r2, [pc, #520]	; (8005e4c <HAL_DMA_IRQHandler+0x698>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d040      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a80      	ldr	r2, [pc, #512]	; (8005e50 <HAL_DMA_IRQHandler+0x69c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d03b      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a7f      	ldr	r2, [pc, #508]	; (8005e54 <HAL_DMA_IRQHandler+0x6a0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d036      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a7d      	ldr	r2, [pc, #500]	; (8005e58 <HAL_DMA_IRQHandler+0x6a4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d031      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a7c      	ldr	r2, [pc, #496]	; (8005e5c <HAL_DMA_IRQHandler+0x6a8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d02c      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a7a      	ldr	r2, [pc, #488]	; (8005e60 <HAL_DMA_IRQHandler+0x6ac>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d027      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a79      	ldr	r2, [pc, #484]	; (8005e64 <HAL_DMA_IRQHandler+0x6b0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d022      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a77      	ldr	r2, [pc, #476]	; (8005e68 <HAL_DMA_IRQHandler+0x6b4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01d      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a76      	ldr	r2, [pc, #472]	; (8005e6c <HAL_DMA_IRQHandler+0x6b8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d018      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a74      	ldr	r2, [pc, #464]	; (8005e70 <HAL_DMA_IRQHandler+0x6bc>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d013      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a73      	ldr	r2, [pc, #460]	; (8005e74 <HAL_DMA_IRQHandler+0x6c0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00e      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a71      	ldr	r2, [pc, #452]	; (8005e78 <HAL_DMA_IRQHandler+0x6c4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d009      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a70      	ldr	r2, [pc, #448]	; (8005e7c <HAL_DMA_IRQHandler+0x6c8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d004      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a6e      	ldr	r2, [pc, #440]	; (8005e80 <HAL_DMA_IRQHandler+0x6cc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d10a      	bne.n	8005ce0 <HAL_DMA_IRQHandler+0x52c>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0308 	and.w	r3, r3, #8
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	bf14      	ite	ne
 8005cd8:	2301      	movne	r3, #1
 8005cda:	2300      	moveq	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	e009      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x540>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	bf14      	ite	ne
 8005cee:	2301      	movne	r3, #1
 8005cf0:	2300      	moveq	r3, #0
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d03e      	beq.n	8005d76 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfc:	f003 031f 	and.w	r3, r3, #31
 8005d00:	2210      	movs	r2, #16
 8005d02:	409a      	lsls	r2, r3
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d018      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d108      	bne.n	8005d36 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d024      	beq.n	8005d76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	4798      	blx	r3
 8005d34:	e01f      	b.n	8005d76 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d01b      	beq.n	8005d76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	4798      	blx	r3
 8005d46:	e016      	b.n	8005d76 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d107      	bne.n	8005d66 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0208 	bic.w	r2, r2, #8
 8005d64:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	2220      	movs	r2, #32
 8005d80:	409a      	lsls	r2, r3
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	4013      	ands	r3, r2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 8110 	beq.w	8005fac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a2c      	ldr	r2, [pc, #176]	; (8005e44 <HAL_DMA_IRQHandler+0x690>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d04a      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a2b      	ldr	r2, [pc, #172]	; (8005e48 <HAL_DMA_IRQHandler+0x694>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d045      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a29      	ldr	r2, [pc, #164]	; (8005e4c <HAL_DMA_IRQHandler+0x698>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d040      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a28      	ldr	r2, [pc, #160]	; (8005e50 <HAL_DMA_IRQHandler+0x69c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d03b      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a26      	ldr	r2, [pc, #152]	; (8005e54 <HAL_DMA_IRQHandler+0x6a0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d036      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a25      	ldr	r2, [pc, #148]	; (8005e58 <HAL_DMA_IRQHandler+0x6a4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d031      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a23      	ldr	r2, [pc, #140]	; (8005e5c <HAL_DMA_IRQHandler+0x6a8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d02c      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a22      	ldr	r2, [pc, #136]	; (8005e60 <HAL_DMA_IRQHandler+0x6ac>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d027      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a20      	ldr	r2, [pc, #128]	; (8005e64 <HAL_DMA_IRQHandler+0x6b0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d022      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a1f      	ldr	r2, [pc, #124]	; (8005e68 <HAL_DMA_IRQHandler+0x6b4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d01d      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a1d      	ldr	r2, [pc, #116]	; (8005e6c <HAL_DMA_IRQHandler+0x6b8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d018      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a1c      	ldr	r2, [pc, #112]	; (8005e70 <HAL_DMA_IRQHandler+0x6bc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d013      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a1a      	ldr	r2, [pc, #104]	; (8005e74 <HAL_DMA_IRQHandler+0x6c0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00e      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a19      	ldr	r2, [pc, #100]	; (8005e78 <HAL_DMA_IRQHandler+0x6c4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d009      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a17      	ldr	r2, [pc, #92]	; (8005e7c <HAL_DMA_IRQHandler+0x6c8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a16      	ldr	r2, [pc, #88]	; (8005e80 <HAL_DMA_IRQHandler+0x6cc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d12b      	bne.n	8005e84 <HAL_DMA_IRQHandler+0x6d0>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0310 	and.w	r3, r3, #16
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bf14      	ite	ne
 8005e3a:	2301      	movne	r3, #1
 8005e3c:	2300      	moveq	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	e02a      	b.n	8005e98 <HAL_DMA_IRQHandler+0x6e4>
 8005e42:	bf00      	nop
 8005e44:	40020010 	.word	0x40020010
 8005e48:	40020028 	.word	0x40020028
 8005e4c:	40020040 	.word	0x40020040
 8005e50:	40020058 	.word	0x40020058
 8005e54:	40020070 	.word	0x40020070
 8005e58:	40020088 	.word	0x40020088
 8005e5c:	400200a0 	.word	0x400200a0
 8005e60:	400200b8 	.word	0x400200b8
 8005e64:	40020410 	.word	0x40020410
 8005e68:	40020428 	.word	0x40020428
 8005e6c:	40020440 	.word	0x40020440
 8005e70:	40020458 	.word	0x40020458
 8005e74:	40020470 	.word	0x40020470
 8005e78:	40020488 	.word	0x40020488
 8005e7c:	400204a0 	.word	0x400204a0
 8005e80:	400204b8 	.word	0x400204b8
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bf14      	ite	ne
 8005e92:	2301      	movne	r3, #1
 8005e94:	2300      	moveq	r3, #0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8087 	beq.w	8005fac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	409a      	lsls	r2, r3
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d139      	bne.n	8005f2e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0216 	bic.w	r2, r2, #22
 8005ec8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ed8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d103      	bne.n	8005eea <HAL_DMA_IRQHandler+0x736>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0208 	bic.w	r2, r2, #8
 8005ef8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	223f      	movs	r2, #63	; 0x3f
 8005f04:	409a      	lsls	r2, r3
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 8382 	beq.w	8006628 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	4798      	blx	r3
          }
          return;
 8005f2c:	e37c      	b.n	8006628 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d018      	beq.n	8005f6e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d108      	bne.n	8005f5c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d02c      	beq.n	8005fac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
 8005f5a:	e027      	b.n	8005fac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d023      	beq.n	8005fac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	4798      	blx	r3
 8005f6c:	e01e      	b.n	8005fac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10f      	bne.n	8005f9c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0210 	bic.w	r2, r2, #16
 8005f8a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 833e 	beq.w	8006632 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 8088 	beq.w	80060d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2204      	movs	r2, #4
 8005fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a89      	ldr	r2, [pc, #548]	; (80061f8 <HAL_DMA_IRQHandler+0xa44>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d04a      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a88      	ldr	r2, [pc, #544]	; (80061fc <HAL_DMA_IRQHandler+0xa48>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d045      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a86      	ldr	r2, [pc, #536]	; (8006200 <HAL_DMA_IRQHandler+0xa4c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d040      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a85      	ldr	r2, [pc, #532]	; (8006204 <HAL_DMA_IRQHandler+0xa50>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d03b      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a83      	ldr	r2, [pc, #524]	; (8006208 <HAL_DMA_IRQHandler+0xa54>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d036      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a82      	ldr	r2, [pc, #520]	; (800620c <HAL_DMA_IRQHandler+0xa58>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d031      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a80      	ldr	r2, [pc, #512]	; (8006210 <HAL_DMA_IRQHandler+0xa5c>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d02c      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a7f      	ldr	r2, [pc, #508]	; (8006214 <HAL_DMA_IRQHandler+0xa60>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d027      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a7d      	ldr	r2, [pc, #500]	; (8006218 <HAL_DMA_IRQHandler+0xa64>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d022      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a7c      	ldr	r2, [pc, #496]	; (800621c <HAL_DMA_IRQHandler+0xa68>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d01d      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a7a      	ldr	r2, [pc, #488]	; (8006220 <HAL_DMA_IRQHandler+0xa6c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d018      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a79      	ldr	r2, [pc, #484]	; (8006224 <HAL_DMA_IRQHandler+0xa70>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d013      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a77      	ldr	r2, [pc, #476]	; (8006228 <HAL_DMA_IRQHandler+0xa74>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a76      	ldr	r2, [pc, #472]	; (800622c <HAL_DMA_IRQHandler+0xa78>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a74      	ldr	r2, [pc, #464]	; (8006230 <HAL_DMA_IRQHandler+0xa7c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a73      	ldr	r2, [pc, #460]	; (8006234 <HAL_DMA_IRQHandler+0xa80>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d108      	bne.n	800607e <HAL_DMA_IRQHandler+0x8ca>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0201 	bic.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	e007      	b.n	800608e <HAL_DMA_IRQHandler+0x8da>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0201 	bic.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3301      	adds	r3, #1
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006096:	429a      	cmp	r2, r3
 8006098:	d307      	bcc.n	80060aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1f2      	bne.n	800608e <HAL_DMA_IRQHandler+0x8da>
 80060a8:	e000      	b.n	80060ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80060aa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d004      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2203      	movs	r2, #3
 80060be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80060c2:	e003      	b.n	80060cc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 82aa 	beq.w	8006632 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	4798      	blx	r3
 80060e6:	e2a4      	b.n	8006632 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a52      	ldr	r2, [pc, #328]	; (8006238 <HAL_DMA_IRQHandler+0xa84>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d04a      	beq.n	8006188 <HAL_DMA_IRQHandler+0x9d4>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a51      	ldr	r2, [pc, #324]	; (800623c <HAL_DMA_IRQHandler+0xa88>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d045      	beq.n	8006188 <HAL_DMA_IRQHandler+0x9d4>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a4f      	ldr	r2, [pc, #316]	; (8006240 <HAL_DMA_IRQHandler+0xa8c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d040      	beq.n	8006188 <HAL_DMA_IRQHandler+0x9d4>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a4e      	ldr	r2, [pc, #312]	; (8006244 <HAL_DMA_IRQHandler+0xa90>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d03b      	beq.n	8006188 <HAL_DMA_IRQHandler+0x9d4>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a4c      	ldr	r2, [pc, #304]	; (8006248 <HAL_DMA_IRQHandler+0xa94>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d036      	beq.n	8006188 <HAL_DMA_IRQHandler+0x9d4>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a4b      	ldr	r2, [pc, #300]	; (800624c <HAL_DMA_IRQHandler+0xa98>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d031      	beq.n	8006188 <HAL_DMA_IRQHandler+0x9d4>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a49      	ldr	r2, [pc, #292]	; (8006250 <HAL_DMA_IRQHandler+0xa9c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d02c      	beq.n	8006188 <HAL_DMA_IRQHandler+0x9d4>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a48      	ldr	r2, [pc, #288]	; (8006254 <HAL_DMA_IRQHandler+0xaa0>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d027      	beq.n	8006188 <HAL_DMA_IRQHandler+0x9d4>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a46      	ldr	r2, [pc, #280]	; (8006258 <HAL_DMA_IRQHandler+0xaa4>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d022      	beq.n	8006188 <HAL_DMA_IRQHandler+0x9d4>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a45      	ldr	r2, [pc, #276]	; (800625c <HAL_DMA_IRQHandler+0xaa8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d01d      	beq.n	8006188 <HAL_DMA_IRQHandler+0x9d4>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a43      	ldr	r2, [pc, #268]	; (8006260 <HAL_DMA_IRQHandler+0xaac>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d018      	beq.n	8006188 <HAL_DMA_IRQHandler+0x9d4>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a42      	ldr	r2, [pc, #264]	; (8006264 <HAL_DMA_IRQHandler+0xab0>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d013      	beq.n	8006188 <HAL_DMA_IRQHandler+0x9d4>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a40      	ldr	r2, [pc, #256]	; (8006268 <HAL_DMA_IRQHandler+0xab4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00e      	beq.n	8006188 <HAL_DMA_IRQHandler+0x9d4>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a3f      	ldr	r2, [pc, #252]	; (800626c <HAL_DMA_IRQHandler+0xab8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d009      	beq.n	8006188 <HAL_DMA_IRQHandler+0x9d4>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a3d      	ldr	r2, [pc, #244]	; (8006270 <HAL_DMA_IRQHandler+0xabc>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d004      	beq.n	8006188 <HAL_DMA_IRQHandler+0x9d4>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a3c      	ldr	r2, [pc, #240]	; (8006274 <HAL_DMA_IRQHandler+0xac0>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d101      	bne.n	800618c <HAL_DMA_IRQHandler+0x9d8>
 8006188:	2301      	movs	r3, #1
 800618a:	e000      	b.n	800618e <HAL_DMA_IRQHandler+0x9da>
 800618c:	2300      	movs	r3, #0
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 824f 	beq.w	8006632 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a0:	f003 031f 	and.w	r3, r3, #31
 80061a4:	2204      	movs	r2, #4
 80061a6:	409a      	lsls	r2, r3
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80dd 	beq.w	800636c <HAL_DMA_IRQHandler+0xbb8>
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80d7 	beq.w	800636c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c2:	f003 031f 	and.w	r3, r3, #31
 80061c6:	2204      	movs	r2, #4
 80061c8:	409a      	lsls	r2, r3
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d059      	beq.n	800628c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d14a      	bne.n	8006278 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 8220 	beq.w	800662c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061f4:	e21a      	b.n	800662c <HAL_DMA_IRQHandler+0xe78>
 80061f6:	bf00      	nop
 80061f8:	40020010 	.word	0x40020010
 80061fc:	40020028 	.word	0x40020028
 8006200:	40020040 	.word	0x40020040
 8006204:	40020058 	.word	0x40020058
 8006208:	40020070 	.word	0x40020070
 800620c:	40020088 	.word	0x40020088
 8006210:	400200a0 	.word	0x400200a0
 8006214:	400200b8 	.word	0x400200b8
 8006218:	40020410 	.word	0x40020410
 800621c:	40020428 	.word	0x40020428
 8006220:	40020440 	.word	0x40020440
 8006224:	40020458 	.word	0x40020458
 8006228:	40020470 	.word	0x40020470
 800622c:	40020488 	.word	0x40020488
 8006230:	400204a0 	.word	0x400204a0
 8006234:	400204b8 	.word	0x400204b8
 8006238:	48022c08 	.word	0x48022c08
 800623c:	48022c1c 	.word	0x48022c1c
 8006240:	48022c30 	.word	0x48022c30
 8006244:	48022c44 	.word	0x48022c44
 8006248:	48022c58 	.word	0x48022c58
 800624c:	48022c6c 	.word	0x48022c6c
 8006250:	48022c80 	.word	0x48022c80
 8006254:	48022c94 	.word	0x48022c94
 8006258:	58025408 	.word	0x58025408
 800625c:	5802541c 	.word	0x5802541c
 8006260:	58025430 	.word	0x58025430
 8006264:	58025444 	.word	0x58025444
 8006268:	58025458 	.word	0x58025458
 800626c:	5802546c 	.word	0x5802546c
 8006270:	58025480 	.word	0x58025480
 8006274:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 81d5 	beq.w	800662c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800628a:	e1cf      	b.n	800662c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d160      	bne.n	8006358 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a7f      	ldr	r2, [pc, #508]	; (8006498 <HAL_DMA_IRQHandler+0xce4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d04a      	beq.n	8006336 <HAL_DMA_IRQHandler+0xb82>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a7d      	ldr	r2, [pc, #500]	; (800649c <HAL_DMA_IRQHandler+0xce8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d045      	beq.n	8006336 <HAL_DMA_IRQHandler+0xb82>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a7c      	ldr	r2, [pc, #496]	; (80064a0 <HAL_DMA_IRQHandler+0xcec>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d040      	beq.n	8006336 <HAL_DMA_IRQHandler+0xb82>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a7a      	ldr	r2, [pc, #488]	; (80064a4 <HAL_DMA_IRQHandler+0xcf0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d03b      	beq.n	8006336 <HAL_DMA_IRQHandler+0xb82>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a79      	ldr	r2, [pc, #484]	; (80064a8 <HAL_DMA_IRQHandler+0xcf4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d036      	beq.n	8006336 <HAL_DMA_IRQHandler+0xb82>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a77      	ldr	r2, [pc, #476]	; (80064ac <HAL_DMA_IRQHandler+0xcf8>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d031      	beq.n	8006336 <HAL_DMA_IRQHandler+0xb82>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a76      	ldr	r2, [pc, #472]	; (80064b0 <HAL_DMA_IRQHandler+0xcfc>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d02c      	beq.n	8006336 <HAL_DMA_IRQHandler+0xb82>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a74      	ldr	r2, [pc, #464]	; (80064b4 <HAL_DMA_IRQHandler+0xd00>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d027      	beq.n	8006336 <HAL_DMA_IRQHandler+0xb82>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a73      	ldr	r2, [pc, #460]	; (80064b8 <HAL_DMA_IRQHandler+0xd04>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d022      	beq.n	8006336 <HAL_DMA_IRQHandler+0xb82>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a71      	ldr	r2, [pc, #452]	; (80064bc <HAL_DMA_IRQHandler+0xd08>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01d      	beq.n	8006336 <HAL_DMA_IRQHandler+0xb82>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a70      	ldr	r2, [pc, #448]	; (80064c0 <HAL_DMA_IRQHandler+0xd0c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d018      	beq.n	8006336 <HAL_DMA_IRQHandler+0xb82>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a6e      	ldr	r2, [pc, #440]	; (80064c4 <HAL_DMA_IRQHandler+0xd10>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <HAL_DMA_IRQHandler+0xb82>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a6d      	ldr	r2, [pc, #436]	; (80064c8 <HAL_DMA_IRQHandler+0xd14>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00e      	beq.n	8006336 <HAL_DMA_IRQHandler+0xb82>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a6b      	ldr	r2, [pc, #428]	; (80064cc <HAL_DMA_IRQHandler+0xd18>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d009      	beq.n	8006336 <HAL_DMA_IRQHandler+0xb82>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a6a      	ldr	r2, [pc, #424]	; (80064d0 <HAL_DMA_IRQHandler+0xd1c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d004      	beq.n	8006336 <HAL_DMA_IRQHandler+0xb82>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a68      	ldr	r2, [pc, #416]	; (80064d4 <HAL_DMA_IRQHandler+0xd20>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d108      	bne.n	8006348 <HAL_DMA_IRQHandler+0xb94>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0208 	bic.w	r2, r2, #8
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	e007      	b.n	8006358 <HAL_DMA_IRQHandler+0xba4>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0204 	bic.w	r2, r2, #4
 8006356:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 8165 	beq.w	800662c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800636a:	e15f      	b.n	800662c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006370:	f003 031f 	and.w	r3, r3, #31
 8006374:	2202      	movs	r2, #2
 8006376:	409a      	lsls	r2, r3
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	4013      	ands	r3, r2
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 80c5 	beq.w	800650c <HAL_DMA_IRQHandler+0xd58>
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 80bf 	beq.w	800650c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006392:	f003 031f 	and.w	r3, r3, #31
 8006396:	2202      	movs	r2, #2
 8006398:	409a      	lsls	r2, r3
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d018      	beq.n	80063da <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f000 813a 	beq.w	8006630 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063c4:	e134      	b.n	8006630 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 8130 	beq.w	8006630 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063d8:	e12a      	b.n	8006630 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f040 8089 	bne.w	80064f8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a2b      	ldr	r2, [pc, #172]	; (8006498 <HAL_DMA_IRQHandler+0xce4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d04a      	beq.n	8006486 <HAL_DMA_IRQHandler+0xcd2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a29      	ldr	r2, [pc, #164]	; (800649c <HAL_DMA_IRQHandler+0xce8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d045      	beq.n	8006486 <HAL_DMA_IRQHandler+0xcd2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a28      	ldr	r2, [pc, #160]	; (80064a0 <HAL_DMA_IRQHandler+0xcec>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d040      	beq.n	8006486 <HAL_DMA_IRQHandler+0xcd2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a26      	ldr	r2, [pc, #152]	; (80064a4 <HAL_DMA_IRQHandler+0xcf0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d03b      	beq.n	8006486 <HAL_DMA_IRQHandler+0xcd2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a25      	ldr	r2, [pc, #148]	; (80064a8 <HAL_DMA_IRQHandler+0xcf4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d036      	beq.n	8006486 <HAL_DMA_IRQHandler+0xcd2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a23      	ldr	r2, [pc, #140]	; (80064ac <HAL_DMA_IRQHandler+0xcf8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d031      	beq.n	8006486 <HAL_DMA_IRQHandler+0xcd2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a22      	ldr	r2, [pc, #136]	; (80064b0 <HAL_DMA_IRQHandler+0xcfc>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d02c      	beq.n	8006486 <HAL_DMA_IRQHandler+0xcd2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a20      	ldr	r2, [pc, #128]	; (80064b4 <HAL_DMA_IRQHandler+0xd00>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d027      	beq.n	8006486 <HAL_DMA_IRQHandler+0xcd2>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a1f      	ldr	r2, [pc, #124]	; (80064b8 <HAL_DMA_IRQHandler+0xd04>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d022      	beq.n	8006486 <HAL_DMA_IRQHandler+0xcd2>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a1d      	ldr	r2, [pc, #116]	; (80064bc <HAL_DMA_IRQHandler+0xd08>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d01d      	beq.n	8006486 <HAL_DMA_IRQHandler+0xcd2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a1c      	ldr	r2, [pc, #112]	; (80064c0 <HAL_DMA_IRQHandler+0xd0c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d018      	beq.n	8006486 <HAL_DMA_IRQHandler+0xcd2>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a1a      	ldr	r2, [pc, #104]	; (80064c4 <HAL_DMA_IRQHandler+0xd10>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <HAL_DMA_IRQHandler+0xcd2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a19      	ldr	r2, [pc, #100]	; (80064c8 <HAL_DMA_IRQHandler+0xd14>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00e      	beq.n	8006486 <HAL_DMA_IRQHandler+0xcd2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a17      	ldr	r2, [pc, #92]	; (80064cc <HAL_DMA_IRQHandler+0xd18>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d009      	beq.n	8006486 <HAL_DMA_IRQHandler+0xcd2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a16      	ldr	r2, [pc, #88]	; (80064d0 <HAL_DMA_IRQHandler+0xd1c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d004      	beq.n	8006486 <HAL_DMA_IRQHandler+0xcd2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a14      	ldr	r2, [pc, #80]	; (80064d4 <HAL_DMA_IRQHandler+0xd20>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d128      	bne.n	80064d8 <HAL_DMA_IRQHandler+0xd24>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0214 	bic.w	r2, r2, #20
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	e027      	b.n	80064e8 <HAL_DMA_IRQHandler+0xd34>
 8006498:	40020010 	.word	0x40020010
 800649c:	40020028 	.word	0x40020028
 80064a0:	40020040 	.word	0x40020040
 80064a4:	40020058 	.word	0x40020058
 80064a8:	40020070 	.word	0x40020070
 80064ac:	40020088 	.word	0x40020088
 80064b0:	400200a0 	.word	0x400200a0
 80064b4:	400200b8 	.word	0x400200b8
 80064b8:	40020410 	.word	0x40020410
 80064bc:	40020428 	.word	0x40020428
 80064c0:	40020440 	.word	0x40020440
 80064c4:	40020458 	.word	0x40020458
 80064c8:	40020470 	.word	0x40020470
 80064cc:	40020488 	.word	0x40020488
 80064d0:	400204a0 	.word	0x400204a0
 80064d4:	400204b8 	.word	0x400204b8
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 020a 	bic.w	r2, r2, #10
 80064e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 8097 	beq.w	8006630 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800650a:	e091      	b.n	8006630 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006510:	f003 031f 	and.w	r3, r3, #31
 8006514:	2208      	movs	r2, #8
 8006516:	409a      	lsls	r2, r3
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	4013      	ands	r3, r2
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8088 	beq.w	8006632 <HAL_DMA_IRQHandler+0xe7e>
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 8082 	beq.w	8006632 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a41      	ldr	r2, [pc, #260]	; (8006638 <HAL_DMA_IRQHandler+0xe84>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d04a      	beq.n	80065ce <HAL_DMA_IRQHandler+0xe1a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a3f      	ldr	r2, [pc, #252]	; (800663c <HAL_DMA_IRQHandler+0xe88>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d045      	beq.n	80065ce <HAL_DMA_IRQHandler+0xe1a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a3e      	ldr	r2, [pc, #248]	; (8006640 <HAL_DMA_IRQHandler+0xe8c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d040      	beq.n	80065ce <HAL_DMA_IRQHandler+0xe1a>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a3c      	ldr	r2, [pc, #240]	; (8006644 <HAL_DMA_IRQHandler+0xe90>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d03b      	beq.n	80065ce <HAL_DMA_IRQHandler+0xe1a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a3b      	ldr	r2, [pc, #236]	; (8006648 <HAL_DMA_IRQHandler+0xe94>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d036      	beq.n	80065ce <HAL_DMA_IRQHandler+0xe1a>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a39      	ldr	r2, [pc, #228]	; (800664c <HAL_DMA_IRQHandler+0xe98>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d031      	beq.n	80065ce <HAL_DMA_IRQHandler+0xe1a>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a38      	ldr	r2, [pc, #224]	; (8006650 <HAL_DMA_IRQHandler+0xe9c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d02c      	beq.n	80065ce <HAL_DMA_IRQHandler+0xe1a>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a36      	ldr	r2, [pc, #216]	; (8006654 <HAL_DMA_IRQHandler+0xea0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d027      	beq.n	80065ce <HAL_DMA_IRQHandler+0xe1a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a35      	ldr	r2, [pc, #212]	; (8006658 <HAL_DMA_IRQHandler+0xea4>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d022      	beq.n	80065ce <HAL_DMA_IRQHandler+0xe1a>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a33      	ldr	r2, [pc, #204]	; (800665c <HAL_DMA_IRQHandler+0xea8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d01d      	beq.n	80065ce <HAL_DMA_IRQHandler+0xe1a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a32      	ldr	r2, [pc, #200]	; (8006660 <HAL_DMA_IRQHandler+0xeac>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d018      	beq.n	80065ce <HAL_DMA_IRQHandler+0xe1a>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a30      	ldr	r2, [pc, #192]	; (8006664 <HAL_DMA_IRQHandler+0xeb0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <HAL_DMA_IRQHandler+0xe1a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a2f      	ldr	r2, [pc, #188]	; (8006668 <HAL_DMA_IRQHandler+0xeb4>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00e      	beq.n	80065ce <HAL_DMA_IRQHandler+0xe1a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a2d      	ldr	r2, [pc, #180]	; (800666c <HAL_DMA_IRQHandler+0xeb8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d009      	beq.n	80065ce <HAL_DMA_IRQHandler+0xe1a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a2c      	ldr	r2, [pc, #176]	; (8006670 <HAL_DMA_IRQHandler+0xebc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d004      	beq.n	80065ce <HAL_DMA_IRQHandler+0xe1a>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a2a      	ldr	r2, [pc, #168]	; (8006674 <HAL_DMA_IRQHandler+0xec0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d108      	bne.n	80065e0 <HAL_DMA_IRQHandler+0xe2c>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 021c 	bic.w	r2, r2, #28
 80065dc:	601a      	str	r2, [r3, #0]
 80065de:	e007      	b.n	80065f0 <HAL_DMA_IRQHandler+0xe3c>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 020e 	bic.w	r2, r2, #14
 80065ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f4:	f003 031f 	and.w	r3, r3, #31
 80065f8:	2201      	movs	r2, #1
 80065fa:	409a      	lsls	r2, r3
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d009      	beq.n	8006632 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	4798      	blx	r3
 8006626:	e004      	b.n	8006632 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006628:	bf00      	nop
 800662a:	e002      	b.n	8006632 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800662c:	bf00      	nop
 800662e:	e000      	b.n	8006632 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006630:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006632:	3728      	adds	r7, #40	; 0x28
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40020010 	.word	0x40020010
 800663c:	40020028 	.word	0x40020028
 8006640:	40020040 	.word	0x40020040
 8006644:	40020058 	.word	0x40020058
 8006648:	40020070 	.word	0x40020070
 800664c:	40020088 	.word	0x40020088
 8006650:	400200a0 	.word	0x400200a0
 8006654:	400200b8 	.word	0x400200b8
 8006658:	40020410 	.word	0x40020410
 800665c:	40020428 	.word	0x40020428
 8006660:	40020440 	.word	0x40020440
 8006664:	40020458 	.word	0x40020458
 8006668:	40020470 	.word	0x40020470
 800666c:	40020488 	.word	0x40020488
 8006670:	400204a0 	.word	0x400204a0
 8006674:	400204b8 	.word	0x400204b8

08006678 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006690:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a7f      	ldr	r2, [pc, #508]	; (8006894 <DMA_SetConfig+0x21c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d072      	beq.n	8006782 <DMA_SetConfig+0x10a>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a7d      	ldr	r2, [pc, #500]	; (8006898 <DMA_SetConfig+0x220>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d06d      	beq.n	8006782 <DMA_SetConfig+0x10a>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a7c      	ldr	r2, [pc, #496]	; (800689c <DMA_SetConfig+0x224>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d068      	beq.n	8006782 <DMA_SetConfig+0x10a>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a7a      	ldr	r2, [pc, #488]	; (80068a0 <DMA_SetConfig+0x228>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d063      	beq.n	8006782 <DMA_SetConfig+0x10a>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a79      	ldr	r2, [pc, #484]	; (80068a4 <DMA_SetConfig+0x22c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d05e      	beq.n	8006782 <DMA_SetConfig+0x10a>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a77      	ldr	r2, [pc, #476]	; (80068a8 <DMA_SetConfig+0x230>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d059      	beq.n	8006782 <DMA_SetConfig+0x10a>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a76      	ldr	r2, [pc, #472]	; (80068ac <DMA_SetConfig+0x234>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d054      	beq.n	8006782 <DMA_SetConfig+0x10a>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a74      	ldr	r2, [pc, #464]	; (80068b0 <DMA_SetConfig+0x238>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d04f      	beq.n	8006782 <DMA_SetConfig+0x10a>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a73      	ldr	r2, [pc, #460]	; (80068b4 <DMA_SetConfig+0x23c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d04a      	beq.n	8006782 <DMA_SetConfig+0x10a>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a71      	ldr	r2, [pc, #452]	; (80068b8 <DMA_SetConfig+0x240>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d045      	beq.n	8006782 <DMA_SetConfig+0x10a>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a70      	ldr	r2, [pc, #448]	; (80068bc <DMA_SetConfig+0x244>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d040      	beq.n	8006782 <DMA_SetConfig+0x10a>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a6e      	ldr	r2, [pc, #440]	; (80068c0 <DMA_SetConfig+0x248>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d03b      	beq.n	8006782 <DMA_SetConfig+0x10a>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a6d      	ldr	r2, [pc, #436]	; (80068c4 <DMA_SetConfig+0x24c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d036      	beq.n	8006782 <DMA_SetConfig+0x10a>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a6b      	ldr	r2, [pc, #428]	; (80068c8 <DMA_SetConfig+0x250>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d031      	beq.n	8006782 <DMA_SetConfig+0x10a>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a6a      	ldr	r2, [pc, #424]	; (80068cc <DMA_SetConfig+0x254>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d02c      	beq.n	8006782 <DMA_SetConfig+0x10a>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a68      	ldr	r2, [pc, #416]	; (80068d0 <DMA_SetConfig+0x258>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d027      	beq.n	8006782 <DMA_SetConfig+0x10a>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a67      	ldr	r2, [pc, #412]	; (80068d4 <DMA_SetConfig+0x25c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d022      	beq.n	8006782 <DMA_SetConfig+0x10a>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a65      	ldr	r2, [pc, #404]	; (80068d8 <DMA_SetConfig+0x260>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d01d      	beq.n	8006782 <DMA_SetConfig+0x10a>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a64      	ldr	r2, [pc, #400]	; (80068dc <DMA_SetConfig+0x264>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d018      	beq.n	8006782 <DMA_SetConfig+0x10a>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a62      	ldr	r2, [pc, #392]	; (80068e0 <DMA_SetConfig+0x268>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d013      	beq.n	8006782 <DMA_SetConfig+0x10a>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a61      	ldr	r2, [pc, #388]	; (80068e4 <DMA_SetConfig+0x26c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d00e      	beq.n	8006782 <DMA_SetConfig+0x10a>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a5f      	ldr	r2, [pc, #380]	; (80068e8 <DMA_SetConfig+0x270>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d009      	beq.n	8006782 <DMA_SetConfig+0x10a>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a5e      	ldr	r2, [pc, #376]	; (80068ec <DMA_SetConfig+0x274>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d004      	beq.n	8006782 <DMA_SetConfig+0x10a>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a5c      	ldr	r2, [pc, #368]	; (80068f0 <DMA_SetConfig+0x278>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d101      	bne.n	8006786 <DMA_SetConfig+0x10e>
 8006782:	2301      	movs	r3, #1
 8006784:	e000      	b.n	8006788 <DMA_SetConfig+0x110>
 8006786:	2300      	movs	r3, #0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00d      	beq.n	80067a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006794:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d004      	beq.n	80067a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80067a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a39      	ldr	r2, [pc, #228]	; (8006894 <DMA_SetConfig+0x21c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d04a      	beq.n	8006848 <DMA_SetConfig+0x1d0>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a38      	ldr	r2, [pc, #224]	; (8006898 <DMA_SetConfig+0x220>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d045      	beq.n	8006848 <DMA_SetConfig+0x1d0>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a36      	ldr	r2, [pc, #216]	; (800689c <DMA_SetConfig+0x224>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d040      	beq.n	8006848 <DMA_SetConfig+0x1d0>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a35      	ldr	r2, [pc, #212]	; (80068a0 <DMA_SetConfig+0x228>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d03b      	beq.n	8006848 <DMA_SetConfig+0x1d0>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a33      	ldr	r2, [pc, #204]	; (80068a4 <DMA_SetConfig+0x22c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d036      	beq.n	8006848 <DMA_SetConfig+0x1d0>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a32      	ldr	r2, [pc, #200]	; (80068a8 <DMA_SetConfig+0x230>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d031      	beq.n	8006848 <DMA_SetConfig+0x1d0>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a30      	ldr	r2, [pc, #192]	; (80068ac <DMA_SetConfig+0x234>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d02c      	beq.n	8006848 <DMA_SetConfig+0x1d0>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a2f      	ldr	r2, [pc, #188]	; (80068b0 <DMA_SetConfig+0x238>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d027      	beq.n	8006848 <DMA_SetConfig+0x1d0>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a2d      	ldr	r2, [pc, #180]	; (80068b4 <DMA_SetConfig+0x23c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d022      	beq.n	8006848 <DMA_SetConfig+0x1d0>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a2c      	ldr	r2, [pc, #176]	; (80068b8 <DMA_SetConfig+0x240>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d01d      	beq.n	8006848 <DMA_SetConfig+0x1d0>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a2a      	ldr	r2, [pc, #168]	; (80068bc <DMA_SetConfig+0x244>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d018      	beq.n	8006848 <DMA_SetConfig+0x1d0>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a29      	ldr	r2, [pc, #164]	; (80068c0 <DMA_SetConfig+0x248>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d013      	beq.n	8006848 <DMA_SetConfig+0x1d0>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a27      	ldr	r2, [pc, #156]	; (80068c4 <DMA_SetConfig+0x24c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00e      	beq.n	8006848 <DMA_SetConfig+0x1d0>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a26      	ldr	r2, [pc, #152]	; (80068c8 <DMA_SetConfig+0x250>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d009      	beq.n	8006848 <DMA_SetConfig+0x1d0>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a24      	ldr	r2, [pc, #144]	; (80068cc <DMA_SetConfig+0x254>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d004      	beq.n	8006848 <DMA_SetConfig+0x1d0>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a23      	ldr	r2, [pc, #140]	; (80068d0 <DMA_SetConfig+0x258>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d101      	bne.n	800684c <DMA_SetConfig+0x1d4>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <DMA_SetConfig+0x1d6>
 800684c:	2300      	movs	r3, #0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d059      	beq.n	8006906 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006856:	f003 031f 	and.w	r3, r3, #31
 800685a:	223f      	movs	r2, #63	; 0x3f
 800685c:	409a      	lsls	r2, r3
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006870:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d138      	bne.n	80068f4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006892:	e0ae      	b.n	80069f2 <DMA_SetConfig+0x37a>
 8006894:	40020010 	.word	0x40020010
 8006898:	40020028 	.word	0x40020028
 800689c:	40020040 	.word	0x40020040
 80068a0:	40020058 	.word	0x40020058
 80068a4:	40020070 	.word	0x40020070
 80068a8:	40020088 	.word	0x40020088
 80068ac:	400200a0 	.word	0x400200a0
 80068b0:	400200b8 	.word	0x400200b8
 80068b4:	40020410 	.word	0x40020410
 80068b8:	40020428 	.word	0x40020428
 80068bc:	40020440 	.word	0x40020440
 80068c0:	40020458 	.word	0x40020458
 80068c4:	40020470 	.word	0x40020470
 80068c8:	40020488 	.word	0x40020488
 80068cc:	400204a0 	.word	0x400204a0
 80068d0:	400204b8 	.word	0x400204b8
 80068d4:	58025408 	.word	0x58025408
 80068d8:	5802541c 	.word	0x5802541c
 80068dc:	58025430 	.word	0x58025430
 80068e0:	58025444 	.word	0x58025444
 80068e4:	58025458 	.word	0x58025458
 80068e8:	5802546c 	.word	0x5802546c
 80068ec:	58025480 	.word	0x58025480
 80068f0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	60da      	str	r2, [r3, #12]
}
 8006904:	e075      	b.n	80069f2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a3d      	ldr	r2, [pc, #244]	; (8006a00 <DMA_SetConfig+0x388>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d04a      	beq.n	80069a6 <DMA_SetConfig+0x32e>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a3b      	ldr	r2, [pc, #236]	; (8006a04 <DMA_SetConfig+0x38c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d045      	beq.n	80069a6 <DMA_SetConfig+0x32e>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a3a      	ldr	r2, [pc, #232]	; (8006a08 <DMA_SetConfig+0x390>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d040      	beq.n	80069a6 <DMA_SetConfig+0x32e>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a38      	ldr	r2, [pc, #224]	; (8006a0c <DMA_SetConfig+0x394>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d03b      	beq.n	80069a6 <DMA_SetConfig+0x32e>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a37      	ldr	r2, [pc, #220]	; (8006a10 <DMA_SetConfig+0x398>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d036      	beq.n	80069a6 <DMA_SetConfig+0x32e>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a35      	ldr	r2, [pc, #212]	; (8006a14 <DMA_SetConfig+0x39c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d031      	beq.n	80069a6 <DMA_SetConfig+0x32e>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a34      	ldr	r2, [pc, #208]	; (8006a18 <DMA_SetConfig+0x3a0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d02c      	beq.n	80069a6 <DMA_SetConfig+0x32e>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a32      	ldr	r2, [pc, #200]	; (8006a1c <DMA_SetConfig+0x3a4>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d027      	beq.n	80069a6 <DMA_SetConfig+0x32e>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a31      	ldr	r2, [pc, #196]	; (8006a20 <DMA_SetConfig+0x3a8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d022      	beq.n	80069a6 <DMA_SetConfig+0x32e>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a2f      	ldr	r2, [pc, #188]	; (8006a24 <DMA_SetConfig+0x3ac>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d01d      	beq.n	80069a6 <DMA_SetConfig+0x32e>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a2e      	ldr	r2, [pc, #184]	; (8006a28 <DMA_SetConfig+0x3b0>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d018      	beq.n	80069a6 <DMA_SetConfig+0x32e>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a2c      	ldr	r2, [pc, #176]	; (8006a2c <DMA_SetConfig+0x3b4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d013      	beq.n	80069a6 <DMA_SetConfig+0x32e>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a2b      	ldr	r2, [pc, #172]	; (8006a30 <DMA_SetConfig+0x3b8>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d00e      	beq.n	80069a6 <DMA_SetConfig+0x32e>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a29      	ldr	r2, [pc, #164]	; (8006a34 <DMA_SetConfig+0x3bc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d009      	beq.n	80069a6 <DMA_SetConfig+0x32e>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a28      	ldr	r2, [pc, #160]	; (8006a38 <DMA_SetConfig+0x3c0>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d004      	beq.n	80069a6 <DMA_SetConfig+0x32e>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a26      	ldr	r2, [pc, #152]	; (8006a3c <DMA_SetConfig+0x3c4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d101      	bne.n	80069aa <DMA_SetConfig+0x332>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <DMA_SetConfig+0x334>
 80069aa:	2300      	movs	r3, #0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d020      	beq.n	80069f2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b4:	f003 031f 	and.w	r3, r3, #31
 80069b8:	2201      	movs	r2, #1
 80069ba:	409a      	lsls	r2, r3
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	2b40      	cmp	r3, #64	; 0x40
 80069ce:	d108      	bne.n	80069e2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	60da      	str	r2, [r3, #12]
}
 80069e0:	e007      	b.n	80069f2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	60da      	str	r2, [r3, #12]
}
 80069f2:	bf00      	nop
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	48022c08 	.word	0x48022c08
 8006a04:	48022c1c 	.word	0x48022c1c
 8006a08:	48022c30 	.word	0x48022c30
 8006a0c:	48022c44 	.word	0x48022c44
 8006a10:	48022c58 	.word	0x48022c58
 8006a14:	48022c6c 	.word	0x48022c6c
 8006a18:	48022c80 	.word	0x48022c80
 8006a1c:	48022c94 	.word	0x48022c94
 8006a20:	58025408 	.word	0x58025408
 8006a24:	5802541c 	.word	0x5802541c
 8006a28:	58025430 	.word	0x58025430
 8006a2c:	58025444 	.word	0x58025444
 8006a30:	58025458 	.word	0x58025458
 8006a34:	5802546c 	.word	0x5802546c
 8006a38:	58025480 	.word	0x58025480
 8006a3c:	58025494 	.word	0x58025494

08006a40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a42      	ldr	r2, [pc, #264]	; (8006b58 <DMA_CalcBaseAndBitshift+0x118>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d04a      	beq.n	8006ae8 <DMA_CalcBaseAndBitshift+0xa8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a41      	ldr	r2, [pc, #260]	; (8006b5c <DMA_CalcBaseAndBitshift+0x11c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d045      	beq.n	8006ae8 <DMA_CalcBaseAndBitshift+0xa8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a3f      	ldr	r2, [pc, #252]	; (8006b60 <DMA_CalcBaseAndBitshift+0x120>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d040      	beq.n	8006ae8 <DMA_CalcBaseAndBitshift+0xa8>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a3e      	ldr	r2, [pc, #248]	; (8006b64 <DMA_CalcBaseAndBitshift+0x124>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d03b      	beq.n	8006ae8 <DMA_CalcBaseAndBitshift+0xa8>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a3c      	ldr	r2, [pc, #240]	; (8006b68 <DMA_CalcBaseAndBitshift+0x128>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d036      	beq.n	8006ae8 <DMA_CalcBaseAndBitshift+0xa8>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a3b      	ldr	r2, [pc, #236]	; (8006b6c <DMA_CalcBaseAndBitshift+0x12c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d031      	beq.n	8006ae8 <DMA_CalcBaseAndBitshift+0xa8>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a39      	ldr	r2, [pc, #228]	; (8006b70 <DMA_CalcBaseAndBitshift+0x130>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d02c      	beq.n	8006ae8 <DMA_CalcBaseAndBitshift+0xa8>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a38      	ldr	r2, [pc, #224]	; (8006b74 <DMA_CalcBaseAndBitshift+0x134>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d027      	beq.n	8006ae8 <DMA_CalcBaseAndBitshift+0xa8>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a36      	ldr	r2, [pc, #216]	; (8006b78 <DMA_CalcBaseAndBitshift+0x138>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d022      	beq.n	8006ae8 <DMA_CalcBaseAndBitshift+0xa8>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a35      	ldr	r2, [pc, #212]	; (8006b7c <DMA_CalcBaseAndBitshift+0x13c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d01d      	beq.n	8006ae8 <DMA_CalcBaseAndBitshift+0xa8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a33      	ldr	r2, [pc, #204]	; (8006b80 <DMA_CalcBaseAndBitshift+0x140>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d018      	beq.n	8006ae8 <DMA_CalcBaseAndBitshift+0xa8>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a32      	ldr	r2, [pc, #200]	; (8006b84 <DMA_CalcBaseAndBitshift+0x144>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d013      	beq.n	8006ae8 <DMA_CalcBaseAndBitshift+0xa8>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a30      	ldr	r2, [pc, #192]	; (8006b88 <DMA_CalcBaseAndBitshift+0x148>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d00e      	beq.n	8006ae8 <DMA_CalcBaseAndBitshift+0xa8>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a2f      	ldr	r2, [pc, #188]	; (8006b8c <DMA_CalcBaseAndBitshift+0x14c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d009      	beq.n	8006ae8 <DMA_CalcBaseAndBitshift+0xa8>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a2d      	ldr	r2, [pc, #180]	; (8006b90 <DMA_CalcBaseAndBitshift+0x150>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d004      	beq.n	8006ae8 <DMA_CalcBaseAndBitshift+0xa8>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a2c      	ldr	r2, [pc, #176]	; (8006b94 <DMA_CalcBaseAndBitshift+0x154>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d101      	bne.n	8006aec <DMA_CalcBaseAndBitshift+0xac>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <DMA_CalcBaseAndBitshift+0xae>
 8006aec:	2300      	movs	r3, #0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d024      	beq.n	8006b3c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	3b10      	subs	r3, #16
 8006afa:	4a27      	ldr	r2, [pc, #156]	; (8006b98 <DMA_CalcBaseAndBitshift+0x158>)
 8006afc:	fba2 2303 	umull	r2, r3, r2, r3
 8006b00:	091b      	lsrs	r3, r3, #4
 8006b02:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f003 0307 	and.w	r3, r3, #7
 8006b0a:	4a24      	ldr	r2, [pc, #144]	; (8006b9c <DMA_CalcBaseAndBitshift+0x15c>)
 8006b0c:	5cd3      	ldrb	r3, [r2, r3]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d908      	bls.n	8006b2c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	4b1f      	ldr	r3, [pc, #124]	; (8006ba0 <DMA_CalcBaseAndBitshift+0x160>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	1d1a      	adds	r2, r3, #4
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	659a      	str	r2, [r3, #88]	; 0x58
 8006b2a:	e00d      	b.n	8006b48 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	4b1b      	ldr	r3, [pc, #108]	; (8006ba0 <DMA_CalcBaseAndBitshift+0x160>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6593      	str	r3, [r2, #88]	; 0x58
 8006b3a:	e005      	b.n	8006b48 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	40020010 	.word	0x40020010
 8006b5c:	40020028 	.word	0x40020028
 8006b60:	40020040 	.word	0x40020040
 8006b64:	40020058 	.word	0x40020058
 8006b68:	40020070 	.word	0x40020070
 8006b6c:	40020088 	.word	0x40020088
 8006b70:	400200a0 	.word	0x400200a0
 8006b74:	400200b8 	.word	0x400200b8
 8006b78:	40020410 	.word	0x40020410
 8006b7c:	40020428 	.word	0x40020428
 8006b80:	40020440 	.word	0x40020440
 8006b84:	40020458 	.word	0x40020458
 8006b88:	40020470 	.word	0x40020470
 8006b8c:	40020488 	.word	0x40020488
 8006b90:	400204a0 	.word	0x400204a0
 8006b94:	400204b8 	.word	0x400204b8
 8006b98:	aaaaaaab 	.word	0xaaaaaaab
 8006b9c:	0800d1e0 	.word	0x0800d1e0
 8006ba0:	fffffc00 	.word	0xfffffc00

08006ba4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d120      	bne.n	8006bfa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d858      	bhi.n	8006c72 <DMA_CheckFifoParam+0xce>
 8006bc0:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <DMA_CheckFifoParam+0x24>)
 8006bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc6:	bf00      	nop
 8006bc8:	08006bd9 	.word	0x08006bd9
 8006bcc:	08006beb 	.word	0x08006beb
 8006bd0:	08006bd9 	.word	0x08006bd9
 8006bd4:	08006c73 	.word	0x08006c73
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d048      	beq.n	8006c76 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006be8:	e045      	b.n	8006c76 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006bf2:	d142      	bne.n	8006c7a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006bf8:	e03f      	b.n	8006c7a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c02:	d123      	bne.n	8006c4c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d838      	bhi.n	8006c7e <DMA_CheckFifoParam+0xda>
 8006c0c:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <DMA_CheckFifoParam+0x70>)
 8006c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c12:	bf00      	nop
 8006c14:	08006c25 	.word	0x08006c25
 8006c18:	08006c2b 	.word	0x08006c2b
 8006c1c:	08006c25 	.word	0x08006c25
 8006c20:	08006c3d 	.word	0x08006c3d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
        break;
 8006c28:	e030      	b.n	8006c8c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d025      	beq.n	8006c82 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c3a:	e022      	b.n	8006c82 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c44:	d11f      	bne.n	8006c86 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c4a:	e01c      	b.n	8006c86 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d902      	bls.n	8006c5a <DMA_CheckFifoParam+0xb6>
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d003      	beq.n	8006c60 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006c58:	e018      	b.n	8006c8c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	73fb      	strb	r3, [r7, #15]
        break;
 8006c5e:	e015      	b.n	8006c8c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00e      	beq.n	8006c8a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8006c70:	e00b      	b.n	8006c8a <DMA_CheckFifoParam+0xe6>
        break;
 8006c72:	bf00      	nop
 8006c74:	e00a      	b.n	8006c8c <DMA_CheckFifoParam+0xe8>
        break;
 8006c76:	bf00      	nop
 8006c78:	e008      	b.n	8006c8c <DMA_CheckFifoParam+0xe8>
        break;
 8006c7a:	bf00      	nop
 8006c7c:	e006      	b.n	8006c8c <DMA_CheckFifoParam+0xe8>
        break;
 8006c7e:	bf00      	nop
 8006c80:	e004      	b.n	8006c8c <DMA_CheckFifoParam+0xe8>
        break;
 8006c82:	bf00      	nop
 8006c84:	e002      	b.n	8006c8c <DMA_CheckFifoParam+0xe8>
        break;
 8006c86:	bf00      	nop
 8006c88:	e000      	b.n	8006c8c <DMA_CheckFifoParam+0xe8>
    break;
 8006c8a:	bf00      	nop
    }
  }

  return status;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop

08006c9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a38      	ldr	r2, [pc, #224]	; (8006d90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d022      	beq.n	8006cfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a36      	ldr	r2, [pc, #216]	; (8006d94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d01d      	beq.n	8006cfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a35      	ldr	r2, [pc, #212]	; (8006d98 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d018      	beq.n	8006cfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a33      	ldr	r2, [pc, #204]	; (8006d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d013      	beq.n	8006cfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a32      	ldr	r2, [pc, #200]	; (8006da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d00e      	beq.n	8006cfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a30      	ldr	r2, [pc, #192]	; (8006da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d009      	beq.n	8006cfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a2f      	ldr	r2, [pc, #188]	; (8006da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d004      	beq.n	8006cfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a2d      	ldr	r2, [pc, #180]	; (8006dac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d101      	bne.n	8006cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e000      	b.n	8006d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d01a      	beq.n	8006d3a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	3b08      	subs	r3, #8
 8006d0c:	4a28      	ldr	r2, [pc, #160]	; (8006db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d12:	091b      	lsrs	r3, r3, #4
 8006d14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4b26      	ldr	r3, [pc, #152]	; (8006db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	461a      	mov	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a24      	ldr	r2, [pc, #144]	; (8006db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006d28:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f003 031f 	and.w	r3, r3, #31
 8006d30:	2201      	movs	r2, #1
 8006d32:	409a      	lsls	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006d38:	e024      	b.n	8006d84 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	3b10      	subs	r3, #16
 8006d42:	4a1e      	ldr	r2, [pc, #120]	; (8006dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006d44:	fba2 2303 	umull	r2, r3, r2, r3
 8006d48:	091b      	lsrs	r3, r3, #4
 8006d4a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	4a1c      	ldr	r2, [pc, #112]	; (8006dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d806      	bhi.n	8006d62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4a1b      	ldr	r2, [pc, #108]	; (8006dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d902      	bls.n	8006d62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	4b18      	ldr	r3, [pc, #96]	; (8006dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006d66:	4413      	add	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a16      	ldr	r2, [pc, #88]	; (8006dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006d74:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	409a      	lsls	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006d84:	bf00      	nop
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	58025408 	.word	0x58025408
 8006d94:	5802541c 	.word	0x5802541c
 8006d98:	58025430 	.word	0x58025430
 8006d9c:	58025444 	.word	0x58025444
 8006da0:	58025458 	.word	0x58025458
 8006da4:	5802546c 	.word	0x5802546c
 8006da8:	58025480 	.word	0x58025480
 8006dac:	58025494 	.word	0x58025494
 8006db0:	cccccccd 	.word	0xcccccccd
 8006db4:	16009600 	.word	0x16009600
 8006db8:	58025880 	.word	0x58025880
 8006dbc:	aaaaaaab 	.word	0xaaaaaaab
 8006dc0:	400204b8 	.word	0x400204b8
 8006dc4:	4002040f 	.word	0x4002040f
 8006dc8:	10008200 	.word	0x10008200
 8006dcc:	40020880 	.word	0x40020880

08006dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d04a      	beq.n	8006e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d847      	bhi.n	8006e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a25      	ldr	r2, [pc, #148]	; (8006e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d022      	beq.n	8006e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a24      	ldr	r2, [pc, #144]	; (8006e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d01d      	beq.n	8006e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a22      	ldr	r2, [pc, #136]	; (8006e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d018      	beq.n	8006e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a21      	ldr	r2, [pc, #132]	; (8006e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d013      	beq.n	8006e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a1f      	ldr	r2, [pc, #124]	; (8006e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d00e      	beq.n	8006e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a1e      	ldr	r2, [pc, #120]	; (8006e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d009      	beq.n	8006e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d004      	beq.n	8006e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a1b      	ldr	r2, [pc, #108]	; (8006ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d101      	bne.n	8006e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e000      	b.n	8006e42 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006e40:	2300      	movs	r3, #0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	4b17      	ldr	r3, [pc, #92]	; (8006ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006e4a:	4413      	add	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	461a      	mov	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a15      	ldr	r2, [pc, #84]	; (8006eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006e58:	671a      	str	r2, [r3, #112]	; 0x70
 8006e5a:	e009      	b.n	8006e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	4b14      	ldr	r3, [pc, #80]	; (8006eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006e60:	4413      	add	r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	461a      	mov	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a11      	ldr	r2, [pc, #68]	; (8006eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006e6e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	2201      	movs	r2, #1
 8006e76:	409a      	lsls	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006e7c:	bf00      	nop
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	58025408 	.word	0x58025408
 8006e8c:	5802541c 	.word	0x5802541c
 8006e90:	58025430 	.word	0x58025430
 8006e94:	58025444 	.word	0x58025444
 8006e98:	58025458 	.word	0x58025458
 8006e9c:	5802546c 	.word	0x5802546c
 8006ea0:	58025480 	.word	0x58025480
 8006ea4:	58025494 	.word	0x58025494
 8006ea8:	1600963f 	.word	0x1600963f
 8006eac:	58025940 	.word	0x58025940
 8006eb0:	1000823f 	.word	0x1000823f
 8006eb4:	40020940 	.word	0x40020940

08006eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b089      	sub	sp, #36	; 0x24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006ec6:	4b89      	ldr	r3, [pc, #548]	; (80070ec <HAL_GPIO_Init+0x234>)
 8006ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006eca:	e194      	b.n	80071f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed8:	4013      	ands	r3, r2
 8006eda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f000 8186 	beq.w	80071f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f003 0303 	and.w	r3, r3, #3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d005      	beq.n	8006efc <HAL_GPIO_Init+0x44>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f003 0303 	and.w	r3, r3, #3
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d130      	bne.n	8006f5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	2203      	movs	r2, #3
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	4013      	ands	r3, r2
 8006f12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f32:	2201      	movs	r2, #1
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3a:	43db      	mvns	r3, r3
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	091b      	lsrs	r3, r3, #4
 8006f48:	f003 0201 	and.w	r2, r3, #1
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d017      	beq.n	8006f9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	2203      	movs	r2, #3
 8006f76:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7a:	43db      	mvns	r3, r3
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	69ba      	ldr	r2, [r7, #24]
 8006f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d123      	bne.n	8006fee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	08da      	lsrs	r2, r3, #3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3208      	adds	r2, #8
 8006fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	f003 0307 	and.w	r3, r3, #7
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	220f      	movs	r2, #15
 8006fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc2:	43db      	mvns	r3, r3
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	691a      	ldr	r2, [r3, #16]
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	f003 0307 	and.w	r3, r3, #7
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	08da      	lsrs	r2, r3, #3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	3208      	adds	r2, #8
 8006fe8:	69b9      	ldr	r1, [r7, #24]
 8006fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	2203      	movs	r2, #3
 8006ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffe:	43db      	mvns	r3, r3
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	4013      	ands	r3, r2
 8007004:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f003 0203 	and.w	r2, r3, #3
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	fa02 f303 	lsl.w	r3, r2, r3
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	4313      	orrs	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 80e0 	beq.w	80071f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007030:	4b2f      	ldr	r3, [pc, #188]	; (80070f0 <HAL_GPIO_Init+0x238>)
 8007032:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007036:	4a2e      	ldr	r2, [pc, #184]	; (80070f0 <HAL_GPIO_Init+0x238>)
 8007038:	f043 0302 	orr.w	r3, r3, #2
 800703c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8007040:	4b2b      	ldr	r3, [pc, #172]	; (80070f0 <HAL_GPIO_Init+0x238>)
 8007042:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800704e:	4a29      	ldr	r2, [pc, #164]	; (80070f4 <HAL_GPIO_Init+0x23c>)
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	089b      	lsrs	r3, r3, #2
 8007054:	3302      	adds	r3, #2
 8007056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800705a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	220f      	movs	r2, #15
 8007066:	fa02 f303 	lsl.w	r3, r2, r3
 800706a:	43db      	mvns	r3, r3
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	4013      	ands	r3, r2
 8007070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a20      	ldr	r2, [pc, #128]	; (80070f8 <HAL_GPIO_Init+0x240>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d052      	beq.n	8007120 <HAL_GPIO_Init+0x268>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a1f      	ldr	r2, [pc, #124]	; (80070fc <HAL_GPIO_Init+0x244>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d031      	beq.n	80070e6 <HAL_GPIO_Init+0x22e>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a1e      	ldr	r2, [pc, #120]	; (8007100 <HAL_GPIO_Init+0x248>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d02b      	beq.n	80070e2 <HAL_GPIO_Init+0x22a>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <HAL_GPIO_Init+0x24c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d025      	beq.n	80070de <HAL_GPIO_Init+0x226>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a1c      	ldr	r2, [pc, #112]	; (8007108 <HAL_GPIO_Init+0x250>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d01f      	beq.n	80070da <HAL_GPIO_Init+0x222>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a1b      	ldr	r2, [pc, #108]	; (800710c <HAL_GPIO_Init+0x254>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d019      	beq.n	80070d6 <HAL_GPIO_Init+0x21e>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a1a      	ldr	r2, [pc, #104]	; (8007110 <HAL_GPIO_Init+0x258>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d013      	beq.n	80070d2 <HAL_GPIO_Init+0x21a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a19      	ldr	r2, [pc, #100]	; (8007114 <HAL_GPIO_Init+0x25c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00d      	beq.n	80070ce <HAL_GPIO_Init+0x216>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a18      	ldr	r2, [pc, #96]	; (8007118 <HAL_GPIO_Init+0x260>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d007      	beq.n	80070ca <HAL_GPIO_Init+0x212>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a17      	ldr	r2, [pc, #92]	; (800711c <HAL_GPIO_Init+0x264>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d101      	bne.n	80070c6 <HAL_GPIO_Init+0x20e>
 80070c2:	2309      	movs	r3, #9
 80070c4:	e02d      	b.n	8007122 <HAL_GPIO_Init+0x26a>
 80070c6:	230a      	movs	r3, #10
 80070c8:	e02b      	b.n	8007122 <HAL_GPIO_Init+0x26a>
 80070ca:	2308      	movs	r3, #8
 80070cc:	e029      	b.n	8007122 <HAL_GPIO_Init+0x26a>
 80070ce:	2307      	movs	r3, #7
 80070d0:	e027      	b.n	8007122 <HAL_GPIO_Init+0x26a>
 80070d2:	2306      	movs	r3, #6
 80070d4:	e025      	b.n	8007122 <HAL_GPIO_Init+0x26a>
 80070d6:	2305      	movs	r3, #5
 80070d8:	e023      	b.n	8007122 <HAL_GPIO_Init+0x26a>
 80070da:	2304      	movs	r3, #4
 80070dc:	e021      	b.n	8007122 <HAL_GPIO_Init+0x26a>
 80070de:	2303      	movs	r3, #3
 80070e0:	e01f      	b.n	8007122 <HAL_GPIO_Init+0x26a>
 80070e2:	2302      	movs	r3, #2
 80070e4:	e01d      	b.n	8007122 <HAL_GPIO_Init+0x26a>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e01b      	b.n	8007122 <HAL_GPIO_Init+0x26a>
 80070ea:	bf00      	nop
 80070ec:	58000080 	.word	0x58000080
 80070f0:	58024400 	.word	0x58024400
 80070f4:	58000400 	.word	0x58000400
 80070f8:	58020000 	.word	0x58020000
 80070fc:	58020400 	.word	0x58020400
 8007100:	58020800 	.word	0x58020800
 8007104:	58020c00 	.word	0x58020c00
 8007108:	58021000 	.word	0x58021000
 800710c:	58021400 	.word	0x58021400
 8007110:	58021800 	.word	0x58021800
 8007114:	58021c00 	.word	0x58021c00
 8007118:	58022000 	.word	0x58022000
 800711c:	58022400 	.word	0x58022400
 8007120:	2300      	movs	r3, #0
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	f002 0203 	and.w	r2, r2, #3
 8007128:	0092      	lsls	r2, r2, #2
 800712a:	4093      	lsls	r3, r2
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	4313      	orrs	r3, r2
 8007130:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007132:	4938      	ldr	r1, [pc, #224]	; (8007214 <HAL_GPIO_Init+0x35c>)
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	089b      	lsrs	r3, r3, #2
 8007138:	3302      	adds	r3, #2
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	43db      	mvns	r3, r3
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	4013      	ands	r3, r2
 8007150:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	4313      	orrs	r3, r2
 8007164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800716e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	43db      	mvns	r3, r3
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	4013      	ands	r3, r2
 800717e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007194:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	43db      	mvns	r3, r3
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	4013      	ands	r3, r2
 80071aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	4313      	orrs	r3, r2
 80071be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	43db      	mvns	r3, r3
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	4013      	ands	r3, r2
 80071d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	69ba      	ldr	r2, [r7, #24]
 80071ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	3301      	adds	r3, #1
 80071f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	f47f ae63 	bne.w	8006ecc <HAL_GPIO_Init+0x14>
  }
}
 8007206:	bf00      	nop
 8007208:	bf00      	nop
 800720a:	3724      	adds	r7, #36	; 0x24
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	58000400 	.word	0x58000400

08007218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	807b      	strh	r3, [r7, #2]
 8007224:	4613      	mov	r3, r2
 8007226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007228:	787b      	ldrb	r3, [r7, #1]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800722e:	887a      	ldrh	r2, [r7, #2]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007234:	e003      	b.n	800723e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007236:	887b      	ldrh	r3, [r7, #2]
 8007238:	041a      	lsls	r2, r3, #16
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	619a      	str	r2, [r3, #24]
}
 800723e:	bf00      	nop
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	4603      	mov	r3, r0
 8007252:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007258:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800725c:	88fb      	ldrh	r3, [r7, #6]
 800725e:	4013      	ands	r3, r2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d008      	beq.n	8007276 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007268:	88fb      	ldrh	r3, [r7, #6]
 800726a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800726e:	88fb      	ldrh	r3, [r7, #6]
 8007270:	4618      	mov	r0, r3
 8007272:	f7fb fa49 	bl	8002708 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007276:	bf00      	nop
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
	...

08007280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e07f      	b.n	8007392 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fa fdc6 	bl	8001e38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2224      	movs	r2, #36	; 0x24
 80072b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0201 	bic.w	r2, r2, #1
 80072c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80072d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689a      	ldr	r2, [r3, #8]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d107      	bne.n	80072fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072f6:	609a      	str	r2, [r3, #8]
 80072f8:	e006      	b.n	8007308 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007306:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	2b02      	cmp	r3, #2
 800730e:	d104      	bne.n	800731a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007318:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6859      	ldr	r1, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	4b1d      	ldr	r3, [pc, #116]	; (800739c <HAL_I2C_Init+0x11c>)
 8007326:	430b      	orrs	r3, r1
 8007328:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68da      	ldr	r2, [r3, #12]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007338:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	691a      	ldr	r2, [r3, #16]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	69d9      	ldr	r1, [r3, #28]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1a      	ldr	r2, [r3, #32]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	430a      	orrs	r2, r1
 8007362:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f042 0201 	orr.w	r2, r2, #1
 8007372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2220      	movs	r2, #32
 800737e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	02008000 	.word	0x02008000

080073a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b088      	sub	sp, #32
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	607a      	str	r2, [r7, #4]
 80073aa:	461a      	mov	r2, r3
 80073ac:	460b      	mov	r3, r1
 80073ae:	817b      	strh	r3, [r7, #10]
 80073b0:	4613      	mov	r3, r2
 80073b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b20      	cmp	r3, #32
 80073be:	f040 80da 	bne.w	8007576 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d101      	bne.n	80073d0 <HAL_I2C_Master_Transmit+0x30>
 80073cc:	2302      	movs	r3, #2
 80073ce:	e0d3      	b.n	8007578 <HAL_I2C_Master_Transmit+0x1d8>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80073d8:	f7fb fe68 	bl	80030ac <HAL_GetTick>
 80073dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	2319      	movs	r3, #25
 80073e4:	2201      	movs	r2, #1
 80073e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 f8f0 	bl	80075d0 <I2C_WaitOnFlagUntilTimeout>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e0be      	b.n	8007578 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2221      	movs	r2, #33	; 0x21
 80073fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2210      	movs	r2, #16
 8007406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	893a      	ldrh	r2, [r7, #8]
 800741a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007426:	b29b      	uxth	r3, r3
 8007428:	2bff      	cmp	r3, #255	; 0xff
 800742a:	d90e      	bls.n	800744a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	22ff      	movs	r2, #255	; 0xff
 8007430:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007436:	b2da      	uxtb	r2, r3
 8007438:	8979      	ldrh	r1, [r7, #10]
 800743a:	4b51      	ldr	r3, [pc, #324]	; (8007580 <HAL_I2C_Master_Transmit+0x1e0>)
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f000 fa6c 	bl	8007920 <I2C_TransferConfig>
 8007448:	e06c      	b.n	8007524 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744e:	b29a      	uxth	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007458:	b2da      	uxtb	r2, r3
 800745a:	8979      	ldrh	r1, [r7, #10]
 800745c:	4b48      	ldr	r3, [pc, #288]	; (8007580 <HAL_I2C_Master_Transmit+0x1e0>)
 800745e:	9300      	str	r3, [sp, #0]
 8007460:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 fa5b 	bl	8007920 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800746a:	e05b      	b.n	8007524 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	6a39      	ldr	r1, [r7, #32]
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 f8ed 	bl	8007650 <I2C_WaitOnTXISFlagUntilTimeout>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e07b      	b.n	8007578 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	781a      	ldrb	r2, [r3, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800749a:	b29b      	uxth	r3, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	b29a      	uxth	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a8:	3b01      	subs	r3, #1
 80074aa:	b29a      	uxth	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d034      	beq.n	8007524 <HAL_I2C_Master_Transmit+0x184>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d130      	bne.n	8007524 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	2200      	movs	r2, #0
 80074ca:	2180      	movs	r1, #128	; 0x80
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f87f 	bl	80075d0 <I2C_WaitOnFlagUntilTimeout>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e04d      	b.n	8007578 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2bff      	cmp	r3, #255	; 0xff
 80074e4:	d90e      	bls.n	8007504 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	22ff      	movs	r2, #255	; 0xff
 80074ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	8979      	ldrh	r1, [r7, #10]
 80074f4:	2300      	movs	r3, #0
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 fa0f 	bl	8007920 <I2C_TransferConfig>
 8007502:	e00f      	b.n	8007524 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007512:	b2da      	uxtb	r2, r3
 8007514:	8979      	ldrh	r1, [r7, #10]
 8007516:	2300      	movs	r3, #0
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 f9fe 	bl	8007920 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007528:	b29b      	uxth	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d19e      	bne.n	800746c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	6a39      	ldr	r1, [r7, #32]
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 f8cc 	bl	80076d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e01a      	b.n	8007578 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2220      	movs	r2, #32
 8007548:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6859      	ldr	r1, [r3, #4]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <HAL_I2C_Master_Transmit+0x1e4>)
 8007556:	400b      	ands	r3, r1
 8007558:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2220      	movs	r2, #32
 800755e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	e000      	b.n	8007578 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007576:	2302      	movs	r3, #2
  }
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	80002000 	.word	0x80002000
 8007584:	fe00e800 	.word	0xfe00e800

08007588 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b02      	cmp	r3, #2
 800759c:	d103      	bne.n	80075a6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2200      	movs	r2, #0
 80075a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d007      	beq.n	80075c4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0201 	orr.w	r2, r2, #1
 80075c2:	619a      	str	r2, [r3, #24]
  }
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075e0:	e022      	b.n	8007628 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e8:	d01e      	beq.n	8007628 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ea:	f7fb fd5f 	bl	80030ac <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d302      	bcc.n	8007600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d113      	bne.n	8007628 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007604:	f043 0220 	orr.w	r2, r3, #32
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2220      	movs	r2, #32
 8007610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e00f      	b.n	8007648 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	4013      	ands	r3, r2
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	429a      	cmp	r2, r3
 8007636:	bf0c      	ite	eq
 8007638:	2301      	moveq	r3, #1
 800763a:	2300      	movne	r3, #0
 800763c:	b2db      	uxtb	r3, r3
 800763e:	461a      	mov	r2, r3
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	429a      	cmp	r2, r3
 8007644:	d0cd      	beq.n	80075e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800765c:	e02c      	b.n	80076b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	68b9      	ldr	r1, [r7, #8]
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 f870 	bl	8007748 <I2C_IsErrorOccurred>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e02a      	b.n	80076c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007678:	d01e      	beq.n	80076b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800767a:	f7fb fd17 	bl	80030ac <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	429a      	cmp	r2, r3
 8007688:	d302      	bcc.n	8007690 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d113      	bne.n	80076b8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007694:	f043 0220 	orr.w	r2, r3, #32
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2220      	movs	r2, #32
 80076a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e007      	b.n	80076c8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d1cb      	bne.n	800765e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076dc:	e028      	b.n	8007730 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	68b9      	ldr	r1, [r7, #8]
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 f830 	bl	8007748 <I2C_IsErrorOccurred>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e026      	b.n	8007740 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076f2:	f7fb fcdb 	bl	80030ac <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d302      	bcc.n	8007708 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d113      	bne.n	8007730 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770c:	f043 0220 	orr.w	r2, r3, #32
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2220      	movs	r2, #32
 8007718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e007      	b.n	8007740 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	f003 0320 	and.w	r3, r3, #32
 800773a:	2b20      	cmp	r3, #32
 800773c:	d1cf      	bne.n	80076de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08a      	sub	sp, #40	; 0x28
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	f003 0310 	and.w	r3, r3, #16
 8007770:	2b00      	cmp	r3, #0
 8007772:	d075      	beq.n	8007860 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2210      	movs	r2, #16
 800777a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800777c:	e056      	b.n	800782c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007784:	d052      	beq.n	800782c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007786:	f7fb fc91 	bl	80030ac <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	429a      	cmp	r2, r3
 8007794:	d302      	bcc.n	800779c <I2C_IsErrorOccurred+0x54>
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d147      	bne.n	800782c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077be:	d12e      	bne.n	800781e <I2C_IsErrorOccurred+0xd6>
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077c6:	d02a      	beq.n	800781e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80077c8:	7cfb      	ldrb	r3, [r7, #19]
 80077ca:	2b20      	cmp	r3, #32
 80077cc:	d027      	beq.n	800781e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077dc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80077de:	f7fb fc65 	bl	80030ac <HAL_GetTick>
 80077e2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077e4:	e01b      	b.n	800781e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80077e6:	f7fb fc61 	bl	80030ac <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	2b19      	cmp	r3, #25
 80077f2:	d914      	bls.n	800781e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f8:	f043 0220 	orr.w	r2, r3, #32
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2220      	movs	r2, #32
 8007804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b20      	cmp	r3, #32
 800782a:	d1dc      	bne.n	80077e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	f003 0320 	and.w	r3, r3, #32
 8007836:	2b20      	cmp	r3, #32
 8007838:	d003      	beq.n	8007842 <I2C_IsErrorOccurred+0xfa>
 800783a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800783e:	2b00      	cmp	r3, #0
 8007840:	d09d      	beq.n	800777e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007846:	2b00      	cmp	r3, #0
 8007848:	d103      	bne.n	8007852 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2220      	movs	r2, #32
 8007850:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	f043 0304 	orr.w	r3, r3, #4
 8007858:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786e:	2b00      	cmp	r3, #0
 8007870:	d00b      	beq.n	800788a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	f043 0301 	orr.w	r3, r3, #1
 8007878:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007882:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00b      	beq.n	80078ac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	f043 0308 	orr.w	r3, r3, #8
 800789a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00b      	beq.n	80078ce <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	f043 0302 	orr.w	r3, r3, #2
 80078bc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80078ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d01c      	beq.n	8007910 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f7ff fe56 	bl	8007588 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6859      	ldr	r1, [r3, #4]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	4b0d      	ldr	r3, [pc, #52]	; (800791c <I2C_IsErrorOccurred+0x1d4>)
 80078e8:	400b      	ands	r3, r1
 80078ea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	431a      	orrs	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007914:	4618      	mov	r0, r3
 8007916:	3728      	adds	r7, #40	; 0x28
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	fe00e800 	.word	0xfe00e800

08007920 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	607b      	str	r3, [r7, #4]
 800792a:	460b      	mov	r3, r1
 800792c:	817b      	strh	r3, [r7, #10]
 800792e:	4613      	mov	r3, r2
 8007930:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007932:	897b      	ldrh	r3, [r7, #10]
 8007934:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007938:	7a7b      	ldrb	r3, [r7, #9]
 800793a:	041b      	lsls	r3, r3, #16
 800793c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007940:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	4313      	orrs	r3, r2
 800794a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800794e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	0d5b      	lsrs	r3, r3, #21
 800795a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800795e:	4b08      	ldr	r3, [pc, #32]	; (8007980 <I2C_TransferConfig+0x60>)
 8007960:	430b      	orrs	r3, r1
 8007962:	43db      	mvns	r3, r3
 8007964:	ea02 0103 	and.w	r1, r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	430a      	orrs	r2, r1
 8007970:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007972:	bf00      	nop
 8007974:	371c      	adds	r7, #28
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	03ff63ff 	.word	0x03ff63ff

08007984 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b20      	cmp	r3, #32
 8007998:	d138      	bne.n	8007a0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d101      	bne.n	80079a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80079a4:	2302      	movs	r3, #2
 80079a6:	e032      	b.n	8007a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2224      	movs	r2, #36	; 0x24
 80079b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 0201 	bic.w	r2, r2, #1
 80079c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6819      	ldr	r1, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f042 0201 	orr.w	r2, r2, #1
 80079f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2220      	movs	r2, #32
 80079fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	e000      	b.n	8007a0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a0c:	2302      	movs	r3, #2
  }
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr

08007a1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b085      	sub	sp, #20
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b20      	cmp	r3, #32
 8007a2e:	d139      	bne.n	8007aa4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d101      	bne.n	8007a3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	e033      	b.n	8007aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2224      	movs	r2, #36	; 0x24
 8007a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0201 	bic.w	r2, r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007a6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	021b      	lsls	r3, r3, #8
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f042 0201 	orr.w	r2, r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	e000      	b.n	8007aa6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007aa4:	2302      	movs	r3, #2
  }
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
	...

08007ab4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007abc:	4b29      	ldr	r3, [pc, #164]	; (8007b64 <HAL_PWREx_ConfigSupply+0xb0>)
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f003 0307 	and.w	r3, r3, #7
 8007ac4:	2b06      	cmp	r3, #6
 8007ac6:	d00a      	beq.n	8007ade <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007ac8:	4b26      	ldr	r3, [pc, #152]	; (8007b64 <HAL_PWREx_ConfigSupply+0xb0>)
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d001      	beq.n	8007ada <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e040      	b.n	8007b5c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	e03e      	b.n	8007b5c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007ade:	4b21      	ldr	r3, [pc, #132]	; (8007b64 <HAL_PWREx_ConfigSupply+0xb0>)
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007ae6:	491f      	ldr	r1, [pc, #124]	; (8007b64 <HAL_PWREx_ConfigSupply+0xb0>)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007aee:	f7fb fadd 	bl	80030ac <HAL_GetTick>
 8007af2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007af4:	e009      	b.n	8007b0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007af6:	f7fb fad9 	bl	80030ac <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b04:	d901      	bls.n	8007b0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e028      	b.n	8007b5c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007b0a:	4b16      	ldr	r3, [pc, #88]	; (8007b64 <HAL_PWREx_ConfigSupply+0xb0>)
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b16:	d1ee      	bne.n	8007af6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b1e      	cmp	r3, #30
 8007b1c:	d008      	beq.n	8007b30 <HAL_PWREx_ConfigSupply+0x7c>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b2e      	cmp	r3, #46	; 0x2e
 8007b22:	d005      	beq.n	8007b30 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b1d      	cmp	r3, #29
 8007b28:	d002      	beq.n	8007b30 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b2d      	cmp	r3, #45	; 0x2d
 8007b2e:	d114      	bne.n	8007b5a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007b30:	f7fb fabc 	bl	80030ac <HAL_GetTick>
 8007b34:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007b36:	e009      	b.n	8007b4c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007b38:	f7fb fab8 	bl	80030ac <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b46:	d901      	bls.n	8007b4c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e007      	b.n	8007b5c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007b4c:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <HAL_PWREx_ConfigSupply+0xb0>)
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b58:	d1ee      	bne.n	8007b38 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	58024800 	.word	0x58024800

08007b68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08c      	sub	sp, #48	; 0x30
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e3f4      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 80b3 	beq.w	8007cee <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b88:	4b95      	ldr	r3, [pc, #596]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b92:	4b93      	ldr	r3, [pc, #588]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b96:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	2b10      	cmp	r3, #16
 8007b9c:	d007      	beq.n	8007bae <HAL_RCC_OscConfig+0x46>
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	2b18      	cmp	r3, #24
 8007ba2:	d112      	bne.n	8007bca <HAL_RCC_OscConfig+0x62>
 8007ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba6:	f003 0303 	and.w	r3, r3, #3
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d10d      	bne.n	8007bca <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bae:	4b8c      	ldr	r3, [pc, #560]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f000 8098 	beq.w	8007cec <HAL_RCC_OscConfig+0x184>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f040 8093 	bne.w	8007cec <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e3cc      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd2:	d106      	bne.n	8007be2 <HAL_RCC_OscConfig+0x7a>
 8007bd4:	4b82      	ldr	r3, [pc, #520]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a81      	ldr	r2, [pc, #516]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	e058      	b.n	8007c94 <HAL_RCC_OscConfig+0x12c>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d112      	bne.n	8007c10 <HAL_RCC_OscConfig+0xa8>
 8007bea:	4b7d      	ldr	r3, [pc, #500]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a7c      	ldr	r2, [pc, #496]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	4b7a      	ldr	r3, [pc, #488]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a79      	ldr	r2, [pc, #484]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007bfc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	4b77      	ldr	r3, [pc, #476]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a76      	ldr	r2, [pc, #472]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	e041      	b.n	8007c94 <HAL_RCC_OscConfig+0x12c>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c18:	d112      	bne.n	8007c40 <HAL_RCC_OscConfig+0xd8>
 8007c1a:	4b71      	ldr	r3, [pc, #452]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a70      	ldr	r2, [pc, #448]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c24:	6013      	str	r3, [r2, #0]
 8007c26:	4b6e      	ldr	r3, [pc, #440]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a6d      	ldr	r2, [pc, #436]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	4b6b      	ldr	r3, [pc, #428]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a6a      	ldr	r2, [pc, #424]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c3c:	6013      	str	r3, [r2, #0]
 8007c3e:	e029      	b.n	8007c94 <HAL_RCC_OscConfig+0x12c>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8007c48:	d112      	bne.n	8007c70 <HAL_RCC_OscConfig+0x108>
 8007c4a:	4b65      	ldr	r3, [pc, #404]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a64      	ldr	r2, [pc, #400]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c54:	6013      	str	r3, [r2, #0]
 8007c56:	4b62      	ldr	r3, [pc, #392]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a61      	ldr	r2, [pc, #388]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c60:	6013      	str	r3, [r2, #0]
 8007c62:	4b5f      	ldr	r3, [pc, #380]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a5e      	ldr	r2, [pc, #376]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	e011      	b.n	8007c94 <HAL_RCC_OscConfig+0x12c>
 8007c70:	4b5b      	ldr	r3, [pc, #364]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a5a      	ldr	r2, [pc, #360]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c7a:	6013      	str	r3, [r2, #0]
 8007c7c:	4b58      	ldr	r3, [pc, #352]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a57      	ldr	r2, [pc, #348]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c86:	6013      	str	r3, [r2, #0]
 8007c88:	4b55      	ldr	r3, [pc, #340]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a54      	ldr	r2, [pc, #336]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007c8e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d013      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c9c:	f7fb fa06 	bl	80030ac <HAL_GetTick>
 8007ca0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ca2:	e008      	b.n	8007cb6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ca4:	f7fb fa02 	bl	80030ac <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	2b64      	cmp	r3, #100	; 0x64
 8007cb0:	d901      	bls.n	8007cb6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	e356      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007cb6:	4b4a      	ldr	r3, [pc, #296]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0f0      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x13c>
 8007cc2:	e014      	b.n	8007cee <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc4:	f7fb f9f2 	bl	80030ac <HAL_GetTick>
 8007cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007cca:	e008      	b.n	8007cde <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ccc:	f7fb f9ee 	bl	80030ac <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	2b64      	cmp	r3, #100	; 0x64
 8007cd8:	d901      	bls.n	8007cde <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e342      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007cde:	4b40      	ldr	r3, [pc, #256]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1f0      	bne.n	8007ccc <HAL_RCC_OscConfig+0x164>
 8007cea:	e000      	b.n	8007cee <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0302 	and.w	r3, r3, #2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 808d 	beq.w	8007e16 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cfc:	4b38      	ldr	r3, [pc, #224]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d06:	4b36      	ldr	r3, [pc, #216]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d007      	beq.n	8007d22 <HAL_RCC_OscConfig+0x1ba>
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	2b18      	cmp	r3, #24
 8007d16:	d137      	bne.n	8007d88 <HAL_RCC_OscConfig+0x220>
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	f003 0303 	and.w	r3, r3, #3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d132      	bne.n	8007d88 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d22:	4b2f      	ldr	r3, [pc, #188]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0304 	and.w	r3, r3, #4
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d005      	beq.n	8007d3a <HAL_RCC_OscConfig+0x1d2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e314      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d3a:	4b29      	ldr	r3, [pc, #164]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f023 0219 	bic.w	r2, r3, #25
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	4926      	ldr	r1, [pc, #152]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007d4c:	f7fb f9ae 	bl	80030ac <HAL_GetTick>
 8007d50:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d52:	e008      	b.n	8007d66 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d54:	f7fb f9aa 	bl	80030ac <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e2fe      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d66:	4b1e      	ldr	r3, [pc, #120]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0304 	and.w	r3, r3, #4
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0f0      	beq.n	8007d54 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d72:	4b1b      	ldr	r3, [pc, #108]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	061b      	lsls	r3, r3, #24
 8007d80:	4917      	ldr	r1, [pc, #92]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d86:	e046      	b.n	8007e16 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68db      	ldr	r3, [r3, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d029      	beq.n	8007de4 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d90:	4b13      	ldr	r3, [pc, #76]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f023 0219 	bic.w	r2, r3, #25
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	4910      	ldr	r1, [pc, #64]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da2:	f7fb f983 	bl	80030ac <HAL_GetTick>
 8007da6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007da8:	e008      	b.n	8007dbc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007daa:	f7fb f97f 	bl	80030ac <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d901      	bls.n	8007dbc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e2d3      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dbc:	4b08      	ldr	r3, [pc, #32]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0f0      	beq.n	8007daa <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dc8:	4b05      	ldr	r3, [pc, #20]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	061b      	lsls	r3, r3, #24
 8007dd6:	4902      	ldr	r1, [pc, #8]	; (8007de0 <HAL_RCC_OscConfig+0x278>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	604b      	str	r3, [r1, #4]
 8007ddc:	e01b      	b.n	8007e16 <HAL_RCC_OscConfig+0x2ae>
 8007dde:	bf00      	nop
 8007de0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007de4:	4b97      	ldr	r3, [pc, #604]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a96      	ldr	r2, [pc, #600]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007dea:	f023 0301 	bic.w	r3, r3, #1
 8007dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df0:	f7fb f95c 	bl	80030ac <HAL_GetTick>
 8007df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007df6:	e008      	b.n	8007e0a <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007df8:	f7fb f958 	bl	80030ac <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d901      	bls.n	8007e0a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e2ac      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e0a:	4b8e      	ldr	r3, [pc, #568]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0304 	and.w	r3, r3, #4
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1f0      	bne.n	8007df8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0310 	and.w	r3, r3, #16
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d06a      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e22:	4b88      	ldr	r3, [pc, #544]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e2a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e2c:	4b85      	ldr	r3, [pc, #532]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e30:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	2b08      	cmp	r3, #8
 8007e36:	d007      	beq.n	8007e48 <HAL_RCC_OscConfig+0x2e0>
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	2b18      	cmp	r3, #24
 8007e3c:	d11b      	bne.n	8007e76 <HAL_RCC_OscConfig+0x30e>
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f003 0303 	and.w	r3, r3, #3
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d116      	bne.n	8007e76 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e48:	4b7e      	ldr	r3, [pc, #504]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d005      	beq.n	8007e60 <HAL_RCC_OscConfig+0x2f8>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	2b80      	cmp	r3, #128	; 0x80
 8007e5a:	d001      	beq.n	8007e60 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e281      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e60:	4b78      	ldr	r3, [pc, #480]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	061b      	lsls	r3, r3, #24
 8007e6e:	4975      	ldr	r1, [pc, #468]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e74:	e040      	b.n	8007ef8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d023      	beq.n	8007ec6 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007e7e:	4b71      	ldr	r3, [pc, #452]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a70      	ldr	r2, [pc, #448]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e8a:	f7fb f90f 	bl	80030ac <HAL_GetTick>
 8007e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e90:	e008      	b.n	8007ea4 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007e92:	f7fb f90b 	bl	80030ac <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d901      	bls.n	8007ea4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e25f      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ea4:	4b67      	ldr	r3, [pc, #412]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0f0      	beq.n	8007e92 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007eb0:	4b64      	ldr	r3, [pc, #400]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	061b      	lsls	r3, r3, #24
 8007ebe:	4961      	ldr	r1, [pc, #388]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	60cb      	str	r3, [r1, #12]
 8007ec4:	e018      	b.n	8007ef8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ec6:	4b5f      	ldr	r3, [pc, #380]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a5e      	ldr	r2, [pc, #376]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed2:	f7fb f8eb 	bl	80030ac <HAL_GetTick>
 8007ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ed8:	e008      	b.n	8007eec <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007eda:	f7fb f8e7 	bl	80030ac <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d901      	bls.n	8007eec <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e23b      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007eec:	4b55      	ldr	r3, [pc, #340]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1f0      	bne.n	8007eda <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d036      	beq.n	8007f72 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d019      	beq.n	8007f40 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f0c:	4b4d      	ldr	r3, [pc, #308]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f10:	4a4c      	ldr	r2, [pc, #304]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007f12:	f043 0301 	orr.w	r3, r3, #1
 8007f16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f18:	f7fb f8c8 	bl	80030ac <HAL_GetTick>
 8007f1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f1e:	e008      	b.n	8007f32 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f20:	f7fb f8c4 	bl	80030ac <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d901      	bls.n	8007f32 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e218      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f32:	4b44      	ldr	r3, [pc, #272]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f36:	f003 0302 	and.w	r3, r3, #2
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d0f0      	beq.n	8007f20 <HAL_RCC_OscConfig+0x3b8>
 8007f3e:	e018      	b.n	8007f72 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f40:	4b40      	ldr	r3, [pc, #256]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f44:	4a3f      	ldr	r2, [pc, #252]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007f46:	f023 0301 	bic.w	r3, r3, #1
 8007f4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f4c:	f7fb f8ae 	bl	80030ac <HAL_GetTick>
 8007f50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f52:	e008      	b.n	8007f66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f54:	f7fb f8aa 	bl	80030ac <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d901      	bls.n	8007f66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e1fe      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f66:	4b37      	ldr	r3, [pc, #220]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1f0      	bne.n	8007f54 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0320 	and.w	r3, r3, #32
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d036      	beq.n	8007fec <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d019      	beq.n	8007fba <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f86:	4b2f      	ldr	r3, [pc, #188]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a2e      	ldr	r2, [pc, #184]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007f8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f92:	f7fb f88b 	bl	80030ac <HAL_GetTick>
 8007f96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f98:	e008      	b.n	8007fac <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007f9a:	f7fb f887 	bl	80030ac <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d901      	bls.n	8007fac <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e1db      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fac:	4b25      	ldr	r3, [pc, #148]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d0f0      	beq.n	8007f9a <HAL_RCC_OscConfig+0x432>
 8007fb8:	e018      	b.n	8007fec <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007fba:	4b22      	ldr	r3, [pc, #136]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a21      	ldr	r2, [pc, #132]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007fc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fc4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007fc6:	f7fb f871 	bl	80030ac <HAL_GetTick>
 8007fca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fcc:	e008      	b.n	8007fe0 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007fce:	f7fb f86d 	bl	80030ac <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d901      	bls.n	8007fe0 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e1c1      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fe0:	4b18      	ldr	r3, [pc, #96]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1f0      	bne.n	8007fce <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 80af 	beq.w	8008158 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ffa:	4b13      	ldr	r3, [pc, #76]	; (8008048 <HAL_RCC_OscConfig+0x4e0>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a12      	ldr	r2, [pc, #72]	; (8008048 <HAL_RCC_OscConfig+0x4e0>)
 8008000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008004:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008006:	f7fb f851 	bl	80030ac <HAL_GetTick>
 800800a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800800c:	e008      	b.n	8008020 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800800e:	f7fb f84d 	bl	80030ac <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	2b64      	cmp	r3, #100	; 0x64
 800801a:	d901      	bls.n	8008020 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800801c:	2303      	movs	r3, #3
 800801e:	e1a1      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008020:	4b09      	ldr	r3, [pc, #36]	; (8008048 <HAL_RCC_OscConfig+0x4e0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008028:	2b00      	cmp	r3, #0
 800802a:	d0f0      	beq.n	800800e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d10b      	bne.n	800804c <HAL_RCC_OscConfig+0x4e4>
 8008034:	4b03      	ldr	r3, [pc, #12]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 8008036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008038:	4a02      	ldr	r2, [pc, #8]	; (8008044 <HAL_RCC_OscConfig+0x4dc>)
 800803a:	f043 0301 	orr.w	r3, r3, #1
 800803e:	6713      	str	r3, [r2, #112]	; 0x70
 8008040:	e05b      	b.n	80080fa <HAL_RCC_OscConfig+0x592>
 8008042:	bf00      	nop
 8008044:	58024400 	.word	0x58024400
 8008048:	58024800 	.word	0x58024800
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d112      	bne.n	800807a <HAL_RCC_OscConfig+0x512>
 8008054:	4b9d      	ldr	r3, [pc, #628]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008058:	4a9c      	ldr	r2, [pc, #624]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 800805a:	f023 0301 	bic.w	r3, r3, #1
 800805e:	6713      	str	r3, [r2, #112]	; 0x70
 8008060:	4b9a      	ldr	r3, [pc, #616]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008064:	4a99      	ldr	r2, [pc, #612]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800806a:	6713      	str	r3, [r2, #112]	; 0x70
 800806c:	4b97      	ldr	r3, [pc, #604]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 800806e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008070:	4a96      	ldr	r2, [pc, #600]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008072:	f023 0304 	bic.w	r3, r3, #4
 8008076:	6713      	str	r3, [r2, #112]	; 0x70
 8008078:	e03f      	b.n	80080fa <HAL_RCC_OscConfig+0x592>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	2b05      	cmp	r3, #5
 8008080:	d112      	bne.n	80080a8 <HAL_RCC_OscConfig+0x540>
 8008082:	4b92      	ldr	r3, [pc, #584]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008086:	4a91      	ldr	r2, [pc, #580]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008088:	f043 0304 	orr.w	r3, r3, #4
 800808c:	6713      	str	r3, [r2, #112]	; 0x70
 800808e:	4b8f      	ldr	r3, [pc, #572]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008092:	4a8e      	ldr	r2, [pc, #568]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008098:	6713      	str	r3, [r2, #112]	; 0x70
 800809a:	4b8c      	ldr	r3, [pc, #560]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 800809c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809e:	4a8b      	ldr	r2, [pc, #556]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80080a0:	f043 0301 	orr.w	r3, r3, #1
 80080a4:	6713      	str	r3, [r2, #112]	; 0x70
 80080a6:	e028      	b.n	80080fa <HAL_RCC_OscConfig+0x592>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	2b85      	cmp	r3, #133	; 0x85
 80080ae:	d112      	bne.n	80080d6 <HAL_RCC_OscConfig+0x56e>
 80080b0:	4b86      	ldr	r3, [pc, #536]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80080b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b4:	4a85      	ldr	r2, [pc, #532]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80080b6:	f043 0304 	orr.w	r3, r3, #4
 80080ba:	6713      	str	r3, [r2, #112]	; 0x70
 80080bc:	4b83      	ldr	r3, [pc, #524]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80080be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c0:	4a82      	ldr	r2, [pc, #520]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80080c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080c6:	6713      	str	r3, [r2, #112]	; 0x70
 80080c8:	4b80      	ldr	r3, [pc, #512]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80080ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080cc:	4a7f      	ldr	r2, [pc, #508]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80080ce:	f043 0301 	orr.w	r3, r3, #1
 80080d2:	6713      	str	r3, [r2, #112]	; 0x70
 80080d4:	e011      	b.n	80080fa <HAL_RCC_OscConfig+0x592>
 80080d6:	4b7d      	ldr	r3, [pc, #500]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80080d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080da:	4a7c      	ldr	r2, [pc, #496]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80080dc:	f023 0301 	bic.w	r3, r3, #1
 80080e0:	6713      	str	r3, [r2, #112]	; 0x70
 80080e2:	4b7a      	ldr	r3, [pc, #488]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80080e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e6:	4a79      	ldr	r2, [pc, #484]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80080e8:	f023 0304 	bic.w	r3, r3, #4
 80080ec:	6713      	str	r3, [r2, #112]	; 0x70
 80080ee:	4b77      	ldr	r3, [pc, #476]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80080f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f2:	4a76      	ldr	r2, [pc, #472]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80080f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d015      	beq.n	800812e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008102:	f7fa ffd3 	bl	80030ac <HAL_GetTick>
 8008106:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008108:	e00a      	b.n	8008120 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800810a:	f7fa ffcf 	bl	80030ac <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	f241 3288 	movw	r2, #5000	; 0x1388
 8008118:	4293      	cmp	r3, r2
 800811a:	d901      	bls.n	8008120 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800811c:	2303      	movs	r3, #3
 800811e:	e121      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008120:	4b6a      	ldr	r3, [pc, #424]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0ee      	beq.n	800810a <HAL_RCC_OscConfig+0x5a2>
 800812c:	e014      	b.n	8008158 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800812e:	f7fa ffbd 	bl	80030ac <HAL_GetTick>
 8008132:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008134:	e00a      	b.n	800814c <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008136:	f7fa ffb9 	bl	80030ac <HAL_GetTick>
 800813a:	4602      	mov	r2, r0
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	f241 3288 	movw	r2, #5000	; 0x1388
 8008144:	4293      	cmp	r3, r2
 8008146:	d901      	bls.n	800814c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e10b      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800814c:	4b5f      	ldr	r3, [pc, #380]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 800814e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1ee      	bne.n	8008136 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 8100 	beq.w	8008362 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008162:	4b5a      	ldr	r3, [pc, #360]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800816a:	2b18      	cmp	r3, #24
 800816c:	f000 80bb 	beq.w	80082e6 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	2b02      	cmp	r3, #2
 8008176:	f040 8095 	bne.w	80082a4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800817a:	4b54      	ldr	r3, [pc, #336]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a53      	ldr	r2, [pc, #332]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008180:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008186:	f7fa ff91 	bl	80030ac <HAL_GetTick>
 800818a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800818c:	e008      	b.n	80081a0 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800818e:	f7fa ff8d 	bl	80030ac <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	2b02      	cmp	r3, #2
 800819a:	d901      	bls.n	80081a0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e0e1      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081a0:	4b4a      	ldr	r3, [pc, #296]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1f0      	bne.n	800818e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081ac:	4b47      	ldr	r3, [pc, #284]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80081ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081b0:	4b47      	ldr	r3, [pc, #284]	; (80082d0 <HAL_RCC_OscConfig+0x768>)
 80081b2:	4013      	ands	r3, r2
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80081bc:	0112      	lsls	r2, r2, #4
 80081be:	430a      	orrs	r2, r1
 80081c0:	4942      	ldr	r1, [pc, #264]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	628b      	str	r3, [r1, #40]	; 0x28
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ca:	3b01      	subs	r3, #1
 80081cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d4:	3b01      	subs	r3, #1
 80081d6:	025b      	lsls	r3, r3, #9
 80081d8:	b29b      	uxth	r3, r3
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e0:	3b01      	subs	r3, #1
 80081e2:	041b      	lsls	r3, r3, #16
 80081e4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081e8:	431a      	orrs	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ee:	3b01      	subs	r3, #1
 80081f0:	061b      	lsls	r3, r3, #24
 80081f2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081f6:	4935      	ldr	r1, [pc, #212]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80081fc:	4b33      	ldr	r3, [pc, #204]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	4a32      	ldr	r2, [pc, #200]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008202:	f023 0301 	bic.w	r3, r3, #1
 8008206:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008208:	4b30      	ldr	r3, [pc, #192]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 800820a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800820c:	4b31      	ldr	r3, [pc, #196]	; (80082d4 <HAL_RCC_OscConfig+0x76c>)
 800820e:	4013      	ands	r3, r2
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008214:	00d2      	lsls	r2, r2, #3
 8008216:	492d      	ldr	r1, [pc, #180]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008218:	4313      	orrs	r3, r2
 800821a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800821c:	4b2b      	ldr	r3, [pc, #172]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	f023 020c 	bic.w	r2, r3, #12
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008228:	4928      	ldr	r1, [pc, #160]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 800822a:	4313      	orrs	r3, r2
 800822c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800822e:	4b27      	ldr	r3, [pc, #156]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008232:	f023 0202 	bic.w	r2, r3, #2
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800823a:	4924      	ldr	r1, [pc, #144]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 800823c:	4313      	orrs	r3, r2
 800823e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008240:	4b22      	ldr	r3, [pc, #136]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	4a21      	ldr	r2, [pc, #132]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800824a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800824c:	4b1f      	ldr	r3, [pc, #124]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 800824e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008250:	4a1e      	ldr	r2, [pc, #120]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008256:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008258:	4b1c      	ldr	r3, [pc, #112]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	4a1b      	ldr	r2, [pc, #108]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 800825e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008262:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008264:	4b19      	ldr	r3, [pc, #100]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	4a18      	ldr	r2, [pc, #96]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 800826a:	f043 0301 	orr.w	r3, r3, #1
 800826e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008270:	4b16      	ldr	r3, [pc, #88]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a15      	ldr	r2, [pc, #84]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800827a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800827c:	f7fa ff16 	bl	80030ac <HAL_GetTick>
 8008280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008282:	e008      	b.n	8008296 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008284:	f7fa ff12 	bl	80030ac <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b02      	cmp	r3, #2
 8008290:	d901      	bls.n	8008296 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e066      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008296:	4b0d      	ldr	r3, [pc, #52]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0f0      	beq.n	8008284 <HAL_RCC_OscConfig+0x71c>
 80082a2:	e05e      	b.n	8008362 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082a4:	4b09      	ldr	r3, [pc, #36]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a08      	ldr	r2, [pc, #32]	; (80082cc <HAL_RCC_OscConfig+0x764>)
 80082aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b0:	f7fa fefc 	bl	80030ac <HAL_GetTick>
 80082b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082b6:	e00f      	b.n	80082d8 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082b8:	f7fa fef8 	bl	80030ac <HAL_GetTick>
 80082bc:	4602      	mov	r2, r0
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d908      	bls.n	80082d8 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e04c      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
 80082ca:	bf00      	nop
 80082cc:	58024400 	.word	0x58024400
 80082d0:	fffffc0c 	.word	0xfffffc0c
 80082d4:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082d8:	4b24      	ldr	r3, [pc, #144]	; (800836c <HAL_RCC_OscConfig+0x804>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1e9      	bne.n	80082b8 <HAL_RCC_OscConfig+0x750>
 80082e4:	e03d      	b.n	8008362 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80082e6:	4b21      	ldr	r3, [pc, #132]	; (800836c <HAL_RCC_OscConfig+0x804>)
 80082e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ea:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80082ec:	4b1f      	ldr	r3, [pc, #124]	; (800836c <HAL_RCC_OscConfig+0x804>)
 80082ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d031      	beq.n	800835e <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f003 0203 	and.w	r2, r3, #3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008304:	429a      	cmp	r2, r3
 8008306:	d12a      	bne.n	800835e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	091b      	lsrs	r3, r3, #4
 800830c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008314:	429a      	cmp	r2, r3
 8008316:	d122      	bne.n	800835e <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008322:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008324:	429a      	cmp	r2, r3
 8008326:	d11a      	bne.n	800835e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	0a5b      	lsrs	r3, r3, #9
 800832c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008334:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008336:	429a      	cmp	r2, r3
 8008338:	d111      	bne.n	800835e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	0c1b      	lsrs	r3, r3, #16
 800833e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008346:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008348:	429a      	cmp	r2, r3
 800834a:	d108      	bne.n	800835e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	0e1b      	lsrs	r3, r3, #24
 8008350:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008358:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800835a:	429a      	cmp	r2, r3
 800835c:	d001      	beq.n	8008362 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e000      	b.n	8008364 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3730      	adds	r7, #48	; 0x30
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	58024400 	.word	0x58024400

08008370 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e19c      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008384:	4b8a      	ldr	r3, [pc, #552]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 030f 	and.w	r3, r3, #15
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d910      	bls.n	80083b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008392:	4b87      	ldr	r3, [pc, #540]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f023 020f 	bic.w	r2, r3, #15
 800839a:	4985      	ldr	r1, [pc, #532]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	4313      	orrs	r3, r2
 80083a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083a2:	4b83      	ldr	r3, [pc, #524]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d001      	beq.n	80083b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e184      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d010      	beq.n	80083e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691a      	ldr	r2, [r3, #16]
 80083c4:	4b7b      	ldr	r3, [pc, #492]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d908      	bls.n	80083e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083d0:	4b78      	ldr	r3, [pc, #480]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	4975      	ldr	r1, [pc, #468]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0308 	and.w	r3, r3, #8
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d010      	beq.n	8008410 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	695a      	ldr	r2, [r3, #20]
 80083f2:	4b70      	ldr	r3, [pc, #448]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d908      	bls.n	8008410 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083fe:	4b6d      	ldr	r3, [pc, #436]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	496a      	ldr	r1, [pc, #424]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800840c:	4313      	orrs	r3, r2
 800840e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0310 	and.w	r3, r3, #16
 8008418:	2b00      	cmp	r3, #0
 800841a:	d010      	beq.n	800843e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699a      	ldr	r2, [r3, #24]
 8008420:	4b64      	ldr	r3, [pc, #400]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008422:	69db      	ldr	r3, [r3, #28]
 8008424:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008428:	429a      	cmp	r2, r3
 800842a:	d908      	bls.n	800843e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800842c:	4b61      	ldr	r3, [pc, #388]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	495e      	ldr	r1, [pc, #376]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800843a:	4313      	orrs	r3, r2
 800843c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0320 	and.w	r3, r3, #32
 8008446:	2b00      	cmp	r3, #0
 8008448:	d010      	beq.n	800846c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	69da      	ldr	r2, [r3, #28]
 800844e:	4b59      	ldr	r3, [pc, #356]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008456:	429a      	cmp	r2, r3
 8008458:	d908      	bls.n	800846c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800845a:	4b56      	ldr	r3, [pc, #344]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	4953      	ldr	r1, [pc, #332]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008468:	4313      	orrs	r3, r2
 800846a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0302 	and.w	r3, r3, #2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d010      	beq.n	800849a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68da      	ldr	r2, [r3, #12]
 800847c:	4b4d      	ldr	r3, [pc, #308]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	429a      	cmp	r2, r3
 8008486:	d908      	bls.n	800849a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008488:	4b4a      	ldr	r3, [pc, #296]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	f023 020f 	bic.w	r2, r3, #15
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	4947      	ldr	r1, [pc, #284]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008496:	4313      	orrs	r3, r2
 8008498:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d055      	beq.n	8008552 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80084a6:	4b43      	ldr	r3, [pc, #268]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	4940      	ldr	r1, [pc, #256]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d107      	bne.n	80084d0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084c0:	4b3c      	ldr	r3, [pc, #240]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d121      	bne.n	8008510 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e0f6      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d107      	bne.n	80084e8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084d8:	4b36      	ldr	r3, [pc, #216]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d115      	bne.n	8008510 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e0ea      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d107      	bne.n	8008500 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084f0:	4b30      	ldr	r3, [pc, #192]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d109      	bne.n	8008510 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e0de      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008500:	4b2c      	ldr	r3, [pc, #176]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0304 	and.w	r3, r3, #4
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e0d6      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008510:	4b28      	ldr	r3, [pc, #160]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	f023 0207 	bic.w	r2, r3, #7
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	4925      	ldr	r1, [pc, #148]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800851e:	4313      	orrs	r3, r2
 8008520:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008522:	f7fa fdc3 	bl	80030ac <HAL_GetTick>
 8008526:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008528:	e00a      	b.n	8008540 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800852a:	f7fa fdbf 	bl	80030ac <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	f241 3288 	movw	r2, #5000	; 0x1388
 8008538:	4293      	cmp	r3, r2
 800853a:	d901      	bls.n	8008540 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e0be      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008540:	4b1c      	ldr	r3, [pc, #112]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	00db      	lsls	r3, r3, #3
 800854e:	429a      	cmp	r2, r3
 8008550:	d1eb      	bne.n	800852a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0302 	and.w	r3, r3, #2
 800855a:	2b00      	cmp	r3, #0
 800855c:	d010      	beq.n	8008580 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68da      	ldr	r2, [r3, #12]
 8008562:	4b14      	ldr	r3, [pc, #80]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	f003 030f 	and.w	r3, r3, #15
 800856a:	429a      	cmp	r2, r3
 800856c:	d208      	bcs.n	8008580 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800856e:	4b11      	ldr	r3, [pc, #68]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	f023 020f 	bic.w	r2, r3, #15
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	490e      	ldr	r1, [pc, #56]	; (80085b4 <HAL_RCC_ClockConfig+0x244>)
 800857c:	4313      	orrs	r3, r2
 800857e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008580:	4b0b      	ldr	r3, [pc, #44]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 030f 	and.w	r3, r3, #15
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	429a      	cmp	r2, r3
 800858c:	d214      	bcs.n	80085b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800858e:	4b08      	ldr	r3, [pc, #32]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f023 020f 	bic.w	r2, r3, #15
 8008596:	4906      	ldr	r1, [pc, #24]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	4313      	orrs	r3, r2
 800859c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800859e:	4b04      	ldr	r3, [pc, #16]	; (80085b0 <HAL_RCC_ClockConfig+0x240>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 030f 	and.w	r3, r3, #15
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d005      	beq.n	80085b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e086      	b.n	80086be <HAL_RCC_ClockConfig+0x34e>
 80085b0:	52002000 	.word	0x52002000
 80085b4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d010      	beq.n	80085e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	691a      	ldr	r2, [r3, #16]
 80085c8:	4b3f      	ldr	r3, [pc, #252]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d208      	bcs.n	80085e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085d4:	4b3c      	ldr	r3, [pc, #240]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	4939      	ldr	r1, [pc, #228]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0308 	and.w	r3, r3, #8
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d010      	beq.n	8008614 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	695a      	ldr	r2, [r3, #20]
 80085f6:	4b34      	ldr	r3, [pc, #208]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085fe:	429a      	cmp	r2, r3
 8008600:	d208      	bcs.n	8008614 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008602:	4b31      	ldr	r3, [pc, #196]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	492e      	ldr	r1, [pc, #184]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008610:	4313      	orrs	r3, r2
 8008612:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0310 	and.w	r3, r3, #16
 800861c:	2b00      	cmp	r3, #0
 800861e:	d010      	beq.n	8008642 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	699a      	ldr	r2, [r3, #24]
 8008624:	4b28      	ldr	r3, [pc, #160]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800862c:	429a      	cmp	r2, r3
 800862e:	d208      	bcs.n	8008642 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008630:	4b25      	ldr	r3, [pc, #148]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	4922      	ldr	r1, [pc, #136]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 800863e:	4313      	orrs	r3, r2
 8008640:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0320 	and.w	r3, r3, #32
 800864a:	2b00      	cmp	r3, #0
 800864c:	d010      	beq.n	8008670 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	69da      	ldr	r2, [r3, #28]
 8008652:	4b1d      	ldr	r3, [pc, #116]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800865a:	429a      	cmp	r2, r3
 800865c:	d208      	bcs.n	8008670 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800865e:	4b1a      	ldr	r3, [pc, #104]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	4917      	ldr	r1, [pc, #92]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 800866c:	4313      	orrs	r3, r2
 800866e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8008670:	f000 f834 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8008674:	4602      	mov	r2, r0
 8008676:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	0a1b      	lsrs	r3, r3, #8
 800867c:	f003 030f 	and.w	r3, r3, #15
 8008680:	4912      	ldr	r1, [pc, #72]	; (80086cc <HAL_RCC_ClockConfig+0x35c>)
 8008682:	5ccb      	ldrb	r3, [r1, r3]
 8008684:	f003 031f 	and.w	r3, r3, #31
 8008688:	fa22 f303 	lsr.w	r3, r2, r3
 800868c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800868e:	4b0e      	ldr	r3, [pc, #56]	; (80086c8 <HAL_RCC_ClockConfig+0x358>)
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	f003 030f 	and.w	r3, r3, #15
 8008696:	4a0d      	ldr	r2, [pc, #52]	; (80086cc <HAL_RCC_ClockConfig+0x35c>)
 8008698:	5cd3      	ldrb	r3, [r2, r3]
 800869a:	f003 031f 	and.w	r3, r3, #31
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	fa22 f303 	lsr.w	r3, r2, r3
 80086a4:	4a0a      	ldr	r2, [pc, #40]	; (80086d0 <HAL_RCC_ClockConfig+0x360>)
 80086a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086a8:	4a0a      	ldr	r2, [pc, #40]	; (80086d4 <HAL_RCC_ClockConfig+0x364>)
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80086ae:	4b0a      	ldr	r3, [pc, #40]	; (80086d8 <HAL_RCC_ClockConfig+0x368>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fa fcb0 	bl	8003018 <HAL_InitTick>
 80086b8:	4603      	mov	r3, r0
 80086ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	58024400 	.word	0x58024400
 80086cc:	0800d1d0 	.word	0x0800d1d0
 80086d0:	24000008 	.word	0x24000008
 80086d4:	24000004 	.word	0x24000004
 80086d8:	2400000c 	.word	0x2400000c

080086dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086dc:	b480      	push	{r7}
 80086de:	b089      	sub	sp, #36	; 0x24
 80086e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086e2:	4bb3      	ldr	r3, [pc, #716]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086ea:	2b18      	cmp	r3, #24
 80086ec:	f200 8155 	bhi.w	800899a <HAL_RCC_GetSysClockFreq+0x2be>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	0800875d 	.word	0x0800875d
 80086fc:	0800899b 	.word	0x0800899b
 8008700:	0800899b 	.word	0x0800899b
 8008704:	0800899b 	.word	0x0800899b
 8008708:	0800899b 	.word	0x0800899b
 800870c:	0800899b 	.word	0x0800899b
 8008710:	0800899b 	.word	0x0800899b
 8008714:	0800899b 	.word	0x0800899b
 8008718:	08008783 	.word	0x08008783
 800871c:	0800899b 	.word	0x0800899b
 8008720:	0800899b 	.word	0x0800899b
 8008724:	0800899b 	.word	0x0800899b
 8008728:	0800899b 	.word	0x0800899b
 800872c:	0800899b 	.word	0x0800899b
 8008730:	0800899b 	.word	0x0800899b
 8008734:	0800899b 	.word	0x0800899b
 8008738:	08008789 	.word	0x08008789
 800873c:	0800899b 	.word	0x0800899b
 8008740:	0800899b 	.word	0x0800899b
 8008744:	0800899b 	.word	0x0800899b
 8008748:	0800899b 	.word	0x0800899b
 800874c:	0800899b 	.word	0x0800899b
 8008750:	0800899b 	.word	0x0800899b
 8008754:	0800899b 	.word	0x0800899b
 8008758:	0800878f 	.word	0x0800878f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800875c:	4b94      	ldr	r3, [pc, #592]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0320 	and.w	r3, r3, #32
 8008764:	2b00      	cmp	r3, #0
 8008766:	d009      	beq.n	800877c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008768:	4b91      	ldr	r3, [pc, #580]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	08db      	lsrs	r3, r3, #3
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	4a90      	ldr	r2, [pc, #576]	; (80089b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008774:	fa22 f303 	lsr.w	r3, r2, r3
 8008778:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800877a:	e111      	b.n	80089a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800877c:	4b8d      	ldr	r3, [pc, #564]	; (80089b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800877e:	61bb      	str	r3, [r7, #24]
    break;
 8008780:	e10e      	b.n	80089a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008782:	4b8d      	ldr	r3, [pc, #564]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008784:	61bb      	str	r3, [r7, #24]
    break;
 8008786:	e10b      	b.n	80089a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008788:	4b8c      	ldr	r3, [pc, #560]	; (80089bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800878a:	61bb      	str	r3, [r7, #24]
    break;
 800878c:	e108      	b.n	80089a0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800878e:	4b88      	ldr	r3, [pc, #544]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008798:	4b85      	ldr	r3, [pc, #532]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879c:	091b      	lsrs	r3, r3, #4
 800879e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80087a4:	4b82      	ldr	r3, [pc, #520]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a8:	f003 0301 	and.w	r3, r3, #1
 80087ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80087ae:	4b80      	ldr	r3, [pc, #512]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b2:	08db      	lsrs	r3, r3, #3
 80087b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	fb02 f303 	mul.w	r3, r2, r3
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 80e1 	beq.w	8008994 <HAL_RCC_GetSysClockFreq+0x2b8>
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	f000 8083 	beq.w	80088e0 <HAL_RCC_GetSysClockFreq+0x204>
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	f200 80a1 	bhi.w	8008924 <HAL_RCC_GetSysClockFreq+0x248>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d003      	beq.n	80087f0 <HAL_RCC_GetSysClockFreq+0x114>
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d056      	beq.n	800889c <HAL_RCC_GetSysClockFreq+0x1c0>
 80087ee:	e099      	b.n	8008924 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087f0:	4b6f      	ldr	r3, [pc, #444]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0320 	and.w	r3, r3, #32
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d02d      	beq.n	8008858 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087fc:	4b6c      	ldr	r3, [pc, #432]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	08db      	lsrs	r3, r3, #3
 8008802:	f003 0303 	and.w	r3, r3, #3
 8008806:	4a6b      	ldr	r2, [pc, #428]	; (80089b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008808:	fa22 f303 	lsr.w	r3, r2, r3
 800880c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	ee07 3a90 	vmov	s15, r3
 8008814:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008826:	4b62      	ldr	r3, [pc, #392]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882e:	ee07 3a90 	vmov	s15, r3
 8008832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008836:	ed97 6a02 	vldr	s12, [r7, #8]
 800883a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80089c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800883e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800884a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008852:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008856:	e087      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008862:	eddf 6a58 	vldr	s13, [pc, #352]	; 80089c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886a:	4b51      	ldr	r3, [pc, #324]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800887a:	ed97 6a02 	vldr	s12, [r7, #8]
 800887e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80089c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800888a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800888e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800889a:	e065      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	ee07 3a90 	vmov	s15, r3
 80088a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80089c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80088aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ae:	4b40      	ldr	r3, [pc, #256]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b6:	ee07 3a90 	vmov	s15, r3
 80088ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088be:	ed97 6a02 	vldr	s12, [r7, #8]
 80088c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80089c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088de:	e043      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	ee07 3a90 	vmov	s15, r3
 80088e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80089cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80088ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f2:	4b2f      	ldr	r3, [pc, #188]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fa:	ee07 3a90 	vmov	s15, r3
 80088fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008902:	ed97 6a02 	vldr	s12, [r7, #8]
 8008906:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80089c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800890a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800890e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008912:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800891a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800891e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008922:	e021      	b.n	8008968 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80089c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008936:	4b1e      	ldr	r3, [pc, #120]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893e:	ee07 3a90 	vmov	s15, r3
 8008942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008946:	ed97 6a02 	vldr	s12, [r7, #8]
 800894a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80089c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800894e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800895a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008966:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008968:	4b11      	ldr	r3, [pc, #68]	; (80089b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	0a5b      	lsrs	r3, r3, #9
 800896e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008972:	3301      	adds	r3, #1
 8008974:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	ee07 3a90 	vmov	s15, r3
 800897c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008980:	edd7 6a07 	vldr	s13, [r7, #28]
 8008984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800898c:	ee17 3a90 	vmov	r3, s15
 8008990:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008992:	e005      	b.n	80089a0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008994:	2300      	movs	r3, #0
 8008996:	61bb      	str	r3, [r7, #24]
    break;
 8008998:	e002      	b.n	80089a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800899a:	4b07      	ldr	r3, [pc, #28]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800899c:	61bb      	str	r3, [r7, #24]
    break;
 800899e:	bf00      	nop
  }

  return sysclockfreq;
 80089a0:	69bb      	ldr	r3, [r7, #24]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3724      	adds	r7, #36	; 0x24
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	58024400 	.word	0x58024400
 80089b4:	03d09000 	.word	0x03d09000
 80089b8:	003d0900 	.word	0x003d0900
 80089bc:	007a1200 	.word	0x007a1200
 80089c0:	46000000 	.word	0x46000000
 80089c4:	4c742400 	.word	0x4c742400
 80089c8:	4a742400 	.word	0x4a742400
 80089cc:	4af42400 	.word	0x4af42400

080089d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80089d6:	f7ff fe81 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 80089da:	4602      	mov	r2, r0
 80089dc:	4b10      	ldr	r3, [pc, #64]	; (8008a20 <HAL_RCC_GetHCLKFreq+0x50>)
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	0a1b      	lsrs	r3, r3, #8
 80089e2:	f003 030f 	and.w	r3, r3, #15
 80089e6:	490f      	ldr	r1, [pc, #60]	; (8008a24 <HAL_RCC_GetHCLKFreq+0x54>)
 80089e8:	5ccb      	ldrb	r3, [r1, r3]
 80089ea:	f003 031f 	and.w	r3, r3, #31
 80089ee:	fa22 f303 	lsr.w	r3, r2, r3
 80089f2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80089f4:	4b0a      	ldr	r3, [pc, #40]	; (8008a20 <HAL_RCC_GetHCLKFreq+0x50>)
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	f003 030f 	and.w	r3, r3, #15
 80089fc:	4a09      	ldr	r2, [pc, #36]	; (8008a24 <HAL_RCC_GetHCLKFreq+0x54>)
 80089fe:	5cd3      	ldrb	r3, [r2, r3]
 8008a00:	f003 031f 	and.w	r3, r3, #31
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	fa22 f303 	lsr.w	r3, r2, r3
 8008a0a:	4a07      	ldr	r2, [pc, #28]	; (8008a28 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a0e:	4a07      	ldr	r2, [pc, #28]	; (8008a2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008a14:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a16:	681b      	ldr	r3, [r3, #0]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	58024400 	.word	0x58024400
 8008a24:	0800d1d0 	.word	0x0800d1d0
 8008a28:	24000008 	.word	0x24000008
 8008a2c:	24000004 	.word	0x24000004

08008a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8008a34:	f7ff ffcc 	bl	80089d0 <HAL_RCC_GetHCLKFreq>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	4b06      	ldr	r3, [pc, #24]	; (8008a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	091b      	lsrs	r3, r3, #4
 8008a40:	f003 0307 	and.w	r3, r3, #7
 8008a44:	4904      	ldr	r1, [pc, #16]	; (8008a58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a46:	5ccb      	ldrb	r3, [r1, r3]
 8008a48:	f003 031f 	and.w	r3, r3, #31
 8008a4c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	58024400 	.word	0x58024400
 8008a58:	0800d1d0 	.word	0x0800d1d0

08008a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8008a60:	f7ff ffb6 	bl	80089d0 <HAL_RCC_GetHCLKFreq>
 8008a64:	4602      	mov	r2, r0
 8008a66:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	f003 0307 	and.w	r3, r3, #7
 8008a70:	4904      	ldr	r1, [pc, #16]	; (8008a84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a72:	5ccb      	ldrb	r3, [r1, r3]
 8008a74:	f003 031f 	and.w	r3, r3, #31
 8008a78:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	58024400 	.word	0x58024400
 8008a84:	0800d1d0 	.word	0x0800d1d0

08008a88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a90:	2300      	movs	r3, #0
 8008a92:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a94:	2300      	movs	r3, #0
 8008a96:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d03f      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aa8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aac:	d02a      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008aae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ab2:	d824      	bhi.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ab8:	d018      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008aba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008abe:	d81e      	bhi.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d003      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ac8:	d007      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008aca:	e018      	b.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008acc:	4b9f      	ldr	r3, [pc, #636]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad0:	4a9e      	ldr	r2, [pc, #632]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ad8:	e015      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	3304      	adds	r3, #4
 8008ade:	2102      	movs	r1, #2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f001 ff1b 	bl	800a91c <RCCEx_PLL2_Config>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008aea:	e00c      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3324      	adds	r3, #36	; 0x24
 8008af0:	2102      	movs	r1, #2
 8008af2:	4618      	mov	r0, r3
 8008af4:	f001 ffc4 	bl	800aa80 <RCCEx_PLL3_Config>
 8008af8:	4603      	mov	r3, r0
 8008afa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008afc:	e003      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	75fb      	strb	r3, [r7, #23]
      break;
 8008b02:	e000      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b06:	7dfb      	ldrb	r3, [r7, #23]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d109      	bne.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b0c:	4b8f      	ldr	r3, [pc, #572]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b18:	498c      	ldr	r1, [pc, #560]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	650b      	str	r3, [r1, #80]	; 0x50
 8008b1e:	e001      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d03d      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	d826      	bhi.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008b38:	a201      	add	r2, pc, #4	; (adr r2, 8008b40 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3e:	bf00      	nop
 8008b40:	08008b55 	.word	0x08008b55
 8008b44:	08008b63 	.word	0x08008b63
 8008b48:	08008b75 	.word	0x08008b75
 8008b4c:	08008b8d 	.word	0x08008b8d
 8008b50:	08008b8d 	.word	0x08008b8d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b54:	4b7d      	ldr	r3, [pc, #500]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b58:	4a7c      	ldr	r2, [pc, #496]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b60:	e015      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	3304      	adds	r3, #4
 8008b66:	2100      	movs	r1, #0
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 fed7 	bl	800a91c <RCCEx_PLL2_Config>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b72:	e00c      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	3324      	adds	r3, #36	; 0x24
 8008b78:	2100      	movs	r1, #0
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f001 ff80 	bl	800aa80 <RCCEx_PLL3_Config>
 8008b80:	4603      	mov	r3, r0
 8008b82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b84:	e003      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	75fb      	strb	r3, [r7, #23]
      break;
 8008b8a:	e000      	b.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d109      	bne.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b94:	4b6d      	ldr	r3, [pc, #436]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b98:	f023 0207 	bic.w	r2, r3, #7
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba0:	496a      	ldr	r1, [pc, #424]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	650b      	str	r3, [r1, #80]	; 0x50
 8008ba6:	e001      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
 8008baa:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d04a      	beq.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bbc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008bc0:	d031      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8008bc2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008bc6:	d82b      	bhi.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bcc:	d02d      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8008bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bd2:	d825      	bhi.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008bd4:	2bc0      	cmp	r3, #192	; 0xc0
 8008bd6:	d02a      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008bd8:	2bc0      	cmp	r3, #192	; 0xc0
 8008bda:	d821      	bhi.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008bdc:	2b80      	cmp	r3, #128	; 0x80
 8008bde:	d016      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008be0:	2b80      	cmp	r3, #128	; 0x80
 8008be2:	d81d      	bhi.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008be8:	2b40      	cmp	r3, #64	; 0x40
 8008bea:	d007      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x174>
 8008bec:	e018      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bee:	4b57      	ldr	r3, [pc, #348]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf2:	4a56      	ldr	r2, [pc, #344]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8008bfa:	e019      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	3304      	adds	r3, #4
 8008c00:	2100      	movs	r1, #0
 8008c02:	4618      	mov	r0, r3
 8008c04:	f001 fe8a 	bl	800a91c <RCCEx_PLL2_Config>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8008c0c:	e010      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	3324      	adds	r3, #36	; 0x24
 8008c12:	2100      	movs	r1, #0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f001 ff33 	bl	800aa80 <RCCEx_PLL3_Config>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8008c1e:	e007      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	75fb      	strb	r3, [r7, #23]
      break;
 8008c24:	e004      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8008c26:	bf00      	nop
 8008c28:	e002      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8008c2a:	bf00      	nop
 8008c2c:	e000      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8008c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d109      	bne.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008c36:	4b45      	ldr	r3, [pc, #276]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c3a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c42:	4942      	ldr	r1, [pc, #264]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008c44:	4313      	orrs	r3, r2
 8008c46:	650b      	str	r3, [r1, #80]	; 0x50
 8008c48:	e001      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c4a:	7dfb      	ldrb	r3, [r7, #23]
 8008c4c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d04f      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c5e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008c62:	d036      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8008c64:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008c68:	d830      	bhi.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8008c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c6e:	d032      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8008c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c74:	d82a      	bhi.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8008c76:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008c7a:	d02e      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x252>
 8008c7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008c80:	d824      	bhi.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8008c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c86:	d018      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x232>
 8008c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c8c:	d81e      	bhi.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d003      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8008c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c96:	d007      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8008c98:	e018      	b.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c9a:	4b2c      	ldr	r3, [pc, #176]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9e:	4a2b      	ldr	r2, [pc, #172]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8008ca6:	e019      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3304      	adds	r3, #4
 8008cac:	2100      	movs	r1, #0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f001 fe34 	bl	800a91c <RCCEx_PLL2_Config>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8008cb8:	e010      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	3324      	adds	r3, #36	; 0x24
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f001 fedd 	bl	800aa80 <RCCEx_PLL3_Config>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8008cca:	e007      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	75fb      	strb	r3, [r7, #23]
      break;
 8008cd0:	e004      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8008cd2:	bf00      	nop
 8008cd4:	e002      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8008cd6:	bf00      	nop
 8008cd8:	e000      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8008cda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d109      	bne.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008ce2:	4b1a      	ldr	r3, [pc, #104]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce6:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cee:	4917      	ldr	r1, [pc, #92]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	650b      	str	r3, [r1, #80]	; 0x50
 8008cf4:	e001      	b.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf6:	7dfb      	ldrb	r3, [r7, #23]
 8008cf8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d034      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d0a:	2b30      	cmp	r3, #48	; 0x30
 8008d0c:	d01c      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8008d0e:	2b30      	cmp	r3, #48	; 0x30
 8008d10:	d817      	bhi.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008d12:	2b20      	cmp	r3, #32
 8008d14:	d00c      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d16:	2b20      	cmp	r3, #32
 8008d18:	d813      	bhi.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d018      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8008d1e:	2b10      	cmp	r3, #16
 8008d20:	d10f      	bne.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d22:	4b0a      	ldr	r3, [pc, #40]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d26:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008d2e:	e010      	b.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	3304      	adds	r3, #4
 8008d34:	2102      	movs	r1, #2
 8008d36:	4618      	mov	r0, r3
 8008d38:	f001 fdf0 	bl	800a91c <RCCEx_PLL2_Config>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008d40:	e007      	b.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	75fb      	strb	r3, [r7, #23]
      break;
 8008d46:	e004      	b.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8008d48:	bf00      	nop
 8008d4a:	e002      	b.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d4c:	58024400 	.word	0x58024400
      break;
 8008d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d109      	bne.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008d58:	4b9b      	ldr	r3, [pc, #620]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d64:	4998      	ldr	r1, [pc, #608]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d6a:	e001      	b.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d6c:	7dfb      	ldrb	r3, [r7, #23]
 8008d6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d047      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d84:	d030      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d8a:	d82a      	bhi.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008d8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d90:	d02c      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x364>
 8008d92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d96:	d824      	bhi.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d9c:	d018      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008da2:	d81e      	bhi.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d003      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8008da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dac:	d007      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x336>
 8008dae:	e018      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008db0:	4b85      	ldr	r3, [pc, #532]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db4:	4a84      	ldr	r2, [pc, #528]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008dbc:	e017      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f001 fda9 	bl	800a91c <RCCEx_PLL2_Config>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008dce:	e00e      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3324      	adds	r3, #36	; 0x24
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f001 fe52 	bl	800aa80 <RCCEx_PLL3_Config>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008de0:	e005      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	75fb      	strb	r3, [r7, #23]
      break;
 8008de6:	e002      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8008de8:	bf00      	nop
 8008dea:	e000      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8008dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d109      	bne.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008df4:	4b74      	ldr	r3, [pc, #464]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e00:	4971      	ldr	r1, [pc, #452]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008e02:	4313      	orrs	r3, r2
 8008e04:	650b      	str	r3, [r1, #80]	; 0x50
 8008e06:	e001      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e08:	7dfb      	ldrb	r3, [r7, #23]
 8008e0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d049      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e20:	d02e      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008e22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e26:	d828      	bhi.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008e28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e2c:	d02a      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008e2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e32:	d822      	bhi.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008e34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e38:	d026      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8008e3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e3e:	d81c      	bhi.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e44:	d010      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008e46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e4a:	d816      	bhi.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d01d      	beq.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8008e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e54:	d111      	bne.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3304      	adds	r3, #4
 8008e5a:	2101      	movs	r1, #1
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f001 fd5d 	bl	800a91c <RCCEx_PLL2_Config>
 8008e62:	4603      	mov	r3, r0
 8008e64:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e66:	e012      	b.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3324      	adds	r3, #36	; 0x24
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f001 fe06 	bl	800aa80 <RCCEx_PLL3_Config>
 8008e74:	4603      	mov	r3, r0
 8008e76:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008e78:	e009      	b.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008e7e:	e006      	b.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008e80:	bf00      	nop
 8008e82:	e004      	b.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008e84:	bf00      	nop
 8008e86:	e002      	b.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008e88:	bf00      	nop
 8008e8a:	e000      	b.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8008e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d109      	bne.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008e94:	4b4c      	ldr	r3, [pc, #304]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e98:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ea0:	4949      	ldr	r1, [pc, #292]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	650b      	str	r3, [r1, #80]	; 0x50
 8008ea6:	e001      	b.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d053      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ebe:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008ec2:	d034      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008ec4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008ec8:	d82e      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ece:	d030      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8008ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ed4:	d828      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eda:	d02c      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee0:	d822      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008ee2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ee6:	d028      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8008ee8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008eec:	d81c      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ef2:	d010      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8008ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ef8:	d816      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d01f      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8008efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f02:	d111      	bne.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	3304      	adds	r3, #4
 8008f08:	2101      	movs	r1, #1
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f001 fd06 	bl	800a91c <RCCEx_PLL2_Config>
 8008f10:	4603      	mov	r3, r0
 8008f12:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f14:	e014      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3324      	adds	r3, #36	; 0x24
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f001 fdaf 	bl	800aa80 <RCCEx_PLL3_Config>
 8008f22:	4603      	mov	r3, r0
 8008f24:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f26:	e00b      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f2c:	e008      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008f2e:	bf00      	nop
 8008f30:	e006      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008f32:	bf00      	nop
 8008f34:	e004      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008f36:	bf00      	nop
 8008f38:	e002      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008f3a:	bf00      	nop
 8008f3c:	e000      	b.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10a      	bne.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f46:	4b20      	ldr	r3, [pc, #128]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f4a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008f54:	491c      	ldr	r1, [pc, #112]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	658b      	str	r3, [r1, #88]	; 0x58
 8008f5a:	e001      	b.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
 8008f5e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d031      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f74:	d00e      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8008f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f7a:	d814      	bhi.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d015      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f84:	d10f      	bne.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f86:	4b10      	ldr	r3, [pc, #64]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8a:	4a0f      	ldr	r2, [pc, #60]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008f92:	e00c      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3304      	adds	r3, #4
 8008f98:	2101      	movs	r1, #1
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f001 fcbe 	bl	800a91c <RCCEx_PLL2_Config>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008fa4:	e003      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8008faa:	e000      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8008fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d10b      	bne.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008fb4:	4b04      	ldr	r3, [pc, #16]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fc0:	4901      	ldr	r1, [pc, #4]	; (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	650b      	str	r3, [r1, #80]	; 0x50
 8008fc6:	e003      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8008fc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fcc:	7dfb      	ldrb	r3, [r7, #23]
 8008fce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d032      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d81b      	bhi.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008fe4:	a201      	add	r2, pc, #4	; (adr r2, 8008fec <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8008fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fea:	bf00      	nop
 8008fec:	08009023 	.word	0x08009023
 8008ff0:	08008ffd 	.word	0x08008ffd
 8008ff4:	0800900b 	.word	0x0800900b
 8008ff8:	08009023 	.word	0x08009023
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ffc:	4bb2      	ldr	r3, [pc, #712]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	4ab1      	ldr	r2, [pc, #708]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009006:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009008:	e00c      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3304      	adds	r3, #4
 800900e:	2102      	movs	r1, #2
 8009010:	4618      	mov	r0, r3
 8009012:	f001 fc83 	bl	800a91c <RCCEx_PLL2_Config>
 8009016:	4603      	mov	r3, r0
 8009018:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800901a:	e003      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	75fb      	strb	r3, [r7, #23]
      break;
 8009020:	e000      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009024:	7dfb      	ldrb	r3, [r7, #23]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d109      	bne.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800902a:	4ba7      	ldr	r3, [pc, #668]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800902c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800902e:	f023 0203 	bic.w	r2, r3, #3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009036:	49a4      	ldr	r1, [pc, #656]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009038:	4313      	orrs	r3, r2
 800903a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800903c:	e001      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800903e:	7dfb      	ldrb	r3, [r7, #23]
 8009040:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 8086 	beq.w	800915c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009050:	4b9e      	ldr	r3, [pc, #632]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a9d      	ldr	r2, [pc, #628]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800905a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800905c:	f7fa f826 	bl	80030ac <HAL_GetTick>
 8009060:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009062:	e009      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009064:	f7fa f822 	bl	80030ac <HAL_GetTick>
 8009068:	4602      	mov	r2, r0
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	2b64      	cmp	r3, #100	; 0x64
 8009070:	d902      	bls.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	75fb      	strb	r3, [r7, #23]
        break;
 8009076:	e005      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009078:	4b94      	ldr	r3, [pc, #592]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009080:	2b00      	cmp	r3, #0
 8009082:	d0ef      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8009084:	7dfb      	ldrb	r3, [r7, #23]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d166      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800908a:	4b8f      	ldr	r3, [pc, #572]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800908c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009094:	4053      	eors	r3, r2
 8009096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800909a:	2b00      	cmp	r3, #0
 800909c:	d013      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800909e:	4b8a      	ldr	r3, [pc, #552]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090a6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090a8:	4b87      	ldr	r3, [pc, #540]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ac:	4a86      	ldr	r2, [pc, #536]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090b2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090b4:	4b84      	ldr	r3, [pc, #528]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b8:	4a83      	ldr	r2, [pc, #524]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090be:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80090c0:	4a81      	ldr	r2, [pc, #516]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d0:	d115      	bne.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d2:	f7f9 ffeb 	bl	80030ac <HAL_GetTick>
 80090d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090d8:	e00b      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090da:	f7f9 ffe7 	bl	80030ac <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d902      	bls.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	75fb      	strb	r3, [r7, #23]
            break;
 80090f0:	e005      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090f2:	4b75      	ldr	r3, [pc, #468]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80090f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f6:	f003 0302 	and.w	r3, r3, #2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0ed      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d126      	bne.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800910a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800910e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009112:	d10d      	bne.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8009114:	4b6c      	ldr	r3, [pc, #432]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009122:	0919      	lsrs	r1, r3, #4
 8009124:	4b6a      	ldr	r3, [pc, #424]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009126:	400b      	ands	r3, r1
 8009128:	4967      	ldr	r1, [pc, #412]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800912a:	4313      	orrs	r3, r2
 800912c:	610b      	str	r3, [r1, #16]
 800912e:	e005      	b.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8009130:	4b65      	ldr	r3, [pc, #404]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	4a64      	ldr	r2, [pc, #400]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009136:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800913a:	6113      	str	r3, [r2, #16]
 800913c:	4b62      	ldr	r3, [pc, #392]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800913e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800914a:	495f      	ldr	r1, [pc, #380]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800914c:	4313      	orrs	r3, r2
 800914e:	670b      	str	r3, [r1, #112]	; 0x70
 8009150:	e004      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009152:	7dfb      	ldrb	r3, [r7, #23]
 8009154:	75bb      	strb	r3, [r7, #22]
 8009156:	e001      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	d07f      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800916e:	2b28      	cmp	r3, #40	; 0x28
 8009170:	d866      	bhi.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8009172:	a201      	add	r2, pc, #4	; (adr r2, 8009178 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8009174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009178:	08009247 	.word	0x08009247
 800917c:	08009241 	.word	0x08009241
 8009180:	08009241 	.word	0x08009241
 8009184:	08009241 	.word	0x08009241
 8009188:	08009241 	.word	0x08009241
 800918c:	08009241 	.word	0x08009241
 8009190:	08009241 	.word	0x08009241
 8009194:	08009241 	.word	0x08009241
 8009198:	0800921d 	.word	0x0800921d
 800919c:	08009241 	.word	0x08009241
 80091a0:	08009241 	.word	0x08009241
 80091a4:	08009241 	.word	0x08009241
 80091a8:	08009241 	.word	0x08009241
 80091ac:	08009241 	.word	0x08009241
 80091b0:	08009241 	.word	0x08009241
 80091b4:	08009241 	.word	0x08009241
 80091b8:	0800922f 	.word	0x0800922f
 80091bc:	08009241 	.word	0x08009241
 80091c0:	08009241 	.word	0x08009241
 80091c4:	08009241 	.word	0x08009241
 80091c8:	08009241 	.word	0x08009241
 80091cc:	08009241 	.word	0x08009241
 80091d0:	08009241 	.word	0x08009241
 80091d4:	08009241 	.word	0x08009241
 80091d8:	08009247 	.word	0x08009247
 80091dc:	08009241 	.word	0x08009241
 80091e0:	08009241 	.word	0x08009241
 80091e4:	08009241 	.word	0x08009241
 80091e8:	08009241 	.word	0x08009241
 80091ec:	08009241 	.word	0x08009241
 80091f0:	08009241 	.word	0x08009241
 80091f4:	08009241 	.word	0x08009241
 80091f8:	08009247 	.word	0x08009247
 80091fc:	08009241 	.word	0x08009241
 8009200:	08009241 	.word	0x08009241
 8009204:	08009241 	.word	0x08009241
 8009208:	08009241 	.word	0x08009241
 800920c:	08009241 	.word	0x08009241
 8009210:	08009241 	.word	0x08009241
 8009214:	08009241 	.word	0x08009241
 8009218:	08009247 	.word	0x08009247
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	3304      	adds	r3, #4
 8009220:	2101      	movs	r1, #1
 8009222:	4618      	mov	r0, r3
 8009224:	f001 fb7a 	bl	800a91c <RCCEx_PLL2_Config>
 8009228:	4603      	mov	r3, r0
 800922a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800922c:	e00c      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	3324      	adds	r3, #36	; 0x24
 8009232:	2101      	movs	r1, #1
 8009234:	4618      	mov	r0, r3
 8009236:	f001 fc23 	bl	800aa80 <RCCEx_PLL3_Config>
 800923a:	4603      	mov	r3, r0
 800923c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800923e:	e003      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	75fb      	strb	r3, [r7, #23]
      break;
 8009244:	e000      	b.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8009246:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009248:	7dfb      	ldrb	r3, [r7, #23]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10a      	bne.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800924e:	4b1e      	ldr	r3, [pc, #120]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009252:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800925c:	491a      	ldr	r1, [pc, #104]	; (80092c8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800925e:	4313      	orrs	r3, r2
 8009260:	654b      	str	r3, [r1, #84]	; 0x54
 8009262:	e001      	b.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009264:	7dfb      	ldrb	r3, [r7, #23]
 8009266:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0302 	and.w	r3, r3, #2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d03f      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009278:	2b05      	cmp	r3, #5
 800927a:	d821      	bhi.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800927c:	a201      	add	r2, pc, #4	; (adr r2, 8009284 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800927e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009282:	bf00      	nop
 8009284:	080092d5 	.word	0x080092d5
 8009288:	0800929d 	.word	0x0800929d
 800928c:	080092af 	.word	0x080092af
 8009290:	080092d5 	.word	0x080092d5
 8009294:	080092d5 	.word	0x080092d5
 8009298:	080092d5 	.word	0x080092d5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3304      	adds	r3, #4
 80092a0:	2101      	movs	r1, #1
 80092a2:	4618      	mov	r0, r3
 80092a4:	f001 fb3a 	bl	800a91c <RCCEx_PLL2_Config>
 80092a8:	4603      	mov	r3, r0
 80092aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092ac:	e013      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	3324      	adds	r3, #36	; 0x24
 80092b2:	2101      	movs	r1, #1
 80092b4:	4618      	mov	r0, r3
 80092b6:	f001 fbe3 	bl	800aa80 <RCCEx_PLL3_Config>
 80092ba:	4603      	mov	r3, r0
 80092bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80092be:	e00a      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	75fb      	strb	r3, [r7, #23]
      break;
 80092c4:	e007      	b.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80092c6:	bf00      	nop
 80092c8:	58024400 	.word	0x58024400
 80092cc:	58024800 	.word	0x58024800
 80092d0:	00ffffcf 	.word	0x00ffffcf
      break;
 80092d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092d6:	7dfb      	ldrb	r3, [r7, #23]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d109      	bne.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80092dc:	4b9f      	ldr	r3, [pc, #636]	; (800955c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80092de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e0:	f023 0207 	bic.w	r2, r3, #7
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e8:	499c      	ldr	r1, [pc, #624]	; (800955c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80092ea:	4313      	orrs	r3, r2
 80092ec:	654b      	str	r3, [r1, #84]	; 0x54
 80092ee:	e001      	b.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f0:	7dfb      	ldrb	r3, [r7, #23]
 80092f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d039      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009306:	2b05      	cmp	r3, #5
 8009308:	d820      	bhi.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800930a:	a201      	add	r2, pc, #4	; (adr r2, 8009310 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009310:	08009353 	.word	0x08009353
 8009314:	08009329 	.word	0x08009329
 8009318:	0800933b 	.word	0x0800933b
 800931c:	08009353 	.word	0x08009353
 8009320:	08009353 	.word	0x08009353
 8009324:	08009353 	.word	0x08009353
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	3304      	adds	r3, #4
 800932c:	2101      	movs	r1, #1
 800932e:	4618      	mov	r0, r3
 8009330:	f001 faf4 	bl	800a91c <RCCEx_PLL2_Config>
 8009334:	4603      	mov	r3, r0
 8009336:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009338:	e00c      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	3324      	adds	r3, #36	; 0x24
 800933e:	2101      	movs	r1, #1
 8009340:	4618      	mov	r0, r3
 8009342:	f001 fb9d 	bl	800aa80 <RCCEx_PLL3_Config>
 8009346:	4603      	mov	r3, r0
 8009348:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800934a:	e003      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	75fb      	strb	r3, [r7, #23]
      break;
 8009350:	e000      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8009352:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009354:	7dfb      	ldrb	r3, [r7, #23]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10a      	bne.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800935a:	4b80      	ldr	r3, [pc, #512]	; (800955c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800935c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935e:	f023 0207 	bic.w	r2, r3, #7
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009368:	497c      	ldr	r1, [pc, #496]	; (800955c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800936a:	4313      	orrs	r3, r2
 800936c:	658b      	str	r3, [r1, #88]	; 0x58
 800936e:	e001      	b.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
 8009372:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0320 	and.w	r3, r3, #32
 800937c:	2b00      	cmp	r3, #0
 800937e:	d04b      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800938a:	d02e      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x962>
 800938c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009390:	d828      	bhi.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8009392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009396:	d02a      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800939c:	d822      	bhi.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800939e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093a2:	d026      	beq.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80093a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093a8:	d81c      	bhi.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80093aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ae:	d010      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80093b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093b4:	d816      	bhi.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d01d      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80093ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093be:	d111      	bne.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3304      	adds	r3, #4
 80093c4:	2100      	movs	r1, #0
 80093c6:	4618      	mov	r0, r3
 80093c8:	f001 faa8 	bl	800a91c <RCCEx_PLL2_Config>
 80093cc:	4603      	mov	r3, r0
 80093ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093d0:	e012      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	3324      	adds	r3, #36	; 0x24
 80093d6:	2102      	movs	r1, #2
 80093d8:	4618      	mov	r0, r3
 80093da:	f001 fb51 	bl	800aa80 <RCCEx_PLL3_Config>
 80093de:	4603      	mov	r3, r0
 80093e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80093e2:	e009      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	75fb      	strb	r3, [r7, #23]
      break;
 80093e8:	e006      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80093ea:	bf00      	nop
 80093ec:	e004      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80093ee:	bf00      	nop
 80093f0:	e002      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80093f2:	bf00      	nop
 80093f4:	e000      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80093f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10a      	bne.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093fe:	4b57      	ldr	r3, [pc, #348]	; (800955c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009402:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800940c:	4953      	ldr	r1, [pc, #332]	; (800955c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800940e:	4313      	orrs	r3, r2
 8009410:	654b      	str	r3, [r1, #84]	; 0x54
 8009412:	e001      	b.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009414:	7dfb      	ldrb	r3, [r7, #23]
 8009416:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009420:	2b00      	cmp	r3, #0
 8009422:	d04b      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800942a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800942e:	d02e      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009430:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009434:	d828      	bhi.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800943a:	d02a      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800943c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009440:	d822      	bhi.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009442:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009446:	d026      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009448:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800944c:	d81c      	bhi.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800944e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009452:	d010      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009458:	d816      	bhi.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800945a:	2b00      	cmp	r3, #0
 800945c:	d01d      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800945e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009462:	d111      	bne.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	3304      	adds	r3, #4
 8009468:	2100      	movs	r1, #0
 800946a:	4618      	mov	r0, r3
 800946c:	f001 fa56 	bl	800a91c <RCCEx_PLL2_Config>
 8009470:	4603      	mov	r3, r0
 8009472:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009474:	e012      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	3324      	adds	r3, #36	; 0x24
 800947a:	2102      	movs	r1, #2
 800947c:	4618      	mov	r0, r3
 800947e:	f001 faff 	bl	800aa80 <RCCEx_PLL3_Config>
 8009482:	4603      	mov	r3, r0
 8009484:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009486:	e009      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	75fb      	strb	r3, [r7, #23]
      break;
 800948c:	e006      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800948e:	bf00      	nop
 8009490:	e004      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009492:	bf00      	nop
 8009494:	e002      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009496:	bf00      	nop
 8009498:	e000      	b.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800949a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800949c:	7dfb      	ldrb	r3, [r7, #23]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10a      	bne.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80094a2:	4b2e      	ldr	r3, [pc, #184]	; (800955c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80094b0:	492a      	ldr	r1, [pc, #168]	; (800955c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	658b      	str	r3, [r1, #88]	; 0x58
 80094b6:	e001      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d04d      	beq.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094d2:	d02e      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80094d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80094d8:	d828      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80094da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094de:	d02a      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80094e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094e4:	d822      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80094e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094ea:	d026      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80094ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80094f0:	d81c      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80094f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094f6:	d010      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80094f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094fc:	d816      	bhi.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d01d      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009506:	d111      	bne.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	3304      	adds	r3, #4
 800950c:	2100      	movs	r1, #0
 800950e:	4618      	mov	r0, r3
 8009510:	f001 fa04 	bl	800a91c <RCCEx_PLL2_Config>
 8009514:	4603      	mov	r3, r0
 8009516:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009518:	e012      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3324      	adds	r3, #36	; 0x24
 800951e:	2102      	movs	r1, #2
 8009520:	4618      	mov	r0, r3
 8009522:	f001 faad 	bl	800aa80 <RCCEx_PLL3_Config>
 8009526:	4603      	mov	r3, r0
 8009528:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800952a:	e009      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	75fb      	strb	r3, [r7, #23]
      break;
 8009530:	e006      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009532:	bf00      	nop
 8009534:	e004      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009536:	bf00      	nop
 8009538:	e002      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800953a:	bf00      	nop
 800953c:	e000      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800953e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009540:	7dfb      	ldrb	r3, [r7, #23]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10c      	bne.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009546:	4b05      	ldr	r3, [pc, #20]	; (800955c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800954a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009554:	4901      	ldr	r1, [pc, #4]	; (800955c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009556:	4313      	orrs	r3, r2
 8009558:	658b      	str	r3, [r1, #88]	; 0x58
 800955a:	e003      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800955c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009560:	7dfb      	ldrb	r3, [r7, #23]
 8009562:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0308 	and.w	r3, r3, #8
 800956c:	2b00      	cmp	r3, #0
 800956e:	d01a      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800957a:	d10a      	bne.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3324      	adds	r3, #36	; 0x24
 8009580:	2102      	movs	r1, #2
 8009582:	4618      	mov	r0, r3
 8009584:	f001 fa7c 	bl	800aa80 <RCCEx_PLL3_Config>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009592:	4b8c      	ldr	r3, [pc, #560]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009596:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a0:	4988      	ldr	r1, [pc, #544]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 0310 	and.w	r3, r3, #16
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d01a      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095bc:	d10a      	bne.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	3324      	adds	r3, #36	; 0x24
 80095c2:	2102      	movs	r1, #2
 80095c4:	4618      	mov	r0, r3
 80095c6:	f001 fa5b 	bl	800aa80 <RCCEx_PLL3_Config>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80095d4:	4b7b      	ldr	r3, [pc, #492]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80095d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095e2:	4978      	ldr	r1, [pc, #480]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80095e4:	4313      	orrs	r3, r2
 80095e6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d034      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80095fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095fe:	d01d      	beq.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8009600:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009604:	d817      	bhi.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8009606:	2b00      	cmp	r3, #0
 8009608:	d003      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800960a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800960e:	d009      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8009610:	e011      	b.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	3304      	adds	r3, #4
 8009616:	2100      	movs	r1, #0
 8009618:	4618      	mov	r0, r3
 800961a:	f001 f97f 	bl	800a91c <RCCEx_PLL2_Config>
 800961e:	4603      	mov	r3, r0
 8009620:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009622:	e00c      	b.n	800963e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3324      	adds	r3, #36	; 0x24
 8009628:	2102      	movs	r1, #2
 800962a:	4618      	mov	r0, r3
 800962c:	f001 fa28 	bl	800aa80 <RCCEx_PLL3_Config>
 8009630:	4603      	mov	r3, r0
 8009632:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009634:	e003      	b.n	800963e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	75fb      	strb	r3, [r7, #23]
      break;
 800963a:	e000      	b.n	800963e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800963c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800963e:	7dfb      	ldrb	r3, [r7, #23]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10a      	bne.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009644:	4b5f      	ldr	r3, [pc, #380]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009648:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009652:	495c      	ldr	r1, [pc, #368]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009654:	4313      	orrs	r3, r2
 8009656:	658b      	str	r3, [r1, #88]	; 0x58
 8009658:	e001      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800965a:	7dfb      	ldrb	r3, [r7, #23]
 800965c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d033      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009670:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009674:	d01c      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009676:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800967a:	d816      	bhi.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800967c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009680:	d003      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8009682:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009686:	d007      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009688:	e00f      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800968a:	4b4e      	ldr	r3, [pc, #312]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968e:	4a4d      	ldr	r2, [pc, #308]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009694:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009696:	e00c      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	3324      	adds	r3, #36	; 0x24
 800969c:	2101      	movs	r1, #1
 800969e:	4618      	mov	r0, r3
 80096a0:	f001 f9ee 	bl	800aa80 <RCCEx_PLL3_Config>
 80096a4:	4603      	mov	r3, r0
 80096a6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80096a8:	e003      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	75fb      	strb	r3, [r7, #23]
      break;
 80096ae:	e000      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80096b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096b2:	7dfb      	ldrb	r3, [r7, #23]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10a      	bne.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096b8:	4b42      	ldr	r3, [pc, #264]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80096ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096c6:	493f      	ldr	r1, [pc, #252]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80096c8:	4313      	orrs	r3, r2
 80096ca:	654b      	str	r3, [r1, #84]	; 0x54
 80096cc:	e001      	b.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ce:	7dfb      	ldrb	r3, [r7, #23]
 80096d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d029      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80096e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096ea:	d007      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80096ec:	e00f      	b.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ee:	4b35      	ldr	r3, [pc, #212]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80096f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f2:	4a34      	ldr	r2, [pc, #208]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80096f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80096fa:	e00b      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	3304      	adds	r3, #4
 8009700:	2102      	movs	r1, #2
 8009702:	4618      	mov	r0, r3
 8009704:	f001 f90a 	bl	800a91c <RCCEx_PLL2_Config>
 8009708:	4603      	mov	r3, r0
 800970a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800970c:	e002      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	75fb      	strb	r3, [r7, #23]
      break;
 8009712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009714:	7dfb      	ldrb	r3, [r7, #23]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d109      	bne.n	800972e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800971a:	4b2a      	ldr	r3, [pc, #168]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800971c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800971e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009726:	4927      	ldr	r1, [pc, #156]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009728:	4313      	orrs	r3, r2
 800972a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800972c:	e001      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800972e:	7dfb      	ldrb	r3, [r7, #23]
 8009730:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00a      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	3324      	adds	r3, #36	; 0x24
 8009742:	2102      	movs	r1, #2
 8009744:	4618      	mov	r0, r3
 8009746:	f001 f99b 	bl	800aa80 <RCCEx_PLL3_Config>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800975c:	2b00      	cmp	r3, #0
 800975e:	d035      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800976a:	d017      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800976c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009770:	d811      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009776:	d013      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8009778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800977c:	d80b      	bhi.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800977e:	2b00      	cmp	r3, #0
 8009780:	d010      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8009782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009786:	d106      	bne.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009788:	4b0e      	ldr	r3, [pc, #56]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800978a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978c:	4a0d      	ldr	r2, [pc, #52]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800978e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009792:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009794:	e007      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	75fb      	strb	r3, [r7, #23]
      break;
 800979a:	e004      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800979c:	bf00      	nop
 800979e:	e002      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80097a0:	bf00      	nop
 80097a2:	e000      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80097a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097a6:	7dfb      	ldrb	r3, [r7, #23]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10d      	bne.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097ac:	4b05      	ldr	r3, [pc, #20]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80097ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097ba:	4902      	ldr	r1, [pc, #8]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80097bc:	4313      	orrs	r3, r2
 80097be:	654b      	str	r3, [r1, #84]	; 0x54
 80097c0:	e004      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80097c2:	bf00      	nop
 80097c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c8:	7dfb      	ldrb	r3, [r7, #23]
 80097ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d008      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80097d8:	4b30      	ldr	r3, [pc, #192]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80097da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097e4:	492d      	ldr	r1, [pc, #180]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d008      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80097f6:	4b29      	ldr	r3, [pc, #164]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80097f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009802:	4926      	ldr	r1, [pc, #152]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009804:	4313      	orrs	r3, r2
 8009806:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009810:	2b00      	cmp	r3, #0
 8009812:	d008      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009814:	4b21      	ldr	r3, [pc, #132]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009818:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009820:	491e      	ldr	r1, [pc, #120]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009822:	4313      	orrs	r3, r2
 8009824:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00d      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009832:	4b1a      	ldr	r3, [pc, #104]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	4a19      	ldr	r2, [pc, #100]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009838:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800983c:	6113      	str	r3, [r2, #16]
 800983e:	4b17      	ldr	r3, [pc, #92]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009840:	691a      	ldr	r2, [r3, #16]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009848:	4914      	ldr	r1, [pc, #80]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800984a:	4313      	orrs	r3, r2
 800984c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	da08      	bge.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009856:	4b11      	ldr	r3, [pc, #68]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800985a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009862:	490e      	ldr	r1, [pc, #56]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009864:	4313      	orrs	r3, r2
 8009866:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d009      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009874:	4b09      	ldr	r3, [pc, #36]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009878:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009882:	4906      	ldr	r1, [pc, #24]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009884:	4313      	orrs	r3, r2
 8009886:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009888:	7dbb      	ldrb	r3, [r7, #22]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	e000      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
}
 8009894:	4618      	mov	r0, r3
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	58024400 	.word	0x58024400

080098a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b090      	sub	sp, #64	; 0x40
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098ae:	f040 8089 	bne.w	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80098b2:	4b91      	ldr	r3, [pc, #580]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80098b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098b6:	f003 0307 	and.w	r3, r3, #7
 80098ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80098bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098be:	2b04      	cmp	r3, #4
 80098c0:	d87d      	bhi.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80098c2:	a201      	add	r2, pc, #4	; (adr r2, 80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80098c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c8:	080098dd 	.word	0x080098dd
 80098cc:	08009901 	.word	0x08009901
 80098d0:	08009925 	.word	0x08009925
 80098d4:	080099b9 	.word	0x080099b9
 80098d8:	08009949 	.word	0x08009949
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098dc:	4b86      	ldr	r3, [pc, #536]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098e8:	d107      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 fec2 	bl	800a678 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80098f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80098f8:	e3f4      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80098fa:	2300      	movs	r3, #0
 80098fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098fe:	e3f1      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009900:	4b7d      	ldr	r3, [pc, #500]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800990c:	d107      	bne.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800990e:	f107 0318 	add.w	r3, r7, #24
 8009912:	4618      	mov	r0, r3
 8009914:	f000 fc08 	bl	800a128 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800991c:	e3e2      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009922:	e3df      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009924:	4b74      	ldr	r3, [pc, #464]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800992c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009930:	d107      	bne.n	8009942 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009932:	f107 030c 	add.w	r3, r7, #12
 8009936:	4618      	mov	r0, r3
 8009938:	f000 fd4a 	bl	800a3d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009940:	e3d0      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009946:	e3cd      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009948:	4b6b      	ldr	r3, [pc, #428]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800994a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800994c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009950:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009952:	4b69      	ldr	r3, [pc, #420]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0304 	and.w	r3, r3, #4
 800995a:	2b04      	cmp	r3, #4
 800995c:	d10c      	bne.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800995e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009960:	2b00      	cmp	r3, #0
 8009962:	d109      	bne.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009964:	4b64      	ldr	r3, [pc, #400]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	08db      	lsrs	r3, r3, #3
 800996a:	f003 0303 	and.w	r3, r3, #3
 800996e:	4a63      	ldr	r2, [pc, #396]	; (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009970:	fa22 f303 	lsr.w	r3, r2, r3
 8009974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009976:	e01e      	b.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009978:	4b5f      	ldr	r3, [pc, #380]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009984:	d106      	bne.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800998c:	d102      	bne.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800998e:	4b5c      	ldr	r3, [pc, #368]	; (8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009992:	e010      	b.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009994:	4b58      	ldr	r3, [pc, #352]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800999c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099a0:	d106      	bne.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80099a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099a8:	d102      	bne.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80099aa:	4b56      	ldr	r3, [pc, #344]	; (8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80099ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099ae:	e002      	b.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80099b0:	2300      	movs	r3, #0
 80099b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80099b4:	e396      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80099b6:	e395      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80099b8:	4b53      	ldr	r3, [pc, #332]	; (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80099ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099bc:	e392      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099c2:	e38f      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099ca:	f040 809f 	bne.w	8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80099ce:	4b4a      	ldr	r3, [pc, #296]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80099d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80099d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099de:	d04d      	beq.n	8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80099e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099e6:	f200 8084 	bhi.w	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80099ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ec:	2bc0      	cmp	r3, #192	; 0xc0
 80099ee:	d07d      	beq.n	8009aec <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80099f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f2:	2bc0      	cmp	r3, #192	; 0xc0
 80099f4:	d87d      	bhi.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	2b80      	cmp	r3, #128	; 0x80
 80099fa:	d02d      	beq.n	8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80099fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fe:	2b80      	cmp	r3, #128	; 0x80
 8009a00:	d877      	bhi.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8009a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d003      	beq.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8009a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0a:	2b40      	cmp	r3, #64	; 0x40
 8009a0c:	d012      	beq.n	8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8009a0e:	e070      	b.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a10:	4b39      	ldr	r3, [pc, #228]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a1c:	d107      	bne.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 fe28 	bl	800a678 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a2c:	e35a      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a32:	e357      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a34:	4b30      	ldr	r3, [pc, #192]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a40:	d107      	bne.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a42:	f107 0318 	add.w	r3, r7, #24
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fb6e 	bl	800a128 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a50:	e348      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009a52:	2300      	movs	r3, #0
 8009a54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a56:	e345      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a58:	4b27      	ldr	r3, [pc, #156]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a64:	d107      	bne.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a66:	f107 030c 	add.w	r3, r7, #12
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 fcb0 	bl	800a3d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009a74:	e336      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a7a:	e333      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009a7c:	4b1e      	ldr	r3, [pc, #120]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a84:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a86:	4b1c      	ldr	r3, [pc, #112]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0304 	and.w	r3, r3, #4
 8009a8e:	2b04      	cmp	r3, #4
 8009a90:	d10c      	bne.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8009a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d109      	bne.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a98:	4b17      	ldr	r3, [pc, #92]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	08db      	lsrs	r3, r3, #3
 8009a9e:	f003 0303 	and.w	r3, r3, #3
 8009aa2:	4a16      	ldr	r2, [pc, #88]	; (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aaa:	e01e      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009aac:	4b12      	ldr	r3, [pc, #72]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ab8:	d106      	bne.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8009aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ac0:	d102      	bne.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009ac2:	4b0f      	ldr	r3, [pc, #60]	; (8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ac6:	e010      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ac8:	4b0b      	ldr	r3, [pc, #44]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ad4:	d106      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8009ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009adc:	d102      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009ade:	4b09      	ldr	r3, [pc, #36]	; (8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ae2:	e002      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009ae8:	e2fc      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009aea:	e2fb      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009aec:	4b06      	ldr	r3, [pc, #24]	; (8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009af0:	e2f8      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009af6:	e2f5      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009af8:	58024400 	.word	0x58024400
 8009afc:	03d09000 	.word	0x03d09000
 8009b00:	003d0900 	.word	0x003d0900
 8009b04:	007a1200 	.word	0x007a1200
 8009b08:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b12:	f040 809c 	bne.w	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8009b16:	4b9d      	ldr	r3, [pc, #628]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b1a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8009b1e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b26:	d054      	beq.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8009b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b2e:	f200 808b 	bhi.w	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009b38:	f000 8083 	beq.w	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009b42:	f200 8081 	bhi.w	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8009b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b4c:	d02f      	beq.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b54:	d878      	bhi.n	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8009b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d004      	beq.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b62:	d012      	beq.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8009b64:	e070      	b.n	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b66:	4b89      	ldr	r3, [pc, #548]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b72:	d107      	bne.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 fd7d 	bl	800a678 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b82:	e2af      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009b84:	2300      	movs	r3, #0
 8009b86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b88:	e2ac      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b8a:	4b80      	ldr	r3, [pc, #512]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b96:	d107      	bne.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b98:	f107 0318 	add.w	r3, r7, #24
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 fac3 	bl	800a128 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009ba6:	e29d      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bac:	e29a      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bae:	4b77      	ldr	r3, [pc, #476]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bba:	d107      	bne.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bbc:	f107 030c 	add.w	r3, r7, #12
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 fc05 	bl	800a3d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009bca:	e28b      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bd0:	e288      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009bd2:	4b6e      	ldr	r3, [pc, #440]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009bda:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009bdc:	4b6b      	ldr	r3, [pc, #428]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0304 	and.w	r3, r3, #4
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d10c      	bne.n	8009c02 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8009be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d109      	bne.n	8009c02 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bee:	4b67      	ldr	r3, [pc, #412]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	08db      	lsrs	r3, r3, #3
 8009bf4:	f003 0303 	and.w	r3, r3, #3
 8009bf8:	4a65      	ldr	r2, [pc, #404]	; (8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8009bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c00:	e01e      	b.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c02:	4b62      	ldr	r3, [pc, #392]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c0e:	d106      	bne.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8009c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c16:	d102      	bne.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009c18:	4b5e      	ldr	r3, [pc, #376]	; (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8009c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c1c:	e010      	b.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c1e:	4b5b      	ldr	r3, [pc, #364]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c2a:	d106      	bne.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8009c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c32:	d102      	bne.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009c34:	4b58      	ldr	r3, [pc, #352]	; (8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8009c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c38:	e002      	b.n	8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8009c3e:	e251      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009c40:	e250      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009c42:	4b56      	ldr	r3, [pc, #344]	; (8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009c44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c46:	e24d      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c4c:	e24a      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c54:	f040 80a7 	bne.w	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009c58:	4b4c      	ldr	r3, [pc, #304]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c5c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009c60:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c68:	d055      	beq.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c70:	f200 8096 	bhi.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8009c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c7a:	f000 8084 	beq.w	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c84:	f200 808c 	bhi.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8009c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c8e:	d030      	beq.n	8009cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8009c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c96:	f200 8083 	bhi.w	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d004      	beq.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8009ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ca6:	d012      	beq.n	8009cce <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8009ca8:	e07a      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009caa:	4b38      	ldr	r3, [pc, #224]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cb6:	d107      	bne.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 fcdb 	bl	800a678 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009cc6:	e20d      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ccc:	e20a      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cce:	4b2f      	ldr	r3, [pc, #188]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cda:	d107      	bne.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cdc:	f107 0318 	add.w	r3, r7, #24
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 fa21 	bl	800a128 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009cea:	e1fb      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009cec:	2300      	movs	r3, #0
 8009cee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009cf0:	e1f8      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cf2:	4b26      	ldr	r3, [pc, #152]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cfe:	d107      	bne.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d00:	f107 030c 	add.w	r3, r7, #12
 8009d04:	4618      	mov	r0, r3
 8009d06:	f000 fb63 	bl	800a3d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009d0e:	e1e9      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d14:	e1e6      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009d16:	4b1d      	ldr	r3, [pc, #116]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009d1e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d20:	4b1a      	ldr	r3, [pc, #104]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f003 0304 	and.w	r3, r3, #4
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d10c      	bne.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8009d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d109      	bne.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d32:	4b16      	ldr	r3, [pc, #88]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	08db      	lsrs	r3, r3, #3
 8009d38:	f003 0303 	and.w	r3, r3, #3
 8009d3c:	4a14      	ldr	r2, [pc, #80]	; (8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8009d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d44:	e01e      	b.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d46:	4b11      	ldr	r3, [pc, #68]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d52:	d106      	bne.n	8009d62 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8009d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d5a:	d102      	bne.n	8009d62 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	; (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8009d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d60:	e010      	b.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d62:	4b0a      	ldr	r3, [pc, #40]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d6e:	d106      	bne.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d76:	d102      	bne.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009d78:	4b07      	ldr	r3, [pc, #28]	; (8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8009d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d7c:	e002      	b.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009d82:	e1af      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009d84:	e1ae      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009d86:	4b05      	ldr	r3, [pc, #20]	; (8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009d88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009d8a:	e1ab      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009d8c:	58024400 	.word	0x58024400
 8009d90:	03d09000 	.word	0x03d09000
 8009d94:	003d0900 	.word	0x003d0900
 8009d98:	007a1200 	.word	0x007a1200
 8009d9c:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009da4:	e19e      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009dac:	d173      	bne.n	8009e96 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8009dae:	4b9d      	ldr	r3, [pc, #628]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009db2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009db6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dbe:	d02f      	beq.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8009dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009dc6:	d863      	bhi.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d004      	beq.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dd4:	d012      	beq.n	8009dfc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8009dd6:	e05b      	b.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dd8:	4b92      	ldr	r3, [pc, #584]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009de4:	d107      	bne.n	8009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009de6:	f107 0318 	add.w	r3, r7, #24
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 f99c 	bl	800a128 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009df4:	e176      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009dfa:	e173      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dfc:	4b89      	ldr	r3, [pc, #548]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e08:	d107      	bne.n	8009e1a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e0a:	f107 030c 	add.w	r3, r7, #12
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 fade 	bl	800a3d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009e18:	e164      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e1e:	e161      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009e20:	4b80      	ldr	r3, [pc, #512]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e28:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e2a:	4b7e      	ldr	r3, [pc, #504]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f003 0304 	and.w	r3, r3, #4
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	d10c      	bne.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8009e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d109      	bne.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e3c:	4b79      	ldr	r3, [pc, #484]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	08db      	lsrs	r3, r3, #3
 8009e42:	f003 0303 	and.w	r3, r3, #3
 8009e46:	4a78      	ldr	r2, [pc, #480]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009e48:	fa22 f303 	lsr.w	r3, r2, r3
 8009e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e4e:	e01e      	b.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e50:	4b74      	ldr	r3, [pc, #464]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e5c:	d106      	bne.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e64:	d102      	bne.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009e66:	4b71      	ldr	r3, [pc, #452]	; (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e6a:	e010      	b.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e6c:	4b6d      	ldr	r3, [pc, #436]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e78:	d106      	bne.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8009e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e80:	d102      	bne.n	8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009e82:	4b6b      	ldr	r3, [pc, #428]	; (800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e86:	e002      	b.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009e8c:	e12a      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009e8e:	e129      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009e94:	e126      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e9c:	d133      	bne.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8009e9e:	4b61      	ldr	r3, [pc, #388]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ea6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d004      	beq.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8009eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eb4:	d012      	beq.n	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8009eb6:	e023      	b.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009eb8:	4b5a      	ldr	r3, [pc, #360]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ec0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ec4:	d107      	bne.n	8009ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f000 fbd4 	bl	800a678 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ed4:	e106      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009eda:	e103      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009edc:	4b51      	ldr	r3, [pc, #324]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ee8:	d107      	bne.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eea:	f107 0318 	add.w	r3, r7, #24
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f000 f91a 	bl	800a128 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009ef4:	6a3b      	ldr	r3, [r7, #32]
 8009ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ef8:	e0f4      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009efe:	e0f1      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f04:	e0ee      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f0c:	f040 809b 	bne.w	800a046 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009f10:	4b44      	ldr	r3, [pc, #272]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f14:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009f18:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009f20:	f000 808b 	beq.w	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f26:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009f2a:	f200 8089 	bhi.w	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f34:	d06c      	beq.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f3c:	f200 8080 	bhi.w	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f46:	d056      	beq.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8009f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f4e:	d877      	bhi.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f56:	d03b      	beq.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8009f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f5e:	d86f      	bhi.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f66:	d021      	beq.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f6e:	d867      	bhi.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d004      	beq.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8009f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f7c:	d004      	beq.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8009f7e:	e05f      	b.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009f80:	f000 f8bc 	bl	800a0fc <HAL_RCCEx_GetD3PCLK1Freq>
 8009f84:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009f86:	e0ad      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f88:	4b26      	ldr	r3, [pc, #152]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f94:	d107      	bne.n	8009fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f96:	f107 0318 	add.w	r3, r7, #24
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 f8c4 	bl	800a128 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009fa4:	e09e      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009faa:	e09b      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009fac:	4b1d      	ldr	r3, [pc, #116]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fb8:	d107      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fba:	f107 030c 	add.w	r3, r7, #12
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 fa06 	bl	800a3d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009fc8:	e08c      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fce:	e089      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009fd0:	4b14      	ldr	r3, [pc, #80]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0304 	and.w	r3, r3, #4
 8009fd8:	2b04      	cmp	r3, #4
 8009fda:	d109      	bne.n	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009fdc:	4b11      	ldr	r3, [pc, #68]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	08db      	lsrs	r3, r3, #3
 8009fe2:	f003 0303 	and.w	r3, r3, #3
 8009fe6:	4a10      	ldr	r2, [pc, #64]	; (800a028 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8009fec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009fee:	e079      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ff4:	e076      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009ff6:	4b0b      	ldr	r3, [pc, #44]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a002:	d102      	bne.n	800a00a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 800a004:	4b09      	ldr	r3, [pc, #36]	; (800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a006:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a008:	e06c      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a00e:	e069      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a010:	4b04      	ldr	r3, [pc, #16]	; (800a024 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a01c:	d10a      	bne.n	800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 800a01e:	4b04      	ldr	r3, [pc, #16]	; (800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800a020:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a022:	e05f      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800a024:	58024400 	.word	0x58024400
 800a028:	03d09000 	.word	0x03d09000
 800a02c:	003d0900 	.word	0x003d0900
 800a030:	007a1200 	.word	0x007a1200
          frequency = 0;
 800a034:	2300      	movs	r3, #0
 800a036:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a038:	e054      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a03a:	4b2d      	ldr	r3, [pc, #180]	; (800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800a03c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a03e:	e051      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a040:	2300      	movs	r3, #0
 800a042:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a044:	e04e      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a04c:	d148      	bne.n	800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a04e:	4b29      	ldr	r3, [pc, #164]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800a050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a052:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a056:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a05e:	d02a      	beq.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a066:	d838      	bhi.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d004      	beq.n	800a078 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 800a06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a074:	d00d      	beq.n	800a092 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a076:	e030      	b.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a078:	4b1e      	ldr	r3, [pc, #120]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a084:	d102      	bne.n	800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 800a086:	4b1c      	ldr	r3, [pc, #112]	; (800a0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 800a088:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a08a:	e02b      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800a08c:	2300      	movs	r3, #0
 800a08e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a090:	e028      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a092:	4b18      	ldr	r3, [pc, #96]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a09a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a09e:	d107      	bne.n	800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f000 fae7 	bl	800a678 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a0ae:	e019      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0b4:	e016      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0b6:	4b0f      	ldr	r3, [pc, #60]	; (800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0c2:	d107      	bne.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0c4:	f107 0318 	add.w	r3, r7, #24
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 f82d 	bl	800a128 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a0d2:	e007      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0d8:	e004      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a0de:	e001      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3740      	adds	r7, #64	; 0x40
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	00bb8000 	.word	0x00bb8000
 800a0f4:	58024400 	.word	0x58024400
 800a0f8:	007a1200 	.word	0x007a1200

0800a0fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800a100:	f7fe fc66 	bl	80089d0 <HAL_RCC_GetHCLKFreq>
 800a104:	4602      	mov	r2, r0
 800a106:	4b06      	ldr	r3, [pc, #24]	; (800a120 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a108:	6a1b      	ldr	r3, [r3, #32]
 800a10a:	091b      	lsrs	r3, r3, #4
 800a10c:	f003 0307 	and.w	r3, r3, #7
 800a110:	4904      	ldr	r1, [pc, #16]	; (800a124 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a112:	5ccb      	ldrb	r3, [r1, r3]
 800a114:	f003 031f 	and.w	r3, r3, #31
 800a118:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	58024400 	.word	0x58024400
 800a124:	0800d1d0 	.word	0x0800d1d0

0800a128 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a128:	b480      	push	{r7}
 800a12a:	b089      	sub	sp, #36	; 0x24
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a130:	4ba1      	ldr	r3, [pc, #644]	; (800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a134:	f003 0303 	and.w	r3, r3, #3
 800a138:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a13a:	4b9f      	ldr	r3, [pc, #636]	; (800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a13e:	0b1b      	lsrs	r3, r3, #12
 800a140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a144:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a146:	4b9c      	ldr	r3, [pc, #624]	; (800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14a:	091b      	lsrs	r3, r3, #4
 800a14c:	f003 0301 	and.w	r3, r3, #1
 800a150:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a152:	4b99      	ldr	r3, [pc, #612]	; (800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a156:	08db      	lsrs	r3, r3, #3
 800a158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	fb02 f303 	mul.w	r3, r2, r3
 800a162:	ee07 3a90 	vmov	s15, r3
 800a166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a16a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2b00      	cmp	r3, #0
 800a172:	f000 8111 	beq.w	800a398 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	2b02      	cmp	r3, #2
 800a17a:	f000 8083 	beq.w	800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	2b02      	cmp	r3, #2
 800a182:	f200 80a1 	bhi.w	800a2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d003      	beq.n	800a194 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d056      	beq.n	800a240 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a192:	e099      	b.n	800a2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a194:	4b88      	ldr	r3, [pc, #544]	; (800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 0320 	and.w	r3, r3, #32
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d02d      	beq.n	800a1fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a1a0:	4b85      	ldr	r3, [pc, #532]	; (800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	08db      	lsrs	r3, r3, #3
 800a1a6:	f003 0303 	and.w	r3, r3, #3
 800a1aa:	4a84      	ldr	r2, [pc, #528]	; (800a3bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a1ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a1b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	ee07 3a90 	vmov	s15, r3
 800a1b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	ee07 3a90 	vmov	s15, r3
 800a1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ca:	4b7b      	ldr	r3, [pc, #492]	; (800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1de:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a1fa:	e087      	b.n	800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	ee07 3a90 	vmov	s15, r3
 800a202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a206:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a20e:	4b6a      	ldr	r3, [pc, #424]	; (800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a216:	ee07 3a90 	vmov	s15, r3
 800a21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a222:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a22e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a23a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a23e:	e065      	b.n	800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	ee07 3a90 	vmov	s15, r3
 800a246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a24a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a252:	4b59      	ldr	r3, [pc, #356]	; (800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25a:	ee07 3a90 	vmov	s15, r3
 800a25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a262:	ed97 6a03 	vldr	s12, [r7, #12]
 800a266:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a27e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a282:	e043      	b.n	800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	ee07 3a90 	vmov	s15, r3
 800a28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a28e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a3cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a296:	4b48      	ldr	r3, [pc, #288]	; (800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a29e:	ee07 3a90 	vmov	s15, r3
 800a2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2c6:	e021      	b.n	800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	ee07 3a90 	vmov	s15, r3
 800a2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2da:	4b37      	ldr	r3, [pc, #220]	; (800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e2:	ee07 3a90 	vmov	s15, r3
 800a2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a3c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a302:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a30a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a30c:	4b2a      	ldr	r3, [pc, #168]	; (800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a310:	0a5b      	lsrs	r3, r3, #9
 800a312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a316:	ee07 3a90 	vmov	s15, r3
 800a31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a31e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a322:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a326:	edd7 6a07 	vldr	s13, [r7, #28]
 800a32a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a32e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a332:	ee17 2a90 	vmov	r2, s15
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a33a:	4b1f      	ldr	r3, [pc, #124]	; (800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33e:	0c1b      	lsrs	r3, r3, #16
 800a340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a344:	ee07 3a90 	vmov	s15, r3
 800a348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a34c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a350:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a354:	edd7 6a07 	vldr	s13, [r7, #28]
 800a358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a35c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a360:	ee17 2a90 	vmov	r2, s15
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a368:	4b13      	ldr	r3, [pc, #76]	; (800a3b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a36c:	0e1b      	lsrs	r3, r3, #24
 800a36e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a372:	ee07 3a90 	vmov	s15, r3
 800a376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a37a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a37e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a382:	edd7 6a07 	vldr	s13, [r7, #28]
 800a386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a38a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a38e:	ee17 2a90 	vmov	r2, s15
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a396:	e008      	b.n	800a3aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	609a      	str	r2, [r3, #8]
}
 800a3aa:	bf00      	nop
 800a3ac:	3724      	adds	r7, #36	; 0x24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	58024400 	.word	0x58024400
 800a3bc:	03d09000 	.word	0x03d09000
 800a3c0:	46000000 	.word	0x46000000
 800a3c4:	4c742400 	.word	0x4c742400
 800a3c8:	4a742400 	.word	0x4a742400
 800a3cc:	4af42400 	.word	0x4af42400

0800a3d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b089      	sub	sp, #36	; 0x24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a3d8:	4ba1      	ldr	r3, [pc, #644]	; (800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3dc:	f003 0303 	and.w	r3, r3, #3
 800a3e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a3e2:	4b9f      	ldr	r3, [pc, #636]	; (800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e6:	0d1b      	lsrs	r3, r3, #20
 800a3e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a3ee:	4b9c      	ldr	r3, [pc, #624]	; (800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f2:	0a1b      	lsrs	r3, r3, #8
 800a3f4:	f003 0301 	and.w	r3, r3, #1
 800a3f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a3fa:	4b99      	ldr	r3, [pc, #612]	; (800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3fe:	08db      	lsrs	r3, r3, #3
 800a400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a404:	693a      	ldr	r2, [r7, #16]
 800a406:	fb02 f303 	mul.w	r3, r2, r3
 800a40a:	ee07 3a90 	vmov	s15, r3
 800a40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a412:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f000 8111 	beq.w	800a640 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	2b02      	cmp	r3, #2
 800a422:	f000 8083 	beq.w	800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	2b02      	cmp	r3, #2
 800a42a:	f200 80a1 	bhi.w	800a570 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d003      	beq.n	800a43c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	2b01      	cmp	r3, #1
 800a438:	d056      	beq.n	800a4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a43a:	e099      	b.n	800a570 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a43c:	4b88      	ldr	r3, [pc, #544]	; (800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 0320 	and.w	r3, r3, #32
 800a444:	2b00      	cmp	r3, #0
 800a446:	d02d      	beq.n	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a448:	4b85      	ldr	r3, [pc, #532]	; (800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	08db      	lsrs	r3, r3, #3
 800a44e:	f003 0303 	and.w	r3, r3, #3
 800a452:	4a84      	ldr	r2, [pc, #528]	; (800a664 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a454:	fa22 f303 	lsr.w	r3, r2, r3
 800a458:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	ee07 3a90 	vmov	s15, r3
 800a460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	ee07 3a90 	vmov	s15, r3
 800a46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a472:	4b7b      	ldr	r3, [pc, #492]	; (800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a482:	ed97 6a03 	vldr	s12, [r7, #12]
 800a486:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a48a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a48e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a49e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a4a2:	e087      	b.n	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	ee07 3a90 	vmov	s15, r3
 800a4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a66c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a4b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4b6:	4b6a      	ldr	r3, [pc, #424]	; (800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4be:	ee07 3a90 	vmov	s15, r3
 800a4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4e6:	e065      	b.n	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	ee07 3a90 	vmov	s15, r3
 800a4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a670 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a4f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4fa:	4b59      	ldr	r3, [pc, #356]	; (800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a502:	ee07 3a90 	vmov	s15, r3
 800a506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a50a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a50e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a51a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a51e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a522:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a526:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a52a:	e043      	b.n	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	ee07 3a90 	vmov	s15, r3
 800a532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a536:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a674 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a53a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a53e:	4b48      	ldr	r3, [pc, #288]	; (800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a546:	ee07 3a90 	vmov	s15, r3
 800a54a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a54e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a552:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a55a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a55e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a56e:	e021      	b.n	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	ee07 3a90 	vmov	s15, r3
 800a576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a670 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a57e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a582:	4b37      	ldr	r3, [pc, #220]	; (800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a58a:	ee07 3a90 	vmov	s15, r3
 800a58e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a592:	ed97 6a03 	vldr	s12, [r7, #12]
 800a596:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a668 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a59a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a59e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a5b4:	4b2a      	ldr	r3, [pc, #168]	; (800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b8:	0a5b      	lsrs	r3, r3, #9
 800a5ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5be:	ee07 3a90 	vmov	s15, r3
 800a5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5da:	ee17 2a90 	vmov	r2, s15
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a5e2:	4b1f      	ldr	r3, [pc, #124]	; (800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e6:	0c1b      	lsrs	r3, r3, #16
 800a5e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5ec:	ee07 3a90 	vmov	s15, r3
 800a5f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a5f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a600:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a608:	ee17 2a90 	vmov	r2, s15
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a610:	4b13      	ldr	r3, [pc, #76]	; (800a660 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a614:	0e1b      	lsrs	r3, r3, #24
 800a616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a61a:	ee07 3a90 	vmov	s15, r3
 800a61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a62a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a62e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a636:	ee17 2a90 	vmov	r2, s15
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a63e:	e008      	b.n	800a652 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	609a      	str	r2, [r3, #8]
}
 800a652:	bf00      	nop
 800a654:	3724      	adds	r7, #36	; 0x24
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	58024400 	.word	0x58024400
 800a664:	03d09000 	.word	0x03d09000
 800a668:	46000000 	.word	0x46000000
 800a66c:	4c742400 	.word	0x4c742400
 800a670:	4a742400 	.word	0x4a742400
 800a674:	4af42400 	.word	0x4af42400

0800a678 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a678:	b480      	push	{r7}
 800a67a:	b089      	sub	sp, #36	; 0x24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a680:	4ba0      	ldr	r3, [pc, #640]	; (800a904 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a684:	f003 0303 	and.w	r3, r3, #3
 800a688:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a68a:	4b9e      	ldr	r3, [pc, #632]	; (800a904 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68e:	091b      	lsrs	r3, r3, #4
 800a690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a694:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a696:	4b9b      	ldr	r3, [pc, #620]	; (800a904 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69a:	f003 0301 	and.w	r3, r3, #1
 800a69e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a6a0:	4b98      	ldr	r3, [pc, #608]	; (800a904 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a4:	08db      	lsrs	r3, r3, #3
 800a6a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6aa:	693a      	ldr	r2, [r7, #16]
 800a6ac:	fb02 f303 	mul.w	r3, r2, r3
 800a6b0:	ee07 3a90 	vmov	s15, r3
 800a6b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f000 8111 	beq.w	800a8e6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	f000 8083 	beq.w	800a7d2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	f200 80a1 	bhi.w	800a816 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d056      	beq.n	800a78e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a6e0:	e099      	b.n	800a816 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6e2:	4b88      	ldr	r3, [pc, #544]	; (800a904 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 0320 	and.w	r3, r3, #32
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d02d      	beq.n	800a74a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a6ee:	4b85      	ldr	r3, [pc, #532]	; (800a904 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	08db      	lsrs	r3, r3, #3
 800a6f4:	f003 0303 	and.w	r3, r3, #3
 800a6f8:	4a83      	ldr	r2, [pc, #524]	; (800a908 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a6fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a6fe:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	ee07 3a90 	vmov	s15, r3
 800a706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	ee07 3a90 	vmov	s15, r3
 800a710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a718:	4b7a      	ldr	r3, [pc, #488]	; (800a904 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a720:	ee07 3a90 	vmov	s15, r3
 800a724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a728:	ed97 6a03 	vldr	s12, [r7, #12]
 800a72c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a738:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a73c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a740:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a744:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a748:	e087      	b.n	800a85a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	ee07 3a90 	vmov	s15, r3
 800a750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a754:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a910 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a75c:	4b69      	ldr	r3, [pc, #420]	; (800a904 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a764:	ee07 3a90 	vmov	s15, r3
 800a768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a76c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a770:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a774:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a77c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a784:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a788:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a78c:	e065      	b.n	800a85a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	ee07 3a90 	vmov	s15, r3
 800a794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a798:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a914 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a79c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7a0:	4b58      	ldr	r3, [pc, #352]	; (800a904 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7a8:	ee07 3a90 	vmov	s15, r3
 800a7ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7d0:	e043      	b.n	800a85a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	ee07 3a90 	vmov	s15, r3
 800a7d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a918 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a7e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7e4:	4b47      	ldr	r3, [pc, #284]	; (800a904 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ec:	ee07 3a90 	vmov	s15, r3
 800a7f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a800:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a804:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a808:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a80c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a810:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a814:	e021      	b.n	800a85a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	ee07 3a90 	vmov	s15, r3
 800a81c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a820:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a910 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a824:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a828:	4b36      	ldr	r3, [pc, #216]	; (800a904 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a830:	ee07 3a90 	vmov	s15, r3
 800a834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a838:	ed97 6a03 	vldr	s12, [r7, #12]
 800a83c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a90c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a840:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a844:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a848:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a84c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a850:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a854:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a858:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a85a:	4b2a      	ldr	r3, [pc, #168]	; (800a904 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85e:	0a5b      	lsrs	r3, r3, #9
 800a860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a864:	ee07 3a90 	vmov	s15, r3
 800a868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a86c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a870:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a874:	edd7 6a07 	vldr	s13, [r7, #28]
 800a878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a87c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a880:	ee17 2a90 	vmov	r2, s15
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a888:	4b1e      	ldr	r3, [pc, #120]	; (800a904 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a88a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88c:	0c1b      	lsrs	r3, r3, #16
 800a88e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a892:	ee07 3a90 	vmov	s15, r3
 800a896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a89a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a89e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8ae:	ee17 2a90 	vmov	r2, s15
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a8b6:	4b13      	ldr	r3, [pc, #76]	; (800a904 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ba:	0e1b      	lsrs	r3, r3, #24
 800a8bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8c0:	ee07 3a90 	vmov	s15, r3
 800a8c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8dc:	ee17 2a90 	vmov	r2, s15
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a8e4:	e008      	b.n	800a8f8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	609a      	str	r2, [r3, #8]
}
 800a8f8:	bf00      	nop
 800a8fa:	3724      	adds	r7, #36	; 0x24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	58024400 	.word	0x58024400
 800a908:	03d09000 	.word	0x03d09000
 800a90c:	46000000 	.word	0x46000000
 800a910:	4c742400 	.word	0x4c742400
 800a914:	4a742400 	.word	0x4a742400
 800a918:	4af42400 	.word	0x4af42400

0800a91c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a926:	2300      	movs	r3, #0
 800a928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a92a:	4b53      	ldr	r3, [pc, #332]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92e:	f003 0303 	and.w	r3, r3, #3
 800a932:	2b03      	cmp	r3, #3
 800a934:	d101      	bne.n	800a93a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	e099      	b.n	800aa6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a93a:	4b4f      	ldr	r3, [pc, #316]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a4e      	ldr	r2, [pc, #312]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a940:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a944:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a946:	f7f8 fbb1 	bl	80030ac <HAL_GetTick>
 800a94a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a94c:	e008      	b.n	800a960 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a94e:	f7f8 fbad 	bl	80030ac <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d901      	bls.n	800a960 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e086      	b.n	800aa6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a960:	4b45      	ldr	r3, [pc, #276]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1f0      	bne.n	800a94e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a96c:	4b42      	ldr	r3, [pc, #264]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a970:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	031b      	lsls	r3, r3, #12
 800a97a:	493f      	ldr	r1, [pc, #252]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a97c:	4313      	orrs	r3, r2
 800a97e:	628b      	str	r3, [r1, #40]	; 0x28
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	3b01      	subs	r3, #1
 800a986:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	3b01      	subs	r3, #1
 800a990:	025b      	lsls	r3, r3, #9
 800a992:	b29b      	uxth	r3, r3
 800a994:	431a      	orrs	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	041b      	lsls	r3, r3, #16
 800a99e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a9a2:	431a      	orrs	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	061b      	lsls	r3, r3, #24
 800a9ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a9b0:	4931      	ldr	r1, [pc, #196]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a9b6:	4b30      	ldr	r3, [pc, #192]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	492d      	ldr	r1, [pc, #180]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a9c8:	4b2b      	ldr	r3, [pc, #172]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9cc:	f023 0220 	bic.w	r2, r3, #32
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	4928      	ldr	r1, [pc, #160]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a9da:	4b27      	ldr	r3, [pc, #156]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a9dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9de:	4a26      	ldr	r2, [pc, #152]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a9e0:	f023 0310 	bic.w	r3, r3, #16
 800a9e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a9e6:	4b24      	ldr	r3, [pc, #144]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a9e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9ea:	4b24      	ldr	r3, [pc, #144]	; (800aa7c <RCCEx_PLL2_Config+0x160>)
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	69d2      	ldr	r2, [r2, #28]
 800a9f2:	00d2      	lsls	r2, r2, #3
 800a9f4:	4920      	ldr	r1, [pc, #128]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a9fa:	4b1f      	ldr	r3, [pc, #124]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800a9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fe:	4a1e      	ldr	r2, [pc, #120]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800aa00:	f043 0310 	orr.w	r3, r3, #16
 800aa04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d106      	bne.n	800aa1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aa0c:	4b1a      	ldr	r3, [pc, #104]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800aa0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa10:	4a19      	ldr	r2, [pc, #100]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800aa12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa16:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa18:	e00f      	b.n	800aa3a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	d106      	bne.n	800aa2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aa20:	4b15      	ldr	r3, [pc, #84]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800aa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa24:	4a14      	ldr	r2, [pc, #80]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800aa26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800aa2c:	e005      	b.n	800aa3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800aa2e:	4b12      	ldr	r3, [pc, #72]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800aa30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa32:	4a11      	ldr	r2, [pc, #68]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800aa34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800aa3a:	4b0f      	ldr	r3, [pc, #60]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a0e      	ldr	r2, [pc, #56]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800aa40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aa44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa46:	f7f8 fb31 	bl	80030ac <HAL_GetTick>
 800aa4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aa4c:	e008      	b.n	800aa60 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aa4e:	f7f8 fb2d 	bl	80030ac <HAL_GetTick>
 800aa52:	4602      	mov	r2, r0
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d901      	bls.n	800aa60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e006      	b.n	800aa6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aa60:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <RCCEx_PLL2_Config+0x15c>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d0f0      	beq.n	800aa4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800aa6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	58024400 	.word	0x58024400
 800aa7c:	ffff0007 	.word	0xffff0007

0800aa80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa8e:	4b53      	ldr	r3, [pc, #332]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800aa90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa92:	f003 0303 	and.w	r3, r3, #3
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	d101      	bne.n	800aa9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e099      	b.n	800abd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800aa9e:	4b4f      	ldr	r3, [pc, #316]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a4e      	ldr	r2, [pc, #312]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800aaa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aaa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aaaa:	f7f8 faff 	bl	80030ac <HAL_GetTick>
 800aaae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aab0:	e008      	b.n	800aac4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800aab2:	f7f8 fafb 	bl	80030ac <HAL_GetTick>
 800aab6:	4602      	mov	r2, r0
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	1ad3      	subs	r3, r2, r3
 800aabc:	2b02      	cmp	r3, #2
 800aabe:	d901      	bls.n	800aac4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aac0:	2303      	movs	r3, #3
 800aac2:	e086      	b.n	800abd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aac4:	4b45      	ldr	r3, [pc, #276]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d1f0      	bne.n	800aab2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aad0:	4b42      	ldr	r3, [pc, #264]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800aad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	051b      	lsls	r3, r3, #20
 800aade:	493f      	ldr	r1, [pc, #252]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800aae0:	4313      	orrs	r3, r2
 800aae2:	628b      	str	r3, [r1, #40]	; 0x28
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	025b      	lsls	r3, r3, #9
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	431a      	orrs	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	3b01      	subs	r3, #1
 800ab00:	041b      	lsls	r3, r3, #16
 800ab02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ab06:	431a      	orrs	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	061b      	lsls	r3, r3, #24
 800ab10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ab14:	4931      	ldr	r1, [pc, #196]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab16:	4313      	orrs	r3, r2
 800ab18:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ab1a:	4b30      	ldr	r3, [pc, #192]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	695b      	ldr	r3, [r3, #20]
 800ab26:	492d      	ldr	r1, [pc, #180]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ab2c:	4b2b      	ldr	r3, [pc, #172]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	4928      	ldr	r1, [pc, #160]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ab3e:	4b27      	ldr	r3, [pc, #156]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab42:	4a26      	ldr	r2, [pc, #152]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ab4a:	4b24      	ldr	r3, [pc, #144]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab4e:	4b24      	ldr	r3, [pc, #144]	; (800abe0 <RCCEx_PLL3_Config+0x160>)
 800ab50:	4013      	ands	r3, r2
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	69d2      	ldr	r2, [r2, #28]
 800ab56:	00d2      	lsls	r2, r2, #3
 800ab58:	4920      	ldr	r1, [pc, #128]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ab5e:	4b1f      	ldr	r3, [pc, #124]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab62:	4a1e      	ldr	r2, [pc, #120]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d106      	bne.n	800ab7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ab70:	4b1a      	ldr	r3, [pc, #104]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	4a19      	ldr	r2, [pc, #100]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ab7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab7c:	e00f      	b.n	800ab9e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d106      	bne.n	800ab92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ab84:	4b15      	ldr	r3, [pc, #84]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab88:	4a14      	ldr	r2, [pc, #80]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ab8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ab90:	e005      	b.n	800ab9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ab92:	4b12      	ldr	r3, [pc, #72]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab96:	4a11      	ldr	r2, [pc, #68]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800ab98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ab9e:	4b0f      	ldr	r3, [pc, #60]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a0e      	ldr	r2, [pc, #56]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800aba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abaa:	f7f8 fa7f 	bl	80030ac <HAL_GetTick>
 800abae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800abb0:	e008      	b.n	800abc4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800abb2:	f7f8 fa7b 	bl	80030ac <HAL_GetTick>
 800abb6:	4602      	mov	r2, r0
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	2b02      	cmp	r3, #2
 800abbe:	d901      	bls.n	800abc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800abc0:	2303      	movs	r3, #3
 800abc2:	e006      	b.n	800abd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800abc4:	4b05      	ldr	r3, [pc, #20]	; (800abdc <RCCEx_PLL3_Config+0x15c>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d0f0      	beq.n	800abb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	58024400 	.word	0x58024400
 800abe0:	ffff0007 	.word	0xffff0007

0800abe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	e049      	b.n	800ac8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d106      	bne.n	800ac10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f7f8 f824 	bl	8002c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2202      	movs	r2, #2
 800ac14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3304      	adds	r3, #4
 800ac20:	4619      	mov	r1, r3
 800ac22:	4610      	mov	r0, r2
 800ac24:	f000 fcb2 	bl	800b58c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
	...

0800ac94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d001      	beq.n	800acac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	e04c      	b.n	800ad46 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2202      	movs	r2, #2
 800acb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a26      	ldr	r2, [pc, #152]	; (800ad54 <HAL_TIM_Base_Start+0xc0>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d022      	beq.n	800ad04 <HAL_TIM_Base_Start+0x70>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acc6:	d01d      	beq.n	800ad04 <HAL_TIM_Base_Start+0x70>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a22      	ldr	r2, [pc, #136]	; (800ad58 <HAL_TIM_Base_Start+0xc4>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d018      	beq.n	800ad04 <HAL_TIM_Base_Start+0x70>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a21      	ldr	r2, [pc, #132]	; (800ad5c <HAL_TIM_Base_Start+0xc8>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d013      	beq.n	800ad04 <HAL_TIM_Base_Start+0x70>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a1f      	ldr	r2, [pc, #124]	; (800ad60 <HAL_TIM_Base_Start+0xcc>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d00e      	beq.n	800ad04 <HAL_TIM_Base_Start+0x70>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a1e      	ldr	r2, [pc, #120]	; (800ad64 <HAL_TIM_Base_Start+0xd0>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d009      	beq.n	800ad04 <HAL_TIM_Base_Start+0x70>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a1c      	ldr	r2, [pc, #112]	; (800ad68 <HAL_TIM_Base_Start+0xd4>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d004      	beq.n	800ad04 <HAL_TIM_Base_Start+0x70>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a1b      	ldr	r2, [pc, #108]	; (800ad6c <HAL_TIM_Base_Start+0xd8>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d115      	bne.n	800ad30 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	689a      	ldr	r2, [r3, #8]
 800ad0a:	4b19      	ldr	r3, [pc, #100]	; (800ad70 <HAL_TIM_Base_Start+0xdc>)
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2b06      	cmp	r3, #6
 800ad14:	d015      	beq.n	800ad42 <HAL_TIM_Base_Start+0xae>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad1c:	d011      	beq.n	800ad42 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f042 0201 	orr.w	r2, r2, #1
 800ad2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad2e:	e008      	b.n	800ad42 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f042 0201 	orr.w	r2, r2, #1
 800ad3e:	601a      	str	r2, [r3, #0]
 800ad40:	e000      	b.n	800ad44 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3714      	adds	r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	40010000 	.word	0x40010000
 800ad58:	40000400 	.word	0x40000400
 800ad5c:	40000800 	.word	0x40000800
 800ad60:	40000c00 	.word	0x40000c00
 800ad64:	40010400 	.word	0x40010400
 800ad68:	40001800 	.word	0x40001800
 800ad6c:	40014000 	.word	0x40014000
 800ad70:	00010007 	.word	0x00010007

0800ad74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d001      	beq.n	800ad8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e054      	b.n	800ae36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2202      	movs	r2, #2
 800ad90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68da      	ldr	r2, [r3, #12]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f042 0201 	orr.w	r2, r2, #1
 800ada2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a26      	ldr	r2, [pc, #152]	; (800ae44 <HAL_TIM_Base_Start_IT+0xd0>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d022      	beq.n	800adf4 <HAL_TIM_Base_Start_IT+0x80>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adb6:	d01d      	beq.n	800adf4 <HAL_TIM_Base_Start_IT+0x80>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a22      	ldr	r2, [pc, #136]	; (800ae48 <HAL_TIM_Base_Start_IT+0xd4>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d018      	beq.n	800adf4 <HAL_TIM_Base_Start_IT+0x80>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a21      	ldr	r2, [pc, #132]	; (800ae4c <HAL_TIM_Base_Start_IT+0xd8>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d013      	beq.n	800adf4 <HAL_TIM_Base_Start_IT+0x80>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a1f      	ldr	r2, [pc, #124]	; (800ae50 <HAL_TIM_Base_Start_IT+0xdc>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d00e      	beq.n	800adf4 <HAL_TIM_Base_Start_IT+0x80>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a1e      	ldr	r2, [pc, #120]	; (800ae54 <HAL_TIM_Base_Start_IT+0xe0>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d009      	beq.n	800adf4 <HAL_TIM_Base_Start_IT+0x80>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a1c      	ldr	r2, [pc, #112]	; (800ae58 <HAL_TIM_Base_Start_IT+0xe4>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d004      	beq.n	800adf4 <HAL_TIM_Base_Start_IT+0x80>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a1b      	ldr	r2, [pc, #108]	; (800ae5c <HAL_TIM_Base_Start_IT+0xe8>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d115      	bne.n	800ae20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	689a      	ldr	r2, [r3, #8]
 800adfa:	4b19      	ldr	r3, [pc, #100]	; (800ae60 <HAL_TIM_Base_Start_IT+0xec>)
 800adfc:	4013      	ands	r3, r2
 800adfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b06      	cmp	r3, #6
 800ae04:	d015      	beq.n	800ae32 <HAL_TIM_Base_Start_IT+0xbe>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae0c:	d011      	beq.n	800ae32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f042 0201 	orr.w	r2, r2, #1
 800ae1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae1e:	e008      	b.n	800ae32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f042 0201 	orr.w	r2, r2, #1
 800ae2e:	601a      	str	r2, [r3, #0]
 800ae30:	e000      	b.n	800ae34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3714      	adds	r7, #20
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	40010000 	.word	0x40010000
 800ae48:	40000400 	.word	0x40000400
 800ae4c:	40000800 	.word	0x40000800
 800ae50:	40000c00 	.word	0x40000c00
 800ae54:	40010400 	.word	0x40010400
 800ae58:	40001800 	.word	0x40001800
 800ae5c:	40014000 	.word	0x40014000
 800ae60:	00010007 	.word	0x00010007

0800ae64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	e08f      	b.n	800af98 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d106      	bne.n	800ae92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7f7 ff39 	bl	8002d04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2202      	movs	r2, #2
 800ae96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	6899      	ldr	r1, [r3, #8]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	4b3e      	ldr	r3, [pc, #248]	; (800afa0 <HAL_TIM_Encoder_Init+0x13c>)
 800aea6:	400b      	ands	r3, r1
 800aea8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	f000 fb69 	bl	800b58c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	6a1b      	ldr	r3, [r3, #32]
 800aed0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800aedc:	693a      	ldr	r2, [r7, #16]
 800aede:	4b31      	ldr	r3, [pc, #196]	; (800afa4 <HAL_TIM_Encoder_Init+0x140>)
 800aee0:	4013      	ands	r3, r2
 800aee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	699b      	ldr	r3, [r3, #24]
 800aeec:	021b      	lsls	r3, r3, #8
 800aeee:	4313      	orrs	r3, r2
 800aef0:	693a      	ldr	r2, [r7, #16]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	4b2b      	ldr	r3, [pc, #172]	; (800afa8 <HAL_TIM_Encoder_Init+0x144>)
 800aefa:	4013      	ands	r3, r2
 800aefc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	4b2a      	ldr	r3, [pc, #168]	; (800afac <HAL_TIM_Encoder_Init+0x148>)
 800af02:	4013      	ands	r3, r2
 800af04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	68da      	ldr	r2, [r3, #12]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	021b      	lsls	r3, r3, #8
 800af10:	4313      	orrs	r3, r2
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	4313      	orrs	r3, r2
 800af16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	011a      	lsls	r2, r3, #4
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	031b      	lsls	r3, r3, #12
 800af24:	4313      	orrs	r3, r2
 800af26:	693a      	ldr	r2, [r7, #16]
 800af28:	4313      	orrs	r3, r2
 800af2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800af32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800af3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	685a      	ldr	r2, [r3, #4]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	695b      	ldr	r3, [r3, #20]
 800af44:	011b      	lsls	r3, r3, #4
 800af46:	4313      	orrs	r3, r2
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	697a      	ldr	r2, [r7, #20]
 800af54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	693a      	ldr	r2, [r7, #16]
 800af5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2201      	movs	r2, #1
 800af7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2201      	movs	r2, #1
 800af92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3718      	adds	r7, #24
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	fffebff8 	.word	0xfffebff8
 800afa4:	fffffcfc 	.word	0xfffffcfc
 800afa8:	fffff3f3 	.word	0xfffff3f3
 800afac:	ffff0f0f 	.word	0xffff0f0f

0800afb0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800afc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d110      	bne.n	800b002 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d102      	bne.n	800afec <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800afe6:	7b7b      	ldrb	r3, [r7, #13]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d001      	beq.n	800aff0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e089      	b.n	800b104 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2202      	movs	r2, #2
 800aff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2202      	movs	r2, #2
 800affc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b000:	e031      	b.n	800b066 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2b04      	cmp	r3, #4
 800b006:	d110      	bne.n	800b02a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b008:	7bbb      	ldrb	r3, [r7, #14]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d102      	bne.n	800b014 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b00e:	7b3b      	ldrb	r3, [r7, #12]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d001      	beq.n	800b018 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e075      	b.n	800b104 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2202      	movs	r2, #2
 800b01c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2202      	movs	r2, #2
 800b024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b028:	e01d      	b.n	800b066 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d108      	bne.n	800b042 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d105      	bne.n	800b042 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b036:	7b7b      	ldrb	r3, [r7, #13]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d102      	bne.n	800b042 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b03c:	7b3b      	ldrb	r3, [r7, #12]
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d001      	beq.n	800b046 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e05e      	b.n	800b104 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2202      	movs	r2, #2
 800b04a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2202      	movs	r2, #2
 800b052:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2202      	movs	r2, #2
 800b05a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2202      	movs	r2, #2
 800b062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d003      	beq.n	800b074 <HAL_TIM_Encoder_Start_IT+0xc4>
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	2b04      	cmp	r3, #4
 800b070:	d010      	beq.n	800b094 <HAL_TIM_Encoder_Start_IT+0xe4>
 800b072:	e01f      	b.n	800b0b4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2201      	movs	r2, #1
 800b07a:	2100      	movs	r1, #0
 800b07c:	4618      	mov	r0, r3
 800b07e:	f000 fbbd 	bl	800b7fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68da      	ldr	r2, [r3, #12]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f042 0202 	orr.w	r2, r2, #2
 800b090:	60da      	str	r2, [r3, #12]
      break;
 800b092:	e02e      	b.n	800b0f2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2201      	movs	r2, #1
 800b09a:	2104      	movs	r1, #4
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 fbad 	bl	800b7fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68da      	ldr	r2, [r3, #12]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f042 0204 	orr.w	r2, r2, #4
 800b0b0:	60da      	str	r2, [r3, #12]
      break;
 800b0b2:	e01e      	b.n	800b0f2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 fb9d 	bl	800b7fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	2104      	movs	r1, #4
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 fb96 	bl	800b7fc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	68da      	ldr	r2, [r3, #12]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f042 0202 	orr.w	r2, r2, #2
 800b0de:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	68da      	ldr	r2, [r3, #12]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f042 0204 	orr.w	r2, r2, #4
 800b0ee:	60da      	str	r2, [r3, #12]
      break;
 800b0f0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f042 0201 	orr.w	r2, r2, #1
 800b100:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3710      	adds	r7, #16
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	f003 0302 	and.w	r3, r3, #2
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d122      	bne.n	800b168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	f003 0302 	and.w	r3, r3, #2
 800b12c:	2b02      	cmp	r3, #2
 800b12e:	d11b      	bne.n	800b168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f06f 0202 	mvn.w	r2, #2
 800b138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2201      	movs	r2, #1
 800b13e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	699b      	ldr	r3, [r3, #24]
 800b146:	f003 0303 	and.w	r3, r3, #3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d003      	beq.n	800b156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 f9fe 	bl	800b550 <HAL_TIM_IC_CaptureCallback>
 800b154:	e005      	b.n	800b162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f9f0 	bl	800b53c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 fa01 	bl	800b564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	f003 0304 	and.w	r3, r3, #4
 800b172:	2b04      	cmp	r3, #4
 800b174:	d122      	bne.n	800b1bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	f003 0304 	and.w	r3, r3, #4
 800b180:	2b04      	cmp	r3, #4
 800b182:	d11b      	bne.n	800b1bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f06f 0204 	mvn.w	r2, #4
 800b18c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2202      	movs	r2, #2
 800b192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d003      	beq.n	800b1aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f9d4 	bl	800b550 <HAL_TIM_IC_CaptureCallback>
 800b1a8:	e005      	b.n	800b1b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f9c6 	bl	800b53c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 f9d7 	bl	800b564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	f003 0308 	and.w	r3, r3, #8
 800b1c6:	2b08      	cmp	r3, #8
 800b1c8:	d122      	bne.n	800b210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	f003 0308 	and.w	r3, r3, #8
 800b1d4:	2b08      	cmp	r3, #8
 800b1d6:	d11b      	bne.n	800b210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f06f 0208 	mvn.w	r2, #8
 800b1e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2204      	movs	r2, #4
 800b1e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	69db      	ldr	r3, [r3, #28]
 800b1ee:	f003 0303 	and.w	r3, r3, #3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d003      	beq.n	800b1fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f9aa 	bl	800b550 <HAL_TIM_IC_CaptureCallback>
 800b1fc:	e005      	b.n	800b20a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f99c 	bl	800b53c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 f9ad 	bl	800b564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	f003 0310 	and.w	r3, r3, #16
 800b21a:	2b10      	cmp	r3, #16
 800b21c:	d122      	bne.n	800b264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f003 0310 	and.w	r3, r3, #16
 800b228:	2b10      	cmp	r3, #16
 800b22a:	d11b      	bne.n	800b264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f06f 0210 	mvn.w	r2, #16
 800b234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2208      	movs	r2, #8
 800b23a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	69db      	ldr	r3, [r3, #28]
 800b242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b246:	2b00      	cmp	r3, #0
 800b248:	d003      	beq.n	800b252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f980 	bl	800b550 <HAL_TIM_IC_CaptureCallback>
 800b250:	e005      	b.n	800b25e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f972 	bl	800b53c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f983 	bl	800b564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d10e      	bne.n	800b290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f003 0301 	and.w	r3, r3, #1
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d107      	bne.n	800b290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f06f 0201 	mvn.w	r2, #1
 800b288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f7f7 f8cc 	bl	8002428 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b29a:	2b80      	cmp	r3, #128	; 0x80
 800b29c:	d10e      	bne.n	800b2bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2a8:	2b80      	cmp	r3, #128	; 0x80
 800b2aa:	d107      	bne.n	800b2bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b2b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fb5e 	bl	800b978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ca:	d10e      	bne.n	800b2ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d6:	2b80      	cmp	r3, #128	; 0x80
 800b2d8:	d107      	bne.n	800b2ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b2e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 fb51 	bl	800b98c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f4:	2b40      	cmp	r3, #64	; 0x40
 800b2f6:	d10e      	bne.n	800b316 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b302:	2b40      	cmp	r3, #64	; 0x40
 800b304:	d107      	bne.n	800b316 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b30e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 f931 	bl	800b578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	691b      	ldr	r3, [r3, #16]
 800b31c:	f003 0320 	and.w	r3, r3, #32
 800b320:	2b20      	cmp	r3, #32
 800b322:	d10e      	bne.n	800b342 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	f003 0320 	and.w	r3, r3, #32
 800b32e:	2b20      	cmp	r3, #32
 800b330:	d107      	bne.n	800b342 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f06f 0220 	mvn.w	r2, #32
 800b33a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 fb11 	bl	800b964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b342:	bf00      	nop
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
	...

0800b34c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b356:	2300      	movs	r3, #0
 800b358:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b360:	2b01      	cmp	r3, #1
 800b362:	d101      	bne.n	800b368 <HAL_TIM_ConfigClockSource+0x1c>
 800b364:	2302      	movs	r3, #2
 800b366:	e0dc      	b.n	800b522 <HAL_TIM_ConfigClockSource+0x1d6>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2202      	movs	r2, #2
 800b374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b380:	68ba      	ldr	r2, [r7, #8]
 800b382:	4b6a      	ldr	r3, [pc, #424]	; (800b52c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b384:	4013      	ands	r3, r2
 800b386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b38e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a64      	ldr	r2, [pc, #400]	; (800b530 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	f000 80a9 	beq.w	800b4f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3a4:	4a62      	ldr	r2, [pc, #392]	; (800b530 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	f200 80ae 	bhi.w	800b508 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3ac:	4a61      	ldr	r2, [pc, #388]	; (800b534 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	f000 80a1 	beq.w	800b4f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3b4:	4a5f      	ldr	r2, [pc, #380]	; (800b534 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	f200 80a6 	bhi.w	800b508 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3bc:	4a5e      	ldr	r2, [pc, #376]	; (800b538 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	f000 8099 	beq.w	800b4f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3c4:	4a5c      	ldr	r2, [pc, #368]	; (800b538 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	f200 809e 	bhi.w	800b508 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b3d0:	f000 8091 	beq.w	800b4f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b3d8:	f200 8096 	bhi.w	800b508 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3e0:	f000 8089 	beq.w	800b4f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3e8:	f200 808e 	bhi.w	800b508 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3f0:	d03e      	beq.n	800b470 <HAL_TIM_ConfigClockSource+0x124>
 800b3f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3f6:	f200 8087 	bhi.w	800b508 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3fe:	f000 8086 	beq.w	800b50e <HAL_TIM_ConfigClockSource+0x1c2>
 800b402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b406:	d87f      	bhi.n	800b508 <HAL_TIM_ConfigClockSource+0x1bc>
 800b408:	2b70      	cmp	r3, #112	; 0x70
 800b40a:	d01a      	beq.n	800b442 <HAL_TIM_ConfigClockSource+0xf6>
 800b40c:	2b70      	cmp	r3, #112	; 0x70
 800b40e:	d87b      	bhi.n	800b508 <HAL_TIM_ConfigClockSource+0x1bc>
 800b410:	2b60      	cmp	r3, #96	; 0x60
 800b412:	d050      	beq.n	800b4b6 <HAL_TIM_ConfigClockSource+0x16a>
 800b414:	2b60      	cmp	r3, #96	; 0x60
 800b416:	d877      	bhi.n	800b508 <HAL_TIM_ConfigClockSource+0x1bc>
 800b418:	2b50      	cmp	r3, #80	; 0x50
 800b41a:	d03c      	beq.n	800b496 <HAL_TIM_ConfigClockSource+0x14a>
 800b41c:	2b50      	cmp	r3, #80	; 0x50
 800b41e:	d873      	bhi.n	800b508 <HAL_TIM_ConfigClockSource+0x1bc>
 800b420:	2b40      	cmp	r3, #64	; 0x40
 800b422:	d058      	beq.n	800b4d6 <HAL_TIM_ConfigClockSource+0x18a>
 800b424:	2b40      	cmp	r3, #64	; 0x40
 800b426:	d86f      	bhi.n	800b508 <HAL_TIM_ConfigClockSource+0x1bc>
 800b428:	2b30      	cmp	r3, #48	; 0x30
 800b42a:	d064      	beq.n	800b4f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b42c:	2b30      	cmp	r3, #48	; 0x30
 800b42e:	d86b      	bhi.n	800b508 <HAL_TIM_ConfigClockSource+0x1bc>
 800b430:	2b20      	cmp	r3, #32
 800b432:	d060      	beq.n	800b4f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b434:	2b20      	cmp	r3, #32
 800b436:	d867      	bhi.n	800b508 <HAL_TIM_ConfigClockSource+0x1bc>
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d05c      	beq.n	800b4f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b43c:	2b10      	cmp	r3, #16
 800b43e:	d05a      	beq.n	800b4f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800b440:	e062      	b.n	800b508 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6818      	ldr	r0, [r3, #0]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	6899      	ldr	r1, [r3, #8]
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	685a      	ldr	r2, [r3, #4]
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	f000 f9b3 	bl	800b7bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b464:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	609a      	str	r2, [r3, #8]
      break;
 800b46e:	e04f      	b.n	800b510 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6818      	ldr	r0, [r3, #0]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	6899      	ldr	r1, [r3, #8]
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	685a      	ldr	r2, [r3, #4]
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	f000 f99c 	bl	800b7bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	689a      	ldr	r2, [r3, #8]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b492:	609a      	str	r2, [r3, #8]
      break;
 800b494:	e03c      	b.n	800b510 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6818      	ldr	r0, [r3, #0]
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	6859      	ldr	r1, [r3, #4]
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	68db      	ldr	r3, [r3, #12]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f000 f90c 	bl	800b6c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2150      	movs	r1, #80	; 0x50
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f000 f966 	bl	800b780 <TIM_ITRx_SetConfig>
      break;
 800b4b4:	e02c      	b.n	800b510 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6818      	ldr	r0, [r3, #0]
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	6859      	ldr	r1, [r3, #4]
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	f000 f92b 	bl	800b71e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2160      	movs	r1, #96	; 0x60
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f000 f956 	bl	800b780 <TIM_ITRx_SetConfig>
      break;
 800b4d4:	e01c      	b.n	800b510 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6818      	ldr	r0, [r3, #0]
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	6859      	ldr	r1, [r3, #4]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f000 f8ec 	bl	800b6c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2140      	movs	r1, #64	; 0x40
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 f946 	bl	800b780 <TIM_ITRx_SetConfig>
      break;
 800b4f4:	e00c      	b.n	800b510 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4619      	mov	r1, r3
 800b500:	4610      	mov	r0, r2
 800b502:	f000 f93d 	bl	800b780 <TIM_ITRx_SetConfig>
      break;
 800b506:	e003      	b.n	800b510 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b508:	2301      	movs	r3, #1
 800b50a:	73fb      	strb	r3, [r7, #15]
      break;
 800b50c:	e000      	b.n	800b510 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b50e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b520:	7bfb      	ldrb	r3, [r7, #15]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	ffceff88 	.word	0xffceff88
 800b530:	00100040 	.word	0x00100040
 800b534:	00100030 	.word	0x00100030
 800b538:	00100020 	.word	0x00100020

0800b53c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b544:	bf00      	nop
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b558:	bf00      	nop
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b56c:	bf00      	nop
 800b56e:	370c      	adds	r7, #12
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b580:	bf00      	nop
 800b582:	370c      	adds	r7, #12
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a40      	ldr	r2, [pc, #256]	; (800b6a0 <TIM_Base_SetConfig+0x114>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d013      	beq.n	800b5cc <TIM_Base_SetConfig+0x40>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5aa:	d00f      	beq.n	800b5cc <TIM_Base_SetConfig+0x40>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4a3d      	ldr	r2, [pc, #244]	; (800b6a4 <TIM_Base_SetConfig+0x118>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d00b      	beq.n	800b5cc <TIM_Base_SetConfig+0x40>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4a3c      	ldr	r2, [pc, #240]	; (800b6a8 <TIM_Base_SetConfig+0x11c>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d007      	beq.n	800b5cc <TIM_Base_SetConfig+0x40>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4a3b      	ldr	r2, [pc, #236]	; (800b6ac <TIM_Base_SetConfig+0x120>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d003      	beq.n	800b5cc <TIM_Base_SetConfig+0x40>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	4a3a      	ldr	r2, [pc, #232]	; (800b6b0 <TIM_Base_SetConfig+0x124>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d108      	bne.n	800b5de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a2f      	ldr	r2, [pc, #188]	; (800b6a0 <TIM_Base_SetConfig+0x114>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d01f      	beq.n	800b626 <TIM_Base_SetConfig+0x9a>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5ec:	d01b      	beq.n	800b626 <TIM_Base_SetConfig+0x9a>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a2c      	ldr	r2, [pc, #176]	; (800b6a4 <TIM_Base_SetConfig+0x118>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d017      	beq.n	800b626 <TIM_Base_SetConfig+0x9a>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	4a2b      	ldr	r2, [pc, #172]	; (800b6a8 <TIM_Base_SetConfig+0x11c>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d013      	beq.n	800b626 <TIM_Base_SetConfig+0x9a>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4a2a      	ldr	r2, [pc, #168]	; (800b6ac <TIM_Base_SetConfig+0x120>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d00f      	beq.n	800b626 <TIM_Base_SetConfig+0x9a>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4a29      	ldr	r2, [pc, #164]	; (800b6b0 <TIM_Base_SetConfig+0x124>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d00b      	beq.n	800b626 <TIM_Base_SetConfig+0x9a>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a28      	ldr	r2, [pc, #160]	; (800b6b4 <TIM_Base_SetConfig+0x128>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d007      	beq.n	800b626 <TIM_Base_SetConfig+0x9a>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4a27      	ldr	r2, [pc, #156]	; (800b6b8 <TIM_Base_SetConfig+0x12c>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d003      	beq.n	800b626 <TIM_Base_SetConfig+0x9a>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a26      	ldr	r2, [pc, #152]	; (800b6bc <TIM_Base_SetConfig+0x130>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d108      	bne.n	800b638 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b62c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	4313      	orrs	r3, r2
 800b636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	695b      	ldr	r3, [r3, #20]
 800b642:	4313      	orrs	r3, r2
 800b644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	68fa      	ldr	r2, [r7, #12]
 800b64a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	689a      	ldr	r2, [r3, #8]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a10      	ldr	r2, [pc, #64]	; (800b6a0 <TIM_Base_SetConfig+0x114>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d00f      	beq.n	800b684 <TIM_Base_SetConfig+0xf8>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a12      	ldr	r2, [pc, #72]	; (800b6b0 <TIM_Base_SetConfig+0x124>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d00b      	beq.n	800b684 <TIM_Base_SetConfig+0xf8>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a11      	ldr	r2, [pc, #68]	; (800b6b4 <TIM_Base_SetConfig+0x128>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d007      	beq.n	800b684 <TIM_Base_SetConfig+0xf8>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a10      	ldr	r2, [pc, #64]	; (800b6b8 <TIM_Base_SetConfig+0x12c>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d003      	beq.n	800b684 <TIM_Base_SetConfig+0xf8>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a0f      	ldr	r2, [pc, #60]	; (800b6bc <TIM_Base_SetConfig+0x130>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d103      	bne.n	800b68c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	691a      	ldr	r2, [r3, #16]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	615a      	str	r2, [r3, #20]
}
 800b692:	bf00      	nop
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	40010000 	.word	0x40010000
 800b6a4:	40000400 	.word	0x40000400
 800b6a8:	40000800 	.word	0x40000800
 800b6ac:	40000c00 	.word	0x40000c00
 800b6b0:	40010400 	.word	0x40010400
 800b6b4:	40014000 	.word	0x40014000
 800b6b8:	40014400 	.word	0x40014400
 800b6bc:	40014800 	.word	0x40014800

0800b6c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b087      	sub	sp, #28
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6a1b      	ldr	r3, [r3, #32]
 800b6d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6a1b      	ldr	r3, [r3, #32]
 800b6d6:	f023 0201 	bic.w	r2, r3, #1
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	699b      	ldr	r3, [r3, #24]
 800b6e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	011b      	lsls	r3, r3, #4
 800b6f0:	693a      	ldr	r2, [r7, #16]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f023 030a 	bic.w	r3, r3, #10
 800b6fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	4313      	orrs	r3, r2
 800b704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	693a      	ldr	r2, [r7, #16]
 800b70a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	621a      	str	r2, [r3, #32]
}
 800b712:	bf00      	nop
 800b714:	371c      	adds	r7, #28
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b71e:	b480      	push	{r7}
 800b720:	b087      	sub	sp, #28
 800b722:	af00      	add	r7, sp, #0
 800b724:	60f8      	str	r0, [r7, #12]
 800b726:	60b9      	str	r1, [r7, #8]
 800b728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6a1b      	ldr	r3, [r3, #32]
 800b72e:	f023 0210 	bic.w	r2, r3, #16
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6a1b      	ldr	r3, [r3, #32]
 800b740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	031b      	lsls	r3, r3, #12
 800b74e:	697a      	ldr	r2, [r7, #20]
 800b750:	4313      	orrs	r3, r2
 800b752:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b75a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	011b      	lsls	r3, r3, #4
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	4313      	orrs	r3, r2
 800b764:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	621a      	str	r2, [r3, #32]
}
 800b772:	bf00      	nop
 800b774:	371c      	adds	r7, #28
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
	...

0800b780 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	4b09      	ldr	r3, [pc, #36]	; (800b7b8 <TIM_ITRx_SetConfig+0x38>)
 800b794:	4013      	ands	r3, r2
 800b796:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b798:	683a      	ldr	r2, [r7, #0]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	f043 0307 	orr.w	r3, r3, #7
 800b7a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	609a      	str	r2, [r3, #8]
}
 800b7aa:	bf00      	nop
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	ffcfff8f 	.word	0xffcfff8f

0800b7bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b087      	sub	sp, #28
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	607a      	str	r2, [r7, #4]
 800b7c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	021a      	lsls	r2, r3, #8
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	697a      	ldr	r2, [r7, #20]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	697a      	ldr	r2, [r7, #20]
 800b7ee:	609a      	str	r2, [r3, #8]
}
 800b7f0:	bf00      	nop
 800b7f2:	371c      	adds	r7, #28
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b087      	sub	sp, #28
 800b800:	af00      	add	r7, sp, #0
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	f003 031f 	and.w	r3, r3, #31
 800b80e:	2201      	movs	r2, #1
 800b810:	fa02 f303 	lsl.w	r3, r2, r3
 800b814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6a1a      	ldr	r2, [r3, #32]
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	43db      	mvns	r3, r3
 800b81e:	401a      	ands	r2, r3
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6a1a      	ldr	r2, [r3, #32]
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	f003 031f 	and.w	r3, r3, #31
 800b82e:	6879      	ldr	r1, [r7, #4]
 800b830:	fa01 f303 	lsl.w	r3, r1, r3
 800b834:	431a      	orrs	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	621a      	str	r2, [r3, #32]
}
 800b83a:	bf00      	nop
 800b83c:	371c      	adds	r7, #28
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
	...

0800b848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d101      	bne.n	800b860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b85c:	2302      	movs	r3, #2
 800b85e:	e06d      	b.n	800b93c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2202      	movs	r2, #2
 800b86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a30      	ldr	r2, [pc, #192]	; (800b948 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d004      	beq.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a2f      	ldr	r2, [pc, #188]	; (800b94c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d108      	bne.n	800b8a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b89a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a20      	ldr	r2, [pc, #128]	; (800b948 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d022      	beq.n	800b910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8d2:	d01d      	beq.n	800b910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a1d      	ldr	r2, [pc, #116]	; (800b950 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d018      	beq.n	800b910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a1c      	ldr	r2, [pc, #112]	; (800b954 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d013      	beq.n	800b910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a1a      	ldr	r2, [pc, #104]	; (800b958 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d00e      	beq.n	800b910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a15      	ldr	r2, [pc, #84]	; (800b94c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d009      	beq.n	800b910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a16      	ldr	r2, [pc, #88]	; (800b95c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d004      	beq.n	800b910 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a15      	ldr	r2, [pc, #84]	; (800b960 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d10c      	bne.n	800b92a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b916:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	4313      	orrs	r3, r2
 800b920:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b93a:	2300      	movs	r3, #0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3714      	adds	r7, #20
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr
 800b948:	40010000 	.word	0x40010000
 800b94c:	40010400 	.word	0x40010400
 800b950:	40000400 	.word	0x40000400
 800b954:	40000800 	.word	0x40000800
 800b958:	40000c00 	.word	0x40000c00
 800b95c:	40001800 	.word	0x40001800
 800b960:	40014000 	.word	0x40014000

0800b964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b96c:	bf00      	nop
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b994:	bf00      	nop
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d101      	bne.n	800b9b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e042      	b.n	800ba38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d106      	bne.n	800b9ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7f7 fa53 	bl	8002e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2224      	movs	r2, #36	; 0x24
 800b9ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f022 0201 	bic.w	r2, r2, #1
 800b9e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 f82c 	bl	800ba40 <UART_SetConfig>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d101      	bne.n	800b9f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e022      	b.n	800ba38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d002      	beq.n	800ba00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fe8c 	bl	800c718 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	685a      	ldr	r2, [r3, #4]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	689a      	ldr	r2, [r3, #8]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f042 0201 	orr.w	r2, r2, #1
 800ba2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 ff13 	bl	800c85c <UART_CheckIdleState>
 800ba36:	4603      	mov	r3, r0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba44:	b092      	sub	sp, #72	; 0x48
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	689a      	ldr	r2, [r3, #8]
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	431a      	orrs	r2, r3
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	695b      	ldr	r3, [r3, #20]
 800ba5e:	431a      	orrs	r2, r3
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	69db      	ldr	r3, [r3, #28]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	4bbe      	ldr	r3, [pc, #760]	; (800bd68 <UART_SetConfig+0x328>)
 800ba70:	4013      	ands	r3, r2
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	6812      	ldr	r2, [r2, #0]
 800ba76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba78:	430b      	orrs	r3, r1
 800ba7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	68da      	ldr	r2, [r3, #12]
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	430a      	orrs	r2, r1
 800ba90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	699b      	ldr	r3, [r3, #24]
 800ba96:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4ab3      	ldr	r2, [pc, #716]	; (800bd6c <UART_SetConfig+0x32c>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d004      	beq.n	800baac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	6a1b      	ldr	r3, [r3, #32]
 800baa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800baa8:	4313      	orrs	r3, r2
 800baaa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	689a      	ldr	r2, [r3, #8]
 800bab2:	4baf      	ldr	r3, [pc, #700]	; (800bd70 <UART_SetConfig+0x330>)
 800bab4:	4013      	ands	r3, r2
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	6812      	ldr	r2, [r2, #0]
 800baba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800babc:	430b      	orrs	r3, r1
 800babe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac6:	f023 010f 	bic.w	r1, r3, #15
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	430a      	orrs	r2, r1
 800bad4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4aa6      	ldr	r2, [pc, #664]	; (800bd74 <UART_SetConfig+0x334>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d177      	bne.n	800bbd0 <UART_SetConfig+0x190>
 800bae0:	4ba5      	ldr	r3, [pc, #660]	; (800bd78 <UART_SetConfig+0x338>)
 800bae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bae8:	2b28      	cmp	r3, #40	; 0x28
 800baea:	d86d      	bhi.n	800bbc8 <UART_SetConfig+0x188>
 800baec:	a201      	add	r2, pc, #4	; (adr r2, 800baf4 <UART_SetConfig+0xb4>)
 800baee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf2:	bf00      	nop
 800baf4:	0800bb99 	.word	0x0800bb99
 800baf8:	0800bbc9 	.word	0x0800bbc9
 800bafc:	0800bbc9 	.word	0x0800bbc9
 800bb00:	0800bbc9 	.word	0x0800bbc9
 800bb04:	0800bbc9 	.word	0x0800bbc9
 800bb08:	0800bbc9 	.word	0x0800bbc9
 800bb0c:	0800bbc9 	.word	0x0800bbc9
 800bb10:	0800bbc9 	.word	0x0800bbc9
 800bb14:	0800bba1 	.word	0x0800bba1
 800bb18:	0800bbc9 	.word	0x0800bbc9
 800bb1c:	0800bbc9 	.word	0x0800bbc9
 800bb20:	0800bbc9 	.word	0x0800bbc9
 800bb24:	0800bbc9 	.word	0x0800bbc9
 800bb28:	0800bbc9 	.word	0x0800bbc9
 800bb2c:	0800bbc9 	.word	0x0800bbc9
 800bb30:	0800bbc9 	.word	0x0800bbc9
 800bb34:	0800bba9 	.word	0x0800bba9
 800bb38:	0800bbc9 	.word	0x0800bbc9
 800bb3c:	0800bbc9 	.word	0x0800bbc9
 800bb40:	0800bbc9 	.word	0x0800bbc9
 800bb44:	0800bbc9 	.word	0x0800bbc9
 800bb48:	0800bbc9 	.word	0x0800bbc9
 800bb4c:	0800bbc9 	.word	0x0800bbc9
 800bb50:	0800bbc9 	.word	0x0800bbc9
 800bb54:	0800bbb1 	.word	0x0800bbb1
 800bb58:	0800bbc9 	.word	0x0800bbc9
 800bb5c:	0800bbc9 	.word	0x0800bbc9
 800bb60:	0800bbc9 	.word	0x0800bbc9
 800bb64:	0800bbc9 	.word	0x0800bbc9
 800bb68:	0800bbc9 	.word	0x0800bbc9
 800bb6c:	0800bbc9 	.word	0x0800bbc9
 800bb70:	0800bbc9 	.word	0x0800bbc9
 800bb74:	0800bbb9 	.word	0x0800bbb9
 800bb78:	0800bbc9 	.word	0x0800bbc9
 800bb7c:	0800bbc9 	.word	0x0800bbc9
 800bb80:	0800bbc9 	.word	0x0800bbc9
 800bb84:	0800bbc9 	.word	0x0800bbc9
 800bb88:	0800bbc9 	.word	0x0800bbc9
 800bb8c:	0800bbc9 	.word	0x0800bbc9
 800bb90:	0800bbc9 	.word	0x0800bbc9
 800bb94:	0800bbc1 	.word	0x0800bbc1
 800bb98:	2301      	movs	r3, #1
 800bb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb9e:	e326      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bba0:	2304      	movs	r3, #4
 800bba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bba6:	e322      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bba8:	2308      	movs	r3, #8
 800bbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbae:	e31e      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bbb0:	2310      	movs	r3, #16
 800bbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbb6:	e31a      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bbb8:	2320      	movs	r3, #32
 800bbba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbbe:	e316      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bbc0:	2340      	movs	r3, #64	; 0x40
 800bbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbc6:	e312      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bbc8:	2380      	movs	r3, #128	; 0x80
 800bbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbce:	e30e      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a69      	ldr	r2, [pc, #420]	; (800bd7c <UART_SetConfig+0x33c>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d130      	bne.n	800bc3c <UART_SetConfig+0x1fc>
 800bbda:	4b67      	ldr	r3, [pc, #412]	; (800bd78 <UART_SetConfig+0x338>)
 800bbdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbde:	f003 0307 	and.w	r3, r3, #7
 800bbe2:	2b05      	cmp	r3, #5
 800bbe4:	d826      	bhi.n	800bc34 <UART_SetConfig+0x1f4>
 800bbe6:	a201      	add	r2, pc, #4	; (adr r2, 800bbec <UART_SetConfig+0x1ac>)
 800bbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbec:	0800bc05 	.word	0x0800bc05
 800bbf0:	0800bc0d 	.word	0x0800bc0d
 800bbf4:	0800bc15 	.word	0x0800bc15
 800bbf8:	0800bc1d 	.word	0x0800bc1d
 800bbfc:	0800bc25 	.word	0x0800bc25
 800bc00:	0800bc2d 	.word	0x0800bc2d
 800bc04:	2300      	movs	r3, #0
 800bc06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc0a:	e2f0      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bc0c:	2304      	movs	r3, #4
 800bc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc12:	e2ec      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bc14:	2308      	movs	r3, #8
 800bc16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc1a:	e2e8      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bc1c:	2310      	movs	r3, #16
 800bc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc22:	e2e4      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bc24:	2320      	movs	r3, #32
 800bc26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc2a:	e2e0      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bc2c:	2340      	movs	r3, #64	; 0x40
 800bc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc32:	e2dc      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bc34:	2380      	movs	r3, #128	; 0x80
 800bc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc3a:	e2d8      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a4f      	ldr	r2, [pc, #316]	; (800bd80 <UART_SetConfig+0x340>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d130      	bne.n	800bca8 <UART_SetConfig+0x268>
 800bc46:	4b4c      	ldr	r3, [pc, #304]	; (800bd78 <UART_SetConfig+0x338>)
 800bc48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc4a:	f003 0307 	and.w	r3, r3, #7
 800bc4e:	2b05      	cmp	r3, #5
 800bc50:	d826      	bhi.n	800bca0 <UART_SetConfig+0x260>
 800bc52:	a201      	add	r2, pc, #4	; (adr r2, 800bc58 <UART_SetConfig+0x218>)
 800bc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc58:	0800bc71 	.word	0x0800bc71
 800bc5c:	0800bc79 	.word	0x0800bc79
 800bc60:	0800bc81 	.word	0x0800bc81
 800bc64:	0800bc89 	.word	0x0800bc89
 800bc68:	0800bc91 	.word	0x0800bc91
 800bc6c:	0800bc99 	.word	0x0800bc99
 800bc70:	2300      	movs	r3, #0
 800bc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc76:	e2ba      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bc78:	2304      	movs	r3, #4
 800bc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc7e:	e2b6      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bc80:	2308      	movs	r3, #8
 800bc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc86:	e2b2      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bc88:	2310      	movs	r3, #16
 800bc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc8e:	e2ae      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bc90:	2320      	movs	r3, #32
 800bc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc96:	e2aa      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bc98:	2340      	movs	r3, #64	; 0x40
 800bc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc9e:	e2a6      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bca0:	2380      	movs	r3, #128	; 0x80
 800bca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bca6:	e2a2      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a35      	ldr	r2, [pc, #212]	; (800bd84 <UART_SetConfig+0x344>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d130      	bne.n	800bd14 <UART_SetConfig+0x2d4>
 800bcb2:	4b31      	ldr	r3, [pc, #196]	; (800bd78 <UART_SetConfig+0x338>)
 800bcb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcb6:	f003 0307 	and.w	r3, r3, #7
 800bcba:	2b05      	cmp	r3, #5
 800bcbc:	d826      	bhi.n	800bd0c <UART_SetConfig+0x2cc>
 800bcbe:	a201      	add	r2, pc, #4	; (adr r2, 800bcc4 <UART_SetConfig+0x284>)
 800bcc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc4:	0800bcdd 	.word	0x0800bcdd
 800bcc8:	0800bce5 	.word	0x0800bce5
 800bccc:	0800bced 	.word	0x0800bced
 800bcd0:	0800bcf5 	.word	0x0800bcf5
 800bcd4:	0800bcfd 	.word	0x0800bcfd
 800bcd8:	0800bd05 	.word	0x0800bd05
 800bcdc:	2300      	movs	r3, #0
 800bcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bce2:	e284      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bce4:	2304      	movs	r3, #4
 800bce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcea:	e280      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bcec:	2308      	movs	r3, #8
 800bcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcf2:	e27c      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bcf4:	2310      	movs	r3, #16
 800bcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcfa:	e278      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bcfc:	2320      	movs	r3, #32
 800bcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd02:	e274      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bd04:	2340      	movs	r3, #64	; 0x40
 800bd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd0a:	e270      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bd0c:	2380      	movs	r3, #128	; 0x80
 800bd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd12:	e26c      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a1b      	ldr	r2, [pc, #108]	; (800bd88 <UART_SetConfig+0x348>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d142      	bne.n	800bda4 <UART_SetConfig+0x364>
 800bd1e:	4b16      	ldr	r3, [pc, #88]	; (800bd78 <UART_SetConfig+0x338>)
 800bd20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd22:	f003 0307 	and.w	r3, r3, #7
 800bd26:	2b05      	cmp	r3, #5
 800bd28:	d838      	bhi.n	800bd9c <UART_SetConfig+0x35c>
 800bd2a:	a201      	add	r2, pc, #4	; (adr r2, 800bd30 <UART_SetConfig+0x2f0>)
 800bd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd30:	0800bd49 	.word	0x0800bd49
 800bd34:	0800bd51 	.word	0x0800bd51
 800bd38:	0800bd59 	.word	0x0800bd59
 800bd3c:	0800bd61 	.word	0x0800bd61
 800bd40:	0800bd8d 	.word	0x0800bd8d
 800bd44:	0800bd95 	.word	0x0800bd95
 800bd48:	2300      	movs	r3, #0
 800bd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd4e:	e24e      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bd50:	2304      	movs	r3, #4
 800bd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd56:	e24a      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bd58:	2308      	movs	r3, #8
 800bd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd5e:	e246      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bd60:	2310      	movs	r3, #16
 800bd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd66:	e242      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bd68:	cfff69f3 	.word	0xcfff69f3
 800bd6c:	58000c00 	.word	0x58000c00
 800bd70:	11fff4ff 	.word	0x11fff4ff
 800bd74:	40011000 	.word	0x40011000
 800bd78:	58024400 	.word	0x58024400
 800bd7c:	40004400 	.word	0x40004400
 800bd80:	40004800 	.word	0x40004800
 800bd84:	40004c00 	.word	0x40004c00
 800bd88:	40005000 	.word	0x40005000
 800bd8c:	2320      	movs	r3, #32
 800bd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd92:	e22c      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bd94:	2340      	movs	r3, #64	; 0x40
 800bd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd9a:	e228      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bd9c:	2380      	movs	r3, #128	; 0x80
 800bd9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bda2:	e224      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4ab1      	ldr	r2, [pc, #708]	; (800c070 <UART_SetConfig+0x630>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d176      	bne.n	800be9c <UART_SetConfig+0x45c>
 800bdae:	4bb1      	ldr	r3, [pc, #708]	; (800c074 <UART_SetConfig+0x634>)
 800bdb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bdb6:	2b28      	cmp	r3, #40	; 0x28
 800bdb8:	d86c      	bhi.n	800be94 <UART_SetConfig+0x454>
 800bdba:	a201      	add	r2, pc, #4	; (adr r2, 800bdc0 <UART_SetConfig+0x380>)
 800bdbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc0:	0800be65 	.word	0x0800be65
 800bdc4:	0800be95 	.word	0x0800be95
 800bdc8:	0800be95 	.word	0x0800be95
 800bdcc:	0800be95 	.word	0x0800be95
 800bdd0:	0800be95 	.word	0x0800be95
 800bdd4:	0800be95 	.word	0x0800be95
 800bdd8:	0800be95 	.word	0x0800be95
 800bddc:	0800be95 	.word	0x0800be95
 800bde0:	0800be6d 	.word	0x0800be6d
 800bde4:	0800be95 	.word	0x0800be95
 800bde8:	0800be95 	.word	0x0800be95
 800bdec:	0800be95 	.word	0x0800be95
 800bdf0:	0800be95 	.word	0x0800be95
 800bdf4:	0800be95 	.word	0x0800be95
 800bdf8:	0800be95 	.word	0x0800be95
 800bdfc:	0800be95 	.word	0x0800be95
 800be00:	0800be75 	.word	0x0800be75
 800be04:	0800be95 	.word	0x0800be95
 800be08:	0800be95 	.word	0x0800be95
 800be0c:	0800be95 	.word	0x0800be95
 800be10:	0800be95 	.word	0x0800be95
 800be14:	0800be95 	.word	0x0800be95
 800be18:	0800be95 	.word	0x0800be95
 800be1c:	0800be95 	.word	0x0800be95
 800be20:	0800be7d 	.word	0x0800be7d
 800be24:	0800be95 	.word	0x0800be95
 800be28:	0800be95 	.word	0x0800be95
 800be2c:	0800be95 	.word	0x0800be95
 800be30:	0800be95 	.word	0x0800be95
 800be34:	0800be95 	.word	0x0800be95
 800be38:	0800be95 	.word	0x0800be95
 800be3c:	0800be95 	.word	0x0800be95
 800be40:	0800be85 	.word	0x0800be85
 800be44:	0800be95 	.word	0x0800be95
 800be48:	0800be95 	.word	0x0800be95
 800be4c:	0800be95 	.word	0x0800be95
 800be50:	0800be95 	.word	0x0800be95
 800be54:	0800be95 	.word	0x0800be95
 800be58:	0800be95 	.word	0x0800be95
 800be5c:	0800be95 	.word	0x0800be95
 800be60:	0800be8d 	.word	0x0800be8d
 800be64:	2301      	movs	r3, #1
 800be66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be6a:	e1c0      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800be6c:	2304      	movs	r3, #4
 800be6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be72:	e1bc      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800be74:	2308      	movs	r3, #8
 800be76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be7a:	e1b8      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800be7c:	2310      	movs	r3, #16
 800be7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be82:	e1b4      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800be84:	2320      	movs	r3, #32
 800be86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be8a:	e1b0      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800be8c:	2340      	movs	r3, #64	; 0x40
 800be8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be92:	e1ac      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800be94:	2380      	movs	r3, #128	; 0x80
 800be96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be9a:	e1a8      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a75      	ldr	r2, [pc, #468]	; (800c078 <UART_SetConfig+0x638>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d130      	bne.n	800bf08 <UART_SetConfig+0x4c8>
 800bea6:	4b73      	ldr	r3, [pc, #460]	; (800c074 <UART_SetConfig+0x634>)
 800bea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beaa:	f003 0307 	and.w	r3, r3, #7
 800beae:	2b05      	cmp	r3, #5
 800beb0:	d826      	bhi.n	800bf00 <UART_SetConfig+0x4c0>
 800beb2:	a201      	add	r2, pc, #4	; (adr r2, 800beb8 <UART_SetConfig+0x478>)
 800beb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb8:	0800bed1 	.word	0x0800bed1
 800bebc:	0800bed9 	.word	0x0800bed9
 800bec0:	0800bee1 	.word	0x0800bee1
 800bec4:	0800bee9 	.word	0x0800bee9
 800bec8:	0800bef1 	.word	0x0800bef1
 800becc:	0800bef9 	.word	0x0800bef9
 800bed0:	2300      	movs	r3, #0
 800bed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bed6:	e18a      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bed8:	2304      	movs	r3, #4
 800beda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bede:	e186      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bee0:	2308      	movs	r3, #8
 800bee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bee6:	e182      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bee8:	2310      	movs	r3, #16
 800beea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beee:	e17e      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bef0:	2320      	movs	r3, #32
 800bef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bef6:	e17a      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bef8:	2340      	movs	r3, #64	; 0x40
 800befa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800befe:	e176      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bf00:	2380      	movs	r3, #128	; 0x80
 800bf02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf06:	e172      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a5b      	ldr	r2, [pc, #364]	; (800c07c <UART_SetConfig+0x63c>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d130      	bne.n	800bf74 <UART_SetConfig+0x534>
 800bf12:	4b58      	ldr	r3, [pc, #352]	; (800c074 <UART_SetConfig+0x634>)
 800bf14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf16:	f003 0307 	and.w	r3, r3, #7
 800bf1a:	2b05      	cmp	r3, #5
 800bf1c:	d826      	bhi.n	800bf6c <UART_SetConfig+0x52c>
 800bf1e:	a201      	add	r2, pc, #4	; (adr r2, 800bf24 <UART_SetConfig+0x4e4>)
 800bf20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf24:	0800bf3d 	.word	0x0800bf3d
 800bf28:	0800bf45 	.word	0x0800bf45
 800bf2c:	0800bf4d 	.word	0x0800bf4d
 800bf30:	0800bf55 	.word	0x0800bf55
 800bf34:	0800bf5d 	.word	0x0800bf5d
 800bf38:	0800bf65 	.word	0x0800bf65
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf42:	e154      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bf44:	2304      	movs	r3, #4
 800bf46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf4a:	e150      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bf4c:	2308      	movs	r3, #8
 800bf4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf52:	e14c      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bf54:	2310      	movs	r3, #16
 800bf56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf5a:	e148      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bf5c:	2320      	movs	r3, #32
 800bf5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf62:	e144      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bf64:	2340      	movs	r3, #64	; 0x40
 800bf66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf6a:	e140      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bf6c:	2380      	movs	r3, #128	; 0x80
 800bf6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf72:	e13c      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a41      	ldr	r2, [pc, #260]	; (800c080 <UART_SetConfig+0x640>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	f040 8082 	bne.w	800c084 <UART_SetConfig+0x644>
 800bf80:	4b3c      	ldr	r3, [pc, #240]	; (800c074 <UART_SetConfig+0x634>)
 800bf82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf88:	2b28      	cmp	r3, #40	; 0x28
 800bf8a:	d86d      	bhi.n	800c068 <UART_SetConfig+0x628>
 800bf8c:	a201      	add	r2, pc, #4	; (adr r2, 800bf94 <UART_SetConfig+0x554>)
 800bf8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf92:	bf00      	nop
 800bf94:	0800c039 	.word	0x0800c039
 800bf98:	0800c069 	.word	0x0800c069
 800bf9c:	0800c069 	.word	0x0800c069
 800bfa0:	0800c069 	.word	0x0800c069
 800bfa4:	0800c069 	.word	0x0800c069
 800bfa8:	0800c069 	.word	0x0800c069
 800bfac:	0800c069 	.word	0x0800c069
 800bfb0:	0800c069 	.word	0x0800c069
 800bfb4:	0800c041 	.word	0x0800c041
 800bfb8:	0800c069 	.word	0x0800c069
 800bfbc:	0800c069 	.word	0x0800c069
 800bfc0:	0800c069 	.word	0x0800c069
 800bfc4:	0800c069 	.word	0x0800c069
 800bfc8:	0800c069 	.word	0x0800c069
 800bfcc:	0800c069 	.word	0x0800c069
 800bfd0:	0800c069 	.word	0x0800c069
 800bfd4:	0800c049 	.word	0x0800c049
 800bfd8:	0800c069 	.word	0x0800c069
 800bfdc:	0800c069 	.word	0x0800c069
 800bfe0:	0800c069 	.word	0x0800c069
 800bfe4:	0800c069 	.word	0x0800c069
 800bfe8:	0800c069 	.word	0x0800c069
 800bfec:	0800c069 	.word	0x0800c069
 800bff0:	0800c069 	.word	0x0800c069
 800bff4:	0800c051 	.word	0x0800c051
 800bff8:	0800c069 	.word	0x0800c069
 800bffc:	0800c069 	.word	0x0800c069
 800c000:	0800c069 	.word	0x0800c069
 800c004:	0800c069 	.word	0x0800c069
 800c008:	0800c069 	.word	0x0800c069
 800c00c:	0800c069 	.word	0x0800c069
 800c010:	0800c069 	.word	0x0800c069
 800c014:	0800c059 	.word	0x0800c059
 800c018:	0800c069 	.word	0x0800c069
 800c01c:	0800c069 	.word	0x0800c069
 800c020:	0800c069 	.word	0x0800c069
 800c024:	0800c069 	.word	0x0800c069
 800c028:	0800c069 	.word	0x0800c069
 800c02c:	0800c069 	.word	0x0800c069
 800c030:	0800c069 	.word	0x0800c069
 800c034:	0800c061 	.word	0x0800c061
 800c038:	2301      	movs	r3, #1
 800c03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c03e:	e0d6      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c040:	2304      	movs	r3, #4
 800c042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c046:	e0d2      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c048:	2308      	movs	r3, #8
 800c04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c04e:	e0ce      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c050:	2310      	movs	r3, #16
 800c052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c056:	e0ca      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c058:	2320      	movs	r3, #32
 800c05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c05e:	e0c6      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c060:	2340      	movs	r3, #64	; 0x40
 800c062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c066:	e0c2      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c068:	2380      	movs	r3, #128	; 0x80
 800c06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c06e:	e0be      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c070:	40011400 	.word	0x40011400
 800c074:	58024400 	.word	0x58024400
 800c078:	40007800 	.word	0x40007800
 800c07c:	40007c00 	.word	0x40007c00
 800c080:	40011800 	.word	0x40011800
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4aad      	ldr	r2, [pc, #692]	; (800c340 <UART_SetConfig+0x900>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d176      	bne.n	800c17c <UART_SetConfig+0x73c>
 800c08e:	4bad      	ldr	r3, [pc, #692]	; (800c344 <UART_SetConfig+0x904>)
 800c090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c092:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c096:	2b28      	cmp	r3, #40	; 0x28
 800c098:	d86c      	bhi.n	800c174 <UART_SetConfig+0x734>
 800c09a:	a201      	add	r2, pc, #4	; (adr r2, 800c0a0 <UART_SetConfig+0x660>)
 800c09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a0:	0800c145 	.word	0x0800c145
 800c0a4:	0800c175 	.word	0x0800c175
 800c0a8:	0800c175 	.word	0x0800c175
 800c0ac:	0800c175 	.word	0x0800c175
 800c0b0:	0800c175 	.word	0x0800c175
 800c0b4:	0800c175 	.word	0x0800c175
 800c0b8:	0800c175 	.word	0x0800c175
 800c0bc:	0800c175 	.word	0x0800c175
 800c0c0:	0800c14d 	.word	0x0800c14d
 800c0c4:	0800c175 	.word	0x0800c175
 800c0c8:	0800c175 	.word	0x0800c175
 800c0cc:	0800c175 	.word	0x0800c175
 800c0d0:	0800c175 	.word	0x0800c175
 800c0d4:	0800c175 	.word	0x0800c175
 800c0d8:	0800c175 	.word	0x0800c175
 800c0dc:	0800c175 	.word	0x0800c175
 800c0e0:	0800c155 	.word	0x0800c155
 800c0e4:	0800c175 	.word	0x0800c175
 800c0e8:	0800c175 	.word	0x0800c175
 800c0ec:	0800c175 	.word	0x0800c175
 800c0f0:	0800c175 	.word	0x0800c175
 800c0f4:	0800c175 	.word	0x0800c175
 800c0f8:	0800c175 	.word	0x0800c175
 800c0fc:	0800c175 	.word	0x0800c175
 800c100:	0800c15d 	.word	0x0800c15d
 800c104:	0800c175 	.word	0x0800c175
 800c108:	0800c175 	.word	0x0800c175
 800c10c:	0800c175 	.word	0x0800c175
 800c110:	0800c175 	.word	0x0800c175
 800c114:	0800c175 	.word	0x0800c175
 800c118:	0800c175 	.word	0x0800c175
 800c11c:	0800c175 	.word	0x0800c175
 800c120:	0800c165 	.word	0x0800c165
 800c124:	0800c175 	.word	0x0800c175
 800c128:	0800c175 	.word	0x0800c175
 800c12c:	0800c175 	.word	0x0800c175
 800c130:	0800c175 	.word	0x0800c175
 800c134:	0800c175 	.word	0x0800c175
 800c138:	0800c175 	.word	0x0800c175
 800c13c:	0800c175 	.word	0x0800c175
 800c140:	0800c16d 	.word	0x0800c16d
 800c144:	2301      	movs	r3, #1
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c14a:	e050      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c14c:	2304      	movs	r3, #4
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c152:	e04c      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c154:	2308      	movs	r3, #8
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c15a:	e048      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c15c:	2310      	movs	r3, #16
 800c15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c162:	e044      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c164:	2320      	movs	r3, #32
 800c166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16a:	e040      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c16c:	2340      	movs	r3, #64	; 0x40
 800c16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c172:	e03c      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c174:	2380      	movs	r3, #128	; 0x80
 800c176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c17a:	e038      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a71      	ldr	r2, [pc, #452]	; (800c348 <UART_SetConfig+0x908>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d130      	bne.n	800c1e8 <UART_SetConfig+0x7a8>
 800c186:	4b6f      	ldr	r3, [pc, #444]	; (800c344 <UART_SetConfig+0x904>)
 800c188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c18a:	f003 0307 	and.w	r3, r3, #7
 800c18e:	2b05      	cmp	r3, #5
 800c190:	d826      	bhi.n	800c1e0 <UART_SetConfig+0x7a0>
 800c192:	a201      	add	r2, pc, #4	; (adr r2, 800c198 <UART_SetConfig+0x758>)
 800c194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c198:	0800c1b1 	.word	0x0800c1b1
 800c19c:	0800c1b9 	.word	0x0800c1b9
 800c1a0:	0800c1c1 	.word	0x0800c1c1
 800c1a4:	0800c1c9 	.word	0x0800c1c9
 800c1a8:	0800c1d1 	.word	0x0800c1d1
 800c1ac:	0800c1d9 	.word	0x0800c1d9
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1b6:	e01a      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c1b8:	2304      	movs	r3, #4
 800c1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1be:	e016      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c1c0:	2308      	movs	r3, #8
 800c1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1c6:	e012      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c1c8:	2310      	movs	r3, #16
 800c1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ce:	e00e      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c1d0:	2320      	movs	r3, #32
 800c1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1d6:	e00a      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c1d8:	2340      	movs	r3, #64	; 0x40
 800c1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1de:	e006      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c1e0:	2380      	movs	r3, #128	; 0x80
 800c1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1e6:	e002      	b.n	800c1ee <UART_SetConfig+0x7ae>
 800c1e8:	2380      	movs	r3, #128	; 0x80
 800c1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a55      	ldr	r2, [pc, #340]	; (800c348 <UART_SetConfig+0x908>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	f040 80f8 	bne.w	800c3ea <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c1fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c1fe:	2b20      	cmp	r3, #32
 800c200:	dc46      	bgt.n	800c290 <UART_SetConfig+0x850>
 800c202:	2b02      	cmp	r3, #2
 800c204:	db75      	blt.n	800c2f2 <UART_SetConfig+0x8b2>
 800c206:	3b02      	subs	r3, #2
 800c208:	2b1e      	cmp	r3, #30
 800c20a:	d872      	bhi.n	800c2f2 <UART_SetConfig+0x8b2>
 800c20c:	a201      	add	r2, pc, #4	; (adr r2, 800c214 <UART_SetConfig+0x7d4>)
 800c20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c212:	bf00      	nop
 800c214:	0800c297 	.word	0x0800c297
 800c218:	0800c2f3 	.word	0x0800c2f3
 800c21c:	0800c29f 	.word	0x0800c29f
 800c220:	0800c2f3 	.word	0x0800c2f3
 800c224:	0800c2f3 	.word	0x0800c2f3
 800c228:	0800c2f3 	.word	0x0800c2f3
 800c22c:	0800c2af 	.word	0x0800c2af
 800c230:	0800c2f3 	.word	0x0800c2f3
 800c234:	0800c2f3 	.word	0x0800c2f3
 800c238:	0800c2f3 	.word	0x0800c2f3
 800c23c:	0800c2f3 	.word	0x0800c2f3
 800c240:	0800c2f3 	.word	0x0800c2f3
 800c244:	0800c2f3 	.word	0x0800c2f3
 800c248:	0800c2f3 	.word	0x0800c2f3
 800c24c:	0800c2bf 	.word	0x0800c2bf
 800c250:	0800c2f3 	.word	0x0800c2f3
 800c254:	0800c2f3 	.word	0x0800c2f3
 800c258:	0800c2f3 	.word	0x0800c2f3
 800c25c:	0800c2f3 	.word	0x0800c2f3
 800c260:	0800c2f3 	.word	0x0800c2f3
 800c264:	0800c2f3 	.word	0x0800c2f3
 800c268:	0800c2f3 	.word	0x0800c2f3
 800c26c:	0800c2f3 	.word	0x0800c2f3
 800c270:	0800c2f3 	.word	0x0800c2f3
 800c274:	0800c2f3 	.word	0x0800c2f3
 800c278:	0800c2f3 	.word	0x0800c2f3
 800c27c:	0800c2f3 	.word	0x0800c2f3
 800c280:	0800c2f3 	.word	0x0800c2f3
 800c284:	0800c2f3 	.word	0x0800c2f3
 800c288:	0800c2f3 	.word	0x0800c2f3
 800c28c:	0800c2e5 	.word	0x0800c2e5
 800c290:	2b40      	cmp	r3, #64	; 0x40
 800c292:	d02a      	beq.n	800c2ea <UART_SetConfig+0x8aa>
 800c294:	e02d      	b.n	800c2f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c296:	f7fd ff31 	bl	800a0fc <HAL_RCCEx_GetD3PCLK1Freq>
 800c29a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c29c:	e02f      	b.n	800c2fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c29e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fd ff40 	bl	800a128 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ac:	e027      	b.n	800c2fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2ae:	f107 0318 	add.w	r3, r7, #24
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fe f88c 	bl	800a3d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2bc:	e01f      	b.n	800c2fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2be:	4b21      	ldr	r3, [pc, #132]	; (800c344 <UART_SetConfig+0x904>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 0320 	and.w	r3, r3, #32
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d009      	beq.n	800c2de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c2ca:	4b1e      	ldr	r3, [pc, #120]	; (800c344 <UART_SetConfig+0x904>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	08db      	lsrs	r3, r3, #3
 800c2d0:	f003 0303 	and.w	r3, r3, #3
 800c2d4:	4a1d      	ldr	r2, [pc, #116]	; (800c34c <UART_SetConfig+0x90c>)
 800c2d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c2dc:	e00f      	b.n	800c2fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c2de:	4b1b      	ldr	r3, [pc, #108]	; (800c34c <UART_SetConfig+0x90c>)
 800c2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e2:	e00c      	b.n	800c2fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c2e4:	4b1a      	ldr	r3, [pc, #104]	; (800c350 <UART_SetConfig+0x910>)
 800c2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e8:	e009      	b.n	800c2fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2f0:	e005      	b.n	800c2fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c2fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c2fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c300:	2b00      	cmp	r3, #0
 800c302:	f000 81ee 	beq.w	800c6e2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30a:	4a12      	ldr	r2, [pc, #72]	; (800c354 <UART_SetConfig+0x914>)
 800c30c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c310:	461a      	mov	r2, r3
 800c312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c314:	fbb3 f3f2 	udiv	r3, r3, r2
 800c318:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	685a      	ldr	r2, [r3, #4]
 800c31e:	4613      	mov	r3, r2
 800c320:	005b      	lsls	r3, r3, #1
 800c322:	4413      	add	r3, r2
 800c324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c326:	429a      	cmp	r2, r3
 800c328:	d305      	bcc.n	800c336 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c332:	429a      	cmp	r2, r3
 800c334:	d910      	bls.n	800c358 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c336:	2301      	movs	r3, #1
 800c338:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c33c:	e1d1      	b.n	800c6e2 <UART_SetConfig+0xca2>
 800c33e:	bf00      	nop
 800c340:	40011c00 	.word	0x40011c00
 800c344:	58024400 	.word	0x58024400
 800c348:	58000c00 	.word	0x58000c00
 800c34c:	03d09000 	.word	0x03d09000
 800c350:	003d0900 	.word	0x003d0900
 800c354:	0800d1e8 	.word	0x0800d1e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c35a:	2200      	movs	r2, #0
 800c35c:	60bb      	str	r3, [r7, #8]
 800c35e:	60fa      	str	r2, [r7, #12]
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c364:	4ac0      	ldr	r2, [pc, #768]	; (800c668 <UART_SetConfig+0xc28>)
 800c366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	2200      	movs	r2, #0
 800c36e:	603b      	str	r3, [r7, #0]
 800c370:	607a      	str	r2, [r7, #4]
 800c372:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c376:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c37a:	f7f4 f975 	bl	8000668 <__aeabi_uldivmod>
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	4610      	mov	r0, r2
 800c384:	4619      	mov	r1, r3
 800c386:	f04f 0200 	mov.w	r2, #0
 800c38a:	f04f 0300 	mov.w	r3, #0
 800c38e:	020b      	lsls	r3, r1, #8
 800c390:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c394:	0202      	lsls	r2, r0, #8
 800c396:	6979      	ldr	r1, [r7, #20]
 800c398:	6849      	ldr	r1, [r1, #4]
 800c39a:	0849      	lsrs	r1, r1, #1
 800c39c:	2000      	movs	r0, #0
 800c39e:	460c      	mov	r4, r1
 800c3a0:	4605      	mov	r5, r0
 800c3a2:	eb12 0804 	adds.w	r8, r2, r4
 800c3a6:	eb43 0905 	adc.w	r9, r3, r5
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	469a      	mov	sl, r3
 800c3b2:	4693      	mov	fp, r2
 800c3b4:	4652      	mov	r2, sl
 800c3b6:	465b      	mov	r3, fp
 800c3b8:	4640      	mov	r0, r8
 800c3ba:	4649      	mov	r1, r9
 800c3bc:	f7f4 f954 	bl	8000668 <__aeabi_uldivmod>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c3ce:	d308      	bcc.n	800c3e2 <UART_SetConfig+0x9a2>
 800c3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3d6:	d204      	bcs.n	800c3e2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3de:	60da      	str	r2, [r3, #12]
 800c3e0:	e17f      	b.n	800c6e2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c3e8:	e17b      	b.n	800c6e2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	69db      	ldr	r3, [r3, #28]
 800c3ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3f2:	f040 80bd 	bne.w	800c570 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c3f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c3fa:	2b20      	cmp	r3, #32
 800c3fc:	dc48      	bgt.n	800c490 <UART_SetConfig+0xa50>
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	db7b      	blt.n	800c4fa <UART_SetConfig+0xaba>
 800c402:	2b20      	cmp	r3, #32
 800c404:	d879      	bhi.n	800c4fa <UART_SetConfig+0xaba>
 800c406:	a201      	add	r2, pc, #4	; (adr r2, 800c40c <UART_SetConfig+0x9cc>)
 800c408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c40c:	0800c497 	.word	0x0800c497
 800c410:	0800c49f 	.word	0x0800c49f
 800c414:	0800c4fb 	.word	0x0800c4fb
 800c418:	0800c4fb 	.word	0x0800c4fb
 800c41c:	0800c4a7 	.word	0x0800c4a7
 800c420:	0800c4fb 	.word	0x0800c4fb
 800c424:	0800c4fb 	.word	0x0800c4fb
 800c428:	0800c4fb 	.word	0x0800c4fb
 800c42c:	0800c4b7 	.word	0x0800c4b7
 800c430:	0800c4fb 	.word	0x0800c4fb
 800c434:	0800c4fb 	.word	0x0800c4fb
 800c438:	0800c4fb 	.word	0x0800c4fb
 800c43c:	0800c4fb 	.word	0x0800c4fb
 800c440:	0800c4fb 	.word	0x0800c4fb
 800c444:	0800c4fb 	.word	0x0800c4fb
 800c448:	0800c4fb 	.word	0x0800c4fb
 800c44c:	0800c4c7 	.word	0x0800c4c7
 800c450:	0800c4fb 	.word	0x0800c4fb
 800c454:	0800c4fb 	.word	0x0800c4fb
 800c458:	0800c4fb 	.word	0x0800c4fb
 800c45c:	0800c4fb 	.word	0x0800c4fb
 800c460:	0800c4fb 	.word	0x0800c4fb
 800c464:	0800c4fb 	.word	0x0800c4fb
 800c468:	0800c4fb 	.word	0x0800c4fb
 800c46c:	0800c4fb 	.word	0x0800c4fb
 800c470:	0800c4fb 	.word	0x0800c4fb
 800c474:	0800c4fb 	.word	0x0800c4fb
 800c478:	0800c4fb 	.word	0x0800c4fb
 800c47c:	0800c4fb 	.word	0x0800c4fb
 800c480:	0800c4fb 	.word	0x0800c4fb
 800c484:	0800c4fb 	.word	0x0800c4fb
 800c488:	0800c4fb 	.word	0x0800c4fb
 800c48c:	0800c4ed 	.word	0x0800c4ed
 800c490:	2b40      	cmp	r3, #64	; 0x40
 800c492:	d02e      	beq.n	800c4f2 <UART_SetConfig+0xab2>
 800c494:	e031      	b.n	800c4fa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c496:	f7fc facb 	bl	8008a30 <HAL_RCC_GetPCLK1Freq>
 800c49a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c49c:	e033      	b.n	800c506 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c49e:	f7fc fadd 	bl	8008a5c <HAL_RCC_GetPCLK2Freq>
 800c4a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c4a4:	e02f      	b.n	800c506 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fd fe3c 	bl	800a128 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4b4:	e027      	b.n	800c506 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4b6:	f107 0318 	add.w	r3, r7, #24
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fd ff88 	bl	800a3d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c4:	e01f      	b.n	800c506 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4c6:	4b69      	ldr	r3, [pc, #420]	; (800c66c <UART_SetConfig+0xc2c>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 0320 	and.w	r3, r3, #32
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d009      	beq.n	800c4e6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c4d2:	4b66      	ldr	r3, [pc, #408]	; (800c66c <UART_SetConfig+0xc2c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	08db      	lsrs	r3, r3, #3
 800c4d8:	f003 0303 	and.w	r3, r3, #3
 800c4dc:	4a64      	ldr	r2, [pc, #400]	; (800c670 <UART_SetConfig+0xc30>)
 800c4de:	fa22 f303 	lsr.w	r3, r2, r3
 800c4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c4e4:	e00f      	b.n	800c506 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800c4e6:	4b62      	ldr	r3, [pc, #392]	; (800c670 <UART_SetConfig+0xc30>)
 800c4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ea:	e00c      	b.n	800c506 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c4ec:	4b61      	ldr	r3, [pc, #388]	; (800c674 <UART_SetConfig+0xc34>)
 800c4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4f0:	e009      	b.n	800c506 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4f8:	e005      	b.n	800c506 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c504:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f000 80ea 	beq.w	800c6e2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c512:	4a55      	ldr	r2, [pc, #340]	; (800c668 <UART_SetConfig+0xc28>)
 800c514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c518:	461a      	mov	r2, r3
 800c51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c51c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c520:	005a      	lsls	r2, r3, #1
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	085b      	lsrs	r3, r3, #1
 800c528:	441a      	add	r2, r3
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c532:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c536:	2b0f      	cmp	r3, #15
 800c538:	d916      	bls.n	800c568 <UART_SetConfig+0xb28>
 800c53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c540:	d212      	bcs.n	800c568 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c544:	b29b      	uxth	r3, r3
 800c546:	f023 030f 	bic.w	r3, r3, #15
 800c54a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54e:	085b      	lsrs	r3, r3, #1
 800c550:	b29b      	uxth	r3, r3
 800c552:	f003 0307 	and.w	r3, r3, #7
 800c556:	b29a      	uxth	r2, r3
 800c558:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c55a:	4313      	orrs	r3, r2
 800c55c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c564:	60da      	str	r2, [r3, #12]
 800c566:	e0bc      	b.n	800c6e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c568:	2301      	movs	r3, #1
 800c56a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c56e:	e0b8      	b.n	800c6e2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c570:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c574:	2b20      	cmp	r3, #32
 800c576:	dc4b      	bgt.n	800c610 <UART_SetConfig+0xbd0>
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f2c0 8087 	blt.w	800c68c <UART_SetConfig+0xc4c>
 800c57e:	2b20      	cmp	r3, #32
 800c580:	f200 8084 	bhi.w	800c68c <UART_SetConfig+0xc4c>
 800c584:	a201      	add	r2, pc, #4	; (adr r2, 800c58c <UART_SetConfig+0xb4c>)
 800c586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c58a:	bf00      	nop
 800c58c:	0800c617 	.word	0x0800c617
 800c590:	0800c61f 	.word	0x0800c61f
 800c594:	0800c68d 	.word	0x0800c68d
 800c598:	0800c68d 	.word	0x0800c68d
 800c59c:	0800c627 	.word	0x0800c627
 800c5a0:	0800c68d 	.word	0x0800c68d
 800c5a4:	0800c68d 	.word	0x0800c68d
 800c5a8:	0800c68d 	.word	0x0800c68d
 800c5ac:	0800c637 	.word	0x0800c637
 800c5b0:	0800c68d 	.word	0x0800c68d
 800c5b4:	0800c68d 	.word	0x0800c68d
 800c5b8:	0800c68d 	.word	0x0800c68d
 800c5bc:	0800c68d 	.word	0x0800c68d
 800c5c0:	0800c68d 	.word	0x0800c68d
 800c5c4:	0800c68d 	.word	0x0800c68d
 800c5c8:	0800c68d 	.word	0x0800c68d
 800c5cc:	0800c647 	.word	0x0800c647
 800c5d0:	0800c68d 	.word	0x0800c68d
 800c5d4:	0800c68d 	.word	0x0800c68d
 800c5d8:	0800c68d 	.word	0x0800c68d
 800c5dc:	0800c68d 	.word	0x0800c68d
 800c5e0:	0800c68d 	.word	0x0800c68d
 800c5e4:	0800c68d 	.word	0x0800c68d
 800c5e8:	0800c68d 	.word	0x0800c68d
 800c5ec:	0800c68d 	.word	0x0800c68d
 800c5f0:	0800c68d 	.word	0x0800c68d
 800c5f4:	0800c68d 	.word	0x0800c68d
 800c5f8:	0800c68d 	.word	0x0800c68d
 800c5fc:	0800c68d 	.word	0x0800c68d
 800c600:	0800c68d 	.word	0x0800c68d
 800c604:	0800c68d 	.word	0x0800c68d
 800c608:	0800c68d 	.word	0x0800c68d
 800c60c:	0800c67f 	.word	0x0800c67f
 800c610:	2b40      	cmp	r3, #64	; 0x40
 800c612:	d037      	beq.n	800c684 <UART_SetConfig+0xc44>
 800c614:	e03a      	b.n	800c68c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c616:	f7fc fa0b 	bl	8008a30 <HAL_RCC_GetPCLK1Freq>
 800c61a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c61c:	e03c      	b.n	800c698 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c61e:	f7fc fa1d 	bl	8008a5c <HAL_RCC_GetPCLK2Freq>
 800c622:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c624:	e038      	b.n	800c698 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7fd fd7c 	bl	800a128 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c634:	e030      	b.n	800c698 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c636:	f107 0318 	add.w	r3, r7, #24
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7fd fec8 	bl	800a3d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c644:	e028      	b.n	800c698 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c646:	4b09      	ldr	r3, [pc, #36]	; (800c66c <UART_SetConfig+0xc2c>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f003 0320 	and.w	r3, r3, #32
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d012      	beq.n	800c678 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c652:	4b06      	ldr	r3, [pc, #24]	; (800c66c <UART_SetConfig+0xc2c>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	08db      	lsrs	r3, r3, #3
 800c658:	f003 0303 	and.w	r3, r3, #3
 800c65c:	4a04      	ldr	r2, [pc, #16]	; (800c670 <UART_SetConfig+0xc30>)
 800c65e:	fa22 f303 	lsr.w	r3, r2, r3
 800c662:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c664:	e018      	b.n	800c698 <UART_SetConfig+0xc58>
 800c666:	bf00      	nop
 800c668:	0800d1e8 	.word	0x0800d1e8
 800c66c:	58024400 	.word	0x58024400
 800c670:	03d09000 	.word	0x03d09000
 800c674:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c678:	4b24      	ldr	r3, [pc, #144]	; (800c70c <UART_SetConfig+0xccc>)
 800c67a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c67c:	e00c      	b.n	800c698 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c67e:	4b24      	ldr	r3, [pc, #144]	; (800c710 <UART_SetConfig+0xcd0>)
 800c680:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c682:	e009      	b.n	800c698 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c688:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c68a:	e005      	b.n	800c698 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c68c:	2300      	movs	r3, #0
 800c68e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c690:	2301      	movs	r3, #1
 800c692:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c696:	bf00      	nop
    }

    if (pclk != 0U)
 800c698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d021      	beq.n	800c6e2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a2:	4a1c      	ldr	r2, [pc, #112]	; (800c714 <UART_SetConfig+0xcd4>)
 800c6a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	085b      	lsrs	r3, r3, #1
 800c6b6:	441a      	add	r2, r3
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6c0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c4:	2b0f      	cmp	r3, #15
 800c6c6:	d909      	bls.n	800c6dc <UART_SetConfig+0xc9c>
 800c6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6ce:	d205      	bcs.n	800c6dc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	60da      	str	r2, [r3, #12]
 800c6da:	e002      	b.n	800c6e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c6fe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c702:	4618      	mov	r0, r3
 800c704:	3748      	adds	r7, #72	; 0x48
 800c706:	46bd      	mov	sp, r7
 800c708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c70c:	03d09000 	.word	0x03d09000
 800c710:	003d0900 	.word	0x003d0900
 800c714:	0800d1e8 	.word	0x0800d1e8

0800c718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c724:	f003 0301 	and.w	r3, r3, #1
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00a      	beq.n	800c742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	430a      	orrs	r2, r1
 800c740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c746:	f003 0302 	and.w	r3, r3, #2
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00a      	beq.n	800c764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	430a      	orrs	r2, r1
 800c762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c768:	f003 0304 	and.w	r3, r3, #4
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00a      	beq.n	800c786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	430a      	orrs	r2, r1
 800c784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78a:	f003 0308 	and.w	r3, r3, #8
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00a      	beq.n	800c7a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	430a      	orrs	r2, r1
 800c7a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ac:	f003 0310 	and.w	r3, r3, #16
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00a      	beq.n	800c7ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	689b      	ldr	r3, [r3, #8]
 800c7ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	430a      	orrs	r2, r1
 800c7c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ce:	f003 0320 	and.w	r3, r3, #32
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00a      	beq.n	800c7ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	430a      	orrs	r2, r1
 800c7ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d01a      	beq.n	800c82e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	430a      	orrs	r2, r1
 800c80c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c816:	d10a      	bne.n	800c82e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	430a      	orrs	r2, r1
 800c82c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00a      	beq.n	800c850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	430a      	orrs	r2, r1
 800c84e:	605a      	str	r2, [r3, #4]
  }
}
 800c850:	bf00      	nop
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b086      	sub	sp, #24
 800c860:	af02      	add	r7, sp, #8
 800c862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2200      	movs	r2, #0
 800c868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c86c:	f7f6 fc1e 	bl	80030ac <HAL_GetTick>
 800c870:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f003 0308 	and.w	r3, r3, #8
 800c87c:	2b08      	cmp	r3, #8
 800c87e:	d10e      	bne.n	800c89e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2200      	movs	r2, #0
 800c88a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f82f 	bl	800c8f2 <UART_WaitOnFlagUntilTimeout>
 800c894:	4603      	mov	r3, r0
 800c896:	2b00      	cmp	r3, #0
 800c898:	d001      	beq.n	800c89e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c89a:	2303      	movs	r3, #3
 800c89c:	e025      	b.n	800c8ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f003 0304 	and.w	r3, r3, #4
 800c8a8:	2b04      	cmp	r3, #4
 800c8aa:	d10e      	bne.n	800c8ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 f819 	bl	800c8f2 <UART_WaitOnFlagUntilTimeout>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d001      	beq.n	800c8ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c8c6:	2303      	movs	r3, #3
 800c8c8:	e00f      	b.n	800c8ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2220      	movs	r2, #32
 800c8ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2220      	movs	r2, #32
 800c8d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8e8:	2300      	movs	r3, #0
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b09c      	sub	sp, #112	; 0x70
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	60f8      	str	r0, [r7, #12]
 800c8fa:	60b9      	str	r1, [r7, #8]
 800c8fc:	603b      	str	r3, [r7, #0]
 800c8fe:	4613      	mov	r3, r2
 800c900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c902:	e0a9      	b.n	800ca58 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c90a:	f000 80a5 	beq.w	800ca58 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c90e:	f7f6 fbcd 	bl	80030ac <HAL_GetTick>
 800c912:	4602      	mov	r2, r0
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	1ad3      	subs	r3, r2, r3
 800c918:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d302      	bcc.n	800c924 <UART_WaitOnFlagUntilTimeout+0x32>
 800c91e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c920:	2b00      	cmp	r3, #0
 800c922:	d140      	bne.n	800c9a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c92a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c92c:	e853 3f00 	ldrex	r3, [r3]
 800c930:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c938:	667b      	str	r3, [r7, #100]	; 0x64
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	461a      	mov	r2, r3
 800c940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c942:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c944:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c946:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c948:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c94a:	e841 2300 	strex	r3, r2, [r1]
 800c94e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1e6      	bne.n	800c924 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	3308      	adds	r3, #8
 800c95c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c960:	e853 3f00 	ldrex	r3, [r3]
 800c964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c968:	f023 0301 	bic.w	r3, r3, #1
 800c96c:	663b      	str	r3, [r7, #96]	; 0x60
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	3308      	adds	r3, #8
 800c974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c976:	64ba      	str	r2, [r7, #72]	; 0x48
 800c978:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c97c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c97e:	e841 2300 	strex	r3, r2, [r1]
 800c982:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c986:	2b00      	cmp	r3, #0
 800c988:	d1e5      	bne.n	800c956 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2220      	movs	r2, #32
 800c98e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2220      	movs	r2, #32
 800c996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2200      	movs	r2, #0
 800c99e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c9a2:	2303      	movs	r3, #3
 800c9a4:	e069      	b.n	800ca7a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f003 0304 	and.w	r3, r3, #4
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d051      	beq.n	800ca58 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	69db      	ldr	r3, [r3, #28]
 800c9ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9c2:	d149      	bne.n	800ca58 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d6:	e853 3f00 	ldrex	r3, [r3]
 800c9da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c9e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9ec:	637b      	str	r3, [r7, #52]	; 0x34
 800c9ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9f4:	e841 2300 	strex	r3, r2, [r1]
 800c9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1e6      	bne.n	800c9ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	3308      	adds	r3, #8
 800ca06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	e853 3f00 	ldrex	r3, [r3]
 800ca0e:	613b      	str	r3, [r7, #16]
   return(result);
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	f023 0301 	bic.w	r3, r3, #1
 800ca16:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	3308      	adds	r3, #8
 800ca1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca20:	623a      	str	r2, [r7, #32]
 800ca22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca24:	69f9      	ldr	r1, [r7, #28]
 800ca26:	6a3a      	ldr	r2, [r7, #32]
 800ca28:	e841 2300 	strex	r3, r2, [r1]
 800ca2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d1e5      	bne.n	800ca00 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2220      	movs	r2, #32
 800ca38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2220      	movs	r2, #32
 800ca40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2220      	movs	r2, #32
 800ca48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ca54:	2303      	movs	r3, #3
 800ca56:	e010      	b.n	800ca7a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	69da      	ldr	r2, [r3, #28]
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	4013      	ands	r3, r2
 800ca62:	68ba      	ldr	r2, [r7, #8]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	bf0c      	ite	eq
 800ca68:	2301      	moveq	r3, #1
 800ca6a:	2300      	movne	r3, #0
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	461a      	mov	r2, r3
 800ca70:	79fb      	ldrb	r3, [r7, #7]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	f43f af46 	beq.w	800c904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3770      	adds	r7, #112	; 0x70
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca82:	b480      	push	{r7}
 800ca84:	b085      	sub	sp, #20
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d101      	bne.n	800ca98 <HAL_UARTEx_DisableFifoMode+0x16>
 800ca94:	2302      	movs	r3, #2
 800ca96:	e027      	b.n	800cae8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2224      	movs	r2, #36	; 0x24
 800caa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f022 0201 	bic.w	r2, r2, #1
 800cabe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cac6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	68fa      	ldr	r2, [r7, #12]
 800cad4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2220      	movs	r2, #32
 800cada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cae6:	2300      	movs	r3, #0
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3714      	adds	r7, #20
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d101      	bne.n	800cb0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cb08:	2302      	movs	r3, #2
 800cb0a:	e02d      	b.n	800cb68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2224      	movs	r2, #36	; 0x24
 800cb18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f022 0201 	bic.w	r2, r2, #1
 800cb32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	689b      	ldr	r3, [r3, #8]
 800cb3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	430a      	orrs	r2, r1
 800cb46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 f84f 	bl	800cbec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2220      	movs	r2, #32
 800cb5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb66:	2300      	movs	r3, #0
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d101      	bne.n	800cb88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb84:	2302      	movs	r3, #2
 800cb86:	e02d      	b.n	800cbe4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2224      	movs	r2, #36	; 0x24
 800cb94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f022 0201 	bic.w	r2, r2, #1
 800cbae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	683a      	ldr	r2, [r7, #0]
 800cbc0:	430a      	orrs	r2, r1
 800cbc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 f811 	bl	800cbec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68fa      	ldr	r2, [r7, #12]
 800cbd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2220      	movs	r2, #32
 800cbd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cbe2:	2300      	movs	r3, #0
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d108      	bne.n	800cc0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2201      	movs	r2, #1
 800cc00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2201      	movs	r2, #1
 800cc08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cc0c:	e031      	b.n	800cc72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cc0e:	2310      	movs	r3, #16
 800cc10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cc12:	2310      	movs	r3, #16
 800cc14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	689b      	ldr	r3, [r3, #8]
 800cc1c:	0e5b      	lsrs	r3, r3, #25
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	f003 0307 	and.w	r3, r3, #7
 800cc24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	0f5b      	lsrs	r3, r3, #29
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	f003 0307 	and.w	r3, r3, #7
 800cc34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc36:	7bbb      	ldrb	r3, [r7, #14]
 800cc38:	7b3a      	ldrb	r2, [r7, #12]
 800cc3a:	4911      	ldr	r1, [pc, #68]	; (800cc80 <UARTEx_SetNbDataToProcess+0x94>)
 800cc3c:	5c8a      	ldrb	r2, [r1, r2]
 800cc3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc42:	7b3a      	ldrb	r2, [r7, #12]
 800cc44:	490f      	ldr	r1, [pc, #60]	; (800cc84 <UARTEx_SetNbDataToProcess+0x98>)
 800cc46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc48:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc4c:	b29a      	uxth	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
 800cc56:	7b7a      	ldrb	r2, [r7, #13]
 800cc58:	4909      	ldr	r1, [pc, #36]	; (800cc80 <UARTEx_SetNbDataToProcess+0x94>)
 800cc5a:	5c8a      	ldrb	r2, [r1, r2]
 800cc5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc60:	7b7a      	ldrb	r2, [r7, #13]
 800cc62:	4908      	ldr	r1, [pc, #32]	; (800cc84 <UARTEx_SetNbDataToProcess+0x98>)
 800cc64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc66:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc6a:	b29a      	uxth	r2, r3
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cc72:	bf00      	nop
 800cc74:	3714      	adds	r7, #20
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	0800d200 	.word	0x0800d200
 800cc84:	0800d208 	.word	0x0800d208

0800cc88 <__errno>:
 800cc88:	4b01      	ldr	r3, [pc, #4]	; (800cc90 <__errno+0x8>)
 800cc8a:	6818      	ldr	r0, [r3, #0]
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	24000014 	.word	0x24000014

0800cc94 <__libc_init_array>:
 800cc94:	b570      	push	{r4, r5, r6, lr}
 800cc96:	4d0d      	ldr	r5, [pc, #52]	; (800cccc <__libc_init_array+0x38>)
 800cc98:	4c0d      	ldr	r4, [pc, #52]	; (800ccd0 <__libc_init_array+0x3c>)
 800cc9a:	1b64      	subs	r4, r4, r5
 800cc9c:	10a4      	asrs	r4, r4, #2
 800cc9e:	2600      	movs	r6, #0
 800cca0:	42a6      	cmp	r6, r4
 800cca2:	d109      	bne.n	800ccb8 <__libc_init_array+0x24>
 800cca4:	4d0b      	ldr	r5, [pc, #44]	; (800ccd4 <__libc_init_array+0x40>)
 800cca6:	4c0c      	ldr	r4, [pc, #48]	; (800ccd8 <__libc_init_array+0x44>)
 800cca8:	f000 fa4c 	bl	800d144 <_init>
 800ccac:	1b64      	subs	r4, r4, r5
 800ccae:	10a4      	asrs	r4, r4, #2
 800ccb0:	2600      	movs	r6, #0
 800ccb2:	42a6      	cmp	r6, r4
 800ccb4:	d105      	bne.n	800ccc2 <__libc_init_array+0x2e>
 800ccb6:	bd70      	pop	{r4, r5, r6, pc}
 800ccb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccbc:	4798      	blx	r3
 800ccbe:	3601      	adds	r6, #1
 800ccc0:	e7ee      	b.n	800cca0 <__libc_init_array+0xc>
 800ccc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccc6:	4798      	blx	r3
 800ccc8:	3601      	adds	r6, #1
 800ccca:	e7f2      	b.n	800ccb2 <__libc_init_array+0x1e>
 800cccc:	0800d358 	.word	0x0800d358
 800ccd0:	0800d358 	.word	0x0800d358
 800ccd4:	0800d358 	.word	0x0800d358
 800ccd8:	0800d35c 	.word	0x0800d35c

0800ccdc <malloc>:
 800ccdc:	4b02      	ldr	r3, [pc, #8]	; (800cce8 <malloc+0xc>)
 800ccde:	4601      	mov	r1, r0
 800cce0:	6818      	ldr	r0, [r3, #0]
 800cce2:	f000 b87f 	b.w	800cde4 <_malloc_r>
 800cce6:	bf00      	nop
 800cce8:	24000014 	.word	0x24000014

0800ccec <free>:
 800ccec:	4b02      	ldr	r3, [pc, #8]	; (800ccf8 <free+0xc>)
 800ccee:	4601      	mov	r1, r0
 800ccf0:	6818      	ldr	r0, [r3, #0]
 800ccf2:	f000 b80b 	b.w	800cd0c <_free_r>
 800ccf6:	bf00      	nop
 800ccf8:	24000014 	.word	0x24000014

0800ccfc <memset>:
 800ccfc:	4402      	add	r2, r0
 800ccfe:	4603      	mov	r3, r0
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d100      	bne.n	800cd06 <memset+0xa>
 800cd04:	4770      	bx	lr
 800cd06:	f803 1b01 	strb.w	r1, [r3], #1
 800cd0a:	e7f9      	b.n	800cd00 <memset+0x4>

0800cd0c <_free_r>:
 800cd0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd0e:	2900      	cmp	r1, #0
 800cd10:	d044      	beq.n	800cd9c <_free_r+0x90>
 800cd12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd16:	9001      	str	r0, [sp, #4]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	f1a1 0404 	sub.w	r4, r1, #4
 800cd1e:	bfb8      	it	lt
 800cd20:	18e4      	addlt	r4, r4, r3
 800cd22:	f000 f8e3 	bl	800ceec <__malloc_lock>
 800cd26:	4a1e      	ldr	r2, [pc, #120]	; (800cda0 <_free_r+0x94>)
 800cd28:	9801      	ldr	r0, [sp, #4]
 800cd2a:	6813      	ldr	r3, [r2, #0]
 800cd2c:	b933      	cbnz	r3, 800cd3c <_free_r+0x30>
 800cd2e:	6063      	str	r3, [r4, #4]
 800cd30:	6014      	str	r4, [r2, #0]
 800cd32:	b003      	add	sp, #12
 800cd34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd38:	f000 b8de 	b.w	800cef8 <__malloc_unlock>
 800cd3c:	42a3      	cmp	r3, r4
 800cd3e:	d908      	bls.n	800cd52 <_free_r+0x46>
 800cd40:	6825      	ldr	r5, [r4, #0]
 800cd42:	1961      	adds	r1, r4, r5
 800cd44:	428b      	cmp	r3, r1
 800cd46:	bf01      	itttt	eq
 800cd48:	6819      	ldreq	r1, [r3, #0]
 800cd4a:	685b      	ldreq	r3, [r3, #4]
 800cd4c:	1949      	addeq	r1, r1, r5
 800cd4e:	6021      	streq	r1, [r4, #0]
 800cd50:	e7ed      	b.n	800cd2e <_free_r+0x22>
 800cd52:	461a      	mov	r2, r3
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	b10b      	cbz	r3, 800cd5c <_free_r+0x50>
 800cd58:	42a3      	cmp	r3, r4
 800cd5a:	d9fa      	bls.n	800cd52 <_free_r+0x46>
 800cd5c:	6811      	ldr	r1, [r2, #0]
 800cd5e:	1855      	adds	r5, r2, r1
 800cd60:	42a5      	cmp	r5, r4
 800cd62:	d10b      	bne.n	800cd7c <_free_r+0x70>
 800cd64:	6824      	ldr	r4, [r4, #0]
 800cd66:	4421      	add	r1, r4
 800cd68:	1854      	adds	r4, r2, r1
 800cd6a:	42a3      	cmp	r3, r4
 800cd6c:	6011      	str	r1, [r2, #0]
 800cd6e:	d1e0      	bne.n	800cd32 <_free_r+0x26>
 800cd70:	681c      	ldr	r4, [r3, #0]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	6053      	str	r3, [r2, #4]
 800cd76:	4421      	add	r1, r4
 800cd78:	6011      	str	r1, [r2, #0]
 800cd7a:	e7da      	b.n	800cd32 <_free_r+0x26>
 800cd7c:	d902      	bls.n	800cd84 <_free_r+0x78>
 800cd7e:	230c      	movs	r3, #12
 800cd80:	6003      	str	r3, [r0, #0]
 800cd82:	e7d6      	b.n	800cd32 <_free_r+0x26>
 800cd84:	6825      	ldr	r5, [r4, #0]
 800cd86:	1961      	adds	r1, r4, r5
 800cd88:	428b      	cmp	r3, r1
 800cd8a:	bf04      	itt	eq
 800cd8c:	6819      	ldreq	r1, [r3, #0]
 800cd8e:	685b      	ldreq	r3, [r3, #4]
 800cd90:	6063      	str	r3, [r4, #4]
 800cd92:	bf04      	itt	eq
 800cd94:	1949      	addeq	r1, r1, r5
 800cd96:	6021      	streq	r1, [r4, #0]
 800cd98:	6054      	str	r4, [r2, #4]
 800cd9a:	e7ca      	b.n	800cd32 <_free_r+0x26>
 800cd9c:	b003      	add	sp, #12
 800cd9e:	bd30      	pop	{r4, r5, pc}
 800cda0:	24000d28 	.word	0x24000d28

0800cda4 <sbrk_aligned>:
 800cda4:	b570      	push	{r4, r5, r6, lr}
 800cda6:	4e0e      	ldr	r6, [pc, #56]	; (800cde0 <sbrk_aligned+0x3c>)
 800cda8:	460c      	mov	r4, r1
 800cdaa:	6831      	ldr	r1, [r6, #0]
 800cdac:	4605      	mov	r5, r0
 800cdae:	b911      	cbnz	r1, 800cdb6 <sbrk_aligned+0x12>
 800cdb0:	f000 f88c 	bl	800cecc <_sbrk_r>
 800cdb4:	6030      	str	r0, [r6, #0]
 800cdb6:	4621      	mov	r1, r4
 800cdb8:	4628      	mov	r0, r5
 800cdba:	f000 f887 	bl	800cecc <_sbrk_r>
 800cdbe:	1c43      	adds	r3, r0, #1
 800cdc0:	d00a      	beq.n	800cdd8 <sbrk_aligned+0x34>
 800cdc2:	1cc4      	adds	r4, r0, #3
 800cdc4:	f024 0403 	bic.w	r4, r4, #3
 800cdc8:	42a0      	cmp	r0, r4
 800cdca:	d007      	beq.n	800cddc <sbrk_aligned+0x38>
 800cdcc:	1a21      	subs	r1, r4, r0
 800cdce:	4628      	mov	r0, r5
 800cdd0:	f000 f87c 	bl	800cecc <_sbrk_r>
 800cdd4:	3001      	adds	r0, #1
 800cdd6:	d101      	bne.n	800cddc <sbrk_aligned+0x38>
 800cdd8:	f04f 34ff 	mov.w	r4, #4294967295
 800cddc:	4620      	mov	r0, r4
 800cdde:	bd70      	pop	{r4, r5, r6, pc}
 800cde0:	24000d2c 	.word	0x24000d2c

0800cde4 <_malloc_r>:
 800cde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde8:	1ccd      	adds	r5, r1, #3
 800cdea:	f025 0503 	bic.w	r5, r5, #3
 800cdee:	3508      	adds	r5, #8
 800cdf0:	2d0c      	cmp	r5, #12
 800cdf2:	bf38      	it	cc
 800cdf4:	250c      	movcc	r5, #12
 800cdf6:	2d00      	cmp	r5, #0
 800cdf8:	4607      	mov	r7, r0
 800cdfa:	db01      	blt.n	800ce00 <_malloc_r+0x1c>
 800cdfc:	42a9      	cmp	r1, r5
 800cdfe:	d905      	bls.n	800ce0c <_malloc_r+0x28>
 800ce00:	230c      	movs	r3, #12
 800ce02:	603b      	str	r3, [r7, #0]
 800ce04:	2600      	movs	r6, #0
 800ce06:	4630      	mov	r0, r6
 800ce08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce0c:	4e2e      	ldr	r6, [pc, #184]	; (800cec8 <_malloc_r+0xe4>)
 800ce0e:	f000 f86d 	bl	800ceec <__malloc_lock>
 800ce12:	6833      	ldr	r3, [r6, #0]
 800ce14:	461c      	mov	r4, r3
 800ce16:	bb34      	cbnz	r4, 800ce66 <_malloc_r+0x82>
 800ce18:	4629      	mov	r1, r5
 800ce1a:	4638      	mov	r0, r7
 800ce1c:	f7ff ffc2 	bl	800cda4 <sbrk_aligned>
 800ce20:	1c43      	adds	r3, r0, #1
 800ce22:	4604      	mov	r4, r0
 800ce24:	d14d      	bne.n	800cec2 <_malloc_r+0xde>
 800ce26:	6834      	ldr	r4, [r6, #0]
 800ce28:	4626      	mov	r6, r4
 800ce2a:	2e00      	cmp	r6, #0
 800ce2c:	d140      	bne.n	800ceb0 <_malloc_r+0xcc>
 800ce2e:	6823      	ldr	r3, [r4, #0]
 800ce30:	4631      	mov	r1, r6
 800ce32:	4638      	mov	r0, r7
 800ce34:	eb04 0803 	add.w	r8, r4, r3
 800ce38:	f000 f848 	bl	800cecc <_sbrk_r>
 800ce3c:	4580      	cmp	r8, r0
 800ce3e:	d13a      	bne.n	800ceb6 <_malloc_r+0xd2>
 800ce40:	6821      	ldr	r1, [r4, #0]
 800ce42:	3503      	adds	r5, #3
 800ce44:	1a6d      	subs	r5, r5, r1
 800ce46:	f025 0503 	bic.w	r5, r5, #3
 800ce4a:	3508      	adds	r5, #8
 800ce4c:	2d0c      	cmp	r5, #12
 800ce4e:	bf38      	it	cc
 800ce50:	250c      	movcc	r5, #12
 800ce52:	4629      	mov	r1, r5
 800ce54:	4638      	mov	r0, r7
 800ce56:	f7ff ffa5 	bl	800cda4 <sbrk_aligned>
 800ce5a:	3001      	adds	r0, #1
 800ce5c:	d02b      	beq.n	800ceb6 <_malloc_r+0xd2>
 800ce5e:	6823      	ldr	r3, [r4, #0]
 800ce60:	442b      	add	r3, r5
 800ce62:	6023      	str	r3, [r4, #0]
 800ce64:	e00e      	b.n	800ce84 <_malloc_r+0xa0>
 800ce66:	6822      	ldr	r2, [r4, #0]
 800ce68:	1b52      	subs	r2, r2, r5
 800ce6a:	d41e      	bmi.n	800ceaa <_malloc_r+0xc6>
 800ce6c:	2a0b      	cmp	r2, #11
 800ce6e:	d916      	bls.n	800ce9e <_malloc_r+0xba>
 800ce70:	1961      	adds	r1, r4, r5
 800ce72:	42a3      	cmp	r3, r4
 800ce74:	6025      	str	r5, [r4, #0]
 800ce76:	bf18      	it	ne
 800ce78:	6059      	strne	r1, [r3, #4]
 800ce7a:	6863      	ldr	r3, [r4, #4]
 800ce7c:	bf08      	it	eq
 800ce7e:	6031      	streq	r1, [r6, #0]
 800ce80:	5162      	str	r2, [r4, r5]
 800ce82:	604b      	str	r3, [r1, #4]
 800ce84:	4638      	mov	r0, r7
 800ce86:	f104 060b 	add.w	r6, r4, #11
 800ce8a:	f000 f835 	bl	800cef8 <__malloc_unlock>
 800ce8e:	f026 0607 	bic.w	r6, r6, #7
 800ce92:	1d23      	adds	r3, r4, #4
 800ce94:	1af2      	subs	r2, r6, r3
 800ce96:	d0b6      	beq.n	800ce06 <_malloc_r+0x22>
 800ce98:	1b9b      	subs	r3, r3, r6
 800ce9a:	50a3      	str	r3, [r4, r2]
 800ce9c:	e7b3      	b.n	800ce06 <_malloc_r+0x22>
 800ce9e:	6862      	ldr	r2, [r4, #4]
 800cea0:	42a3      	cmp	r3, r4
 800cea2:	bf0c      	ite	eq
 800cea4:	6032      	streq	r2, [r6, #0]
 800cea6:	605a      	strne	r2, [r3, #4]
 800cea8:	e7ec      	b.n	800ce84 <_malloc_r+0xa0>
 800ceaa:	4623      	mov	r3, r4
 800ceac:	6864      	ldr	r4, [r4, #4]
 800ceae:	e7b2      	b.n	800ce16 <_malloc_r+0x32>
 800ceb0:	4634      	mov	r4, r6
 800ceb2:	6876      	ldr	r6, [r6, #4]
 800ceb4:	e7b9      	b.n	800ce2a <_malloc_r+0x46>
 800ceb6:	230c      	movs	r3, #12
 800ceb8:	603b      	str	r3, [r7, #0]
 800ceba:	4638      	mov	r0, r7
 800cebc:	f000 f81c 	bl	800cef8 <__malloc_unlock>
 800cec0:	e7a1      	b.n	800ce06 <_malloc_r+0x22>
 800cec2:	6025      	str	r5, [r4, #0]
 800cec4:	e7de      	b.n	800ce84 <_malloc_r+0xa0>
 800cec6:	bf00      	nop
 800cec8:	24000d28 	.word	0x24000d28

0800cecc <_sbrk_r>:
 800cecc:	b538      	push	{r3, r4, r5, lr}
 800cece:	4d06      	ldr	r5, [pc, #24]	; (800cee8 <_sbrk_r+0x1c>)
 800ced0:	2300      	movs	r3, #0
 800ced2:	4604      	mov	r4, r0
 800ced4:	4608      	mov	r0, r1
 800ced6:	602b      	str	r3, [r5, #0]
 800ced8:	f7f5 fce0 	bl	800289c <_sbrk>
 800cedc:	1c43      	adds	r3, r0, #1
 800cede:	d102      	bne.n	800cee6 <_sbrk_r+0x1a>
 800cee0:	682b      	ldr	r3, [r5, #0]
 800cee2:	b103      	cbz	r3, 800cee6 <_sbrk_r+0x1a>
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	bd38      	pop	{r3, r4, r5, pc}
 800cee8:	24000d30 	.word	0x24000d30

0800ceec <__malloc_lock>:
 800ceec:	4801      	ldr	r0, [pc, #4]	; (800cef4 <__malloc_lock+0x8>)
 800ceee:	f000 b809 	b.w	800cf04 <__retarget_lock_acquire_recursive>
 800cef2:	bf00      	nop
 800cef4:	24000d34 	.word	0x24000d34

0800cef8 <__malloc_unlock>:
 800cef8:	4801      	ldr	r0, [pc, #4]	; (800cf00 <__malloc_unlock+0x8>)
 800cefa:	f000 b804 	b.w	800cf06 <__retarget_lock_release_recursive>
 800cefe:	bf00      	nop
 800cf00:	24000d34 	.word	0x24000d34

0800cf04 <__retarget_lock_acquire_recursive>:
 800cf04:	4770      	bx	lr

0800cf06 <__retarget_lock_release_recursive>:
 800cf06:	4770      	bx	lr

0800cf08 <floorf>:
 800cf08:	ee10 3a10 	vmov	r3, s0
 800cf0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800cf10:	3a7f      	subs	r2, #127	; 0x7f
 800cf12:	2a16      	cmp	r2, #22
 800cf14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cf18:	dc2a      	bgt.n	800cf70 <floorf+0x68>
 800cf1a:	2a00      	cmp	r2, #0
 800cf1c:	da11      	bge.n	800cf42 <floorf+0x3a>
 800cf1e:	eddf 7a18 	vldr	s15, [pc, #96]	; 800cf80 <floorf+0x78>
 800cf22:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cf26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cf2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf2e:	dd05      	ble.n	800cf3c <floorf+0x34>
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	da23      	bge.n	800cf7c <floorf+0x74>
 800cf34:	4a13      	ldr	r2, [pc, #76]	; (800cf84 <floorf+0x7c>)
 800cf36:	2900      	cmp	r1, #0
 800cf38:	bf18      	it	ne
 800cf3a:	4613      	movne	r3, r2
 800cf3c:	ee00 3a10 	vmov	s0, r3
 800cf40:	4770      	bx	lr
 800cf42:	4911      	ldr	r1, [pc, #68]	; (800cf88 <floorf+0x80>)
 800cf44:	4111      	asrs	r1, r2
 800cf46:	420b      	tst	r3, r1
 800cf48:	d0fa      	beq.n	800cf40 <floorf+0x38>
 800cf4a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800cf80 <floorf+0x78>
 800cf4e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cf52:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cf56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf5a:	ddef      	ble.n	800cf3c <floorf+0x34>
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	bfbe      	ittt	lt
 800cf60:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800cf64:	fa40 f202 	asrlt.w	r2, r0, r2
 800cf68:	189b      	addlt	r3, r3, r2
 800cf6a:	ea23 0301 	bic.w	r3, r3, r1
 800cf6e:	e7e5      	b.n	800cf3c <floorf+0x34>
 800cf70:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cf74:	d3e4      	bcc.n	800cf40 <floorf+0x38>
 800cf76:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cf7a:	4770      	bx	lr
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	e7dd      	b.n	800cf3c <floorf+0x34>
 800cf80:	7149f2ca 	.word	0x7149f2ca
 800cf84:	bf800000 	.word	0xbf800000
 800cf88:	007fffff 	.word	0x007fffff

0800cf8c <sinf_poly>:
 800cf8c:	07cb      	lsls	r3, r1, #31
 800cf8e:	d412      	bmi.n	800cfb6 <sinf_poly+0x2a>
 800cf90:	ee21 5b00 	vmul.f64	d5, d1, d0
 800cf94:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 800cf98:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800cf9c:	eea6 7b01 	vfma.f64	d7, d6, d1
 800cfa0:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 800cfa4:	ee21 1b05 	vmul.f64	d1, d1, d5
 800cfa8:	eea6 0b05 	vfma.f64	d0, d6, d5
 800cfac:	eea7 0b01 	vfma.f64	d0, d7, d1
 800cfb0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800cfb4:	4770      	bx	lr
 800cfb6:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 800cfba:	ee21 5b01 	vmul.f64	d5, d1, d1
 800cfbe:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800cfc2:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800cfc6:	eea1 7b06 	vfma.f64	d7, d1, d6
 800cfca:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 800cfce:	eea1 0b06 	vfma.f64	d0, d1, d6
 800cfd2:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 800cfd6:	ee21 1b05 	vmul.f64	d1, d1, d5
 800cfda:	eea5 0b06 	vfma.f64	d0, d5, d6
 800cfde:	e7e5      	b.n	800cfac <sinf_poly+0x20>

0800cfe0 <sinf>:
 800cfe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfe2:	ee10 4a10 	vmov	r4, s0
 800cfe6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800cfea:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800cfee:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800cff2:	eef0 7a40 	vmov.f32	s15, s0
 800cff6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800cffa:	d218      	bcs.n	800d02e <sinf+0x4e>
 800cffc:	ee26 1b06 	vmul.f64	d1, d6, d6
 800d000:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800d004:	d20a      	bcs.n	800d01c <sinf+0x3c>
 800d006:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800d00a:	d103      	bne.n	800d014 <sinf+0x34>
 800d00c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800d010:	ed8d 1a01 	vstr	s2, [sp, #4]
 800d014:	eeb0 0a67 	vmov.f32	s0, s15
 800d018:	b003      	add	sp, #12
 800d01a:	bd30      	pop	{r4, r5, pc}
 800d01c:	483a      	ldr	r0, [pc, #232]	; (800d108 <sinf+0x128>)
 800d01e:	eeb0 0b46 	vmov.f64	d0, d6
 800d022:	2100      	movs	r1, #0
 800d024:	b003      	add	sp, #12
 800d026:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d02a:	f7ff bfaf 	b.w	800cf8c <sinf_poly>
 800d02e:	f240 422e 	movw	r2, #1070	; 0x42e
 800d032:	4293      	cmp	r3, r2
 800d034:	d824      	bhi.n	800d080 <sinf+0xa0>
 800d036:	4b34      	ldr	r3, [pc, #208]	; (800d108 <sinf+0x128>)
 800d038:	ed93 7b08 	vldr	d7, [r3, #32]
 800d03c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d040:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d044:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d048:	ee17 1a90 	vmov	r1, s15
 800d04c:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800d050:	1609      	asrs	r1, r1, #24
 800d052:	ee07 1a90 	vmov	s15, r1
 800d056:	f001 0203 	and.w	r2, r1, #3
 800d05a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800d05e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d062:	ed92 0b00 	vldr	d0, [r2]
 800d066:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800d06a:	f011 0f02 	tst.w	r1, #2
 800d06e:	eea5 6b47 	vfms.f64	d6, d5, d7
 800d072:	bf08      	it	eq
 800d074:	4618      	moveq	r0, r3
 800d076:	ee26 1b06 	vmul.f64	d1, d6, d6
 800d07a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800d07e:	e7d1      	b.n	800d024 <sinf+0x44>
 800d080:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800d084:	d237      	bcs.n	800d0f6 <sinf+0x116>
 800d086:	4a21      	ldr	r2, [pc, #132]	; (800d10c <sinf+0x12c>)
 800d088:	f3c4 6183 	ubfx	r1, r4, #26, #4
 800d08c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800d090:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800d094:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800d098:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d09c:	4083      	lsls	r3, r0
 800d09e:	6a28      	ldr	r0, [r5, #32]
 800d0a0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d0a4:	fba3 1000 	umull	r1, r0, r3, r0
 800d0a8:	6929      	ldr	r1, [r5, #16]
 800d0aa:	435a      	muls	r2, r3
 800d0ac:	fbe3 0201 	umlal	r0, r2, r3, r1
 800d0b0:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 800d0b4:	0f8d      	lsrs	r5, r1, #30
 800d0b6:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800d0ba:	1a51      	subs	r1, r2, r1
 800d0bc:	f7f3 faa6 	bl	800060c <__aeabi_l2d>
 800d0c0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800d0c4:	4b10      	ldr	r3, [pc, #64]	; (800d108 <sinf+0x128>)
 800d0c6:	f004 0203 	and.w	r2, r4, #3
 800d0ca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800d0ce:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800d100 <sinf+0x120>
 800d0d2:	ed92 0b00 	vldr	d0, [r2]
 800d0d6:	ec41 0b16 	vmov	d6, r0, r1
 800d0da:	f014 0f02 	tst.w	r4, #2
 800d0de:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d0e2:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d0e6:	4629      	mov	r1, r5
 800d0e8:	bf08      	it	eq
 800d0ea:	4618      	moveq	r0, r3
 800d0ec:	ee27 1b07 	vmul.f64	d1, d7, d7
 800d0f0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d0f4:	e796      	b.n	800d024 <sinf+0x44>
 800d0f6:	b003      	add	sp, #12
 800d0f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0fc:	f000 b813 	b.w	800d126 <__math_invalidf>
 800d100:	54442d18 	.word	0x54442d18
 800d104:	3c1921fb 	.word	0x3c1921fb
 800d108:	0800d270 	.word	0x0800d270
 800d10c:	0800d210 	.word	0x0800d210

0800d110 <with_errnof>:
 800d110:	b513      	push	{r0, r1, r4, lr}
 800d112:	4604      	mov	r4, r0
 800d114:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d118:	f7ff fdb6 	bl	800cc88 <__errno>
 800d11c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800d120:	6004      	str	r4, [r0, #0]
 800d122:	b002      	add	sp, #8
 800d124:	bd10      	pop	{r4, pc}

0800d126 <__math_invalidf>:
 800d126:	eef0 7a40 	vmov.f32	s15, s0
 800d12a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d12e:	eef4 7a67 	vcmp.f32	s15, s15
 800d132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d136:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800d13a:	d602      	bvs.n	800d142 <__math_invalidf+0x1c>
 800d13c:	2021      	movs	r0, #33	; 0x21
 800d13e:	f7ff bfe7 	b.w	800d110 <with_errnof>
 800d142:	4770      	bx	lr

0800d144 <_init>:
 800d144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d146:	bf00      	nop
 800d148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d14a:	bc08      	pop	{r3}
 800d14c:	469e      	mov	lr, r3
 800d14e:	4770      	bx	lr

0800d150 <_fini>:
 800d150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d152:	bf00      	nop
 800d154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d156:	bc08      	pop	{r3}
 800d158:	469e      	mov	lr, r3
 800d15a:	4770      	bx	lr
