
thesis-2-nucleo-h7a3zi-q.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6f4  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800b9a8  0800b9a8  0001b9a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800bb70  0800bb70  0001bb70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800bb74  0800bb74  0001bb74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  0800bb78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000c30  24000078  0800bbf0  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000ca8  0800bbf0  00020ca8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001e130  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003f4c  00000000  00000000  0003e1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001840  00000000  00000000  00042128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001658  00000000  00000000  00043968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000342ab  00000000  00000000  00044fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00020f52  00000000  00000000  0007926b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014f763  00000000  00000000  0009a1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001e9920  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006938  00000000  00000000  001e9970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800b98c 	.word	0x0800b98c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800b98c 	.word	0x0800b98c

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <Chorus_Init>:
#include <stdlib.h>
#include <math.h>

ChorusEffect* chorus = NULL;

void Chorus_Init(int sampleRate) {
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	if(chorus != NULL) return;
 8000670:	4b5a      	ldr	r3, [pc, #360]	; (80007dc <Chorus_Init+0x174>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	f040 80ac 	bne.w	80007d2 <Chorus_Init+0x16a>

	chorus = malloc(sizeof(ChorusEffect));
 800067a:	2054      	movs	r0, #84	; 0x54
 800067c:	f00a ff50 	bl	800b520 <malloc>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	4b55      	ldr	r3, [pc, #340]	; (80007dc <Chorus_Init+0x174>)
 8000686:	601a      	str	r2, [r3, #0]
	chorus->phase = 1.0f;
 8000688:	4b54      	ldr	r3, [pc, #336]	; (80007dc <Chorus_Init+0x174>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000690:	651a      	str	r2, [r3, #80]	; 0x50
	chorus->rate = 1.0f;
 8000692:	4b52      	ldr	r3, [pc, #328]	; (80007dc <Chorus_Init+0x174>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800069a:	611a      	str	r2, [r3, #16]
	chorus->sampleRate = sampleRate;
 800069c:	4b4f      	ldr	r3, [pc, #316]	; (80007dc <Chorus_Init+0x174>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	ee07 2a90 	vmov	s15, r2
 80006a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006aa:	edc3 7a06 	vstr	s15, [r3, #24]
	chorus->delayTime = 7.0f;
 80006ae:	4b4b      	ldr	r3, [pc, #300]	; (80007dc <Chorus_Init+0x174>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a4b      	ldr	r2, [pc, #300]	; (80007e0 <Chorus_Init+0x178>)
 80006b4:	61da      	str	r2, [r3, #28]
	chorus->z1 = 0.0f;
 80006b6:	4b49      	ldr	r3, [pc, #292]	; (80007dc <Chorus_Init+0x174>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f04f 0200 	mov.w	r2, #0
 80006be:	639a      	str	r2, [r3, #56]	; 0x38
	chorus->sign = 0;
 80006c0:	4b46      	ldr	r3, [pc, #280]	; (80007dc <Chorus_Init+0x174>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f04f 0200 	mov.w	r2, #0
 80006c8:	641a      	str	r2, [r3, #64]	; 0x40
	chorus->lfoPhase = chorus->phase * 2.0f - 1.0f;
 80006ca:	4b44      	ldr	r3, [pc, #272]	; (80007dc <Chorus_Init+0x174>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80006d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80006d6:	4b41      	ldr	r3, [pc, #260]	; (80007dc <Chorus_Init+0x174>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006e2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	chorus->lfoStepSize = (4.0f * chorus->rate / chorus->sampleRate);
 80006e6:	4b3d      	ldr	r3, [pc, #244]	; (80007dc <Chorus_Init+0x174>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80006ee:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80006f2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80006f6:	4b39      	ldr	r3, [pc, #228]	; (80007dc <Chorus_Init+0x174>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	ed93 7a06 	vldr	s14, [r3, #24]
 80006fe:	4b37      	ldr	r3, [pc, #220]	; (80007dc <Chorus_Init+0x174>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000706:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	chorus->lfoSign = 1.0f;
 800070a:	4b34      	ldr	r3, [pc, #208]	; (80007dc <Chorus_Init+0x174>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000712:	64da      	str	r2, [r3, #76]	; 0x4c

	chorus->delayLineLength = ((int)floorf(chorus->delayTime * sampleRate * 0.001f) * 2);
 8000714:	4b31      	ldr	r3, [pc, #196]	; (80007dc <Chorus_Init+0x174>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	ed93 7a07 	vldr	s14, [r3, #28]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	ee07 3a90 	vmov	s15, r3
 8000722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800072a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80007e4 <Chorus_Init+0x17c>
 800072e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000732:	eeb0 0a67 	vmov.f32	s0, s15
 8000736:	f00b f809 	bl	800b74c <floorf>
 800073a:	eef0 7a40 	vmov.f32	s15, s0
 800073e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000742:	ee17 2a90 	vmov	r2, s15
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <Chorus_Init+0x174>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	0052      	lsls	r2, r2, #1
 800074c:	60da      	str	r2, [r3, #12]
	chorus->delayLineStart = malloc(chorus->delayLineLength * sizeof(float));
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <Chorus_Init+0x174>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4a21      	ldr	r2, [pc, #132]	; (80007dc <Chorus_Init+0x174>)
 8000758:	6814      	ldr	r4, [r2, #0]
 800075a:	4618      	mov	r0, r3
 800075c:	f00a fee0 	bl	800b520 <malloc>
 8000760:	4603      	mov	r3, r0
 8000762:	6023      	str	r3, [r4, #0]

	chorus->delayLineEnd = chorus->delayLineStart + chorus->delayLineLength;
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <Chorus_Init+0x174>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6819      	ldr	r1, [r3, #0]
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <Chorus_Init+0x174>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	009a      	lsls	r2, r3, #2
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <Chorus_Init+0x174>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	440a      	add	r2, r1
 8000778:	605a      	str	r2, [r3, #4]
	chorus->writePtr = chorus->delayLineStart;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <Chorus_Init+0x174>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <Chorus_Init+0x174>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	6812      	ldr	r2, [r2, #0]
 8000784:	609a      	str	r2, [r3, #8]

	do {
		*chorus->writePtr = 0.0f;
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <Chorus_Init+0x174>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	f04f 0200 	mov.w	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
	}
	while (++chorus->writePtr < chorus->delayLineEnd);
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <Chorus_Init+0x174>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	689a      	ldr	r2, [r3, #8]
 8000798:	3204      	adds	r2, #4
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	689a      	ldr	r2, [r3, #8]
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <Chorus_Init+0x174>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d3ee      	bcc.n	8000786 <Chorus_Init+0x11e>

	chorus->writePtr = chorus->delayLineStart + chorus->delayLineLength - 1;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <Chorus_Init+0x174>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6819      	ldr	r1, [r3, #0]
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <Chorus_Init+0x174>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	461a      	mov	r2, r3
 80007b6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80007ba:	4413      	add	r3, r2
 80007bc:	009a      	lsls	r2, r3, #2
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <Chorus_Init+0x174>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	440a      	add	r2, r1
 80007c4:	609a      	str	r2, [r3, #8]
	chorus->delayLineOutput = 0.0f;
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <Chorus_Init+0x174>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f04f 0200 	mov.w	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	e000      	b.n	80007d4 <Chorus_Init+0x16c>
	if(chorus != NULL) return;
 80007d2:	bf00      	nop
}
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd90      	pop	{r4, r7, pc}
 80007da:	bf00      	nop
 80007dc:	24000094 	.word	0x24000094
 80007e0:	40e00000 	.word	0x40e00000
 80007e4:	3a83126f 	.word	0x3a83126f

080007e8 <Chorus_LFO>:

float Chorus_LFO() {
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
	if (chorus->lfoPhase >= 1.0f)
 80007ec:	4b1f      	ldr	r3, [pc, #124]	; (800086c <Chorus_LFO+0x84>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80007f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80007f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000800:	db04      	blt.n	800080c <Chorus_LFO+0x24>
	{
		chorus->lfoSign = -1.0f;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <Chorus_LFO+0x84>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a1a      	ldr	r2, [pc, #104]	; (8000870 <Chorus_LFO+0x88>)
 8000808:	64da      	str	r2, [r3, #76]	; 0x4c
 800080a:	e00f      	b.n	800082c <Chorus_LFO+0x44>
	}
	else if (chorus->lfoPhase <= -1.0f)
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <Chorus_LFO+0x84>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000814:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800081c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000820:	d804      	bhi.n	800082c <Chorus_LFO+0x44>
	{
		chorus->lfoSign = +1.0f;
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <Chorus_LFO+0x84>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800082a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	chorus->lfoPhase += chorus->lfoStepSize * chorus->lfoSign;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <Chorus_LFO+0x84>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <Chorus_LFO+0x84>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <Chorus_LFO+0x84>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8000844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <Chorus_LFO+0x84>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000850:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	return chorus->lfoPhase;
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <Chorus_LFO+0x84>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	ee07 3a90 	vmov	s15, r3
}
 800085e:	eeb0 0a67 	vmov.f32	s0, s15
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	24000094 	.word	0x24000094
 8000870:	bf800000 	.word	0xbf800000

08000874 <Chorus_Process>:

float Chorus_Process(float sample) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	ed87 0a01 	vstr	s0, [r7, #4]
	chorus->offset = (Chorus_LFO() * 0.3f + 0.4f) * chorus->delayTime * chorus->sampleRate * 0.001f;
 800087e:	f7ff ffb3 	bl	80007e8 <Chorus_LFO>
 8000882:	eef0 7a40 	vmov.f32	s15, s0
 8000886:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8000a08 <Chorus_Process+0x194>
 800088a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800088e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8000a0c <Chorus_Process+0x198>
 8000892:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000896:	4b5e      	ldr	r3, [pc, #376]	; (8000a10 <Chorus_Process+0x19c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	edd3 7a07 	vldr	s15, [r3, #28]
 800089e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008a2:	4b5b      	ldr	r3, [pc, #364]	; (8000a10 <Chorus_Process+0x19c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80008aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ae:	4b58      	ldr	r3, [pc, #352]	; (8000a10 <Chorus_Process+0x19c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8000a14 <Chorus_Process+0x1a0>
 80008b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ba:	edc3 7a08 	vstr	s15, [r3, #32]
	int offset = (int)floorf(chorus->offset);
 80008be:	4b54      	ldr	r3, [pc, #336]	; (8000a10 <Chorus_Process+0x19c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80008c6:	eeb0 0a67 	vmov.f32	s0, s15
 80008ca:	f00a ff3f 	bl	800b74c <floorf>
 80008ce:	eef0 7a40 	vmov.f32	s15, s0
 80008d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008d6:	ee17 3a90 	vmov	r3, s15
 80008da:	60fb      	str	r3, [r7, #12]

	chorus->ptr = chorus->writePtr - offset;
 80008dc:	4b4c      	ldr	r3, [pc, #304]	; (8000a10 <Chorus_Process+0x19c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	6899      	ldr	r1, [r3, #8]
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	425a      	negs	r2, r3
 80008e8:	4b49      	ldr	r3, [pc, #292]	; (8000a10 <Chorus_Process+0x19c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	440a      	add	r2, r1
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c

	if (chorus->ptr < chorus->delayLineStart)
 80008f0:	4b47      	ldr	r3, [pc, #284]	; (8000a10 <Chorus_Process+0x19c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008f6:	4b46      	ldr	r3, [pc, #280]	; (8000a10 <Chorus_Process+0x19c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d20a      	bcs.n	8000916 <Chorus_Process+0xa2>
		chorus->ptr += chorus->delayLineLength;
 8000900:	4b43      	ldr	r3, [pc, #268]	; (8000a10 <Chorus_Process+0x19c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000906:	4b42      	ldr	r3, [pc, #264]	; (8000a10 <Chorus_Process+0x19c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	009a      	lsls	r2, r3, #2
 800090e:	4b40      	ldr	r3, [pc, #256]	; (8000a10 <Chorus_Process+0x19c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	440a      	add	r2, r1
 8000914:	62da      	str	r2, [r3, #44]	; 0x2c

	chorus->ptr2 = chorus->ptr - 1;
 8000916:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <Chorus_Process+0x19c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800091c:	4b3c      	ldr	r3, [pc, #240]	; (8000a10 <Chorus_Process+0x19c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	3a04      	subs	r2, #4
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
	if (chorus->ptr2 < chorus->delayLineStart)
 8000924:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <Chorus_Process+0x19c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800092a:	4b39      	ldr	r3, [pc, #228]	; (8000a10 <Chorus_Process+0x19c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	429a      	cmp	r2, r3
 8000932:	d20a      	bcs.n	800094a <Chorus_Process+0xd6>
		chorus->ptr2 += chorus->delayLineLength;
 8000934:	4b36      	ldr	r3, [pc, #216]	; (8000a10 <Chorus_Process+0x19c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800093a:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <Chorus_Process+0x19c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	009a      	lsls	r2, r3, #2
 8000942:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <Chorus_Process+0x19c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	440a      	add	r2, r1
 8000948:	631a      	str	r2, [r3, #48]	; 0x30

	chorus->frac = chorus->offset - offset;
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <Chorus_Process+0x19c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	ed93 7a08 	vldr	s14, [r3, #32]
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	ee07 3a90 	vmov	s15, r3
 8000958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095c:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <Chorus_Process+0x19c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000964:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	chorus->delayLineOutput = *chorus->ptr2 + *chorus->ptr * (1 - chorus->frac) - (1 - chorus->frac) * chorus->z1 ;
 8000968:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <Chorus_Process+0x19c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	ed93 7a00 	vldr	s14, [r3]
 8000972:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <Chorus_Process+0x19c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000978:	edd3 6a00 	vldr	s13, [r3]
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <Chorus_Process+0x19c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000984:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000988:	ee76 7a67 	vsub.f32	s15, s12, s15
 800098c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <Chorus_Process+0x19c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800099c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80009a0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <Chorus_Process+0x19c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80009ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <Chorus_Process+0x19c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009b8:	edc3 7a05 	vstr	s15, [r3, #20]

	chorus->z1 = chorus->delayLineOutput;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <Chorus_Process+0x19c>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <Chorus_Process+0x19c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6952      	ldr	r2, [r2, #20]
 80009c6:	639a      	str	r2, [r3, #56]	; 0x38

	*chorus->writePtr = sample;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <Chorus_Process+0x19c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	601a      	str	r2, [r3, #0]

	if (++chorus->writePtr >= chorus->delayLineEnd) {
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <Chorus_Process+0x19c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	3204      	adds	r2, #4
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <Chorus_Process+0x19c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d305      	bcc.n	80009f4 <Chorus_Process+0x180>
		chorus->writePtr = chorus->delayLineStart;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <Chorus_Process+0x19c>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <Chorus_Process+0x19c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6812      	ldr	r2, [r2, #0]
 80009f2:	609a      	str	r2, [r3, #8]
	}
	return chorus->delayLineOutput;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <Chorus_Process+0x19c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	ee07 3a90 	vmov	s15, r3
}
 80009fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	3e99999a 	.word	0x3e99999a
 8000a0c:	3ecccccd 	.word	0x3ecccccd
 8000a10:	24000094 	.word	0x24000094
 8000a14:	3a83126f 	.word	0x3a83126f

08000a18 <Chorus_Set_Params>:

void Chorus_Set_Params(float rate) {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(rate - 0.1 > chorus->rate - 0.01  || rate + 0.1 < chorus->rate + 0.01) {
 8000a22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a2a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000ab8 <Chorus_Set_Params+0xa0>
 8000a2e:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000a32:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <Chorus_Set_Params+0xb0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a3e:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8000ac0 <Chorus_Set_Params+0xa8>
 8000a42:	ee37 7b45 	vsub.f64	d7, d7, d5
 8000a46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a4e:	dc17      	bgt.n	8000a80 <Chorus_Set_Params+0x68>
 8000a50:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a58:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000ab8 <Chorus_Set_Params+0xa0>
 8000a5c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <Chorus_Set_Params+0xb0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a6c:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8000ac0 <Chorus_Set_Params+0xa8>
 8000a70:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000a74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a7c:	d400      	bmi.n	8000a80 <Chorus_Set_Params+0x68>
		chorus->rate = rate;
		chorus->lfoStepSize = (4.0f * chorus->rate / chorus->sampleRate);
	}
}
 8000a7e:	e015      	b.n	8000aac <Chorus_Set_Params+0x94>
		chorus->rate = rate;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <Chorus_Set_Params+0xb0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	611a      	str	r2, [r3, #16]
		chorus->lfoStepSize = (4.0f * chorus->rate / chorus->sampleRate);
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <Chorus_Set_Params+0xb0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a90:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000a94:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <Chorus_Set_Params+0xb0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	ed93 7a06 	vldr	s14, [r3, #24]
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <Chorus_Set_Params+0xb0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aa8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	9999999a 	.word	0x9999999a
 8000abc:	3fb99999 	.word	0x3fb99999
 8000ac0:	47ae147b 	.word	0x47ae147b
 8000ac4:	3f847ae1 	.word	0x3f847ae1
 8000ac8:	24000094 	.word	0x24000094

08000acc <Chorus_Free>:

void Chorus_Free() {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	if(chorus != NULL) {
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <Chorus_Free+0x2c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d00d      	beq.n	8000af4 <Chorus_Free+0x28>
		free(chorus->delayLineStart);
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <Chorus_Free+0x2c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f00a fd26 	bl	800b530 <free>
		free(chorus);
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <Chorus_Free+0x2c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f00a fd21 	bl	800b530 <free>
		chorus = NULL;
 8000aee:	4b02      	ldr	r3, [pc, #8]	; (8000af8 <Chorus_Free+0x2c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
	}
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	24000094 	.word	0x24000094

08000afc <Delay_Init>:
// the size of the entire buffer for both adc and dac
#define BUFFER_SIZE 256

DelayEffect* delay = NULL;

void Delay_Init(int sampleRate) {
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	if(delay != NULL) return;
 8000b04:	4b29      	ldr	r3, [pc, #164]	; (8000bac <Delay_Init+0xb0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d14b      	bne.n	8000ba4 <Delay_Init+0xa8>

	delay = malloc(sizeof(DelayEffect));
 8000b0c:	2024      	movs	r0, #36	; 0x24
 8000b0e:	f00a fd07 	bl	800b520 <malloc>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <Delay_Init+0xb0>)
 8000b18:	601a      	str	r2, [r3, #0]
	delay->sampleRate = sampleRate;
 8000b1a:	4b24      	ldr	r3, [pc, #144]	; (8000bac <Delay_Init+0xb0>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	621a      	str	r2, [r3, #32]
	delay->delayBufferLength = 2*sampleRate;
 8000b22:	4b22      	ldr	r3, [pc, #136]	; (8000bac <Delay_Init+0xb0>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	0052      	lsls	r2, r2, #1
 8000b2a:	611a      	str	r2, [r3, #16]
	delay->delayLength = 0.75f;
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <Delay_Init+0xb0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8000b34:	60da      	str	r2, [r3, #12]
	delay->delayWritePtr = 0;
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <Delay_Init+0xb0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	605a      	str	r2, [r3, #4]
	delay->delayReadPtr = 0;
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <Delay_Init+0xb0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
	delay->delayData = (uint16_t*) malloc(delay->delayBufferLength * sizeof(uint16_t));
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <Delay_Init+0xb0>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	691b      	ldr	r3, [r3, #16]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <Delay_Init+0xb0>)
 8000b50:	6814      	ldr	r4, [r2, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f00a fce4 	bl	800b520 <malloc>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	6023      	str	r3, [r4, #0]

	for (int i = 0; i < delay->delayBufferLength; ++i) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	e00a      	b.n	8000b78 <Delay_Init+0x7c>
		delay->delayData[i] = 0;
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <Delay_Init+0xb0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	2200      	movs	r2, #0
 8000b70:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < delay->delayBufferLength; ++i) {
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3301      	adds	r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <Delay_Init+0xb0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dbee      	blt.n	8000b62 <Delay_Init+0x66>
	}

	delay->feedback = 0.75f;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <Delay_Init+0xb0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8000b8c:	615a      	str	r2, [r3, #20]
	delay->dryMix = 1;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <Delay_Init+0xb0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b96:	619a      	str	r2, [r3, #24]
	delay->wetMix = 1;
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <Delay_Init+0xb0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000ba0:	61da      	str	r2, [r3, #28]
 8000ba2:	e000      	b.n	8000ba6 <Delay_Init+0xaa>
	if(delay != NULL) return;
 8000ba4:	bf00      	nop
}
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	24000098 	.word	0x24000098

08000bb0 <Delay_Process>:

uint16_t Delay_Process(uint16_t in) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80fb      	strh	r3, [r7, #6]
	uint16_t out = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	81fb      	strh	r3, [r7, #14]

	out = (delay->dryMix * in + delay->wetMix *delay->delayData[delay->delayReadPtr]);
 8000bbe:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <Delay_Process+0xf4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	ed93 7a06 	vldr	s14, [r3, #24]
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	ee07 3a90 	vmov	s15, r3
 8000bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <Delay_Process+0xf4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	edd3 6a07 	vldr	s13, [r3, #28]
 8000bdc:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <Delay_Process+0xf4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <Delay_Process+0xf4>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	ee07 3a90 	vmov	s15, r3
 8000bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c02:	ee17 3a90 	vmov	r3, s15
 8000c06:	81fb      	strh	r3, [r7, #14]

	delay->delayData[delay->delayWritePtr] = in + (delay->delayData[delay->delayReadPtr]*delay->feedback);
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	ee07 3a90 	vmov	s15, r3
 8000c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c12:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <Delay_Process+0xf4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <Delay_Process+0xf4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	ee07 3a90 	vmov	s15, r3
 8000c28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <Delay_Process+0xf4>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <Delay_Process+0xf4>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <Delay_Process+0xf4>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	4413      	add	r3, r2
 8000c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c50:	ee17 2a90 	vmov	r2, s15
 8000c54:	b292      	uxth	r2, r2
 8000c56:	801a      	strh	r2, [r3, #0]

	if(++delay->delayReadPtr >= delay->delayBufferLength)
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <Delay_Process+0xf4>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	3201      	adds	r2, #1
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <Delay_Process+0xf4>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	db03      	blt.n	8000c76 <Delay_Process+0xc6>
		delay->delayReadPtr = 0;
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <Delay_Process+0xf4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]

	if(++delay->delayWritePtr >= delay->delayBufferLength)
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <Delay_Process+0xf4>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	3201      	adds	r2, #1
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <Delay_Process+0xf4>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	db03      	blt.n	8000c94 <Delay_Process+0xe4>
		delay->delayWritePtr = 0;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <Delay_Process+0xf4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]

	return out;
 8000c94:	89fb      	ldrh	r3, [r7, #14]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	24000098 	.word	0x24000098

08000ca8 <Delay_Set_Params>:

void Delay_Set_Params(float delayLength, float feedback) {
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	ed87 0a01 	vstr	s0, [r7, #4]
 8000cb2:	edc7 0a00 	vstr	s1, [r7]
	if(delayLength < 0.05) delayLength = 0.05;
 8000cb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cbe:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8000e28 <Delay_Set_Params+0x180>
 8000cc2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cca:	d501      	bpl.n	8000cd0 <Delay_Set_Params+0x28>
 8000ccc:	4b5e      	ldr	r3, [pc, #376]	; (8000e48 <Delay_Set_Params+0x1a0>)
 8000cce:	607b      	str	r3, [r7, #4]

	delayLength *= 2.0f;
 8000cd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000cd8:	edc7 7a01 	vstr	s15, [r7, #4]

	if(delayLength - 0.1 > delay->delayLength - 0.01  || delayLength + 0.1 < delay->delayLength + 0.01) {
 8000cdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ce0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce4:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8000e30 <Delay_Set_Params+0x188>
 8000ce8:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000cec:	4b57      	ldr	r3, [pc, #348]	; (8000e4c <Delay_Set_Params+0x1a4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	edd3 7a03 	vldr	s15, [r3, #12]
 8000cf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cf8:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8000e38 <Delay_Set_Params+0x190>
 8000cfc:	ee37 7b45 	vsub.f64	d7, d7, d5
 8000d00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d08:	dc16      	bgt.n	8000d38 <Delay_Set_Params+0x90>
 8000d0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d12:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8000e30 <Delay_Set_Params+0x188>
 8000d16:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000d1a:	4b4c      	ldr	r3, [pc, #304]	; (8000e4c <Delay_Set_Params+0x1a4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d26:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8000e38 <Delay_Set_Params+0x190>
 8000d2a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000d2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d36:	d531      	bpl.n	8000d9c <Delay_Set_Params+0xf4>
		delay->delayLength = delayLength;
 8000d38:	4b44      	ldr	r3, [pc, #272]	; (8000e4c <Delay_Set_Params+0x1a4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	60da      	str	r2, [r3, #12]
		delay->delayReadPtr = (int)(delay->delayWritePtr - (delay->delayLength * delay->sampleRate) + delay->delayBufferLength) % delay->delayBufferLength;
 8000d40:	4b42      	ldr	r3, [pc, #264]	; (8000e4c <Delay_Set_Params+0x1a4>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	ee07 3a90 	vmov	s15, r3
 8000d4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d4e:	4b3f      	ldr	r3, [pc, #252]	; (8000e4c <Delay_Set_Params+0x1a4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	edd3 6a03 	vldr	s13, [r3, #12]
 8000d56:	4b3d      	ldr	r3, [pc, #244]	; (8000e4c <Delay_Set_Params+0x1a4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6a1b      	ldr	r3, [r3, #32]
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d6c:	4b37      	ldr	r3, [pc, #220]	; (8000e4c <Delay_Set_Params+0x1a4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	ee07 3a90 	vmov	s15, r3
 8000d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d82:	ee17 0a90 	vmov	r0, s15
 8000d86:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <Delay_Set_Params+0x1a4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	4a2f      	ldr	r2, [pc, #188]	; (8000e4c <Delay_Set_Params+0x1a4>)
 8000d8e:	6812      	ldr	r2, [r2, #0]
 8000d90:	fb90 f1f3 	sdiv	r1, r0, r3
 8000d94:	fb01 f303 	mul.w	r3, r1, r3
 8000d98:	1ac3      	subs	r3, r0, r3
 8000d9a:	6093      	str	r3, [r2, #8]
	}

	if(feedback > 0.8) feedback = 0.8;
 8000d9c:	edd7 7a00 	vldr	s15, [r7]
 8000da0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000da4:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8000e40 <Delay_Set_Params+0x198>
 8000da8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db0:	dd01      	ble.n	8000db6 <Delay_Set_Params+0x10e>
 8000db2:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <Delay_Set_Params+0x1a8>)
 8000db4:	603b      	str	r3, [r7, #0]

	if(feedback - 0.1 > delay->feedback - 0.01 || feedback + 0.1 < delay->feedback + 0.01) {
 8000db6:	edd7 7a00 	vldr	s15, [r7]
 8000dba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dbe:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8000e30 <Delay_Set_Params+0x188>
 8000dc2:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <Delay_Set_Params+0x1a4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	edd3 7a05 	vldr	s15, [r3, #20]
 8000dce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dd2:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000e38 <Delay_Set_Params+0x190>
 8000dd6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8000dda:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de2:	dc17      	bgt.n	8000e14 <Delay_Set_Params+0x16c>
 8000de4:	edd7 7a00 	vldr	s15, [r7]
 8000de8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dec:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000e30 <Delay_Set_Params+0x188>
 8000df0:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <Delay_Set_Params+0x1a4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000dfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e00:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000e38 <Delay_Set_Params+0x190>
 8000e04:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000e08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e10:	d400      	bmi.n	8000e14 <Delay_Set_Params+0x16c>
		delay->feedback = feedback;
	}
}
 8000e12:	e003      	b.n	8000e1c <Delay_Set_Params+0x174>
		delay->feedback = feedback;
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <Delay_Set_Params+0x1a4>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	615a      	str	r2, [r3, #20]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	9999999a 	.word	0x9999999a
 8000e2c:	3fa99999 	.word	0x3fa99999
 8000e30:	9999999a 	.word	0x9999999a
 8000e34:	3fb99999 	.word	0x3fb99999
 8000e38:	47ae147b 	.word	0x47ae147b
 8000e3c:	3f847ae1 	.word	0x3f847ae1
 8000e40:	9999999a 	.word	0x9999999a
 8000e44:	3fe99999 	.word	0x3fe99999
 8000e48:	3d4ccccd 	.word	0x3d4ccccd
 8000e4c:	24000098 	.word	0x24000098
 8000e50:	3f4ccccd 	.word	0x3f4ccccd

08000e54 <Delay_Free>:

void Delay_Free() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	if(delay != NULL) {
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <Delay_Free+0x2c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d00d      	beq.n	8000e7c <Delay_Free+0x28>
		free(delay->delayData);
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <Delay_Free+0x2c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f00a fb62 	bl	800b530 <free>
		free(delay);
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <Delay_Free+0x2c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f00a fb5d 	bl	800b530 <free>

		delay = NULL;
 8000e76:	4b02      	ldr	r3, [pc, #8]	; (8000e80 <Delay_Free+0x2c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
	}
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	24000098 	.word	0x24000098
 8000e84:	00000000 	.word	0x00000000

08000e88 <Tremolo_LFO>:
#define PI 3.14159265359

TremoloEffect* tremolo = NULL;

float Tremolo_LFO(float phase, int waveform)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e92:	6038      	str	r0, [r7, #0]
	switch(waveform) {
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <Tremolo_LFO+0x1a>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d031      	beq.n	8000f04 <Tremolo_LFO+0x7c>
 8000ea0:	e03f      	b.n	8000f22 <Tremolo_LFO+0x9a>
		case Triangle:
			if(phase < 0.25f)
 8000ea2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ea6:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb2:	d508      	bpl.n	8000ec6 <Tremolo_LFO+0x3e>
				return 0.5f + 2.0f*phase;
 8000eb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eb8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ebc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ec4:	e045      	b.n	8000f52 <Tremolo_LFO+0xca>
			else if(phase < 0.75f)
 8000ec6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eca:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8000ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed6:	d50c      	bpl.n	8000ef2 <Tremolo_LFO+0x6a>
				return 1.0f - 2.0f*(phase - 0.25f);
 8000ed8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000edc:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000ee0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ee4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef0:	e02f      	b.n	8000f52 <Tremolo_LFO+0xca>
			else
				return 2.0f*(phase-0.75f);
 8000ef2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ef6:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8000efa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000efe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f02:	e026      	b.n	8000f52 <Tremolo_LFO+0xca>
		case Square:
			if(phase < 0.5f)
 8000f04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f08:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f14:	d502      	bpl.n	8000f1c <Tremolo_LFO+0x94>
				return 1.0f;
 8000f16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000f1a:	e01a      	b.n	8000f52 <Tremolo_LFO+0xca>
			else
				return 0.0f;
 8000f1c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8000f68 <Tremolo_LFO+0xe0>
 8000f20:	e017      	b.n	8000f52 <Tremolo_LFO+0xca>
		case Sine:
		default:
			return 0.5f + 0.5f*sinf(2.0 * PI * phase);
 8000f22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f2a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000f60 <Tremolo_LFO+0xd8>
 8000f2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f36:	eeb0 0a67 	vmov.f32	s0, s15
 8000f3a:	f00a fc75 	bl	800b828 <sinf>
 8000f3e:	eef0 7a40 	vmov.f32	s15, s0
 8000f42:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f4e:	ee77 7a87 	vadd.f32	s15, s15, s14
		}
}
 8000f52:	eeb0 0a67 	vmov.f32	s0, s15
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	f3af 8000 	nop.w
 8000f60:	54442eea 	.word	0x54442eea
 8000f64:	401921fb 	.word	0x401921fb
 8000f68:	00000000 	.word	0x00000000

08000f6c <Tremolo_Init>:

void Tremolo_Init(int sampleRate) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	if(tremolo != NULL) return;
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <Tremolo_Init+0x60>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d122      	bne.n	8000fc2 <Tremolo_Init+0x56>

	tremolo = malloc(sizeof(TremoloEffect));
 8000f7c:	2014      	movs	r0, #20
 8000f7e:	f00a facf 	bl	800b520 <malloc>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <Tremolo_Init+0x60>)
 8000f88:	601a      	str	r2, [r3, #0]
	tremolo->phase = 0;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <Tremolo_Init+0x60>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
	tremolo->inverseSampleRate = 1.0f/sampleRate;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <Tremolo_Init+0x60>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000faa:	edc3 7a01 	vstr	s15, [r3, #4]
	tremolo->depth = 1.0f;
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <Tremolo_Init+0x60>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fb6:	609a      	str	r2, [r3, #8]
	tremolo->waveform = Triangle;
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <Tremolo_Init+0x60>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
 8000fc0:	e000      	b.n	8000fc4 <Tremolo_Init+0x58>
	if(tremolo != NULL) return;
 8000fc2:	bf00      	nop
}
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2400009c 	.word	0x2400009c

08000fd0 <Tremolo_Process>:

float Tremolo_Process(float in, float depth, float frequency) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	ed2d 8b02 	vpush	{d8}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	ed87 0a03 	vstr	s0, [r7, #12]
 8000fde:	edc7 0a02 	vstr	s1, [r7, #8]
 8000fe2:	ed87 1a01 	vstr	s2, [r7, #4]
	tremolo->depth = depth;
 8000fe6:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <Tremolo_Process+0xd8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	609a      	str	r2, [r3, #8]
	tremolo->frequency = 6.0f*frequency;
 8000fee:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <Tremolo_Process+0xd8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffe:	edc3 7a03 	vstr	s15, [r3, #12]
	float out;
	out = in * (1.0f - tremolo->depth * Tremolo_LFO(tremolo->phase, tremolo->waveform));
 8001002:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <Tremolo_Process+0xd8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	ed93 8a02 	vldr	s16, [r3, #8]
 800100a:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <Tremolo_Process+0xd8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <Tremolo_Process+0xd8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	4618      	mov	r0, r3
 800101a:	eeb0 0a67 	vmov.f32	s0, s15
 800101e:	f7ff ff33 	bl	8000e88 <Tremolo_LFO>
 8001022:	eef0 7a40 	vmov.f32	s15, s0
 8001026:	ee68 7a27 	vmul.f32	s15, s16, s15
 800102a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800102e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001032:	ed97 7a03 	vldr	s14, [r7, #12]
 8001036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103a:	edc7 7a05 	vstr	s15, [r7, #20]

	tremolo->phase += tremolo->frequency*tremolo->inverseSampleRate;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <Tremolo_Process+0xd8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	ed93 7a00 	vldr	s14, [r3]
 8001046:	4b18      	ldr	r3, [pc, #96]	; (80010a8 <Tremolo_Process+0xd8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	edd3 6a03 	vldr	s13, [r3, #12]
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <Tremolo_Process+0xd8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	edd3 7a01 	vldr	s15, [r3, #4]
 8001056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <Tremolo_Process+0xd8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001062:	edc3 7a00 	vstr	s15, [r3]
	if(tremolo->phase >= 1.0)
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <Tremolo_Process+0xd8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	edd3 7a00 	vldr	s15, [r3]
 800106e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107a:	db0b      	blt.n	8001094 <Tremolo_Process+0xc4>
		tremolo->phase -= 1.0;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <Tremolo_Process+0xd8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <Tremolo_Process+0xd8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800108c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001090:	edc3 7a00 	vstr	s15, [r3]

	return out;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	ee07 3a90 	vmov	s15, r3
}
 800109a:	eeb0 0a67 	vmov.f32	s0, s15
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	ecbd 8b02 	vpop	{d8}
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2400009c 	.word	0x2400009c

080010ac <Tremolo_Set_Waveform>:

void Tremolo_Set_Waveform(int waveform) {
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	tremolo->waveform = waveform;
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <Tremolo_Set_Waveform+0x1c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	611a      	str	r2, [r3, #16]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	2400009c 	.word	0x2400009c

080010cc <Tremolo_Free>:

void Tremolo_Free() {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	if(tremolo != NULL) {
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <Tremolo_Free+0x20>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d007      	beq.n	80010e8 <Tremolo_Free+0x1c>
		free(tremolo);
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <Tremolo_Free+0x20>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f00a fa27 	bl	800b530 <free>
		tremolo = NULL;
 80010e2:	4b02      	ldr	r3, [pc, #8]	; (80010ec <Tremolo_Free+0x20>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
	}
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2400009c 	.word	0x2400009c

080010f0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001102:	463b      	mov	r3, r7
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	615a      	str	r2, [r3, #20]
 8001112:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001114:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <MX_ADC1_Init+0xe8>)
 8001116:	4a31      	ldr	r2, [pc, #196]	; (80011dc <MX_ADC1_Init+0xec>)
 8001118:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <MX_ADC1_Init+0xe8>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <MX_ADC1_Init+0xe8>)
 8001122:	2208      	movs	r2, #8
 8001124:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <MX_ADC1_Init+0xe8>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <MX_ADC1_Init+0xe8>)
 800112e:	2204      	movs	r2, #4
 8001130:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001132:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <MX_ADC1_Init+0xe8>)
 8001134:	2200      	movs	r2, #0
 8001136:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <MX_ADC1_Init+0xe8>)
 800113a:	2200      	movs	r2, #0
 800113c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <MX_ADC1_Init+0xe8>)
 8001140:	2201      	movs	r2, #1
 8001142:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001144:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <MX_ADC1_Init+0xe8>)
 8001146:	2200      	movs	r2, #0
 8001148:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <MX_ADC1_Init+0xe8>)
 800114c:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <MX_ADC1_Init+0xe8>)
 8001154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <MX_ADC1_Init+0xe8>)
 800115c:	2203      	movs	r2, #3
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <MX_ADC1_Init+0xe8>)
 8001162:	2200      	movs	r2, #0
 8001164:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <MX_ADC1_Init+0xe8>)
 8001168:	2200      	movs	r2, #0
 800116a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <MX_ADC1_Init+0xe8>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001174:	4818      	ldr	r0, [pc, #96]	; (80011d8 <MX_ADC1_Init+0xe8>)
 8001176:	f001 ff73 	bl	8003060 <HAL_ADC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001180:	f001 f98e 	bl	80024a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4812      	ldr	r0, [pc, #72]	; (80011d8 <MX_ADC1_Init+0xe8>)
 8001190:	f002 fe66 	bl	8003e60 <HAL_ADCEx_MultiModeConfigChannel>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800119a:	f001 f981 	bl	80024a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_ADC1_Init+0xf0>)
 80011a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011a2:	2306      	movs	r3, #6
 80011a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011aa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011ae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011b0:	2304      	movs	r3, #4
 80011b2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_ADC1_Init+0xe8>)
 80011c2:	f002 f965 	bl	8003490 <HAL_ADC_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80011cc:	f001 f968 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	240000a0 	.word	0x240000a0
 80011dc:	40022000 	.word	0x40022000
 80011e0:	08600004 	.word	0x08600004

080011e4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	615a      	str	r2, [r3, #20]
 80011fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011fc:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <MX_ADC2_Init+0xfc>)
 80011fe:	4a39      	ldr	r2, [pc, #228]	; (80012e4 <MX_ADC2_Init+0x100>)
 8001200:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001202:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <MX_ADC2_Init+0xfc>)
 8001204:	2200      	movs	r2, #0
 8001206:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001208:	4b35      	ldr	r3, [pc, #212]	; (80012e0 <MX_ADC2_Init+0xfc>)
 800120a:	2208      	movs	r2, #8
 800120c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800120e:	4b34      	ldr	r3, [pc, #208]	; (80012e0 <MX_ADC2_Init+0xfc>)
 8001210:	2201      	movs	r2, #1
 8001212:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001214:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <MX_ADC2_Init+0xfc>)
 8001216:	2204      	movs	r2, #4
 8001218:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800121a:	4b31      	ldr	r3, [pc, #196]	; (80012e0 <MX_ADC2_Init+0xfc>)
 800121c:	2200      	movs	r2, #0
 800121e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001220:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <MX_ADC2_Init+0xfc>)
 8001222:	2200      	movs	r2, #0
 8001224:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 3;
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <MX_ADC2_Init+0xfc>)
 8001228:	2203      	movs	r2, #3
 800122a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800122c:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <MX_ADC2_Init+0xfc>)
 800122e:	2200      	movs	r2, #0
 8001230:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001232:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <MX_ADC2_Init+0xfc>)
 8001234:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800123a:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <MX_ADC2_Init+0xfc>)
 800123c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001240:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <MX_ADC2_Init+0xfc>)
 8001244:	2203      	movs	r2, #3
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001248:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <MX_ADC2_Init+0xfc>)
 800124a:	2200      	movs	r2, #0
 800124c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <MX_ADC2_Init+0xfc>)
 8001250:	2200      	movs	r2, #0
 8001252:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <MX_ADC2_Init+0xfc>)
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800125c:	4820      	ldr	r0, [pc, #128]	; (80012e0 <MX_ADC2_Init+0xfc>)
 800125e:	f001 feff 	bl	8003060 <HAL_ADC_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001268:	f001 f91a 	bl	80024a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_ADC2_Init+0x104>)
 800126e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001270:	2306      	movs	r3, #6
 8001272:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001278:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800127c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800127e:	2304      	movs	r3, #4
 8001280:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4619      	mov	r1, r3
 800128e:	4814      	ldr	r0, [pc, #80]	; (80012e0 <MX_ADC2_Init+0xfc>)
 8001290:	f002 f8fe 	bl	8003490 <HAL_ADC_ConfigChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800129a:	f001 f901 	bl	80024a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <MX_ADC2_Init+0x108>)
 80012a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012a2:	230c      	movs	r3, #12
 80012a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_ADC2_Init+0xfc>)
 80012ac:	f002 f8f0 	bl	8003490 <HAL_ADC_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80012b6:	f001 f8f3 	bl	80024a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <MX_ADC2_Init+0x10c>)
 80012bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012be:	2312      	movs	r3, #18
 80012c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <MX_ADC2_Init+0xfc>)
 80012c8:	f002 f8e2 	bl	8003490 <HAL_ADC_ConfigChannel>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 80012d2:	f001 f8e5 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	3720      	adds	r7, #32
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	24000104 	.word	0x24000104
 80012e4:	40022100 	.word	0x40022100
 80012e8:	19200040 	.word	0x19200040
 80012ec:	1d500080 	.word	0x1d500080
 80012f0:	21800100 	.word	0x21800100

080012f4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08e      	sub	sp, #56	; 0x38
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a86      	ldr	r2, [pc, #536]	; (800152c <HAL_ADC_MspInit+0x238>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d165      	bne.n	80013e2 <HAL_ADC_MspInit+0xee>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001316:	4b86      	ldr	r3, [pc, #536]	; (8001530 <HAL_ADC_MspInit+0x23c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	4a84      	ldr	r2, [pc, #528]	; (8001530 <HAL_ADC_MspInit+0x23c>)
 800131e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001320:	4b83      	ldr	r3, [pc, #524]	; (8001530 <HAL_ADC_MspInit+0x23c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d10e      	bne.n	8001346 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001328:	4b82      	ldr	r3, [pc, #520]	; (8001534 <HAL_ADC_MspInit+0x240>)
 800132a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800132e:	4a81      	ldr	r2, [pc, #516]	; (8001534 <HAL_ADC_MspInit+0x240>)
 8001330:	f043 0320 	orr.w	r3, r3, #32
 8001334:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001338:	4b7e      	ldr	r3, [pc, #504]	; (8001534 <HAL_ADC_MspInit+0x240>)
 800133a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	623b      	str	r3, [r7, #32]
 8001344:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001346:	4b7b      	ldr	r3, [pc, #492]	; (8001534 <HAL_ADC_MspInit+0x240>)
 8001348:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800134c:	4a79      	ldr	r2, [pc, #484]	; (8001534 <HAL_ADC_MspInit+0x240>)
 800134e:	f043 0320 	orr.w	r3, r3, #32
 8001352:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001356:	4b77      	ldr	r3, [pc, #476]	; (8001534 <HAL_ADC_MspInit+0x240>)
 8001358:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800135c:	f003 0320 	and.w	r3, r3, #32
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001364:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136a:	2303      	movs	r3, #3
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001376:	4619      	mov	r1, r3
 8001378:	486f      	ldr	r0, [pc, #444]	; (8001538 <HAL_ADC_MspInit+0x244>)
 800137a:	f005 fb5f 	bl	8006a3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800137e:	4b6f      	ldr	r3, [pc, #444]	; (800153c <HAL_ADC_MspInit+0x248>)
 8001380:	4a6f      	ldr	r2, [pc, #444]	; (8001540 <HAL_ADC_MspInit+0x24c>)
 8001382:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001384:	4b6d      	ldr	r3, [pc, #436]	; (800153c <HAL_ADC_MspInit+0x248>)
 8001386:	2209      	movs	r2, #9
 8001388:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800138a:	4b6c      	ldr	r3, [pc, #432]	; (800153c <HAL_ADC_MspInit+0x248>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001390:	4b6a      	ldr	r3, [pc, #424]	; (800153c <HAL_ADC_MspInit+0x248>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001396:	4b69      	ldr	r3, [pc, #420]	; (800153c <HAL_ADC_MspInit+0x248>)
 8001398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800139c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800139e:	4b67      	ldr	r3, [pc, #412]	; (800153c <HAL_ADC_MspInit+0x248>)
 80013a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013a6:	4b65      	ldr	r3, [pc, #404]	; (800153c <HAL_ADC_MspInit+0x248>)
 80013a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013ae:	4b63      	ldr	r3, [pc, #396]	; (800153c <HAL_ADC_MspInit+0x248>)
 80013b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80013b6:	4b61      	ldr	r3, [pc, #388]	; (800153c <HAL_ADC_MspInit+0x248>)
 80013b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013bc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013be:	4b5f      	ldr	r3, [pc, #380]	; (800153c <HAL_ADC_MspInit+0x248>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013c4:	485d      	ldr	r0, [pc, #372]	; (800153c <HAL_ADC_MspInit+0x248>)
 80013c6:	f003 f9bd 	bl	8004744 <HAL_DMA_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 80013d0:	f001 f866 	bl	80024a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a59      	ldr	r2, [pc, #356]	; (800153c <HAL_ADC_MspInit+0x248>)
 80013d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80013da:	4a58      	ldr	r2, [pc, #352]	; (800153c <HAL_ADC_MspInit+0x248>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80013e0:	e09f      	b.n	8001522 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC2)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a57      	ldr	r2, [pc, #348]	; (8001544 <HAL_ADC_MspInit+0x250>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	f040 809a 	bne.w	8001522 <HAL_ADC_MspInit+0x22e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013ee:	4b50      	ldr	r3, [pc, #320]	; (8001530 <HAL_ADC_MspInit+0x23c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	4a4e      	ldr	r2, [pc, #312]	; (8001530 <HAL_ADC_MspInit+0x23c>)
 80013f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013f8:	4b4d      	ldr	r3, [pc, #308]	; (8001530 <HAL_ADC_MspInit+0x23c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d10e      	bne.n	800141e <HAL_ADC_MspInit+0x12a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001400:	4b4c      	ldr	r3, [pc, #304]	; (8001534 <HAL_ADC_MspInit+0x240>)
 8001402:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001406:	4a4b      	ldr	r2, [pc, #300]	; (8001534 <HAL_ADC_MspInit+0x240>)
 8001408:	f043 0320 	orr.w	r3, r3, #32
 800140c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001410:	4b48      	ldr	r3, [pc, #288]	; (8001534 <HAL_ADC_MspInit+0x240>)
 8001412:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001416:	f003 0320 	and.w	r3, r3, #32
 800141a:	61bb      	str	r3, [r7, #24]
 800141c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4b45      	ldr	r3, [pc, #276]	; (8001534 <HAL_ADC_MspInit+0x240>)
 8001420:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001424:	4a43      	ldr	r2, [pc, #268]	; (8001534 <HAL_ADC_MspInit+0x240>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800142e:	4b41      	ldr	r3, [pc, #260]	; (8001534 <HAL_ADC_MspInit+0x240>)
 8001430:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143c:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <HAL_ADC_MspInit+0x240>)
 800143e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001442:	4a3c      	ldr	r2, [pc, #240]	; (8001534 <HAL_ADC_MspInit+0x240>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800144c:	4b39      	ldr	r3, [pc, #228]	; (8001534 <HAL_ADC_MspInit+0x240>)
 800144e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800145a:	4b36      	ldr	r3, [pc, #216]	; (8001534 <HAL_ADC_MspInit+0x240>)
 800145c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001460:	4a34      	ldr	r2, [pc, #208]	; (8001534 <HAL_ADC_MspInit+0x240>)
 8001462:	f043 0320 	orr.w	r3, r3, #32
 8001466:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800146a:	4b32      	ldr	r3, [pc, #200]	; (8001534 <HAL_ADC_MspInit+0x240>)
 800146c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147c:	2303      	movs	r3, #3
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	482f      	ldr	r0, [pc, #188]	; (8001548 <HAL_ADC_MspInit+0x254>)
 800148c:	f005 fad6 	bl	8006a3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001490:	2320      	movs	r3, #32
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001494:	2303      	movs	r3, #3
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	4619      	mov	r1, r3
 80014a2:	482a      	ldr	r0, [pc, #168]	; (800154c <HAL_ADC_MspInit+0x258>)
 80014a4:	f005 faca 	bl	8006a3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ae:	2303      	movs	r3, #3
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	4619      	mov	r1, r3
 80014bc:	481e      	ldr	r0, [pc, #120]	; (8001538 <HAL_ADC_MspInit+0x244>)
 80014be:	f005 fabd 	bl	8006a3c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream2;
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <HAL_ADC_MspInit+0x25c>)
 80014c4:	4a23      	ldr	r2, [pc, #140]	; (8001554 <HAL_ADC_MspInit+0x260>)
 80014c6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_ADC_MspInit+0x25c>)
 80014ca:	220a      	movs	r2, #10
 80014cc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_ADC_MspInit+0x25c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d4:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <HAL_ADC_MspInit+0x25c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_ADC_MspInit+0x25c>)
 80014dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_ADC_MspInit+0x25c>)
 80014e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014e8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_ADC_MspInit+0x25c>)
 80014ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_ADC_MspInit+0x25c>)
 80014f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <HAL_ADC_MspInit+0x25c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_ADC_MspInit+0x25c>)
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001506:	4812      	ldr	r0, [pc, #72]	; (8001550 <HAL_ADC_MspInit+0x25c>)
 8001508:	f003 f91c 	bl	8004744 <HAL_DMA_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_ADC_MspInit+0x222>
      Error_Handler();
 8001512:	f000 ffc5 	bl	80024a0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <HAL_ADC_MspInit+0x25c>)
 800151a:	64da      	str	r2, [r3, #76]	; 0x4c
 800151c:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <HAL_ADC_MspInit+0x25c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001522:	bf00      	nop
 8001524:	3738      	adds	r7, #56	; 0x38
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40022000 	.word	0x40022000
 8001530:	24000258 	.word	0x24000258
 8001534:	58024400 	.word	0x58024400
 8001538:	58021400 	.word	0x58021400
 800153c:	24000168 	.word	0x24000168
 8001540:	40020010 	.word	0x40020010
 8001544:	40022100 	.word	0x40022100
 8001548:	58020000 	.word	0x58020000
 800154c:	58020800 	.word	0x58020800
 8001550:	240001e0 	.word	0x240001e0
 8001554:	40020040 	.word	0x40020040

08001558 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2224      	movs	r2, #36	; 0x24
 8001562:	2100      	movs	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f009 ffeb 	bl	800b540 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_DAC1_Init+0x5c>)
 800156c:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <MX_DAC1_Init+0x60>)
 800156e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001570:	4810      	ldr	r0, [pc, #64]	; (80015b4 <MX_DAC1_Init+0x5c>)
 8001572:	f002 fe20 	bl	80041b6 <HAL_DAC_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800157c:	f000 ff90 	bl	80024a0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001584:	2316      	movs	r3, #22
 8001586:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800158c:	2301      	movs	r3, #1
 800158e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2200      	movs	r2, #0
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_DAC1_Init+0x5c>)
 800159c:	f002 ff18 	bl	80043d0 <HAL_DAC_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80015a6:	f000 ff7b 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2400025c 	.word	0x2400025c
 80015b8:	40007400 	.word	0x40007400

080015bc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a30      	ldr	r2, [pc, #192]	; (800169c <HAL_DAC_MspInit+0xe0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d15a      	bne.n	8001694 <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <HAL_DAC_MspInit+0xe4>)
 80015e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015e4:	4a2e      	ldr	r2, [pc, #184]	; (80016a0 <HAL_DAC_MspInit+0xe4>)
 80015e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015ea:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015ee:	4b2c      	ldr	r3, [pc, #176]	; (80016a0 <HAL_DAC_MspInit+0xe4>)
 80015f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <HAL_DAC_MspInit+0xe4>)
 80015fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001602:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <HAL_DAC_MspInit+0xe4>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800160c:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <HAL_DAC_MspInit+0xe4>)
 800160e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800161a:	2310      	movs	r3, #16
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800161e:	2303      	movs	r3, #3
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	481d      	ldr	r0, [pc, #116]	; (80016a4 <HAL_DAC_MspInit+0xe8>)
 800162e:	f005 fa05 	bl	8006a3c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_DAC_MspInit+0xec>)
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <HAL_DAC_MspInit+0xf0>)
 8001636:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_DAC_MspInit+0xec>)
 800163a:	2243      	movs	r2, #67	; 0x43
 800163c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <HAL_DAC_MspInit+0xec>)
 8001640:	2240      	movs	r2, #64	; 0x40
 8001642:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001644:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <HAL_DAC_MspInit+0xec>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_DAC_MspInit+0xec>)
 800164c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001650:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_DAC_MspInit+0xec>)
 8001654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001658:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_DAC_MspInit+0xec>)
 800165c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001660:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_DAC_MspInit+0xec>)
 8001664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001668:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_DAC_MspInit+0xec>)
 800166c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001670:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_DAC_MspInit+0xec>)
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001678:	480b      	ldr	r0, [pc, #44]	; (80016a8 <HAL_DAC_MspInit+0xec>)
 800167a:	f003 f863 	bl	8004744 <HAL_DMA_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8001684:	f000 ff0c 	bl	80024a0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_DAC_MspInit+0xec>)
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <HAL_DAC_MspInit+0xec>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40007400 	.word	0x40007400
 80016a0:	58024400 	.word	0x58024400
 80016a4:	58020000 	.word	0x58020000
 80016a8:	24000270 	.word	0x24000270
 80016ac:	40020028 	.word	0x40020028

080016b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <MX_DMA_Init+0x5c>)
 80016b8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80016bc:	4a13      	ldr	r2, [pc, #76]	; (800170c <MX_DMA_Init+0x5c>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_DMA_Init+0x5c>)
 80016c8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	200b      	movs	r0, #11
 80016da:	f002 fd38 	bl	800414e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016de:	200b      	movs	r0, #11
 80016e0:	f002 fd4f 	bl	8004182 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	200c      	movs	r0, #12
 80016ea:	f002 fd30 	bl	800414e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80016ee:	200c      	movs	r0, #12
 80016f0:	f002 fd47 	bl	8004182 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2100      	movs	r1, #0
 80016f8:	200d      	movs	r0, #13
 80016fa:	f002 fd28 	bl	800414e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80016fe:	200d      	movs	r0, #13
 8001700:	f002 fd3f 	bl	8004182 <HAL_NVIC_EnableIRQ>

}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	58024400 	.word	0x58024400

08001710 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	; 0x30
 8001714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 8001728:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800172c:	4a69      	ldr	r2, [pc, #420]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001736:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 8001738:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
 8001742:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001744:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 8001746:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800174a:	4a62      	ldr	r2, [pc, #392]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 800174c:	f043 0320 	orr.w	r3, r3, #32
 8001750:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001754:	4b5f      	ldr	r3, [pc, #380]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 8001756:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800175a:	f003 0320 	and.w	r3, r3, #32
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001762:	4b5c      	ldr	r3, [pc, #368]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 8001764:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001768:	4a5a      	ldr	r2, [pc, #360]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 800176a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800176e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001772:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 8001774:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b54      	ldr	r3, [pc, #336]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 8001782:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001786:	4a53      	ldr	r2, [pc, #332]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001790:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 8001792:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	4b4d      	ldr	r3, [pc, #308]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 80017a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017a4:	4a4b      	ldr	r2, [pc, #300]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017ae:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 80017b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017bc:	4b45      	ldr	r3, [pc, #276]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 80017be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017c2:	4a44      	ldr	r2, [pc, #272]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 80017c4:	f043 0308 	orr.w	r3, r3, #8
 80017c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017cc:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 80017ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017da:	4b3e      	ldr	r3, [pc, #248]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 80017dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017e0:	4a3c      	ldr	r2, [pc, #240]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 80017e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80017ea:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <MX_GPIO_Init+0x1c4>)
 80017ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80017f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017fe:	4836      	ldr	r0, [pc, #216]	; (80018d8 <MX_GPIO_Init+0x1c8>)
 8001800:	f005 facc 	bl	8006d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800180a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800180e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	4830      	ldr	r0, [pc, #192]	; (80018dc <MX_GPIO_Init+0x1cc>)
 800181c:	f005 f90e 	bl	8006a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	4827      	ldr	r0, [pc, #156]	; (80018d8 <MX_GPIO_Init+0x1c8>)
 800183a:	f005 f8ff 	bl	8006a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800183e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001850:	2307      	movs	r3, #7
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	4619      	mov	r1, r3
 800185a:	4821      	ldr	r0, [pc, #132]	; (80018e0 <MX_GPIO_Init+0x1d0>)
 800185c:	f005 f8ee 	bl	8006a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001864:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	4619      	mov	r1, r3
 8001874:	481b      	ldr	r0, [pc, #108]	; (80018e4 <MX_GPIO_Init+0x1d4>)
 8001876:	f005 f8e1 	bl	8006a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800187a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800187e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800188c:	230a      	movs	r3, #10
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	4814      	ldr	r0, [pc, #80]	; (80018e8 <MX_GPIO_Init+0x1d8>)
 8001898:	f005 f8d0 	bl	8006a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 800189c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <MX_GPIO_Init+0x1d8>)
 80018b6:	f005 f8c1 	bl	8006a3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2028      	movs	r0, #40	; 0x28
 80018c0:	f002 fc45 	bl	800414e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018c4:	2028      	movs	r0, #40	; 0x28
 80018c6:	f002 fc5c 	bl	8004182 <HAL_NVIC_EnableIRQ>

}
 80018ca:	bf00      	nop
 80018cc:	3730      	adds	r7, #48	; 0x30
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	58024400 	.word	0x58024400
 80018d8:	58021400 	.word	0x58021400
 80018dc:	58020800 	.word	0x58020800
 80018e0:	58020c00 	.word	0x58020c00
 80018e4:	58021800 	.word	0x58021800
 80018e8:	58020000 	.word	0x58020000

080018ec <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f023 030f 	bic.w	r3, r3, #15
 80018fc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	f043 030c 	orr.w	r3, r3, #12
 800190a:	b2db      	uxtb	r3, r3
 800190c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	b2db      	uxtb	r3, r3
 8001916:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001918:	7bbb      	ldrb	r3, [r7, #14]
 800191a:	f043 030c 	orr.w	r3, r3, #12
 800191e:	b2db      	uxtb	r3, r3
 8001920:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001922:	7bbb      	ldrb	r3, [r7, #14]
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	b2db      	uxtb	r3, r3
 800192a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800192c:	f107 0208 	add.w	r2, r7, #8
 8001930:	2364      	movs	r3, #100	; 0x64
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2304      	movs	r3, #4
 8001936:	214e      	movs	r1, #78	; 0x4e
 8001938:	4803      	ldr	r0, [pc, #12]	; (8001948 <lcd_send_cmd+0x5c>)
 800193a:	f005 faf3 	bl	8006f24 <HAL_I2C_Master_Transmit>
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	240002e8 	.word	0x240002e8

0800194c <lcd_send_data>:

void lcd_send_data (char data)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af02      	add	r7, sp, #8
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f023 030f 	bic.w	r3, r3, #15
 800195c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	f043 030d 	orr.w	r3, r3, #13
 800196a:	b2db      	uxtb	r3, r3
 800196c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	f043 0309 	orr.w	r3, r3, #9
 8001974:	b2db      	uxtb	r3, r3
 8001976:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001978:	7bbb      	ldrb	r3, [r7, #14]
 800197a:	f043 030d 	orr.w	r3, r3, #13
 800197e:	b2db      	uxtb	r3, r3
 8001980:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001982:	7bbb      	ldrb	r3, [r7, #14]
 8001984:	f043 0309 	orr.w	r3, r3, #9
 8001988:	b2db      	uxtb	r3, r3
 800198a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800198c:	f107 0208 	add.w	r2, r7, #8
 8001990:	2364      	movs	r3, #100	; 0x64
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2304      	movs	r3, #4
 8001996:	214e      	movs	r1, #78	; 0x4e
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <lcd_send_data+0x5c>)
 800199a:	f005 fac3 	bl	8006f24 <HAL_I2C_Master_Transmit>
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	240002e8 	.word	0x240002e8

080019ac <lcd_clear>:

void lcd_clear (void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80019b2:	2080      	movs	r0, #128	; 0x80
 80019b4:	f7ff ff9a 	bl	80018ec <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	e005      	b.n	80019ca <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80019be:	2020      	movs	r0, #32
 80019c0:	f7ff ffc4 	bl	800194c <lcd_send_data>
	for (int i=0; i<70; i++)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3301      	adds	r3, #1
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b45      	cmp	r3, #69	; 0x45
 80019ce:	ddf6      	ble.n	80019be <lcd_clear+0x12>
	}
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
    switch (row)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <lcd_put_cur+0x18>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d005      	beq.n	80019fc <lcd_put_cur+0x22>
 80019f0:	e009      	b.n	8001a06 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f8:	603b      	str	r3, [r7, #0]
            break;
 80019fa:	e004      	b.n	8001a06 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a02:	603b      	str	r3, [r7, #0]
            break;
 8001a04:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff6e 	bl	80018ec <lcd_send_cmd>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <lcd_init>:


void lcd_init (void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001a1c:	2032      	movs	r0, #50	; 0x32
 8001a1e:	f001 f913 	bl	8002c48 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001a22:	2030      	movs	r0, #48	; 0x30
 8001a24:	f7ff ff62 	bl	80018ec <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001a28:	2005      	movs	r0, #5
 8001a2a:	f001 f90d 	bl	8002c48 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001a2e:	2030      	movs	r0, #48	; 0x30
 8001a30:	f7ff ff5c 	bl	80018ec <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001a34:	2001      	movs	r0, #1
 8001a36:	f001 f907 	bl	8002c48 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001a3a:	2030      	movs	r0, #48	; 0x30
 8001a3c:	f7ff ff56 	bl	80018ec <lcd_send_cmd>
	HAL_Delay(10);
 8001a40:	200a      	movs	r0, #10
 8001a42:	f001 f901 	bl	8002c48 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001a46:	2020      	movs	r0, #32
 8001a48:	f7ff ff50 	bl	80018ec <lcd_send_cmd>
	HAL_Delay(10);
 8001a4c:	200a      	movs	r0, #10
 8001a4e:	f001 f8fb 	bl	8002c48 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001a52:	2028      	movs	r0, #40	; 0x28
 8001a54:	f7ff ff4a 	bl	80018ec <lcd_send_cmd>
	HAL_Delay(1);
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f001 f8f5 	bl	8002c48 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001a5e:	2008      	movs	r0, #8
 8001a60:	f7ff ff44 	bl	80018ec <lcd_send_cmd>
	HAL_Delay(1);
 8001a64:	2001      	movs	r0, #1
 8001a66:	f001 f8ef 	bl	8002c48 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f7ff ff3e 	bl	80018ec <lcd_send_cmd>
	HAL_Delay(1);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f001 f8e9 	bl	8002c48 <HAL_Delay>
	HAL_Delay(1);
 8001a76:	2001      	movs	r0, #1
 8001a78:	f001 f8e6 	bl	8002c48 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001a7c:	2006      	movs	r0, #6
 8001a7e:	f7ff ff35 	bl	80018ec <lcd_send_cmd>
	HAL_Delay(1);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f001 f8e0 	bl	8002c48 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001a88:	200c      	movs	r0, #12
 8001a8a:	f7ff ff2f 	bl	80018ec <lcd_send_cmd>
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001a9a:	e006      	b.n	8001aaa <lcd_send_string+0x18>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff51 	bl	800194c <lcd_send_data>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f4      	bne.n	8001a9c <lcd_send_string+0xa>
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <MX_I2C2_Init+0x74>)
 8001ac2:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <MX_I2C2_Init+0x78>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_I2C2_Init+0x74>)
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <MX_I2C2_Init+0x7c>)
 8001aca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <MX_I2C2_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_I2C2_Init+0x74>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_I2C2_Init+0x74>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_I2C2_Init+0x74>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <MX_I2C2_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_I2C2_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <MX_I2C2_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001af6:	480e      	ldr	r0, [pc, #56]	; (8001b30 <MX_I2C2_Init+0x74>)
 8001af8:	f005 f984 	bl	8006e04 <HAL_I2C_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b02:	f000 fccd 	bl	80024a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b06:	2100      	movs	r1, #0
 8001b08:	4809      	ldr	r0, [pc, #36]	; (8001b30 <MX_I2C2_Init+0x74>)
 8001b0a:	f005 fcfd 	bl	8007508 <HAL_I2CEx_ConfigAnalogFilter>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b14:	f000 fcc4 	bl	80024a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_I2C2_Init+0x74>)
 8001b1c:	f005 fd3f 	bl	800759e <HAL_I2CEx_ConfigDigitalFilter>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b26:	f000 fcbb 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	240002e8 	.word	0x240002e8
 8001b34:	40005800 	.word	0x40005800
 8001b38:	20b0ccff 	.word	0x20b0ccff

08001b3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b0b8      	sub	sp, #224	; 0xe0
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	22b8      	movs	r2, #184	; 0xb8
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f009 fcef 	bl	800b540 <memset>
  if(i2cHandle->Instance==I2C2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a25      	ldr	r2, [pc, #148]	; (8001bfc <HAL_I2C_MspInit+0xc0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d142      	bne.n	8001bf2 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f006 fd1a 	bl	80085b4 <HAL_RCCEx_PeriphCLKConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b86:	f000 fc8b 	bl	80024a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_I2C_MspInit+0xc4>)
 8001b8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b90:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <HAL_I2C_MspInit+0xc4>)
 8001b92:	f043 0302 	orr.w	r3, r3, #2
 8001b96:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_I2C_MspInit+0xc4>)
 8001b9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ba8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb0:	2312      	movs	r3, #18
 8001bb2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480d      	ldr	r0, [pc, #52]	; (8001c04 <HAL_I2C_MspInit+0xc8>)
 8001bd0:	f004 ff34 	bl	8006a3c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_I2C_MspInit+0xc4>)
 8001bd6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_I2C_MspInit+0xc4>)
 8001bdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001be0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_I2C_MspInit+0xc4>)
 8001be6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	37e0      	adds	r7, #224	; 0xe0
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40005800 	.word	0x40005800
 8001c00:	58024400 	.word	0x58024400
 8001c04:	58020400 	.word	0x58020400

08001c08 <HAL_ADC_ConvHalfCpltCallback>:


// when we enter this function, first half of the buffer is complete
// so we set the input buffer pointer at the beginning
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d108      	bne.n	8001c2a <HAL_ADC_ConvHalfCpltCallback+0x22>
		inBuffPtr = &adcData[0];
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8001c1c:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[0];
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001c20:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001c22:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
	}

}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	240000a0 	.word	0x240000a0
 8001c3c:	24000b3c 	.word	0x24000b3c
 8001c40:	24000334 	.word	0x24000334
 8001c44:	24000b40 	.word	0x24000b40
 8001c48:	24000734 	.word	0x24000734
 8001c4c:	24000b44 	.word	0x24000b44

08001c50 <HAL_ADC_ConvCpltCallback>:

// when we enter this function, first the second half of the buffer is complete
// so we set the input buffer pointer at the beginning
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1) {
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <HAL_ADC_ConvCpltCallback+0x30>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d108      	bne.n	8001c72 <HAL_ADC_ConvCpltCallback+0x22>
		inBuffPtr = &adcData[DATA_SIZE];
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <HAL_ADC_ConvCpltCallback+0x34>)
 8001c62:	4a09      	ldr	r2, [pc, #36]	; (8001c88 <HAL_ADC_ConvCpltCallback+0x38>)
 8001c64:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[DATA_SIZE];
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_ADC_ConvCpltCallback+0x3c>)
 8001c68:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <HAL_ADC_ConvCpltCallback+0x40>)
 8001c6a:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 8001c6c:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_ADC_ConvCpltCallback+0x44>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
	}

}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	240000a0 	.word	0x240000a0
 8001c84:	24000b3c 	.word	0x24000b3c
 8001c88:	24000534 	.word	0x24000534
 8001c8c:	24000b40 	.word	0x24000b40
 8001c90:	24000934 	.word	0x24000934
 8001c94:	24000b44 	.word	0x24000b44

08001c98 <Is_Tremolo>:
uint8_t currentEffect =  CleanEf;
enum Direction { Left, Right };

const float INT16_TO_FLOAT = 1.0f / 32768.0f;

uint8_t Is_Tremolo() {
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
	return currentEffect == SineEf || currentEffect == SquareEf || currentEffect == TriangleEf;
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <Is_Tremolo+0x30>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d007      	beq.n	8001cb4 <Is_Tremolo+0x1c>
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <Is_Tremolo+0x30>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d003      	beq.n	8001cb4 <Is_Tremolo+0x1c>
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <Is_Tremolo+0x30>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d101      	bne.n	8001cb8 <Is_Tremolo+0x20>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <Is_Tremolo+0x22>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	24000b45 	.word	0x24000b45

08001ccc <Init_Tremolo_Waveform>:

void Init_Tremolo_Waveform() {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	if(currentEffect == SineEf) Tremolo_Set_Waveform(Sine);
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <Init_Tremolo_Waveform+0x38>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d103      	bne.n	8001ce0 <Init_Tremolo_Waveform+0x14>
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f7ff f9e7 	bl	80010ac <Tremolo_Set_Waveform>
	else if(currentEffect == SquareEf) Tremolo_Set_Waveform(Square);
	else if(currentEffect == TriangleEf) Tremolo_Set_Waveform(Triangle);
}
 8001cde:	e00e      	b.n	8001cfe <Init_Tremolo_Waveform+0x32>
	else if(currentEffect == SquareEf) Tremolo_Set_Waveform(Square);
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <Init_Tremolo_Waveform+0x38>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d103      	bne.n	8001cf0 <Init_Tremolo_Waveform+0x24>
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff f9df 	bl	80010ac <Tremolo_Set_Waveform>
}
 8001cee:	e006      	b.n	8001cfe <Init_Tremolo_Waveform+0x32>
	else if(currentEffect == TriangleEf) Tremolo_Set_Waveform(Triangle);
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <Init_Tremolo_Waveform+0x38>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d102      	bne.n	8001cfe <Init_Tremolo_Waveform+0x32>
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff f9d7 	bl	80010ac <Tremolo_Set_Waveform>
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	24000b45 	.word	0x24000b45

08001d08 <processData>:

void processData()
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
	if(effectReady == 0) {
 8001d0e:	4b91      	ldr	r3, [pc, #580]	; (8001f54 <processData+0x24c>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8119 	beq.w	8001f4a <processData+0x242>
		return;
		HAL_Delay(100);
	}

	float volume = adc2Data[0]/4095.0f;
 8001d18:	4b8f      	ldr	r3, [pc, #572]	; (8001f58 <processData+0x250>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d24:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8001f5c <processData+0x254>
 8001d28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d2c:	edc7 7a03 	vstr	s15, [r7, #12]
	float knob1 = adc2Data[1]/4095.0f;
 8001d30:	4b89      	ldr	r3, [pc, #548]	; (8001f58 <processData+0x250>)
 8001d32:	885b      	ldrh	r3, [r3, #2]
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d3c:	eddf 6a87 	vldr	s13, [pc, #540]	; 8001f5c <processData+0x254>
 8001d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d44:	edc7 7a02 	vstr	s15, [r7, #8]
	float knob2 = adc2Data[2]/4095.0f;
 8001d48:	4b83      	ldr	r3, [pc, #524]	; (8001f58 <processData+0x250>)
 8001d4a:	889b      	ldrh	r3, [r3, #4]
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d54:	eddf 6a81 	vldr	s13, [pc, #516]	; 8001f5c <processData+0x254>
 8001d58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d5c:	edc7 7a01 	vstr	s15, [r7, #4]

	if(currentEffect == CleanEf) {
 8001d60:	4b7f      	ldr	r3, [pc, #508]	; (8001f60 <processData+0x258>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d123      	bne.n	8001db0 <processData+0xa8>
		for(int i = 0; i < DATA_SIZE; i++) {
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	e01c      	b.n	8001da8 <processData+0xa0>
			 outBuffPtr[i] = (uint16_t) (volume * inBuffPtr[i]);
 8001d6e:	4b7d      	ldr	r3, [pc, #500]	; (8001f64 <processData+0x25c>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8c:	4b76      	ldr	r3, [pc, #472]	; (8001f68 <processData+0x260>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d9a:	ee17 2a90 	vmov	r2, s15
 8001d9e:	b292      	uxth	r2, r2
 8001da0:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3301      	adds	r3, #1
 8001da6:	61fb      	str	r3, [r7, #28]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	2bff      	cmp	r3, #255	; 0xff
 8001dac:	dddf      	ble.n	8001d6e <processData+0x66>
 8001dae:	e0c8      	b.n	8001f42 <processData+0x23a>
		}
	}
	else if(currentEffect == DelayEf) {
 8001db0:	4b6b      	ldr	r3, [pc, #428]	; (8001f60 <processData+0x258>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d12d      	bne.n	8001e14 <processData+0x10c>
		Delay_Set_Params(knob1, knob2);
 8001db8:	edd7 0a01 	vldr	s1, [r7, #4]
 8001dbc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001dc0:	f7fe ff72 	bl	8000ca8 <Delay_Set_Params>
		for(int i = 0; i < DATA_SIZE; i++) {
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	e020      	b.n	8001e0c <processData+0x104>
			 outBuffPtr[i] = (uint16_t) (volume * Delay_Process(inBuffPtr[i]));
 8001dca:	4b66      	ldr	r3, [pc, #408]	; (8001f64 <processData+0x25c>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fee9 	bl	8000bb0 <Delay_Process>
 8001dde:	4603      	mov	r3, r0
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df0:	4b5d      	ldr	r3, [pc, #372]	; (8001f68 <processData+0x260>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dfe:	ee17 2a90 	vmov	r2, s15
 8001e02:	b292      	uxth	r2, r2
 8001e04:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2bff      	cmp	r3, #255	; 0xff
 8001e10:	dddb      	ble.n	8001dca <processData+0xc2>
 8001e12:	e096      	b.n	8001f42 <processData+0x23a>
		}
	} else if(Is_Tremolo()) {
 8001e14:	f7ff ff40 	bl	8001c98 <Is_Tremolo>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d047      	beq.n	8001eae <processData+0x1a6>
		Init_Tremolo_Waveform();
 8001e1e:	f7ff ff55 	bl	8001ccc <Init_Tremolo_Waveform>

		static float in, out;
		for(int i = 0; i < DATA_SIZE; i++) {
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	e03e      	b.n	8001ea6 <processData+0x19e>
			in = INT16_TO_FLOAT * inBuffPtr[i];
 8001e28:	4b4e      	ldr	r3, [pc, #312]	; (8001f64 <processData+0x25c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001f6c <processData+0x264>
 8001e42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e46:	4b4a      	ldr	r3, [pc, #296]	; (8001f70 <processData+0x268>)
 8001e48:	edc3 7a00 	vstr	s15, [r3]
			out = Tremolo_Process(in, knob1, knob2) * 1.4f;
 8001e4c:	4b48      	ldr	r3, [pc, #288]	; (8001f70 <processData+0x268>)
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ed97 1a01 	vldr	s2, [r7, #4]
 8001e56:	edd7 0a02 	vldr	s1, [r7, #8]
 8001e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e5e:	f7ff f8b7 	bl	8000fd0 <Tremolo_Process>
 8001e62:	eef0 7a40 	vmov.f32	s15, s0
 8001e66:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001f74 <processData+0x26c>
 8001e6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e6e:	4b42      	ldr	r3, [pc, #264]	; (8001f78 <processData+0x270>)
 8001e70:	edc3 7a00 	vstr	s15, [r3]
			outBuffPtr[i] =  (uint16_t) (volume * out * 32768.0f);
 8001e74:	4b40      	ldr	r3, [pc, #256]	; (8001f78 <processData+0x270>)
 8001e76:	ed93 7a00 	vldr	s14, [r3]
 8001e7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e82:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001f7c <processData+0x274>
 8001e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8a:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <processData+0x260>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e98:	ee17 2a90 	vmov	r2, s15
 8001e9c:	b292      	uxth	r2, r2
 8001e9e:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2bff      	cmp	r3, #255	; 0xff
 8001eaa:	ddbd      	ble.n	8001e28 <processData+0x120>
 8001eac:	e049      	b.n	8001f42 <processData+0x23a>
		}
	} else if(currentEffect == ChorusEf) {
 8001eae:	4b2c      	ldr	r3, [pc, #176]	; (8001f60 <processData+0x258>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d145      	bne.n	8001f42 <processData+0x23a>
		Chorus_Set_Params(knob1);
 8001eb6:	ed97 0a02 	vldr	s0, [r7, #8]
 8001eba:	f7fe fdad 	bl	8000a18 <Chorus_Set_Params>
		static float in, out;
		for(int i = 0; i < DATA_SIZE; i++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	e03b      	b.n	8001f3c <processData+0x234>
			in = INT16_TO_FLOAT * inBuffPtr[i];
 8001ec4:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <processData+0x25c>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eda:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001f6c <processData+0x264>
 8001ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee2:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <processData+0x278>)
 8001ee4:	edc3 7a00 	vstr	s15, [r3]
			out = in + Chorus_Process(in);
 8001ee8:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <processData+0x278>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef2:	f7fe fcbf 	bl	8000874 <Chorus_Process>
 8001ef6:	eeb0 7a40 	vmov.f32	s14, s0
 8001efa:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <processData+0x278>)
 8001efc:	edd3 7a00 	vldr	s15, [r3]
 8001f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f04:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <processData+0x27c>)
 8001f06:	edc3 7a00 	vstr	s15, [r3]
			outBuffPtr[i] = (uint16_t) (volume * out * 32768.0f);
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <processData+0x27c>)
 8001f0c:	ed93 7a00 	vldr	s14, [r3]
 8001f10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f18:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001f7c <processData+0x274>
 8001f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <processData+0x260>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f2e:	ee17 2a90 	vmov	r2, s15
 8001f32:	b292      	uxth	r2, r2
 8001f34:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	2bff      	cmp	r3, #255	; 0xff
 8001f40:	ddc0      	ble.n	8001ec4 <processData+0x1bc>
		}
	}

	dataReady = 0;
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <processData+0x280>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	e000      	b.n	8001f4c <processData+0x244>
		return;
 8001f4a:	bf00      	nop
}
 8001f4c:	3720      	adds	r7, #32
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	24000000 	.word	0x24000000
 8001f58:	24000b34 	.word	0x24000b34
 8001f5c:	457ff000 	.word	0x457ff000
 8001f60:	24000b45 	.word	0x24000b45
 8001f64:	24000b3c 	.word	0x24000b3c
 8001f68:	24000b40 	.word	0x24000b40
 8001f6c:	38000000 	.word	0x38000000
 8001f70:	24000b50 	.word	0x24000b50
 8001f74:	3fb33333 	.word	0x3fb33333
 8001f78:	24000b54 	.word	0x24000b54
 8001f7c:	47000000 	.word	0x47000000
 8001f80:	24000b58 	.word	0x24000b58
 8001f84:	24000b5c 	.word	0x24000b5c
 8001f88:	24000b44 	.word	0x24000b44

08001f8c <initEffect>:

void initEffect(uint8_t effect, uint8_t direction) {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	460a      	mov	r2, r1
 8001f96:	71fb      	strb	r3, [r7, #7]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	71bb      	strb	r3, [r7, #6]
	if(effect == ChorusEf && direction == Right) {
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d108      	bne.n	8001fb4 <initEffect+0x28>
 8001fa2:	79bb      	ldrb	r3, [r7, #6]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d105      	bne.n	8001fb4 <initEffect+0x28>
		Tremolo_Free();
 8001fa8:	f7ff f890 	bl	80010cc <Tremolo_Free>
		Chorus_Init(SAMPLE_RATE);
 8001fac:	481e      	ldr	r0, [pc, #120]	; (8002028 <initEffect+0x9c>)
 8001fae:	f7fe fb5b 	bl	8000668 <Chorus_Init>
 8001fb2:	e034      	b.n	800201e <initEffect+0x92>
	} else if(effect == TriangleEf && direction == Left ) {
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d106      	bne.n	8001fc8 <initEffect+0x3c>
 8001fba:	79bb      	ldrb	r3, [r7, #6]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d103      	bne.n	8001fc8 <initEffect+0x3c>
		Tremolo_Init(SAMPLE_RATE);
 8001fc0:	4819      	ldr	r0, [pc, #100]	; (8002028 <initEffect+0x9c>)
 8001fc2:	f7fe ffd3 	bl	8000f6c <Tremolo_Init>
 8001fc6:	e02a      	b.n	800201e <initEffect+0x92>
	} else if(effect == SineEf && direction == Right) {
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d108      	bne.n	8001fe0 <initEffect+0x54>
 8001fce:	79bb      	ldrb	r3, [r7, #6]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d105      	bne.n	8001fe0 <initEffect+0x54>
		Delay_Free();
 8001fd4:	f7fe ff3e 	bl	8000e54 <Delay_Free>
		Tremolo_Init(SAMPLE_RATE);
 8001fd8:	4813      	ldr	r0, [pc, #76]	; (8002028 <initEffect+0x9c>)
 8001fda:	f7fe ffc7 	bl	8000f6c <Tremolo_Init>
 8001fde:	e01e      	b.n	800201e <initEffect+0x92>
	} else if(effect == DelayEf && direction == Right) {
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d106      	bne.n	8001ff4 <initEffect+0x68>
 8001fe6:	79bb      	ldrb	r3, [r7, #6]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d103      	bne.n	8001ff4 <initEffect+0x68>
		Delay_Init(SAMPLE_RATE);
 8001fec:	480e      	ldr	r0, [pc, #56]	; (8002028 <initEffect+0x9c>)
 8001fee:	f7fe fd85 	bl	8000afc <Delay_Init>
 8001ff2:	e014      	b.n	800201e <initEffect+0x92>
	} else if(effect == DelayEf && direction == Left) {
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d108      	bne.n	800200c <initEffect+0x80>
 8001ffa:	79bb      	ldrb	r3, [r7, #6]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <initEffect+0x80>
		Delay_Free();
 8002000:	f7fe ff28 	bl	8000e54 <Delay_Free>
		Delay_Init(SAMPLE_RATE);
 8002004:	4808      	ldr	r0, [pc, #32]	; (8002028 <initEffect+0x9c>)
 8002006:	f7fe fd79 	bl	8000afc <Delay_Init>
 800200a:	e008      	b.n	800201e <initEffect+0x92>
	} else if(effect == CleanEf && direction == Left) {
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d105      	bne.n	800201e <initEffect+0x92>
 8002012:	79bb      	ldrb	r3, [r7, #6]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <initEffect+0x92>
		Delay_Free();
 8002018:	f7fe ff1c 	bl	8000e54 <Delay_Free>
	}
}
 800201c:	e7ff      	b.n	800201e <initEffect+0x92>
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	00017715 	.word	0x00017715

0800202c <changeEffect>:

void changeEffect(uint8_t direction) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
	if(currentEffect == ChorusEf && direction == Right) return;
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <changeEffect+0x70>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b05      	cmp	r3, #5
 800203c:	d102      	bne.n	8002044 <changeEffect+0x18>
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d024      	beq.n	800208e <changeEffect+0x62>
	if(currentEffect == CleanEf && direction == Left) return;
 8002044:	4b15      	ldr	r3, [pc, #84]	; (800209c <changeEffect+0x70>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <changeEffect+0x26>
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d01f      	beq.n	8002092 <changeEffect+0x66>

	effectReady = 0;
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <changeEffect+0x74>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]

	if(direction == Right) {
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d106      	bne.n	800206c <changeEffect+0x40>
		currentEffect++;
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <changeEffect+0x70>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <changeEffect+0x70>)
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e005      	b.n	8002078 <changeEffect+0x4c>
	} else {
		currentEffect--;
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <changeEffect+0x70>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	3b01      	subs	r3, #1
 8002072:	b2da      	uxtb	r2, r3
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <changeEffect+0x70>)
 8002076:	701a      	strb	r2, [r3, #0]
	}

	initEffect(currentEffect, direction);
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <changeEffect+0x70>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	79fa      	ldrb	r2, [r7, #7]
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff83 	bl	8001f8c <initEffect>
	effectReady = 1;
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <changeEffect+0x74>)
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
 800208c:	e002      	b.n	8002094 <changeEffect+0x68>
	if(currentEffect == ChorusEf && direction == Right) return;
 800208e:	bf00      	nop
 8002090:	e000      	b.n	8002094 <changeEffect+0x68>
	if(currentEffect == CleanEf && direction == Left) return;
 8002092:	bf00      	nop
}
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	24000b45 	.word	0x24000b45
 80020a0:	24000000 	.word	0x24000000

080020a4 <displayEffect>:

uint8_t MSG[50] = {'\0'};

void displayEffect(uint8_t effect) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
	lcd_clear();
 80020ae:	f7ff fc7d 	bl	80019ac <lcd_clear>
//	lcd_put_cur(0,0);
//	sprintf(MSG, "%d\n\n\r", effect);
//	lcd_send_string(MSG);
	lcd_put_cur(1,0);
 80020b2:	2100      	movs	r1, #0
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7ff fc90 	bl	80019da <lcd_put_cur>
	if(effect == ChorusEf) {
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	2b05      	cmp	r3, #5
 80020be:	d103      	bne.n	80020c8 <displayEffect+0x24>
		lcd_send_string("Chorus");
 80020c0:	4814      	ldr	r0, [pc, #80]	; (8002114 <displayEffect+0x70>)
 80020c2:	f7ff fce6 	bl	8001a92 <lcd_send_string>
	} else if(effect == SquareEf) {
		lcd_send_string("Tremolo: Square");
	} else if(effect == CleanEf) {
		lcd_send_string("Clean");
	}
}
 80020c6:	e021      	b.n	800210c <displayEffect+0x68>
	} else if(effect == DelayEf) {
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d103      	bne.n	80020d6 <displayEffect+0x32>
		lcd_send_string("Delay");
 80020ce:	4812      	ldr	r0, [pc, #72]	; (8002118 <displayEffect+0x74>)
 80020d0:	f7ff fcdf 	bl	8001a92 <lcd_send_string>
}
 80020d4:	e01a      	b.n	800210c <displayEffect+0x68>
	} else if(effect == SineEf) {
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d103      	bne.n	80020e4 <displayEffect+0x40>
		lcd_send_string("Tremolo: Sine");
 80020dc:	480f      	ldr	r0, [pc, #60]	; (800211c <displayEffect+0x78>)
 80020de:	f7ff fcd8 	bl	8001a92 <lcd_send_string>
}
 80020e2:	e013      	b.n	800210c <displayEffect+0x68>
	} else if(effect == TriangleEf) {
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d103      	bne.n	80020f2 <displayEffect+0x4e>
		lcd_send_string("Tremolo: Triangle");
 80020ea:	480d      	ldr	r0, [pc, #52]	; (8002120 <displayEffect+0x7c>)
 80020ec:	f7ff fcd1 	bl	8001a92 <lcd_send_string>
}
 80020f0:	e00c      	b.n	800210c <displayEffect+0x68>
	} else if(effect == SquareEf) {
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d103      	bne.n	8002100 <displayEffect+0x5c>
		lcd_send_string("Tremolo: Square");
 80020f8:	480a      	ldr	r0, [pc, #40]	; (8002124 <displayEffect+0x80>)
 80020fa:	f7ff fcca 	bl	8001a92 <lcd_send_string>
}
 80020fe:	e005      	b.n	800210c <displayEffect+0x68>
	} else if(effect == CleanEf) {
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <displayEffect+0x68>
		lcd_send_string("Clean");
 8002106:	4808      	ldr	r0, [pc, #32]	; (8002128 <displayEffect+0x84>)
 8002108:	f7ff fcc3 	bl	8001a92 <lcd_send_string>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	0800b9a8 	.word	0x0800b9a8
 8002118:	0800b9b0 	.word	0x0800b9b0
 800211c:	0800b9b8 	.word	0x0800b9b8
 8002120:	0800b9c8 	.word	0x0800b9c8
 8002124:	0800b9dc 	.word	0x0800b9dc
 8002128:	0800b9ec 	.word	0x0800b9ec

0800212c <HAL_TIM_PeriodElapsedCallback>:
int32_t counterOld = 0;

uint8_t encoderDirection = -1;
uint8_t triggerChange = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	if(htim == &htim4) {
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a1b      	ldr	r2, [pc, #108]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d12f      	bne.n	800219c <HAL_TIM_PeriodElapsedCallback+0x70>
		uint16_t ctr = __HAL_TIM_GET_COUNTER(&htim3);
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	81fb      	strh	r3, [r7, #14]

		if(counterOld > ctr) {
 8002144:	89fa      	ldrh	r2, [r7, #14]
 8002146:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	da06      	bge.n	800215c <HAL_TIM_PeriodElapsedCallback+0x30>
			encoderDirection = Left;
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
			triggerChange = 1;
 8002154:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	e00e      	b.n	800217a <HAL_TIM_PeriodElapsedCallback+0x4e>
		} else if (counterOld < ctr) {
 800215c:	89fa      	ldrh	r2, [r7, #14]
 800215e:	4b13      	ldr	r3, [pc, #76]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	dd06      	ble.n	8002174 <HAL_TIM_PeriodElapsedCallback+0x48>
			encoderDirection = Right;
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
			triggerChange = 1;
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	e002      	b.n	800217a <HAL_TIM_PeriodElapsedCallback+0x4e>
		} else {
			triggerChange = 0;
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
		}
		if(triggerChange) {
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00c      	beq.n	800219c <HAL_TIM_PeriodElapsedCallback+0x70>
			changeEffect(encoderDirection);
 8002182:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ff50 	bl	800202c <changeEffect>
			displayEffect(currentEffect);
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff87 	bl	80020a4 <displayEffect>

			counterOld = ctr;
 8002196:	89fb      	ldrh	r3, [r7, #14]
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x80>)
 800219a:	6013      	str	r3, [r2, #0]
		}
	}
}
 800219c:	bf00      	nop
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	24000bfc 	.word	0x24000bfc
 80021a8:	24000bb0 	.word	0x24000bb0
 80021ac:	24000b48 	.word	0x24000b48
 80021b0:	24000001 	.word	0x24000001
 80021b4:	24000b4c 	.word	0x24000b4c
 80021b8:	24000b45 	.word	0x24000b45

080021bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021c2:	f000 fcaf 	bl	8002b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021c6:	f000 f875 	bl	80022b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80021ca:	f000 f8ed 	bl	80023a8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ce:	f7ff fa9f 	bl	8001710 <MX_GPIO_Init>
  MX_DMA_Init();
 80021d2:	f7ff fa6d 	bl	80016b0 <MX_DMA_Init>
  MX_ADC1_Init();
 80021d6:	f7fe ff8b 	bl	80010f0 <MX_ADC1_Init>
  MX_TIM6_Init();
 80021da:	f000 fb83 	bl	80028e4 <MX_TIM6_Init>
  MX_DAC1_Init();
 80021de:	f7ff f9bb 	bl	8001558 <MX_DAC1_Init>
  MX_ADC2_Init();
 80021e2:	f7fe ffff 	bl	80011e4 <MX_ADC2_Init>
  MX_TIM1_Init();
 80021e6:	f000 fa83 	bl	80026f0 <MX_TIM1_Init>
  MX_I2C2_Init();
 80021ea:	f7ff fc67 	bl	8001abc <MX_I2C2_Init>
  MX_TIM4_Init();
 80021ee:	f000 fb29 	bl	8002844 <MX_TIM4_Init>
  MX_TIM3_Init();
 80021f2:	f000 fad1 	bl	8002798 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80021f6:	4821      	ldr	r0, [pc, #132]	; (800227c <main+0xc0>)
 80021f8:	f008 fae2 	bl	800a7c0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);
 80021fc:	4820      	ldr	r0, [pc, #128]	; (8002280 <main+0xc4>)
 80021fe:	f008 fadf 	bl	800a7c0 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcData, BUFFER_SIZE);
 8002202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002206:	491f      	ldr	r1, [pc, #124]	; (8002284 <main+0xc8>)
 8002208:	481f      	ldr	r0, [pc, #124]	; (8002288 <main+0xcc>)
 800220a:	f001 f883 	bl	8003314 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) dacData, BUFFER_SIZE, DAC_ALIGN_12B_R);
 800220e:	2300      	movs	r3, #0
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002216:	4a1d      	ldr	r2, [pc, #116]	; (800228c <main+0xd0>)
 8002218:	2100      	movs	r1, #0
 800221a:	481d      	ldr	r0, [pc, #116]	; (8002290 <main+0xd4>)
 800221c:	f001 ffee 	bl	80041fc <HAL_DAC_Start_DMA>

//  Delay_Init(SAMPLE_RATE);
//  Chorus_Init(SAMPLE_RATE);
//  Tremolo_Init(SAMPLE_RATE);
//  Flanger_Init();
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2Data, 3);
 8002220:	2203      	movs	r2, #3
 8002222:	491c      	ldr	r1, [pc, #112]	; (8002294 <main+0xd8>)
 8002224:	481c      	ldr	r0, [pc, #112]	; (8002298 <main+0xdc>)
 8002226:	f001 f875 	bl	8003314 <HAL_ADC_Start_DMA>

  lcd_init();
 800222a:	f7ff fbf5 	bl	8001a18 <lcd_init>
    lcd_send_string("Guitar Multi-FX");
 800222e:	481b      	ldr	r0, [pc, #108]	; (800229c <main+0xe0>)
 8002230:	f7ff fc2f 	bl	8001a92 <lcd_send_string>

    HAL_Delay(1000);
 8002234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002238:	f000 fd06 	bl	8002c48 <HAL_Delay>

    lcd_put_cur(1,0);
 800223c:	2100      	movs	r1, #0
 800223e:	2001      	movs	r0, #1
 8002240:	f7ff fbcb 	bl	80019da <lcd_put_cur>
    lcd_send_string("v1.0 [SSST 2022]");
 8002244:	4816      	ldr	r0, [pc, #88]	; (80022a0 <main+0xe4>)
 8002246:	f7ff fc24 	bl	8001a92 <lcd_send_string>

    HAL_Delay(1000);
 800224a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800224e:	f000 fcfb 	bl	8002c48 <HAL_Delay>

    HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8002252:	213c      	movs	r1, #60	; 0x3c
 8002254:	4813      	ldr	r0, [pc, #76]	; (80022a4 <main+0xe8>)
 8002256:	f008 fc41 	bl	800aadc <HAL_TIM_Encoder_Start_IT>

    HAL_TIM_Base_Start_IT(&htim4);
 800225a:	4813      	ldr	r0, [pc, #76]	; (80022a8 <main+0xec>)
 800225c:	f008 fb20 	bl	800a8a0 <HAL_TIM_Base_Start_IT>

    lcd_clear();
 8002260:	f7ff fba4 	bl	80019ac <lcd_clear>
    displayEffect(currentEffect);
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <main+0xf0>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff1b 	bl	80020a4 <displayEffect>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(dataReady) {
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <main+0xf4>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0fb      	beq.n	800226e <main+0xb2>
		  processData();
 8002276:	f7ff fd47 	bl	8001d08 <processData>
	  if(dataReady) {
 800227a:	e7f8      	b.n	800226e <main+0xb2>
 800227c:	24000b64 	.word	0x24000b64
 8002280:	24000c48 	.word	0x24000c48
 8002284:	24000334 	.word	0x24000334
 8002288:	240000a0 	.word	0x240000a0
 800228c:	24000734 	.word	0x24000734
 8002290:	2400025c 	.word	0x2400025c
 8002294:	24000b34 	.word	0x24000b34
 8002298:	24000104 	.word	0x24000104
 800229c:	0800b9f4 	.word	0x0800b9f4
 80022a0:	0800ba04 	.word	0x0800ba04
 80022a4:	24000bb0 	.word	0x24000bb0
 80022a8:	24000bfc 	.word	0x24000bfc
 80022ac:	24000b45 	.word	0x24000b45
 80022b0:	24000b44 	.word	0x24000b44

080022b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b09c      	sub	sp, #112	; 0x70
 80022b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022be:	224c      	movs	r2, #76	; 0x4c
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f009 f93c 	bl	800b540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	2220      	movs	r2, #32
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f009 f936 	bl	800b540 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80022d4:	2004      	movs	r0, #4
 80022d6:	f005 f9af 	bl	8007638 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80022da:	2300      	movs	r3, #0
 80022dc:	603b      	str	r3, [r7, #0]
 80022de:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <SystemClock_Config+0xec>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	4a2f      	ldr	r2, [pc, #188]	; (80023a0 <SystemClock_Config+0xec>)
 80022e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022e8:	6193      	str	r3, [r2, #24]
 80022ea:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <SystemClock_Config+0xec>)
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80022f6:	bf00      	nop
 80022f8:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <SystemClock_Config+0xec>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002304:	d1f8      	bne.n	80022f8 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002306:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <SystemClock_Config+0xf0>)
 8002308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230a:	f023 0303 	bic.w	r3, r3, #3
 800230e:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <SystemClock_Config+0xf0>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002316:	2309      	movs	r3, #9
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800231a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002320:	2301      	movs	r3, #1
 8002322:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002324:	2302      	movs	r3, #2
 8002326:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002328:	2302      	movs	r3, #2
 800232a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800232c:	2301      	movs	r3, #1
 800232e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8002330:	2346      	movs	r3, #70	; 0x46
 8002332:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002334:	2302      	movs	r3, #2
 8002336:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002338:	2304      	movs	r3, #4
 800233a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800233c:	2302      	movs	r3, #2
 800233e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002340:	230c      	movs	r3, #12
 8002342:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002344:	2300      	movs	r3, #0
 8002346:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800234c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002350:	4618      	mov	r0, r3
 8002352:	f005 f9cb 	bl	80076ec <HAL_RCC_OscConfig>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800235c:	f000 f8a0 	bl	80024a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002360:	233f      	movs	r3, #63	; 0x3f
 8002362:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002364:	2303      	movs	r3, #3
 8002366:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002370:	2340      	movs	r3, #64	; 0x40
 8002372:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002374:	2340      	movs	r3, #64	; 0x40
 8002376:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800237c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800237e:	2340      	movs	r3, #64	; 0x40
 8002380:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2107      	movs	r1, #7
 8002386:	4618      	mov	r0, r3
 8002388:	f005 fdb4 	bl	8007ef4 <HAL_RCC_ClockConfig>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002392:	f000 f885 	bl	80024a0 <Error_Handler>
  }
}
 8002396:	bf00      	nop
 8002398:	3770      	adds	r7, #112	; 0x70
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	58024800 	.word	0x58024800
 80023a4:	58024400 	.word	0x58024400

080023a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b0ae      	sub	sp, #184	; 0xb8
 80023ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023ae:	463b      	mov	r3, r7
 80023b0:	22b8      	movs	r2, #184	; 0xb8
 80023b2:	2100      	movs	r1, #0
 80023b4:	4618      	mov	r0, r3
 80023b6:	f009 f8c3 	bl	800b540 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80023be:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80023c0:	2301      	movs	r3, #1
 80023c2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80023c4:	2310      	movs	r3, #16
 80023c6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80023c8:	2301      	movs	r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80023cc:	2302      	movs	r3, #2
 80023ce:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80023d0:	2302      	movs	r3, #2
 80023d2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80023d4:	23c0      	movs	r3, #192	; 0xc0
 80023d6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023e6:	463b      	mov	r3, r7
 80023e8:	4618      	mov	r0, r3
 80023ea:	f006 f8e3 	bl	80085b4 <HAL_RCCEx_PeriphCLKConfig>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80023f4:	f000 f854 	bl	80024a0 <Error_Handler>
  }
}
 80023f8:	bf00      	nop
 80023fa:	37b8      	adds	r7, #184	; 0xb8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) {
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002410:	d13b      	bne.n	800248a <HAL_GPIO_EXTI_Callback+0x8a>
		effectReady = 0;
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <HAL_GPIO_EXTI_Callback+0x94>)
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]

		if(currentEffect == ChorusEf) {
 8002418:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <HAL_GPIO_EXTI_Callback+0x98>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b05      	cmp	r3, #5
 800241e:	d105      	bne.n	800242c <HAL_GPIO_EXTI_Callback+0x2c>
			currentEffect = 0;
 8002420:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_GPIO_EXTI_Callback+0x98>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
			Chorus_Free();
 8002426:	f7fe fb51 	bl	8000acc <Chorus_Free>
 800242a:	e00c      	b.n	8002446 <HAL_GPIO_EXTI_Callback+0x46>
		} else if(currentEffect == DelayEf) {
 800242c:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <HAL_GPIO_EXTI_Callback+0x98>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d102      	bne.n	800243a <HAL_GPIO_EXTI_Callback+0x3a>
			Delay_Free();
 8002434:	f7fe fd0e 	bl	8000e54 <Delay_Free>
 8002438:	e005      	b.n	8002446 <HAL_GPIO_EXTI_Callback+0x46>
		} else if(currentEffect == 4) {
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <HAL_GPIO_EXTI_Callback+0x98>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b04      	cmp	r3, #4
 8002440:	d101      	bne.n	8002446 <HAL_GPIO_EXTI_Callback+0x46>
			Tremolo_Free();
 8002442:	f7fe fe43 	bl	80010cc <Tremolo_Free>
		}

		currentEffect++;
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <HAL_GPIO_EXTI_Callback+0x98>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_GPIO_EXTI_Callback+0x98>)
 8002450:	701a      	strb	r2, [r3, #0]

		if(currentEffect == ChorusEf) {
 8002452:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_GPIO_EXTI_Callback+0x98>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b05      	cmp	r3, #5
 8002458:	d103      	bne.n	8002462 <HAL_GPIO_EXTI_Callback+0x62>
			Chorus_Init(SAMPLE_RATE);
 800245a:	4810      	ldr	r0, [pc, #64]	; (800249c <HAL_GPIO_EXTI_Callback+0x9c>)
 800245c:	f7fe f904 	bl	8000668 <Chorus_Init>
 8002460:	e00f      	b.n	8002482 <HAL_GPIO_EXTI_Callback+0x82>
		}
		else if(currentEffect == DelayEf) {
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_GPIO_EXTI_Callback+0x98>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d103      	bne.n	8002472 <HAL_GPIO_EXTI_Callback+0x72>
			Delay_Init(SAMPLE_RATE);
 800246a:	480c      	ldr	r0, [pc, #48]	; (800249c <HAL_GPIO_EXTI_Callback+0x9c>)
 800246c:	f7fe fb46 	bl	8000afc <Delay_Init>
 8002470:	e007      	b.n	8002482 <HAL_GPIO_EXTI_Callback+0x82>
		} else if(Is_Tremolo()) {
 8002472:	f7ff fc11 	bl	8001c98 <Is_Tremolo>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_GPIO_EXTI_Callback+0x82>
			Tremolo_Init(SAMPLE_RATE);
 800247c:	4807      	ldr	r0, [pc, #28]	; (800249c <HAL_GPIO_EXTI_Callback+0x9c>)
 800247e:	f7fe fd75 	bl	8000f6c <Tremolo_Init>
		}

		effectReady = 1;
 8002482:	4b04      	ldr	r3, [pc, #16]	; (8002494 <HAL_GPIO_EXTI_Callback+0x94>)
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
	} else {
		__NOP();
	}
}
 8002488:	e000      	b.n	800248c <HAL_GPIO_EXTI_Callback+0x8c>
		__NOP();
 800248a:	bf00      	nop
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	24000000 	.word	0x24000000
 8002498:	24000b45 	.word	0x24000b45
 800249c:	00017715 	.word	0x00017715

080024a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024a4:	b672      	cpsid	i
}
 80024a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <Error_Handler+0x8>
	...

080024ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_MspInit+0x30>)
 80024b4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80024b8:	4a08      	ldr	r2, [pc, #32]	; (80024dc <HAL_MspInit+0x30>)
 80024ba:	f043 0302 	orr.w	r3, r3, #2
 80024be:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_MspInit+0x30>)
 80024c4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	58024400 	.word	0x58024400

080024e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <NMI_Handler+0x4>

080024e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ea:	e7fe      	b.n	80024ea <HardFault_Handler+0x4>

080024ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <MemManage_Handler+0x4>

080024f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f6:	e7fe      	b.n	80024f6 <BusFault_Handler+0x4>

080024f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <UsageFault_Handler+0x4>

080024fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800252c:	f000 fb6c 	bl	8002c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}

08002534 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <DMA1_Stream0_IRQHandler+0x10>)
 800253a:	f002 fefd 	bl	8005338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	24000168 	.word	0x24000168

08002548 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <DMA1_Stream1_IRQHandler+0x10>)
 800254e:	f002 fef3 	bl	8005338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	24000270 	.word	0x24000270

0800255c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <DMA1_Stream2_IRQHandler+0x10>)
 8002562:	f002 fee9 	bl	8005338 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	240001e0 	.word	0x240001e0

08002570 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <TIM4_IRQHandler+0x10>)
 8002576:	f008 fb5f 	bl	800ac38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	24000bfc 	.word	0x24000bfc

08002584 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002588:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800258c:	f004 fc1f 	bl	8006dce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800259c:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <_sbrk+0x5c>)
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <_sbrk+0x60>)
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <_sbrk+0x64>)
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <_sbrk+0x68>)
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d207      	bcs.n	80025d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c4:	f008 ff82 	bl	800b4cc <__errno>
 80025c8:	4603      	mov	r3, r0
 80025ca:	220c      	movs	r2, #12
 80025cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
 80025d2:	e009      	b.n	80025e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <_sbrk+0x64>)
 80025e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	24100000 	.word	0x24100000
 80025f4:	00000400 	.word	0x00000400
 80025f8:	24000b60 	.word	0x24000b60
 80025fc:	24000ca8 	.word	0x24000ca8

08002600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002604:	4b32      	ldr	r3, [pc, #200]	; (80026d0 <SystemInit+0xd0>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	4a31      	ldr	r2, [pc, #196]	; (80026d0 <SystemInit+0xd0>)
 800260c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002614:	4b2f      	ldr	r3, [pc, #188]	; (80026d4 <SystemInit+0xd4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	2b02      	cmp	r3, #2
 800261e:	d807      	bhi.n	8002630 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002620:	4b2c      	ldr	r3, [pc, #176]	; (80026d4 <SystemInit+0xd4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f023 030f 	bic.w	r3, r3, #15
 8002628:	4a2a      	ldr	r2, [pc, #168]	; (80026d4 <SystemInit+0xd4>)
 800262a:	f043 0303 	orr.w	r3, r3, #3
 800262e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002630:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <SystemInit+0xd8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a28      	ldr	r2, [pc, #160]	; (80026d8 <SystemInit+0xd8>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800263c:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <SystemInit+0xd8>)
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002642:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <SystemInit+0xd8>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4924      	ldr	r1, [pc, #144]	; (80026d8 <SystemInit+0xd8>)
 8002648:	4b24      	ldr	r3, [pc, #144]	; (80026dc <SystemInit+0xdc>)
 800264a:	4013      	ands	r3, r2
 800264c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800264e:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <SystemInit+0xd4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 030c 	and.w	r3, r3, #12
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800265a:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <SystemInit+0xd4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 030f 	bic.w	r3, r3, #15
 8002662:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <SystemInit+0xd4>)
 8002664:	f043 0303 	orr.w	r3, r3, #3
 8002668:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800266a:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <SystemInit+0xd8>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <SystemInit+0xd8>)
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002676:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <SystemInit+0xd8>)
 8002678:	2200      	movs	r2, #0
 800267a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800267c:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <SystemInit+0xd8>)
 800267e:	4a18      	ldr	r2, [pc, #96]	; (80026e0 <SystemInit+0xe0>)
 8002680:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <SystemInit+0xd8>)
 8002684:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <SystemInit+0xe4>)
 8002686:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002688:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <SystemInit+0xd8>)
 800268a:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <SystemInit+0xe8>)
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <SystemInit+0xd8>)
 8002690:	2200      	movs	r2, #0
 8002692:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002694:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <SystemInit+0xd8>)
 8002696:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <SystemInit+0xe8>)
 8002698:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800269a:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <SystemInit+0xd8>)
 800269c:	2200      	movs	r2, #0
 800269e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026a0:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <SystemInit+0xd8>)
 80026a2:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <SystemInit+0xe8>)
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026a6:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <SystemInit+0xd8>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <SystemInit+0xd8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <SystemInit+0xd8>)
 80026b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <SystemInit+0xd8>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <SystemInit+0xec>)
 80026c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80026c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80026c6:	bf00      	nop
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000ed00 	.word	0xe000ed00
 80026d4:	52002000 	.word	0x52002000
 80026d8:	58024400 	.word	0x58024400
 80026dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80026e0:	02020200 	.word	0x02020200
 80026e4:	01ff0000 	.word	0x01ff0000
 80026e8:	01010280 	.word	0x01010280
 80026ec:	52004000 	.word	0x52004000

080026f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026f6:	f107 0310 	add.w	r3, r7, #16
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <MX_TIM1_Init+0xa0>)
 8002710:	4a20      	ldr	r2, [pc, #128]	; (8002794 <MX_TIM1_Init+0xa4>)
 8002712:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8002714:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <MX_TIM1_Init+0xa0>)
 8002716:	f240 32e7 	movw	r2, #999	; 0x3e7
 800271a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271c:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <MX_TIM1_Init+0xa0>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2800-1;
 8002722:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <MX_TIM1_Init+0xa0>)
 8002724:	f640 22ef 	movw	r2, #2799	; 0xaef
 8002728:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272a:	4b19      	ldr	r3, [pc, #100]	; (8002790 <MX_TIM1_Init+0xa0>)
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002730:	4b17      	ldr	r3, [pc, #92]	; (8002790 <MX_TIM1_Init+0xa0>)
 8002732:	2200      	movs	r2, #0
 8002734:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <MX_TIM1_Init+0xa0>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800273c:	4814      	ldr	r0, [pc, #80]	; (8002790 <MX_TIM1_Init+0xa0>)
 800273e:	f007 ffe7 	bl	800a710 <HAL_TIM_Base_Init>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002748:	f7ff feaa 	bl	80024a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800274c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002752:	f107 0310 	add.w	r3, r7, #16
 8002756:	4619      	mov	r1, r3
 8002758:	480d      	ldr	r0, [pc, #52]	; (8002790 <MX_TIM1_Init+0xa0>)
 800275a:	f008 fb8d 	bl	800ae78 <HAL_TIM_ConfigClockSource>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002764:	f7ff fe9c 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002768:	2320      	movs	r3, #32
 800276a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800276c:	2300      	movs	r3, #0
 800276e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002774:	1d3b      	adds	r3, r7, #4
 8002776:	4619      	mov	r1, r3
 8002778:	4805      	ldr	r0, [pc, #20]	; (8002790 <MX_TIM1_Init+0xa0>)
 800277a:	f008 fdfb 	bl	800b374 <HAL_TIMEx_MasterConfigSynchronization>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002784:	f7ff fe8c 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002788:	bf00      	nop
 800278a:	3720      	adds	r7, #32
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	24000b64 	.word	0x24000b64
 8002794:	40010000 	.word	0x40010000

08002798 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08c      	sub	sp, #48	; 0x30
 800279c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800279e:	f107 030c 	add.w	r3, r7, #12
 80027a2:	2224      	movs	r2, #36	; 0x24
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f008 feca 	bl	800b540 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ac:	463b      	mov	r3, r7
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027b6:	4b21      	ldr	r3, [pc, #132]	; (800283c <MX_TIM3_Init+0xa4>)
 80027b8:	4a21      	ldr	r2, [pc, #132]	; (8002840 <MX_TIM3_Init+0xa8>)
 80027ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027bc:	4b1f      	ldr	r3, [pc, #124]	; (800283c <MX_TIM3_Init+0xa4>)
 80027be:	2200      	movs	r2, #0
 80027c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <MX_TIM3_Init+0xa4>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80027c8:	4b1c      	ldr	r3, [pc, #112]	; (800283c <MX_TIM3_Init+0xa4>)
 80027ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <MX_TIM3_Init+0xa4>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <MX_TIM3_Init+0xa4>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027dc:	2303      	movs	r3, #3
 80027de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80027e0:	2302      	movs	r3, #2
 80027e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027e4:	2301      	movs	r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80027f0:	2302      	movs	r3, #2
 80027f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027f4:	2301      	movs	r3, #1
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002800:	f107 030c 	add.w	r3, r7, #12
 8002804:	4619      	mov	r1, r3
 8002806:	480d      	ldr	r0, [pc, #52]	; (800283c <MX_TIM3_Init+0xa4>)
 8002808:	f008 f8c2 	bl	800a990 <HAL_TIM_Encoder_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002812:	f7ff fe45 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800281e:	463b      	mov	r3, r7
 8002820:	4619      	mov	r1, r3
 8002822:	4806      	ldr	r0, [pc, #24]	; (800283c <MX_TIM3_Init+0xa4>)
 8002824:	f008 fda6 	bl	800b374 <HAL_TIMEx_MasterConfigSynchronization>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800282e:	f7ff fe37 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	3730      	adds	r7, #48	; 0x30
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	24000bb0 	.word	0x24000bb0
 8002840:	40000400 	.word	0x40000400

08002844 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800284a:	f107 0310 	add.w	r3, r7, #16
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002862:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <MX_TIM4_Init+0x98>)
 8002864:	4a1e      	ldr	r2, [pc, #120]	; (80028e0 <MX_TIM4_Init+0x9c>)
 8002866:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2500;
 8002868:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <MX_TIM4_Init+0x98>)
 800286a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800286e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <MX_TIM4_Init+0x98>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <MX_TIM4_Init+0x98>)
 8002878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800287c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800287e:	4b17      	ldr	r3, [pc, #92]	; (80028dc <MX_TIM4_Init+0x98>)
 8002880:	2200      	movs	r2, #0
 8002882:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <MX_TIM4_Init+0x98>)
 8002886:	2200      	movs	r2, #0
 8002888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800288a:	4814      	ldr	r0, [pc, #80]	; (80028dc <MX_TIM4_Init+0x98>)
 800288c:	f007 ff40 	bl	800a710 <HAL_TIM_Base_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002896:	f7ff fe03 	bl	80024a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800289a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800289e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80028a0:	f107 0310 	add.w	r3, r7, #16
 80028a4:	4619      	mov	r1, r3
 80028a6:	480d      	ldr	r0, [pc, #52]	; (80028dc <MX_TIM4_Init+0x98>)
 80028a8:	f008 fae6 	bl	800ae78 <HAL_TIM_ConfigClockSource>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80028b2:	f7ff fdf5 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	4619      	mov	r1, r3
 80028c2:	4806      	ldr	r0, [pc, #24]	; (80028dc <MX_TIM4_Init+0x98>)
 80028c4:	f008 fd56 	bl	800b374 <HAL_TIMEx_MasterConfigSynchronization>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80028ce:	f7ff fde7 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80028d2:	bf00      	nop
 80028d4:	3720      	adds	r7, #32
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	24000bfc 	.word	0x24000bfc
 80028e0:	40000800 	.word	0x40000800

080028e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <MX_TIM6_Init+0x64>)
 80028f6:	4a15      	ldr	r2, [pc, #84]	; (800294c <MX_TIM6_Init+0x68>)
 80028f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <MX_TIM6_Init+0x64>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <MX_TIM6_Init+0x64>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2916-1;
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <MX_TIM6_Init+0x64>)
 8002908:	f640 3263 	movw	r2, #2915	; 0xb63
 800290c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800290e:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <MX_TIM6_Init+0x64>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002914:	480c      	ldr	r0, [pc, #48]	; (8002948 <MX_TIM6_Init+0x64>)
 8002916:	f007 fefb 	bl	800a710 <HAL_TIM_Base_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002920:	f7ff fdbe 	bl	80024a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002924:	2320      	movs	r3, #32
 8002926:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800292c:	1d3b      	adds	r3, r7, #4
 800292e:	4619      	mov	r1, r3
 8002930:	4805      	ldr	r0, [pc, #20]	; (8002948 <MX_TIM6_Init+0x64>)
 8002932:	f008 fd1f 	bl	800b374 <HAL_TIMEx_MasterConfigSynchronization>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800293c:	f7ff fdb0 	bl	80024a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	24000c48 	.word	0x24000c48
 800294c:	40001000 	.word	0x40001000

08002950 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a23      	ldr	r2, [pc, #140]	; (80029ec <HAL_TIM_Base_MspInit+0x9c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d10f      	bne.n	8002982 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002962:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <HAL_TIM_Base_MspInit+0xa0>)
 8002964:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002968:	4a21      	ldr	r2, [pc, #132]	; (80029f0 <HAL_TIM_Base_MspInit+0xa0>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002972:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <HAL_TIM_Base_MspInit+0xa0>)
 8002974:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002980:	e030      	b.n	80029e4 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM4)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <HAL_TIM_Base_MspInit+0xa4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d117      	bne.n	80029bc <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800298c:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <HAL_TIM_Base_MspInit+0xa0>)
 800298e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002992:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <HAL_TIM_Base_MspInit+0xa0>)
 8002994:	f043 0304 	orr.w	r3, r3, #4
 8002998:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <HAL_TIM_Base_MspInit+0xa0>)
 800299e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80029aa:	2200      	movs	r2, #0
 80029ac:	2100      	movs	r1, #0
 80029ae:	201e      	movs	r0, #30
 80029b0:	f001 fbcd 	bl	800414e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029b4:	201e      	movs	r0, #30
 80029b6:	f001 fbe4 	bl	8004182 <HAL_NVIC_EnableIRQ>
}
 80029ba:	e013      	b.n	80029e4 <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM6)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <HAL_TIM_Base_MspInit+0xa8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d10e      	bne.n	80029e4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029c6:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <HAL_TIM_Base_MspInit+0xa0>)
 80029c8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80029cc:	4a08      	ldr	r2, [pc, #32]	; (80029f0 <HAL_TIM_Base_MspInit+0xa0>)
 80029ce:	f043 0310 	orr.w	r3, r3, #16
 80029d2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_TIM_Base_MspInit+0xa0>)
 80029d8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	bf00      	nop
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40010000 	.word	0x40010000
 80029f0:	58024400 	.word	0x58024400
 80029f4:	40000800 	.word	0x40000800
 80029f8:	40001000 	.word	0x40001000

080029fc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a29      	ldr	r2, [pc, #164]	; (8002ac0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d14c      	bne.n	8002ab8 <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a1e:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002a20:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002a24:	4a27      	ldr	r2, [pc, #156]	; (8002ac4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8002a2e:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002a30:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3c:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002a3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002a42:	4a20      	ldr	r2, [pc, #128]	; (8002ac4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002a4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002a5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002a60:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002a6a:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002a6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a78:	2340      	movs	r3, #64	; 0x40
 8002a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a84:	2300      	movs	r3, #0
 8002a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	4619      	mov	r1, r3
 8002a92:	480d      	ldr	r0, [pc, #52]	; (8002ac8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002a94:	f003 ffd2 	bl	8006a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aac:	f107 0314 	add.w	r3, r7, #20
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4806      	ldr	r0, [pc, #24]	; (8002acc <HAL_TIM_Encoder_MspInit+0xd0>)
 8002ab4:	f003 ffc2 	bl	8006a3c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002ab8:	bf00      	nop
 8002aba:	3728      	adds	r7, #40	; 0x28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	58024400 	.word	0x58024400
 8002ac8:	58020000 	.word	0x58020000
 8002acc:	58020800 	.word	0x58020800

08002ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ad4:	f7ff fd94 	bl	8002600 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ad8:	480c      	ldr	r0, [pc, #48]	; (8002b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ada:	490d      	ldr	r1, [pc, #52]	; (8002b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002adc:	4a0d      	ldr	r2, [pc, #52]	; (8002b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae0:	e002      	b.n	8002ae8 <LoopCopyDataInit>

08002ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae6:	3304      	adds	r3, #4

08002ae8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aec:	d3f9      	bcc.n	8002ae2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aee:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002af0:	4c0a      	ldr	r4, [pc, #40]	; (8002b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af4:	e001      	b.n	8002afa <LoopFillZerobss>

08002af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af8:	3204      	adds	r2, #4

08002afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002afc:	d3fb      	bcc.n	8002af6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002afe:	f008 fceb 	bl	800b4d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b02:	f7ff fb5b 	bl	80021bc <main>
  bx  lr
 8002b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b08:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002b0c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b10:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8002b14:	0800bb78 	.word	0x0800bb78
  ldr r2, =_sbss
 8002b18:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8002b1c:	24000ca8 	.word	0x24000ca8

08002b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b20:	e7fe      	b.n	8002b20 <ADC_IRQHandler>
	...

08002b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b2a:	2003      	movs	r0, #3
 8002b2c:	f001 fb04 	bl	8004138 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002b30:	f005 fb96 	bl	8008260 <HAL_RCC_GetSysClockFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <HAL_Init+0x68>)
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	4913      	ldr	r1, [pc, #76]	; (8002b90 <HAL_Init+0x6c>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002b4e:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <HAL_Init+0x68>)
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	4a0e      	ldr	r2, [pc, #56]	; (8002b90 <HAL_Init+0x6c>)
 8002b58:	5cd3      	ldrb	r3, [r2, r3]
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
 8002b64:	4a0b      	ldr	r2, [pc, #44]	; (8002b94 <HAL_Init+0x70>)
 8002b66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b68:	4a0b      	ldr	r2, [pc, #44]	; (8002b98 <HAL_Init+0x74>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f000 f814 	bl	8002b9c <HAL_InitTick>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e002      	b.n	8002b84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b7e:	f7ff fc95 	bl	80024ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	58024400 	.word	0x58024400
 8002b90:	0800ba18 	.word	0x0800ba18
 8002b94:	24000008 	.word	0x24000008
 8002b98:	24000004 	.word	0x24000004

08002b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002ba4:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <HAL_InitTick+0x60>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e021      	b.n	8002bf4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <HAL_InitTick+0x64>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <HAL_InitTick+0x60>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f001 fae9 	bl	800419e <HAL_SYSTICK_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e00e      	b.n	8002bf4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b0f      	cmp	r3, #15
 8002bda:	d80a      	bhi.n	8002bf2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	f04f 30ff 	mov.w	r0, #4294967295
 8002be4:	f001 fab3 	bl	800414e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002be8:	4a06      	ldr	r2, [pc, #24]	; (8002c04 <HAL_InitTick+0x68>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	24000010 	.word	0x24000010
 8002c00:	24000004 	.word	0x24000004
 8002c04:	2400000c 	.word	0x2400000c

08002c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_IncTick+0x20>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_IncTick+0x24>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <HAL_IncTick+0x24>)
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	24000010 	.word	0x24000010
 8002c2c:	24000c94 	.word	0x24000c94

08002c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return uwTick;
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_GetTick+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	24000c94 	.word	0x24000c94

08002c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c50:	f7ff ffee 	bl	8002c30 <HAL_GetTick>
 8002c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d005      	beq.n	8002c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <HAL_Delay+0x44>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c6e:	bf00      	nop
 8002c70:	f7ff ffde 	bl	8002c30 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d8f7      	bhi.n	8002c70 <HAL_Delay+0x28>
  {
  }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	24000010 	.word	0x24000010

08002c90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	609a      	str	r2, [r3, #8]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	3360      	adds	r3, #96	; 0x60
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	430b      	orrs	r3, r1
 8002d26:	431a      	orrs	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	611a      	str	r2, [r3, #16]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b087      	sub	sp, #28
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	3360      	adds	r3, #96	; 0x60
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	601a      	str	r2, [r3, #0]
  }
}
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b087      	sub	sp, #28
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3330      	adds	r3, #48	; 0x30
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	4413      	add	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	211f      	movs	r1, #31
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	401a      	ands	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0e9b      	lsrs	r3, r3, #26
 8002dfe:	f003 011f 	and.w	r1, r3, #31
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f023 0203 	bic.w	r2, r3, #3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	3314      	adds	r3, #20
 8002e54:	461a      	mov	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	0e5b      	lsrs	r3, r3, #25
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	4413      	add	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	0d1b      	lsrs	r3, r3, #20
 8002e6c:	f003 031f 	and.w	r3, r3, #31
 8002e70:	2107      	movs	r1, #7
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	401a      	ands	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	0d1b      	lsrs	r3, r3, #20
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	fa01 f303 	lsl.w	r3, r1, r3
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e8e:	bf00      	nop
 8002e90:	371c      	adds	r7, #28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f003 0318 	and.w	r3, r3, #24
 8002ebe:	4908      	ldr	r1, [pc, #32]	; (8002ee0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ec0:	40d9      	lsrs	r1, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	400b      	ands	r3, r1
 8002ec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002ed2:	bf00      	nop
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	000fffff 	.word	0x000fffff

08002ee4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6093      	str	r3, [r2, #8]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	5fffffc0 	.word	0x5fffffc0

08002f24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f38:	d101      	bne.n	8002f3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	6fffffc0 	.word	0x6fffffc0

08002f74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f88:	d101      	bne.n	8002f8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <LL_ADC_Enable+0x24>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	f043 0201 	orr.w	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	7fffffc0 	.word	0x7fffffc0

08002fc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <LL_ADC_IsEnabled+0x18>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <LL_ADC_IsEnabled+0x1a>
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <LL_ADC_REG_StartConversion+0x24>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	f043 0204 	orr.w	r2, r3, #4
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	7fffffc0 	.word	0x7fffffc0

08003014 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b04      	cmp	r3, #4
 8003026:	d101      	bne.n	800302c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b08      	cmp	r3, #8
 800304c:	d101      	bne.n	8003052 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b089      	sub	sp, #36	; 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e138      	b.n	80032ec <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7fe f933 	bl	80012f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff3f 	bl	8002f24 <LL_ADC_IsDeepPowerDownEnabled>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d004      	beq.n	80030b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff25 	bl	8002f00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff ff5a 	bl	8002f74 <LL_ADC_IsInternalRegulatorEnabled>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d114      	bne.n	80030f0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff3e 	bl	8002f4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030d0:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <HAL_ADC_Init+0x294>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	4a88      	ldr	r2, [pc, #544]	; (80032f8 <HAL_ADC_Init+0x298>)
 80030d8:	fba2 2303 	umull	r2, r3, r2, r3
 80030dc:	099b      	lsrs	r3, r3, #6
 80030de:	3301      	adds	r3, #1
 80030e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030e2:	e002      	b.n	80030ea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f9      	bne.n	80030e4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff3d 	bl	8002f74 <LL_ADC_IsInternalRegulatorEnabled>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10d      	bne.n	800311c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003104:	f043 0210 	orr.w	r2, r3, #16
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003110:	f043 0201 	orr.w	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff ff77 	bl	8003014 <LL_ADC_REG_IsConversionOngoing>
 8003126:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 80d2 	bne.w	80032da <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f040 80ce 	bne.w	80032da <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003146:	f043 0202 	orr.w	r2, r3, #2
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ff36 	bl	8002fc4 <LL_ADC_IsEnabled>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d110      	bne.n	8003180 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800315e:	4867      	ldr	r0, [pc, #412]	; (80032fc <HAL_ADC_Init+0x29c>)
 8003160:	f7ff ff30 	bl	8002fc4 <LL_ADC_IsEnabled>
 8003164:	4604      	mov	r4, r0
 8003166:	4866      	ldr	r0, [pc, #408]	; (8003300 <HAL_ADC_Init+0x2a0>)
 8003168:	f7ff ff2c 	bl	8002fc4 <LL_ADC_IsEnabled>
 800316c:	4603      	mov	r3, r0
 800316e:	4323      	orrs	r3, r4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4619      	mov	r1, r3
 800317a:	4862      	ldr	r0, [pc, #392]	; (8003304 <HAL_ADC_Init+0x2a4>)
 800317c:	f7ff fd88 	bl	8002c90 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7d5b      	ldrb	r3, [r3, #21]
 8003184:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800318a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8003190:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7f1b      	ldrb	r3, [r3, #28]
 8003196:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7f1b      	ldrb	r3, [r3, #28]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d106      	bne.n	80031b2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	045b      	lsls	r3, r3, #17
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	4b4c      	ldr	r3, [pc, #304]	; (8003308 <HAL_ADC_Init+0x2a8>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	69b9      	ldr	r1, [r7, #24]
 80031de:	430b      	orrs	r3, r1
 80031e0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff ff14 	bl	8003014 <LL_ADC_REG_IsConversionOngoing>
 80031ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ff21 	bl	800303a <LL_ADC_INJ_IsConversionOngoing>
 80031f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d14a      	bne.n	8003296 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d147      	bne.n	8003296 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	7d1b      	ldrb	r3, [r3, #20]
 800320a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	4b3c      	ldr	r3, [pc, #240]	; (800330c <HAL_ADC_Init+0x2ac>)
 800321c:	4013      	ands	r3, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6812      	ldr	r2, [r2, #0]
 8003222:	69b9      	ldr	r1, [r7, #24]
 8003224:	430b      	orrs	r3, r1
 8003226:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800322e:	2b01      	cmp	r3, #1
 8003230:	d11b      	bne.n	800326a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	4b34      	ldr	r3, [pc, #208]	; (8003310 <HAL_ADC_Init+0x2b0>)
 8003240:	4013      	ands	r3, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003246:	3a01      	subs	r2, #1
 8003248:	0411      	lsls	r1, r2, #16
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800324e:	4311      	orrs	r1, r2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003254:	4311      	orrs	r1, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800325a:	430a      	orrs	r2, r1
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	611a      	str	r2, [r3, #16]
 8003268:	e007      	b.n	800327a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 fcf3 	bl	8003c7c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d10c      	bne.n	80032b8 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f023 010f 	bic.w	r1, r3, #15
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	1e5a      	subs	r2, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	631a      	str	r2, [r3, #48]	; 0x30
 80032b6:	e007      	b.n	80032c8 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 020f 	bic.w	r2, r2, #15
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	f023 0303 	bic.w	r3, r3, #3
 80032d0:	f043 0201 	orr.w	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	655a      	str	r2, [r3, #84]	; 0x54
 80032d8:	e007      	b.n	80032ea <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	f043 0210 	orr.w	r2, r3, #16
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3724      	adds	r7, #36	; 0x24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd90      	pop	{r4, r7, pc}
 80032f4:	24000004 	.word	0x24000004
 80032f8:	053e2d63 	.word	0x053e2d63
 80032fc:	40022000 	.word	0x40022000
 8003300:	40022100 	.word	0x40022100
 8003304:	40022300 	.word	0x40022300
 8003308:	fff0c003 	.word	0xfff0c003
 800330c:	ffffbffc 	.word	0xffffbffc
 8003310:	fc00f81e 	.word	0xfc00f81e

08003314 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003320:	484f      	ldr	r0, [pc, #316]	; (8003460 <HAL_ADC_Start_DMA+0x14c>)
 8003322:	f7ff fddf 	bl	8002ee4 <LL_ADC_GetMultimode>
 8003326:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fe71 	bl	8003014 <LL_ADC_REG_IsConversionOngoing>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	f040 808c 	bne.w	8003452 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_ADC_Start_DMA+0x34>
 8003344:	2302      	movs	r3, #2
 8003346:	e087      	b.n	8003458 <HAL_ADC_Start_DMA+0x144>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b05      	cmp	r3, #5
 800335a:	d002      	beq.n	8003362 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b09      	cmp	r3, #9
 8003360:	d170      	bne.n	8003444 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fb7a 	bl	8003a5c <ADC_Enable>
 8003368:	4603      	mov	r3, r0
 800336a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d163      	bne.n	800343a <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <HAL_ADC_Start_DMA+0x150>)
 8003378:	4013      	ands	r3, r2
 800337a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a38      	ldr	r2, [pc, #224]	; (8003468 <HAL_ADC_Start_DMA+0x154>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d002      	beq.n	8003392 <HAL_ADC_Start_DMA+0x7e>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	e000      	b.n	8003394 <HAL_ADC_Start_DMA+0x80>
 8003392:	4b36      	ldr	r3, [pc, #216]	; (800346c <HAL_ADC_Start_DMA+0x158>)
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	4293      	cmp	r3, r2
 800339a:	d002      	beq.n	80033a2 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d006      	beq.n	80033c8 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	f023 0206 	bic.w	r2, r3, #6
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	659a      	str	r2, [r3, #88]	; 0x58
 80033c6:	e002      	b.n	80033ce <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d2:	4a27      	ldr	r2, [pc, #156]	; (8003470 <HAL_ADC_Start_DMA+0x15c>)
 80033d4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033da:	4a26      	ldr	r2, [pc, #152]	; (8003474 <HAL_ADC_Start_DMA+0x160>)
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e2:	4a25      	ldr	r2, [pc, #148]	; (8003478 <HAL_ADC_Start_DMA+0x164>)
 80033e4:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	221c      	movs	r2, #28
 80033ec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0210 	orr.w	r2, r2, #16
 8003404:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	4619      	mov	r1, r3
 8003410:	4610      	mov	r0, r2
 8003412:	f7ff fd04 	bl	8002e1e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	3340      	adds	r3, #64	; 0x40
 8003420:	4619      	mov	r1, r3
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f001 fd1d 	bl	8004e64 <HAL_DMA_Start_IT>
 800342a:	4603      	mov	r3, r0
 800342c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fdda 	bl	8002fec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003438:	e00d      	b.n	8003456 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003442:	e008      	b.n	8003456 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003450:	e001      	b.n	8003456 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003452:	2302      	movs	r3, #2
 8003454:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003456:	7dfb      	ldrb	r3, [r7, #23]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40022300 	.word	0x40022300
 8003464:	fffff0fe 	.word	0xfffff0fe
 8003468:	40022100 	.word	0x40022100
 800346c:	40022000 	.word	0x40022000
 8003470:	08003b55 	.word	0x08003b55
 8003474:	08003c2d 	.word	0x08003c2d
 8003478:	08003c49 	.word	0x08003c49

0800347c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b0a1      	sub	sp, #132	; 0x84
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	4a9a      	ldr	r2, [pc, #616]	; (8003714 <HAL_ADC_ConfigChannel+0x284>)
 80034aa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x2a>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e2bc      	b.n	8003a34 <HAL_ADC_ConfigChannel+0x5a4>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fda4 	bl	8003014 <LL_ADC_REG_IsConversionOngoing>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 82a1 	bne.w	8003a16 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d108      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x62>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	0e9b      	lsrs	r3, r3, #26
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	2201      	movs	r2, #1
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	e016      	b.n	8003520 <HAL_ADC_ConfigChannel+0x90>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003500:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003502:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800350a:	2320      	movs	r3, #32
 800350c:	e003      	b.n	8003516 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800350e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	2201      	movs	r2, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6812      	ldr	r2, [r2, #0]
 8003524:	69d1      	ldr	r1, [r2, #28]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	430b      	orrs	r3, r1
 800352c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	f7ff fc43 	bl	8002dc6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fd65 	bl	8003014 <LL_ADC_REG_IsConversionOngoing>
 800354a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fd72 	bl	800303a <LL_ADC_INJ_IsConversionOngoing>
 8003556:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800355a:	2b00      	cmp	r3, #0
 800355c:	f040 80a0 	bne.w	80036a0 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 809c 	bne.w	80036a0 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6819      	ldr	r1, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	461a      	mov	r2, r3
 8003576:	f7ff fc65 	bl	8002e44 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10b      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x110>
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	e00a      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x126>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	089b      	lsrs	r3, r3, #2
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d027      	beq.n	8003610 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	6919      	ldr	r1, [r3, #16]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035ce:	f7ff fb93 	bl	8002cf8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6919      	ldr	r1, [r3, #16]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	7e5b      	ldrb	r3, [r3, #25]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d102      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x158>
 80035e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80035e6:	e000      	b.n	80035ea <HAL_ADC_ConfigChannel+0x15a>
 80035e8:	2300      	movs	r3, #0
 80035ea:	461a      	mov	r2, r3
 80035ec:	f7ff fbbd 	bl	8002d6a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6919      	ldr	r1, [r3, #16]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	7e1b      	ldrb	r3, [r3, #24]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d102      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x176>
 8003600:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003604:	e000      	b.n	8003608 <HAL_ADC_ConfigChannel+0x178>
 8003606:	2300      	movs	r3, #0
 8003608:	461a      	mov	r2, r3
 800360a:	f7ff fb95 	bl	8002d38 <LL_ADC_SetDataRightShift>
 800360e:	e047      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003616:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	069b      	lsls	r3, r3, #26
 8003620:	429a      	cmp	r2, r3
 8003622:	d107      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003632:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	069b      	lsls	r3, r3, #26
 8003644:	429a      	cmp	r2, r3
 8003646:	d107      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003656:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800365e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	069b      	lsls	r3, r3, #26
 8003668:	429a      	cmp	r2, r3
 800366a:	d107      	bne.n	800367c <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800367a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003682:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	069b      	lsls	r3, r3, #26
 800368c:	429a      	cmp	r2, r3
 800368e:	d107      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800369e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fc8d 	bl	8002fc4 <LL_ADC_IsEnabled>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f040 81bb 	bne.w	8003a28 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6819      	ldr	r1, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	461a      	mov	r2, r3
 80036c0:	f7ff fbec 	bl	8002e9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4a12      	ldr	r2, [pc, #72]	; (8003714 <HAL_ADC_ConfigChannel+0x284>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	f040 8130 	bne.w	8003930 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10b      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x268>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0e9b      	lsrs	r3, r3, #26
 80036e6:	3301      	adds	r3, #1
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	2b09      	cmp	r3, #9
 80036ee:	bf94      	ite	ls
 80036f0:	2301      	movls	r3, #1
 80036f2:	2300      	movhi	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	e01b      	b.n	8003730 <HAL_ADC_ConfigChannel+0x2a0>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003708:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800370a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800370c:	2b00      	cmp	r3, #0
 800370e:	d103      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8003710:	2320      	movs	r3, #32
 8003712:	e005      	b.n	8003720 <HAL_ADC_ConfigChannel+0x290>
 8003714:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8003718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	3301      	adds	r3, #1
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	2b09      	cmp	r3, #9
 8003728:	bf94      	ite	ls
 800372a:	2301      	movls	r3, #1
 800372c:	2300      	movhi	r3, #0
 800372e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003730:	2b00      	cmp	r3, #0
 8003732:	d079      	beq.n	8003828 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800373c:	2b00      	cmp	r3, #0
 800373e:	d107      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x2c0>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	0e9b      	lsrs	r3, r3, #26
 8003746:	3301      	adds	r3, #1
 8003748:	069b      	lsls	r3, r3, #26
 800374a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800374e:	e015      	b.n	800377c <HAL_ADC_ConfigChannel+0x2ec>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800375e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003760:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003768:	2320      	movs	r3, #32
 800376a:	e003      	b.n	8003774 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800376c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	3301      	adds	r3, #1
 8003776:	069b      	lsls	r3, r3, #26
 8003778:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <HAL_ADC_ConfigChannel+0x30c>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	0e9b      	lsrs	r3, r3, #26
 800378e:	3301      	adds	r3, #1
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	2101      	movs	r1, #1
 8003796:	fa01 f303 	lsl.w	r3, r1, r3
 800379a:	e017      	b.n	80037cc <HAL_ADC_ConfigChannel+0x33c>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80037aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80037ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80037b4:	2320      	movs	r3, #32
 80037b6:	e003      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80037b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	3301      	adds	r3, #1
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	2101      	movs	r1, #1
 80037c8:	fa01 f303 	lsl.w	r3, r1, r3
 80037cc:	ea42 0103 	orr.w	r1, r2, r3
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x362>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0e9b      	lsrs	r3, r3, #26
 80037e2:	3301      	adds	r3, #1
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4613      	mov	r3, r2
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4413      	add	r3, r2
 80037ee:	051b      	lsls	r3, r3, #20
 80037f0:	e018      	b.n	8003824 <HAL_ADC_ConfigChannel+0x394>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fa:	fa93 f3a3 	rbit	r3, r3
 80037fe:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800380a:	2320      	movs	r3, #32
 800380c:	e003      	b.n	8003816 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	fab3 f383 	clz	r3, r3
 8003814:	b2db      	uxtb	r3, r3
 8003816:	3301      	adds	r3, #1
 8003818:	f003 021f 	and.w	r2, r3, #31
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003824:	430b      	orrs	r3, r1
 8003826:	e07e      	b.n	8003926 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003830:	2b00      	cmp	r3, #0
 8003832:	d107      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x3b4>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	0e9b      	lsrs	r3, r3, #26
 800383a:	3301      	adds	r3, #1
 800383c:	069b      	lsls	r3, r3, #26
 800383e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003842:	e015      	b.n	8003870 <HAL_ADC_ConfigChannel+0x3e0>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800385c:	2320      	movs	r3, #32
 800385e:	e003      	b.n	8003868 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	3301      	adds	r3, #1
 800386a:	069b      	lsls	r3, r3, #26
 800386c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003878:	2b00      	cmp	r3, #0
 800387a:	d109      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x400>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	0e9b      	lsrs	r3, r3, #26
 8003882:	3301      	adds	r3, #1
 8003884:	f003 031f 	and.w	r3, r3, #31
 8003888:	2101      	movs	r1, #1
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	e017      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x430>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	fa93 f3a3 	rbit	r3, r3
 800389c:	61bb      	str	r3, [r7, #24]
  return result;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80038a8:	2320      	movs	r3, #32
 80038aa:	e003      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	3301      	adds	r3, #1
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	2101      	movs	r1, #1
 80038bc:	fa01 f303 	lsl.w	r3, r1, r3
 80038c0:	ea42 0103 	orr.w	r1, r2, r3
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10d      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x45c>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	0e9b      	lsrs	r3, r3, #26
 80038d6:	3301      	adds	r3, #1
 80038d8:	f003 021f 	and.w	r2, r3, #31
 80038dc:	4613      	mov	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	4413      	add	r3, r2
 80038e2:	3b1e      	subs	r3, #30
 80038e4:	051b      	lsls	r3, r3, #20
 80038e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038ea:	e01b      	b.n	8003924 <HAL_ADC_ConfigChannel+0x494>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	60fb      	str	r3, [r7, #12]
  return result;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8003904:	2320      	movs	r3, #32
 8003906:	e003      	b.n	8003910 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	fab3 f383 	clz	r3, r3
 800390e:	b2db      	uxtb	r3, r3
 8003910:	3301      	adds	r3, #1
 8003912:	f003 021f 	and.w	r2, r3, #31
 8003916:	4613      	mov	r3, r2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	4413      	add	r3, r2
 800391c:	3b1e      	subs	r3, #30
 800391e:	051b      	lsls	r3, r3, #20
 8003920:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003924:	430b      	orrs	r3, r1
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	6892      	ldr	r2, [r2, #8]
 800392a:	4619      	mov	r1, r3
 800392c:	f7ff fa8a 	bl	8002e44 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	da77      	bge.n	8003a28 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003938:	4840      	ldr	r0, [pc, #256]	; (8003a3c <HAL_ADC_ConfigChannel+0x5ac>)
 800393a:	f7ff f9cf 	bl	8002cdc <LL_ADC_GetCommonPathInternalCh>
 800393e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003940:	483f      	ldr	r0, [pc, #252]	; (8003a40 <HAL_ADC_ConfigChannel+0x5b0>)
 8003942:	f7ff fb3f 	bl	8002fc4 <LL_ADC_IsEnabled>
 8003946:	4604      	mov	r4, r0
 8003948:	483e      	ldr	r0, [pc, #248]	; (8003a44 <HAL_ADC_ConfigChannel+0x5b4>)
 800394a:	f7ff fb3b 	bl	8002fc4 <LL_ADC_IsEnabled>
 800394e:	4603      	mov	r3, r0
 8003950:	4323      	orrs	r3, r4
 8003952:	2b00      	cmp	r3, #0
 8003954:	d155      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a3b      	ldr	r2, [pc, #236]	; (8003a48 <HAL_ADC_ConfigChannel+0x5b8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d122      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x516>
 8003960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d11d      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a35      	ldr	r2, [pc, #212]	; (8003a44 <HAL_ADC_ConfigChannel+0x5b4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d159      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800397a:	4619      	mov	r1, r3
 800397c:	482f      	ldr	r0, [pc, #188]	; (8003a3c <HAL_ADC_ConfigChannel+0x5ac>)
 800397e:	f7ff f99a 	bl	8002cb6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003982:	4b32      	ldr	r3, [pc, #200]	; (8003a4c <HAL_ADC_ConfigChannel+0x5bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	099b      	lsrs	r3, r3, #6
 8003988:	4a31      	ldr	r2, [pc, #196]	; (8003a50 <HAL_ADC_ConfigChannel+0x5c0>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	099b      	lsrs	r3, r3, #6
 8003990:	3301      	adds	r3, #1
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003996:	e002      	b.n	800399e <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	3b01      	subs	r3, #1
 800399c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1f9      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039a4:	e040      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <HAL_ADC_ConfigChannel+0x5c4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d111      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x544>
 80039b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <HAL_ADC_ConfigChannel+0x5b4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d131      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80039c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ca:	4619      	mov	r1, r3
 80039cc:	481b      	ldr	r0, [pc, #108]	; (8003a3c <HAL_ADC_ConfigChannel+0x5ac>)
 80039ce:	f7ff f972 	bl	8002cb6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039d2:	e029      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <HAL_ADC_ConfigChannel+0x5c8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d124      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x598>
 80039de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d11f      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_ADC_ConfigChannel+0x5b4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d11a      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80039f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039f8:	4619      	mov	r1, r3
 80039fa:	4810      	ldr	r0, [pc, #64]	; (8003a3c <HAL_ADC_ConfigChannel+0x5ac>)
 80039fc:	f7ff f95b 	bl	8002cb6 <LL_ADC_SetCommonPathInternalCh>
 8003a00:	e012      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	f043 0220 	orr.w	r2, r3, #32
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a14:	e008      	b.n	8003a28 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1a:	f043 0220 	orr.w	r2, r3, #32
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a30:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3784      	adds	r7, #132	; 0x84
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd90      	pop	{r4, r7, pc}
 8003a3c:	40022300 	.word	0x40022300
 8003a40:	40022000 	.word	0x40022000
 8003a44:	40022100 	.word	0x40022100
 8003a48:	cb840000 	.word	0xcb840000
 8003a4c:	24000004 	.word	0x24000004
 8003a50:	053e2d63 	.word	0x053e2d63
 8003a54:	bac04000 	.word	0xbac04000
 8003a58:	cfb80000 	.word	0xcfb80000

08003a5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff faab 	bl	8002fc4 <LL_ADC_IsEnabled>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d161      	bne.n	8003b38 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	4b32      	ldr	r3, [pc, #200]	; (8003b44 <ADC_Enable+0xe8>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00d      	beq.n	8003a9e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	f043 0210 	orr.w	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	f043 0201 	orr.w	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e04d      	b.n	8003b3a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff fa7a 	bl	8002f9c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003aa8:	f7ff f8c2 	bl	8002c30 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003aae:	4826      	ldr	r0, [pc, #152]	; (8003b48 <ADC_Enable+0xec>)
 8003ab0:	f7ff fa18 	bl	8002ee4 <LL_ADC_GetMultimode>
 8003ab4:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a24      	ldr	r2, [pc, #144]	; (8003b4c <ADC_Enable+0xf0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d002      	beq.n	8003ac6 <ADC_Enable+0x6a>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	e000      	b.n	8003ac8 <ADC_Enable+0x6c>
 8003ac6:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <ADC_Enable+0xf4>)
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d02c      	beq.n	8003b2a <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d130      	bne.n	8003b38 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ad6:	e028      	b.n	8003b2a <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff fa71 	bl	8002fc4 <LL_ADC_IsEnabled>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d104      	bne.n	8003af2 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff fa55 	bl	8002f9c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003af2:	f7ff f89d 	bl	8002c30 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d914      	bls.n	8003b2a <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d00d      	beq.n	8003b2a <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	f043 0210 	orr.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	f043 0201 	orr.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e007      	b.n	8003b3a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d1cf      	bne.n	8003ad8 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	8000003f 	.word	0x8000003f
 8003b48:	40022300 	.word	0x40022300
 8003b4c:	40022100 	.word	0x40022100
 8003b50:	40022000 	.word	0x40022000

08003b54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d14b      	bne.n	8003c06 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d021      	beq.n	8003bcc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff f907 	bl	8002da0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d032      	beq.n	8003bfe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d12b      	bne.n	8003bfe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d11f      	bne.n	8003bfe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc2:	f043 0201 	orr.w	r2, r3, #1
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	655a      	str	r2, [r3, #84]	; 0x54
 8003bca:	e018      	b.n	8003bfe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d111      	bne.n	8003bfe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d105      	bne.n	8003bfe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	f043 0201 	orr.w	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f7fe f826 	bl	8001c50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c04:	e00e      	b.n	8003c24 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff fc32 	bl	800347c <HAL_ADC_ErrorCallback>
}
 8003c18:	e004      	b.n	8003c24 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	4798      	blx	r3
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7fd ffe4 	bl	8001c08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	f043 0204 	orr.w	r2, r3, #4
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f7ff fc04 	bl	800347c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003c84:	4b5f      	ldr	r3, [pc, #380]	; (8003e04 <ADC_ConfigureBoostMode+0x188>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01c      	beq.n	8003cca <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003c90:	f004 fc60 	bl	8008554 <HAL_RCC_GetHCLKFreq>
 8003c94:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c9e:	d010      	beq.n	8003cc2 <ADC_ConfigureBoostMode+0x46>
 8003ca0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ca4:	d871      	bhi.n	8003d8a <ADC_ConfigureBoostMode+0x10e>
 8003ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003caa:	d002      	beq.n	8003cb2 <ADC_ConfigureBoostMode+0x36>
 8003cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cb0:	d16b      	bne.n	8003d8a <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	0c1b      	lsrs	r3, r3, #16
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbe:	60fb      	str	r3, [r7, #12]
        break;
 8003cc0:	e066      	b.n	8003d90 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	089b      	lsrs	r3, r3, #2
 8003cc6:	60fb      	str	r3, [r7, #12]
        break;
 8003cc8:	e062      	b.n	8003d90 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003cca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003cce:	f005 fb7d 	bl	80093cc <HAL_RCCEx_GetPeriphCLKFreq>
 8003cd2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003cdc:	d051      	beq.n	8003d82 <ADC_ConfigureBoostMode+0x106>
 8003cde:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003ce2:	d854      	bhi.n	8003d8e <ADC_ConfigureBoostMode+0x112>
 8003ce4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ce8:	d047      	beq.n	8003d7a <ADC_ConfigureBoostMode+0xfe>
 8003cea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003cee:	d84e      	bhi.n	8003d8e <ADC_ConfigureBoostMode+0x112>
 8003cf0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003cf4:	d03d      	beq.n	8003d72 <ADC_ConfigureBoostMode+0xf6>
 8003cf6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003cfa:	d848      	bhi.n	8003d8e <ADC_ConfigureBoostMode+0x112>
 8003cfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d00:	d033      	beq.n	8003d6a <ADC_ConfigureBoostMode+0xee>
 8003d02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d06:	d842      	bhi.n	8003d8e <ADC_ConfigureBoostMode+0x112>
 8003d08:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d0c:	d029      	beq.n	8003d62 <ADC_ConfigureBoostMode+0xe6>
 8003d0e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d12:	d83c      	bhi.n	8003d8e <ADC_ConfigureBoostMode+0x112>
 8003d14:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d18:	d01a      	beq.n	8003d50 <ADC_ConfigureBoostMode+0xd4>
 8003d1a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d1e:	d836      	bhi.n	8003d8e <ADC_ConfigureBoostMode+0x112>
 8003d20:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d24:	d014      	beq.n	8003d50 <ADC_ConfigureBoostMode+0xd4>
 8003d26:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d2a:	d830      	bhi.n	8003d8e <ADC_ConfigureBoostMode+0x112>
 8003d2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d30:	d00e      	beq.n	8003d50 <ADC_ConfigureBoostMode+0xd4>
 8003d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d36:	d82a      	bhi.n	8003d8e <ADC_ConfigureBoostMode+0x112>
 8003d38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d3c:	d008      	beq.n	8003d50 <ADC_ConfigureBoostMode+0xd4>
 8003d3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d42:	d824      	bhi.n	8003d8e <ADC_ConfigureBoostMode+0x112>
 8003d44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d48:	d002      	beq.n	8003d50 <ADC_ConfigureBoostMode+0xd4>
 8003d4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d4e:	d11e      	bne.n	8003d8e <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	0c9b      	lsrs	r3, r3, #18
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5e:	60fb      	str	r3, [r7, #12]
        break;
 8003d60:	e016      	b.n	8003d90 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	60fb      	str	r3, [r7, #12]
        break;
 8003d68:	e012      	b.n	8003d90 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	60fb      	str	r3, [r7, #12]
        break;
 8003d70:	e00e      	b.n	8003d90 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	60fb      	str	r3, [r7, #12]
        break;
 8003d78:	e00a      	b.n	8003d90 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	09db      	lsrs	r3, r3, #7
 8003d7e:	60fb      	str	r3, [r7, #12]
        break;
 8003d80:	e006      	b.n	8003d90 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	0a1b      	lsrs	r3, r3, #8
 8003d86:	60fb      	str	r3, [r7, #12]
        break;
 8003d88:	e002      	b.n	8003d90 <ADC_ConfigureBoostMode+0x114>
        break;
 8003d8a:	bf00      	nop
 8003d8c:	e000      	b.n	8003d90 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8003d8e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4a1b      	ldr	r2, [pc, #108]	; (8003e08 <ADC_ConfigureBoostMode+0x18c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d808      	bhi.n	8003db0 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003dac:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003dae:	e025      	b.n	8003dfc <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <ADC_ConfigureBoostMode+0x190>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d80a      	bhi.n	8003dce <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dca:	609a      	str	r2, [r3, #8]
}
 8003dcc:	e016      	b.n	8003dfc <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a0f      	ldr	r2, [pc, #60]	; (8003e10 <ADC_ConfigureBoostMode+0x194>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d80a      	bhi.n	8003dec <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de8:	609a      	str	r2, [r3, #8]
}
 8003dea:	e007      	b.n	8003dfc <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003dfa:	609a      	str	r2, [r3, #8]
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40022300 	.word	0x40022300
 8003e08:	005f5e10 	.word	0x005f5e10
 8003e0c:	00bebc20 	.word	0x00bebc20
 8003e10:	017d7840 	.word	0x017d7840

08003e14 <LL_ADC_IsEnabled>:
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <LL_ADC_IsEnabled+0x18>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <LL_ADC_IsEnabled+0x1a>
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <LL_ADC_REG_IsConversionOngoing>:
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d101      	bne.n	8003e52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e60:	b590      	push	{r4, r7, lr}
 8003e62:	b09f      	sub	sp, #124	; 0x7c
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e080      	b.n	8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003e86:	2300      	movs	r3, #0
 8003e88:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a3d      	ldr	r2, [pc, #244]	; (8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d102      	bne.n	8003e9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003e98:	4b3c      	ldr	r3, [pc, #240]	; (8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	e001      	b.n	8003ea2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10b      	bne.n	8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	f043 0220 	orr.w	r2, r3, #32
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e05f      	b.n	8003f80 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7ff ffb9 	bl	8003e3a <LL_ADC_REG_IsConversionOngoing>
 8003ec8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff ffb3 	bl	8003e3a <LL_ADC_REG_IsConversionOngoing>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d141      	bne.n	8003f5e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d13e      	bne.n	8003f5e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ee0:	4b2b      	ldr	r3, [pc, #172]	; (8003f90 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003ee2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003efe:	4822      	ldr	r0, [pc, #136]	; (8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003f00:	f7ff ff88 	bl	8003e14 <LL_ADC_IsEnabled>
 8003f04:	4604      	mov	r4, r0
 8003f06:	4821      	ldr	r0, [pc, #132]	; (8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003f08:	f7ff ff84 	bl	8003e14 <LL_ADC_IsEnabled>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	4323      	orrs	r3, r4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d12e      	bne.n	8003f72 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	6811      	ldr	r1, [r2, #0]
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	6892      	ldr	r2, [r2, #8]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	431a      	orrs	r2, r3
 8003f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f2c:	e021      	b.n	8003f72 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f38:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f3a:	4813      	ldr	r0, [pc, #76]	; (8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003f3c:	f7ff ff6a 	bl	8003e14 <LL_ADC_IsEnabled>
 8003f40:	4604      	mov	r4, r0
 8003f42:	4812      	ldr	r0, [pc, #72]	; (8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003f44:	f7ff ff66 	bl	8003e14 <LL_ADC_IsEnabled>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	4323      	orrs	r3, r4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d110      	bne.n	8003f72 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f5a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f5c:	e009      	b.n	8003f72 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	f043 0220 	orr.w	r2, r3, #32
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f70:	e000      	b.n	8003f74 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f72:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f7c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	377c      	adds	r7, #124	; 0x7c
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd90      	pop	{r4, r7, pc}
 8003f88:	40022000 	.word	0x40022000
 8003f8c:	40022100 	.word	0x40022100
 8003f90:	40022300 	.word	0x40022300
 8003f94:	fffff0e0 	.word	0xfffff0e0

08003f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <__NVIC_SetPriorityGrouping+0x40>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fc0:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <__NVIC_SetPriorityGrouping+0x44>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fc6:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <__NVIC_SetPriorityGrouping+0x40>)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	60d3      	str	r3, [r2, #12]
}
 8003fcc:	bf00      	nop
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	e000ed00 	.word	0xe000ed00
 8003fdc:	05fa0000 	.word	0x05fa0000

08003fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	0a1b      	lsrs	r3, r3, #8
 8003fea:	f003 0307 	and.w	r3, r3, #7
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800400a:	2b00      	cmp	r3, #0
 800400c:	db0b      	blt.n	8004026 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	f003 021f 	and.w	r2, r3, #31
 8004014:	4907      	ldr	r1, [pc, #28]	; (8004034 <__NVIC_EnableIRQ+0x38>)
 8004016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	2001      	movs	r0, #1
 800401e:	fa00 f202 	lsl.w	r2, r0, r2
 8004022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	e000e100 	.word	0xe000e100

08004038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	6039      	str	r1, [r7, #0]
 8004042:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004048:	2b00      	cmp	r3, #0
 800404a:	db0a      	blt.n	8004062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	b2da      	uxtb	r2, r3
 8004050:	490c      	ldr	r1, [pc, #48]	; (8004084 <__NVIC_SetPriority+0x4c>)
 8004052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004056:	0112      	lsls	r2, r2, #4
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	440b      	add	r3, r1
 800405c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004060:	e00a      	b.n	8004078 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	b2da      	uxtb	r2, r3
 8004066:	4908      	ldr	r1, [pc, #32]	; (8004088 <__NVIC_SetPriority+0x50>)
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	3b04      	subs	r3, #4
 8004070:	0112      	lsls	r2, r2, #4
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	440b      	add	r3, r1
 8004076:	761a      	strb	r2, [r3, #24]
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	e000e100 	.word	0xe000e100
 8004088:	e000ed00 	.word	0xe000ed00

0800408c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800408c:	b480      	push	{r7}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f1c3 0307 	rsb	r3, r3, #7
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	bf28      	it	cs
 80040aa:	2304      	movcs	r3, #4
 80040ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	3304      	adds	r3, #4
 80040b2:	2b06      	cmp	r3, #6
 80040b4:	d902      	bls.n	80040bc <NVIC_EncodePriority+0x30>
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3b03      	subs	r3, #3
 80040ba:	e000      	b.n	80040be <NVIC_EncodePriority+0x32>
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c0:	f04f 32ff 	mov.w	r2, #4294967295
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43da      	mvns	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	401a      	ands	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040d4:	f04f 31ff 	mov.w	r1, #4294967295
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	fa01 f303 	lsl.w	r3, r1, r3
 80040de:	43d9      	mvns	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e4:	4313      	orrs	r3, r2
         );
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3724      	adds	r7, #36	; 0x24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3b01      	subs	r3, #1
 8004100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004104:	d301      	bcc.n	800410a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004106:	2301      	movs	r3, #1
 8004108:	e00f      	b.n	800412a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800410a:	4a0a      	ldr	r2, [pc, #40]	; (8004134 <SysTick_Config+0x40>)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3b01      	subs	r3, #1
 8004110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004112:	210f      	movs	r1, #15
 8004114:	f04f 30ff 	mov.w	r0, #4294967295
 8004118:	f7ff ff8e 	bl	8004038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800411c:	4b05      	ldr	r3, [pc, #20]	; (8004134 <SysTick_Config+0x40>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004122:	4b04      	ldr	r3, [pc, #16]	; (8004134 <SysTick_Config+0x40>)
 8004124:	2207      	movs	r2, #7
 8004126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	e000e010 	.word	0xe000e010

08004138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ff29 	bl	8003f98 <__NVIC_SetPriorityGrouping>
}
 8004146:	bf00      	nop
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b086      	sub	sp, #24
 8004152:	af00      	add	r7, sp, #0
 8004154:	4603      	mov	r3, r0
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800415c:	f7ff ff40 	bl	8003fe0 <__NVIC_GetPriorityGrouping>
 8004160:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	6978      	ldr	r0, [r7, #20]
 8004168:	f7ff ff90 	bl	800408c <NVIC_EncodePriority>
 800416c:	4602      	mov	r2, r0
 800416e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff ff5f 	bl	8004038 <__NVIC_SetPriority>
}
 800417a:	bf00      	nop
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
 8004188:	4603      	mov	r3, r0
 800418a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800418c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff ff33 	bl	8003ffc <__NVIC_EnableIRQ>
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b082      	sub	sp, #8
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff ffa4 	bl	80040f4 <SysTick_Config>
 80041ac:	4603      	mov	r3, r0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e014      	b.n	80041f2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	791b      	ldrb	r3, [r3, #4]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d105      	bne.n	80041de <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7fd f9ef 	bl	80015bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	795b      	ldrb	r3, [r3, #5]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_DAC_Start_DMA+0x1e>
 8004216:	2302      	movs	r3, #2
 8004218:	e0ab      	b.n	8004372 <HAL_DAC_Start_DMA+0x176>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2202      	movs	r2, #2
 8004224:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d12f      	bne.n	800428c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a52      	ldr	r2, [pc, #328]	; (800437c <HAL_DAC_Start_DMA+0x180>)
 8004232:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	4a51      	ldr	r2, [pc, #324]	; (8004380 <HAL_DAC_Start_DMA+0x184>)
 800423a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	4a50      	ldr	r2, [pc, #320]	; (8004384 <HAL_DAC_Start_DMA+0x188>)
 8004242:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004252:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	2b08      	cmp	r3, #8
 8004258:	d013      	beq.n	8004282 <HAL_DAC_Start_DMA+0x86>
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	2b08      	cmp	r3, #8
 800425e:	d845      	bhi.n	80042ec <HAL_DAC_Start_DMA+0xf0>
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_DAC_Start_DMA+0x72>
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	2b04      	cmp	r3, #4
 800426a:	d005      	beq.n	8004278 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800426c:	e03e      	b.n	80042ec <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3308      	adds	r3, #8
 8004274:	613b      	str	r3, [r7, #16]
        break;
 8004276:	e03c      	b.n	80042f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	330c      	adds	r3, #12
 800427e:	613b      	str	r3, [r7, #16]
        break;
 8004280:	e037      	b.n	80042f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3310      	adds	r3, #16
 8004288:	613b      	str	r3, [r7, #16]
        break;
 800428a:	e032      	b.n	80042f2 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4a3d      	ldr	r2, [pc, #244]	; (8004388 <HAL_DAC_Start_DMA+0x18c>)
 8004292:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a3c      	ldr	r2, [pc, #240]	; (800438c <HAL_DAC_Start_DMA+0x190>)
 800429a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4a3b      	ldr	r2, [pc, #236]	; (8004390 <HAL_DAC_Start_DMA+0x194>)
 80042a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80042b2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d013      	beq.n	80042e2 <HAL_DAC_Start_DMA+0xe6>
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d817      	bhi.n	80042f0 <HAL_DAC_Start_DMA+0xf4>
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_DAC_Start_DMA+0xd2>
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d005      	beq.n	80042d8 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80042cc:	e010      	b.n	80042f0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3314      	adds	r3, #20
 80042d4:	613b      	str	r3, [r7, #16]
        break;
 80042d6:	e00c      	b.n	80042f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3318      	adds	r3, #24
 80042de:	613b      	str	r3, [r7, #16]
        break;
 80042e0:	e007      	b.n	80042f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	331c      	adds	r3, #28
 80042e8:	613b      	str	r3, [r7, #16]
        break;
 80042ea:	e002      	b.n	80042f2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80042ec:	bf00      	nop
 80042ee:	e000      	b.n	80042f2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80042f0:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d111      	bne.n	800431c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004306:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6898      	ldr	r0, [r3, #8]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	f000 fda7 	bl	8004e64 <HAL_DMA_Start_IT>
 8004316:	4603      	mov	r3, r0
 8004318:	75fb      	strb	r3, [r7, #23]
 800431a:	e010      	b.n	800433e <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800432a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68d8      	ldr	r0, [r3, #12]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	f000 fd95 	bl	8004e64 <HAL_DMA_Start_IT>
 800433a:	4603      	mov	r3, r0
 800433c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004344:	7dfb      	ldrb	r3, [r7, #23]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10c      	bne.n	8004364 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6819      	ldr	r1, [r3, #0]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	2201      	movs	r2, #1
 8004358:	409a      	lsls	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e005      	b.n	8004370 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f043 0204 	orr.w	r2, r3, #4
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004370:	7dfb      	ldrb	r3, [r7, #23]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	08004631 	.word	0x08004631
 8004380:	08004653 	.word	0x08004653
 8004384:	0800466f 	.word	0x0800466f
 8004388:	080046d9 	.word	0x080046d9
 800438c:	080046fb 	.word	0x080046fb
 8004390:	08004717 	.word	0x08004717

08004394 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	795b      	ldrb	r3, [r3, #5]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_DAC_ConfigChannel+0x18>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e11d      	b.n	8004624 <HAL_DAC_ConfigChannel+0x254>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2202      	movs	r2, #2
 80043f2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d174      	bne.n	80044e6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80043fc:	f7fe fc18 	bl	8002c30 <HAL_GetTick>
 8004400:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d134      	bne.n	8004472 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004408:	e011      	b.n	800442e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800440a:	f7fe fc11 	bl	8002c30 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d90a      	bls.n	800442e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f043 0208 	orr.w	r2, r3, #8
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2203      	movs	r2, #3
 8004428:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e0fa      	b.n	8004624 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004434:	4b7d      	ldr	r3, [pc, #500]	; (800462c <HAL_DAC_ConfigChannel+0x25c>)
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e6      	bne.n	800440a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800443c:	2001      	movs	r0, #1
 800443e:	f7fe fc03 	bl	8002c48 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	6992      	ldr	r2, [r2, #24]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40
 800444c:	e01e      	b.n	800448c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800444e:	f7fe fbef 	bl	8002c30 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	d90a      	bls.n	8004472 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f043 0208 	orr.w	r2, r3, #8
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2203      	movs	r2, #3
 800446c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e0d8      	b.n	8004624 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004478:	2b00      	cmp	r3, #0
 800447a:	dbe8      	blt.n	800444e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800447c:	2001      	movs	r0, #1
 800447e:	f7fe fbe3 	bl	8002c48 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	6992      	ldr	r2, [r2, #24]
 800448a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800449c:	fa01 f303 	lsl.w	r3, r1, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	ea02 0103 	and.w	r1, r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	409a      	lsls	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	21ff      	movs	r1, #255	; 0xff
 80044c8:	fa01 f303 	lsl.w	r3, r1, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	ea02 0103 	and.w	r1, r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	6a1a      	ldr	r2, [r3, #32]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	409a      	lsls	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d11d      	bne.n	800452a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f003 0310 	and.w	r3, r3, #16
 80044fc:	221f      	movs	r2, #31
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	43db      	mvns	r3, r3
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4013      	ands	r3, r2
 8004508:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f003 0310 	and.w	r3, r3, #16
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004530:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2207      	movs	r2, #7
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43db      	mvns	r3, r3
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4013      	ands	r3, r2
 8004544:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d102      	bne.n	8004554 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	e00f      	b.n	8004574 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b02      	cmp	r3, #2
 800455a:	d102      	bne.n	8004562 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800455c:	2301      	movs	r3, #1
 800455e:	61fb      	str	r3, [r7, #28]
 8004560:	e008      	b.n	8004574 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800456a:	2301      	movs	r3, #1
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	e001      	b.n	8004574 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4313      	orrs	r3, r2
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6819      	ldr	r1, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43da      	mvns	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	400a      	ands	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f003 0310 	and.w	r3, r3, #16
 80045ca:	f640 72fe 	movw	r2, #4094	; 0xffe
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	43db      	mvns	r3, r3
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4013      	ands	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6819      	ldr	r1, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	22c0      	movs	r2, #192	; 0xc0
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	43da      	mvns	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	400a      	ands	r2, r1
 8004614:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2201      	movs	r2, #1
 800461a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3720      	adds	r7, #32
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20008000 	.word	0x20008000

08004630 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff fea8 	bl	8004394 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2201      	movs	r2, #1
 8004648:	711a      	strb	r2, [r3, #4]
}
 800464a:	bf00      	nop
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b084      	sub	sp, #16
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f7ff fea1 	bl	80043a8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f043 0204 	orr.w	r2, r3, #4
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f7ff fe97 	bl	80043bc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	711a      	strb	r2, [r3, #4]
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f7ff ffd8 	bl	800469c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	711a      	strb	r2, [r3, #4]
}
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f7ff ffd1 	bl	80046b0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	f043 0204 	orr.w	r2, r3, #4
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f7ff ffc7 	bl	80046c4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	711a      	strb	r2, [r3, #4]
}
 800473c:	bf00      	nop
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800474c:	f7fe fa70 	bl	8002c30 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e37f      	b.n	8004e5c <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a66      	ldr	r2, [pc, #408]	; (80048fc <HAL_DMA_Init+0x1b8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d04a      	beq.n	80047fc <HAL_DMA_Init+0xb8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a65      	ldr	r2, [pc, #404]	; (8004900 <HAL_DMA_Init+0x1bc>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d045      	beq.n	80047fc <HAL_DMA_Init+0xb8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a63      	ldr	r2, [pc, #396]	; (8004904 <HAL_DMA_Init+0x1c0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d040      	beq.n	80047fc <HAL_DMA_Init+0xb8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a62      	ldr	r2, [pc, #392]	; (8004908 <HAL_DMA_Init+0x1c4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d03b      	beq.n	80047fc <HAL_DMA_Init+0xb8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a60      	ldr	r2, [pc, #384]	; (800490c <HAL_DMA_Init+0x1c8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d036      	beq.n	80047fc <HAL_DMA_Init+0xb8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a5f      	ldr	r2, [pc, #380]	; (8004910 <HAL_DMA_Init+0x1cc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d031      	beq.n	80047fc <HAL_DMA_Init+0xb8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a5d      	ldr	r2, [pc, #372]	; (8004914 <HAL_DMA_Init+0x1d0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d02c      	beq.n	80047fc <HAL_DMA_Init+0xb8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a5c      	ldr	r2, [pc, #368]	; (8004918 <HAL_DMA_Init+0x1d4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d027      	beq.n	80047fc <HAL_DMA_Init+0xb8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a5a      	ldr	r2, [pc, #360]	; (800491c <HAL_DMA_Init+0x1d8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d022      	beq.n	80047fc <HAL_DMA_Init+0xb8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a59      	ldr	r2, [pc, #356]	; (8004920 <HAL_DMA_Init+0x1dc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d01d      	beq.n	80047fc <HAL_DMA_Init+0xb8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a57      	ldr	r2, [pc, #348]	; (8004924 <HAL_DMA_Init+0x1e0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d018      	beq.n	80047fc <HAL_DMA_Init+0xb8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a56      	ldr	r2, [pc, #344]	; (8004928 <HAL_DMA_Init+0x1e4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d013      	beq.n	80047fc <HAL_DMA_Init+0xb8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a54      	ldr	r2, [pc, #336]	; (800492c <HAL_DMA_Init+0x1e8>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00e      	beq.n	80047fc <HAL_DMA_Init+0xb8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a53      	ldr	r2, [pc, #332]	; (8004930 <HAL_DMA_Init+0x1ec>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d009      	beq.n	80047fc <HAL_DMA_Init+0xb8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a51      	ldr	r2, [pc, #324]	; (8004934 <HAL_DMA_Init+0x1f0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d004      	beq.n	80047fc <HAL_DMA_Init+0xb8>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a50      	ldr	r2, [pc, #320]	; (8004938 <HAL_DMA_Init+0x1f4>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d101      	bne.n	8004800 <HAL_DMA_Init+0xbc>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <HAL_DMA_Init+0xbe>
 8004800:	2300      	movs	r3, #0
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 813c 	beq.w	8004a80 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a37      	ldr	r2, [pc, #220]	; (80048fc <HAL_DMA_Init+0x1b8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d04a      	beq.n	80048b8 <HAL_DMA_Init+0x174>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a36      	ldr	r2, [pc, #216]	; (8004900 <HAL_DMA_Init+0x1bc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d045      	beq.n	80048b8 <HAL_DMA_Init+0x174>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a34      	ldr	r2, [pc, #208]	; (8004904 <HAL_DMA_Init+0x1c0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d040      	beq.n	80048b8 <HAL_DMA_Init+0x174>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a33      	ldr	r2, [pc, #204]	; (8004908 <HAL_DMA_Init+0x1c4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d03b      	beq.n	80048b8 <HAL_DMA_Init+0x174>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a31      	ldr	r2, [pc, #196]	; (800490c <HAL_DMA_Init+0x1c8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d036      	beq.n	80048b8 <HAL_DMA_Init+0x174>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a30      	ldr	r2, [pc, #192]	; (8004910 <HAL_DMA_Init+0x1cc>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d031      	beq.n	80048b8 <HAL_DMA_Init+0x174>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2e      	ldr	r2, [pc, #184]	; (8004914 <HAL_DMA_Init+0x1d0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d02c      	beq.n	80048b8 <HAL_DMA_Init+0x174>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a2d      	ldr	r2, [pc, #180]	; (8004918 <HAL_DMA_Init+0x1d4>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d027      	beq.n	80048b8 <HAL_DMA_Init+0x174>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a2b      	ldr	r2, [pc, #172]	; (800491c <HAL_DMA_Init+0x1d8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d022      	beq.n	80048b8 <HAL_DMA_Init+0x174>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a2a      	ldr	r2, [pc, #168]	; (8004920 <HAL_DMA_Init+0x1dc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d01d      	beq.n	80048b8 <HAL_DMA_Init+0x174>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a28      	ldr	r2, [pc, #160]	; (8004924 <HAL_DMA_Init+0x1e0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d018      	beq.n	80048b8 <HAL_DMA_Init+0x174>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a27      	ldr	r2, [pc, #156]	; (8004928 <HAL_DMA_Init+0x1e4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d013      	beq.n	80048b8 <HAL_DMA_Init+0x174>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a25      	ldr	r2, [pc, #148]	; (800492c <HAL_DMA_Init+0x1e8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00e      	beq.n	80048b8 <HAL_DMA_Init+0x174>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a24      	ldr	r2, [pc, #144]	; (8004930 <HAL_DMA_Init+0x1ec>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d009      	beq.n	80048b8 <HAL_DMA_Init+0x174>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a22      	ldr	r2, [pc, #136]	; (8004934 <HAL_DMA_Init+0x1f0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <HAL_DMA_Init+0x174>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a21      	ldr	r2, [pc, #132]	; (8004938 <HAL_DMA_Init+0x1f4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d108      	bne.n	80048ca <HAL_DMA_Init+0x186>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	e007      	b.n	80048da <HAL_DMA_Init+0x196>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0201 	bic.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048da:	e02f      	b.n	800493c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048dc:	f7fe f9a8 	bl	8002c30 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b05      	cmp	r3, #5
 80048e8:	d928      	bls.n	800493c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2203      	movs	r2, #3
 80048f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e2af      	b.n	8004e5c <HAL_DMA_Init+0x718>
 80048fc:	40020010 	.word	0x40020010
 8004900:	40020028 	.word	0x40020028
 8004904:	40020040 	.word	0x40020040
 8004908:	40020058 	.word	0x40020058
 800490c:	40020070 	.word	0x40020070
 8004910:	40020088 	.word	0x40020088
 8004914:	400200a0 	.word	0x400200a0
 8004918:	400200b8 	.word	0x400200b8
 800491c:	40020410 	.word	0x40020410
 8004920:	40020428 	.word	0x40020428
 8004924:	40020440 	.word	0x40020440
 8004928:	40020458 	.word	0x40020458
 800492c:	40020470 	.word	0x40020470
 8004930:	40020488 	.word	0x40020488
 8004934:	400204a0 	.word	0x400204a0
 8004938:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1c8      	bne.n	80048dc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4b73      	ldr	r3, [pc, #460]	; (8004b24 <HAL_DMA_Init+0x3e0>)
 8004956:	4013      	ands	r3, r2
 8004958:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004962:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800496e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800497a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	4313      	orrs	r3, r2
 8004986:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	2b04      	cmp	r3, #4
 800498e:	d107      	bne.n	80049a0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	4313      	orrs	r3, r2
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b28      	cmp	r3, #40	; 0x28
 80049a6:	d903      	bls.n	80049b0 <HAL_DMA_Init+0x26c>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b2e      	cmp	r3, #46	; 0x2e
 80049ae:	d91f      	bls.n	80049f0 <HAL_DMA_Init+0x2ac>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b3e      	cmp	r3, #62	; 0x3e
 80049b6:	d903      	bls.n	80049c0 <HAL_DMA_Init+0x27c>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b42      	cmp	r3, #66	; 0x42
 80049be:	d917      	bls.n	80049f0 <HAL_DMA_Init+0x2ac>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b46      	cmp	r3, #70	; 0x46
 80049c6:	d903      	bls.n	80049d0 <HAL_DMA_Init+0x28c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b48      	cmp	r3, #72	; 0x48
 80049ce:	d90f      	bls.n	80049f0 <HAL_DMA_Init+0x2ac>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b4e      	cmp	r3, #78	; 0x4e
 80049d6:	d903      	bls.n	80049e0 <HAL_DMA_Init+0x29c>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b52      	cmp	r3, #82	; 0x52
 80049de:	d907      	bls.n	80049f0 <HAL_DMA_Init+0x2ac>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b73      	cmp	r3, #115	; 0x73
 80049e6:	d905      	bls.n	80049f4 <HAL_DMA_Init+0x2b0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b77      	cmp	r3, #119	; 0x77
 80049ee:	d801      	bhi.n	80049f4 <HAL_DMA_Init+0x2b0>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <HAL_DMA_Init+0x2b2>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a00:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f023 0307 	bic.w	r3, r3, #7
 8004a18:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d117      	bne.n	8004a5c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00e      	beq.n	8004a5c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f001 fe72 	bl	8006728 <DMA_CheckFifoParam>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d008      	beq.n	8004a5c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2240      	movs	r2, #64	; 0x40
 8004a4e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e1ff      	b.n	8004e5c <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f001 fdad 	bl	80065c4 <DMA_CalcBaseAndBitshift>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	223f      	movs	r2, #63	; 0x3f
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	609a      	str	r2, [r3, #8]
 8004a7e:	e0fe      	b.n	8004c7e <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a28      	ldr	r2, [pc, #160]	; (8004b28 <HAL_DMA_Init+0x3e4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d04a      	beq.n	8004b20 <HAL_DMA_Init+0x3dc>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a27      	ldr	r2, [pc, #156]	; (8004b2c <HAL_DMA_Init+0x3e8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d045      	beq.n	8004b20 <HAL_DMA_Init+0x3dc>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a25      	ldr	r2, [pc, #148]	; (8004b30 <HAL_DMA_Init+0x3ec>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d040      	beq.n	8004b20 <HAL_DMA_Init+0x3dc>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a24      	ldr	r2, [pc, #144]	; (8004b34 <HAL_DMA_Init+0x3f0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d03b      	beq.n	8004b20 <HAL_DMA_Init+0x3dc>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a22      	ldr	r2, [pc, #136]	; (8004b38 <HAL_DMA_Init+0x3f4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d036      	beq.n	8004b20 <HAL_DMA_Init+0x3dc>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <HAL_DMA_Init+0x3f8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d031      	beq.n	8004b20 <HAL_DMA_Init+0x3dc>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1f      	ldr	r2, [pc, #124]	; (8004b40 <HAL_DMA_Init+0x3fc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d02c      	beq.n	8004b20 <HAL_DMA_Init+0x3dc>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <HAL_DMA_Init+0x400>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d027      	beq.n	8004b20 <HAL_DMA_Init+0x3dc>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <HAL_DMA_Init+0x404>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d022      	beq.n	8004b20 <HAL_DMA_Init+0x3dc>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <HAL_DMA_Init+0x408>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d01d      	beq.n	8004b20 <HAL_DMA_Init+0x3dc>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <HAL_DMA_Init+0x40c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d018      	beq.n	8004b20 <HAL_DMA_Init+0x3dc>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <HAL_DMA_Init+0x410>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d013      	beq.n	8004b20 <HAL_DMA_Init+0x3dc>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a16      	ldr	r2, [pc, #88]	; (8004b58 <HAL_DMA_Init+0x414>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00e      	beq.n	8004b20 <HAL_DMA_Init+0x3dc>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a15      	ldr	r2, [pc, #84]	; (8004b5c <HAL_DMA_Init+0x418>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d009      	beq.n	8004b20 <HAL_DMA_Init+0x3dc>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <HAL_DMA_Init+0x41c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d004      	beq.n	8004b20 <HAL_DMA_Init+0x3dc>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a12      	ldr	r2, [pc, #72]	; (8004b64 <HAL_DMA_Init+0x420>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d123      	bne.n	8004b68 <HAL_DMA_Init+0x424>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e022      	b.n	8004b6a <HAL_DMA_Init+0x426>
 8004b24:	fe10803f 	.word	0xfe10803f
 8004b28:	48022c08 	.word	0x48022c08
 8004b2c:	48022c1c 	.word	0x48022c1c
 8004b30:	48022c30 	.word	0x48022c30
 8004b34:	48022c44 	.word	0x48022c44
 8004b38:	48022c58 	.word	0x48022c58
 8004b3c:	48022c6c 	.word	0x48022c6c
 8004b40:	48022c80 	.word	0x48022c80
 8004b44:	48022c94 	.word	0x48022c94
 8004b48:	58025408 	.word	0x58025408
 8004b4c:	5802541c 	.word	0x5802541c
 8004b50:	58025430 	.word	0x58025430
 8004b54:	58025444 	.word	0x58025444
 8004b58:	58025458 	.word	0x58025458
 8004b5c:	5802546c 	.word	0x5802546c
 8004b60:	58025480 	.word	0x58025480
 8004b64:	58025494 	.word	0x58025494
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d07e      	beq.n	8004c6c <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a80      	ldr	r2, [pc, #512]	; (8004d74 <HAL_DMA_Init+0x630>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d021      	beq.n	8004bbc <HAL_DMA_Init+0x478>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a7e      	ldr	r2, [pc, #504]	; (8004d78 <HAL_DMA_Init+0x634>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d01c      	beq.n	8004bbc <HAL_DMA_Init+0x478>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a7d      	ldr	r2, [pc, #500]	; (8004d7c <HAL_DMA_Init+0x638>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d017      	beq.n	8004bbc <HAL_DMA_Init+0x478>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a7b      	ldr	r2, [pc, #492]	; (8004d80 <HAL_DMA_Init+0x63c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d012      	beq.n	8004bbc <HAL_DMA_Init+0x478>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a7a      	ldr	r2, [pc, #488]	; (8004d84 <HAL_DMA_Init+0x640>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00d      	beq.n	8004bbc <HAL_DMA_Init+0x478>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a78      	ldr	r2, [pc, #480]	; (8004d88 <HAL_DMA_Init+0x644>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d008      	beq.n	8004bbc <HAL_DMA_Init+0x478>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a77      	ldr	r2, [pc, #476]	; (8004d8c <HAL_DMA_Init+0x648>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <HAL_DMA_Init+0x478>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a75      	ldr	r2, [pc, #468]	; (8004d90 <HAL_DMA_Init+0x64c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4b6e      	ldr	r3, [pc, #440]	; (8004d94 <HAL_DMA_Init+0x650>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2b40      	cmp	r3, #64	; 0x40
 8004be4:	d008      	beq.n	8004bf8 <HAL_DMA_Init+0x4b4>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b80      	cmp	r3, #128	; 0x80
 8004bec:	d102      	bne.n	8004bf4 <HAL_DMA_Init+0x4b0>
 8004bee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bf2:	e002      	b.n	8004bfa <HAL_DMA_Init+0x4b6>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e000      	b.n	8004bfa <HAL_DMA_Init+0x4b6>
 8004bf8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	68d2      	ldr	r2, [r2, #12]
 8004bfe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c28:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4b56      	ldr	r3, [pc, #344]	; (8004d98 <HAL_DMA_Init+0x654>)
 8004c40:	4413      	add	r3, r2
 8004c42:	4a56      	ldr	r2, [pc, #344]	; (8004d9c <HAL_DMA_Init+0x658>)
 8004c44:	fba2 2303 	umull	r2, r3, r2, r3
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	009a      	lsls	r2, r3, #2
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f001 fcb7 	bl	80065c4 <DMA_CalcBaseAndBitshift>
 8004c56:	4603      	mov	r3, r0
 8004c58:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	2201      	movs	r2, #1
 8004c64:	409a      	lsls	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	e008      	b.n	8004c7e <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2240      	movs	r2, #64	; 0x40
 8004c70:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2203      	movs	r2, #3
 8004c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e0ee      	b.n	8004e5c <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a47      	ldr	r2, [pc, #284]	; (8004da0 <HAL_DMA_Init+0x65c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d072      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a45      	ldr	r2, [pc, #276]	; (8004da4 <HAL_DMA_Init+0x660>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d06d      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a44      	ldr	r2, [pc, #272]	; (8004da8 <HAL_DMA_Init+0x664>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d068      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a42      	ldr	r2, [pc, #264]	; (8004dac <HAL_DMA_Init+0x668>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d063      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a41      	ldr	r2, [pc, #260]	; (8004db0 <HAL_DMA_Init+0x66c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d05e      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a3f      	ldr	r2, [pc, #252]	; (8004db4 <HAL_DMA_Init+0x670>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d059      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a3e      	ldr	r2, [pc, #248]	; (8004db8 <HAL_DMA_Init+0x674>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d054      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a3c      	ldr	r2, [pc, #240]	; (8004dbc <HAL_DMA_Init+0x678>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d04f      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a3b      	ldr	r2, [pc, #236]	; (8004dc0 <HAL_DMA_Init+0x67c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d04a      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a39      	ldr	r2, [pc, #228]	; (8004dc4 <HAL_DMA_Init+0x680>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d045      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a38      	ldr	r2, [pc, #224]	; (8004dc8 <HAL_DMA_Init+0x684>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d040      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a36      	ldr	r2, [pc, #216]	; (8004dcc <HAL_DMA_Init+0x688>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d03b      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a35      	ldr	r2, [pc, #212]	; (8004dd0 <HAL_DMA_Init+0x68c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d036      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a33      	ldr	r2, [pc, #204]	; (8004dd4 <HAL_DMA_Init+0x690>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d031      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a32      	ldr	r2, [pc, #200]	; (8004dd8 <HAL_DMA_Init+0x694>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d02c      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a30      	ldr	r2, [pc, #192]	; (8004ddc <HAL_DMA_Init+0x698>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d027      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a14      	ldr	r2, [pc, #80]	; (8004d74 <HAL_DMA_Init+0x630>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d022      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <HAL_DMA_Init+0x634>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d01d      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a11      	ldr	r2, [pc, #68]	; (8004d7c <HAL_DMA_Init+0x638>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d018      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a0f      	ldr	r2, [pc, #60]	; (8004d80 <HAL_DMA_Init+0x63c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a0e      	ldr	r2, [pc, #56]	; (8004d84 <HAL_DMA_Init+0x640>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00e      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a0c      	ldr	r2, [pc, #48]	; (8004d88 <HAL_DMA_Init+0x644>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d009      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a0b      	ldr	r2, [pc, #44]	; (8004d8c <HAL_DMA_Init+0x648>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d004      	beq.n	8004d6e <HAL_DMA_Init+0x62a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <HAL_DMA_Init+0x64c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d138      	bne.n	8004de0 <HAL_DMA_Init+0x69c>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e037      	b.n	8004de2 <HAL_DMA_Init+0x69e>
 8004d72:	bf00      	nop
 8004d74:	58025408 	.word	0x58025408
 8004d78:	5802541c 	.word	0x5802541c
 8004d7c:	58025430 	.word	0x58025430
 8004d80:	58025444 	.word	0x58025444
 8004d84:	58025458 	.word	0x58025458
 8004d88:	5802546c 	.word	0x5802546c
 8004d8c:	58025480 	.word	0x58025480
 8004d90:	58025494 	.word	0x58025494
 8004d94:	fffe000f 	.word	0xfffe000f
 8004d98:	a7fdabf8 	.word	0xa7fdabf8
 8004d9c:	cccccccd 	.word	0xcccccccd
 8004da0:	40020010 	.word	0x40020010
 8004da4:	40020028 	.word	0x40020028
 8004da8:	40020040 	.word	0x40020040
 8004dac:	40020058 	.word	0x40020058
 8004db0:	40020070 	.word	0x40020070
 8004db4:	40020088 	.word	0x40020088
 8004db8:	400200a0 	.word	0x400200a0
 8004dbc:	400200b8 	.word	0x400200b8
 8004dc0:	40020410 	.word	0x40020410
 8004dc4:	40020428 	.word	0x40020428
 8004dc8:	40020440 	.word	0x40020440
 8004dcc:	40020458 	.word	0x40020458
 8004dd0:	40020470 	.word	0x40020470
 8004dd4:	40020488 	.word	0x40020488
 8004dd8:	400204a0 	.word	0x400204a0
 8004ddc:	400204b8 	.word	0x400204b8
 8004de0:	2300      	movs	r3, #0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d032      	beq.n	8004e4c <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f001 fd1a 	bl	8006820 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b80      	cmp	r3, #128	; 0x80
 8004df2:	d102      	bne.n	8004dfa <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e0e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d010      	beq.n	8004e3a <HAL_DMA_Init+0x6f6>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d80c      	bhi.n	8004e3a <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f001 fd97 	bl	8006954 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e36:	605a      	str	r2, [r3, #4]
 8004e38:	e008      	b.n	8004e4c <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e226      	b.n	80052ce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <HAL_DMA_Start_IT+0x2a>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e21f      	b.n	80052ce <HAL_DMA_Start_IT+0x46a>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	f040 820a 	bne.w	80052b8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a68      	ldr	r2, [pc, #416]	; (8005058 <HAL_DMA_Start_IT+0x1f4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d04a      	beq.n	8004f52 <HAL_DMA_Start_IT+0xee>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a66      	ldr	r2, [pc, #408]	; (800505c <HAL_DMA_Start_IT+0x1f8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d045      	beq.n	8004f52 <HAL_DMA_Start_IT+0xee>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a65      	ldr	r2, [pc, #404]	; (8005060 <HAL_DMA_Start_IT+0x1fc>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d040      	beq.n	8004f52 <HAL_DMA_Start_IT+0xee>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a63      	ldr	r2, [pc, #396]	; (8005064 <HAL_DMA_Start_IT+0x200>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d03b      	beq.n	8004f52 <HAL_DMA_Start_IT+0xee>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a62      	ldr	r2, [pc, #392]	; (8005068 <HAL_DMA_Start_IT+0x204>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d036      	beq.n	8004f52 <HAL_DMA_Start_IT+0xee>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a60      	ldr	r2, [pc, #384]	; (800506c <HAL_DMA_Start_IT+0x208>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d031      	beq.n	8004f52 <HAL_DMA_Start_IT+0xee>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a5f      	ldr	r2, [pc, #380]	; (8005070 <HAL_DMA_Start_IT+0x20c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d02c      	beq.n	8004f52 <HAL_DMA_Start_IT+0xee>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a5d      	ldr	r2, [pc, #372]	; (8005074 <HAL_DMA_Start_IT+0x210>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d027      	beq.n	8004f52 <HAL_DMA_Start_IT+0xee>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a5c      	ldr	r2, [pc, #368]	; (8005078 <HAL_DMA_Start_IT+0x214>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d022      	beq.n	8004f52 <HAL_DMA_Start_IT+0xee>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a5a      	ldr	r2, [pc, #360]	; (800507c <HAL_DMA_Start_IT+0x218>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d01d      	beq.n	8004f52 <HAL_DMA_Start_IT+0xee>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a59      	ldr	r2, [pc, #356]	; (8005080 <HAL_DMA_Start_IT+0x21c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d018      	beq.n	8004f52 <HAL_DMA_Start_IT+0xee>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a57      	ldr	r2, [pc, #348]	; (8005084 <HAL_DMA_Start_IT+0x220>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d013      	beq.n	8004f52 <HAL_DMA_Start_IT+0xee>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a56      	ldr	r2, [pc, #344]	; (8005088 <HAL_DMA_Start_IT+0x224>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00e      	beq.n	8004f52 <HAL_DMA_Start_IT+0xee>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a54      	ldr	r2, [pc, #336]	; (800508c <HAL_DMA_Start_IT+0x228>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d009      	beq.n	8004f52 <HAL_DMA_Start_IT+0xee>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a53      	ldr	r2, [pc, #332]	; (8005090 <HAL_DMA_Start_IT+0x22c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d004      	beq.n	8004f52 <HAL_DMA_Start_IT+0xee>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a51      	ldr	r2, [pc, #324]	; (8005094 <HAL_DMA_Start_IT+0x230>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d108      	bne.n	8004f64 <HAL_DMA_Start_IT+0x100>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	e007      	b.n	8004f74 <HAL_DMA_Start_IT+0x110>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0201 	bic.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f001 f93e 	bl	80061fc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a34      	ldr	r2, [pc, #208]	; (8005058 <HAL_DMA_Start_IT+0x1f4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d04a      	beq.n	8005020 <HAL_DMA_Start_IT+0x1bc>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a33      	ldr	r2, [pc, #204]	; (800505c <HAL_DMA_Start_IT+0x1f8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d045      	beq.n	8005020 <HAL_DMA_Start_IT+0x1bc>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a31      	ldr	r2, [pc, #196]	; (8005060 <HAL_DMA_Start_IT+0x1fc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d040      	beq.n	8005020 <HAL_DMA_Start_IT+0x1bc>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a30      	ldr	r2, [pc, #192]	; (8005064 <HAL_DMA_Start_IT+0x200>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d03b      	beq.n	8005020 <HAL_DMA_Start_IT+0x1bc>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a2e      	ldr	r2, [pc, #184]	; (8005068 <HAL_DMA_Start_IT+0x204>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d036      	beq.n	8005020 <HAL_DMA_Start_IT+0x1bc>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a2d      	ldr	r2, [pc, #180]	; (800506c <HAL_DMA_Start_IT+0x208>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d031      	beq.n	8005020 <HAL_DMA_Start_IT+0x1bc>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a2b      	ldr	r2, [pc, #172]	; (8005070 <HAL_DMA_Start_IT+0x20c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d02c      	beq.n	8005020 <HAL_DMA_Start_IT+0x1bc>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2a      	ldr	r2, [pc, #168]	; (8005074 <HAL_DMA_Start_IT+0x210>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d027      	beq.n	8005020 <HAL_DMA_Start_IT+0x1bc>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a28      	ldr	r2, [pc, #160]	; (8005078 <HAL_DMA_Start_IT+0x214>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d022      	beq.n	8005020 <HAL_DMA_Start_IT+0x1bc>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a27      	ldr	r2, [pc, #156]	; (800507c <HAL_DMA_Start_IT+0x218>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d01d      	beq.n	8005020 <HAL_DMA_Start_IT+0x1bc>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a25      	ldr	r2, [pc, #148]	; (8005080 <HAL_DMA_Start_IT+0x21c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d018      	beq.n	8005020 <HAL_DMA_Start_IT+0x1bc>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a24      	ldr	r2, [pc, #144]	; (8005084 <HAL_DMA_Start_IT+0x220>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d013      	beq.n	8005020 <HAL_DMA_Start_IT+0x1bc>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a22      	ldr	r2, [pc, #136]	; (8005088 <HAL_DMA_Start_IT+0x224>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00e      	beq.n	8005020 <HAL_DMA_Start_IT+0x1bc>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a21      	ldr	r2, [pc, #132]	; (800508c <HAL_DMA_Start_IT+0x228>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d009      	beq.n	8005020 <HAL_DMA_Start_IT+0x1bc>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <HAL_DMA_Start_IT+0x22c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d004      	beq.n	8005020 <HAL_DMA_Start_IT+0x1bc>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1e      	ldr	r2, [pc, #120]	; (8005094 <HAL_DMA_Start_IT+0x230>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d101      	bne.n	8005024 <HAL_DMA_Start_IT+0x1c0>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <HAL_DMA_Start_IT+0x1c2>
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d036      	beq.n	8005098 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f023 021e 	bic.w	r2, r3, #30
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0216 	orr.w	r2, r2, #22
 800503c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d03e      	beq.n	80050c4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0208 	orr.w	r2, r2, #8
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	e035      	b.n	80050c4 <HAL_DMA_Start_IT+0x260>
 8005058:	40020010 	.word	0x40020010
 800505c:	40020028 	.word	0x40020028
 8005060:	40020040 	.word	0x40020040
 8005064:	40020058 	.word	0x40020058
 8005068:	40020070 	.word	0x40020070
 800506c:	40020088 	.word	0x40020088
 8005070:	400200a0 	.word	0x400200a0
 8005074:	400200b8 	.word	0x400200b8
 8005078:	40020410 	.word	0x40020410
 800507c:	40020428 	.word	0x40020428
 8005080:	40020440 	.word	0x40020440
 8005084:	40020458 	.word	0x40020458
 8005088:	40020470 	.word	0x40020470
 800508c:	40020488 	.word	0x40020488
 8005090:	400204a0 	.word	0x400204a0
 8005094:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f023 020e 	bic.w	r2, r3, #14
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 020a 	orr.w	r2, r2, #10
 80050aa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d007      	beq.n	80050c4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0204 	orr.w	r2, r2, #4
 80050c2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a83      	ldr	r2, [pc, #524]	; (80052d8 <HAL_DMA_Start_IT+0x474>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d072      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a82      	ldr	r2, [pc, #520]	; (80052dc <HAL_DMA_Start_IT+0x478>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d06d      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a80      	ldr	r2, [pc, #512]	; (80052e0 <HAL_DMA_Start_IT+0x47c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d068      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a7f      	ldr	r2, [pc, #508]	; (80052e4 <HAL_DMA_Start_IT+0x480>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d063      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a7d      	ldr	r2, [pc, #500]	; (80052e8 <HAL_DMA_Start_IT+0x484>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d05e      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a7c      	ldr	r2, [pc, #496]	; (80052ec <HAL_DMA_Start_IT+0x488>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d059      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a7a      	ldr	r2, [pc, #488]	; (80052f0 <HAL_DMA_Start_IT+0x48c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d054      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a79      	ldr	r2, [pc, #484]	; (80052f4 <HAL_DMA_Start_IT+0x490>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d04f      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a77      	ldr	r2, [pc, #476]	; (80052f8 <HAL_DMA_Start_IT+0x494>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d04a      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a76      	ldr	r2, [pc, #472]	; (80052fc <HAL_DMA_Start_IT+0x498>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d045      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a74      	ldr	r2, [pc, #464]	; (8005300 <HAL_DMA_Start_IT+0x49c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d040      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a73      	ldr	r2, [pc, #460]	; (8005304 <HAL_DMA_Start_IT+0x4a0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d03b      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a71      	ldr	r2, [pc, #452]	; (8005308 <HAL_DMA_Start_IT+0x4a4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d036      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a70      	ldr	r2, [pc, #448]	; (800530c <HAL_DMA_Start_IT+0x4a8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d031      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a6e      	ldr	r2, [pc, #440]	; (8005310 <HAL_DMA_Start_IT+0x4ac>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d02c      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a6d      	ldr	r2, [pc, #436]	; (8005314 <HAL_DMA_Start_IT+0x4b0>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d027      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a6b      	ldr	r2, [pc, #428]	; (8005318 <HAL_DMA_Start_IT+0x4b4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d022      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a6a      	ldr	r2, [pc, #424]	; (800531c <HAL_DMA_Start_IT+0x4b8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d01d      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a68      	ldr	r2, [pc, #416]	; (8005320 <HAL_DMA_Start_IT+0x4bc>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d018      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a67      	ldr	r2, [pc, #412]	; (8005324 <HAL_DMA_Start_IT+0x4c0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d013      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a65      	ldr	r2, [pc, #404]	; (8005328 <HAL_DMA_Start_IT+0x4c4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00e      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a64      	ldr	r2, [pc, #400]	; (800532c <HAL_DMA_Start_IT+0x4c8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d009      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a62      	ldr	r2, [pc, #392]	; (8005330 <HAL_DMA_Start_IT+0x4cc>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <HAL_DMA_Start_IT+0x350>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a61      	ldr	r2, [pc, #388]	; (8005334 <HAL_DMA_Start_IT+0x4d0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d101      	bne.n	80051b8 <HAL_DMA_Start_IT+0x354>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <HAL_DMA_Start_IT+0x356>
 80051b8:	2300      	movs	r3, #0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01a      	beq.n	80051f4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d007      	beq.n	80051dc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051da:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d007      	beq.n	80051f4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a37      	ldr	r2, [pc, #220]	; (80052d8 <HAL_DMA_Start_IT+0x474>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d04a      	beq.n	8005294 <HAL_DMA_Start_IT+0x430>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a36      	ldr	r2, [pc, #216]	; (80052dc <HAL_DMA_Start_IT+0x478>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d045      	beq.n	8005294 <HAL_DMA_Start_IT+0x430>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a34      	ldr	r2, [pc, #208]	; (80052e0 <HAL_DMA_Start_IT+0x47c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d040      	beq.n	8005294 <HAL_DMA_Start_IT+0x430>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a33      	ldr	r2, [pc, #204]	; (80052e4 <HAL_DMA_Start_IT+0x480>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d03b      	beq.n	8005294 <HAL_DMA_Start_IT+0x430>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a31      	ldr	r2, [pc, #196]	; (80052e8 <HAL_DMA_Start_IT+0x484>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d036      	beq.n	8005294 <HAL_DMA_Start_IT+0x430>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a30      	ldr	r2, [pc, #192]	; (80052ec <HAL_DMA_Start_IT+0x488>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d031      	beq.n	8005294 <HAL_DMA_Start_IT+0x430>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a2e      	ldr	r2, [pc, #184]	; (80052f0 <HAL_DMA_Start_IT+0x48c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d02c      	beq.n	8005294 <HAL_DMA_Start_IT+0x430>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a2d      	ldr	r2, [pc, #180]	; (80052f4 <HAL_DMA_Start_IT+0x490>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d027      	beq.n	8005294 <HAL_DMA_Start_IT+0x430>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a2b      	ldr	r2, [pc, #172]	; (80052f8 <HAL_DMA_Start_IT+0x494>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d022      	beq.n	8005294 <HAL_DMA_Start_IT+0x430>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a2a      	ldr	r2, [pc, #168]	; (80052fc <HAL_DMA_Start_IT+0x498>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d01d      	beq.n	8005294 <HAL_DMA_Start_IT+0x430>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a28      	ldr	r2, [pc, #160]	; (8005300 <HAL_DMA_Start_IT+0x49c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d018      	beq.n	8005294 <HAL_DMA_Start_IT+0x430>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a27      	ldr	r2, [pc, #156]	; (8005304 <HAL_DMA_Start_IT+0x4a0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d013      	beq.n	8005294 <HAL_DMA_Start_IT+0x430>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a25      	ldr	r2, [pc, #148]	; (8005308 <HAL_DMA_Start_IT+0x4a4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00e      	beq.n	8005294 <HAL_DMA_Start_IT+0x430>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a24      	ldr	r2, [pc, #144]	; (800530c <HAL_DMA_Start_IT+0x4a8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d009      	beq.n	8005294 <HAL_DMA_Start_IT+0x430>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a22      	ldr	r2, [pc, #136]	; (8005310 <HAL_DMA_Start_IT+0x4ac>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d004      	beq.n	8005294 <HAL_DMA_Start_IT+0x430>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a21      	ldr	r2, [pc, #132]	; (8005314 <HAL_DMA_Start_IT+0x4b0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d108      	bne.n	80052a6 <HAL_DMA_Start_IT+0x442>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e012      	b.n	80052cc <HAL_DMA_Start_IT+0x468>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0201 	orr.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	e009      	b.n	80052cc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40020010 	.word	0x40020010
 80052dc:	40020028 	.word	0x40020028
 80052e0:	40020040 	.word	0x40020040
 80052e4:	40020058 	.word	0x40020058
 80052e8:	40020070 	.word	0x40020070
 80052ec:	40020088 	.word	0x40020088
 80052f0:	400200a0 	.word	0x400200a0
 80052f4:	400200b8 	.word	0x400200b8
 80052f8:	40020410 	.word	0x40020410
 80052fc:	40020428 	.word	0x40020428
 8005300:	40020440 	.word	0x40020440
 8005304:	40020458 	.word	0x40020458
 8005308:	40020470 	.word	0x40020470
 800530c:	40020488 	.word	0x40020488
 8005310:	400204a0 	.word	0x400204a0
 8005314:	400204b8 	.word	0x400204b8
 8005318:	58025408 	.word	0x58025408
 800531c:	5802541c 	.word	0x5802541c
 8005320:	58025430 	.word	0x58025430
 8005324:	58025444 	.word	0x58025444
 8005328:	58025458 	.word	0x58025458
 800532c:	5802546c 	.word	0x5802546c
 8005330:	58025480 	.word	0x58025480
 8005334:	58025494 	.word	0x58025494

08005338 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08a      	sub	sp, #40	; 0x28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005344:	4b67      	ldr	r3, [pc, #412]	; (80054e4 <HAL_DMA_IRQHandler+0x1ac>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a67      	ldr	r2, [pc, #412]	; (80054e8 <HAL_DMA_IRQHandler+0x1b0>)
 800534a:	fba2 2303 	umull	r2, r3, r2, r3
 800534e:	0a9b      	lsrs	r3, r3, #10
 8005350:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005356:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a5f      	ldr	r2, [pc, #380]	; (80054ec <HAL_DMA_IRQHandler+0x1b4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d04a      	beq.n	800540a <HAL_DMA_IRQHandler+0xd2>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a5d      	ldr	r2, [pc, #372]	; (80054f0 <HAL_DMA_IRQHandler+0x1b8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d045      	beq.n	800540a <HAL_DMA_IRQHandler+0xd2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a5c      	ldr	r2, [pc, #368]	; (80054f4 <HAL_DMA_IRQHandler+0x1bc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d040      	beq.n	800540a <HAL_DMA_IRQHandler+0xd2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a5a      	ldr	r2, [pc, #360]	; (80054f8 <HAL_DMA_IRQHandler+0x1c0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d03b      	beq.n	800540a <HAL_DMA_IRQHandler+0xd2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a59      	ldr	r2, [pc, #356]	; (80054fc <HAL_DMA_IRQHandler+0x1c4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d036      	beq.n	800540a <HAL_DMA_IRQHandler+0xd2>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a57      	ldr	r2, [pc, #348]	; (8005500 <HAL_DMA_IRQHandler+0x1c8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d031      	beq.n	800540a <HAL_DMA_IRQHandler+0xd2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a56      	ldr	r2, [pc, #344]	; (8005504 <HAL_DMA_IRQHandler+0x1cc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d02c      	beq.n	800540a <HAL_DMA_IRQHandler+0xd2>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a54      	ldr	r2, [pc, #336]	; (8005508 <HAL_DMA_IRQHandler+0x1d0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d027      	beq.n	800540a <HAL_DMA_IRQHandler+0xd2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a53      	ldr	r2, [pc, #332]	; (800550c <HAL_DMA_IRQHandler+0x1d4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d022      	beq.n	800540a <HAL_DMA_IRQHandler+0xd2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a51      	ldr	r2, [pc, #324]	; (8005510 <HAL_DMA_IRQHandler+0x1d8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01d      	beq.n	800540a <HAL_DMA_IRQHandler+0xd2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a50      	ldr	r2, [pc, #320]	; (8005514 <HAL_DMA_IRQHandler+0x1dc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d018      	beq.n	800540a <HAL_DMA_IRQHandler+0xd2>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a4e      	ldr	r2, [pc, #312]	; (8005518 <HAL_DMA_IRQHandler+0x1e0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d013      	beq.n	800540a <HAL_DMA_IRQHandler+0xd2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a4d      	ldr	r2, [pc, #308]	; (800551c <HAL_DMA_IRQHandler+0x1e4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00e      	beq.n	800540a <HAL_DMA_IRQHandler+0xd2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a4b      	ldr	r2, [pc, #300]	; (8005520 <HAL_DMA_IRQHandler+0x1e8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d009      	beq.n	800540a <HAL_DMA_IRQHandler+0xd2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a4a      	ldr	r2, [pc, #296]	; (8005524 <HAL_DMA_IRQHandler+0x1ec>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d004      	beq.n	800540a <HAL_DMA_IRQHandler+0xd2>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a48      	ldr	r2, [pc, #288]	; (8005528 <HAL_DMA_IRQHandler+0x1f0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d101      	bne.n	800540e <HAL_DMA_IRQHandler+0xd6>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <HAL_DMA_IRQHandler+0xd8>
 800540e:	2300      	movs	r3, #0
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 842b 	beq.w	8005c6c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	2208      	movs	r2, #8
 8005420:	409a      	lsls	r2, r3
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	4013      	ands	r3, r2
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 80a2 	beq.w	8005570 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a2e      	ldr	r2, [pc, #184]	; (80054ec <HAL_DMA_IRQHandler+0x1b4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d04a      	beq.n	80054cc <HAL_DMA_IRQHandler+0x194>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a2d      	ldr	r2, [pc, #180]	; (80054f0 <HAL_DMA_IRQHandler+0x1b8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d045      	beq.n	80054cc <HAL_DMA_IRQHandler+0x194>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a2b      	ldr	r2, [pc, #172]	; (80054f4 <HAL_DMA_IRQHandler+0x1bc>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d040      	beq.n	80054cc <HAL_DMA_IRQHandler+0x194>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a2a      	ldr	r2, [pc, #168]	; (80054f8 <HAL_DMA_IRQHandler+0x1c0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d03b      	beq.n	80054cc <HAL_DMA_IRQHandler+0x194>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a28      	ldr	r2, [pc, #160]	; (80054fc <HAL_DMA_IRQHandler+0x1c4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d036      	beq.n	80054cc <HAL_DMA_IRQHandler+0x194>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a27      	ldr	r2, [pc, #156]	; (8005500 <HAL_DMA_IRQHandler+0x1c8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d031      	beq.n	80054cc <HAL_DMA_IRQHandler+0x194>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a25      	ldr	r2, [pc, #148]	; (8005504 <HAL_DMA_IRQHandler+0x1cc>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d02c      	beq.n	80054cc <HAL_DMA_IRQHandler+0x194>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a24      	ldr	r2, [pc, #144]	; (8005508 <HAL_DMA_IRQHandler+0x1d0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d027      	beq.n	80054cc <HAL_DMA_IRQHandler+0x194>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a22      	ldr	r2, [pc, #136]	; (800550c <HAL_DMA_IRQHandler+0x1d4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d022      	beq.n	80054cc <HAL_DMA_IRQHandler+0x194>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a21      	ldr	r2, [pc, #132]	; (8005510 <HAL_DMA_IRQHandler+0x1d8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d01d      	beq.n	80054cc <HAL_DMA_IRQHandler+0x194>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a1f      	ldr	r2, [pc, #124]	; (8005514 <HAL_DMA_IRQHandler+0x1dc>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d018      	beq.n	80054cc <HAL_DMA_IRQHandler+0x194>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <HAL_DMA_IRQHandler+0x1e0>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d013      	beq.n	80054cc <HAL_DMA_IRQHandler+0x194>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a1c      	ldr	r2, [pc, #112]	; (800551c <HAL_DMA_IRQHandler+0x1e4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00e      	beq.n	80054cc <HAL_DMA_IRQHandler+0x194>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1b      	ldr	r2, [pc, #108]	; (8005520 <HAL_DMA_IRQHandler+0x1e8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d009      	beq.n	80054cc <HAL_DMA_IRQHandler+0x194>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a19      	ldr	r2, [pc, #100]	; (8005524 <HAL_DMA_IRQHandler+0x1ec>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d004      	beq.n	80054cc <HAL_DMA_IRQHandler+0x194>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a18      	ldr	r2, [pc, #96]	; (8005528 <HAL_DMA_IRQHandler+0x1f0>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d12f      	bne.n	800552c <HAL_DMA_IRQHandler+0x1f4>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	bf14      	ite	ne
 80054da:	2301      	movne	r3, #1
 80054dc:	2300      	moveq	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	e02e      	b.n	8005540 <HAL_DMA_IRQHandler+0x208>
 80054e2:	bf00      	nop
 80054e4:	24000004 	.word	0x24000004
 80054e8:	1b4e81b5 	.word	0x1b4e81b5
 80054ec:	40020010 	.word	0x40020010
 80054f0:	40020028 	.word	0x40020028
 80054f4:	40020040 	.word	0x40020040
 80054f8:	40020058 	.word	0x40020058
 80054fc:	40020070 	.word	0x40020070
 8005500:	40020088 	.word	0x40020088
 8005504:	400200a0 	.word	0x400200a0
 8005508:	400200b8 	.word	0x400200b8
 800550c:	40020410 	.word	0x40020410
 8005510:	40020428 	.word	0x40020428
 8005514:	40020440 	.word	0x40020440
 8005518:	40020458 	.word	0x40020458
 800551c:	40020470 	.word	0x40020470
 8005520:	40020488 	.word	0x40020488
 8005524:	400204a0 	.word	0x400204a0
 8005528:	400204b8 	.word	0x400204b8
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	bf14      	ite	ne
 800553a:	2301      	movne	r3, #1
 800553c:	2300      	moveq	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d015      	beq.n	8005570 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0204 	bic.w	r2, r2, #4
 8005552:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005558:	f003 031f 	and.w	r3, r3, #31
 800555c:	2208      	movs	r2, #8
 800555e:	409a      	lsls	r2, r3
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005568:	f043 0201 	orr.w	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005574:	f003 031f 	and.w	r3, r3, #31
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	fa22 f303 	lsr.w	r3, r2, r3
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d06e      	beq.n	8005664 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a69      	ldr	r2, [pc, #420]	; (8005730 <HAL_DMA_IRQHandler+0x3f8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d04a      	beq.n	8005626 <HAL_DMA_IRQHandler+0x2ee>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a67      	ldr	r2, [pc, #412]	; (8005734 <HAL_DMA_IRQHandler+0x3fc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d045      	beq.n	8005626 <HAL_DMA_IRQHandler+0x2ee>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a66      	ldr	r2, [pc, #408]	; (8005738 <HAL_DMA_IRQHandler+0x400>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d040      	beq.n	8005626 <HAL_DMA_IRQHandler+0x2ee>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a64      	ldr	r2, [pc, #400]	; (800573c <HAL_DMA_IRQHandler+0x404>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d03b      	beq.n	8005626 <HAL_DMA_IRQHandler+0x2ee>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a63      	ldr	r2, [pc, #396]	; (8005740 <HAL_DMA_IRQHandler+0x408>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d036      	beq.n	8005626 <HAL_DMA_IRQHandler+0x2ee>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a61      	ldr	r2, [pc, #388]	; (8005744 <HAL_DMA_IRQHandler+0x40c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d031      	beq.n	8005626 <HAL_DMA_IRQHandler+0x2ee>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a60      	ldr	r2, [pc, #384]	; (8005748 <HAL_DMA_IRQHandler+0x410>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d02c      	beq.n	8005626 <HAL_DMA_IRQHandler+0x2ee>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a5e      	ldr	r2, [pc, #376]	; (800574c <HAL_DMA_IRQHandler+0x414>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d027      	beq.n	8005626 <HAL_DMA_IRQHandler+0x2ee>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a5d      	ldr	r2, [pc, #372]	; (8005750 <HAL_DMA_IRQHandler+0x418>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d022      	beq.n	8005626 <HAL_DMA_IRQHandler+0x2ee>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a5b      	ldr	r2, [pc, #364]	; (8005754 <HAL_DMA_IRQHandler+0x41c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d01d      	beq.n	8005626 <HAL_DMA_IRQHandler+0x2ee>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a5a      	ldr	r2, [pc, #360]	; (8005758 <HAL_DMA_IRQHandler+0x420>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d018      	beq.n	8005626 <HAL_DMA_IRQHandler+0x2ee>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a58      	ldr	r2, [pc, #352]	; (800575c <HAL_DMA_IRQHandler+0x424>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <HAL_DMA_IRQHandler+0x2ee>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a57      	ldr	r2, [pc, #348]	; (8005760 <HAL_DMA_IRQHandler+0x428>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00e      	beq.n	8005626 <HAL_DMA_IRQHandler+0x2ee>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a55      	ldr	r2, [pc, #340]	; (8005764 <HAL_DMA_IRQHandler+0x42c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d009      	beq.n	8005626 <HAL_DMA_IRQHandler+0x2ee>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a54      	ldr	r2, [pc, #336]	; (8005768 <HAL_DMA_IRQHandler+0x430>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d004      	beq.n	8005626 <HAL_DMA_IRQHandler+0x2ee>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a52      	ldr	r2, [pc, #328]	; (800576c <HAL_DMA_IRQHandler+0x434>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d10a      	bne.n	800563c <HAL_DMA_IRQHandler+0x304>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005630:	2b00      	cmp	r3, #0
 8005632:	bf14      	ite	ne
 8005634:	2301      	movne	r3, #1
 8005636:	2300      	moveq	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	e003      	b.n	8005644 <HAL_DMA_IRQHandler+0x30c>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2300      	movs	r3, #0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00d      	beq.n	8005664 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	2201      	movs	r2, #1
 8005652:	409a      	lsls	r2, r3
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565c:	f043 0202 	orr.w	r2, r3, #2
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005668:	f003 031f 	and.w	r3, r3, #31
 800566c:	2204      	movs	r2, #4
 800566e:	409a      	lsls	r2, r3
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	4013      	ands	r3, r2
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 808f 	beq.w	8005798 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a2c      	ldr	r2, [pc, #176]	; (8005730 <HAL_DMA_IRQHandler+0x3f8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d04a      	beq.n	800571a <HAL_DMA_IRQHandler+0x3e2>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a2a      	ldr	r2, [pc, #168]	; (8005734 <HAL_DMA_IRQHandler+0x3fc>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d045      	beq.n	800571a <HAL_DMA_IRQHandler+0x3e2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a29      	ldr	r2, [pc, #164]	; (8005738 <HAL_DMA_IRQHandler+0x400>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d040      	beq.n	800571a <HAL_DMA_IRQHandler+0x3e2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a27      	ldr	r2, [pc, #156]	; (800573c <HAL_DMA_IRQHandler+0x404>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d03b      	beq.n	800571a <HAL_DMA_IRQHandler+0x3e2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a26      	ldr	r2, [pc, #152]	; (8005740 <HAL_DMA_IRQHandler+0x408>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d036      	beq.n	800571a <HAL_DMA_IRQHandler+0x3e2>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a24      	ldr	r2, [pc, #144]	; (8005744 <HAL_DMA_IRQHandler+0x40c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d031      	beq.n	800571a <HAL_DMA_IRQHandler+0x3e2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a23      	ldr	r2, [pc, #140]	; (8005748 <HAL_DMA_IRQHandler+0x410>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d02c      	beq.n	800571a <HAL_DMA_IRQHandler+0x3e2>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a21      	ldr	r2, [pc, #132]	; (800574c <HAL_DMA_IRQHandler+0x414>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d027      	beq.n	800571a <HAL_DMA_IRQHandler+0x3e2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a20      	ldr	r2, [pc, #128]	; (8005750 <HAL_DMA_IRQHandler+0x418>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d022      	beq.n	800571a <HAL_DMA_IRQHandler+0x3e2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1e      	ldr	r2, [pc, #120]	; (8005754 <HAL_DMA_IRQHandler+0x41c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01d      	beq.n	800571a <HAL_DMA_IRQHandler+0x3e2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <HAL_DMA_IRQHandler+0x420>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d018      	beq.n	800571a <HAL_DMA_IRQHandler+0x3e2>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1b      	ldr	r2, [pc, #108]	; (800575c <HAL_DMA_IRQHandler+0x424>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d013      	beq.n	800571a <HAL_DMA_IRQHandler+0x3e2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a1a      	ldr	r2, [pc, #104]	; (8005760 <HAL_DMA_IRQHandler+0x428>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00e      	beq.n	800571a <HAL_DMA_IRQHandler+0x3e2>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a18      	ldr	r2, [pc, #96]	; (8005764 <HAL_DMA_IRQHandler+0x42c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d009      	beq.n	800571a <HAL_DMA_IRQHandler+0x3e2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a17      	ldr	r2, [pc, #92]	; (8005768 <HAL_DMA_IRQHandler+0x430>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <HAL_DMA_IRQHandler+0x3e2>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a15      	ldr	r2, [pc, #84]	; (800576c <HAL_DMA_IRQHandler+0x434>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d12a      	bne.n	8005770 <HAL_DMA_IRQHandler+0x438>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	bf14      	ite	ne
 8005728:	2301      	movne	r3, #1
 800572a:	2300      	moveq	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	e023      	b.n	8005778 <HAL_DMA_IRQHandler+0x440>
 8005730:	40020010 	.word	0x40020010
 8005734:	40020028 	.word	0x40020028
 8005738:	40020040 	.word	0x40020040
 800573c:	40020058 	.word	0x40020058
 8005740:	40020070 	.word	0x40020070
 8005744:	40020088 	.word	0x40020088
 8005748:	400200a0 	.word	0x400200a0
 800574c:	400200b8 	.word	0x400200b8
 8005750:	40020410 	.word	0x40020410
 8005754:	40020428 	.word	0x40020428
 8005758:	40020440 	.word	0x40020440
 800575c:	40020458 	.word	0x40020458
 8005760:	40020470 	.word	0x40020470
 8005764:	40020488 	.word	0x40020488
 8005768:	400204a0 	.word	0x400204a0
 800576c:	400204b8 	.word	0x400204b8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2300      	movs	r3, #0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00d      	beq.n	8005798 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005780:	f003 031f 	and.w	r3, r3, #31
 8005784:	2204      	movs	r2, #4
 8005786:	409a      	lsls	r2, r3
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005790:	f043 0204 	orr.w	r2, r3, #4
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	2210      	movs	r2, #16
 80057a2:	409a      	lsls	r2, r3
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	4013      	ands	r3, r2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 80a6 	beq.w	80058fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a85      	ldr	r2, [pc, #532]	; (80059c8 <HAL_DMA_IRQHandler+0x690>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d04a      	beq.n	800584e <HAL_DMA_IRQHandler+0x516>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a83      	ldr	r2, [pc, #524]	; (80059cc <HAL_DMA_IRQHandler+0x694>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d045      	beq.n	800584e <HAL_DMA_IRQHandler+0x516>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a82      	ldr	r2, [pc, #520]	; (80059d0 <HAL_DMA_IRQHandler+0x698>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d040      	beq.n	800584e <HAL_DMA_IRQHandler+0x516>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a80      	ldr	r2, [pc, #512]	; (80059d4 <HAL_DMA_IRQHandler+0x69c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d03b      	beq.n	800584e <HAL_DMA_IRQHandler+0x516>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a7f      	ldr	r2, [pc, #508]	; (80059d8 <HAL_DMA_IRQHandler+0x6a0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d036      	beq.n	800584e <HAL_DMA_IRQHandler+0x516>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a7d      	ldr	r2, [pc, #500]	; (80059dc <HAL_DMA_IRQHandler+0x6a4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d031      	beq.n	800584e <HAL_DMA_IRQHandler+0x516>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a7c      	ldr	r2, [pc, #496]	; (80059e0 <HAL_DMA_IRQHandler+0x6a8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d02c      	beq.n	800584e <HAL_DMA_IRQHandler+0x516>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a7a      	ldr	r2, [pc, #488]	; (80059e4 <HAL_DMA_IRQHandler+0x6ac>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d027      	beq.n	800584e <HAL_DMA_IRQHandler+0x516>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a79      	ldr	r2, [pc, #484]	; (80059e8 <HAL_DMA_IRQHandler+0x6b0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d022      	beq.n	800584e <HAL_DMA_IRQHandler+0x516>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a77      	ldr	r2, [pc, #476]	; (80059ec <HAL_DMA_IRQHandler+0x6b4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d01d      	beq.n	800584e <HAL_DMA_IRQHandler+0x516>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a76      	ldr	r2, [pc, #472]	; (80059f0 <HAL_DMA_IRQHandler+0x6b8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d018      	beq.n	800584e <HAL_DMA_IRQHandler+0x516>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a74      	ldr	r2, [pc, #464]	; (80059f4 <HAL_DMA_IRQHandler+0x6bc>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_DMA_IRQHandler+0x516>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a73      	ldr	r2, [pc, #460]	; (80059f8 <HAL_DMA_IRQHandler+0x6c0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00e      	beq.n	800584e <HAL_DMA_IRQHandler+0x516>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a71      	ldr	r2, [pc, #452]	; (80059fc <HAL_DMA_IRQHandler+0x6c4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d009      	beq.n	800584e <HAL_DMA_IRQHandler+0x516>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a70      	ldr	r2, [pc, #448]	; (8005a00 <HAL_DMA_IRQHandler+0x6c8>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d004      	beq.n	800584e <HAL_DMA_IRQHandler+0x516>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a6e      	ldr	r2, [pc, #440]	; (8005a04 <HAL_DMA_IRQHandler+0x6cc>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d10a      	bne.n	8005864 <HAL_DMA_IRQHandler+0x52c>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b00      	cmp	r3, #0
 800585a:	bf14      	ite	ne
 800585c:	2301      	movne	r3, #1
 800585e:	2300      	moveq	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	e009      	b.n	8005878 <HAL_DMA_IRQHandler+0x540>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	bf14      	ite	ne
 8005872:	2301      	movne	r3, #1
 8005874:	2300      	moveq	r3, #0
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d03e      	beq.n	80058fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005880:	f003 031f 	and.w	r3, r3, #31
 8005884:	2210      	movs	r2, #16
 8005886:	409a      	lsls	r2, r3
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d018      	beq.n	80058cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d108      	bne.n	80058ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d024      	beq.n	80058fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	4798      	blx	r3
 80058b8:	e01f      	b.n	80058fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d01b      	beq.n	80058fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	4798      	blx	r3
 80058ca:	e016      	b.n	80058fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d107      	bne.n	80058ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0208 	bic.w	r2, r2, #8
 80058e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	2220      	movs	r2, #32
 8005904:	409a      	lsls	r2, r3
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	4013      	ands	r3, r2
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 8110 	beq.w	8005b30 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2c      	ldr	r2, [pc, #176]	; (80059c8 <HAL_DMA_IRQHandler+0x690>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d04a      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x678>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2b      	ldr	r2, [pc, #172]	; (80059cc <HAL_DMA_IRQHandler+0x694>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d045      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x678>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a29      	ldr	r2, [pc, #164]	; (80059d0 <HAL_DMA_IRQHandler+0x698>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d040      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x678>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a28      	ldr	r2, [pc, #160]	; (80059d4 <HAL_DMA_IRQHandler+0x69c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d03b      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x678>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a26      	ldr	r2, [pc, #152]	; (80059d8 <HAL_DMA_IRQHandler+0x6a0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d036      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x678>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a25      	ldr	r2, [pc, #148]	; (80059dc <HAL_DMA_IRQHandler+0x6a4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d031      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x678>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a23      	ldr	r2, [pc, #140]	; (80059e0 <HAL_DMA_IRQHandler+0x6a8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d02c      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x678>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a22      	ldr	r2, [pc, #136]	; (80059e4 <HAL_DMA_IRQHandler+0x6ac>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d027      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x678>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a20      	ldr	r2, [pc, #128]	; (80059e8 <HAL_DMA_IRQHandler+0x6b0>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d022      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x678>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1f      	ldr	r2, [pc, #124]	; (80059ec <HAL_DMA_IRQHandler+0x6b4>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d01d      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x678>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1d      	ldr	r2, [pc, #116]	; (80059f0 <HAL_DMA_IRQHandler+0x6b8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d018      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x678>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1c      	ldr	r2, [pc, #112]	; (80059f4 <HAL_DMA_IRQHandler+0x6bc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x678>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1a      	ldr	r2, [pc, #104]	; (80059f8 <HAL_DMA_IRQHandler+0x6c0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x678>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a19      	ldr	r2, [pc, #100]	; (80059fc <HAL_DMA_IRQHandler+0x6c4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x678>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a17      	ldr	r2, [pc, #92]	; (8005a00 <HAL_DMA_IRQHandler+0x6c8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x678>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a16      	ldr	r2, [pc, #88]	; (8005a04 <HAL_DMA_IRQHandler+0x6cc>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d12b      	bne.n	8005a08 <HAL_DMA_IRQHandler+0x6d0>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	bf14      	ite	ne
 80059be:	2301      	movne	r3, #1
 80059c0:	2300      	moveq	r3, #0
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	e02a      	b.n	8005a1c <HAL_DMA_IRQHandler+0x6e4>
 80059c6:	bf00      	nop
 80059c8:	40020010 	.word	0x40020010
 80059cc:	40020028 	.word	0x40020028
 80059d0:	40020040 	.word	0x40020040
 80059d4:	40020058 	.word	0x40020058
 80059d8:	40020070 	.word	0x40020070
 80059dc:	40020088 	.word	0x40020088
 80059e0:	400200a0 	.word	0x400200a0
 80059e4:	400200b8 	.word	0x400200b8
 80059e8:	40020410 	.word	0x40020410
 80059ec:	40020428 	.word	0x40020428
 80059f0:	40020440 	.word	0x40020440
 80059f4:	40020458 	.word	0x40020458
 80059f8:	40020470 	.word	0x40020470
 80059fc:	40020488 	.word	0x40020488
 8005a00:	400204a0 	.word	0x400204a0
 8005a04:	400204b8 	.word	0x400204b8
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	bf14      	ite	ne
 8005a16:	2301      	movne	r3, #1
 8005a18:	2300      	moveq	r3, #0
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8087 	beq.w	8005b30 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a26:	f003 031f 	and.w	r3, r3, #31
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	409a      	lsls	r2, r3
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d139      	bne.n	8005ab2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0216 	bic.w	r2, r2, #22
 8005a4c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695a      	ldr	r2, [r3, #20]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a5c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <HAL_DMA_IRQHandler+0x736>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d007      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0208 	bic.w	r2, r2, #8
 8005a7c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	223f      	movs	r2, #63	; 0x3f
 8005a88:	409a      	lsls	r2, r3
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 8382 	beq.w	80061ac <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	4798      	blx	r3
          }
          return;
 8005ab0:	e37c      	b.n	80061ac <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d018      	beq.n	8005af2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d108      	bne.n	8005ae0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d02c      	beq.n	8005b30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	4798      	blx	r3
 8005ade:	e027      	b.n	8005b30 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d023      	beq.n	8005b30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	4798      	blx	r3
 8005af0:	e01e      	b.n	8005b30 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10f      	bne.n	8005b20 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0210 	bic.w	r2, r2, #16
 8005b0e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 833e 	beq.w	80061b6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 8088 	beq.w	8005c58 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2204      	movs	r2, #4
 8005b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a89      	ldr	r2, [pc, #548]	; (8005d7c <HAL_DMA_IRQHandler+0xa44>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d04a      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x8b8>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a88      	ldr	r2, [pc, #544]	; (8005d80 <HAL_DMA_IRQHandler+0xa48>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d045      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x8b8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a86      	ldr	r2, [pc, #536]	; (8005d84 <HAL_DMA_IRQHandler+0xa4c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d040      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x8b8>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a85      	ldr	r2, [pc, #532]	; (8005d88 <HAL_DMA_IRQHandler+0xa50>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d03b      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x8b8>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a83      	ldr	r2, [pc, #524]	; (8005d8c <HAL_DMA_IRQHandler+0xa54>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d036      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x8b8>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a82      	ldr	r2, [pc, #520]	; (8005d90 <HAL_DMA_IRQHandler+0xa58>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d031      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x8b8>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a80      	ldr	r2, [pc, #512]	; (8005d94 <HAL_DMA_IRQHandler+0xa5c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d02c      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x8b8>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a7f      	ldr	r2, [pc, #508]	; (8005d98 <HAL_DMA_IRQHandler+0xa60>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d027      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x8b8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a7d      	ldr	r2, [pc, #500]	; (8005d9c <HAL_DMA_IRQHandler+0xa64>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d022      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x8b8>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a7c      	ldr	r2, [pc, #496]	; (8005da0 <HAL_DMA_IRQHandler+0xa68>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d01d      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x8b8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a7a      	ldr	r2, [pc, #488]	; (8005da4 <HAL_DMA_IRQHandler+0xa6c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d018      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x8b8>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a79      	ldr	r2, [pc, #484]	; (8005da8 <HAL_DMA_IRQHandler+0xa70>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d013      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x8b8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a77      	ldr	r2, [pc, #476]	; (8005dac <HAL_DMA_IRQHandler+0xa74>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d00e      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x8b8>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a76      	ldr	r2, [pc, #472]	; (8005db0 <HAL_DMA_IRQHandler+0xa78>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d009      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x8b8>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a74      	ldr	r2, [pc, #464]	; (8005db4 <HAL_DMA_IRQHandler+0xa7c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d004      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x8b8>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a73      	ldr	r2, [pc, #460]	; (8005db8 <HAL_DMA_IRQHandler+0xa80>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d108      	bne.n	8005c02 <HAL_DMA_IRQHandler+0x8ca>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0201 	bic.w	r2, r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	e007      	b.n	8005c12 <HAL_DMA_IRQHandler+0x8da>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0201 	bic.w	r2, r2, #1
 8005c10:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3301      	adds	r3, #1
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d307      	bcc.n	8005c2e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f2      	bne.n	8005c12 <HAL_DMA_IRQHandler+0x8da>
 8005c2c:	e000      	b.n	8005c30 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005c2e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2203      	movs	r2, #3
 8005c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005c46:	e003      	b.n	8005c50 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 82aa 	beq.w	80061b6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	4798      	blx	r3
 8005c6a:	e2a4      	b.n	80061b6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a52      	ldr	r2, [pc, #328]	; (8005dbc <HAL_DMA_IRQHandler+0xa84>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d04a      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x9d4>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a51      	ldr	r2, [pc, #324]	; (8005dc0 <HAL_DMA_IRQHandler+0xa88>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d045      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x9d4>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a4f      	ldr	r2, [pc, #316]	; (8005dc4 <HAL_DMA_IRQHandler+0xa8c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d040      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x9d4>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a4e      	ldr	r2, [pc, #312]	; (8005dc8 <HAL_DMA_IRQHandler+0xa90>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d03b      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x9d4>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a4c      	ldr	r2, [pc, #304]	; (8005dcc <HAL_DMA_IRQHandler+0xa94>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d036      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x9d4>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a4b      	ldr	r2, [pc, #300]	; (8005dd0 <HAL_DMA_IRQHandler+0xa98>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d031      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x9d4>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a49      	ldr	r2, [pc, #292]	; (8005dd4 <HAL_DMA_IRQHandler+0xa9c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d02c      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x9d4>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a48      	ldr	r2, [pc, #288]	; (8005dd8 <HAL_DMA_IRQHandler+0xaa0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d027      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x9d4>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a46      	ldr	r2, [pc, #280]	; (8005ddc <HAL_DMA_IRQHandler+0xaa4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d022      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x9d4>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a45      	ldr	r2, [pc, #276]	; (8005de0 <HAL_DMA_IRQHandler+0xaa8>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d01d      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x9d4>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a43      	ldr	r2, [pc, #268]	; (8005de4 <HAL_DMA_IRQHandler+0xaac>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d018      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x9d4>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a42      	ldr	r2, [pc, #264]	; (8005de8 <HAL_DMA_IRQHandler+0xab0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d013      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x9d4>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a40      	ldr	r2, [pc, #256]	; (8005dec <HAL_DMA_IRQHandler+0xab4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00e      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x9d4>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a3f      	ldr	r2, [pc, #252]	; (8005df0 <HAL_DMA_IRQHandler+0xab8>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d009      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x9d4>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a3d      	ldr	r2, [pc, #244]	; (8005df4 <HAL_DMA_IRQHandler+0xabc>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d004      	beq.n	8005d0c <HAL_DMA_IRQHandler+0x9d4>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a3c      	ldr	r2, [pc, #240]	; (8005df8 <HAL_DMA_IRQHandler+0xac0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d101      	bne.n	8005d10 <HAL_DMA_IRQHandler+0x9d8>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <HAL_DMA_IRQHandler+0x9da>
 8005d10:	2300      	movs	r3, #0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 824f 	beq.w	80061b6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	2204      	movs	r2, #4
 8005d2a:	409a      	lsls	r2, r3
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 80dd 	beq.w	8005ef0 <HAL_DMA_IRQHandler+0xbb8>
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80d7 	beq.w	8005ef0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d46:	f003 031f 	and.w	r3, r3, #31
 8005d4a:	2204      	movs	r2, #4
 8005d4c:	409a      	lsls	r2, r3
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d059      	beq.n	8005e10 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d14a      	bne.n	8005dfc <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 8220 	beq.w	80061b0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d78:	e21a      	b.n	80061b0 <HAL_DMA_IRQHandler+0xe78>
 8005d7a:	bf00      	nop
 8005d7c:	40020010 	.word	0x40020010
 8005d80:	40020028 	.word	0x40020028
 8005d84:	40020040 	.word	0x40020040
 8005d88:	40020058 	.word	0x40020058
 8005d8c:	40020070 	.word	0x40020070
 8005d90:	40020088 	.word	0x40020088
 8005d94:	400200a0 	.word	0x400200a0
 8005d98:	400200b8 	.word	0x400200b8
 8005d9c:	40020410 	.word	0x40020410
 8005da0:	40020428 	.word	0x40020428
 8005da4:	40020440 	.word	0x40020440
 8005da8:	40020458 	.word	0x40020458
 8005dac:	40020470 	.word	0x40020470
 8005db0:	40020488 	.word	0x40020488
 8005db4:	400204a0 	.word	0x400204a0
 8005db8:	400204b8 	.word	0x400204b8
 8005dbc:	48022c08 	.word	0x48022c08
 8005dc0:	48022c1c 	.word	0x48022c1c
 8005dc4:	48022c30 	.word	0x48022c30
 8005dc8:	48022c44 	.word	0x48022c44
 8005dcc:	48022c58 	.word	0x48022c58
 8005dd0:	48022c6c 	.word	0x48022c6c
 8005dd4:	48022c80 	.word	0x48022c80
 8005dd8:	48022c94 	.word	0x48022c94
 8005ddc:	58025408 	.word	0x58025408
 8005de0:	5802541c 	.word	0x5802541c
 8005de4:	58025430 	.word	0x58025430
 8005de8:	58025444 	.word	0x58025444
 8005dec:	58025458 	.word	0x58025458
 8005df0:	5802546c 	.word	0x5802546c
 8005df4:	58025480 	.word	0x58025480
 8005df8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 81d5 	beq.w	80061b0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e0e:	e1cf      	b.n	80061b0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d160      	bne.n	8005edc <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a7f      	ldr	r2, [pc, #508]	; (800601c <HAL_DMA_IRQHandler+0xce4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d04a      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb82>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a7d      	ldr	r2, [pc, #500]	; (8006020 <HAL_DMA_IRQHandler+0xce8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d045      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb82>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a7c      	ldr	r2, [pc, #496]	; (8006024 <HAL_DMA_IRQHandler+0xcec>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d040      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb82>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a7a      	ldr	r2, [pc, #488]	; (8006028 <HAL_DMA_IRQHandler+0xcf0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d03b      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb82>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a79      	ldr	r2, [pc, #484]	; (800602c <HAL_DMA_IRQHandler+0xcf4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d036      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb82>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a77      	ldr	r2, [pc, #476]	; (8006030 <HAL_DMA_IRQHandler+0xcf8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d031      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb82>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a76      	ldr	r2, [pc, #472]	; (8006034 <HAL_DMA_IRQHandler+0xcfc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d02c      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb82>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a74      	ldr	r2, [pc, #464]	; (8006038 <HAL_DMA_IRQHandler+0xd00>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d027      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb82>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a73      	ldr	r2, [pc, #460]	; (800603c <HAL_DMA_IRQHandler+0xd04>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d022      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb82>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a71      	ldr	r2, [pc, #452]	; (8006040 <HAL_DMA_IRQHandler+0xd08>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d01d      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb82>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a70      	ldr	r2, [pc, #448]	; (8006044 <HAL_DMA_IRQHandler+0xd0c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d018      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb82>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a6e      	ldr	r2, [pc, #440]	; (8006048 <HAL_DMA_IRQHandler+0xd10>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb82>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a6d      	ldr	r2, [pc, #436]	; (800604c <HAL_DMA_IRQHandler+0xd14>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00e      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb82>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a6b      	ldr	r2, [pc, #428]	; (8006050 <HAL_DMA_IRQHandler+0xd18>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d009      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb82>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a6a      	ldr	r2, [pc, #424]	; (8006054 <HAL_DMA_IRQHandler+0xd1c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb82>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a68      	ldr	r2, [pc, #416]	; (8006058 <HAL_DMA_IRQHandler+0xd20>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d108      	bne.n	8005ecc <HAL_DMA_IRQHandler+0xb94>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0208 	bic.w	r2, r2, #8
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	e007      	b.n	8005edc <HAL_DMA_IRQHandler+0xba4>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0204 	bic.w	r2, r2, #4
 8005eda:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8165 	beq.w	80061b0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005eee:	e15f      	b.n	80061b0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	2202      	movs	r2, #2
 8005efa:	409a      	lsls	r2, r3
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	4013      	ands	r3, r2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 80c5 	beq.w	8006090 <HAL_DMA_IRQHandler+0xd58>
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80bf 	beq.w	8006090 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f16:	f003 031f 	and.w	r3, r3, #31
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	409a      	lsls	r2, r3
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d018      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d109      	bne.n	8005f4a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 813a 	beq.w	80061b4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f48:	e134      	b.n	80061b4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 8130 	beq.w	80061b4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f5c:	e12a      	b.n	80061b4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f040 8089 	bne.w	800607c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a2b      	ldr	r2, [pc, #172]	; (800601c <HAL_DMA_IRQHandler+0xce4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d04a      	beq.n	800600a <HAL_DMA_IRQHandler+0xcd2>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a29      	ldr	r2, [pc, #164]	; (8006020 <HAL_DMA_IRQHandler+0xce8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d045      	beq.n	800600a <HAL_DMA_IRQHandler+0xcd2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a28      	ldr	r2, [pc, #160]	; (8006024 <HAL_DMA_IRQHandler+0xcec>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d040      	beq.n	800600a <HAL_DMA_IRQHandler+0xcd2>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a26      	ldr	r2, [pc, #152]	; (8006028 <HAL_DMA_IRQHandler+0xcf0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d03b      	beq.n	800600a <HAL_DMA_IRQHandler+0xcd2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a25      	ldr	r2, [pc, #148]	; (800602c <HAL_DMA_IRQHandler+0xcf4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d036      	beq.n	800600a <HAL_DMA_IRQHandler+0xcd2>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a23      	ldr	r2, [pc, #140]	; (8006030 <HAL_DMA_IRQHandler+0xcf8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d031      	beq.n	800600a <HAL_DMA_IRQHandler+0xcd2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a22      	ldr	r2, [pc, #136]	; (8006034 <HAL_DMA_IRQHandler+0xcfc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d02c      	beq.n	800600a <HAL_DMA_IRQHandler+0xcd2>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a20      	ldr	r2, [pc, #128]	; (8006038 <HAL_DMA_IRQHandler+0xd00>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d027      	beq.n	800600a <HAL_DMA_IRQHandler+0xcd2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1f      	ldr	r2, [pc, #124]	; (800603c <HAL_DMA_IRQHandler+0xd04>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d022      	beq.n	800600a <HAL_DMA_IRQHandler+0xcd2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1d      	ldr	r2, [pc, #116]	; (8006040 <HAL_DMA_IRQHandler+0xd08>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d01d      	beq.n	800600a <HAL_DMA_IRQHandler+0xcd2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1c      	ldr	r2, [pc, #112]	; (8006044 <HAL_DMA_IRQHandler+0xd0c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d018      	beq.n	800600a <HAL_DMA_IRQHandler+0xcd2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a1a      	ldr	r2, [pc, #104]	; (8006048 <HAL_DMA_IRQHandler+0xd10>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <HAL_DMA_IRQHandler+0xcd2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a19      	ldr	r2, [pc, #100]	; (800604c <HAL_DMA_IRQHandler+0xd14>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00e      	beq.n	800600a <HAL_DMA_IRQHandler+0xcd2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a17      	ldr	r2, [pc, #92]	; (8006050 <HAL_DMA_IRQHandler+0xd18>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d009      	beq.n	800600a <HAL_DMA_IRQHandler+0xcd2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a16      	ldr	r2, [pc, #88]	; (8006054 <HAL_DMA_IRQHandler+0xd1c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d004      	beq.n	800600a <HAL_DMA_IRQHandler+0xcd2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a14      	ldr	r2, [pc, #80]	; (8006058 <HAL_DMA_IRQHandler+0xd20>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d128      	bne.n	800605c <HAL_DMA_IRQHandler+0xd24>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0214 	bic.w	r2, r2, #20
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e027      	b.n	800606c <HAL_DMA_IRQHandler+0xd34>
 800601c:	40020010 	.word	0x40020010
 8006020:	40020028 	.word	0x40020028
 8006024:	40020040 	.word	0x40020040
 8006028:	40020058 	.word	0x40020058
 800602c:	40020070 	.word	0x40020070
 8006030:	40020088 	.word	0x40020088
 8006034:	400200a0 	.word	0x400200a0
 8006038:	400200b8 	.word	0x400200b8
 800603c:	40020410 	.word	0x40020410
 8006040:	40020428 	.word	0x40020428
 8006044:	40020440 	.word	0x40020440
 8006048:	40020458 	.word	0x40020458
 800604c:	40020470 	.word	0x40020470
 8006050:	40020488 	.word	0x40020488
 8006054:	400204a0 	.word	0x400204a0
 8006058:	400204b8 	.word	0x400204b8
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 020a 	bic.w	r2, r2, #10
 800606a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 8097 	beq.w	80061b4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800608e:	e091      	b.n	80061b4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006094:	f003 031f 	and.w	r3, r3, #31
 8006098:	2208      	movs	r2, #8
 800609a:	409a      	lsls	r2, r3
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	4013      	ands	r3, r2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8088 	beq.w	80061b6 <HAL_DMA_IRQHandler+0xe7e>
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 8082 	beq.w	80061b6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a41      	ldr	r2, [pc, #260]	; (80061bc <HAL_DMA_IRQHandler+0xe84>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d04a      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe1a>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a3f      	ldr	r2, [pc, #252]	; (80061c0 <HAL_DMA_IRQHandler+0xe88>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d045      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe1a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a3e      	ldr	r2, [pc, #248]	; (80061c4 <HAL_DMA_IRQHandler+0xe8c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d040      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe1a>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a3c      	ldr	r2, [pc, #240]	; (80061c8 <HAL_DMA_IRQHandler+0xe90>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d03b      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe1a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a3b      	ldr	r2, [pc, #236]	; (80061cc <HAL_DMA_IRQHandler+0xe94>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d036      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe1a>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a39      	ldr	r2, [pc, #228]	; (80061d0 <HAL_DMA_IRQHandler+0xe98>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d031      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe1a>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a38      	ldr	r2, [pc, #224]	; (80061d4 <HAL_DMA_IRQHandler+0xe9c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d02c      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe1a>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a36      	ldr	r2, [pc, #216]	; (80061d8 <HAL_DMA_IRQHandler+0xea0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d027      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe1a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a35      	ldr	r2, [pc, #212]	; (80061dc <HAL_DMA_IRQHandler+0xea4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d022      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe1a>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a33      	ldr	r2, [pc, #204]	; (80061e0 <HAL_DMA_IRQHandler+0xea8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d01d      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe1a>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a32      	ldr	r2, [pc, #200]	; (80061e4 <HAL_DMA_IRQHandler+0xeac>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d018      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe1a>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a30      	ldr	r2, [pc, #192]	; (80061e8 <HAL_DMA_IRQHandler+0xeb0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe1a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a2f      	ldr	r2, [pc, #188]	; (80061ec <HAL_DMA_IRQHandler+0xeb4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00e      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe1a>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a2d      	ldr	r2, [pc, #180]	; (80061f0 <HAL_DMA_IRQHandler+0xeb8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d009      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe1a>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a2c      	ldr	r2, [pc, #176]	; (80061f4 <HAL_DMA_IRQHandler+0xebc>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d004      	beq.n	8006152 <HAL_DMA_IRQHandler+0xe1a>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a2a      	ldr	r2, [pc, #168]	; (80061f8 <HAL_DMA_IRQHandler+0xec0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d108      	bne.n	8006164 <HAL_DMA_IRQHandler+0xe2c>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 021c 	bic.w	r2, r2, #28
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	e007      	b.n	8006174 <HAL_DMA_IRQHandler+0xe3c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 020e 	bic.w	r2, r2, #14
 8006172:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2201      	movs	r2, #1
 800617e:	409a      	lsls	r2, r3
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	4798      	blx	r3
 80061aa:	e004      	b.n	80061b6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80061ac:	bf00      	nop
 80061ae:	e002      	b.n	80061b6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061b0:	bf00      	nop
 80061b2:	e000      	b.n	80061b6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061b6:	3728      	adds	r7, #40	; 0x28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	40020010 	.word	0x40020010
 80061c0:	40020028 	.word	0x40020028
 80061c4:	40020040 	.word	0x40020040
 80061c8:	40020058 	.word	0x40020058
 80061cc:	40020070 	.word	0x40020070
 80061d0:	40020088 	.word	0x40020088
 80061d4:	400200a0 	.word	0x400200a0
 80061d8:	400200b8 	.word	0x400200b8
 80061dc:	40020410 	.word	0x40020410
 80061e0:	40020428 	.word	0x40020428
 80061e4:	40020440 	.word	0x40020440
 80061e8:	40020458 	.word	0x40020458
 80061ec:	40020470 	.word	0x40020470
 80061f0:	40020488 	.word	0x40020488
 80061f4:	400204a0 	.word	0x400204a0
 80061f8:	400204b8 	.word	0x400204b8

080061fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006214:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a7f      	ldr	r2, [pc, #508]	; (8006418 <DMA_SetConfig+0x21c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d072      	beq.n	8006306 <DMA_SetConfig+0x10a>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a7d      	ldr	r2, [pc, #500]	; (800641c <DMA_SetConfig+0x220>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d06d      	beq.n	8006306 <DMA_SetConfig+0x10a>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a7c      	ldr	r2, [pc, #496]	; (8006420 <DMA_SetConfig+0x224>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d068      	beq.n	8006306 <DMA_SetConfig+0x10a>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a7a      	ldr	r2, [pc, #488]	; (8006424 <DMA_SetConfig+0x228>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d063      	beq.n	8006306 <DMA_SetConfig+0x10a>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a79      	ldr	r2, [pc, #484]	; (8006428 <DMA_SetConfig+0x22c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d05e      	beq.n	8006306 <DMA_SetConfig+0x10a>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a77      	ldr	r2, [pc, #476]	; (800642c <DMA_SetConfig+0x230>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d059      	beq.n	8006306 <DMA_SetConfig+0x10a>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a76      	ldr	r2, [pc, #472]	; (8006430 <DMA_SetConfig+0x234>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d054      	beq.n	8006306 <DMA_SetConfig+0x10a>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a74      	ldr	r2, [pc, #464]	; (8006434 <DMA_SetConfig+0x238>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d04f      	beq.n	8006306 <DMA_SetConfig+0x10a>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a73      	ldr	r2, [pc, #460]	; (8006438 <DMA_SetConfig+0x23c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d04a      	beq.n	8006306 <DMA_SetConfig+0x10a>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a71      	ldr	r2, [pc, #452]	; (800643c <DMA_SetConfig+0x240>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d045      	beq.n	8006306 <DMA_SetConfig+0x10a>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a70      	ldr	r2, [pc, #448]	; (8006440 <DMA_SetConfig+0x244>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d040      	beq.n	8006306 <DMA_SetConfig+0x10a>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a6e      	ldr	r2, [pc, #440]	; (8006444 <DMA_SetConfig+0x248>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d03b      	beq.n	8006306 <DMA_SetConfig+0x10a>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a6d      	ldr	r2, [pc, #436]	; (8006448 <DMA_SetConfig+0x24c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d036      	beq.n	8006306 <DMA_SetConfig+0x10a>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a6b      	ldr	r2, [pc, #428]	; (800644c <DMA_SetConfig+0x250>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d031      	beq.n	8006306 <DMA_SetConfig+0x10a>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a6a      	ldr	r2, [pc, #424]	; (8006450 <DMA_SetConfig+0x254>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d02c      	beq.n	8006306 <DMA_SetConfig+0x10a>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a68      	ldr	r2, [pc, #416]	; (8006454 <DMA_SetConfig+0x258>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d027      	beq.n	8006306 <DMA_SetConfig+0x10a>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a67      	ldr	r2, [pc, #412]	; (8006458 <DMA_SetConfig+0x25c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d022      	beq.n	8006306 <DMA_SetConfig+0x10a>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a65      	ldr	r2, [pc, #404]	; (800645c <DMA_SetConfig+0x260>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d01d      	beq.n	8006306 <DMA_SetConfig+0x10a>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a64      	ldr	r2, [pc, #400]	; (8006460 <DMA_SetConfig+0x264>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d018      	beq.n	8006306 <DMA_SetConfig+0x10a>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a62      	ldr	r2, [pc, #392]	; (8006464 <DMA_SetConfig+0x268>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <DMA_SetConfig+0x10a>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a61      	ldr	r2, [pc, #388]	; (8006468 <DMA_SetConfig+0x26c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d00e      	beq.n	8006306 <DMA_SetConfig+0x10a>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a5f      	ldr	r2, [pc, #380]	; (800646c <DMA_SetConfig+0x270>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d009      	beq.n	8006306 <DMA_SetConfig+0x10a>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a5e      	ldr	r2, [pc, #376]	; (8006470 <DMA_SetConfig+0x274>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d004      	beq.n	8006306 <DMA_SetConfig+0x10a>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a5c      	ldr	r2, [pc, #368]	; (8006474 <DMA_SetConfig+0x278>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d101      	bne.n	800630a <DMA_SetConfig+0x10e>
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <DMA_SetConfig+0x110>
 800630a:	2300      	movs	r3, #0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00d      	beq.n	800632c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006318:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d004      	beq.n	800632c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800632a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a39      	ldr	r2, [pc, #228]	; (8006418 <DMA_SetConfig+0x21c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d04a      	beq.n	80063cc <DMA_SetConfig+0x1d0>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a38      	ldr	r2, [pc, #224]	; (800641c <DMA_SetConfig+0x220>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d045      	beq.n	80063cc <DMA_SetConfig+0x1d0>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a36      	ldr	r2, [pc, #216]	; (8006420 <DMA_SetConfig+0x224>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d040      	beq.n	80063cc <DMA_SetConfig+0x1d0>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a35      	ldr	r2, [pc, #212]	; (8006424 <DMA_SetConfig+0x228>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d03b      	beq.n	80063cc <DMA_SetConfig+0x1d0>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a33      	ldr	r2, [pc, #204]	; (8006428 <DMA_SetConfig+0x22c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d036      	beq.n	80063cc <DMA_SetConfig+0x1d0>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a32      	ldr	r2, [pc, #200]	; (800642c <DMA_SetConfig+0x230>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d031      	beq.n	80063cc <DMA_SetConfig+0x1d0>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a30      	ldr	r2, [pc, #192]	; (8006430 <DMA_SetConfig+0x234>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d02c      	beq.n	80063cc <DMA_SetConfig+0x1d0>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a2f      	ldr	r2, [pc, #188]	; (8006434 <DMA_SetConfig+0x238>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d027      	beq.n	80063cc <DMA_SetConfig+0x1d0>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a2d      	ldr	r2, [pc, #180]	; (8006438 <DMA_SetConfig+0x23c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d022      	beq.n	80063cc <DMA_SetConfig+0x1d0>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a2c      	ldr	r2, [pc, #176]	; (800643c <DMA_SetConfig+0x240>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d01d      	beq.n	80063cc <DMA_SetConfig+0x1d0>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a2a      	ldr	r2, [pc, #168]	; (8006440 <DMA_SetConfig+0x244>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d018      	beq.n	80063cc <DMA_SetConfig+0x1d0>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a29      	ldr	r2, [pc, #164]	; (8006444 <DMA_SetConfig+0x248>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d013      	beq.n	80063cc <DMA_SetConfig+0x1d0>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a27      	ldr	r2, [pc, #156]	; (8006448 <DMA_SetConfig+0x24c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00e      	beq.n	80063cc <DMA_SetConfig+0x1d0>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a26      	ldr	r2, [pc, #152]	; (800644c <DMA_SetConfig+0x250>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d009      	beq.n	80063cc <DMA_SetConfig+0x1d0>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a24      	ldr	r2, [pc, #144]	; (8006450 <DMA_SetConfig+0x254>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <DMA_SetConfig+0x1d0>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a23      	ldr	r2, [pc, #140]	; (8006454 <DMA_SetConfig+0x258>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d101      	bne.n	80063d0 <DMA_SetConfig+0x1d4>
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <DMA_SetConfig+0x1d6>
 80063d0:	2300      	movs	r3, #0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d059      	beq.n	800648a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	223f      	movs	r2, #63	; 0x3f
 80063e0:	409a      	lsls	r2, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063f4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	2b40      	cmp	r3, #64	; 0x40
 8006404:	d138      	bne.n	8006478 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006416:	e0ae      	b.n	8006576 <DMA_SetConfig+0x37a>
 8006418:	40020010 	.word	0x40020010
 800641c:	40020028 	.word	0x40020028
 8006420:	40020040 	.word	0x40020040
 8006424:	40020058 	.word	0x40020058
 8006428:	40020070 	.word	0x40020070
 800642c:	40020088 	.word	0x40020088
 8006430:	400200a0 	.word	0x400200a0
 8006434:	400200b8 	.word	0x400200b8
 8006438:	40020410 	.word	0x40020410
 800643c:	40020428 	.word	0x40020428
 8006440:	40020440 	.word	0x40020440
 8006444:	40020458 	.word	0x40020458
 8006448:	40020470 	.word	0x40020470
 800644c:	40020488 	.word	0x40020488
 8006450:	400204a0 	.word	0x400204a0
 8006454:	400204b8 	.word	0x400204b8
 8006458:	58025408 	.word	0x58025408
 800645c:	5802541c 	.word	0x5802541c
 8006460:	58025430 	.word	0x58025430
 8006464:	58025444 	.word	0x58025444
 8006468:	58025458 	.word	0x58025458
 800646c:	5802546c 	.word	0x5802546c
 8006470:	58025480 	.word	0x58025480
 8006474:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	60da      	str	r2, [r3, #12]
}
 8006488:	e075      	b.n	8006576 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a3d      	ldr	r2, [pc, #244]	; (8006584 <DMA_SetConfig+0x388>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d04a      	beq.n	800652a <DMA_SetConfig+0x32e>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a3b      	ldr	r2, [pc, #236]	; (8006588 <DMA_SetConfig+0x38c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d045      	beq.n	800652a <DMA_SetConfig+0x32e>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a3a      	ldr	r2, [pc, #232]	; (800658c <DMA_SetConfig+0x390>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d040      	beq.n	800652a <DMA_SetConfig+0x32e>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a38      	ldr	r2, [pc, #224]	; (8006590 <DMA_SetConfig+0x394>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d03b      	beq.n	800652a <DMA_SetConfig+0x32e>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a37      	ldr	r2, [pc, #220]	; (8006594 <DMA_SetConfig+0x398>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d036      	beq.n	800652a <DMA_SetConfig+0x32e>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a35      	ldr	r2, [pc, #212]	; (8006598 <DMA_SetConfig+0x39c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d031      	beq.n	800652a <DMA_SetConfig+0x32e>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a34      	ldr	r2, [pc, #208]	; (800659c <DMA_SetConfig+0x3a0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d02c      	beq.n	800652a <DMA_SetConfig+0x32e>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a32      	ldr	r2, [pc, #200]	; (80065a0 <DMA_SetConfig+0x3a4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d027      	beq.n	800652a <DMA_SetConfig+0x32e>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a31      	ldr	r2, [pc, #196]	; (80065a4 <DMA_SetConfig+0x3a8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d022      	beq.n	800652a <DMA_SetConfig+0x32e>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a2f      	ldr	r2, [pc, #188]	; (80065a8 <DMA_SetConfig+0x3ac>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d01d      	beq.n	800652a <DMA_SetConfig+0x32e>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a2e      	ldr	r2, [pc, #184]	; (80065ac <DMA_SetConfig+0x3b0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d018      	beq.n	800652a <DMA_SetConfig+0x32e>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a2c      	ldr	r2, [pc, #176]	; (80065b0 <DMA_SetConfig+0x3b4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d013      	beq.n	800652a <DMA_SetConfig+0x32e>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a2b      	ldr	r2, [pc, #172]	; (80065b4 <DMA_SetConfig+0x3b8>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00e      	beq.n	800652a <DMA_SetConfig+0x32e>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a29      	ldr	r2, [pc, #164]	; (80065b8 <DMA_SetConfig+0x3bc>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d009      	beq.n	800652a <DMA_SetConfig+0x32e>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a28      	ldr	r2, [pc, #160]	; (80065bc <DMA_SetConfig+0x3c0>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d004      	beq.n	800652a <DMA_SetConfig+0x32e>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a26      	ldr	r2, [pc, #152]	; (80065c0 <DMA_SetConfig+0x3c4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d101      	bne.n	800652e <DMA_SetConfig+0x332>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <DMA_SetConfig+0x334>
 800652e:	2300      	movs	r3, #0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d020      	beq.n	8006576 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006538:	f003 031f 	and.w	r3, r3, #31
 800653c:	2201      	movs	r2, #1
 800653e:	409a      	lsls	r2, r3
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	2b40      	cmp	r3, #64	; 0x40
 8006552:	d108      	bne.n	8006566 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	60da      	str	r2, [r3, #12]
}
 8006564:	e007      	b.n	8006576 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	60da      	str	r2, [r3, #12]
}
 8006576:	bf00      	nop
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	48022c08 	.word	0x48022c08
 8006588:	48022c1c 	.word	0x48022c1c
 800658c:	48022c30 	.word	0x48022c30
 8006590:	48022c44 	.word	0x48022c44
 8006594:	48022c58 	.word	0x48022c58
 8006598:	48022c6c 	.word	0x48022c6c
 800659c:	48022c80 	.word	0x48022c80
 80065a0:	48022c94 	.word	0x48022c94
 80065a4:	58025408 	.word	0x58025408
 80065a8:	5802541c 	.word	0x5802541c
 80065ac:	58025430 	.word	0x58025430
 80065b0:	58025444 	.word	0x58025444
 80065b4:	58025458 	.word	0x58025458
 80065b8:	5802546c 	.word	0x5802546c
 80065bc:	58025480 	.word	0x58025480
 80065c0:	58025494 	.word	0x58025494

080065c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a42      	ldr	r2, [pc, #264]	; (80066dc <DMA_CalcBaseAndBitshift+0x118>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d04a      	beq.n	800666c <DMA_CalcBaseAndBitshift+0xa8>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a41      	ldr	r2, [pc, #260]	; (80066e0 <DMA_CalcBaseAndBitshift+0x11c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d045      	beq.n	800666c <DMA_CalcBaseAndBitshift+0xa8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a3f      	ldr	r2, [pc, #252]	; (80066e4 <DMA_CalcBaseAndBitshift+0x120>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d040      	beq.n	800666c <DMA_CalcBaseAndBitshift+0xa8>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a3e      	ldr	r2, [pc, #248]	; (80066e8 <DMA_CalcBaseAndBitshift+0x124>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d03b      	beq.n	800666c <DMA_CalcBaseAndBitshift+0xa8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a3c      	ldr	r2, [pc, #240]	; (80066ec <DMA_CalcBaseAndBitshift+0x128>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d036      	beq.n	800666c <DMA_CalcBaseAndBitshift+0xa8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a3b      	ldr	r2, [pc, #236]	; (80066f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d031      	beq.n	800666c <DMA_CalcBaseAndBitshift+0xa8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a39      	ldr	r2, [pc, #228]	; (80066f4 <DMA_CalcBaseAndBitshift+0x130>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d02c      	beq.n	800666c <DMA_CalcBaseAndBitshift+0xa8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a38      	ldr	r2, [pc, #224]	; (80066f8 <DMA_CalcBaseAndBitshift+0x134>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d027      	beq.n	800666c <DMA_CalcBaseAndBitshift+0xa8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a36      	ldr	r2, [pc, #216]	; (80066fc <DMA_CalcBaseAndBitshift+0x138>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d022      	beq.n	800666c <DMA_CalcBaseAndBitshift+0xa8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a35      	ldr	r2, [pc, #212]	; (8006700 <DMA_CalcBaseAndBitshift+0x13c>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d01d      	beq.n	800666c <DMA_CalcBaseAndBitshift+0xa8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a33      	ldr	r2, [pc, #204]	; (8006704 <DMA_CalcBaseAndBitshift+0x140>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d018      	beq.n	800666c <DMA_CalcBaseAndBitshift+0xa8>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a32      	ldr	r2, [pc, #200]	; (8006708 <DMA_CalcBaseAndBitshift+0x144>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d013      	beq.n	800666c <DMA_CalcBaseAndBitshift+0xa8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a30      	ldr	r2, [pc, #192]	; (800670c <DMA_CalcBaseAndBitshift+0x148>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00e      	beq.n	800666c <DMA_CalcBaseAndBitshift+0xa8>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a2f      	ldr	r2, [pc, #188]	; (8006710 <DMA_CalcBaseAndBitshift+0x14c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d009      	beq.n	800666c <DMA_CalcBaseAndBitshift+0xa8>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a2d      	ldr	r2, [pc, #180]	; (8006714 <DMA_CalcBaseAndBitshift+0x150>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d004      	beq.n	800666c <DMA_CalcBaseAndBitshift+0xa8>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a2c      	ldr	r2, [pc, #176]	; (8006718 <DMA_CalcBaseAndBitshift+0x154>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d101      	bne.n	8006670 <DMA_CalcBaseAndBitshift+0xac>
 800666c:	2301      	movs	r3, #1
 800666e:	e000      	b.n	8006672 <DMA_CalcBaseAndBitshift+0xae>
 8006670:	2300      	movs	r3, #0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d024      	beq.n	80066c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	3b10      	subs	r3, #16
 800667e:	4a27      	ldr	r2, [pc, #156]	; (800671c <DMA_CalcBaseAndBitshift+0x158>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	091b      	lsrs	r3, r3, #4
 8006686:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	4a24      	ldr	r2, [pc, #144]	; (8006720 <DMA_CalcBaseAndBitshift+0x15c>)
 8006690:	5cd3      	ldrb	r3, [r2, r3]
 8006692:	461a      	mov	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b03      	cmp	r3, #3
 800669c:	d908      	bls.n	80066b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	4b1f      	ldr	r3, [pc, #124]	; (8006724 <DMA_CalcBaseAndBitshift+0x160>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	1d1a      	adds	r2, r3, #4
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	659a      	str	r2, [r3, #88]	; 0x58
 80066ae:	e00d      	b.n	80066cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	461a      	mov	r2, r3
 80066b6:	4b1b      	ldr	r3, [pc, #108]	; (8006724 <DMA_CalcBaseAndBitshift+0x160>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6593      	str	r3, [r2, #88]	; 0x58
 80066be:	e005      	b.n	80066cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	40020010 	.word	0x40020010
 80066e0:	40020028 	.word	0x40020028
 80066e4:	40020040 	.word	0x40020040
 80066e8:	40020058 	.word	0x40020058
 80066ec:	40020070 	.word	0x40020070
 80066f0:	40020088 	.word	0x40020088
 80066f4:	400200a0 	.word	0x400200a0
 80066f8:	400200b8 	.word	0x400200b8
 80066fc:	40020410 	.word	0x40020410
 8006700:	40020428 	.word	0x40020428
 8006704:	40020440 	.word	0x40020440
 8006708:	40020458 	.word	0x40020458
 800670c:	40020470 	.word	0x40020470
 8006710:	40020488 	.word	0x40020488
 8006714:	400204a0 	.word	0x400204a0
 8006718:	400204b8 	.word	0x400204b8
 800671c:	aaaaaaab 	.word	0xaaaaaaab
 8006720:	0800ba28 	.word	0x0800ba28
 8006724:	fffffc00 	.word	0xfffffc00

08006728 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d120      	bne.n	800677e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006740:	2b03      	cmp	r3, #3
 8006742:	d858      	bhi.n	80067f6 <DMA_CheckFifoParam+0xce>
 8006744:	a201      	add	r2, pc, #4	; (adr r2, 800674c <DMA_CheckFifoParam+0x24>)
 8006746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674a:	bf00      	nop
 800674c:	0800675d 	.word	0x0800675d
 8006750:	0800676f 	.word	0x0800676f
 8006754:	0800675d 	.word	0x0800675d
 8006758:	080067f7 	.word	0x080067f7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d048      	beq.n	80067fa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800676c:	e045      	b.n	80067fa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006776:	d142      	bne.n	80067fe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800677c:	e03f      	b.n	80067fe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006786:	d123      	bne.n	80067d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678c:	2b03      	cmp	r3, #3
 800678e:	d838      	bhi.n	8006802 <DMA_CheckFifoParam+0xda>
 8006790:	a201      	add	r2, pc, #4	; (adr r2, 8006798 <DMA_CheckFifoParam+0x70>)
 8006792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006796:	bf00      	nop
 8006798:	080067a9 	.word	0x080067a9
 800679c:	080067af 	.word	0x080067af
 80067a0:	080067a9 	.word	0x080067a9
 80067a4:	080067c1 	.word	0x080067c1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	73fb      	strb	r3, [r7, #15]
        break;
 80067ac:	e030      	b.n	8006810 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d025      	beq.n	8006806 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067be:	e022      	b.n	8006806 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067c8:	d11f      	bne.n	800680a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067ce:	e01c      	b.n	800680a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d902      	bls.n	80067de <DMA_CheckFifoParam+0xb6>
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d003      	beq.n	80067e4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80067dc:	e018      	b.n	8006810 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	73fb      	strb	r3, [r7, #15]
        break;
 80067e2:	e015      	b.n	8006810 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00e      	beq.n	800680e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	73fb      	strb	r3, [r7, #15]
    break;
 80067f4:	e00b      	b.n	800680e <DMA_CheckFifoParam+0xe6>
        break;
 80067f6:	bf00      	nop
 80067f8:	e00a      	b.n	8006810 <DMA_CheckFifoParam+0xe8>
        break;
 80067fa:	bf00      	nop
 80067fc:	e008      	b.n	8006810 <DMA_CheckFifoParam+0xe8>
        break;
 80067fe:	bf00      	nop
 8006800:	e006      	b.n	8006810 <DMA_CheckFifoParam+0xe8>
        break;
 8006802:	bf00      	nop
 8006804:	e004      	b.n	8006810 <DMA_CheckFifoParam+0xe8>
        break;
 8006806:	bf00      	nop
 8006808:	e002      	b.n	8006810 <DMA_CheckFifoParam+0xe8>
        break;
 800680a:	bf00      	nop
 800680c:	e000      	b.n	8006810 <DMA_CheckFifoParam+0xe8>
    break;
 800680e:	bf00      	nop
    }
  }

  return status;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop

08006820 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a38      	ldr	r2, [pc, #224]	; (8006914 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d022      	beq.n	800687e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a36      	ldr	r2, [pc, #216]	; (8006918 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d01d      	beq.n	800687e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a35      	ldr	r2, [pc, #212]	; (800691c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d018      	beq.n	800687e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a33      	ldr	r2, [pc, #204]	; (8006920 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d013      	beq.n	800687e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a32      	ldr	r2, [pc, #200]	; (8006924 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00e      	beq.n	800687e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a30      	ldr	r2, [pc, #192]	; (8006928 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d009      	beq.n	800687e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a2f      	ldr	r2, [pc, #188]	; (800692c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d004      	beq.n	800687e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a2d      	ldr	r2, [pc, #180]	; (8006930 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d101      	bne.n	8006882 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006882:	2300      	movs	r3, #0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d01a      	beq.n	80068be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	3b08      	subs	r3, #8
 8006890:	4a28      	ldr	r2, [pc, #160]	; (8006934 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006892:	fba2 2303 	umull	r2, r3, r2, r3
 8006896:	091b      	lsrs	r3, r3, #4
 8006898:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4b26      	ldr	r3, [pc, #152]	; (8006938 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	461a      	mov	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a24      	ldr	r2, [pc, #144]	; (800693c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80068ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f003 031f 	and.w	r3, r3, #31
 80068b4:	2201      	movs	r2, #1
 80068b6:	409a      	lsls	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80068bc:	e024      	b.n	8006908 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	3b10      	subs	r3, #16
 80068c6:	4a1e      	ldr	r2, [pc, #120]	; (8006940 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80068c8:	fba2 2303 	umull	r2, r3, r2, r3
 80068cc:	091b      	lsrs	r3, r3, #4
 80068ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4a1c      	ldr	r2, [pc, #112]	; (8006944 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d806      	bhi.n	80068e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	4a1b      	ldr	r2, [pc, #108]	; (8006948 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d902      	bls.n	80068e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3308      	adds	r3, #8
 80068e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4b18      	ldr	r3, [pc, #96]	; (800694c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	461a      	mov	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a16      	ldr	r2, [pc, #88]	; (8006950 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80068f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	2201      	movs	r2, #1
 8006902:	409a      	lsls	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006908:	bf00      	nop
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	58025408 	.word	0x58025408
 8006918:	5802541c 	.word	0x5802541c
 800691c:	58025430 	.word	0x58025430
 8006920:	58025444 	.word	0x58025444
 8006924:	58025458 	.word	0x58025458
 8006928:	5802546c 	.word	0x5802546c
 800692c:	58025480 	.word	0x58025480
 8006930:	58025494 	.word	0x58025494
 8006934:	cccccccd 	.word	0xcccccccd
 8006938:	16009600 	.word	0x16009600
 800693c:	58025880 	.word	0x58025880
 8006940:	aaaaaaab 	.word	0xaaaaaaab
 8006944:	400204b8 	.word	0x400204b8
 8006948:	4002040f 	.word	0x4002040f
 800694c:	10008200 	.word	0x10008200
 8006950:	40020880 	.word	0x40020880

08006954 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	b2db      	uxtb	r3, r3
 8006962:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d04a      	beq.n	8006a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b08      	cmp	r3, #8
 800696e:	d847      	bhi.n	8006a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a25      	ldr	r2, [pc, #148]	; (8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d022      	beq.n	80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a24      	ldr	r2, [pc, #144]	; (8006a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d01d      	beq.n	80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a22      	ldr	r2, [pc, #136]	; (8006a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d018      	beq.n	80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a21      	ldr	r2, [pc, #132]	; (8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d013      	beq.n	80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a1f      	ldr	r2, [pc, #124]	; (8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d00e      	beq.n	80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a1e      	ldr	r2, [pc, #120]	; (8006a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d009      	beq.n	80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a1c      	ldr	r2, [pc, #112]	; (8006a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d004      	beq.n	80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a1b      	ldr	r2, [pc, #108]	; (8006a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d101      	bne.n	80069c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80069c0:	2301      	movs	r3, #1
 80069c2:	e000      	b.n	80069c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80069c4:	2300      	movs	r3, #0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	4b17      	ldr	r3, [pc, #92]	; (8006a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80069ce:	4413      	add	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	461a      	mov	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80069dc:	671a      	str	r2, [r3, #112]	; 0x70
 80069de:	e009      	b.n	80069f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4b14      	ldr	r3, [pc, #80]	; (8006a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	461a      	mov	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a11      	ldr	r2, [pc, #68]	; (8006a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80069f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	2201      	movs	r2, #1
 80069fa:	409a      	lsls	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006a00:	bf00      	nop
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	58025408 	.word	0x58025408
 8006a10:	5802541c 	.word	0x5802541c
 8006a14:	58025430 	.word	0x58025430
 8006a18:	58025444 	.word	0x58025444
 8006a1c:	58025458 	.word	0x58025458
 8006a20:	5802546c 	.word	0x5802546c
 8006a24:	58025480 	.word	0x58025480
 8006a28:	58025494 	.word	0x58025494
 8006a2c:	1600963f 	.word	0x1600963f
 8006a30:	58025940 	.word	0x58025940
 8006a34:	1000823f 	.word	0x1000823f
 8006a38:	40020940 	.word	0x40020940

08006a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b089      	sub	sp, #36	; 0x24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a4a:	4b89      	ldr	r3, [pc, #548]	; (8006c70 <HAL_GPIO_Init+0x234>)
 8006a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a4e:	e194      	b.n	8006d7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	2101      	movs	r1, #1
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 8186 	beq.w	8006d74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f003 0303 	and.w	r3, r3, #3
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d005      	beq.n	8006a80 <HAL_GPIO_Init+0x44>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f003 0303 	and.w	r3, r3, #3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d130      	bne.n	8006ae2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a90:	43db      	mvns	r3, r3
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	4013      	ands	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	68da      	ldr	r2, [r3, #12]
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	005b      	lsls	r3, r3, #1
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	fa02 f303 	lsl.w	r3, r2, r3
 8006abe:	43db      	mvns	r3, r3
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	091b      	lsrs	r3, r3, #4
 8006acc:	f003 0201 	and.w	r2, r3, #1
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f003 0303 	and.w	r3, r3, #3
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d017      	beq.n	8006b1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	005b      	lsls	r3, r3, #1
 8006af8:	2203      	movs	r2, #3
 8006afa:	fa02 f303 	lsl.w	r3, r2, r3
 8006afe:	43db      	mvns	r3, r3
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	4013      	ands	r3, r2
 8006b04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d123      	bne.n	8006b72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	08da      	lsrs	r2, r3, #3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3208      	adds	r2, #8
 8006b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	220f      	movs	r2, #15
 8006b42:	fa02 f303 	lsl.w	r3, r2, r3
 8006b46:	43db      	mvns	r3, r3
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	691a      	ldr	r2, [r3, #16]
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	08da      	lsrs	r2, r3, #3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	3208      	adds	r2, #8
 8006b6c:	69b9      	ldr	r1, [r7, #24]
 8006b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	2203      	movs	r2, #3
 8006b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b82:	43db      	mvns	r3, r3
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	4013      	ands	r3, r2
 8006b88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f003 0203 	and.w	r2, r3, #3
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 80e0 	beq.w	8006d74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bb4:	4b2f      	ldr	r3, [pc, #188]	; (8006c74 <HAL_GPIO_Init+0x238>)
 8006bb6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006bba:	4a2e      	ldr	r2, [pc, #184]	; (8006c74 <HAL_GPIO_Init+0x238>)
 8006bbc:	f043 0302 	orr.w	r3, r3, #2
 8006bc0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8006bc4:	4b2b      	ldr	r3, [pc, #172]	; (8006c74 <HAL_GPIO_Init+0x238>)
 8006bc6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bd2:	4a29      	ldr	r2, [pc, #164]	; (8006c78 <HAL_GPIO_Init+0x23c>)
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	089b      	lsrs	r3, r3, #2
 8006bd8:	3302      	adds	r3, #2
 8006bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	f003 0303 	and.w	r3, r3, #3
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	220f      	movs	r2, #15
 8006bea:	fa02 f303 	lsl.w	r3, r2, r3
 8006bee:	43db      	mvns	r3, r3
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a20      	ldr	r2, [pc, #128]	; (8006c7c <HAL_GPIO_Init+0x240>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d052      	beq.n	8006ca4 <HAL_GPIO_Init+0x268>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a1f      	ldr	r2, [pc, #124]	; (8006c80 <HAL_GPIO_Init+0x244>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d031      	beq.n	8006c6a <HAL_GPIO_Init+0x22e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a1e      	ldr	r2, [pc, #120]	; (8006c84 <HAL_GPIO_Init+0x248>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d02b      	beq.n	8006c66 <HAL_GPIO_Init+0x22a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a1d      	ldr	r2, [pc, #116]	; (8006c88 <HAL_GPIO_Init+0x24c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d025      	beq.n	8006c62 <HAL_GPIO_Init+0x226>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a1c      	ldr	r2, [pc, #112]	; (8006c8c <HAL_GPIO_Init+0x250>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d01f      	beq.n	8006c5e <HAL_GPIO_Init+0x222>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a1b      	ldr	r2, [pc, #108]	; (8006c90 <HAL_GPIO_Init+0x254>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d019      	beq.n	8006c5a <HAL_GPIO_Init+0x21e>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a1a      	ldr	r2, [pc, #104]	; (8006c94 <HAL_GPIO_Init+0x258>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d013      	beq.n	8006c56 <HAL_GPIO_Init+0x21a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a19      	ldr	r2, [pc, #100]	; (8006c98 <HAL_GPIO_Init+0x25c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00d      	beq.n	8006c52 <HAL_GPIO_Init+0x216>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a18      	ldr	r2, [pc, #96]	; (8006c9c <HAL_GPIO_Init+0x260>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d007      	beq.n	8006c4e <HAL_GPIO_Init+0x212>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a17      	ldr	r2, [pc, #92]	; (8006ca0 <HAL_GPIO_Init+0x264>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d101      	bne.n	8006c4a <HAL_GPIO_Init+0x20e>
 8006c46:	2309      	movs	r3, #9
 8006c48:	e02d      	b.n	8006ca6 <HAL_GPIO_Init+0x26a>
 8006c4a:	230a      	movs	r3, #10
 8006c4c:	e02b      	b.n	8006ca6 <HAL_GPIO_Init+0x26a>
 8006c4e:	2308      	movs	r3, #8
 8006c50:	e029      	b.n	8006ca6 <HAL_GPIO_Init+0x26a>
 8006c52:	2307      	movs	r3, #7
 8006c54:	e027      	b.n	8006ca6 <HAL_GPIO_Init+0x26a>
 8006c56:	2306      	movs	r3, #6
 8006c58:	e025      	b.n	8006ca6 <HAL_GPIO_Init+0x26a>
 8006c5a:	2305      	movs	r3, #5
 8006c5c:	e023      	b.n	8006ca6 <HAL_GPIO_Init+0x26a>
 8006c5e:	2304      	movs	r3, #4
 8006c60:	e021      	b.n	8006ca6 <HAL_GPIO_Init+0x26a>
 8006c62:	2303      	movs	r3, #3
 8006c64:	e01f      	b.n	8006ca6 <HAL_GPIO_Init+0x26a>
 8006c66:	2302      	movs	r3, #2
 8006c68:	e01d      	b.n	8006ca6 <HAL_GPIO_Init+0x26a>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e01b      	b.n	8006ca6 <HAL_GPIO_Init+0x26a>
 8006c6e:	bf00      	nop
 8006c70:	58000080 	.word	0x58000080
 8006c74:	58024400 	.word	0x58024400
 8006c78:	58000400 	.word	0x58000400
 8006c7c:	58020000 	.word	0x58020000
 8006c80:	58020400 	.word	0x58020400
 8006c84:	58020800 	.word	0x58020800
 8006c88:	58020c00 	.word	0x58020c00
 8006c8c:	58021000 	.word	0x58021000
 8006c90:	58021400 	.word	0x58021400
 8006c94:	58021800 	.word	0x58021800
 8006c98:	58021c00 	.word	0x58021c00
 8006c9c:	58022000 	.word	0x58022000
 8006ca0:	58022400 	.word	0x58022400
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	f002 0203 	and.w	r2, r2, #3
 8006cac:	0092      	lsls	r2, r2, #2
 8006cae:	4093      	lsls	r3, r2
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cb6:	4938      	ldr	r1, [pc, #224]	; (8006d98 <HAL_GPIO_Init+0x35c>)
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	089b      	lsrs	r3, r3, #2
 8006cbc:	3302      	adds	r3, #2
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	43db      	mvns	r3, r3
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006cea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	43db      	mvns	r3, r3
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	4013      	ands	r3, r2
 8006d02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	43db      	mvns	r3, r3
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	69ba      	ldr	r2, [r7, #24]
 8006d48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	43db      	mvns	r3, r3
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	4013      	ands	r3, r2
 8006d58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	3301      	adds	r3, #1
 8006d78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	fa22 f303 	lsr.w	r3, r2, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f47f ae63 	bne.w	8006a50 <HAL_GPIO_Init+0x14>
  }
}
 8006d8a:	bf00      	nop
 8006d8c:	bf00      	nop
 8006d8e:	3724      	adds	r7, #36	; 0x24
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	58000400 	.word	0x58000400

08006d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	460b      	mov	r3, r1
 8006da6:	807b      	strh	r3, [r7, #2]
 8006da8:	4613      	mov	r3, r2
 8006daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006dac:	787b      	ldrb	r3, [r7, #1]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006db2:	887a      	ldrh	r2, [r7, #2]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006db8:	e003      	b.n	8006dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006dba:	887b      	ldrh	r3, [r7, #2]
 8006dbc:	041a      	lsls	r2, r3, #16
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	619a      	str	r2, [r3, #24]
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ddc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006de0:	88fb      	ldrh	r3, [r7, #6]
 8006de2:	4013      	ands	r3, r2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d008      	beq.n	8006dfa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dec:	88fb      	ldrh	r3, [r7, #6]
 8006dee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006df2:	88fb      	ldrh	r3, [r7, #6]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fb fb03 	bl	8002400 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006dfa:	bf00      	nop
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e07f      	b.n	8006f16 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fa fe86 	bl	8001b3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2224      	movs	r2, #36	; 0x24
 8006e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0201 	bic.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d107      	bne.n	8006e7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689a      	ldr	r2, [r3, #8]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e7a:	609a      	str	r2, [r3, #8]
 8006e7c:	e006      	b.n	8006e8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006e8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d104      	bne.n	8006e9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6859      	ldr	r1, [r3, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	4b1d      	ldr	r3, [pc, #116]	; (8006f20 <HAL_I2C_Init+0x11c>)
 8006eaa:	430b      	orrs	r3, r1
 8006eac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ebc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691a      	ldr	r2, [r3, #16]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	69d9      	ldr	r1, [r3, #28]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a1a      	ldr	r2, [r3, #32]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	02008000 	.word	0x02008000

08006f24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af02      	add	r7, sp, #8
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	607a      	str	r2, [r7, #4]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	460b      	mov	r3, r1
 8006f32:	817b      	strh	r3, [r7, #10]
 8006f34:	4613      	mov	r3, r2
 8006f36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	f040 80da 	bne.w	80070fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d101      	bne.n	8006f54 <HAL_I2C_Master_Transmit+0x30>
 8006f50:	2302      	movs	r3, #2
 8006f52:	e0d3      	b.n	80070fc <HAL_I2C_Master_Transmit+0x1d8>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006f5c:	f7fb fe68 	bl	8002c30 <HAL_GetTick>
 8006f60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	2319      	movs	r3, #25
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 f8f0 	bl	8007154 <I2C_WaitOnFlagUntilTimeout>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d001      	beq.n	8006f7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e0be      	b.n	80070fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2221      	movs	r2, #33	; 0x21
 8006f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2210      	movs	r2, #16
 8006f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	893a      	ldrh	r2, [r7, #8]
 8006f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	2bff      	cmp	r3, #255	; 0xff
 8006fae:	d90e      	bls.n	8006fce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	22ff      	movs	r2, #255	; 0xff
 8006fb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	8979      	ldrh	r1, [r7, #10]
 8006fbe:	4b51      	ldr	r3, [pc, #324]	; (8007104 <HAL_I2C_Master_Transmit+0x1e0>)
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 fa6c 	bl	80074a4 <I2C_TransferConfig>
 8006fcc:	e06c      	b.n	80070a8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	8979      	ldrh	r1, [r7, #10]
 8006fe0:	4b48      	ldr	r3, [pc, #288]	; (8007104 <HAL_I2C_Master_Transmit+0x1e0>)
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 fa5b 	bl	80074a4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006fee:	e05b      	b.n	80070a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	6a39      	ldr	r1, [r7, #32]
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 f8ed 	bl	80071d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e07b      	b.n	80070fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	781a      	ldrb	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800702c:	3b01      	subs	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	d034      	beq.n	80070a8 <HAL_I2C_Master_Transmit+0x184>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007042:	2b00      	cmp	r3, #0
 8007044:	d130      	bne.n	80070a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	2200      	movs	r2, #0
 800704e:	2180      	movs	r1, #128	; 0x80
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 f87f 	bl	8007154 <I2C_WaitOnFlagUntilTimeout>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e04d      	b.n	80070fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007064:	b29b      	uxth	r3, r3
 8007066:	2bff      	cmp	r3, #255	; 0xff
 8007068:	d90e      	bls.n	8007088 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	22ff      	movs	r2, #255	; 0xff
 800706e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007074:	b2da      	uxtb	r2, r3
 8007076:	8979      	ldrh	r1, [r7, #10]
 8007078:	2300      	movs	r3, #0
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 fa0f 	bl	80074a4 <I2C_TransferConfig>
 8007086:	e00f      	b.n	80070a8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800708c:	b29a      	uxth	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007096:	b2da      	uxtb	r2, r3
 8007098:	8979      	ldrh	r1, [r7, #10]
 800709a:	2300      	movs	r3, #0
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 f9fe 	bl	80074a4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d19e      	bne.n	8006ff0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	6a39      	ldr	r1, [r7, #32]
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 f8cc 	bl	8007254 <I2C_WaitOnSTOPFlagUntilTimeout>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e01a      	b.n	80070fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2220      	movs	r2, #32
 80070cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6859      	ldr	r1, [r3, #4]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	4b0b      	ldr	r3, [pc, #44]	; (8007108 <HAL_I2C_Master_Transmit+0x1e4>)
 80070da:	400b      	ands	r3, r1
 80070dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	e000      	b.n	80070fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80070fa:	2302      	movs	r3, #2
  }
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	80002000 	.word	0x80002000
 8007108:	fe00e800 	.word	0xfe00e800

0800710c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b02      	cmp	r3, #2
 8007120:	d103      	bne.n	800712a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2200      	movs	r2, #0
 8007128:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b01      	cmp	r3, #1
 8007136:	d007      	beq.n	8007148 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	699a      	ldr	r2, [r3, #24]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0201 	orr.w	r2, r2, #1
 8007146:	619a      	str	r2, [r3, #24]
  }
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	603b      	str	r3, [r7, #0]
 8007160:	4613      	mov	r3, r2
 8007162:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007164:	e022      	b.n	80071ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716c:	d01e      	beq.n	80071ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800716e:	f7fb fd5f 	bl	8002c30 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d302      	bcc.n	8007184 <I2C_WaitOnFlagUntilTimeout+0x30>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d113      	bne.n	80071ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007188:	f043 0220 	orr.w	r2, r3, #32
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2220      	movs	r2, #32
 8007194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e00f      	b.n	80071cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699a      	ldr	r2, [r3, #24]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	4013      	ands	r3, r2
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	bf0c      	ite	eq
 80071bc:	2301      	moveq	r3, #1
 80071be:	2300      	movne	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	461a      	mov	r2, r3
 80071c4:	79fb      	ldrb	r3, [r7, #7]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d0cd      	beq.n	8007166 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80071e0:	e02c      	b.n	800723c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	68b9      	ldr	r1, [r7, #8]
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 f870 	bl	80072cc <I2C_IsErrorOccurred>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e02a      	b.n	800724c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d01e      	beq.n	800723c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fe:	f7fb fd17 	bl	8002c30 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	429a      	cmp	r2, r3
 800720c:	d302      	bcc.n	8007214 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d113      	bne.n	800723c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007218:	f043 0220 	orr.w	r2, r3, #32
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2220      	movs	r2, #32
 8007224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e007      	b.n	800724c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b02      	cmp	r3, #2
 8007248:	d1cb      	bne.n	80071e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007260:	e028      	b.n	80072b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 f830 	bl	80072cc <I2C_IsErrorOccurred>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e026      	b.n	80072c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007276:	f7fb fcdb 	bl	8002c30 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	429a      	cmp	r2, r3
 8007284:	d302      	bcc.n	800728c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d113      	bne.n	80072b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007290:	f043 0220 	orr.w	r2, r3, #32
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2220      	movs	r2, #32
 800729c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e007      	b.n	80072c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b20      	cmp	r3, #32
 80072c0:	d1cf      	bne.n	8007262 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b08a      	sub	sp, #40	; 0x28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d8:	2300      	movs	r3, #0
 80072da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	f003 0310 	and.w	r3, r3, #16
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d075      	beq.n	80073e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2210      	movs	r2, #16
 80072fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007300:	e056      	b.n	80073b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007308:	d052      	beq.n	80073b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800730a:	f7fb fc91 	bl	8002c30 <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	429a      	cmp	r2, r3
 8007318:	d302      	bcc.n	8007320 <I2C_IsErrorOccurred+0x54>
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d147      	bne.n	80073b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800732a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007332:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800733e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007342:	d12e      	bne.n	80073a2 <I2C_IsErrorOccurred+0xd6>
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800734a:	d02a      	beq.n	80073a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800734c:	7cfb      	ldrb	r3, [r7, #19]
 800734e:	2b20      	cmp	r3, #32
 8007350:	d027      	beq.n	80073a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007360:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007362:	f7fb fc65 	bl	8002c30 <HAL_GetTick>
 8007366:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007368:	e01b      	b.n	80073a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800736a:	f7fb fc61 	bl	8002c30 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	2b19      	cmp	r3, #25
 8007376:	d914      	bls.n	80073a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737c:	f043 0220 	orr.w	r2, r3, #32
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	2b20      	cmp	r3, #32
 80073ae:	d1dc      	bne.n	800736a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	f003 0320 	and.w	r3, r3, #32
 80073ba:	2b20      	cmp	r3, #32
 80073bc:	d003      	beq.n	80073c6 <I2C_IsErrorOccurred+0xfa>
 80073be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d09d      	beq.n	8007302 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80073c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d103      	bne.n	80073d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2220      	movs	r2, #32
 80073d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	f043 0304 	orr.w	r3, r3, #4
 80073dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00b      	beq.n	800740e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	f043 0301 	orr.w	r3, r3, #1
 80073fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007406:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00b      	beq.n	8007430 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	f043 0308 	orr.w	r3, r3, #8
 800741e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007428:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00b      	beq.n	8007452 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	f043 0302 	orr.w	r3, r3, #2
 8007440:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800744a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007456:	2b00      	cmp	r3, #0
 8007458:	d01c      	beq.n	8007494 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f7ff fe56 	bl	800710c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6859      	ldr	r1, [r3, #4]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <I2C_IsErrorOccurred+0x1d4>)
 800746c:	400b      	ands	r3, r1
 800746e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	431a      	orrs	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2220      	movs	r2, #32
 8007480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007498:	4618      	mov	r0, r3
 800749a:	3728      	adds	r7, #40	; 0x28
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	fe00e800 	.word	0xfe00e800

080074a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	607b      	str	r3, [r7, #4]
 80074ae:	460b      	mov	r3, r1
 80074b0:	817b      	strh	r3, [r7, #10]
 80074b2:	4613      	mov	r3, r2
 80074b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074b6:	897b      	ldrh	r3, [r7, #10]
 80074b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80074bc:	7a7b      	ldrb	r3, [r7, #9]
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074c4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074d2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	0d5b      	lsrs	r3, r3, #21
 80074de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80074e2:	4b08      	ldr	r3, [pc, #32]	; (8007504 <I2C_TransferConfig+0x60>)
 80074e4:	430b      	orrs	r3, r1
 80074e6:	43db      	mvns	r3, r3
 80074e8:	ea02 0103 	and.w	r1, r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80074f6:	bf00      	nop
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	03ff63ff 	.word	0x03ff63ff

08007508 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b20      	cmp	r3, #32
 800751c:	d138      	bne.n	8007590 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007524:	2b01      	cmp	r3, #1
 8007526:	d101      	bne.n	800752c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007528:	2302      	movs	r3, #2
 800752a:	e032      	b.n	8007592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2224      	movs	r2, #36	; 0x24
 8007538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0201 	bic.w	r2, r2, #1
 800754a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800755a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6819      	ldr	r1, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0201 	orr.w	r2, r2, #1
 800757a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2220      	movs	r2, #32
 8007580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	e000      	b.n	8007592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007590:	2302      	movs	r3, #2
  }
}
 8007592:	4618      	mov	r0, r3
 8007594:	370c      	adds	r7, #12
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800759e:	b480      	push	{r7}
 80075a0:	b085      	sub	sp, #20
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b20      	cmp	r3, #32
 80075b2:	d139      	bne.n	8007628 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80075be:	2302      	movs	r3, #2
 80075c0:	e033      	b.n	800762a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2224      	movs	r2, #36	; 0x24
 80075ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0201 	bic.w	r2, r2, #1
 80075e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80075f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	021b      	lsls	r3, r3, #8
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0201 	orr.w	r2, r2, #1
 8007612:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2220      	movs	r2, #32
 8007618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	e000      	b.n	800762a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007628:	2302      	movs	r3, #2
  }
}
 800762a:	4618      	mov	r0, r3
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
	...

08007638 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007640:	4b29      	ldr	r3, [pc, #164]	; (80076e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f003 0307 	and.w	r3, r3, #7
 8007648:	2b06      	cmp	r3, #6
 800764a:	d00a      	beq.n	8007662 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800764c:	4b26      	ldr	r3, [pc, #152]	; (80076e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	429a      	cmp	r2, r3
 8007658:	d001      	beq.n	800765e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e040      	b.n	80076e0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	e03e      	b.n	80076e0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007662:	4b21      	ldr	r3, [pc, #132]	; (80076e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800766a:	491f      	ldr	r1, [pc, #124]	; (80076e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	4313      	orrs	r3, r2
 8007670:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007672:	f7fb fadd 	bl	8002c30 <HAL_GetTick>
 8007676:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007678:	e009      	b.n	800768e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800767a:	f7fb fad9 	bl	8002c30 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007688:	d901      	bls.n	800768e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e028      	b.n	80076e0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800768e:	4b16      	ldr	r3, [pc, #88]	; (80076e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800769a:	d1ee      	bne.n	800767a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b1e      	cmp	r3, #30
 80076a0:	d008      	beq.n	80076b4 <HAL_PWREx_ConfigSupply+0x7c>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b2e      	cmp	r3, #46	; 0x2e
 80076a6:	d005      	beq.n	80076b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b1d      	cmp	r3, #29
 80076ac:	d002      	beq.n	80076b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b2d      	cmp	r3, #45	; 0x2d
 80076b2:	d114      	bne.n	80076de <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80076b4:	f7fb fabc 	bl	8002c30 <HAL_GetTick>
 80076b8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80076ba:	e009      	b.n	80076d0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80076bc:	f7fb fab8 	bl	8002c30 <HAL_GetTick>
 80076c0:	4602      	mov	r2, r0
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076ca:	d901      	bls.n	80076d0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e007      	b.n	80076e0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80076d0:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <HAL_PWREx_ConfigSupply+0xb0>)
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076dc:	d1ee      	bne.n	80076bc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	58024800 	.word	0x58024800

080076ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08c      	sub	sp, #48	; 0x30
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e3f4      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 80b3 	beq.w	8007872 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800770c:	4b95      	ldr	r3, [pc, #596]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007714:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007716:	4b93      	ldr	r3, [pc, #588]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	2b10      	cmp	r3, #16
 8007720:	d007      	beq.n	8007732 <HAL_RCC_OscConfig+0x46>
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	2b18      	cmp	r3, #24
 8007726:	d112      	bne.n	800774e <HAL_RCC_OscConfig+0x62>
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	f003 0303 	and.w	r3, r3, #3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d10d      	bne.n	800774e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007732:	4b8c      	ldr	r3, [pc, #560]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 8098 	beq.w	8007870 <HAL_RCC_OscConfig+0x184>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	2b00      	cmp	r3, #0
 8007746:	f040 8093 	bne.w	8007870 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e3cc      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007756:	d106      	bne.n	8007766 <HAL_RCC_OscConfig+0x7a>
 8007758:	4b82      	ldr	r3, [pc, #520]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a81      	ldr	r2, [pc, #516]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 800775e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	e058      	b.n	8007818 <HAL_RCC_OscConfig+0x12c>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d112      	bne.n	8007794 <HAL_RCC_OscConfig+0xa8>
 800776e:	4b7d      	ldr	r3, [pc, #500]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a7c      	ldr	r2, [pc, #496]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 8007774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	4b7a      	ldr	r3, [pc, #488]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a79      	ldr	r2, [pc, #484]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 8007780:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	4b77      	ldr	r3, [pc, #476]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a76      	ldr	r2, [pc, #472]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 800778c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	e041      	b.n	8007818 <HAL_RCC_OscConfig+0x12c>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800779c:	d112      	bne.n	80077c4 <HAL_RCC_OscConfig+0xd8>
 800779e:	4b71      	ldr	r3, [pc, #452]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a70      	ldr	r2, [pc, #448]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80077a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	4b6e      	ldr	r3, [pc, #440]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a6d      	ldr	r2, [pc, #436]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80077b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	4b6b      	ldr	r3, [pc, #428]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a6a      	ldr	r2, [pc, #424]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80077bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	e029      	b.n	8007818 <HAL_RCC_OscConfig+0x12c>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80077cc:	d112      	bne.n	80077f4 <HAL_RCC_OscConfig+0x108>
 80077ce:	4b65      	ldr	r3, [pc, #404]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a64      	ldr	r2, [pc, #400]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80077d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	4b62      	ldr	r3, [pc, #392]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a61      	ldr	r2, [pc, #388]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80077e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	4b5f      	ldr	r3, [pc, #380]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a5e      	ldr	r2, [pc, #376]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80077ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	e011      	b.n	8007818 <HAL_RCC_OscConfig+0x12c>
 80077f4:	4b5b      	ldr	r3, [pc, #364]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a5a      	ldr	r2, [pc, #360]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80077fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077fe:	6013      	str	r3, [r2, #0]
 8007800:	4b58      	ldr	r3, [pc, #352]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a57      	ldr	r2, [pc, #348]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 8007806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	4b55      	ldr	r3, [pc, #340]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a54      	ldr	r2, [pc, #336]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 8007812:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d013      	beq.n	8007848 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007820:	f7fb fa06 	bl	8002c30 <HAL_GetTick>
 8007824:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007826:	e008      	b.n	800783a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007828:	f7fb fa02 	bl	8002c30 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b64      	cmp	r3, #100	; 0x64
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e356      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800783a:	4b4a      	ldr	r3, [pc, #296]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0f0      	beq.n	8007828 <HAL_RCC_OscConfig+0x13c>
 8007846:	e014      	b.n	8007872 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007848:	f7fb f9f2 	bl	8002c30 <HAL_GetTick>
 800784c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800784e:	e008      	b.n	8007862 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007850:	f7fb f9ee 	bl	8002c30 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b64      	cmp	r3, #100	; 0x64
 800785c:	d901      	bls.n	8007862 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e342      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007862:	4b40      	ldr	r3, [pc, #256]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1f0      	bne.n	8007850 <HAL_RCC_OscConfig+0x164>
 800786e:	e000      	b.n	8007872 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 808d 	beq.w	800799a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007880:	4b38      	ldr	r3, [pc, #224]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007888:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800788a:	4b36      	ldr	r3, [pc, #216]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 800788c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d007      	beq.n	80078a6 <HAL_RCC_OscConfig+0x1ba>
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	2b18      	cmp	r3, #24
 800789a:	d137      	bne.n	800790c <HAL_RCC_OscConfig+0x220>
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	f003 0303 	and.w	r3, r3, #3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d132      	bne.n	800790c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078a6:	4b2f      	ldr	r3, [pc, #188]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0304 	and.w	r3, r3, #4
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d005      	beq.n	80078be <HAL_RCC_OscConfig+0x1d2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e314      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80078be:	4b29      	ldr	r3, [pc, #164]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f023 0219 	bic.w	r2, r3, #25
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	4926      	ldr	r1, [pc, #152]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80078d0:	f7fb f9ae 	bl	8002c30 <HAL_GetTick>
 80078d4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078d6:	e008      	b.n	80078ea <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078d8:	f7fb f9aa 	bl	8002c30 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d901      	bls.n	80078ea <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e2fe      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078ea:	4b1e      	ldr	r3, [pc, #120]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d0f0      	beq.n	80078d8 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078f6:	4b1b      	ldr	r3, [pc, #108]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	061b      	lsls	r3, r3, #24
 8007904:	4917      	ldr	r1, [pc, #92]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 8007906:	4313      	orrs	r3, r2
 8007908:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800790a:	e046      	b.n	800799a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d029      	beq.n	8007968 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007914:	4b13      	ldr	r3, [pc, #76]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f023 0219 	bic.w	r2, r3, #25
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	4910      	ldr	r1, [pc, #64]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 8007922:	4313      	orrs	r3, r2
 8007924:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007926:	f7fb f983 	bl	8002c30 <HAL_GetTick>
 800792a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800792c:	e008      	b.n	8007940 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800792e:	f7fb f97f 	bl	8002c30 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	2b02      	cmp	r3, #2
 800793a:	d901      	bls.n	8007940 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e2d3      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007940:	4b08      	ldr	r3, [pc, #32]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0f0      	beq.n	800792e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800794c:	4b05      	ldr	r3, [pc, #20]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	061b      	lsls	r3, r3, #24
 800795a:	4902      	ldr	r1, [pc, #8]	; (8007964 <HAL_RCC_OscConfig+0x278>)
 800795c:	4313      	orrs	r3, r2
 800795e:	604b      	str	r3, [r1, #4]
 8007960:	e01b      	b.n	800799a <HAL_RCC_OscConfig+0x2ae>
 8007962:	bf00      	nop
 8007964:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007968:	4b97      	ldr	r3, [pc, #604]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a96      	ldr	r2, [pc, #600]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 800796e:	f023 0301 	bic.w	r3, r3, #1
 8007972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007974:	f7fb f95c 	bl	8002c30 <HAL_GetTick>
 8007978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800797a:	e008      	b.n	800798e <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800797c:	f7fb f958 	bl	8002c30 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	2b02      	cmp	r3, #2
 8007988:	d901      	bls.n	800798e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e2ac      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800798e:	4b8e      	ldr	r3, [pc, #568]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0304 	and.w	r3, r3, #4
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1f0      	bne.n	800797c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0310 	and.w	r3, r3, #16
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d06a      	beq.n	8007a7c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079a6:	4b88      	ldr	r3, [pc, #544]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80079b0:	4b85      	ldr	r3, [pc, #532]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d007      	beq.n	80079cc <HAL_RCC_OscConfig+0x2e0>
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	2b18      	cmp	r3, #24
 80079c0:	d11b      	bne.n	80079fa <HAL_RCC_OscConfig+0x30e>
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f003 0303 	and.w	r3, r3, #3
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d116      	bne.n	80079fa <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079cc:	4b7e      	ldr	r3, [pc, #504]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d005      	beq.n	80079e4 <HAL_RCC_OscConfig+0x2f8>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	2b80      	cmp	r3, #128	; 0x80
 80079de:	d001      	beq.n	80079e4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e281      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079e4:	4b78      	ldr	r3, [pc, #480]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a1b      	ldr	r3, [r3, #32]
 80079f0:	061b      	lsls	r3, r3, #24
 80079f2:	4975      	ldr	r1, [pc, #468]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079f8:	e040      	b.n	8007a7c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	69db      	ldr	r3, [r3, #28]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d023      	beq.n	8007a4a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007a02:	4b71      	ldr	r3, [pc, #452]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a70      	ldr	r2, [pc, #448]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0e:	f7fb f90f 	bl	8002c30 <HAL_GetTick>
 8007a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a14:	e008      	b.n	8007a28 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007a16:	f7fb f90b 	bl	8002c30 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d901      	bls.n	8007a28 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e25f      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a28:	4b67      	ldr	r3, [pc, #412]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0f0      	beq.n	8007a16 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a34:	4b64      	ldr	r3, [pc, #400]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	061b      	lsls	r3, r3, #24
 8007a42:	4961      	ldr	r1, [pc, #388]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60cb      	str	r3, [r1, #12]
 8007a48:	e018      	b.n	8007a7c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007a4a:	4b5f      	ldr	r3, [pc, #380]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a5e      	ldr	r2, [pc, #376]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a56:	f7fb f8eb 	bl	8002c30 <HAL_GetTick>
 8007a5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a5c:	e008      	b.n	8007a70 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007a5e:	f7fb f8e7 	bl	8002c30 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d901      	bls.n	8007a70 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e23b      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a70:	4b55      	ldr	r3, [pc, #340]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1f0      	bne.n	8007a5e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0308 	and.w	r3, r3, #8
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d036      	beq.n	8007af6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	695b      	ldr	r3, [r3, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d019      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a90:	4b4d      	ldr	r3, [pc, #308]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a94:	4a4c      	ldr	r2, [pc, #304]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007a96:	f043 0301 	orr.w	r3, r3, #1
 8007a9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a9c:	f7fb f8c8 	bl	8002c30 <HAL_GetTick>
 8007aa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007aa4:	f7fb f8c4 	bl	8002c30 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e218      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ab6:	4b44      	ldr	r3, [pc, #272]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0f0      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x3b8>
 8007ac2:	e018      	b.n	8007af6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ac4:	4b40      	ldr	r3, [pc, #256]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac8:	4a3f      	ldr	r2, [pc, #252]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007aca:	f023 0301 	bic.w	r3, r3, #1
 8007ace:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ad0:	f7fb f8ae 	bl	8002c30 <HAL_GetTick>
 8007ad4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ad8:	f7fb f8aa 	bl	8002c30 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e1fe      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007aea:	4b37      	ldr	r3, [pc, #220]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1f0      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d036      	beq.n	8007b70 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	699b      	ldr	r3, [r3, #24]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d019      	beq.n	8007b3e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b0a:	4b2f      	ldr	r3, [pc, #188]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a2e      	ldr	r2, [pc, #184]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007b10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b16:	f7fb f88b 	bl	8002c30 <HAL_GetTick>
 8007b1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b1c:	e008      	b.n	8007b30 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007b1e:	f7fb f887 	bl	8002c30 <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d901      	bls.n	8007b30 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e1db      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b30:	4b25      	ldr	r3, [pc, #148]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d0f0      	beq.n	8007b1e <HAL_RCC_OscConfig+0x432>
 8007b3c:	e018      	b.n	8007b70 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b3e:	4b22      	ldr	r3, [pc, #136]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a21      	ldr	r2, [pc, #132]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b4a:	f7fb f871 	bl	8002c30 <HAL_GetTick>
 8007b4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b50:	e008      	b.n	8007b64 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007b52:	f7fb f86d 	bl	8002c30 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d901      	bls.n	8007b64 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e1c1      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b64:	4b18      	ldr	r3, [pc, #96]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1f0      	bne.n	8007b52 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0304 	and.w	r3, r3, #4
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 80af 	beq.w	8007cdc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007b7e:	4b13      	ldr	r3, [pc, #76]	; (8007bcc <HAL_RCC_OscConfig+0x4e0>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a12      	ldr	r2, [pc, #72]	; (8007bcc <HAL_RCC_OscConfig+0x4e0>)
 8007b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b8a:	f7fb f851 	bl	8002c30 <HAL_GetTick>
 8007b8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b90:	e008      	b.n	8007ba4 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007b92:	f7fb f84d 	bl	8002c30 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b64      	cmp	r3, #100	; 0x64
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e1a1      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ba4:	4b09      	ldr	r3, [pc, #36]	; (8007bcc <HAL_RCC_OscConfig+0x4e0>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0f0      	beq.n	8007b92 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d10b      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x4e4>
 8007bb8:	4b03      	ldr	r3, [pc, #12]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bbc:	4a02      	ldr	r2, [pc, #8]	; (8007bc8 <HAL_RCC_OscConfig+0x4dc>)
 8007bbe:	f043 0301 	orr.w	r3, r3, #1
 8007bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8007bc4:	e05b      	b.n	8007c7e <HAL_RCC_OscConfig+0x592>
 8007bc6:	bf00      	nop
 8007bc8:	58024400 	.word	0x58024400
 8007bcc:	58024800 	.word	0x58024800
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d112      	bne.n	8007bfe <HAL_RCC_OscConfig+0x512>
 8007bd8:	4b9d      	ldr	r3, [pc, #628]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bdc:	4a9c      	ldr	r2, [pc, #624]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007bde:	f023 0301 	bic.w	r3, r3, #1
 8007be2:	6713      	str	r3, [r2, #112]	; 0x70
 8007be4:	4b9a      	ldr	r3, [pc, #616]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be8:	4a99      	ldr	r2, [pc, #612]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007bea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bee:	6713      	str	r3, [r2, #112]	; 0x70
 8007bf0:	4b97      	ldr	r3, [pc, #604]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf4:	4a96      	ldr	r2, [pc, #600]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007bf6:	f023 0304 	bic.w	r3, r3, #4
 8007bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8007bfc:	e03f      	b.n	8007c7e <HAL_RCC_OscConfig+0x592>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	2b05      	cmp	r3, #5
 8007c04:	d112      	bne.n	8007c2c <HAL_RCC_OscConfig+0x540>
 8007c06:	4b92      	ldr	r3, [pc, #584]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0a:	4a91      	ldr	r2, [pc, #580]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c0c:	f043 0304 	orr.w	r3, r3, #4
 8007c10:	6713      	str	r3, [r2, #112]	; 0x70
 8007c12:	4b8f      	ldr	r3, [pc, #572]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c16:	4a8e      	ldr	r2, [pc, #568]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c1e:	4b8c      	ldr	r3, [pc, #560]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c22:	4a8b      	ldr	r2, [pc, #556]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c24:	f043 0301 	orr.w	r3, r3, #1
 8007c28:	6713      	str	r3, [r2, #112]	; 0x70
 8007c2a:	e028      	b.n	8007c7e <HAL_RCC_OscConfig+0x592>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	2b85      	cmp	r3, #133	; 0x85
 8007c32:	d112      	bne.n	8007c5a <HAL_RCC_OscConfig+0x56e>
 8007c34:	4b86      	ldr	r3, [pc, #536]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c38:	4a85      	ldr	r2, [pc, #532]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c3a:	f043 0304 	orr.w	r3, r3, #4
 8007c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8007c40:	4b83      	ldr	r3, [pc, #524]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c44:	4a82      	ldr	r2, [pc, #520]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c4c:	4b80      	ldr	r3, [pc, #512]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c50:	4a7f      	ldr	r2, [pc, #508]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c52:	f043 0301 	orr.w	r3, r3, #1
 8007c56:	6713      	str	r3, [r2, #112]	; 0x70
 8007c58:	e011      	b.n	8007c7e <HAL_RCC_OscConfig+0x592>
 8007c5a:	4b7d      	ldr	r3, [pc, #500]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5e:	4a7c      	ldr	r2, [pc, #496]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c60:	f023 0301 	bic.w	r3, r3, #1
 8007c64:	6713      	str	r3, [r2, #112]	; 0x70
 8007c66:	4b7a      	ldr	r3, [pc, #488]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6a:	4a79      	ldr	r2, [pc, #484]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c6c:	f023 0304 	bic.w	r3, r3, #4
 8007c70:	6713      	str	r3, [r2, #112]	; 0x70
 8007c72:	4b77      	ldr	r3, [pc, #476]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c76:	4a76      	ldr	r2, [pc, #472]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d015      	beq.n	8007cb2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c86:	f7fa ffd3 	bl	8002c30 <HAL_GetTick>
 8007c8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c8c:	e00a      	b.n	8007ca4 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c8e:	f7fa ffcf 	bl	8002c30 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d901      	bls.n	8007ca4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e121      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ca4:	4b6a      	ldr	r3, [pc, #424]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d0ee      	beq.n	8007c8e <HAL_RCC_OscConfig+0x5a2>
 8007cb0:	e014      	b.n	8007cdc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cb2:	f7fa ffbd 	bl	8002c30 <HAL_GetTick>
 8007cb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007cb8:	e00a      	b.n	8007cd0 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cba:	f7fa ffb9 	bl	8002c30 <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d901      	bls.n	8007cd0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e10b      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007cd0:	4b5f      	ldr	r3, [pc, #380]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1ee      	bne.n	8007cba <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 8100 	beq.w	8007ee6 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007ce6:	4b5a      	ldr	r3, [pc, #360]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cee:	2b18      	cmp	r3, #24
 8007cf0:	f000 80bb 	beq.w	8007e6a <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	f040 8095 	bne.w	8007e28 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cfe:	4b54      	ldr	r3, [pc, #336]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a53      	ldr	r2, [pc, #332]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007d04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d0a:	f7fa ff91 	bl	8002c30 <HAL_GetTick>
 8007d0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d10:	e008      	b.n	8007d24 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d12:	f7fa ff8d 	bl	8002c30 <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d901      	bls.n	8007d24 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e0e1      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d24:	4b4a      	ldr	r3, [pc, #296]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1f0      	bne.n	8007d12 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d30:	4b47      	ldr	r3, [pc, #284]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d34:	4b47      	ldr	r3, [pc, #284]	; (8007e54 <HAL_RCC_OscConfig+0x768>)
 8007d36:	4013      	ands	r3, r2
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007d40:	0112      	lsls	r2, r2, #4
 8007d42:	430a      	orrs	r2, r1
 8007d44:	4942      	ldr	r1, [pc, #264]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	628b      	str	r3, [r1, #40]	; 0x28
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	025b      	lsls	r3, r3, #9
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	3b01      	subs	r3, #1
 8007d66:	041b      	lsls	r3, r3, #16
 8007d68:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d6c:	431a      	orrs	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d72:	3b01      	subs	r3, #1
 8007d74:	061b      	lsls	r3, r3, #24
 8007d76:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d7a:	4935      	ldr	r1, [pc, #212]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007d80:	4b33      	ldr	r3, [pc, #204]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	4a32      	ldr	r2, [pc, #200]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007d86:	f023 0301 	bic.w	r3, r3, #1
 8007d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007d8c:	4b30      	ldr	r3, [pc, #192]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d90:	4b31      	ldr	r3, [pc, #196]	; (8007e58 <HAL_RCC_OscConfig+0x76c>)
 8007d92:	4013      	ands	r3, r2
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007d98:	00d2      	lsls	r2, r2, #3
 8007d9a:	492d      	ldr	r1, [pc, #180]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007da0:	4b2b      	ldr	r3, [pc, #172]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	f023 020c 	bic.w	r2, r3, #12
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dac:	4928      	ldr	r1, [pc, #160]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007db2:	4b27      	ldr	r3, [pc, #156]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db6:	f023 0202 	bic.w	r2, r3, #2
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dbe:	4924      	ldr	r1, [pc, #144]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007dc4:	4b22      	ldr	r3, [pc, #136]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	4a21      	ldr	r2, [pc, #132]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dd0:	4b1f      	ldr	r3, [pc, #124]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd4:	4a1e      	ldr	r2, [pc, #120]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ddc:	4b1c      	ldr	r3, [pc, #112]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de0:	4a1b      	ldr	r2, [pc, #108]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007de2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007de6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007de8:	4b19      	ldr	r3, [pc, #100]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	4a18      	ldr	r2, [pc, #96]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007dee:	f043 0301 	orr.w	r3, r3, #1
 8007df2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007df4:	4b16      	ldr	r3, [pc, #88]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a15      	ldr	r2, [pc, #84]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e00:	f7fa ff16 	bl	8002c30 <HAL_GetTick>
 8007e04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e06:	e008      	b.n	8007e1a <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e08:	f7fa ff12 	bl	8002c30 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d901      	bls.n	8007e1a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e066      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e1a:	4b0d      	ldr	r3, [pc, #52]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d0f0      	beq.n	8007e08 <HAL_RCC_OscConfig+0x71c>
 8007e26:	e05e      	b.n	8007ee6 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e28:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a08      	ldr	r2, [pc, #32]	; (8007e50 <HAL_RCC_OscConfig+0x764>)
 8007e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e34:	f7fa fefc 	bl	8002c30 <HAL_GetTick>
 8007e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e3a:	e00f      	b.n	8007e5c <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e3c:	f7fa fef8 	bl	8002c30 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d908      	bls.n	8007e5c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e04c      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
 8007e4e:	bf00      	nop
 8007e50:	58024400 	.word	0x58024400
 8007e54:	fffffc0c 	.word	0xfffffc0c
 8007e58:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e5c:	4b24      	ldr	r3, [pc, #144]	; (8007ef0 <HAL_RCC_OscConfig+0x804>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e9      	bne.n	8007e3c <HAL_RCC_OscConfig+0x750>
 8007e68:	e03d      	b.n	8007ee6 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007e6a:	4b21      	ldr	r3, [pc, #132]	; (8007ef0 <HAL_RCC_OscConfig+0x804>)
 8007e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007e70:	4b1f      	ldr	r3, [pc, #124]	; (8007ef0 <HAL_RCC_OscConfig+0x804>)
 8007e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e74:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d031      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	f003 0203 	and.w	r2, r3, #3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d12a      	bne.n	8007ee2 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	091b      	lsrs	r3, r3, #4
 8007e90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d122      	bne.n	8007ee2 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d11a      	bne.n	8007ee2 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	0a5b      	lsrs	r3, r3, #9
 8007eb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d111      	bne.n	8007ee2 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	0c1b      	lsrs	r3, r3, #16
 8007ec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d108      	bne.n	8007ee2 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	0e1b      	lsrs	r3, r3, #24
 8007ed4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007edc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d001      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e000      	b.n	8007ee8 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3730      	adds	r7, #48	; 0x30
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	58024400 	.word	0x58024400

08007ef4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e19c      	b.n	8008242 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f08:	4b8a      	ldr	r3, [pc, #552]	; (8008134 <HAL_RCC_ClockConfig+0x240>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 030f 	and.w	r3, r3, #15
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d910      	bls.n	8007f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f16:	4b87      	ldr	r3, [pc, #540]	; (8008134 <HAL_RCC_ClockConfig+0x240>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f023 020f 	bic.w	r2, r3, #15
 8007f1e:	4985      	ldr	r1, [pc, #532]	; (8008134 <HAL_RCC_ClockConfig+0x240>)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f26:	4b83      	ldr	r3, [pc, #524]	; (8008134 <HAL_RCC_ClockConfig+0x240>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 030f 	and.w	r3, r3, #15
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d001      	beq.n	8007f38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e184      	b.n	8008242 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0304 	and.w	r3, r3, #4
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d010      	beq.n	8007f66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	4b7b      	ldr	r3, [pc, #492]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d908      	bls.n	8007f66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f54:	4b78      	ldr	r3, [pc, #480]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	4975      	ldr	r1, [pc, #468]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0308 	and.w	r3, r3, #8
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d010      	beq.n	8007f94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	695a      	ldr	r2, [r3, #20]
 8007f76:	4b70      	ldr	r3, [pc, #448]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d908      	bls.n	8007f94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f82:	4b6d      	ldr	r3, [pc, #436]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8007f84:	69db      	ldr	r3, [r3, #28]
 8007f86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	496a      	ldr	r1, [pc, #424]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0310 	and.w	r3, r3, #16
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d010      	beq.n	8007fc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	699a      	ldr	r2, [r3, #24]
 8007fa4:	4b64      	ldr	r3, [pc, #400]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8007fa6:	69db      	ldr	r3, [r3, #28]
 8007fa8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d908      	bls.n	8007fc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007fb0:	4b61      	ldr	r3, [pc, #388]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	495e      	ldr	r1, [pc, #376]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0320 	and.w	r3, r3, #32
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d010      	beq.n	8007ff0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69da      	ldr	r2, [r3, #28]
 8007fd2:	4b59      	ldr	r3, [pc, #356]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d908      	bls.n	8007ff0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007fde:	4b56      	ldr	r3, [pc, #344]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	4953      	ldr	r1, [pc, #332]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0302 	and.w	r3, r3, #2
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d010      	beq.n	800801e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	4b4d      	ldr	r3, [pc, #308]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	f003 030f 	and.w	r3, r3, #15
 8008008:	429a      	cmp	r2, r3
 800800a:	d908      	bls.n	800801e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800800c:	4b4a      	ldr	r3, [pc, #296]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	f023 020f 	bic.w	r2, r3, #15
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	4947      	ldr	r1, [pc, #284]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 800801a:	4313      	orrs	r3, r2
 800801c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d055      	beq.n	80080d6 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800802a:	4b43      	ldr	r3, [pc, #268]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	4940      	ldr	r1, [pc, #256]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8008038:	4313      	orrs	r3, r2
 800803a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	2b02      	cmp	r3, #2
 8008042:	d107      	bne.n	8008054 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008044:	4b3c      	ldr	r3, [pc, #240]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d121      	bne.n	8008094 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e0f6      	b.n	8008242 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	2b03      	cmp	r3, #3
 800805a:	d107      	bne.n	800806c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800805c:	4b36      	ldr	r3, [pc, #216]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d115      	bne.n	8008094 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e0ea      	b.n	8008242 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d107      	bne.n	8008084 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008074:	4b30      	ldr	r3, [pc, #192]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800807c:	2b00      	cmp	r3, #0
 800807e:	d109      	bne.n	8008094 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e0de      	b.n	8008242 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008084:	4b2c      	ldr	r3, [pc, #176]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e0d6      	b.n	8008242 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008094:	4b28      	ldr	r3, [pc, #160]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	f023 0207 	bic.w	r2, r3, #7
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	4925      	ldr	r1, [pc, #148]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080a6:	f7fa fdc3 	bl	8002c30 <HAL_GetTick>
 80080aa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ac:	e00a      	b.n	80080c4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080ae:	f7fa fdbf 	bl	8002c30 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080bc:	4293      	cmp	r3, r2
 80080be:	d901      	bls.n	80080c4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e0be      	b.n	8008242 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080c4:	4b1c      	ldr	r3, [pc, #112]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	00db      	lsls	r3, r3, #3
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d1eb      	bne.n	80080ae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d010      	beq.n	8008104 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68da      	ldr	r2, [r3, #12]
 80080e6:	4b14      	ldr	r3, [pc, #80]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	f003 030f 	and.w	r3, r3, #15
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d208      	bcs.n	8008104 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080f2:	4b11      	ldr	r3, [pc, #68]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	f023 020f 	bic.w	r2, r3, #15
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	490e      	ldr	r1, [pc, #56]	; (8008138 <HAL_RCC_ClockConfig+0x244>)
 8008100:	4313      	orrs	r3, r2
 8008102:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008104:	4b0b      	ldr	r3, [pc, #44]	; (8008134 <HAL_RCC_ClockConfig+0x240>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d214      	bcs.n	800813c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008112:	4b08      	ldr	r3, [pc, #32]	; (8008134 <HAL_RCC_ClockConfig+0x240>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f023 020f 	bic.w	r2, r3, #15
 800811a:	4906      	ldr	r1, [pc, #24]	; (8008134 <HAL_RCC_ClockConfig+0x240>)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	4313      	orrs	r3, r2
 8008120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008122:	4b04      	ldr	r3, [pc, #16]	; (8008134 <HAL_RCC_ClockConfig+0x240>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 030f 	and.w	r3, r3, #15
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	429a      	cmp	r2, r3
 800812e:	d005      	beq.n	800813c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e086      	b.n	8008242 <HAL_RCC_ClockConfig+0x34e>
 8008134:	52002000 	.word	0x52002000
 8008138:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0304 	and.w	r3, r3, #4
 8008144:	2b00      	cmp	r3, #0
 8008146:	d010      	beq.n	800816a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	691a      	ldr	r2, [r3, #16]
 800814c:	4b3f      	ldr	r3, [pc, #252]	; (800824c <HAL_RCC_ClockConfig+0x358>)
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008154:	429a      	cmp	r2, r3
 8008156:	d208      	bcs.n	800816a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008158:	4b3c      	ldr	r3, [pc, #240]	; (800824c <HAL_RCC_ClockConfig+0x358>)
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	4939      	ldr	r1, [pc, #228]	; (800824c <HAL_RCC_ClockConfig+0x358>)
 8008166:	4313      	orrs	r3, r2
 8008168:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0308 	and.w	r3, r3, #8
 8008172:	2b00      	cmp	r3, #0
 8008174:	d010      	beq.n	8008198 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	695a      	ldr	r2, [r3, #20]
 800817a:	4b34      	ldr	r3, [pc, #208]	; (800824c <HAL_RCC_ClockConfig+0x358>)
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008182:	429a      	cmp	r2, r3
 8008184:	d208      	bcs.n	8008198 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008186:	4b31      	ldr	r3, [pc, #196]	; (800824c <HAL_RCC_ClockConfig+0x358>)
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	492e      	ldr	r1, [pc, #184]	; (800824c <HAL_RCC_ClockConfig+0x358>)
 8008194:	4313      	orrs	r3, r2
 8008196:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0310 	and.w	r3, r3, #16
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d010      	beq.n	80081c6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	699a      	ldr	r2, [r3, #24]
 80081a8:	4b28      	ldr	r3, [pc, #160]	; (800824c <HAL_RCC_ClockConfig+0x358>)
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d208      	bcs.n	80081c6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80081b4:	4b25      	ldr	r3, [pc, #148]	; (800824c <HAL_RCC_ClockConfig+0x358>)
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	4922      	ldr	r1, [pc, #136]	; (800824c <HAL_RCC_ClockConfig+0x358>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 0320 	and.w	r3, r3, #32
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d010      	beq.n	80081f4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	69da      	ldr	r2, [r3, #28]
 80081d6:	4b1d      	ldr	r3, [pc, #116]	; (800824c <HAL_RCC_ClockConfig+0x358>)
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081de:	429a      	cmp	r2, r3
 80081e0:	d208      	bcs.n	80081f4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80081e2:	4b1a      	ldr	r3, [pc, #104]	; (800824c <HAL_RCC_ClockConfig+0x358>)
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	4917      	ldr	r1, [pc, #92]	; (800824c <HAL_RCC_ClockConfig+0x358>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80081f4:	f000 f834 	bl	8008260 <HAL_RCC_GetSysClockFreq>
 80081f8:	4602      	mov	r2, r0
 80081fa:	4b14      	ldr	r3, [pc, #80]	; (800824c <HAL_RCC_ClockConfig+0x358>)
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	0a1b      	lsrs	r3, r3, #8
 8008200:	f003 030f 	and.w	r3, r3, #15
 8008204:	4912      	ldr	r1, [pc, #72]	; (8008250 <HAL_RCC_ClockConfig+0x35c>)
 8008206:	5ccb      	ldrb	r3, [r1, r3]
 8008208:	f003 031f 	and.w	r3, r3, #31
 800820c:	fa22 f303 	lsr.w	r3, r2, r3
 8008210:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008212:	4b0e      	ldr	r3, [pc, #56]	; (800824c <HAL_RCC_ClockConfig+0x358>)
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	f003 030f 	and.w	r3, r3, #15
 800821a:	4a0d      	ldr	r2, [pc, #52]	; (8008250 <HAL_RCC_ClockConfig+0x35c>)
 800821c:	5cd3      	ldrb	r3, [r2, r3]
 800821e:	f003 031f 	and.w	r3, r3, #31
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	fa22 f303 	lsr.w	r3, r2, r3
 8008228:	4a0a      	ldr	r2, [pc, #40]	; (8008254 <HAL_RCC_ClockConfig+0x360>)
 800822a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800822c:	4a0a      	ldr	r2, [pc, #40]	; (8008258 <HAL_RCC_ClockConfig+0x364>)
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008232:	4b0a      	ldr	r3, [pc, #40]	; (800825c <HAL_RCC_ClockConfig+0x368>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f7fa fcb0 	bl	8002b9c <HAL_InitTick>
 800823c:	4603      	mov	r3, r0
 800823e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008240:	7bfb      	ldrb	r3, [r7, #15]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	58024400 	.word	0x58024400
 8008250:	0800ba18 	.word	0x0800ba18
 8008254:	24000008 	.word	0x24000008
 8008258:	24000004 	.word	0x24000004
 800825c:	2400000c 	.word	0x2400000c

08008260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008260:	b480      	push	{r7}
 8008262:	b089      	sub	sp, #36	; 0x24
 8008264:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008266:	4bb3      	ldr	r3, [pc, #716]	; (8008534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800826e:	2b18      	cmp	r3, #24
 8008270:	f200 8155 	bhi.w	800851e <HAL_RCC_GetSysClockFreq+0x2be>
 8008274:	a201      	add	r2, pc, #4	; (adr r2, 800827c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	080082e1 	.word	0x080082e1
 8008280:	0800851f 	.word	0x0800851f
 8008284:	0800851f 	.word	0x0800851f
 8008288:	0800851f 	.word	0x0800851f
 800828c:	0800851f 	.word	0x0800851f
 8008290:	0800851f 	.word	0x0800851f
 8008294:	0800851f 	.word	0x0800851f
 8008298:	0800851f 	.word	0x0800851f
 800829c:	08008307 	.word	0x08008307
 80082a0:	0800851f 	.word	0x0800851f
 80082a4:	0800851f 	.word	0x0800851f
 80082a8:	0800851f 	.word	0x0800851f
 80082ac:	0800851f 	.word	0x0800851f
 80082b0:	0800851f 	.word	0x0800851f
 80082b4:	0800851f 	.word	0x0800851f
 80082b8:	0800851f 	.word	0x0800851f
 80082bc:	0800830d 	.word	0x0800830d
 80082c0:	0800851f 	.word	0x0800851f
 80082c4:	0800851f 	.word	0x0800851f
 80082c8:	0800851f 	.word	0x0800851f
 80082cc:	0800851f 	.word	0x0800851f
 80082d0:	0800851f 	.word	0x0800851f
 80082d4:	0800851f 	.word	0x0800851f
 80082d8:	0800851f 	.word	0x0800851f
 80082dc:	08008313 	.word	0x08008313
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082e0:	4b94      	ldr	r3, [pc, #592]	; (8008534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0320 	and.w	r3, r3, #32
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d009      	beq.n	8008300 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082ec:	4b91      	ldr	r3, [pc, #580]	; (8008534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	08db      	lsrs	r3, r3, #3
 80082f2:	f003 0303 	and.w	r3, r3, #3
 80082f6:	4a90      	ldr	r2, [pc, #576]	; (8008538 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082f8:	fa22 f303 	lsr.w	r3, r2, r3
 80082fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80082fe:	e111      	b.n	8008524 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008300:	4b8d      	ldr	r3, [pc, #564]	; (8008538 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008302:	61bb      	str	r3, [r7, #24]
    break;
 8008304:	e10e      	b.n	8008524 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008306:	4b8d      	ldr	r3, [pc, #564]	; (800853c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008308:	61bb      	str	r3, [r7, #24]
    break;
 800830a:	e10b      	b.n	8008524 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800830c:	4b8c      	ldr	r3, [pc, #560]	; (8008540 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800830e:	61bb      	str	r3, [r7, #24]
    break;
 8008310:	e108      	b.n	8008524 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008312:	4b88      	ldr	r3, [pc, #544]	; (8008534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800831c:	4b85      	ldr	r3, [pc, #532]	; (8008534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800831e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008320:	091b      	lsrs	r3, r3, #4
 8008322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008326:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008328:	4b82      	ldr	r3, [pc, #520]	; (8008534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008332:	4b80      	ldr	r3, [pc, #512]	; (8008534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008336:	08db      	lsrs	r3, r3, #3
 8008338:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	fb02 f303 	mul.w	r3, r2, r3
 8008342:	ee07 3a90 	vmov	s15, r3
 8008346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 80e1 	beq.w	8008518 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2b02      	cmp	r3, #2
 800835a:	f000 8083 	beq.w	8008464 <HAL_RCC_GetSysClockFreq+0x204>
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2b02      	cmp	r3, #2
 8008362:	f200 80a1 	bhi.w	80084a8 <HAL_RCC_GetSysClockFreq+0x248>
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <HAL_RCC_GetSysClockFreq+0x114>
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d056      	beq.n	8008420 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008372:	e099      	b.n	80084a8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008374:	4b6f      	ldr	r3, [pc, #444]	; (8008534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0320 	and.w	r3, r3, #32
 800837c:	2b00      	cmp	r3, #0
 800837e:	d02d      	beq.n	80083dc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008380:	4b6c      	ldr	r3, [pc, #432]	; (8008534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	08db      	lsrs	r3, r3, #3
 8008386:	f003 0303 	and.w	r3, r3, #3
 800838a:	4a6b      	ldr	r2, [pc, #428]	; (8008538 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800838c:	fa22 f303 	lsr.w	r3, r2, r3
 8008390:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	ee07 3a90 	vmov	s15, r3
 8008398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	ee07 3a90 	vmov	s15, r3
 80083a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083aa:	4b62      	ldr	r3, [pc, #392]	; (8008534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80083be:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008544 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80083da:	e087      	b.n	80084ec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008548 <HAL_RCC_GetSysClockFreq+0x2e8>
 80083ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ee:	4b51      	ldr	r3, [pc, #324]	; (8008534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008402:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008544 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800840a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800840e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800841e:	e065      	b.n	80084ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800854c <HAL_RCC_GetSysClockFreq+0x2ec>
 800842e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008432:	4b40      	ldr	r3, [pc, #256]	; (8008534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008442:	ed97 6a02 	vldr	s12, [r7, #8]
 8008446:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008544 <HAL_RCC_GetSysClockFreq+0x2e4>
 800844a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800844e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800845a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800845e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008462:	e043      	b.n	80084ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	ee07 3a90 	vmov	s15, r3
 800846a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800846e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008550 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008476:	4b2f      	ldr	r3, [pc, #188]	; (8008534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800847e:	ee07 3a90 	vmov	s15, r3
 8008482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008486:	ed97 6a02 	vldr	s12, [r7, #8]
 800848a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008544 <HAL_RCC_GetSysClockFreq+0x2e4>
 800848e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800849a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800849e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084a6:	e021      	b.n	80084ec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	ee07 3a90 	vmov	s15, r3
 80084ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800854c <HAL_RCC_GetSysClockFreq+0x2ec>
 80084b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ba:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80084ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008544 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084ea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80084ec:	4b11      	ldr	r3, [pc, #68]	; (8008534 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f0:	0a5b      	lsrs	r3, r3, #9
 80084f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f6:	3301      	adds	r3, #1
 80084f8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	ee07 3a90 	vmov	s15, r3
 8008500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008504:	edd7 6a07 	vldr	s13, [r7, #28]
 8008508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800850c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008510:	ee17 3a90 	vmov	r3, s15
 8008514:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008516:	e005      	b.n	8008524 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	61bb      	str	r3, [r7, #24]
    break;
 800851c:	e002      	b.n	8008524 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800851e:	4b07      	ldr	r3, [pc, #28]	; (800853c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008520:	61bb      	str	r3, [r7, #24]
    break;
 8008522:	bf00      	nop
  }

  return sysclockfreq;
 8008524:	69bb      	ldr	r3, [r7, #24]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3724      	adds	r7, #36	; 0x24
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	58024400 	.word	0x58024400
 8008538:	03d09000 	.word	0x03d09000
 800853c:	003d0900 	.word	0x003d0900
 8008540:	007a1200 	.word	0x007a1200
 8008544:	46000000 	.word	0x46000000
 8008548:	4c742400 	.word	0x4c742400
 800854c:	4a742400 	.word	0x4a742400
 8008550:	4af42400 	.word	0x4af42400

08008554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800855a:	f7ff fe81 	bl	8008260 <HAL_RCC_GetSysClockFreq>
 800855e:	4602      	mov	r2, r0
 8008560:	4b10      	ldr	r3, [pc, #64]	; (80085a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008562:	699b      	ldr	r3, [r3, #24]
 8008564:	0a1b      	lsrs	r3, r3, #8
 8008566:	f003 030f 	and.w	r3, r3, #15
 800856a:	490f      	ldr	r1, [pc, #60]	; (80085a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800856c:	5ccb      	ldrb	r3, [r1, r3]
 800856e:	f003 031f 	and.w	r3, r3, #31
 8008572:	fa22 f303 	lsr.w	r3, r2, r3
 8008576:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8008578:	4b0a      	ldr	r3, [pc, #40]	; (80085a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	f003 030f 	and.w	r3, r3, #15
 8008580:	4a09      	ldr	r2, [pc, #36]	; (80085a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008582:	5cd3      	ldrb	r3, [r2, r3]
 8008584:	f003 031f 	and.w	r3, r3, #31
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	fa22 f303 	lsr.w	r3, r2, r3
 800858e:	4a07      	ldr	r2, [pc, #28]	; (80085ac <HAL_RCC_GetHCLKFreq+0x58>)
 8008590:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008592:	4a07      	ldr	r2, [pc, #28]	; (80085b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008598:	4b04      	ldr	r3, [pc, #16]	; (80085ac <HAL_RCC_GetHCLKFreq+0x58>)
 800859a:	681b      	ldr	r3, [r3, #0]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	58024400 	.word	0x58024400
 80085a8:	0800ba18 	.word	0x0800ba18
 80085ac:	24000008 	.word	0x24000008
 80085b0:	24000004 	.word	0x24000004

080085b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80085bc:	2300      	movs	r3, #0
 80085be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80085c0:	2300      	movs	r3, #0
 80085c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d03f      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085d8:	d02a      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80085da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085de:	d824      	bhi.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80085e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085e4:	d018      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80085e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085ea:	d81e      	bhi.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80085f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085f4:	d007      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80085f6:	e018      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085f8:	4b9f      	ldr	r3, [pc, #636]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80085fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fc:	4a9e      	ldr	r2, [pc, #632]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80085fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008604:	e015      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	3304      	adds	r3, #4
 800860a:	2102      	movs	r1, #2
 800860c:	4618      	mov	r0, r3
 800860e:	f001 ff1b 	bl	800a448 <RCCEx_PLL2_Config>
 8008612:	4603      	mov	r3, r0
 8008614:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008616:	e00c      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3324      	adds	r3, #36	; 0x24
 800861c:	2102      	movs	r1, #2
 800861e:	4618      	mov	r0, r3
 8008620:	f001 ffc4 	bl	800a5ac <RCCEx_PLL3_Config>
 8008624:	4603      	mov	r3, r0
 8008626:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008628:	e003      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	75fb      	strb	r3, [r7, #23]
      break;
 800862e:	e000      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008632:	7dfb      	ldrb	r3, [r7, #23]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d109      	bne.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008638:	4b8f      	ldr	r3, [pc, #572]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800863a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800863c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008644:	498c      	ldr	r1, [pc, #560]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008646:	4313      	orrs	r3, r2
 8008648:	650b      	str	r3, [r1, #80]	; 0x50
 800864a:	e001      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008658:	2b00      	cmp	r3, #0
 800865a:	d03d      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008660:	2b04      	cmp	r3, #4
 8008662:	d826      	bhi.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008664:	a201      	add	r2, pc, #4	; (adr r2, 800866c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866a:	bf00      	nop
 800866c:	08008681 	.word	0x08008681
 8008670:	0800868f 	.word	0x0800868f
 8008674:	080086a1 	.word	0x080086a1
 8008678:	080086b9 	.word	0x080086b9
 800867c:	080086b9 	.word	0x080086b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008680:	4b7d      	ldr	r3, [pc, #500]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	4a7c      	ldr	r2, [pc, #496]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800868a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800868c:	e015      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3304      	adds	r3, #4
 8008692:	2100      	movs	r1, #0
 8008694:	4618      	mov	r0, r3
 8008696:	f001 fed7 	bl	800a448 <RCCEx_PLL2_Config>
 800869a:	4603      	mov	r3, r0
 800869c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800869e:	e00c      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3324      	adds	r3, #36	; 0x24
 80086a4:	2100      	movs	r1, #0
 80086a6:	4618      	mov	r0, r3
 80086a8:	f001 ff80 	bl	800a5ac <RCCEx_PLL3_Config>
 80086ac:	4603      	mov	r3, r0
 80086ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086b0:	e003      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	75fb      	strb	r3, [r7, #23]
      break;
 80086b6:	e000      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80086b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086ba:	7dfb      	ldrb	r3, [r7, #23]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d109      	bne.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80086c0:	4b6d      	ldr	r3, [pc, #436]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80086c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c4:	f023 0207 	bic.w	r2, r3, #7
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086cc:	496a      	ldr	r1, [pc, #424]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	650b      	str	r3, [r1, #80]	; 0x50
 80086d2:	e001      	b.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
 80086d6:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d04a      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80086ec:	d031      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80086ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80086f2:	d82b      	bhi.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x198>
 80086f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086f8:	d02d      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80086fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086fe:	d825      	bhi.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008700:	2bc0      	cmp	r3, #192	; 0xc0
 8008702:	d02a      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008704:	2bc0      	cmp	r3, #192	; 0xc0
 8008706:	d821      	bhi.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008708:	2b80      	cmp	r3, #128	; 0x80
 800870a:	d016      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800870c:	2b80      	cmp	r3, #128	; 0x80
 800870e:	d81d      	bhi.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008714:	2b40      	cmp	r3, #64	; 0x40
 8008716:	d007      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8008718:	e018      	b.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800871a:	4b57      	ldr	r3, [pc, #348]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871e:	4a56      	ldr	r2, [pc, #344]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8008726:	e019      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	3304      	adds	r3, #4
 800872c:	2100      	movs	r1, #0
 800872e:	4618      	mov	r0, r3
 8008730:	f001 fe8a 	bl	800a448 <RCCEx_PLL2_Config>
 8008734:	4603      	mov	r3, r0
 8008736:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8008738:	e010      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	3324      	adds	r3, #36	; 0x24
 800873e:	2100      	movs	r1, #0
 8008740:	4618      	mov	r0, r3
 8008742:	f001 ff33 	bl	800a5ac <RCCEx_PLL3_Config>
 8008746:	4603      	mov	r3, r0
 8008748:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800874a:	e007      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	75fb      	strb	r3, [r7, #23]
      break;
 8008750:	e004      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8008752:	bf00      	nop
 8008754:	e002      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8008756:	bf00      	nop
 8008758:	e000      	b.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800875a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800875c:	7dfb      	ldrb	r3, [r7, #23]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d109      	bne.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008762:	4b45      	ldr	r3, [pc, #276]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008766:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800876e:	4942      	ldr	r1, [pc, #264]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008770:	4313      	orrs	r3, r2
 8008772:	650b      	str	r3, [r1, #80]	; 0x50
 8008774:	e001      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008782:	2b00      	cmp	r3, #0
 8008784:	d04f      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800878a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800878e:	d036      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8008790:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008794:	d830      	bhi.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8008796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800879a:	d032      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800879c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087a0:	d82a      	bhi.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80087a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80087a6:	d02e      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80087a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80087ac:	d824      	bhi.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80087ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087b2:	d018      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80087b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087b8:	d81e      	bhi.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80087be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087c2:	d007      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80087c4:	e018      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087c6:	4b2c      	ldr	r3, [pc, #176]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80087c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ca:	4a2b      	ldr	r2, [pc, #172]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80087cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80087d2:	e019      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3304      	adds	r3, #4
 80087d8:	2100      	movs	r1, #0
 80087da:	4618      	mov	r0, r3
 80087dc:	f001 fe34 	bl	800a448 <RCCEx_PLL2_Config>
 80087e0:	4603      	mov	r3, r0
 80087e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80087e4:	e010      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	3324      	adds	r3, #36	; 0x24
 80087ea:	2100      	movs	r1, #0
 80087ec:	4618      	mov	r0, r3
 80087ee:	f001 fedd 	bl	800a5ac <RCCEx_PLL3_Config>
 80087f2:	4603      	mov	r3, r0
 80087f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80087f6:	e007      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	75fb      	strb	r3, [r7, #23]
      break;
 80087fc:	e004      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80087fe:	bf00      	nop
 8008800:	e002      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8008802:	bf00      	nop
 8008804:	e000      	b.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8008806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008808:	7dfb      	ldrb	r3, [r7, #23]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800880e:	4b1a      	ldr	r3, [pc, #104]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008812:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800881a:	4917      	ldr	r1, [pc, #92]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800881c:	4313      	orrs	r3, r2
 800881e:	650b      	str	r3, [r1, #80]	; 0x50
 8008820:	e001      	b.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800882e:	2b00      	cmp	r3, #0
 8008830:	d034      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008836:	2b30      	cmp	r3, #48	; 0x30
 8008838:	d01c      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800883a:	2b30      	cmp	r3, #48	; 0x30
 800883c:	d817      	bhi.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800883e:	2b20      	cmp	r3, #32
 8008840:	d00c      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008842:	2b20      	cmp	r3, #32
 8008844:	d813      	bhi.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008846:	2b00      	cmp	r3, #0
 8008848:	d018      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800884a:	2b10      	cmp	r3, #16
 800884c:	d10f      	bne.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800884e:	4b0a      	ldr	r3, [pc, #40]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008852:	4a09      	ldr	r2, [pc, #36]	; (8008878 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008858:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800885a:	e010      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3304      	adds	r3, #4
 8008860:	2102      	movs	r1, #2
 8008862:	4618      	mov	r0, r3
 8008864:	f001 fdf0 	bl	800a448 <RCCEx_PLL2_Config>
 8008868:	4603      	mov	r3, r0
 800886a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800886c:	e007      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	75fb      	strb	r3, [r7, #23]
      break;
 8008872:	e004      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8008874:	bf00      	nop
 8008876:	e002      	b.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008878:	58024400 	.word	0x58024400
      break;
 800887c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800887e:	7dfb      	ldrb	r3, [r7, #23]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d109      	bne.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008884:	4b9b      	ldr	r3, [pc, #620]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008888:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008890:	4998      	ldr	r1, [pc, #608]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008892:	4313      	orrs	r3, r2
 8008894:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008896:	e001      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008898:	7dfb      	ldrb	r3, [r7, #23]
 800889a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d047      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088b0:	d030      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80088b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088b6:	d82a      	bhi.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80088b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80088bc:	d02c      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80088be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80088c2:	d824      	bhi.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80088c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088c8:	d018      	beq.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x348>
 80088ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088ce:	d81e      	bhi.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d003      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x328>
 80088d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d8:	d007      	beq.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x336>
 80088da:	e018      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088dc:	4b85      	ldr	r3, [pc, #532]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	4a84      	ldr	r2, [pc, #528]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80088e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088e8:	e017      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	3304      	adds	r3, #4
 80088ee:	2100      	movs	r1, #0
 80088f0:	4618      	mov	r0, r3
 80088f2:	f001 fda9 	bl	800a448 <RCCEx_PLL2_Config>
 80088f6:	4603      	mov	r3, r0
 80088f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80088fa:	e00e      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	3324      	adds	r3, #36	; 0x24
 8008900:	2100      	movs	r1, #0
 8008902:	4618      	mov	r0, r3
 8008904:	f001 fe52 	bl	800a5ac <RCCEx_PLL3_Config>
 8008908:	4603      	mov	r3, r0
 800890a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800890c:	e005      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	75fb      	strb	r3, [r7, #23]
      break;
 8008912:	e002      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8008914:	bf00      	nop
 8008916:	e000      	b.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8008918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800891a:	7dfb      	ldrb	r3, [r7, #23]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d109      	bne.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008920:	4b74      	ldr	r3, [pc, #464]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008924:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800892c:	4971      	ldr	r1, [pc, #452]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800892e:	4313      	orrs	r3, r2
 8008930:	650b      	str	r3, [r1, #80]	; 0x50
 8008932:	e001      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008934:	7dfb      	ldrb	r3, [r7, #23]
 8008936:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d049      	beq.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800894c:	d02e      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800894e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008952:	d828      	bhi.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008954:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008958:	d02a      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800895a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800895e:	d822      	bhi.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008960:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008964:	d026      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8008966:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800896a:	d81c      	bhi.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800896c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008970:	d010      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008972:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008976:	d816      	bhi.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008978:	2b00      	cmp	r3, #0
 800897a:	d01d      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800897c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008980:	d111      	bne.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	3304      	adds	r3, #4
 8008986:	2101      	movs	r1, #1
 8008988:	4618      	mov	r0, r3
 800898a:	f001 fd5d 	bl	800a448 <RCCEx_PLL2_Config>
 800898e:	4603      	mov	r3, r0
 8008990:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008992:	e012      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3324      	adds	r3, #36	; 0x24
 8008998:	2101      	movs	r1, #1
 800899a:	4618      	mov	r0, r3
 800899c:	f001 fe06 	bl	800a5ac <RCCEx_PLL3_Config>
 80089a0:	4603      	mov	r3, r0
 80089a2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80089a4:	e009      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	75fb      	strb	r3, [r7, #23]
      break;
 80089aa:	e006      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80089ac:	bf00      	nop
 80089ae:	e004      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80089b0:	bf00      	nop
 80089b2:	e002      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80089b4:	bf00      	nop
 80089b6:	e000      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80089b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089ba:	7dfb      	ldrb	r3, [r7, #23]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d109      	bne.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80089c0:	4b4c      	ldr	r3, [pc, #304]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80089c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089cc:	4949      	ldr	r1, [pc, #292]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	650b      	str	r3, [r1, #80]	; 0x50
 80089d2:	e001      	b.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d4:	7dfb      	ldrb	r3, [r7, #23]
 80089d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d053      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089ea:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80089ee:	d034      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80089f0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80089f4:	d82e      	bhi.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80089f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089fa:	d030      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80089fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a00:	d828      	bhi.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a06:	d02c      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a0c:	d822      	bhi.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008a0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a12:	d028      	beq.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8008a14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a18:	d81c      	bhi.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a1e:	d010      	beq.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8008a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a24:	d816      	bhi.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d01f      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8008a2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a2e:	d111      	bne.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	3304      	adds	r3, #4
 8008a34:	2101      	movs	r1, #1
 8008a36:	4618      	mov	r0, r3
 8008a38:	f001 fd06 	bl	800a448 <RCCEx_PLL2_Config>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008a40:	e014      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	3324      	adds	r3, #36	; 0x24
 8008a46:	2101      	movs	r1, #1
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f001 fdaf 	bl	800a5ac <RCCEx_PLL3_Config>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008a52:	e00b      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	75fb      	strb	r3, [r7, #23]
      break;
 8008a58:	e008      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008a5a:	bf00      	nop
 8008a5c:	e006      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008a5e:	bf00      	nop
 8008a60:	e004      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008a62:	bf00      	nop
 8008a64:	e002      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008a66:	bf00      	nop
 8008a68:	e000      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8008a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a6c:	7dfb      	ldrb	r3, [r7, #23]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10a      	bne.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008a72:	4b20      	ldr	r3, [pc, #128]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a80:	491c      	ldr	r1, [pc, #112]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	658b      	str	r3, [r1, #88]	; 0x58
 8008a86:	e001      	b.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d031      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa0:	d00e      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8008aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa6:	d814      	bhi.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d015      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008aac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ab0:	d10f      	bne.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab2:	4b10      	ldr	r3, [pc, #64]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab6:	4a0f      	ldr	r2, [pc, #60]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008abc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008abe:	e00c      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f001 fcbe 	bl	800a448 <RCCEx_PLL2_Config>
 8008acc:	4603      	mov	r3, r0
 8008ace:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008ad0:	e003      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ad6:	e000      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8008ad8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ada:	7dfb      	ldrb	r3, [r7, #23]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10b      	bne.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008ae0:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aec:	4901      	ldr	r1, [pc, #4]	; (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	650b      	str	r3, [r1, #80]	; 0x50
 8008af2:	e003      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x548>
 8008af4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
 8008afa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d032      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d81b      	bhi.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008b10:	a201      	add	r2, pc, #4	; (adr r2, 8008b18 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8008b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b16:	bf00      	nop
 8008b18:	08008b4f 	.word	0x08008b4f
 8008b1c:	08008b29 	.word	0x08008b29
 8008b20:	08008b37 	.word	0x08008b37
 8008b24:	08008b4f 	.word	0x08008b4f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b28:	4bb2      	ldr	r3, [pc, #712]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2c:	4ab1      	ldr	r2, [pc, #708]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008b34:	e00c      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	2102      	movs	r1, #2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f001 fc83 	bl	800a448 <RCCEx_PLL2_Config>
 8008b42:	4603      	mov	r3, r0
 8008b44:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008b46:	e003      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8008b4c:	e000      	b.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d109      	bne.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008b56:	4ba7      	ldr	r3, [pc, #668]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b5a:	f023 0203 	bic.w	r2, r3, #3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b62:	49a4      	ldr	r1, [pc, #656]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008b64:	4313      	orrs	r3, r2
 8008b66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008b68:	e001      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6a:	7dfb      	ldrb	r3, [r7, #23]
 8008b6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f000 8086 	beq.w	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b7c:	4b9e      	ldr	r3, [pc, #632]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a9d      	ldr	r2, [pc, #628]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b88:	f7fa f852 	bl	8002c30 <HAL_GetTick>
 8008b8c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b8e:	e009      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b90:	f7fa f84e 	bl	8002c30 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	2b64      	cmp	r3, #100	; 0x64
 8008b9c:	d902      	bls.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	75fb      	strb	r3, [r7, #23]
        break;
 8008ba2:	e005      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ba4:	4b94      	ldr	r3, [pc, #592]	; (8008df8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d0ef      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8008bb0:	7dfb      	ldrb	r3, [r7, #23]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d166      	bne.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008bb6:	4b8f      	ldr	r3, [pc, #572]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bc0:	4053      	eors	r3, r2
 8008bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d013      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008bca:	4b8a      	ldr	r3, [pc, #552]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bd2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008bd4:	4b87      	ldr	r3, [pc, #540]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd8:	4a86      	ldr	r2, [pc, #536]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bde:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008be0:	4b84      	ldr	r3, [pc, #528]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be4:	4a83      	ldr	r2, [pc, #524]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008bec:	4a81      	ldr	r2, [pc, #516]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bfc:	d115      	bne.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bfe:	f7fa f817 	bl	8002c30 <HAL_GetTick>
 8008c02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c04:	e00b      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c06:	f7fa f813 	bl	8002c30 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d902      	bls.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	75fb      	strb	r3, [r7, #23]
            break;
 8008c1c:	e005      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c1e:	4b75      	ldr	r3, [pc, #468]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c22:	f003 0302 	and.w	r3, r3, #2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d0ed      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d126      	bne.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c3e:	d10d      	bne.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8008c40:	4b6c      	ldr	r3, [pc, #432]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c4e:	0919      	lsrs	r1, r3, #4
 8008c50:	4b6a      	ldr	r3, [pc, #424]	; (8008dfc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008c52:	400b      	ands	r3, r1
 8008c54:	4967      	ldr	r1, [pc, #412]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c56:	4313      	orrs	r3, r2
 8008c58:	610b      	str	r3, [r1, #16]
 8008c5a:	e005      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8008c5c:	4b65      	ldr	r3, [pc, #404]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	4a64      	ldr	r2, [pc, #400]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008c66:	6113      	str	r3, [r2, #16]
 8008c68:	4b62      	ldr	r3, [pc, #392]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c76:	495f      	ldr	r1, [pc, #380]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	670b      	str	r3, [r1, #112]	; 0x70
 8008c7c:	e004      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c7e:	7dfb      	ldrb	r3, [r7, #23]
 8008c80:	75bb      	strb	r3, [r7, #22]
 8008c82:	e001      	b.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
 8008c86:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d07f      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c9a:	2b28      	cmp	r3, #40	; 0x28
 8008c9c:	d866      	bhi.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8008c9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8008ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca4:	08008d73 	.word	0x08008d73
 8008ca8:	08008d6d 	.word	0x08008d6d
 8008cac:	08008d6d 	.word	0x08008d6d
 8008cb0:	08008d6d 	.word	0x08008d6d
 8008cb4:	08008d6d 	.word	0x08008d6d
 8008cb8:	08008d6d 	.word	0x08008d6d
 8008cbc:	08008d6d 	.word	0x08008d6d
 8008cc0:	08008d6d 	.word	0x08008d6d
 8008cc4:	08008d49 	.word	0x08008d49
 8008cc8:	08008d6d 	.word	0x08008d6d
 8008ccc:	08008d6d 	.word	0x08008d6d
 8008cd0:	08008d6d 	.word	0x08008d6d
 8008cd4:	08008d6d 	.word	0x08008d6d
 8008cd8:	08008d6d 	.word	0x08008d6d
 8008cdc:	08008d6d 	.word	0x08008d6d
 8008ce0:	08008d6d 	.word	0x08008d6d
 8008ce4:	08008d5b 	.word	0x08008d5b
 8008ce8:	08008d6d 	.word	0x08008d6d
 8008cec:	08008d6d 	.word	0x08008d6d
 8008cf0:	08008d6d 	.word	0x08008d6d
 8008cf4:	08008d6d 	.word	0x08008d6d
 8008cf8:	08008d6d 	.word	0x08008d6d
 8008cfc:	08008d6d 	.word	0x08008d6d
 8008d00:	08008d6d 	.word	0x08008d6d
 8008d04:	08008d73 	.word	0x08008d73
 8008d08:	08008d6d 	.word	0x08008d6d
 8008d0c:	08008d6d 	.word	0x08008d6d
 8008d10:	08008d6d 	.word	0x08008d6d
 8008d14:	08008d6d 	.word	0x08008d6d
 8008d18:	08008d6d 	.word	0x08008d6d
 8008d1c:	08008d6d 	.word	0x08008d6d
 8008d20:	08008d6d 	.word	0x08008d6d
 8008d24:	08008d73 	.word	0x08008d73
 8008d28:	08008d6d 	.word	0x08008d6d
 8008d2c:	08008d6d 	.word	0x08008d6d
 8008d30:	08008d6d 	.word	0x08008d6d
 8008d34:	08008d6d 	.word	0x08008d6d
 8008d38:	08008d6d 	.word	0x08008d6d
 8008d3c:	08008d6d 	.word	0x08008d6d
 8008d40:	08008d6d 	.word	0x08008d6d
 8008d44:	08008d73 	.word	0x08008d73
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	2101      	movs	r1, #1
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f001 fb7a 	bl	800a448 <RCCEx_PLL2_Config>
 8008d54:	4603      	mov	r3, r0
 8008d56:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008d58:	e00c      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3324      	adds	r3, #36	; 0x24
 8008d5e:	2101      	movs	r1, #1
 8008d60:	4618      	mov	r0, r3
 8008d62:	f001 fc23 	bl	800a5ac <RCCEx_PLL3_Config>
 8008d66:	4603      	mov	r3, r0
 8008d68:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008d6a:	e003      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d70:	e000      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8008d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10a      	bne.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008d7a:	4b1e      	ldr	r3, [pc, #120]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d88:	491a      	ldr	r1, [pc, #104]	; (8008df4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	654b      	str	r3, [r1, #84]	; 0x54
 8008d8e:	e001      	b.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d90:	7dfb      	ldrb	r3, [r7, #23]
 8008d92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0302 	and.w	r3, r3, #2
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d03f      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008da4:	2b05      	cmp	r3, #5
 8008da6:	d821      	bhi.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x838>
 8008da8:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dae:	bf00      	nop
 8008db0:	08008e01 	.word	0x08008e01
 8008db4:	08008dc9 	.word	0x08008dc9
 8008db8:	08008ddb 	.word	0x08008ddb
 8008dbc:	08008e01 	.word	0x08008e01
 8008dc0:	08008e01 	.word	0x08008e01
 8008dc4:	08008e01 	.word	0x08008e01
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	3304      	adds	r3, #4
 8008dcc:	2101      	movs	r1, #1
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f001 fb3a 	bl	800a448 <RCCEx_PLL2_Config>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008dd8:	e013      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	3324      	adds	r3, #36	; 0x24
 8008dde:	2101      	movs	r1, #1
 8008de0:	4618      	mov	r0, r3
 8008de2:	f001 fbe3 	bl	800a5ac <RCCEx_PLL3_Config>
 8008de6:	4603      	mov	r3, r0
 8008de8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008dea:	e00a      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	75fb      	strb	r3, [r7, #23]
      break;
 8008df0:	e007      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8008df2:	bf00      	nop
 8008df4:	58024400 	.word	0x58024400
 8008df8:	58024800 	.word	0x58024800
 8008dfc:	00ffffcf 	.word	0x00ffffcf
      break;
 8008e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e02:	7dfb      	ldrb	r3, [r7, #23]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d109      	bne.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008e08:	4b9f      	ldr	r3, [pc, #636]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e0c:	f023 0207 	bic.w	r2, r3, #7
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e14:	499c      	ldr	r1, [pc, #624]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008e16:	4313      	orrs	r3, r2
 8008e18:	654b      	str	r3, [r1, #84]	; 0x54
 8008e1a:	e001      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d039      	beq.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e32:	2b05      	cmp	r3, #5
 8008e34:	d820      	bhi.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8008e36:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008e7f 	.word	0x08008e7f
 8008e40:	08008e55 	.word	0x08008e55
 8008e44:	08008e67 	.word	0x08008e67
 8008e48:	08008e7f 	.word	0x08008e7f
 8008e4c:	08008e7f 	.word	0x08008e7f
 8008e50:	08008e7f 	.word	0x08008e7f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3304      	adds	r3, #4
 8008e58:	2101      	movs	r1, #1
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f001 faf4 	bl	800a448 <RCCEx_PLL2_Config>
 8008e60:	4603      	mov	r3, r0
 8008e62:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008e64:	e00c      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	3324      	adds	r3, #36	; 0x24
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f001 fb9d 	bl	800a5ac <RCCEx_PLL3_Config>
 8008e72:	4603      	mov	r3, r0
 8008e74:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008e76:	e003      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e7c:	e000      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8008e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e80:	7dfb      	ldrb	r3, [r7, #23]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10a      	bne.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e86:	4b80      	ldr	r3, [pc, #512]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8a:	f023 0207 	bic.w	r2, r3, #7
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e94:	497c      	ldr	r1, [pc, #496]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	658b      	str	r3, [r1, #88]	; 0x58
 8008e9a:	e001      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0320 	and.w	r3, r3, #32
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d04b      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eb6:	d02e      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8008eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ebc:	d828      	bhi.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ec2:	d02a      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ec8:	d822      	bhi.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008eca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ece:	d026      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008ed0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ed4:	d81c      	bhi.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eda:	d010      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8008edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ee0:	d816      	bhi.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d01d      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008ee6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eea:	d111      	bne.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f001 faa8 	bl	800a448 <RCCEx_PLL2_Config>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008efc:	e012      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	3324      	adds	r3, #36	; 0x24
 8008f02:	2102      	movs	r1, #2
 8008f04:	4618      	mov	r0, r3
 8008f06:	f001 fb51 	bl	800a5ac <RCCEx_PLL3_Config>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008f0e:	e009      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	75fb      	strb	r3, [r7, #23]
      break;
 8008f14:	e006      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008f16:	bf00      	nop
 8008f18:	e004      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008f1a:	bf00      	nop
 8008f1c:	e002      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008f1e:	bf00      	nop
 8008f20:	e000      	b.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f24:	7dfb      	ldrb	r3, [r7, #23]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10a      	bne.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f2a:	4b57      	ldr	r3, [pc, #348]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f38:	4953      	ldr	r1, [pc, #332]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	654b      	str	r3, [r1, #84]	; 0x54
 8008f3e:	e001      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d04b      	beq.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008f5a:	d02e      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8008f5c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008f60:	d828      	bhi.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f66:	d02a      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f6c:	d822      	bhi.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008f6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f72:	d026      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008f74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f78:	d81c      	bhi.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f7e:	d010      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8008f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f84:	d816      	bhi.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d01d      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f8e:	d111      	bne.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	3304      	adds	r3, #4
 8008f94:	2100      	movs	r1, #0
 8008f96:	4618      	mov	r0, r3
 8008f98:	f001 fa56 	bl	800a448 <RCCEx_PLL2_Config>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008fa0:	e012      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	3324      	adds	r3, #36	; 0x24
 8008fa6:	2102      	movs	r1, #2
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f001 faff 	bl	800a5ac <RCCEx_PLL3_Config>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008fb2:	e009      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8008fb8:	e006      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008fba:	bf00      	nop
 8008fbc:	e004      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008fbe:	bf00      	nop
 8008fc0:	e002      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008fc2:	bf00      	nop
 8008fc4:	e000      	b.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008fce:	4b2e      	ldr	r3, [pc, #184]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008fdc:	492a      	ldr	r1, [pc, #168]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	658b      	str	r3, [r1, #88]	; 0x58
 8008fe2:	e001      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe4:	7dfb      	ldrb	r3, [r7, #23]
 8008fe6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d04d      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008ffa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ffe:	d02e      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009000:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009004:	d828      	bhi.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800900a:	d02a      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800900c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009010:	d822      	bhi.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009012:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009016:	d026      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009018:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800901c:	d81c      	bhi.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800901e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009022:	d010      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009028:	d816      	bhi.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d01d      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800902e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009032:	d111      	bne.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3304      	adds	r3, #4
 8009038:	2100      	movs	r1, #0
 800903a:	4618      	mov	r0, r3
 800903c:	f001 fa04 	bl	800a448 <RCCEx_PLL2_Config>
 8009040:	4603      	mov	r3, r0
 8009042:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009044:	e012      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	3324      	adds	r3, #36	; 0x24
 800904a:	2102      	movs	r1, #2
 800904c:	4618      	mov	r0, r3
 800904e:	f001 faad 	bl	800a5ac <RCCEx_PLL3_Config>
 8009052:	4603      	mov	r3, r0
 8009054:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009056:	e009      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	75fb      	strb	r3, [r7, #23]
      break;
 800905c:	e006      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800905e:	bf00      	nop
 8009060:	e004      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009062:	bf00      	nop
 8009064:	e002      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009066:	bf00      	nop
 8009068:	e000      	b.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800906a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10c      	bne.n	800908c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009072:	4b05      	ldr	r3, [pc, #20]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009080:	4901      	ldr	r1, [pc, #4]	; (8009088 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009082:	4313      	orrs	r3, r2
 8009084:	658b      	str	r3, [r1, #88]	; 0x58
 8009086:	e003      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009088:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800908c:	7dfb      	ldrb	r3, [r7, #23]
 800908e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0308 	and.w	r3, r3, #8
 8009098:	2b00      	cmp	r3, #0
 800909a:	d01a      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090a6:	d10a      	bne.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	3324      	adds	r3, #36	; 0x24
 80090ac:	2102      	movs	r1, #2
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 fa7c 	bl	800a5ac <RCCEx_PLL3_Config>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80090be:	4b8c      	ldr	r3, [pc, #560]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80090c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090cc:	4988      	ldr	r1, [pc, #544]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0310 	and.w	r3, r3, #16
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d01a      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090e8:	d10a      	bne.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	3324      	adds	r3, #36	; 0x24
 80090ee:	2102      	movs	r1, #2
 80090f0:	4618      	mov	r0, r3
 80090f2:	f001 fa5b 	bl	800a5ac <RCCEx_PLL3_Config>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009100:	4b7b      	ldr	r3, [pc, #492]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009104:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800910e:	4978      	ldr	r1, [pc, #480]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009110:	4313      	orrs	r3, r2
 8009112:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d034      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800912a:	d01d      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800912c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009130:	d817      	bhi.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8009136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800913a:	d009      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800913c:	e011      	b.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	3304      	adds	r3, #4
 8009142:	2100      	movs	r1, #0
 8009144:	4618      	mov	r0, r3
 8009146:	f001 f97f 	bl	800a448 <RCCEx_PLL2_Config>
 800914a:	4603      	mov	r3, r0
 800914c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800914e:	e00c      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3324      	adds	r3, #36	; 0x24
 8009154:	2102      	movs	r1, #2
 8009156:	4618      	mov	r0, r3
 8009158:	f001 fa28 	bl	800a5ac <RCCEx_PLL3_Config>
 800915c:	4603      	mov	r3, r0
 800915e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009160:	e003      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	75fb      	strb	r3, [r7, #23]
      break;
 8009166:	e000      	b.n	800916a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8009168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009170:	4b5f      	ldr	r3, [pc, #380]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009174:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800917e:	495c      	ldr	r1, [pc, #368]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009180:	4313      	orrs	r3, r2
 8009182:	658b      	str	r3, [r1, #88]	; 0x58
 8009184:	e001      	b.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d033      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800919c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091a0:	d01c      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80091a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091a6:	d816      	bhi.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80091a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091ac:	d003      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80091ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091b2:	d007      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80091b4:	e00f      	b.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091b6:	4b4e      	ldr	r3, [pc, #312]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80091b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ba:	4a4d      	ldr	r2, [pc, #308]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80091bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80091c2:	e00c      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3324      	adds	r3, #36	; 0x24
 80091c8:	2101      	movs	r1, #1
 80091ca:	4618      	mov	r0, r3
 80091cc:	f001 f9ee 	bl	800a5ac <RCCEx_PLL3_Config>
 80091d0:	4603      	mov	r3, r0
 80091d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80091d4:	e003      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	75fb      	strb	r3, [r7, #23]
      break;
 80091da:	e000      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80091dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091de:	7dfb      	ldrb	r3, [r7, #23]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10a      	bne.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80091e4:	4b42      	ldr	r3, [pc, #264]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80091e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091f2:	493f      	ldr	r1, [pc, #252]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	654b      	str	r3, [r1, #84]	; 0x54
 80091f8:	e001      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
 80091fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d029      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8009212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009216:	d007      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009218:	e00f      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800921a:	4b35      	ldr	r3, [pc, #212]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800921c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921e:	4a34      	ldr	r2, [pc, #208]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009224:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009226:	e00b      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	3304      	adds	r3, #4
 800922c:	2102      	movs	r1, #2
 800922e:	4618      	mov	r0, r3
 8009230:	f001 f90a 	bl	800a448 <RCCEx_PLL2_Config>
 8009234:	4603      	mov	r3, r0
 8009236:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009238:	e002      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	75fb      	strb	r3, [r7, #23]
      break;
 800923e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009240:	7dfb      	ldrb	r3, [r7, #23]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d109      	bne.n	800925a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009246:	4b2a      	ldr	r3, [pc, #168]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800924a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009252:	4927      	ldr	r1, [pc, #156]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8009254:	4313      	orrs	r3, r2
 8009256:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009258:	e001      	b.n	800925e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800925a:	7dfb      	ldrb	r3, [r7, #23]
 800925c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	3324      	adds	r3, #36	; 0x24
 800926e:	2102      	movs	r1, #2
 8009270:	4618      	mov	r0, r3
 8009272:	f001 f99b 	bl	800a5ac <RCCEx_PLL3_Config>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d035      	beq.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009296:	d017      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800929c:	d811      	bhi.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800929e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092a2:	d013      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80092a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092a8:	d80b      	bhi.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d010      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80092ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b2:	d106      	bne.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092b4:	4b0e      	ldr	r3, [pc, #56]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	4a0d      	ldr	r2, [pc, #52]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80092ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80092c0:	e007      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	75fb      	strb	r3, [r7, #23]
      break;
 80092c6:	e004      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80092c8:	bf00      	nop
 80092ca:	e002      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80092cc:	bf00      	nop
 80092ce:	e000      	b.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80092d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10d      	bne.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80092d8:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80092da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092e6:	4902      	ldr	r1, [pc, #8]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	654b      	str	r3, [r1, #84]	; 0x54
 80092ec:	e004      	b.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80092ee:	bf00      	nop
 80092f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
 80092f6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009300:	2b00      	cmp	r3, #0
 8009302:	d008      	beq.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009304:	4b30      	ldr	r3, [pc, #192]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009308:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009310:	492d      	ldr	r1, [pc, #180]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009312:	4313      	orrs	r3, r2
 8009314:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d008      	beq.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009322:	4b29      	ldr	r3, [pc, #164]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009326:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800932e:	4926      	ldr	r1, [pc, #152]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009330:	4313      	orrs	r3, r2
 8009332:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800933c:	2b00      	cmp	r3, #0
 800933e:	d008      	beq.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009340:	4b21      	ldr	r3, [pc, #132]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009344:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800934c:	491e      	ldr	r1, [pc, #120]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800934e:	4313      	orrs	r3, r2
 8009350:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00d      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800935e:	4b1a      	ldr	r3, [pc, #104]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	4a19      	ldr	r2, [pc, #100]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009364:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009368:	6113      	str	r3, [r2, #16]
 800936a:	4b17      	ldr	r3, [pc, #92]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800936c:	691a      	ldr	r2, [r3, #16]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009374:	4914      	ldr	r1, [pc, #80]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009376:	4313      	orrs	r3, r2
 8009378:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	da08      	bge.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009382:	4b11      	ldr	r3, [pc, #68]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009386:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800938e:	490e      	ldr	r1, [pc, #56]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8009390:	4313      	orrs	r3, r2
 8009392:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d009      	beq.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80093a0:	4b09      	ldr	r3, [pc, #36]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80093a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ae:	4906      	ldr	r1, [pc, #24]	; (80093c8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80093b0:	4313      	orrs	r3, r2
 80093b2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80093b4:	7dbb      	ldrb	r3, [r7, #22]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	e000      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	58024400 	.word	0x58024400

080093cc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b090      	sub	sp, #64	; 0x40
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093da:	f040 8089 	bne.w	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80093de:	4b91      	ldr	r3, [pc, #580]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80093e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093e2:	f003 0307 	and.w	r3, r3, #7
 80093e6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ea:	2b04      	cmp	r3, #4
 80093ec:	d87d      	bhi.n	80094ea <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80093ee:	a201      	add	r2, pc, #4	; (adr r2, 80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80093f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f4:	08009409 	.word	0x08009409
 80093f8:	0800942d 	.word	0x0800942d
 80093fc:	08009451 	.word	0x08009451
 8009400:	080094e5 	.word	0x080094e5
 8009404:	08009475 	.word	0x08009475
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009408:	4b86      	ldr	r3, [pc, #536]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009410:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009414:	d107      	bne.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800941a:	4618      	mov	r0, r3
 800941c:	f000 fec2 	bl	800a1a4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009424:	e3f4      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800942a:	e3f1      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800942c:	4b7d      	ldr	r3, [pc, #500]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009438:	d107      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800943a:	f107 0318 	add.w	r3, r7, #24
 800943e:	4618      	mov	r0, r3
 8009440:	f000 fc08 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009448:	e3e2      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800944e:	e3df      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009450:	4b74      	ldr	r3, [pc, #464]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800945c:	d107      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800945e:	f107 030c 	add.w	r3, r7, #12
 8009462:	4618      	mov	r0, r3
 8009464:	f000 fd4a 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800946c:	e3d0      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009472:	e3cd      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009474:	4b6b      	ldr	r3, [pc, #428]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009478:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800947c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800947e:	4b69      	ldr	r3, [pc, #420]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 0304 	and.w	r3, r3, #4
 8009486:	2b04      	cmp	r3, #4
 8009488:	d10c      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800948a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800948c:	2b00      	cmp	r3, #0
 800948e:	d109      	bne.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009490:	4b64      	ldr	r3, [pc, #400]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	08db      	lsrs	r3, r3, #3
 8009496:	f003 0303 	and.w	r3, r3, #3
 800949a:	4a63      	ldr	r2, [pc, #396]	; (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800949c:	fa22 f303 	lsr.w	r3, r2, r3
 80094a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094a2:	e01e      	b.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094a4:	4b5f      	ldr	r3, [pc, #380]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094b0:	d106      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80094b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094b8:	d102      	bne.n	80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80094ba:	4b5c      	ldr	r3, [pc, #368]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80094bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094be:	e010      	b.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094c0:	4b58      	ldr	r3, [pc, #352]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094cc:	d106      	bne.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80094ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094d4:	d102      	bne.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80094d6:	4b56      	ldr	r3, [pc, #344]	; (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80094d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094da:	e002      	b.n	80094e2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80094dc:	2300      	movs	r3, #0
 80094de:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80094e0:	e396      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80094e2:	e395      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80094e4:	4b53      	ldr	r3, [pc, #332]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80094e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094e8:	e392      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 80094ea:	2300      	movs	r3, #0
 80094ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094ee:	e38f      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094f6:	f040 809f 	bne.w	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80094fa:	4b4a      	ldr	r3, [pc, #296]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80094fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094fe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009502:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950a:	d04d      	beq.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 800950c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009512:	f200 8084 	bhi.w	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8009516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009518:	2bc0      	cmp	r3, #192	; 0xc0
 800951a:	d07d      	beq.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 800951c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951e:	2bc0      	cmp	r3, #192	; 0xc0
 8009520:	d87d      	bhi.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8009522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009524:	2b80      	cmp	r3, #128	; 0x80
 8009526:	d02d      	beq.n	8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8009528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952a:	2b80      	cmp	r3, #128	; 0x80
 800952c:	d877      	bhi.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800952e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009530:	2b00      	cmp	r3, #0
 8009532:	d003      	beq.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8009534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009536:	2b40      	cmp	r3, #64	; 0x40
 8009538:	d012      	beq.n	8009560 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800953a:	e070      	b.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800953c:	4b39      	ldr	r3, [pc, #228]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009544:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009548:	d107      	bne.n	800955a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800954a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800954e:	4618      	mov	r0, r3
 8009550:	f000 fe28 	bl	800a1a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009558:	e35a      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800955e:	e357      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009560:	4b30      	ldr	r3, [pc, #192]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800956c:	d107      	bne.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800956e:	f107 0318 	add.w	r3, r7, #24
 8009572:	4618      	mov	r0, r3
 8009574:	f000 fb6e 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800957c:	e348      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009582:	e345      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009584:	4b27      	ldr	r3, [pc, #156]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800958c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009590:	d107      	bne.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009592:	f107 030c 	add.w	r3, r7, #12
 8009596:	4618      	mov	r0, r3
 8009598:	f000 fcb0 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80095a0:	e336      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80095a2:	2300      	movs	r3, #0
 80095a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095a6:	e333      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80095a8:	4b1e      	ldr	r3, [pc, #120]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80095aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095b0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095b2:	4b1c      	ldr	r3, [pc, #112]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 0304 	and.w	r3, r3, #4
 80095ba:	2b04      	cmp	r3, #4
 80095bc:	d10c      	bne.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 80095be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d109      	bne.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095c4:	4b17      	ldr	r3, [pc, #92]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	08db      	lsrs	r3, r3, #3
 80095ca:	f003 0303 	and.w	r3, r3, #3
 80095ce:	4a16      	ldr	r2, [pc, #88]	; (8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80095d0:	fa22 f303 	lsr.w	r3, r2, r3
 80095d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095d6:	e01e      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095d8:	4b12      	ldr	r3, [pc, #72]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095e4:	d106      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80095e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095ec:	d102      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80095ee:	4b0f      	ldr	r3, [pc, #60]	; (800962c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80095f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095f2:	e010      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095f4:	4b0b      	ldr	r3, [pc, #44]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009600:	d106      	bne.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8009602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009608:	d102      	bne.n	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800960a:	4b09      	ldr	r3, [pc, #36]	; (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800960c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800960e:	e002      	b.n	8009616 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009614:	e2fc      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009616:	e2fb      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009618:	4b06      	ldr	r3, [pc, #24]	; (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800961a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800961c:	e2f8      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009622:	e2f5      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009624:	58024400 	.word	0x58024400
 8009628:	03d09000 	.word	0x03d09000
 800962c:	003d0900 	.word	0x003d0900
 8009630:	007a1200 	.word	0x007a1200
 8009634:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800963e:	f040 809c 	bne.w	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8009642:	4b9d      	ldr	r3, [pc, #628]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009646:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800964a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009652:	d054      	beq.n	80096fe <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8009654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800965a:	f200 808b 	bhi.w	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 800965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009660:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009664:	f000 8083 	beq.w	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800966e:	f200 8081 	bhi.w	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8009672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009678:	d02f      	beq.n	80096da <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009680:	d878      	bhi.n	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8009682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009684:	2b00      	cmp	r3, #0
 8009686:	d004      	beq.n	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8009688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800968e:	d012      	beq.n	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8009690:	e070      	b.n	8009774 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009692:	4b89      	ldr	r3, [pc, #548]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800969a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800969e:	d107      	bne.n	80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096a4:	4618      	mov	r0, r3
 80096a6:	f000 fd7d 	bl	800a1a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096ae:	e2af      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80096b0:	2300      	movs	r3, #0
 80096b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096b4:	e2ac      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096b6:	4b80      	ldr	r3, [pc, #512]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096c2:	d107      	bne.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096c4:	f107 0318 	add.w	r3, r7, #24
 80096c8:	4618      	mov	r0, r3
 80096ca:	f000 fac3 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096d2:	e29d      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80096d4:	2300      	movs	r3, #0
 80096d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096d8:	e29a      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096da:	4b77      	ldr	r3, [pc, #476]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096e6:	d107      	bne.n	80096f8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096e8:	f107 030c 	add.w	r3, r7, #12
 80096ec:	4618      	mov	r0, r3
 80096ee:	f000 fc05 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80096f6:	e28b      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80096f8:	2300      	movs	r3, #0
 80096fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80096fc:	e288      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80096fe:	4b6e      	ldr	r3, [pc, #440]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009702:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009706:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009708:	4b6b      	ldr	r3, [pc, #428]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 0304 	and.w	r3, r3, #4
 8009710:	2b04      	cmp	r3, #4
 8009712:	d10c      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8009714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009716:	2b00      	cmp	r3, #0
 8009718:	d109      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800971a:	4b67      	ldr	r3, [pc, #412]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	08db      	lsrs	r3, r3, #3
 8009720:	f003 0303 	and.w	r3, r3, #3
 8009724:	4a65      	ldr	r2, [pc, #404]	; (80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8009726:	fa22 f303 	lsr.w	r3, r2, r3
 800972a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800972c:	e01e      	b.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800972e:	4b62      	ldr	r3, [pc, #392]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800973a:	d106      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800973c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800973e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009742:	d102      	bne.n	800974a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009744:	4b5e      	ldr	r3, [pc, #376]	; (80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8009746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009748:	e010      	b.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800974a:	4b5b      	ldr	r3, [pc, #364]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009756:	d106      	bne.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8009758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800975a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800975e:	d102      	bne.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009760:	4b58      	ldr	r3, [pc, #352]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8009762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009764:	e002      	b.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 800976a:	e251      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800976c:	e250      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800976e:	4b56      	ldr	r3, [pc, #344]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009770:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009772:	e24d      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009778:	e24a      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009780:	f040 80a7 	bne.w	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8009784:	4b4c      	ldr	r3, [pc, #304]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009788:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800978c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800978e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009794:	d055      	beq.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800979c:	f200 8096 	bhi.w	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80097a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097a6:	f000 8084 	beq.w	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 80097aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097b0:	f200 808c 	bhi.w	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80097b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097ba:	d030      	beq.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80097bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097c2:	f200 8083 	bhi.w	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80097c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d004      	beq.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 80097cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097d2:	d012      	beq.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 80097d4:	e07a      	b.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097d6:	4b38      	ldr	r3, [pc, #224]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097e2:	d107      	bne.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 fcdb 	bl	800a1a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80097f2:	e20d      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80097f4:	2300      	movs	r3, #0
 80097f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80097f8:	e20a      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097fa:	4b2f      	ldr	r3, [pc, #188]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009806:	d107      	bne.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009808:	f107 0318 	add.w	r3, r7, #24
 800980c:	4618      	mov	r0, r3
 800980e:	f000 fa21 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009816:	e1fb      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800981c:	e1f8      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800981e:	4b26      	ldr	r3, [pc, #152]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800982a:	d107      	bne.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800982c:	f107 030c 	add.w	r3, r7, #12
 8009830:	4618      	mov	r0, r3
 8009832:	f000 fb63 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800983a:	e1e9      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800983c:	2300      	movs	r3, #0
 800983e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009840:	e1e6      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009842:	4b1d      	ldr	r3, [pc, #116]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009846:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800984a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800984c:	4b1a      	ldr	r3, [pc, #104]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 0304 	and.w	r3, r3, #4
 8009854:	2b04      	cmp	r3, #4
 8009856:	d10c      	bne.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8009858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800985a:	2b00      	cmp	r3, #0
 800985c:	d109      	bne.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800985e:	4b16      	ldr	r3, [pc, #88]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	08db      	lsrs	r3, r3, #3
 8009864:	f003 0303 	and.w	r3, r3, #3
 8009868:	4a14      	ldr	r2, [pc, #80]	; (80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 800986a:	fa22 f303 	lsr.w	r3, r2, r3
 800986e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009870:	e01e      	b.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009872:	4b11      	ldr	r3, [pc, #68]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800987e:	d106      	bne.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8009880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009886:	d102      	bne.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009888:	4b0d      	ldr	r3, [pc, #52]	; (80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800988a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800988c:	e010      	b.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800988e:	4b0a      	ldr	r3, [pc, #40]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009896:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800989a:	d106      	bne.n	80098aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800989c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800989e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098a2:	d102      	bne.n	80098aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80098a4:	4b07      	ldr	r3, [pc, #28]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 80098a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098a8:	e002      	b.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80098ae:	e1af      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80098b0:	e1ae      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80098b2:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80098b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098b6:	e1ab      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80098b8:	58024400 	.word	0x58024400
 80098bc:	03d09000 	.word	0x03d09000
 80098c0:	003d0900 	.word	0x003d0900
 80098c4:	007a1200 	.word	0x007a1200
 80098c8:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80098d0:	e19e      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80098d8:	d173      	bne.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80098da:	4b9d      	ldr	r3, [pc, #628]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80098dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80098e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80098e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098ea:	d02f      	beq.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80098ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098f2:	d863      	bhi.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80098f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d004      	beq.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80098fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009900:	d012      	beq.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8009902:	e05b      	b.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009904:	4b92      	ldr	r3, [pc, #584]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800990c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009910:	d107      	bne.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009912:	f107 0318 	add.w	r3, r7, #24
 8009916:	4618      	mov	r0, r3
 8009918:	f000 f99c 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009920:	e176      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009926:	e173      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009928:	4b89      	ldr	r3, [pc, #548]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009934:	d107      	bne.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009936:	f107 030c 	add.w	r3, r7, #12
 800993a:	4618      	mov	r0, r3
 800993c:	f000 fade 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009944:	e164      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800994a:	e161      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800994c:	4b80      	ldr	r3, [pc, #512]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800994e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009950:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009954:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009956:	4b7e      	ldr	r3, [pc, #504]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 0304 	and.w	r3, r3, #4
 800995e:	2b04      	cmp	r3, #4
 8009960:	d10c      	bne.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8009962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009964:	2b00      	cmp	r3, #0
 8009966:	d109      	bne.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009968:	4b79      	ldr	r3, [pc, #484]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	08db      	lsrs	r3, r3, #3
 800996e:	f003 0303 	and.w	r3, r3, #3
 8009972:	4a78      	ldr	r2, [pc, #480]	; (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009974:	fa22 f303 	lsr.w	r3, r2, r3
 8009978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800997a:	e01e      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800997c:	4b74      	ldr	r3, [pc, #464]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009988:	d106      	bne.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800998a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009990:	d102      	bne.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009992:	4b71      	ldr	r3, [pc, #452]	; (8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009996:	e010      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009998:	4b6d      	ldr	r3, [pc, #436]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099a4:	d106      	bne.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80099a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099ac:	d102      	bne.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80099ae:	4b6b      	ldr	r3, [pc, #428]	; (8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80099b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099b2:	e002      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80099b4:	2300      	movs	r3, #0
 80099b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80099b8:	e12a      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80099ba:	e129      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80099c0:	e126      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c8:	d133      	bne.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80099ca:	4b61      	ldr	r3, [pc, #388]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80099cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099d2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80099d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d004      	beq.n	80099e4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80099da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099e0:	d012      	beq.n	8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80099e2:	e023      	b.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099e4:	4b5a      	ldr	r3, [pc, #360]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099f0:	d107      	bne.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 fbd4 	bl	800a1a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a00:	e106      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a06:	e103      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a08:	4b51      	ldr	r3, [pc, #324]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a14:	d107      	bne.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a16:	f107 0318 	add.w	r3, r7, #24
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 f91a 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009a20:	6a3b      	ldr	r3, [r7, #32]
 8009a22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009a24:	e0f4      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009a26:	2300      	movs	r3, #0
 8009a28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a2a:	e0f1      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009a30:	e0ee      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a38:	f040 809b 	bne.w	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009a3c:	4b44      	ldr	r3, [pc, #272]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a40:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009a44:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a48:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009a4c:	f000 808b 	beq.w	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a52:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009a56:	f200 8089 	bhi.w	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a60:	d06c      	beq.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a68:	f200 8080 	bhi.w	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a72:	d056      	beq.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8009a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a7a:	d877      	bhi.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a82:	d03b      	beq.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8009a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a8a:	d86f      	bhi.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a92:	d021      	beq.n	8009ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8009a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a9a:	d867      	bhi.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d004      	beq.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009aa8:	d004      	beq.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8009aaa:	e05f      	b.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009aac:	f000 f8bc 	bl	8009c28 <HAL_RCCEx_GetD3PCLK1Freq>
 8009ab0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009ab2:	e0ad      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ab4:	4b26      	ldr	r3, [pc, #152]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009abc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ac0:	d107      	bne.n	8009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ac2:	f107 0318 	add.w	r3, r7, #24
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 f8c4 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009ad0:	e09e      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009ad6:	e09b      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ad8:	4b1d      	ldr	r3, [pc, #116]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ae4:	d107      	bne.n	8009af6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ae6:	f107 030c 	add.w	r3, r7, #12
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 fa06 	bl	8009efc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009af4:	e08c      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009afa:	e089      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009afc:	4b14      	ldr	r3, [pc, #80]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 0304 	and.w	r3, r3, #4
 8009b04:	2b04      	cmp	r3, #4
 8009b06:	d109      	bne.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009b08:	4b11      	ldr	r3, [pc, #68]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	08db      	lsrs	r3, r3, #3
 8009b0e:	f003 0303 	and.w	r3, r3, #3
 8009b12:	4a10      	ldr	r2, [pc, #64]	; (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009b14:	fa22 f303 	lsr.w	r3, r2, r3
 8009b18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b1a:	e079      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b20:	e076      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009b22:	4b0b      	ldr	r3, [pc, #44]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b2e:	d102      	bne.n	8009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8009b30:	4b09      	ldr	r3, [pc, #36]	; (8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009b32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009b34:	e06c      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009b36:	2300      	movs	r3, #0
 8009b38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b3a:	e069      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b3c:	4b04      	ldr	r3, [pc, #16]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b48:	d10a      	bne.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 8009b4a:	4b04      	ldr	r3, [pc, #16]	; (8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009b4e:	e05f      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8009b50:	58024400 	.word	0x58024400
 8009b54:	03d09000 	.word	0x03d09000
 8009b58:	003d0900 	.word	0x003d0900
 8009b5c:	007a1200 	.word	0x007a1200
          frequency = 0;
 8009b60:	2300      	movs	r3, #0
 8009b62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b64:	e054      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009b66:	4b2d      	ldr	r3, [pc, #180]	; (8009c1c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8009b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b6a:	e051      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009b70:	e04e      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b78:	d148      	bne.n	8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009b7a:	4b29      	ldr	r3, [pc, #164]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009b82:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b8a:	d02a      	beq.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b92:	d838      	bhi.n	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d004      	beq.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ba0:	d00d      	beq.n	8009bbe <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009ba2:	e030      	b.n	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009ba4:	4b1e      	ldr	r3, [pc, #120]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bb0:	d102      	bne.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 8009bb2:	4b1c      	ldr	r3, [pc, #112]	; (8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009bb6:	e02b      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009bbc:	e028      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bbe:	4b18      	ldr	r3, [pc, #96]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bca:	d107      	bne.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 fae7 	bl	800a1a4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009bda:	e019      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009be0:	e016      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009be2:	4b0f      	ldr	r3, [pc, #60]	; (8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bee:	d107      	bne.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bf0:	f107 0318 	add.w	r3, r7, #24
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f000 f82d 	bl	8009c54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009bfe:	e007      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009c00:	2300      	movs	r3, #0
 8009c02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c04:	e004      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8009c06:	2300      	movs	r3, #0
 8009c08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009c0a:	e001      	b.n	8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8009c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3740      	adds	r7, #64	; 0x40
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	00bb8000 	.word	0x00bb8000
 8009c20:	58024400 	.word	0x58024400
 8009c24:	007a1200 	.word	0x007a1200

08009c28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009c2c:	f7fe fc92 	bl	8008554 <HAL_RCC_GetHCLKFreq>
 8009c30:	4602      	mov	r2, r0
 8009c32:	4b06      	ldr	r3, [pc, #24]	; (8009c4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	091b      	lsrs	r3, r3, #4
 8009c38:	f003 0307 	and.w	r3, r3, #7
 8009c3c:	4904      	ldr	r1, [pc, #16]	; (8009c50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009c3e:	5ccb      	ldrb	r3, [r1, r3]
 8009c40:	f003 031f 	and.w	r3, r3, #31
 8009c44:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	58024400 	.word	0x58024400
 8009c50:	0800ba18 	.word	0x0800ba18

08009c54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b089      	sub	sp, #36	; 0x24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c5c:	4ba1      	ldr	r3, [pc, #644]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c60:	f003 0303 	and.w	r3, r3, #3
 8009c64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009c66:	4b9f      	ldr	r3, [pc, #636]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c6a:	0b1b      	lsrs	r3, r3, #12
 8009c6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009c72:	4b9c      	ldr	r3, [pc, #624]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c76:	091b      	lsrs	r3, r3, #4
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009c7e:	4b99      	ldr	r3, [pc, #612]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c82:	08db      	lsrs	r3, r3, #3
 8009c84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	fb02 f303 	mul.w	r3, r2, r3
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f000 8111 	beq.w	8009ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	f000 8083 	beq.w	8009db0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	f200 80a1 	bhi.w	8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d003      	beq.n	8009cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d056      	beq.n	8009d6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009cbe:	e099      	b.n	8009df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cc0:	4b88      	ldr	r3, [pc, #544]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0320 	and.w	r3, r3, #32
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d02d      	beq.n	8009d28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ccc:	4b85      	ldr	r3, [pc, #532]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	08db      	lsrs	r3, r3, #3
 8009cd2:	f003 0303 	and.w	r3, r3, #3
 8009cd6:	4a84      	ldr	r2, [pc, #528]	; (8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cdc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	ee07 3a90 	vmov	s15, r3
 8009ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	ee07 3a90 	vmov	s15, r3
 8009cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cf6:	4b7b      	ldr	r3, [pc, #492]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cfe:	ee07 3a90 	vmov	s15, r3
 8009d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d22:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009d26:	e087      	b.n	8009e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	ee07 3a90 	vmov	s15, r3
 8009d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d3a:	4b6a      	ldr	r3, [pc, #424]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d42:	ee07 3a90 	vmov	s15, r3
 8009d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d6a:	e065      	b.n	8009e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	ee07 3a90 	vmov	s15, r3
 8009d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d7e:	4b59      	ldr	r3, [pc, #356]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d86:	ee07 3a90 	vmov	s15, r3
 8009d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009daa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dae:	e043      	b.n	8009e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	ee07 3a90 	vmov	s15, r3
 8009db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc2:	4b48      	ldr	r3, [pc, #288]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009df2:	e021      	b.n	8009e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	ee07 3a90 	vmov	s15, r3
 8009dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e06:	4b37      	ldr	r3, [pc, #220]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009e38:	4b2a      	ldr	r3, [pc, #168]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e3c:	0a5b      	lsrs	r3, r3, #9
 8009e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e42:	ee07 3a90 	vmov	s15, r3
 8009e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e5e:	ee17 2a90 	vmov	r2, s15
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009e66:	4b1f      	ldr	r3, [pc, #124]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6a:	0c1b      	lsrs	r3, r3, #16
 8009e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e70:	ee07 3a90 	vmov	s15, r3
 8009e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e80:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e8c:	ee17 2a90 	vmov	r2, s15
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009e94:	4b13      	ldr	r3, [pc, #76]	; (8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e98:	0e1b      	lsrs	r3, r3, #24
 8009e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e9e:	ee07 3a90 	vmov	s15, r3
 8009ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eba:	ee17 2a90 	vmov	r2, s15
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009ec2:	e008      	b.n	8009ed6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	609a      	str	r2, [r3, #8]
}
 8009ed6:	bf00      	nop
 8009ed8:	3724      	adds	r7, #36	; 0x24
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	58024400 	.word	0x58024400
 8009ee8:	03d09000 	.word	0x03d09000
 8009eec:	46000000 	.word	0x46000000
 8009ef0:	4c742400 	.word	0x4c742400
 8009ef4:	4a742400 	.word	0x4a742400
 8009ef8:	4af42400 	.word	0x4af42400

08009efc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b089      	sub	sp, #36	; 0x24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f04:	4ba1      	ldr	r3, [pc, #644]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f08:	f003 0303 	and.w	r3, r3, #3
 8009f0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009f0e:	4b9f      	ldr	r3, [pc, #636]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f12:	0d1b      	lsrs	r3, r3, #20
 8009f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009f1a:	4b9c      	ldr	r3, [pc, #624]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1e:	0a1b      	lsrs	r3, r3, #8
 8009f20:	f003 0301 	and.w	r3, r3, #1
 8009f24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009f26:	4b99      	ldr	r3, [pc, #612]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f2a:	08db      	lsrs	r3, r3, #3
 8009f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	fb02 f303 	mul.w	r3, r2, r3
 8009f36:	ee07 3a90 	vmov	s15, r3
 8009f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 8111 	beq.w	800a16c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	f000 8083 	beq.w	800a058 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009f52:	69bb      	ldr	r3, [r7, #24]
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	f200 80a1 	bhi.w	800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d003      	beq.n	8009f68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d056      	beq.n	800a014 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009f66:	e099      	b.n	800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f68:	4b88      	ldr	r3, [pc, #544]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0320 	and.w	r3, r3, #32
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d02d      	beq.n	8009fd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f74:	4b85      	ldr	r3, [pc, #532]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	08db      	lsrs	r3, r3, #3
 8009f7a:	f003 0303 	and.w	r3, r3, #3
 8009f7e:	4a84      	ldr	r2, [pc, #528]	; (800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009f80:	fa22 f303 	lsr.w	r3, r2, r3
 8009f84:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	ee07 3a90 	vmov	s15, r3
 8009f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	ee07 3a90 	vmov	s15, r3
 8009f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f9e:	4b7b      	ldr	r3, [pc, #492]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fa6:	ee07 3a90 	vmov	s15, r3
 8009faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fb2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009fce:	e087      	b.n	800a0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	ee07 3a90 	vmov	s15, r3
 8009fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a198 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fe2:	4b6a      	ldr	r3, [pc, #424]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fea:	ee07 3a90 	vmov	s15, r3
 8009fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ff6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a00a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a00e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a012:	e065      	b.n	800a0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	ee07 3a90 	vmov	s15, r3
 800a01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a01e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a026:	4b59      	ldr	r3, [pc, #356]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a02e:	ee07 3a90 	vmov	s15, r3
 800a032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a036:	ed97 6a03 	vldr	s12, [r7, #12]
 800a03a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a03e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a04a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a052:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a056:	e043      	b.n	800a0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	ee07 3a90 	vmov	s15, r3
 800a05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a062:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a06a:	4b48      	ldr	r3, [pc, #288]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a072:	ee07 3a90 	vmov	s15, r3
 800a076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a07a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a07e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a08a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a092:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a096:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a09a:	e021      	b.n	800a0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	ee07 3a90 	vmov	s15, r3
 800a0a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a19c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ae:	4b37      	ldr	r3, [pc, #220]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0b6:	ee07 3a90 	vmov	s15, r3
 800a0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a0e0:	4b2a      	ldr	r3, [pc, #168]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e4:	0a5b      	lsrs	r3, r3, #9
 800a0e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0ea:	ee07 3a90 	vmov	s15, r3
 800a0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a106:	ee17 2a90 	vmov	r2, s15
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a10e:	4b1f      	ldr	r3, [pc, #124]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a112:	0c1b      	lsrs	r3, r3, #16
 800a114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a118:	ee07 3a90 	vmov	s15, r3
 800a11c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a120:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a124:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a128:	edd7 6a07 	vldr	s13, [r7, #28]
 800a12c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a134:	ee17 2a90 	vmov	r2, s15
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a13c:	4b13      	ldr	r3, [pc, #76]	; (800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a140:	0e1b      	lsrs	r3, r3, #24
 800a142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a146:	ee07 3a90 	vmov	s15, r3
 800a14a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a14e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a152:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a156:	edd7 6a07 	vldr	s13, [r7, #28]
 800a15a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a15e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a162:	ee17 2a90 	vmov	r2, s15
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a16a:	e008      	b.n	800a17e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	609a      	str	r2, [r3, #8]
}
 800a17e:	bf00      	nop
 800a180:	3724      	adds	r7, #36	; 0x24
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	58024400 	.word	0x58024400
 800a190:	03d09000 	.word	0x03d09000
 800a194:	46000000 	.word	0x46000000
 800a198:	4c742400 	.word	0x4c742400
 800a19c:	4a742400 	.word	0x4a742400
 800a1a0:	4af42400 	.word	0x4af42400

0800a1a4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b089      	sub	sp, #36	; 0x24
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1ac:	4ba0      	ldr	r3, [pc, #640]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b0:	f003 0303 	and.w	r3, r3, #3
 800a1b4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800a1b6:	4b9e      	ldr	r3, [pc, #632]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ba:	091b      	lsrs	r3, r3, #4
 800a1bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1c0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a1c2:	4b9b      	ldr	r3, [pc, #620]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c6:	f003 0301 	and.w	r3, r3, #1
 800a1ca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a1cc:	4b98      	ldr	r3, [pc, #608]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d0:	08db      	lsrs	r3, r3, #3
 800a1d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	fb02 f303 	mul.w	r3, r2, r3
 800a1dc:	ee07 3a90 	vmov	s15, r3
 800a1e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f000 8111 	beq.w	800a412 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	f000 8083 	beq.w	800a2fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	f200 80a1 	bhi.w	800a342 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d003      	beq.n	800a20e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d056      	beq.n	800a2ba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a20c:	e099      	b.n	800a342 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a20e:	4b88      	ldr	r3, [pc, #544]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0320 	and.w	r3, r3, #32
 800a216:	2b00      	cmp	r3, #0
 800a218:	d02d      	beq.n	800a276 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a21a:	4b85      	ldr	r3, [pc, #532]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	08db      	lsrs	r3, r3, #3
 800a220:	f003 0303 	and.w	r3, r3, #3
 800a224:	4a83      	ldr	r2, [pc, #524]	; (800a434 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a226:	fa22 f303 	lsr.w	r3, r2, r3
 800a22a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	ee07 3a90 	vmov	s15, r3
 800a232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	ee07 3a90 	vmov	s15, r3
 800a23c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a244:	4b7a      	ldr	r3, [pc, #488]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a24c:	ee07 3a90 	vmov	s15, r3
 800a250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a254:	ed97 6a03 	vldr	s12, [r7, #12]
 800a258:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a438 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a25c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a260:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a264:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a268:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a26c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a270:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a274:	e087      	b.n	800a386 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	ee07 3a90 	vmov	s15, r3
 800a27c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a280:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a43c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a288:	4b69      	ldr	r3, [pc, #420]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a290:	ee07 3a90 	vmov	s15, r3
 800a294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a298:	ed97 6a03 	vldr	s12, [r7, #12]
 800a29c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a438 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2b8:	e065      	b.n	800a386 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	ee07 3a90 	vmov	s15, r3
 800a2c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a440 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a2c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2cc:	4b58      	ldr	r3, [pc, #352]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d4:	ee07 3a90 	vmov	s15, r3
 800a2d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a438 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2fc:	e043      	b.n	800a386 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	ee07 3a90 	vmov	s15, r3
 800a304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a308:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a444 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a30c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a310:	4b47      	ldr	r3, [pc, #284]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a318:	ee07 3a90 	vmov	s15, r3
 800a31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a320:	ed97 6a03 	vldr	s12, [r7, #12]
 800a324:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a438 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a328:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a32c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a330:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a334:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a33c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a340:	e021      	b.n	800a386 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	ee07 3a90 	vmov	s15, r3
 800a348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a34c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a43c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a350:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a354:	4b36      	ldr	r3, [pc, #216]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a35c:	ee07 3a90 	vmov	s15, r3
 800a360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a364:	ed97 6a03 	vldr	s12, [r7, #12]
 800a368:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a438 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a36c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a370:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a374:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a380:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a384:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800a386:	4b2a      	ldr	r3, [pc, #168]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38a:	0a5b      	lsrs	r3, r3, #9
 800a38c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a390:	ee07 3a90 	vmov	s15, r3
 800a394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a39c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ac:	ee17 2a90 	vmov	r2, s15
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800a3b4:	4b1e      	ldr	r3, [pc, #120]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b8:	0c1b      	lsrs	r3, r3, #16
 800a3ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3be:	ee07 3a90 	vmov	s15, r3
 800a3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3da:	ee17 2a90 	vmov	r2, s15
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800a3e2:	4b13      	ldr	r3, [pc, #76]	; (800a430 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e6:	0e1b      	lsrs	r3, r3, #24
 800a3e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3ec:	ee07 3a90 	vmov	s15, r3
 800a3f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a408:	ee17 2a90 	vmov	r2, s15
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a410:	e008      	b.n	800a424 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	609a      	str	r2, [r3, #8]
}
 800a424:	bf00      	nop
 800a426:	3724      	adds	r7, #36	; 0x24
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	58024400 	.word	0x58024400
 800a434:	03d09000 	.word	0x03d09000
 800a438:	46000000 	.word	0x46000000
 800a43c:	4c742400 	.word	0x4c742400
 800a440:	4a742400 	.word	0x4a742400
 800a444:	4af42400 	.word	0x4af42400

0800a448 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a456:	4b53      	ldr	r3, [pc, #332]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a45a:	f003 0303 	and.w	r3, r3, #3
 800a45e:	2b03      	cmp	r3, #3
 800a460:	d101      	bne.n	800a466 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e099      	b.n	800a59a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a466:	4b4f      	ldr	r3, [pc, #316]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a4e      	ldr	r2, [pc, #312]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a46c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a472:	f7f8 fbdd 	bl	8002c30 <HAL_GetTick>
 800a476:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a478:	e008      	b.n	800a48c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a47a:	f7f8 fbd9 	bl	8002c30 <HAL_GetTick>
 800a47e:	4602      	mov	r2, r0
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	1ad3      	subs	r3, r2, r3
 800a484:	2b02      	cmp	r3, #2
 800a486:	d901      	bls.n	800a48c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a488:	2303      	movs	r3, #3
 800a48a:	e086      	b.n	800a59a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a48c:	4b45      	ldr	r3, [pc, #276]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1f0      	bne.n	800a47a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a498:	4b42      	ldr	r3, [pc, #264]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	031b      	lsls	r3, r3, #12
 800a4a6:	493f      	ldr	r1, [pc, #252]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	628b      	str	r3, [r1, #40]	; 0x28
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	025b      	lsls	r3, r3, #9
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	431a      	orrs	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	041b      	lsls	r3, r3, #16
 800a4ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	061b      	lsls	r3, r3, #24
 800a4d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a4dc:	4931      	ldr	r1, [pc, #196]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a4e2:	4b30      	ldr	r3, [pc, #192]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	695b      	ldr	r3, [r3, #20]
 800a4ee:	492d      	ldr	r1, [pc, #180]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a4f4:	4b2b      	ldr	r3, [pc, #172]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f8:	f023 0220 	bic.w	r2, r3, #32
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	4928      	ldr	r1, [pc, #160]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a502:	4313      	orrs	r3, r2
 800a504:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a506:	4b27      	ldr	r3, [pc, #156]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50a:	4a26      	ldr	r2, [pc, #152]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a50c:	f023 0310 	bic.w	r3, r3, #16
 800a510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a512:	4b24      	ldr	r3, [pc, #144]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a516:	4b24      	ldr	r3, [pc, #144]	; (800a5a8 <RCCEx_PLL2_Config+0x160>)
 800a518:	4013      	ands	r3, r2
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	69d2      	ldr	r2, [r2, #28]
 800a51e:	00d2      	lsls	r2, r2, #3
 800a520:	4920      	ldr	r1, [pc, #128]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a522:	4313      	orrs	r3, r2
 800a524:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a526:	4b1f      	ldr	r3, [pc, #124]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52a:	4a1e      	ldr	r2, [pc, #120]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a52c:	f043 0310 	orr.w	r3, r3, #16
 800a530:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d106      	bne.n	800a546 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a538:	4b1a      	ldr	r3, [pc, #104]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53c:	4a19      	ldr	r2, [pc, #100]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a53e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a542:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a544:	e00f      	b.n	800a566 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d106      	bne.n	800a55a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a54c:	4b15      	ldr	r3, [pc, #84]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a550:	4a14      	ldr	r2, [pc, #80]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a556:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a558:	e005      	b.n	800a566 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a55a:	4b12      	ldr	r3, [pc, #72]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55e:	4a11      	ldr	r2, [pc, #68]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a560:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a564:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a566:	4b0f      	ldr	r3, [pc, #60]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a0e      	ldr	r2, [pc, #56]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a56c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a572:	f7f8 fb5d 	bl	8002c30 <HAL_GetTick>
 800a576:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a578:	e008      	b.n	800a58c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a57a:	f7f8 fb59 	bl	8002c30 <HAL_GetTick>
 800a57e:	4602      	mov	r2, r0
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	2b02      	cmp	r3, #2
 800a586:	d901      	bls.n	800a58c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e006      	b.n	800a59a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a58c:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <RCCEx_PLL2_Config+0x15c>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a594:	2b00      	cmp	r3, #0
 800a596:	d0f0      	beq.n	800a57a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	58024400 	.word	0x58024400
 800a5a8:	ffff0007 	.word	0xffff0007

0800a5ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5ba:	4b53      	ldr	r3, [pc, #332]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5be:	f003 0303 	and.w	r3, r3, #3
 800a5c2:	2b03      	cmp	r3, #3
 800a5c4:	d101      	bne.n	800a5ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e099      	b.n	800a6fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a5ca:	4b4f      	ldr	r3, [pc, #316]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a4e      	ldr	r2, [pc, #312]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a5d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5d6:	f7f8 fb2b 	bl	8002c30 <HAL_GetTick>
 800a5da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a5dc:	e008      	b.n	800a5f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a5de:	f7f8 fb27 	bl	8002c30 <HAL_GetTick>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	d901      	bls.n	800a5f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e086      	b.n	800a6fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a5f0:	4b45      	ldr	r3, [pc, #276]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1f0      	bne.n	800a5de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a5fc:	4b42      	ldr	r3, [pc, #264]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a600:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	051b      	lsls	r3, r3, #20
 800a60a:	493f      	ldr	r1, [pc, #252]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a60c:	4313      	orrs	r3, r2
 800a60e:	628b      	str	r3, [r1, #40]	; 0x28
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	3b01      	subs	r3, #1
 800a616:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	3b01      	subs	r3, #1
 800a620:	025b      	lsls	r3, r3, #9
 800a622:	b29b      	uxth	r3, r3
 800a624:	431a      	orrs	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	3b01      	subs	r3, #1
 800a62c:	041b      	lsls	r3, r3, #16
 800a62e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a632:	431a      	orrs	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	3b01      	subs	r3, #1
 800a63a:	061b      	lsls	r3, r3, #24
 800a63c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a640:	4931      	ldr	r1, [pc, #196]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a642:	4313      	orrs	r3, r2
 800a644:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a646:	4b30      	ldr	r3, [pc, #192]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	492d      	ldr	r1, [pc, #180]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a654:	4313      	orrs	r3, r2
 800a656:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a658:	4b2b      	ldr	r3, [pc, #172]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	699b      	ldr	r3, [r3, #24]
 800a664:	4928      	ldr	r1, [pc, #160]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a666:	4313      	orrs	r3, r2
 800a668:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a66a:	4b27      	ldr	r3, [pc, #156]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66e:	4a26      	ldr	r2, [pc, #152]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a674:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a676:	4b24      	ldr	r3, [pc, #144]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a67a:	4b24      	ldr	r3, [pc, #144]	; (800a70c <RCCEx_PLL3_Config+0x160>)
 800a67c:	4013      	ands	r3, r2
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	69d2      	ldr	r2, [r2, #28]
 800a682:	00d2      	lsls	r2, r2, #3
 800a684:	4920      	ldr	r1, [pc, #128]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a686:	4313      	orrs	r3, r2
 800a688:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a68a:	4b1f      	ldr	r3, [pc, #124]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68e:	4a1e      	ldr	r2, [pc, #120]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a694:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d106      	bne.n	800a6aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a69c:	4b1a      	ldr	r3, [pc, #104]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a0:	4a19      	ldr	r2, [pc, #100]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a6a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a6a8:	e00f      	b.n	800a6ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d106      	bne.n	800a6be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a6b0:	4b15      	ldr	r3, [pc, #84]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b4:	4a14      	ldr	r2, [pc, #80]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a6ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a6bc:	e005      	b.n	800a6ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a6be:	4b12      	ldr	r3, [pc, #72]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c2:	4a11      	ldr	r2, [pc, #68]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a6c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a6ca:	4b0f      	ldr	r3, [pc, #60]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a0e      	ldr	r2, [pc, #56]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6d6:	f7f8 faab 	bl	8002c30 <HAL_GetTick>
 800a6da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a6dc:	e008      	b.n	800a6f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a6de:	f7f8 faa7 	bl	8002c30 <HAL_GetTick>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	2b02      	cmp	r3, #2
 800a6ea:	d901      	bls.n	800a6f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	e006      	b.n	800a6fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a6f0:	4b05      	ldr	r3, [pc, #20]	; (800a708 <RCCEx_PLL3_Config+0x15c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d0f0      	beq.n	800a6de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	58024400 	.word	0x58024400
 800a70c:	ffff0007 	.word	0xffff0007

0800a710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	e049      	b.n	800a7b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d106      	bne.n	800a73c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f7f8 f90a 	bl	8002950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2202      	movs	r2, #2
 800a740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	3304      	adds	r3, #4
 800a74c:	4619      	mov	r1, r3
 800a74e:	4610      	mov	r0, r2
 800a750:	f000 fcb2 	bl	800b0b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
	...

0800a7c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d001      	beq.n	800a7d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e04c      	b.n	800a872 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a26      	ldr	r2, [pc, #152]	; (800a880 <HAL_TIM_Base_Start+0xc0>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d022      	beq.n	800a830 <HAL_TIM_Base_Start+0x70>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7f2:	d01d      	beq.n	800a830 <HAL_TIM_Base_Start+0x70>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a22      	ldr	r2, [pc, #136]	; (800a884 <HAL_TIM_Base_Start+0xc4>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d018      	beq.n	800a830 <HAL_TIM_Base_Start+0x70>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a21      	ldr	r2, [pc, #132]	; (800a888 <HAL_TIM_Base_Start+0xc8>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d013      	beq.n	800a830 <HAL_TIM_Base_Start+0x70>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a1f      	ldr	r2, [pc, #124]	; (800a88c <HAL_TIM_Base_Start+0xcc>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d00e      	beq.n	800a830 <HAL_TIM_Base_Start+0x70>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a1e      	ldr	r2, [pc, #120]	; (800a890 <HAL_TIM_Base_Start+0xd0>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d009      	beq.n	800a830 <HAL_TIM_Base_Start+0x70>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a1c      	ldr	r2, [pc, #112]	; (800a894 <HAL_TIM_Base_Start+0xd4>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d004      	beq.n	800a830 <HAL_TIM_Base_Start+0x70>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a1b      	ldr	r2, [pc, #108]	; (800a898 <HAL_TIM_Base_Start+0xd8>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d115      	bne.n	800a85c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	689a      	ldr	r2, [r3, #8]
 800a836:	4b19      	ldr	r3, [pc, #100]	; (800a89c <HAL_TIM_Base_Start+0xdc>)
 800a838:	4013      	ands	r3, r2
 800a83a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2b06      	cmp	r3, #6
 800a840:	d015      	beq.n	800a86e <HAL_TIM_Base_Start+0xae>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a848:	d011      	beq.n	800a86e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f042 0201 	orr.w	r2, r2, #1
 800a858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a85a:	e008      	b.n	800a86e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f042 0201 	orr.w	r2, r2, #1
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	e000      	b.n	800a870 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a86e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	40010000 	.word	0x40010000
 800a884:	40000400 	.word	0x40000400
 800a888:	40000800 	.word	0x40000800
 800a88c:	40000c00 	.word	0x40000c00
 800a890:	40010400 	.word	0x40010400
 800a894:	40001800 	.word	0x40001800
 800a898:	40014000 	.word	0x40014000
 800a89c:	00010007 	.word	0x00010007

0800a8a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d001      	beq.n	800a8b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e054      	b.n	800a962 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	68da      	ldr	r2, [r3, #12]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0201 	orr.w	r2, r2, #1
 800a8ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a26      	ldr	r2, [pc, #152]	; (800a970 <HAL_TIM_Base_Start_IT+0xd0>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d022      	beq.n	800a920 <HAL_TIM_Base_Start_IT+0x80>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8e2:	d01d      	beq.n	800a920 <HAL_TIM_Base_Start_IT+0x80>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a22      	ldr	r2, [pc, #136]	; (800a974 <HAL_TIM_Base_Start_IT+0xd4>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d018      	beq.n	800a920 <HAL_TIM_Base_Start_IT+0x80>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a21      	ldr	r2, [pc, #132]	; (800a978 <HAL_TIM_Base_Start_IT+0xd8>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d013      	beq.n	800a920 <HAL_TIM_Base_Start_IT+0x80>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a1f      	ldr	r2, [pc, #124]	; (800a97c <HAL_TIM_Base_Start_IT+0xdc>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d00e      	beq.n	800a920 <HAL_TIM_Base_Start_IT+0x80>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a1e      	ldr	r2, [pc, #120]	; (800a980 <HAL_TIM_Base_Start_IT+0xe0>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d009      	beq.n	800a920 <HAL_TIM_Base_Start_IT+0x80>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a1c      	ldr	r2, [pc, #112]	; (800a984 <HAL_TIM_Base_Start_IT+0xe4>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d004      	beq.n	800a920 <HAL_TIM_Base_Start_IT+0x80>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a1b      	ldr	r2, [pc, #108]	; (800a988 <HAL_TIM_Base_Start_IT+0xe8>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d115      	bne.n	800a94c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	689a      	ldr	r2, [r3, #8]
 800a926:	4b19      	ldr	r3, [pc, #100]	; (800a98c <HAL_TIM_Base_Start_IT+0xec>)
 800a928:	4013      	ands	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2b06      	cmp	r3, #6
 800a930:	d015      	beq.n	800a95e <HAL_TIM_Base_Start_IT+0xbe>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a938:	d011      	beq.n	800a95e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f042 0201 	orr.w	r2, r2, #1
 800a948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a94a:	e008      	b.n	800a95e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f042 0201 	orr.w	r2, r2, #1
 800a95a:	601a      	str	r2, [r3, #0]
 800a95c:	e000      	b.n	800a960 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a95e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	40010000 	.word	0x40010000
 800a974:	40000400 	.word	0x40000400
 800a978:	40000800 	.word	0x40000800
 800a97c:	40000c00 	.word	0x40000c00
 800a980:	40010400 	.word	0x40010400
 800a984:	40001800 	.word	0x40001800
 800a988:	40014000 	.word	0x40014000
 800a98c:	00010007 	.word	0x00010007

0800a990 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d101      	bne.n	800a9a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e08f      	b.n	800aac4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d106      	bne.n	800a9be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f7f8 f81f 	bl	80029fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	6899      	ldr	r1, [r3, #8]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	4b3e      	ldr	r3, [pc, #248]	; (800aacc <HAL_TIM_Encoder_Init+0x13c>)
 800a9d2:	400b      	ands	r3, r1
 800a9d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	3304      	adds	r3, #4
 800a9de:	4619      	mov	r1, r3
 800a9e0:	4610      	mov	r0, r2
 800a9e2:	f000 fb69 	bl	800b0b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	6a1b      	ldr	r3, [r3, #32]
 800a9fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	4b31      	ldr	r3, [pc, #196]	; (800aad0 <HAL_TIM_Encoder_Init+0x140>)
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	689a      	ldr	r2, [r3, #8]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	021b      	lsls	r3, r3, #8
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	693a      	ldr	r2, [r7, #16]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	4b2b      	ldr	r3, [pc, #172]	; (800aad4 <HAL_TIM_Encoder_Init+0x144>)
 800aa26:	4013      	ands	r3, r2
 800aa28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aa2a:	693a      	ldr	r2, [r7, #16]
 800aa2c:	4b2a      	ldr	r3, [pc, #168]	; (800aad8 <HAL_TIM_Encoder_Init+0x148>)
 800aa2e:	4013      	ands	r3, r2
 800aa30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	68da      	ldr	r2, [r3, #12]
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	021b      	lsls	r3, r3, #8
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	693a      	ldr	r2, [r7, #16]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	011a      	lsls	r2, r3, #4
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	031b      	lsls	r3, r3, #12
 800aa50:	4313      	orrs	r3, r2
 800aa52:	693a      	ldr	r2, [r7, #16]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800aa5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800aa66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	011b      	lsls	r3, r3, #4
 800aa72:	4313      	orrs	r3, r2
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2201      	movs	r2, #1
 800aa96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	fffebff8 	.word	0xfffebff8
 800aad0:	fffffcfc 	.word	0xfffffcfc
 800aad4:	fffff3f3 	.word	0xfffff3f3
 800aad8:	ffff0f0f 	.word	0xffff0f0f

0800aadc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aaec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aaf4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aafc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d110      	bne.n	800ab2e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	d102      	bne.n	800ab18 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ab12:	7b7b      	ldrb	r3, [r7, #13]
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d001      	beq.n	800ab1c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e089      	b.n	800ac30 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2202      	movs	r2, #2
 800ab20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2202      	movs	r2, #2
 800ab28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab2c:	e031      	b.n	800ab92 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	2b04      	cmp	r3, #4
 800ab32:	d110      	bne.n	800ab56 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab34:	7bbb      	ldrb	r3, [r7, #14]
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d102      	bne.n	800ab40 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ab3a:	7b3b      	ldrb	r3, [r7, #12]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d001      	beq.n	800ab44 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	e075      	b.n	800ac30 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2202      	movs	r2, #2
 800ab48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2202      	movs	r2, #2
 800ab50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab54:	e01d      	b.n	800ab92 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab56:	7bfb      	ldrb	r3, [r7, #15]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d108      	bne.n	800ab6e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d105      	bne.n	800ab6e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ab62:	7b7b      	ldrb	r3, [r7, #13]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d102      	bne.n	800ab6e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ab68:	7b3b      	ldrb	r3, [r7, #12]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d001      	beq.n	800ab72 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e05e      	b.n	800ac30 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2202      	movs	r2, #2
 800ab76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2202      	movs	r2, #2
 800ab7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2202      	movs	r2, #2
 800ab86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2202      	movs	r2, #2
 800ab8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d003      	beq.n	800aba0 <HAL_TIM_Encoder_Start_IT+0xc4>
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	2b04      	cmp	r3, #4
 800ab9c:	d010      	beq.n	800abc0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800ab9e:	e01f      	b.n	800abe0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2201      	movs	r2, #1
 800aba6:	2100      	movs	r1, #0
 800aba8:	4618      	mov	r0, r3
 800abaa:	f000 fbbd 	bl	800b328 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68da      	ldr	r2, [r3, #12]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f042 0202 	orr.w	r2, r2, #2
 800abbc:	60da      	str	r2, [r3, #12]
      break;
 800abbe:	e02e      	b.n	800ac1e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2201      	movs	r2, #1
 800abc6:	2104      	movs	r1, #4
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 fbad 	bl	800b328 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68da      	ldr	r2, [r3, #12]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f042 0204 	orr.w	r2, r2, #4
 800abdc:	60da      	str	r2, [r3, #12]
      break;
 800abde:	e01e      	b.n	800ac1e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2201      	movs	r2, #1
 800abe6:	2100      	movs	r1, #0
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 fb9d 	bl	800b328 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2201      	movs	r2, #1
 800abf4:	2104      	movs	r1, #4
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 fb96 	bl	800b328 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68da      	ldr	r2, [r3, #12]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f042 0202 	orr.w	r2, r2, #2
 800ac0a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68da      	ldr	r2, [r3, #12]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f042 0204 	orr.w	r2, r2, #4
 800ac1a:	60da      	str	r2, [r3, #12]
      break;
 800ac1c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f042 0201 	orr.w	r2, r2, #1
 800ac2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3710      	adds	r7, #16
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	f003 0302 	and.w	r3, r3, #2
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d122      	bne.n	800ac94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	f003 0302 	and.w	r3, r3, #2
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d11b      	bne.n	800ac94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f06f 0202 	mvn.w	r2, #2
 800ac64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	699b      	ldr	r3, [r3, #24]
 800ac72:	f003 0303 	and.w	r3, r3, #3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d003      	beq.n	800ac82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f9fe 	bl	800b07c <HAL_TIM_IC_CaptureCallback>
 800ac80:	e005      	b.n	800ac8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 f9f0 	bl	800b068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fa01 	bl	800b090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	f003 0304 	and.w	r3, r3, #4
 800ac9e:	2b04      	cmp	r3, #4
 800aca0:	d122      	bne.n	800ace8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	f003 0304 	and.w	r3, r3, #4
 800acac:	2b04      	cmp	r3, #4
 800acae:	d11b      	bne.n	800ace8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f06f 0204 	mvn.w	r2, #4
 800acb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2202      	movs	r2, #2
 800acbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acca:	2b00      	cmp	r3, #0
 800accc:	d003      	beq.n	800acd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 f9d4 	bl	800b07c <HAL_TIM_IC_CaptureCallback>
 800acd4:	e005      	b.n	800ace2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 f9c6 	bl	800b068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 f9d7 	bl	800b090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	f003 0308 	and.w	r3, r3, #8
 800acf2:	2b08      	cmp	r3, #8
 800acf4:	d122      	bne.n	800ad3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	68db      	ldr	r3, [r3, #12]
 800acfc:	f003 0308 	and.w	r3, r3, #8
 800ad00:	2b08      	cmp	r3, #8
 800ad02:	d11b      	bne.n	800ad3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f06f 0208 	mvn.w	r2, #8
 800ad0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2204      	movs	r2, #4
 800ad12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	69db      	ldr	r3, [r3, #28]
 800ad1a:	f003 0303 	and.w	r3, r3, #3
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d003      	beq.n	800ad2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f9aa 	bl	800b07c <HAL_TIM_IC_CaptureCallback>
 800ad28:	e005      	b.n	800ad36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f99c 	bl	800b068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f9ad 	bl	800b090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	f003 0310 	and.w	r3, r3, #16
 800ad46:	2b10      	cmp	r3, #16
 800ad48:	d122      	bne.n	800ad90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	f003 0310 	and.w	r3, r3, #16
 800ad54:	2b10      	cmp	r3, #16
 800ad56:	d11b      	bne.n	800ad90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f06f 0210 	mvn.w	r2, #16
 800ad60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2208      	movs	r2, #8
 800ad66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d003      	beq.n	800ad7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f980 	bl	800b07c <HAL_TIM_IC_CaptureCallback>
 800ad7c:	e005      	b.n	800ad8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f972 	bl	800b068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 f983 	bl	800b090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	f003 0301 	and.w	r3, r3, #1
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d10e      	bne.n	800adbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	f003 0301 	and.w	r3, r3, #1
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d107      	bne.n	800adbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f06f 0201 	mvn.w	r2, #1
 800adb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f7f7 f9b8 	bl	800212c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adc6:	2b80      	cmp	r3, #128	; 0x80
 800adc8:	d10e      	bne.n	800ade8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800add4:	2b80      	cmp	r3, #128	; 0x80
 800add6:	d107      	bne.n	800ade8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ade0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 fb5e 	bl	800b4a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adf6:	d10e      	bne.n	800ae16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae02:	2b80      	cmp	r3, #128	; 0x80
 800ae04:	d107      	bne.n	800ae16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ae0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fb51 	bl	800b4b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae20:	2b40      	cmp	r3, #64	; 0x40
 800ae22:	d10e      	bne.n	800ae42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae2e:	2b40      	cmp	r3, #64	; 0x40
 800ae30:	d107      	bne.n	800ae42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 f931 	bl	800b0a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	f003 0320 	and.w	r3, r3, #32
 800ae4c:	2b20      	cmp	r3, #32
 800ae4e:	d10e      	bne.n	800ae6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	f003 0320 	and.w	r3, r3, #32
 800ae5a:	2b20      	cmp	r3, #32
 800ae5c:	d107      	bne.n	800ae6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f06f 0220 	mvn.w	r2, #32
 800ae66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 fb11 	bl	800b490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae6e:	bf00      	nop
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
	...

0800ae78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d101      	bne.n	800ae94 <HAL_TIM_ConfigClockSource+0x1c>
 800ae90:	2302      	movs	r3, #2
 800ae92:	e0dc      	b.n	800b04e <HAL_TIM_ConfigClockSource+0x1d6>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2202      	movs	r2, #2
 800aea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aeac:	68ba      	ldr	r2, [r7, #8]
 800aeae:	4b6a      	ldr	r3, [pc, #424]	; (800b058 <HAL_TIM_ConfigClockSource+0x1e0>)
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aeba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a64      	ldr	r2, [pc, #400]	; (800b05c <HAL_TIM_ConfigClockSource+0x1e4>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	f000 80a9 	beq.w	800b022 <HAL_TIM_ConfigClockSource+0x1aa>
 800aed0:	4a62      	ldr	r2, [pc, #392]	; (800b05c <HAL_TIM_ConfigClockSource+0x1e4>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	f200 80ae 	bhi.w	800b034 <HAL_TIM_ConfigClockSource+0x1bc>
 800aed8:	4a61      	ldr	r2, [pc, #388]	; (800b060 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	f000 80a1 	beq.w	800b022 <HAL_TIM_ConfigClockSource+0x1aa>
 800aee0:	4a5f      	ldr	r2, [pc, #380]	; (800b060 <HAL_TIM_ConfigClockSource+0x1e8>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	f200 80a6 	bhi.w	800b034 <HAL_TIM_ConfigClockSource+0x1bc>
 800aee8:	4a5e      	ldr	r2, [pc, #376]	; (800b064 <HAL_TIM_ConfigClockSource+0x1ec>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	f000 8099 	beq.w	800b022 <HAL_TIM_ConfigClockSource+0x1aa>
 800aef0:	4a5c      	ldr	r2, [pc, #368]	; (800b064 <HAL_TIM_ConfigClockSource+0x1ec>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	f200 809e 	bhi.w	800b034 <HAL_TIM_ConfigClockSource+0x1bc>
 800aef8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800aefc:	f000 8091 	beq.w	800b022 <HAL_TIM_ConfigClockSource+0x1aa>
 800af00:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af04:	f200 8096 	bhi.w	800b034 <HAL_TIM_ConfigClockSource+0x1bc>
 800af08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af0c:	f000 8089 	beq.w	800b022 <HAL_TIM_ConfigClockSource+0x1aa>
 800af10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af14:	f200 808e 	bhi.w	800b034 <HAL_TIM_ConfigClockSource+0x1bc>
 800af18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af1c:	d03e      	beq.n	800af9c <HAL_TIM_ConfigClockSource+0x124>
 800af1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af22:	f200 8087 	bhi.w	800b034 <HAL_TIM_ConfigClockSource+0x1bc>
 800af26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af2a:	f000 8086 	beq.w	800b03a <HAL_TIM_ConfigClockSource+0x1c2>
 800af2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af32:	d87f      	bhi.n	800b034 <HAL_TIM_ConfigClockSource+0x1bc>
 800af34:	2b70      	cmp	r3, #112	; 0x70
 800af36:	d01a      	beq.n	800af6e <HAL_TIM_ConfigClockSource+0xf6>
 800af38:	2b70      	cmp	r3, #112	; 0x70
 800af3a:	d87b      	bhi.n	800b034 <HAL_TIM_ConfigClockSource+0x1bc>
 800af3c:	2b60      	cmp	r3, #96	; 0x60
 800af3e:	d050      	beq.n	800afe2 <HAL_TIM_ConfigClockSource+0x16a>
 800af40:	2b60      	cmp	r3, #96	; 0x60
 800af42:	d877      	bhi.n	800b034 <HAL_TIM_ConfigClockSource+0x1bc>
 800af44:	2b50      	cmp	r3, #80	; 0x50
 800af46:	d03c      	beq.n	800afc2 <HAL_TIM_ConfigClockSource+0x14a>
 800af48:	2b50      	cmp	r3, #80	; 0x50
 800af4a:	d873      	bhi.n	800b034 <HAL_TIM_ConfigClockSource+0x1bc>
 800af4c:	2b40      	cmp	r3, #64	; 0x40
 800af4e:	d058      	beq.n	800b002 <HAL_TIM_ConfigClockSource+0x18a>
 800af50:	2b40      	cmp	r3, #64	; 0x40
 800af52:	d86f      	bhi.n	800b034 <HAL_TIM_ConfigClockSource+0x1bc>
 800af54:	2b30      	cmp	r3, #48	; 0x30
 800af56:	d064      	beq.n	800b022 <HAL_TIM_ConfigClockSource+0x1aa>
 800af58:	2b30      	cmp	r3, #48	; 0x30
 800af5a:	d86b      	bhi.n	800b034 <HAL_TIM_ConfigClockSource+0x1bc>
 800af5c:	2b20      	cmp	r3, #32
 800af5e:	d060      	beq.n	800b022 <HAL_TIM_ConfigClockSource+0x1aa>
 800af60:	2b20      	cmp	r3, #32
 800af62:	d867      	bhi.n	800b034 <HAL_TIM_ConfigClockSource+0x1bc>
 800af64:	2b00      	cmp	r3, #0
 800af66:	d05c      	beq.n	800b022 <HAL_TIM_ConfigClockSource+0x1aa>
 800af68:	2b10      	cmp	r3, #16
 800af6a:	d05a      	beq.n	800b022 <HAL_TIM_ConfigClockSource+0x1aa>
 800af6c:	e062      	b.n	800b034 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6818      	ldr	r0, [r3, #0]
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	6899      	ldr	r1, [r3, #8]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	685a      	ldr	r2, [r3, #4]
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	f000 f9b3 	bl	800b2e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800af90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68ba      	ldr	r2, [r7, #8]
 800af98:	609a      	str	r2, [r3, #8]
      break;
 800af9a:	e04f      	b.n	800b03c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6818      	ldr	r0, [r3, #0]
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	6899      	ldr	r1, [r3, #8]
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	685a      	ldr	r2, [r3, #4]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	f000 f99c 	bl	800b2e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689a      	ldr	r2, [r3, #8]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800afbe:	609a      	str	r2, [r3, #8]
      break;
 800afc0:	e03c      	b.n	800b03c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6818      	ldr	r0, [r3, #0]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	6859      	ldr	r1, [r3, #4]
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	461a      	mov	r2, r3
 800afd0:	f000 f90c 	bl	800b1ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2150      	movs	r1, #80	; 0x50
 800afda:	4618      	mov	r0, r3
 800afdc:	f000 f966 	bl	800b2ac <TIM_ITRx_SetConfig>
      break;
 800afe0:	e02c      	b.n	800b03c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6818      	ldr	r0, [r3, #0]
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	6859      	ldr	r1, [r3, #4]
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	461a      	mov	r2, r3
 800aff0:	f000 f92b 	bl	800b24a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2160      	movs	r1, #96	; 0x60
 800affa:	4618      	mov	r0, r3
 800affc:	f000 f956 	bl	800b2ac <TIM_ITRx_SetConfig>
      break;
 800b000:	e01c      	b.n	800b03c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6818      	ldr	r0, [r3, #0]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	6859      	ldr	r1, [r3, #4]
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	68db      	ldr	r3, [r3, #12]
 800b00e:	461a      	mov	r2, r3
 800b010:	f000 f8ec 	bl	800b1ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2140      	movs	r1, #64	; 0x40
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 f946 	bl	800b2ac <TIM_ITRx_SetConfig>
      break;
 800b020:	e00c      	b.n	800b03c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4619      	mov	r1, r3
 800b02c:	4610      	mov	r0, r2
 800b02e:	f000 f93d 	bl	800b2ac <TIM_ITRx_SetConfig>
      break;
 800b032:	e003      	b.n	800b03c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	73fb      	strb	r3, [r7, #15]
      break;
 800b038:	e000      	b.n	800b03c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b03a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	ffceff88 	.word	0xffceff88
 800b05c:	00100040 	.word	0x00100040
 800b060:	00100030 	.word	0x00100030
 800b064:	00100020 	.word	0x00100020

0800b068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b070:	bf00      	nop
 800b072:	370c      	adds	r7, #12
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr

0800b07c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b084:	bf00      	nop
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b0ac:	bf00      	nop
 800b0ae:	370c      	adds	r7, #12
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a40      	ldr	r2, [pc, #256]	; (800b1cc <TIM_Base_SetConfig+0x114>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d013      	beq.n	800b0f8 <TIM_Base_SetConfig+0x40>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0d6:	d00f      	beq.n	800b0f8 <TIM_Base_SetConfig+0x40>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4a3d      	ldr	r2, [pc, #244]	; (800b1d0 <TIM_Base_SetConfig+0x118>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d00b      	beq.n	800b0f8 <TIM_Base_SetConfig+0x40>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a3c      	ldr	r2, [pc, #240]	; (800b1d4 <TIM_Base_SetConfig+0x11c>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d007      	beq.n	800b0f8 <TIM_Base_SetConfig+0x40>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a3b      	ldr	r2, [pc, #236]	; (800b1d8 <TIM_Base_SetConfig+0x120>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d003      	beq.n	800b0f8 <TIM_Base_SetConfig+0x40>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a3a      	ldr	r2, [pc, #232]	; (800b1dc <TIM_Base_SetConfig+0x124>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d108      	bne.n	800b10a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4313      	orrs	r3, r2
 800b108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a2f      	ldr	r2, [pc, #188]	; (800b1cc <TIM_Base_SetConfig+0x114>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d01f      	beq.n	800b152 <TIM_Base_SetConfig+0x9a>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b118:	d01b      	beq.n	800b152 <TIM_Base_SetConfig+0x9a>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a2c      	ldr	r2, [pc, #176]	; (800b1d0 <TIM_Base_SetConfig+0x118>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d017      	beq.n	800b152 <TIM_Base_SetConfig+0x9a>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4a2b      	ldr	r2, [pc, #172]	; (800b1d4 <TIM_Base_SetConfig+0x11c>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d013      	beq.n	800b152 <TIM_Base_SetConfig+0x9a>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a2a      	ldr	r2, [pc, #168]	; (800b1d8 <TIM_Base_SetConfig+0x120>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d00f      	beq.n	800b152 <TIM_Base_SetConfig+0x9a>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a29      	ldr	r2, [pc, #164]	; (800b1dc <TIM_Base_SetConfig+0x124>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d00b      	beq.n	800b152 <TIM_Base_SetConfig+0x9a>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a28      	ldr	r2, [pc, #160]	; (800b1e0 <TIM_Base_SetConfig+0x128>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d007      	beq.n	800b152 <TIM_Base_SetConfig+0x9a>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a27      	ldr	r2, [pc, #156]	; (800b1e4 <TIM_Base_SetConfig+0x12c>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d003      	beq.n	800b152 <TIM_Base_SetConfig+0x9a>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a26      	ldr	r2, [pc, #152]	; (800b1e8 <TIM_Base_SetConfig+0x130>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d108      	bne.n	800b164 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	4313      	orrs	r3, r2
 800b162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	695b      	ldr	r3, [r3, #20]
 800b16e:	4313      	orrs	r3, r2
 800b170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	689a      	ldr	r2, [r3, #8]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4a10      	ldr	r2, [pc, #64]	; (800b1cc <TIM_Base_SetConfig+0x114>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d00f      	beq.n	800b1b0 <TIM_Base_SetConfig+0xf8>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4a12      	ldr	r2, [pc, #72]	; (800b1dc <TIM_Base_SetConfig+0x124>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d00b      	beq.n	800b1b0 <TIM_Base_SetConfig+0xf8>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4a11      	ldr	r2, [pc, #68]	; (800b1e0 <TIM_Base_SetConfig+0x128>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d007      	beq.n	800b1b0 <TIM_Base_SetConfig+0xf8>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4a10      	ldr	r2, [pc, #64]	; (800b1e4 <TIM_Base_SetConfig+0x12c>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d003      	beq.n	800b1b0 <TIM_Base_SetConfig+0xf8>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a0f      	ldr	r2, [pc, #60]	; (800b1e8 <TIM_Base_SetConfig+0x130>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d103      	bne.n	800b1b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	691a      	ldr	r2, [r3, #16]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	615a      	str	r2, [r3, #20]
}
 800b1be:	bf00      	nop
 800b1c0:	3714      	adds	r7, #20
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	40010000 	.word	0x40010000
 800b1d0:	40000400 	.word	0x40000400
 800b1d4:	40000800 	.word	0x40000800
 800b1d8:	40000c00 	.word	0x40000c00
 800b1dc:	40010400 	.word	0x40010400
 800b1e0:	40014000 	.word	0x40014000
 800b1e4:	40014400 	.word	0x40014400
 800b1e8:	40014800 	.word	0x40014800

0800b1ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b087      	sub	sp, #28
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6a1b      	ldr	r3, [r3, #32]
 800b1fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6a1b      	ldr	r3, [r3, #32]
 800b202:	f023 0201 	bic.w	r2, r3, #1
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	699b      	ldr	r3, [r3, #24]
 800b20e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	011b      	lsls	r3, r3, #4
 800b21c:	693a      	ldr	r2, [r7, #16]
 800b21e:	4313      	orrs	r3, r2
 800b220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f023 030a 	bic.w	r3, r3, #10
 800b228:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	4313      	orrs	r3, r2
 800b230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	693a      	ldr	r2, [r7, #16]
 800b236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	621a      	str	r2, [r3, #32]
}
 800b23e:	bf00      	nop
 800b240:	371c      	adds	r7, #28
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b24a:	b480      	push	{r7}
 800b24c:	b087      	sub	sp, #28
 800b24e:	af00      	add	r7, sp, #0
 800b250:	60f8      	str	r0, [r7, #12]
 800b252:	60b9      	str	r1, [r7, #8]
 800b254:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6a1b      	ldr	r3, [r3, #32]
 800b25a:	f023 0210 	bic.w	r2, r3, #16
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	699b      	ldr	r3, [r3, #24]
 800b266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6a1b      	ldr	r3, [r3, #32]
 800b26c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b274:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	031b      	lsls	r3, r3, #12
 800b27a:	697a      	ldr	r2, [r7, #20]
 800b27c:	4313      	orrs	r3, r2
 800b27e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b286:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	011b      	lsls	r3, r3, #4
 800b28c:	693a      	ldr	r2, [r7, #16]
 800b28e:	4313      	orrs	r3, r2
 800b290:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	697a      	ldr	r2, [r7, #20]
 800b296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	693a      	ldr	r2, [r7, #16]
 800b29c:	621a      	str	r2, [r3, #32]
}
 800b29e:	bf00      	nop
 800b2a0:	371c      	adds	r7, #28
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
	...

0800b2ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	4b09      	ldr	r3, [pc, #36]	; (800b2e4 <TIM_ITRx_SetConfig+0x38>)
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b2c4:	683a      	ldr	r2, [r7, #0]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	f043 0307 	orr.w	r3, r3, #7
 800b2ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	609a      	str	r2, [r3, #8]
}
 800b2d6:	bf00      	nop
 800b2d8:	3714      	adds	r7, #20
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	ffcfff8f 	.word	0xffcfff8f

0800b2e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b087      	sub	sp, #28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
 800b2f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	021a      	lsls	r2, r3, #8
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	431a      	orrs	r2, r3
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	4313      	orrs	r3, r2
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	4313      	orrs	r3, r2
 800b314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	609a      	str	r2, [r3, #8]
}
 800b31c:	bf00      	nop
 800b31e:	371c      	adds	r7, #28
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b328:	b480      	push	{r7}
 800b32a:	b087      	sub	sp, #28
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	f003 031f 	and.w	r3, r3, #31
 800b33a:	2201      	movs	r2, #1
 800b33c:	fa02 f303 	lsl.w	r3, r2, r3
 800b340:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	6a1a      	ldr	r2, [r3, #32]
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	43db      	mvns	r3, r3
 800b34a:	401a      	ands	r2, r3
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6a1a      	ldr	r2, [r3, #32]
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	f003 031f 	and.w	r3, r3, #31
 800b35a:	6879      	ldr	r1, [r7, #4]
 800b35c:	fa01 f303 	lsl.w	r3, r1, r3
 800b360:	431a      	orrs	r2, r3
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	621a      	str	r2, [r3, #32]
}
 800b366:	bf00      	nop
 800b368:	371c      	adds	r7, #28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
	...

0800b374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b384:	2b01      	cmp	r3, #1
 800b386:	d101      	bne.n	800b38c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b388:	2302      	movs	r3, #2
 800b38a:	e06d      	b.n	800b468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2202      	movs	r2, #2
 800b398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a30      	ldr	r2, [pc, #192]	; (800b474 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d004      	beq.n	800b3c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a2f      	ldr	r2, [pc, #188]	; (800b478 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d108      	bne.n	800b3d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b3c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	68fa      	ldr	r2, [r7, #12]
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a20      	ldr	r2, [pc, #128]	; (800b474 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d022      	beq.n	800b43c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3fe:	d01d      	beq.n	800b43c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a1d      	ldr	r2, [pc, #116]	; (800b47c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d018      	beq.n	800b43c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a1c      	ldr	r2, [pc, #112]	; (800b480 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d013      	beq.n	800b43c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a1a      	ldr	r2, [pc, #104]	; (800b484 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d00e      	beq.n	800b43c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a15      	ldr	r2, [pc, #84]	; (800b478 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d009      	beq.n	800b43c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a16      	ldr	r2, [pc, #88]	; (800b488 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d004      	beq.n	800b43c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a15      	ldr	r2, [pc, #84]	; (800b48c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d10c      	bne.n	800b456 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b442:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	68ba      	ldr	r2, [r7, #8]
 800b454:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3714      	adds	r7, #20
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr
 800b474:	40010000 	.word	0x40010000
 800b478:	40010400 	.word	0x40010400
 800b47c:	40000400 	.word	0x40000400
 800b480:	40000800 	.word	0x40000800
 800b484:	40000c00 	.word	0x40000c00
 800b488:	40001800 	.word	0x40001800
 800b48c:	40014000 	.word	0x40014000

0800b490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b498:	bf00      	nop
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4ac:	bf00      	nop
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <__errno>:
 800b4cc:	4b01      	ldr	r3, [pc, #4]	; (800b4d4 <__errno+0x8>)
 800b4ce:	6818      	ldr	r0, [r3, #0]
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	24000014 	.word	0x24000014

0800b4d8 <__libc_init_array>:
 800b4d8:	b570      	push	{r4, r5, r6, lr}
 800b4da:	4d0d      	ldr	r5, [pc, #52]	; (800b510 <__libc_init_array+0x38>)
 800b4dc:	4c0d      	ldr	r4, [pc, #52]	; (800b514 <__libc_init_array+0x3c>)
 800b4de:	1b64      	subs	r4, r4, r5
 800b4e0:	10a4      	asrs	r4, r4, #2
 800b4e2:	2600      	movs	r6, #0
 800b4e4:	42a6      	cmp	r6, r4
 800b4e6:	d109      	bne.n	800b4fc <__libc_init_array+0x24>
 800b4e8:	4d0b      	ldr	r5, [pc, #44]	; (800b518 <__libc_init_array+0x40>)
 800b4ea:	4c0c      	ldr	r4, [pc, #48]	; (800b51c <__libc_init_array+0x44>)
 800b4ec:	f000 fa4e 	bl	800b98c <_init>
 800b4f0:	1b64      	subs	r4, r4, r5
 800b4f2:	10a4      	asrs	r4, r4, #2
 800b4f4:	2600      	movs	r6, #0
 800b4f6:	42a6      	cmp	r6, r4
 800b4f8:	d105      	bne.n	800b506 <__libc_init_array+0x2e>
 800b4fa:	bd70      	pop	{r4, r5, r6, pc}
 800b4fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b500:	4798      	blx	r3
 800b502:	3601      	adds	r6, #1
 800b504:	e7ee      	b.n	800b4e4 <__libc_init_array+0xc>
 800b506:	f855 3b04 	ldr.w	r3, [r5], #4
 800b50a:	4798      	blx	r3
 800b50c:	3601      	adds	r6, #1
 800b50e:	e7f2      	b.n	800b4f6 <__libc_init_array+0x1e>
 800b510:	0800bb70 	.word	0x0800bb70
 800b514:	0800bb70 	.word	0x0800bb70
 800b518:	0800bb70 	.word	0x0800bb70
 800b51c:	0800bb74 	.word	0x0800bb74

0800b520 <malloc>:
 800b520:	4b02      	ldr	r3, [pc, #8]	; (800b52c <malloc+0xc>)
 800b522:	4601      	mov	r1, r0
 800b524:	6818      	ldr	r0, [r3, #0]
 800b526:	f000 b87f 	b.w	800b628 <_malloc_r>
 800b52a:	bf00      	nop
 800b52c:	24000014 	.word	0x24000014

0800b530 <free>:
 800b530:	4b02      	ldr	r3, [pc, #8]	; (800b53c <free+0xc>)
 800b532:	4601      	mov	r1, r0
 800b534:	6818      	ldr	r0, [r3, #0]
 800b536:	f000 b80b 	b.w	800b550 <_free_r>
 800b53a:	bf00      	nop
 800b53c:	24000014 	.word	0x24000014

0800b540 <memset>:
 800b540:	4402      	add	r2, r0
 800b542:	4603      	mov	r3, r0
 800b544:	4293      	cmp	r3, r2
 800b546:	d100      	bne.n	800b54a <memset+0xa>
 800b548:	4770      	bx	lr
 800b54a:	f803 1b01 	strb.w	r1, [r3], #1
 800b54e:	e7f9      	b.n	800b544 <memset+0x4>

0800b550 <_free_r>:
 800b550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b552:	2900      	cmp	r1, #0
 800b554:	d044      	beq.n	800b5e0 <_free_r+0x90>
 800b556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b55a:	9001      	str	r0, [sp, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	f1a1 0404 	sub.w	r4, r1, #4
 800b562:	bfb8      	it	lt
 800b564:	18e4      	addlt	r4, r4, r3
 800b566:	f000 f8e3 	bl	800b730 <__malloc_lock>
 800b56a:	4a1e      	ldr	r2, [pc, #120]	; (800b5e4 <_free_r+0x94>)
 800b56c:	9801      	ldr	r0, [sp, #4]
 800b56e:	6813      	ldr	r3, [r2, #0]
 800b570:	b933      	cbnz	r3, 800b580 <_free_r+0x30>
 800b572:	6063      	str	r3, [r4, #4]
 800b574:	6014      	str	r4, [r2, #0]
 800b576:	b003      	add	sp, #12
 800b578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b57c:	f000 b8de 	b.w	800b73c <__malloc_unlock>
 800b580:	42a3      	cmp	r3, r4
 800b582:	d908      	bls.n	800b596 <_free_r+0x46>
 800b584:	6825      	ldr	r5, [r4, #0]
 800b586:	1961      	adds	r1, r4, r5
 800b588:	428b      	cmp	r3, r1
 800b58a:	bf01      	itttt	eq
 800b58c:	6819      	ldreq	r1, [r3, #0]
 800b58e:	685b      	ldreq	r3, [r3, #4]
 800b590:	1949      	addeq	r1, r1, r5
 800b592:	6021      	streq	r1, [r4, #0]
 800b594:	e7ed      	b.n	800b572 <_free_r+0x22>
 800b596:	461a      	mov	r2, r3
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	b10b      	cbz	r3, 800b5a0 <_free_r+0x50>
 800b59c:	42a3      	cmp	r3, r4
 800b59e:	d9fa      	bls.n	800b596 <_free_r+0x46>
 800b5a0:	6811      	ldr	r1, [r2, #0]
 800b5a2:	1855      	adds	r5, r2, r1
 800b5a4:	42a5      	cmp	r5, r4
 800b5a6:	d10b      	bne.n	800b5c0 <_free_r+0x70>
 800b5a8:	6824      	ldr	r4, [r4, #0]
 800b5aa:	4421      	add	r1, r4
 800b5ac:	1854      	adds	r4, r2, r1
 800b5ae:	42a3      	cmp	r3, r4
 800b5b0:	6011      	str	r1, [r2, #0]
 800b5b2:	d1e0      	bne.n	800b576 <_free_r+0x26>
 800b5b4:	681c      	ldr	r4, [r3, #0]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	6053      	str	r3, [r2, #4]
 800b5ba:	4421      	add	r1, r4
 800b5bc:	6011      	str	r1, [r2, #0]
 800b5be:	e7da      	b.n	800b576 <_free_r+0x26>
 800b5c0:	d902      	bls.n	800b5c8 <_free_r+0x78>
 800b5c2:	230c      	movs	r3, #12
 800b5c4:	6003      	str	r3, [r0, #0]
 800b5c6:	e7d6      	b.n	800b576 <_free_r+0x26>
 800b5c8:	6825      	ldr	r5, [r4, #0]
 800b5ca:	1961      	adds	r1, r4, r5
 800b5cc:	428b      	cmp	r3, r1
 800b5ce:	bf04      	itt	eq
 800b5d0:	6819      	ldreq	r1, [r3, #0]
 800b5d2:	685b      	ldreq	r3, [r3, #4]
 800b5d4:	6063      	str	r3, [r4, #4]
 800b5d6:	bf04      	itt	eq
 800b5d8:	1949      	addeq	r1, r1, r5
 800b5da:	6021      	streq	r1, [r4, #0]
 800b5dc:	6054      	str	r4, [r2, #4]
 800b5de:	e7ca      	b.n	800b576 <_free_r+0x26>
 800b5e0:	b003      	add	sp, #12
 800b5e2:	bd30      	pop	{r4, r5, pc}
 800b5e4:	24000c98 	.word	0x24000c98

0800b5e8 <sbrk_aligned>:
 800b5e8:	b570      	push	{r4, r5, r6, lr}
 800b5ea:	4e0e      	ldr	r6, [pc, #56]	; (800b624 <sbrk_aligned+0x3c>)
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	6831      	ldr	r1, [r6, #0]
 800b5f0:	4605      	mov	r5, r0
 800b5f2:	b911      	cbnz	r1, 800b5fa <sbrk_aligned+0x12>
 800b5f4:	f000 f88c 	bl	800b710 <_sbrk_r>
 800b5f8:	6030      	str	r0, [r6, #0]
 800b5fa:	4621      	mov	r1, r4
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	f000 f887 	bl	800b710 <_sbrk_r>
 800b602:	1c43      	adds	r3, r0, #1
 800b604:	d00a      	beq.n	800b61c <sbrk_aligned+0x34>
 800b606:	1cc4      	adds	r4, r0, #3
 800b608:	f024 0403 	bic.w	r4, r4, #3
 800b60c:	42a0      	cmp	r0, r4
 800b60e:	d007      	beq.n	800b620 <sbrk_aligned+0x38>
 800b610:	1a21      	subs	r1, r4, r0
 800b612:	4628      	mov	r0, r5
 800b614:	f000 f87c 	bl	800b710 <_sbrk_r>
 800b618:	3001      	adds	r0, #1
 800b61a:	d101      	bne.n	800b620 <sbrk_aligned+0x38>
 800b61c:	f04f 34ff 	mov.w	r4, #4294967295
 800b620:	4620      	mov	r0, r4
 800b622:	bd70      	pop	{r4, r5, r6, pc}
 800b624:	24000c9c 	.word	0x24000c9c

0800b628 <_malloc_r>:
 800b628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b62c:	1ccd      	adds	r5, r1, #3
 800b62e:	f025 0503 	bic.w	r5, r5, #3
 800b632:	3508      	adds	r5, #8
 800b634:	2d0c      	cmp	r5, #12
 800b636:	bf38      	it	cc
 800b638:	250c      	movcc	r5, #12
 800b63a:	2d00      	cmp	r5, #0
 800b63c:	4607      	mov	r7, r0
 800b63e:	db01      	blt.n	800b644 <_malloc_r+0x1c>
 800b640:	42a9      	cmp	r1, r5
 800b642:	d905      	bls.n	800b650 <_malloc_r+0x28>
 800b644:	230c      	movs	r3, #12
 800b646:	603b      	str	r3, [r7, #0]
 800b648:	2600      	movs	r6, #0
 800b64a:	4630      	mov	r0, r6
 800b64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b650:	4e2e      	ldr	r6, [pc, #184]	; (800b70c <_malloc_r+0xe4>)
 800b652:	f000 f86d 	bl	800b730 <__malloc_lock>
 800b656:	6833      	ldr	r3, [r6, #0]
 800b658:	461c      	mov	r4, r3
 800b65a:	bb34      	cbnz	r4, 800b6aa <_malloc_r+0x82>
 800b65c:	4629      	mov	r1, r5
 800b65e:	4638      	mov	r0, r7
 800b660:	f7ff ffc2 	bl	800b5e8 <sbrk_aligned>
 800b664:	1c43      	adds	r3, r0, #1
 800b666:	4604      	mov	r4, r0
 800b668:	d14d      	bne.n	800b706 <_malloc_r+0xde>
 800b66a:	6834      	ldr	r4, [r6, #0]
 800b66c:	4626      	mov	r6, r4
 800b66e:	2e00      	cmp	r6, #0
 800b670:	d140      	bne.n	800b6f4 <_malloc_r+0xcc>
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	4631      	mov	r1, r6
 800b676:	4638      	mov	r0, r7
 800b678:	eb04 0803 	add.w	r8, r4, r3
 800b67c:	f000 f848 	bl	800b710 <_sbrk_r>
 800b680:	4580      	cmp	r8, r0
 800b682:	d13a      	bne.n	800b6fa <_malloc_r+0xd2>
 800b684:	6821      	ldr	r1, [r4, #0]
 800b686:	3503      	adds	r5, #3
 800b688:	1a6d      	subs	r5, r5, r1
 800b68a:	f025 0503 	bic.w	r5, r5, #3
 800b68e:	3508      	adds	r5, #8
 800b690:	2d0c      	cmp	r5, #12
 800b692:	bf38      	it	cc
 800b694:	250c      	movcc	r5, #12
 800b696:	4629      	mov	r1, r5
 800b698:	4638      	mov	r0, r7
 800b69a:	f7ff ffa5 	bl	800b5e8 <sbrk_aligned>
 800b69e:	3001      	adds	r0, #1
 800b6a0:	d02b      	beq.n	800b6fa <_malloc_r+0xd2>
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	442b      	add	r3, r5
 800b6a6:	6023      	str	r3, [r4, #0]
 800b6a8:	e00e      	b.n	800b6c8 <_malloc_r+0xa0>
 800b6aa:	6822      	ldr	r2, [r4, #0]
 800b6ac:	1b52      	subs	r2, r2, r5
 800b6ae:	d41e      	bmi.n	800b6ee <_malloc_r+0xc6>
 800b6b0:	2a0b      	cmp	r2, #11
 800b6b2:	d916      	bls.n	800b6e2 <_malloc_r+0xba>
 800b6b4:	1961      	adds	r1, r4, r5
 800b6b6:	42a3      	cmp	r3, r4
 800b6b8:	6025      	str	r5, [r4, #0]
 800b6ba:	bf18      	it	ne
 800b6bc:	6059      	strne	r1, [r3, #4]
 800b6be:	6863      	ldr	r3, [r4, #4]
 800b6c0:	bf08      	it	eq
 800b6c2:	6031      	streq	r1, [r6, #0]
 800b6c4:	5162      	str	r2, [r4, r5]
 800b6c6:	604b      	str	r3, [r1, #4]
 800b6c8:	4638      	mov	r0, r7
 800b6ca:	f104 060b 	add.w	r6, r4, #11
 800b6ce:	f000 f835 	bl	800b73c <__malloc_unlock>
 800b6d2:	f026 0607 	bic.w	r6, r6, #7
 800b6d6:	1d23      	adds	r3, r4, #4
 800b6d8:	1af2      	subs	r2, r6, r3
 800b6da:	d0b6      	beq.n	800b64a <_malloc_r+0x22>
 800b6dc:	1b9b      	subs	r3, r3, r6
 800b6de:	50a3      	str	r3, [r4, r2]
 800b6e0:	e7b3      	b.n	800b64a <_malloc_r+0x22>
 800b6e2:	6862      	ldr	r2, [r4, #4]
 800b6e4:	42a3      	cmp	r3, r4
 800b6e6:	bf0c      	ite	eq
 800b6e8:	6032      	streq	r2, [r6, #0]
 800b6ea:	605a      	strne	r2, [r3, #4]
 800b6ec:	e7ec      	b.n	800b6c8 <_malloc_r+0xa0>
 800b6ee:	4623      	mov	r3, r4
 800b6f0:	6864      	ldr	r4, [r4, #4]
 800b6f2:	e7b2      	b.n	800b65a <_malloc_r+0x32>
 800b6f4:	4634      	mov	r4, r6
 800b6f6:	6876      	ldr	r6, [r6, #4]
 800b6f8:	e7b9      	b.n	800b66e <_malloc_r+0x46>
 800b6fa:	230c      	movs	r3, #12
 800b6fc:	603b      	str	r3, [r7, #0]
 800b6fe:	4638      	mov	r0, r7
 800b700:	f000 f81c 	bl	800b73c <__malloc_unlock>
 800b704:	e7a1      	b.n	800b64a <_malloc_r+0x22>
 800b706:	6025      	str	r5, [r4, #0]
 800b708:	e7de      	b.n	800b6c8 <_malloc_r+0xa0>
 800b70a:	bf00      	nop
 800b70c:	24000c98 	.word	0x24000c98

0800b710 <_sbrk_r>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	4d06      	ldr	r5, [pc, #24]	; (800b72c <_sbrk_r+0x1c>)
 800b714:	2300      	movs	r3, #0
 800b716:	4604      	mov	r4, r0
 800b718:	4608      	mov	r0, r1
 800b71a:	602b      	str	r3, [r5, #0]
 800b71c:	f7f6 ff3a 	bl	8002594 <_sbrk>
 800b720:	1c43      	adds	r3, r0, #1
 800b722:	d102      	bne.n	800b72a <_sbrk_r+0x1a>
 800b724:	682b      	ldr	r3, [r5, #0]
 800b726:	b103      	cbz	r3, 800b72a <_sbrk_r+0x1a>
 800b728:	6023      	str	r3, [r4, #0]
 800b72a:	bd38      	pop	{r3, r4, r5, pc}
 800b72c:	24000ca0 	.word	0x24000ca0

0800b730 <__malloc_lock>:
 800b730:	4801      	ldr	r0, [pc, #4]	; (800b738 <__malloc_lock+0x8>)
 800b732:	f000 b809 	b.w	800b748 <__retarget_lock_acquire_recursive>
 800b736:	bf00      	nop
 800b738:	24000ca4 	.word	0x24000ca4

0800b73c <__malloc_unlock>:
 800b73c:	4801      	ldr	r0, [pc, #4]	; (800b744 <__malloc_unlock+0x8>)
 800b73e:	f000 b804 	b.w	800b74a <__retarget_lock_release_recursive>
 800b742:	bf00      	nop
 800b744:	24000ca4 	.word	0x24000ca4

0800b748 <__retarget_lock_acquire_recursive>:
 800b748:	4770      	bx	lr

0800b74a <__retarget_lock_release_recursive>:
 800b74a:	4770      	bx	lr

0800b74c <floorf>:
 800b74c:	ee10 3a10 	vmov	r3, s0
 800b750:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b754:	3a7f      	subs	r2, #127	; 0x7f
 800b756:	2a16      	cmp	r2, #22
 800b758:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b75c:	dc2a      	bgt.n	800b7b4 <floorf+0x68>
 800b75e:	2a00      	cmp	r2, #0
 800b760:	da11      	bge.n	800b786 <floorf+0x3a>
 800b762:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b7c4 <floorf+0x78>
 800b766:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b76a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b772:	dd05      	ble.n	800b780 <floorf+0x34>
 800b774:	2b00      	cmp	r3, #0
 800b776:	da23      	bge.n	800b7c0 <floorf+0x74>
 800b778:	4a13      	ldr	r2, [pc, #76]	; (800b7c8 <floorf+0x7c>)
 800b77a:	2900      	cmp	r1, #0
 800b77c:	bf18      	it	ne
 800b77e:	4613      	movne	r3, r2
 800b780:	ee00 3a10 	vmov	s0, r3
 800b784:	4770      	bx	lr
 800b786:	4911      	ldr	r1, [pc, #68]	; (800b7cc <floorf+0x80>)
 800b788:	4111      	asrs	r1, r2
 800b78a:	420b      	tst	r3, r1
 800b78c:	d0fa      	beq.n	800b784 <floorf+0x38>
 800b78e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b7c4 <floorf+0x78>
 800b792:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b796:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b79e:	ddef      	ble.n	800b780 <floorf+0x34>
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	bfbe      	ittt	lt
 800b7a4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b7a8:	fa40 f202 	asrlt.w	r2, r0, r2
 800b7ac:	189b      	addlt	r3, r3, r2
 800b7ae:	ea23 0301 	bic.w	r3, r3, r1
 800b7b2:	e7e5      	b.n	800b780 <floorf+0x34>
 800b7b4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b7b8:	d3e4      	bcc.n	800b784 <floorf+0x38>
 800b7ba:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b7be:	4770      	bx	lr
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	e7dd      	b.n	800b780 <floorf+0x34>
 800b7c4:	7149f2ca 	.word	0x7149f2ca
 800b7c8:	bf800000 	.word	0xbf800000
 800b7cc:	007fffff 	.word	0x007fffff

0800b7d0 <sinf_poly>:
 800b7d0:	07cb      	lsls	r3, r1, #31
 800b7d2:	d412      	bmi.n	800b7fa <sinf_poly+0x2a>
 800b7d4:	ee21 5b00 	vmul.f64	d5, d1, d0
 800b7d8:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 800b7dc:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800b7e0:	eea6 7b01 	vfma.f64	d7, d6, d1
 800b7e4:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 800b7e8:	ee21 1b05 	vmul.f64	d1, d1, d5
 800b7ec:	eea6 0b05 	vfma.f64	d0, d6, d5
 800b7f0:	eea7 0b01 	vfma.f64	d0, d7, d1
 800b7f4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b7f8:	4770      	bx	lr
 800b7fa:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 800b7fe:	ee21 5b01 	vmul.f64	d5, d1, d1
 800b802:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800b806:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800b80a:	eea1 7b06 	vfma.f64	d7, d1, d6
 800b80e:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 800b812:	eea1 0b06 	vfma.f64	d0, d1, d6
 800b816:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 800b81a:	ee21 1b05 	vmul.f64	d1, d1, d5
 800b81e:	eea5 0b06 	vfma.f64	d0, d5, d6
 800b822:	e7e5      	b.n	800b7f0 <sinf_poly+0x20>
 800b824:	0000      	movs	r0, r0
	...

0800b828 <sinf>:
 800b828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b82a:	ee10 4a10 	vmov	r4, s0
 800b82e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800b832:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800b836:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800b83a:	eef0 7a40 	vmov.f32	s15, s0
 800b83e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800b842:	d218      	bcs.n	800b876 <sinf+0x4e>
 800b844:	ee26 1b06 	vmul.f64	d1, d6, d6
 800b848:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800b84c:	d20a      	bcs.n	800b864 <sinf+0x3c>
 800b84e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800b852:	d103      	bne.n	800b85c <sinf+0x34>
 800b854:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800b858:	ed8d 1a01 	vstr	s2, [sp, #4]
 800b85c:	eeb0 0a67 	vmov.f32	s0, s15
 800b860:	b003      	add	sp, #12
 800b862:	bd30      	pop	{r4, r5, pc}
 800b864:	483a      	ldr	r0, [pc, #232]	; (800b950 <sinf+0x128>)
 800b866:	eeb0 0b46 	vmov.f64	d0, d6
 800b86a:	2100      	movs	r1, #0
 800b86c:	b003      	add	sp, #12
 800b86e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b872:	f7ff bfad 	b.w	800b7d0 <sinf_poly>
 800b876:	f240 422e 	movw	r2, #1070	; 0x42e
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d824      	bhi.n	800b8c8 <sinf+0xa0>
 800b87e:	4b34      	ldr	r3, [pc, #208]	; (800b950 <sinf+0x128>)
 800b880:	ed93 7b08 	vldr	d7, [r3, #32]
 800b884:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b888:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b88c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800b890:	ee17 1a90 	vmov	r1, s15
 800b894:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800b898:	1609      	asrs	r1, r1, #24
 800b89a:	ee07 1a90 	vmov	s15, r1
 800b89e:	f001 0203 	and.w	r2, r1, #3
 800b8a2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b8a6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800b8aa:	ed92 0b00 	vldr	d0, [r2]
 800b8ae:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800b8b2:	f011 0f02 	tst.w	r1, #2
 800b8b6:	eea5 6b47 	vfms.f64	d6, d5, d7
 800b8ba:	bf08      	it	eq
 800b8bc:	4618      	moveq	r0, r3
 800b8be:	ee26 1b06 	vmul.f64	d1, d6, d6
 800b8c2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800b8c6:	e7d1      	b.n	800b86c <sinf+0x44>
 800b8c8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800b8cc:	d237      	bcs.n	800b93e <sinf+0x116>
 800b8ce:	4a21      	ldr	r2, [pc, #132]	; (800b954 <sinf+0x12c>)
 800b8d0:	f3c4 6183 	ubfx	r1, r4, #26, #4
 800b8d4:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800b8d8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800b8dc:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800b8e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b8e4:	4083      	lsls	r3, r0
 800b8e6:	6a28      	ldr	r0, [r5, #32]
 800b8e8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b8ec:	fba3 1000 	umull	r1, r0, r3, r0
 800b8f0:	6929      	ldr	r1, [r5, #16]
 800b8f2:	435a      	muls	r2, r3
 800b8f4:	fbe3 0201 	umlal	r0, r2, r3, r1
 800b8f8:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 800b8fc:	0f8d      	lsrs	r5, r1, #30
 800b8fe:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800b902:	1a51      	subs	r1, r2, r1
 800b904:	f7f4 fe82 	bl	800060c <__aeabi_l2d>
 800b908:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800b90c:	4b10      	ldr	r3, [pc, #64]	; (800b950 <sinf+0x128>)
 800b90e:	f004 0203 	and.w	r2, r4, #3
 800b912:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b916:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800b948 <sinf+0x120>
 800b91a:	ed92 0b00 	vldr	d0, [r2]
 800b91e:	ec41 0b16 	vmov	d6, r0, r1
 800b922:	f014 0f02 	tst.w	r4, #2
 800b926:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b92a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800b92e:	4629      	mov	r1, r5
 800b930:	bf08      	it	eq
 800b932:	4618      	moveq	r0, r3
 800b934:	ee27 1b07 	vmul.f64	d1, d7, d7
 800b938:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b93c:	e796      	b.n	800b86c <sinf+0x44>
 800b93e:	b003      	add	sp, #12
 800b940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b944:	f000 b813 	b.w	800b96e <__math_invalidf>
 800b948:	54442d18 	.word	0x54442d18
 800b94c:	3c1921fb 	.word	0x3c1921fb
 800b950:	0800ba90 	.word	0x0800ba90
 800b954:	0800ba30 	.word	0x0800ba30

0800b958 <with_errnof>:
 800b958:	b513      	push	{r0, r1, r4, lr}
 800b95a:	4604      	mov	r4, r0
 800b95c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b960:	f7ff fdb4 	bl	800b4cc <__errno>
 800b964:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b968:	6004      	str	r4, [r0, #0]
 800b96a:	b002      	add	sp, #8
 800b96c:	bd10      	pop	{r4, pc}

0800b96e <__math_invalidf>:
 800b96e:	eef0 7a40 	vmov.f32	s15, s0
 800b972:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b976:	eef4 7a67 	vcmp.f32	s15, s15
 800b97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b97e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800b982:	d602      	bvs.n	800b98a <__math_invalidf+0x1c>
 800b984:	2021      	movs	r0, #33	; 0x21
 800b986:	f7ff bfe7 	b.w	800b958 <with_errnof>
 800b98a:	4770      	bx	lr

0800b98c <_init>:
 800b98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98e:	bf00      	nop
 800b990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b992:	bc08      	pop	{r3}
 800b994:	469e      	mov	lr, r3
 800b996:	4770      	bx	lr

0800b998 <_fini>:
 800b998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99a:	bf00      	nop
 800b99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b99e:	bc08      	pop	{r3}
 800b9a0:	469e      	mov	lr, r3
 800b9a2:	4770      	bx	lr
