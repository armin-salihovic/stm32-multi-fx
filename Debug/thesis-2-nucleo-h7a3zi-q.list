
thesis-2-nucleo-h7a3zi-q.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b874  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800bb28  0800bb28  0001bb28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bca8  0800bca8  0001bca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bcb0  0800bcb0  0001bcb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bcb4  0800bcb4  0001bcb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800bcb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000be0  24000078  0800bd30  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000c58  0800bd30  00020c58  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f951  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f5b  00000000  00000000  0003f9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017f8  00000000  00000000  00043958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001630  00000000  00000000  00045150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034b82  00000000  00000000  00046780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021c72  00000000  00000000  0007b302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001559c2  00000000  00000000  0009cf74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f2936  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000681c  00000000  00000000  001f2988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800bb0c 	.word	0x0800bb0c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	0800bb0c 	.word	0x0800bb0c

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b974 	b.w	8000968 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	4604      	mov	r4, r0
 80006a0:	468e      	mov	lr, r1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d14d      	bne.n	8000742 <__udivmoddi4+0xaa>
 80006a6:	428a      	cmp	r2, r1
 80006a8:	4694      	mov	ip, r2
 80006aa:	d969      	bls.n	8000780 <__udivmoddi4+0xe8>
 80006ac:	fab2 f282 	clz	r2, r2
 80006b0:	b152      	cbz	r2, 80006c8 <__udivmoddi4+0x30>
 80006b2:	fa01 f302 	lsl.w	r3, r1, r2
 80006b6:	f1c2 0120 	rsb	r1, r2, #32
 80006ba:	fa20 f101 	lsr.w	r1, r0, r1
 80006be:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c2:	ea41 0e03 	orr.w	lr, r1, r3
 80006c6:	4094      	lsls	r4, r2
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	0c21      	lsrs	r1, r4, #16
 80006ce:	fbbe f6f8 	udiv	r6, lr, r8
 80006d2:	fa1f f78c 	uxth.w	r7, ip
 80006d6:	fb08 e316 	mls	r3, r8, r6, lr
 80006da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006de:	fb06 f107 	mul.w	r1, r6, r7
 80006e2:	4299      	cmp	r1, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x64>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ee:	f080 811f 	bcs.w	8000930 <__udivmoddi4+0x298>
 80006f2:	4299      	cmp	r1, r3
 80006f4:	f240 811c 	bls.w	8000930 <__udivmoddi4+0x298>
 80006f8:	3e02      	subs	r6, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a5b      	subs	r3, r3, r1
 80006fe:	b2a4      	uxth	r4, r4
 8000700:	fbb3 f0f8 	udiv	r0, r3, r8
 8000704:	fb08 3310 	mls	r3, r8, r0, r3
 8000708:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800070c:	fb00 f707 	mul.w	r7, r0, r7
 8000710:	42a7      	cmp	r7, r4
 8000712:	d90a      	bls.n	800072a <__udivmoddi4+0x92>
 8000714:	eb1c 0404 	adds.w	r4, ip, r4
 8000718:	f100 33ff 	add.w	r3, r0, #4294967295
 800071c:	f080 810a 	bcs.w	8000934 <__udivmoddi4+0x29c>
 8000720:	42a7      	cmp	r7, r4
 8000722:	f240 8107 	bls.w	8000934 <__udivmoddi4+0x29c>
 8000726:	4464      	add	r4, ip
 8000728:	3802      	subs	r0, #2
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	1be4      	subs	r4, r4, r7
 8000730:	2600      	movs	r6, #0
 8000732:	b11d      	cbz	r5, 800073c <__udivmoddi4+0xa4>
 8000734:	40d4      	lsrs	r4, r2
 8000736:	2300      	movs	r3, #0
 8000738:	e9c5 4300 	strd	r4, r3, [r5]
 800073c:	4631      	mov	r1, r6
 800073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000742:	428b      	cmp	r3, r1
 8000744:	d909      	bls.n	800075a <__udivmoddi4+0xc2>
 8000746:	2d00      	cmp	r5, #0
 8000748:	f000 80ef 	beq.w	800092a <__udivmoddi4+0x292>
 800074c:	2600      	movs	r6, #0
 800074e:	e9c5 0100 	strd	r0, r1, [r5]
 8000752:	4630      	mov	r0, r6
 8000754:	4631      	mov	r1, r6
 8000756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075a:	fab3 f683 	clz	r6, r3
 800075e:	2e00      	cmp	r6, #0
 8000760:	d14a      	bne.n	80007f8 <__udivmoddi4+0x160>
 8000762:	428b      	cmp	r3, r1
 8000764:	d302      	bcc.n	800076c <__udivmoddi4+0xd4>
 8000766:	4282      	cmp	r2, r0
 8000768:	f200 80f9 	bhi.w	800095e <__udivmoddi4+0x2c6>
 800076c:	1a84      	subs	r4, r0, r2
 800076e:	eb61 0303 	sbc.w	r3, r1, r3
 8000772:	2001      	movs	r0, #1
 8000774:	469e      	mov	lr, r3
 8000776:	2d00      	cmp	r5, #0
 8000778:	d0e0      	beq.n	800073c <__udivmoddi4+0xa4>
 800077a:	e9c5 4e00 	strd	r4, lr, [r5]
 800077e:	e7dd      	b.n	800073c <__udivmoddi4+0xa4>
 8000780:	b902      	cbnz	r2, 8000784 <__udivmoddi4+0xec>
 8000782:	deff      	udf	#255	; 0xff
 8000784:	fab2 f282 	clz	r2, r2
 8000788:	2a00      	cmp	r2, #0
 800078a:	f040 8092 	bne.w	80008b2 <__udivmoddi4+0x21a>
 800078e:	eba1 010c 	sub.w	r1, r1, ip
 8000792:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000796:	fa1f fe8c 	uxth.w	lr, ip
 800079a:	2601      	movs	r6, #1
 800079c:	0c20      	lsrs	r0, r4, #16
 800079e:	fbb1 f3f7 	udiv	r3, r1, r7
 80007a2:	fb07 1113 	mls	r1, r7, r3, r1
 80007a6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007aa:	fb0e f003 	mul.w	r0, lr, r3
 80007ae:	4288      	cmp	r0, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0x12c>
 80007b2:	eb1c 0101 	adds.w	r1, ip, r1
 80007b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x12a>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f200 80cb 	bhi.w	8000958 <__udivmoddi4+0x2c0>
 80007c2:	4643      	mov	r3, r8
 80007c4:	1a09      	subs	r1, r1, r0
 80007c6:	b2a4      	uxth	r4, r4
 80007c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007cc:	fb07 1110 	mls	r1, r7, r0, r1
 80007d0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007d4:	fb0e fe00 	mul.w	lr, lr, r0
 80007d8:	45a6      	cmp	lr, r4
 80007da:	d908      	bls.n	80007ee <__udivmoddi4+0x156>
 80007dc:	eb1c 0404 	adds.w	r4, ip, r4
 80007e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007e4:	d202      	bcs.n	80007ec <__udivmoddi4+0x154>
 80007e6:	45a6      	cmp	lr, r4
 80007e8:	f200 80bb 	bhi.w	8000962 <__udivmoddi4+0x2ca>
 80007ec:	4608      	mov	r0, r1
 80007ee:	eba4 040e 	sub.w	r4, r4, lr
 80007f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007f6:	e79c      	b.n	8000732 <__udivmoddi4+0x9a>
 80007f8:	f1c6 0720 	rsb	r7, r6, #32
 80007fc:	40b3      	lsls	r3, r6
 80007fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000802:	ea4c 0c03 	orr.w	ip, ip, r3
 8000806:	fa20 f407 	lsr.w	r4, r0, r7
 800080a:	fa01 f306 	lsl.w	r3, r1, r6
 800080e:	431c      	orrs	r4, r3
 8000810:	40f9      	lsrs	r1, r7
 8000812:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000816:	fa00 f306 	lsl.w	r3, r0, r6
 800081a:	fbb1 f8f9 	udiv	r8, r1, r9
 800081e:	0c20      	lsrs	r0, r4, #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fb09 1118 	mls	r1, r9, r8, r1
 8000828:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800082c:	fb08 f00e 	mul.w	r0, r8, lr
 8000830:	4288      	cmp	r0, r1
 8000832:	fa02 f206 	lsl.w	r2, r2, r6
 8000836:	d90b      	bls.n	8000850 <__udivmoddi4+0x1b8>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000840:	f080 8088 	bcs.w	8000954 <__udivmoddi4+0x2bc>
 8000844:	4288      	cmp	r0, r1
 8000846:	f240 8085 	bls.w	8000954 <__udivmoddi4+0x2bc>
 800084a:	f1a8 0802 	sub.w	r8, r8, #2
 800084e:	4461      	add	r1, ip
 8000850:	1a09      	subs	r1, r1, r0
 8000852:	b2a4      	uxth	r4, r4
 8000854:	fbb1 f0f9 	udiv	r0, r1, r9
 8000858:	fb09 1110 	mls	r1, r9, r0, r1
 800085c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000860:	fb00 fe0e 	mul.w	lr, r0, lr
 8000864:	458e      	cmp	lr, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x1e2>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000870:	d26c      	bcs.n	800094c <__udivmoddi4+0x2b4>
 8000872:	458e      	cmp	lr, r1
 8000874:	d96a      	bls.n	800094c <__udivmoddi4+0x2b4>
 8000876:	3802      	subs	r0, #2
 8000878:	4461      	add	r1, ip
 800087a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800087e:	fba0 9402 	umull	r9, r4, r0, r2
 8000882:	eba1 010e 	sub.w	r1, r1, lr
 8000886:	42a1      	cmp	r1, r4
 8000888:	46c8      	mov	r8, r9
 800088a:	46a6      	mov	lr, r4
 800088c:	d356      	bcc.n	800093c <__udivmoddi4+0x2a4>
 800088e:	d053      	beq.n	8000938 <__udivmoddi4+0x2a0>
 8000890:	b15d      	cbz	r5, 80008aa <__udivmoddi4+0x212>
 8000892:	ebb3 0208 	subs.w	r2, r3, r8
 8000896:	eb61 010e 	sbc.w	r1, r1, lr
 800089a:	fa01 f707 	lsl.w	r7, r1, r7
 800089e:	fa22 f306 	lsr.w	r3, r2, r6
 80008a2:	40f1      	lsrs	r1, r6
 80008a4:	431f      	orrs	r7, r3
 80008a6:	e9c5 7100 	strd	r7, r1, [r5]
 80008aa:	2600      	movs	r6, #0
 80008ac:	4631      	mov	r1, r6
 80008ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b2:	f1c2 0320 	rsb	r3, r2, #32
 80008b6:	40d8      	lsrs	r0, r3
 80008b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008bc:	fa21 f303 	lsr.w	r3, r1, r3
 80008c0:	4091      	lsls	r1, r2
 80008c2:	4301      	orrs	r1, r0
 80008c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c8:	fa1f fe8c 	uxth.w	lr, ip
 80008cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80008d0:	fb07 3610 	mls	r6, r7, r0, r3
 80008d4:	0c0b      	lsrs	r3, r1, #16
 80008d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008da:	fb00 f60e 	mul.w	r6, r0, lr
 80008de:	429e      	cmp	r6, r3
 80008e0:	fa04 f402 	lsl.w	r4, r4, r2
 80008e4:	d908      	bls.n	80008f8 <__udivmoddi4+0x260>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ee:	d22f      	bcs.n	8000950 <__udivmoddi4+0x2b8>
 80008f0:	429e      	cmp	r6, r3
 80008f2:	d92d      	bls.n	8000950 <__udivmoddi4+0x2b8>
 80008f4:	3802      	subs	r0, #2
 80008f6:	4463      	add	r3, ip
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	b289      	uxth	r1, r1
 80008fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000900:	fb07 3316 	mls	r3, r7, r6, r3
 8000904:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000908:	fb06 f30e 	mul.w	r3, r6, lr
 800090c:	428b      	cmp	r3, r1
 800090e:	d908      	bls.n	8000922 <__udivmoddi4+0x28a>
 8000910:	eb1c 0101 	adds.w	r1, ip, r1
 8000914:	f106 38ff 	add.w	r8, r6, #4294967295
 8000918:	d216      	bcs.n	8000948 <__udivmoddi4+0x2b0>
 800091a:	428b      	cmp	r3, r1
 800091c:	d914      	bls.n	8000948 <__udivmoddi4+0x2b0>
 800091e:	3e02      	subs	r6, #2
 8000920:	4461      	add	r1, ip
 8000922:	1ac9      	subs	r1, r1, r3
 8000924:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000928:	e738      	b.n	800079c <__udivmoddi4+0x104>
 800092a:	462e      	mov	r6, r5
 800092c:	4628      	mov	r0, r5
 800092e:	e705      	b.n	800073c <__udivmoddi4+0xa4>
 8000930:	4606      	mov	r6, r0
 8000932:	e6e3      	b.n	80006fc <__udivmoddi4+0x64>
 8000934:	4618      	mov	r0, r3
 8000936:	e6f8      	b.n	800072a <__udivmoddi4+0x92>
 8000938:	454b      	cmp	r3, r9
 800093a:	d2a9      	bcs.n	8000890 <__udivmoddi4+0x1f8>
 800093c:	ebb9 0802 	subs.w	r8, r9, r2
 8000940:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000944:	3801      	subs	r0, #1
 8000946:	e7a3      	b.n	8000890 <__udivmoddi4+0x1f8>
 8000948:	4646      	mov	r6, r8
 800094a:	e7ea      	b.n	8000922 <__udivmoddi4+0x28a>
 800094c:	4620      	mov	r0, r4
 800094e:	e794      	b.n	800087a <__udivmoddi4+0x1e2>
 8000950:	4640      	mov	r0, r8
 8000952:	e7d1      	b.n	80008f8 <__udivmoddi4+0x260>
 8000954:	46d0      	mov	r8, sl
 8000956:	e77b      	b.n	8000850 <__udivmoddi4+0x1b8>
 8000958:	3b02      	subs	r3, #2
 800095a:	4461      	add	r1, ip
 800095c:	e732      	b.n	80007c4 <__udivmoddi4+0x12c>
 800095e:	4630      	mov	r0, r6
 8000960:	e709      	b.n	8000776 <__udivmoddi4+0xde>
 8000962:	4464      	add	r4, ip
 8000964:	3802      	subs	r0, #2
 8000966:	e742      	b.n	80007ee <__udivmoddi4+0x156>

08000968 <__aeabi_idiv0>:
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <Delay_Init>:
// the size of the entire buffer for both adc and dac
#define BUFFER_SIZE 256

DelayEffect* delay = NULL;

void Delay_Init(int sample_rate) {
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	if(delay != NULL) return;
 8000974:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <Delay_Init+0xb0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d14b      	bne.n	8000a14 <Delay_Init+0xa8>

	delay = malloc(sizeof(DelayEffect));
 800097c:	2024      	movs	r0, #36	; 0x24
 800097e:	f00a fe91 	bl	800b6a4 <malloc>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <Delay_Init+0xb0>)
 8000988:	601a      	str	r2, [r3, #0]
	delay->sample_rate = sample_rate;
 800098a:	4b24      	ldr	r3, [pc, #144]	; (8000a1c <Delay_Init+0xb0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	621a      	str	r2, [r3, #32]
	delay->delayBufferLength = 2*sample_rate;
 8000992:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <Delay_Init+0xb0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	0052      	lsls	r2, r2, #1
 800099a:	611a      	str	r2, [r3, #16]
	delay->delayLength = 0.75f;
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <Delay_Init+0xb0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 80009a4:	60da      	str	r2, [r3, #12]
	delay->delayWritePtr = 0;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <Delay_Init+0xb0>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]
	delay->delayReadPtr = 0;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <Delay_Init+0xb0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
	delay->delayData = (uint16_t*) malloc(delay->delayBufferLength * sizeof(uint16_t));
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <Delay_Init+0xb0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	691b      	ldr	r3, [r3, #16]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <Delay_Init+0xb0>)
 80009c0:	6814      	ldr	r4, [r2, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f00a fe6e 	bl	800b6a4 <malloc>
 80009c8:	4603      	mov	r3, r0
 80009ca:	6023      	str	r3, [r4, #0]

	for (int i = 0; i < delay->delayBufferLength; ++i) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e00a      	b.n	80009e8 <Delay_Init+0x7c>
		delay->delayData[i] = 0;
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <Delay_Init+0xb0>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	2200      	movs	r2, #0
 80009e0:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < delay->delayBufferLength; ++i) {
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	3301      	adds	r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <Delay_Init+0xb0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	dbee      	blt.n	80009d2 <Delay_Init+0x66>
	}

	delay->feedback = 0.75f;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <Delay_Init+0xb0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 80009fc:	615a      	str	r2, [r3, #20]
	delay->dryMix = 1;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <Delay_Init+0xb0>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a06:	619a      	str	r2, [r3, #24]
	delay->wetMix = 1;
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <Delay_Init+0xb0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000a10:	61da      	str	r2, [r3, #28]
 8000a12:	e000      	b.n	8000a16 <Delay_Init+0xaa>
	if(delay != NULL) return;
 8000a14:	bf00      	nop
}
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	24000094 	.word	0x24000094

08000a20 <Delay_Process>:

uint16_t Delay_Process(uint16_t in) {
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	80fb      	strh	r3, [r7, #6]
	uint16_t out = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	81fb      	strh	r3, [r7, #14]

	out = (delay->dryMix * in + delay->wetMix *delay->delayData[delay->delayReadPtr]);
 8000a2e:	4b39      	ldr	r3, [pc, #228]	; (8000b14 <Delay_Process+0xf4>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	ed93 7a06 	vldr	s14, [r3, #24]
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a44:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <Delay_Process+0xf4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	edd3 6a07 	vldr	s13, [r3, #28]
 8000a4c:	4b31      	ldr	r3, [pc, #196]	; (8000b14 <Delay_Process+0xf4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <Delay_Process+0xf4>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	ee07 3a90 	vmov	s15, r3
 8000a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a72:	ee17 3a90 	vmov	r3, s15
 8000a76:	81fb      	strh	r3, [r7, #14]

	delay->delayData[delay->delayWritePtr] = in + (delay->delayData[delay->delayReadPtr]*delay->feedback);
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	ee07 3a90 	vmov	s15, r3
 8000a7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <Delay_Process+0xf4>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <Delay_Process+0xf4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	ee07 3a90 	vmov	s15, r3
 8000a98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <Delay_Process+0xf4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	edd3 7a05 	vldr	s15, [r3, #20]
 8000aa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <Delay_Process+0xf4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <Delay_Process+0xf4>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ac0:	ee17 2a90 	vmov	r2, s15
 8000ac4:	b292      	uxth	r2, r2
 8000ac6:	801a      	strh	r2, [r3, #0]

	if(++delay->delayReadPtr >= delay->delayBufferLength)
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <Delay_Process+0xf4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	3201      	adds	r2, #1
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	689a      	ldr	r2, [r3, #8]
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <Delay_Process+0xf4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	691b      	ldr	r3, [r3, #16]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	db03      	blt.n	8000ae6 <Delay_Process+0xc6>
		delay->delayReadPtr = 0;
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <Delay_Process+0xf4>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]

	if(++delay->delayWritePtr >= delay->delayBufferLength)
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <Delay_Process+0xf4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	3201      	adds	r2, #1
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	685a      	ldr	r2, [r3, #4]
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <Delay_Process+0xf4>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	db03      	blt.n	8000b04 <Delay_Process+0xe4>
		delay->delayWritePtr = 0;
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <Delay_Process+0xf4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]

	return out;
 8000b04:	89fb      	ldrh	r3, [r7, #14]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	24000094 	.word	0x24000094

08000b18 <Delay_Set_Params>:

void Delay_Set_Params(float delayLength, float feedback) {
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b22:	edc7 0a00 	vstr	s1, [r7]
	if(delayLength < 0.05) delayLength = 0.05;
 8000b26:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b2e:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8000c98 <Delay_Set_Params+0x180>
 8000b32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3a:	d501      	bpl.n	8000b40 <Delay_Set_Params+0x28>
 8000b3c:	4b5e      	ldr	r3, [pc, #376]	; (8000cb8 <Delay_Set_Params+0x1a0>)
 8000b3e:	607b      	str	r3, [r7, #4]

	delayLength *= 2.0f;
 8000b40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b44:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000b48:	edc7 7a01 	vstr	s15, [r7, #4]

	if(delayLength - 0.1 > delay->delayLength - 0.01  || delayLength + 0.1 < delay->delayLength + 0.01) {
 8000b4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b54:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8000ca0 <Delay_Set_Params+0x188>
 8000b58:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000b5c:	4b57      	ldr	r3, [pc, #348]	; (8000cbc <Delay_Set_Params+0x1a4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b68:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8000ca8 <Delay_Set_Params+0x190>
 8000b6c:	ee37 7b45 	vsub.f64	d7, d7, d5
 8000b70:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b78:	dc16      	bgt.n	8000ba8 <Delay_Set_Params+0x90>
 8000b7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b82:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8000ca0 <Delay_Set_Params+0x188>
 8000b86:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000b8a:	4b4c      	ldr	r3, [pc, #304]	; (8000cbc <Delay_Set_Params+0x1a4>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b96:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8000ca8 <Delay_Set_Params+0x190>
 8000b9a:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000b9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba6:	d531      	bpl.n	8000c0c <Delay_Set_Params+0xf4>
		delay->delayLength = delayLength;
 8000ba8:	4b44      	ldr	r3, [pc, #272]	; (8000cbc <Delay_Set_Params+0x1a4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	60da      	str	r2, [r3, #12]
		delay->delayReadPtr = (int)(delay->delayWritePtr - (delay->delayLength * delay->sample_rate) + delay->delayBufferLength) % delay->delayBufferLength;
 8000bb0:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <Delay_Set_Params+0x1a4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	ee07 3a90 	vmov	s15, r3
 8000bba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bbe:	4b3f      	ldr	r3, [pc, #252]	; (8000cbc <Delay_Set_Params+0x1a4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	edd3 6a03 	vldr	s13, [r3, #12]
 8000bc6:	4b3d      	ldr	r3, [pc, #244]	; (8000cbc <Delay_Set_Params+0x1a4>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	ee07 3a90 	vmov	s15, r3
 8000bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bdc:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <Delay_Set_Params+0x1a4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	691b      	ldr	r3, [r3, #16]
 8000be2:	ee07 3a90 	vmov	s15, r3
 8000be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf2:	ee17 0a90 	vmov	r0, s15
 8000bf6:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <Delay_Set_Params+0x1a4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	691b      	ldr	r3, [r3, #16]
 8000bfc:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <Delay_Set_Params+0x1a4>)
 8000bfe:	6812      	ldr	r2, [r2, #0]
 8000c00:	fb90 f1f3 	sdiv	r1, r0, r3
 8000c04:	fb01 f303 	mul.w	r3, r1, r3
 8000c08:	1ac3      	subs	r3, r0, r3
 8000c0a:	6093      	str	r3, [r2, #8]
	}

	if(feedback > 0.8) feedback = 0.8;
 8000c0c:	edd7 7a00 	vldr	s15, [r7]
 8000c10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c14:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8000cb0 <Delay_Set_Params+0x198>
 8000c18:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c20:	dd01      	ble.n	8000c26 <Delay_Set_Params+0x10e>
 8000c22:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <Delay_Set_Params+0x1a8>)
 8000c24:	603b      	str	r3, [r7, #0]

	if(feedback - 0.1 > delay->feedback - 0.01 || feedback + 0.1 < delay->feedback + 0.01) {
 8000c26:	edd7 7a00 	vldr	s15, [r7]
 8000c2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c2e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8000ca0 <Delay_Set_Params+0x188>
 8000c32:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <Delay_Set_Params+0x1a4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c42:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000ca8 <Delay_Set_Params+0x190>
 8000c46:	ee37 7b45 	vsub.f64	d7, d7, d5
 8000c4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c52:	dc17      	bgt.n	8000c84 <Delay_Set_Params+0x16c>
 8000c54:	edd7 7a00 	vldr	s15, [r7]
 8000c58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c5c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000ca0 <Delay_Set_Params+0x188>
 8000c60:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000c64:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <Delay_Set_Params+0x1a4>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c70:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000ca8 <Delay_Set_Params+0x190>
 8000c74:	ee37 7b05 	vadd.f64	d7, d7, d5
 8000c78:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c80:	d400      	bmi.n	8000c84 <Delay_Set_Params+0x16c>
		delay->feedback = feedback;
	}
}
 8000c82:	e003      	b.n	8000c8c <Delay_Set_Params+0x174>
		delay->feedback = feedback;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <Delay_Set_Params+0x1a4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	683a      	ldr	r2, [r7, #0]
 8000c8a:	615a      	str	r2, [r3, #20]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	9999999a 	.word	0x9999999a
 8000c9c:	3fa99999 	.word	0x3fa99999
 8000ca0:	9999999a 	.word	0x9999999a
 8000ca4:	3fb99999 	.word	0x3fb99999
 8000ca8:	47ae147b 	.word	0x47ae147b
 8000cac:	3f847ae1 	.word	0x3f847ae1
 8000cb0:	9999999a 	.word	0x9999999a
 8000cb4:	3fe99999 	.word	0x3fe99999
 8000cb8:	3d4ccccd 	.word	0x3d4ccccd
 8000cbc:	24000094 	.word	0x24000094
 8000cc0:	3f4ccccd 	.word	0x3f4ccccd

08000cc4 <Delay_Free>:

void Delay_Free() {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	if(delay != NULL) {
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <Delay_Free+0x2c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d00d      	beq.n	8000cec <Delay_Free+0x28>
		free(delay->delayData);
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <Delay_Free+0x2c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f00a fcec 	bl	800b6b4 <free>
		free(delay);
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <Delay_Free+0x2c>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f00a fce7 	bl	800b6b4 <free>

		delay = NULL;
 8000ce6:	4b02      	ldr	r3, [pc, #8]	; (8000cf0 <Delay_Free+0x2c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
	}
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	24000094 	.word	0x24000094

08000cf4 <OnePoleLP_Init>:

#include <OnePoleLP.h>

OnePoleLP onePoleLP;

void OnePoleLP_Init() {
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
	onePoleLP.lastOutput = onePoleLP.inputs = onePoleLP.outputs = 0.0f;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <OnePoleLP_Init+0x28>)
 8000cfa:	f04f 0200 	mov.w	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <OnePoleLP_Init+0x28>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <OnePoleLP_Init+0x28>)
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <OnePoleLP_Init+0x28>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a03      	ldr	r2, [pc, #12]	; (8000d1c <OnePoleLP_Init+0x28>)
 8000d0e:	6093      	str	r3, [r2, #8]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	24000098 	.word	0x24000098

08000d20 <Tick>:

void Tick(float *sample, float cutoff) {
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	ed87 0a00 	vstr	s0, [r7]
	float p = (cutoff * 0.98f) * (cutoff * 0.98f) * (cutoff * 0.98f) * (cutoff * 0.98f);
 8000d2c:	edd7 7a00 	vldr	s15, [r7]
 8000d30:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000db0 <Tick+0x90>
 8000d34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d38:	edd7 7a00 	vldr	s15, [r7]
 8000d3c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8000db0 <Tick+0x90>
 8000d40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d48:	edd7 7a00 	vldr	s15, [r7]
 8000d4c:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000db0 <Tick+0x90>
 8000d50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d58:	edd7 7a00 	vldr	s15, [r7]
 8000d5c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000db0 <Tick+0x90>
 8000d60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d68:	edc7 7a03 	vstr	s15, [r7, #12]
	onePoleLP.outputs = (1.0f - p) * (*sample) + p * onePoleLP.outputs;
 8000d6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d70:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	edd3 7a00 	vldr	s15, [r3]
 8000d7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <Tick+0x94>)
 8000d84:	edd3 6a01 	vldr	s13, [r3, #4]
 8000d88:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d94:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <Tick+0x94>)
 8000d96:	edc3 7a01 	vstr	s15, [r3, #4]
	*sample = onePoleLP.outputs;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <Tick+0x94>)
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	601a      	str	r2, [r3, #0]
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	3f7ae148 	.word	0x3f7ae148
 8000db4:	24000098 	.word	0x24000098

08000db8 <lfo>:
#define PI 3.14159265359

TremoloEffect* tremolo = NULL;

float lfo(float phase, int waveform)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dc2:	6038      	str	r0, [r7, #0]
	switch(waveform) {
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d04a      	beq.n	8000e60 <lfo+0xa8>
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	f300 8082 	bgt.w	8000ed6 <lfo+0x11e>
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <lfo+0x28>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d031      	beq.n	8000e42 <lfo+0x8a>
 8000dde:	e07a      	b.n	8000ed6 <lfo+0x11e>
		case Triangle:
			if(phase < 0.25f)
 8000de0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000de4:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000de8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df0:	d508      	bpl.n	8000e04 <lfo+0x4c>
				return 0.5f + 2.0f*phase;
 8000df2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000df6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000dfa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000dfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e02:	e080      	b.n	8000f06 <lfo+0x14e>
			else if(phase < 0.75f)
 8000e04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e08:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8000e0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e14:	d50c      	bpl.n	8000e30 <lfo+0x78>
				return 1.0f - 2.0f*(phase - 0.25f);
 8000e16:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e1a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000e1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e2e:	e06a      	b.n	8000f06 <lfo+0x14e>
			else
				return 2.0f*(phase-0.75f);
 8000e30:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e34:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8000e38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e40:	e061      	b.n	8000f06 <lfo+0x14e>
		case Square:
			if(phase < 0.5f)
 8000e42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000e4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e52:	d502      	bpl.n	8000e5a <lfo+0xa2>
				return 1.0f;
 8000e54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000e58:	e055      	b.n	8000f06 <lfo+0x14e>
			else
				return 0.0f;
 8000e5a:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8000f18 <lfo+0x160>
 8000e5e:	e052      	b.n	8000f06 <lfo+0x14e>
		case SquareSlopedEdges:
			if(phase < 0.48f)
 8000e60:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e64:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000f1c <lfo+0x164>
 8000e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e70:	d502      	bpl.n	8000e78 <lfo+0xc0>
				return 1.0f;
 8000e72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000e76:	e046      	b.n	8000f06 <lfo+0x14e>
			else if(phase < 0.5f)
 8000e78:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e88:	d50e      	bpl.n	8000ea8 <lfo+0xf0>
				return 1.0f - 50.0f*(phase - 0.48f);
 8000e8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e8e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000f1c <lfo+0x164>
 8000e92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e96:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000f20 <lfo+0x168>
 8000e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000ea2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ea6:	e02e      	b.n	8000f06 <lfo+0x14e>
			else if(phase < 0.98f)
 8000ea8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eac:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000f24 <lfo+0x16c>
 8000eb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb8:	d502      	bpl.n	8000ec0 <lfo+0x108>
				return 0.0f;
 8000eba:	eddf 7a17 	vldr	s15, [pc, #92]	; 8000f18 <lfo+0x160>
 8000ebe:	e022      	b.n	8000f06 <lfo+0x14e>
			else
				return 50.0f*(phase - 0.98f);
 8000ec0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ec4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000f24 <lfo+0x16c>
 8000ec8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ecc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000f20 <lfo+0x168>
 8000ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ed4:	e017      	b.n	8000f06 <lfo+0x14e>
		case Sine:
		default:
			return 0.5f + 0.5f*sinf(2.0 * PI * phase);
 8000ed6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ede:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000f10 <lfo+0x158>
 8000ee2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ee6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eea:	eeb0 0a67 	vmov.f32	s0, s15
 8000eee:	f00a fd5b 	bl	800b9a8 <sinf>
 8000ef2:	eef0 7a40 	vmov.f32	s15, s0
 8000ef6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000efa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000efe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f02:	ee77 7a87 	vadd.f32	s15, s15, s14
		}
}
 8000f06:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	54442eea 	.word	0x54442eea
 8000f14:	401921fb 	.word	0x401921fb
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	3ef5c28f 	.word	0x3ef5c28f
 8000f20:	42480000 	.word	0x42480000
 8000f24:	3f7ae148 	.word	0x3f7ae148

08000f28 <Tremolo_Init>:

void Tremolo_Init(int sample_rate) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	if(tremolo != NULL) return;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <Tremolo_Init+0x60>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d122      	bne.n	8000f7e <Tremolo_Init+0x56>

	tremolo = malloc(sizeof(TremoloEffect));
 8000f38:	2014      	movs	r0, #20
 8000f3a:	f00a fbb3 	bl	800b6a4 <malloc>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <Tremolo_Init+0x60>)
 8000f44:	601a      	str	r2, [r3, #0]
	tremolo->phase = 0;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <Tremolo_Init+0x60>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
	tremolo->inverseSampleRate = 1.0f/sample_rate;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <Tremolo_Init+0x60>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f66:	edc3 7a01 	vstr	s15, [r3, #4]
	tremolo->depth = 1.0f;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <Tremolo_Init+0x60>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f72:	609a      	str	r2, [r3, #8]
	tremolo->waveform = Triangle;
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <Tremolo_Init+0x60>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
 8000f7c:	e000      	b.n	8000f80 <Tremolo_Init+0x58>
	if(tremolo != NULL) return;
 8000f7e:	bf00      	nop
}
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	240000a4 	.word	0x240000a4

08000f8c <Tremolo_Process>:

float Tremolo_Process(float in, float depth, float frequency) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	ed2d 8b02 	vpush	{d8}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f9e:	ed87 1a01 	vstr	s2, [r7, #4]
	tremolo->depth = depth;
 8000fa2:	4b30      	ldr	r3, [pc, #192]	; (8001064 <Tremolo_Process+0xd8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	609a      	str	r2, [r3, #8]
	tremolo->frequency = 6.0f*frequency;
 8000faa:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <Tremolo_Process+0xd8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fba:	edc3 7a03 	vstr	s15, [r3, #12]
	float out;
	out = in * (1.0f - tremolo->depth * lfo(tremolo->phase, tremolo->waveform));
 8000fbe:	4b29      	ldr	r3, [pc, #164]	; (8001064 <Tremolo_Process+0xd8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	ed93 8a02 	vldr	s16, [r3, #8]
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <Tremolo_Process+0xd8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	edd3 7a00 	vldr	s15, [r3]
 8000fce:	4b25      	ldr	r3, [pc, #148]	; (8001064 <Tremolo_Process+0xd8>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	f7ff feed 	bl	8000db8 <lfo>
 8000fde:	eef0 7a40 	vmov.f32	s15, s0
 8000fe2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000fe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fee:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff6:	edc7 7a05 	vstr	s15, [r7, #20]

	tremolo->phase += tremolo->frequency*tremolo->inverseSampleRate;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <Tremolo_Process+0xd8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	ed93 7a00 	vldr	s14, [r3]
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <Tremolo_Process+0xd8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	edd3 6a03 	vldr	s13, [r3, #12]
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <Tremolo_Process+0xd8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <Tremolo_Process+0xd8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101e:	edc3 7a00 	vstr	s15, [r3]
	if(tremolo->phase >= 1.0)
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <Tremolo_Process+0xd8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800102e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001036:	db0b      	blt.n	8001050 <Tremolo_Process+0xc4>
		tremolo->phase -= 1.0;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <Tremolo_Process+0xd8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <Tremolo_Process+0xd8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800104c:	edc3 7a00 	vstr	s15, [r3]

	return out;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
}
 8001056:	eeb0 0a67 	vmov.f32	s0, s15
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	ecbd 8b02 	vpop	{d8}
 8001062:	bd80      	pop	{r7, pc}
 8001064:	240000a4 	.word	0x240000a4

08001068 <Tremolo_Free>:

void Tremolo_Free() {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	if(tremolo != NULL) {
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <Tremolo_Free+0x20>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d007      	beq.n	8001084 <Tremolo_Free+0x1c>
		free(tremolo);
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <Tremolo_Free+0x20>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f00a fb1b 	bl	800b6b4 <free>
		tremolo = NULL;
 800107e:	4b02      	ldr	r3, [pc, #8]	; (8001088 <Tremolo_Free+0x20>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
	}
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	240000a4 	.word	0x240000a4

0800108c <YKChorus_Init>:
#include <YKchorus.h>
#include <OnePoleLP.h>

YKChorus* chorus = NULL;

void YKChorus_Init(int sampleRate, float phase, float rate, float delayTime) {
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	ed87 0a02 	vstr	s0, [r7, #8]
 8001098:	edc7 0a01 	vstr	s1, [r7, #4]
 800109c:	ed87 1a00 	vstr	s2, [r7]
	if(chorus != NULL) return;
 80010a0:	4b4d      	ldr	r3, [pc, #308]	; (80011d8 <YKChorus_Init+0x14c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f040 8092 	bne.w	80011ce <YKChorus_Init+0x142>

	chorus = malloc(sizeof(YKChorus));
 80010aa:	2054      	movs	r0, #84	; 0x54
 80010ac:	f00a fafa 	bl	800b6a4 <malloc>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b48      	ldr	r3, [pc, #288]	; (80011d8 <YKChorus_Init+0x14c>)
 80010b6:	601a      	str	r2, [r3, #0]
	chorus->phase = phase;
 80010b8:	4b47      	ldr	r3, [pc, #284]	; (80011d8 <YKChorus_Init+0x14c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	651a      	str	r2, [r3, #80]	; 0x50
	chorus->rate = rate;
 80010c0:	4b45      	ldr	r3, [pc, #276]	; (80011d8 <YKChorus_Init+0x14c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	611a      	str	r2, [r3, #16]
	chorus->sampleRate = sampleRate;
 80010c8:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <YKChorus_Init+0x14c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	ee07 2a90 	vmov	s15, r2
 80010d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d6:	edc3 7a06 	vstr	s15, [r3, #24]
	chorus->delayTime = delayTime;
 80010da:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <YKChorus_Init+0x14c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	61da      	str	r2, [r3, #28]
	chorus->z1 = 0.0f;
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <YKChorus_Init+0x14c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	639a      	str	r2, [r3, #56]	; 0x38
	chorus->sign = 0;
 80010ec:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <YKChorus_Init+0x14c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	641a      	str	r2, [r3, #64]	; 0x40
	chorus->lfoPhase = phase * 2.0f - 1.0f;
 80010f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <YKChorus_Init+0x14c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001106:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800110a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	chorus->lfoStepSize = (4.0f * chorus->rate / chorus->sampleRate);
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <YKChorus_Init+0x14c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	edd3 7a04 	vldr	s15, [r3, #16]
 8001116:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800111a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800111e:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <YKChorus_Init+0x14c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	ed93 7a06 	vldr	s14, [r3, #24]
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <YKChorus_Init+0x14c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800112e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	chorus->lfoSign = 1.0f;
 8001132:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <YKChorus_Init+0x14c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800113a:	64da      	str	r2, [r3, #76]	; 0x4c

	// Compute required buffer size for desired delay and allocate it
	// Add extra point to aid in interpolation later
//	chorus->delayLineLength = ((int)floorf(delayTime * sampleRate * 0.001f) * 2);
	chorus->delayLineLength = 2*sampleRate;
 800113c:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <YKChorus_Init+0x14c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	0052      	lsls	r2, r2, #1
 8001144:	60da      	str	r2, [r3, #12]
	chorus->delayLineStart = malloc(chorus->delayLineLength * sizeof(float));
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <YKChorus_Init+0x14c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <YKChorus_Init+0x14c>)
 8001150:	6814      	ldr	r4, [r2, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	f00a faa6 	bl	800b6a4 <malloc>
 8001158:	4603      	mov	r3, r0
 800115a:	6023      	str	r3, [r4, #0]

	// Set up pointers for delay line
	chorus->delayLineEnd = chorus->delayLineStart + chorus->delayLineLength;
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <YKChorus_Init+0x14c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6819      	ldr	r1, [r3, #0]
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <YKChorus_Init+0x14c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	009a      	lsls	r2, r3, #2
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <YKChorus_Init+0x14c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	440a      	add	r2, r1
 8001170:	605a      	str	r2, [r3, #4]
	chorus->writePtr = chorus->delayLineStart;
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <YKChorus_Init+0x14c>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <YKChorus_Init+0x14c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	609a      	str	r2, [r3, #8]

	// Zero out the buffer (silence)
	do {
		*chorus->writePtr = 0.0f;
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <YKChorus_Init+0x14c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
	}
	while (++chorus->writePtr < chorus->delayLineEnd);
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <YKChorus_Init+0x14c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	3204      	adds	r2, #4
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <YKChorus_Init+0x14c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	429a      	cmp	r2, r3
 800119e:	d3ee      	bcc.n	800117e <YKChorus_Init+0xf2>

	// Set read pointer to end of delayline. Setting it to the end
	// ensures the interpolation below works correctly to produce
	// the first non-zero sample.
	chorus->writePtr = chorus->delayLineStart + chorus->delayLineLength -1;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <YKChorus_Init+0x14c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6819      	ldr	r1, [r3, #0]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <YKChorus_Init+0x14c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	461a      	mov	r2, r3
 80011ae:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80011b2:	4413      	add	r3, r2
 80011b4:	009a      	lsls	r2, r3, #2
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <YKChorus_Init+0x14c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	440a      	add	r2, r1
 80011bc:	609a      	str	r2, [r3, #8]
	chorus->delayLineOutput = 0.0f;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <YKChorus_Init+0x14c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
	OnePoleLP_Init();
 80011c8:	f7ff fd94 	bl	8000cf4 <OnePoleLP_Init>
 80011cc:	e000      	b.n	80011d0 <YKChorus_Init+0x144>
	if(chorus != NULL) return;
 80011ce:	bf00      	nop
}
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}
 80011d6:	bf00      	nop
 80011d8:	240000a8 	.word	0x240000a8

080011dc <Next_LFO>:

float Next_LFO() {
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
        if (chorus->lfoPhase >= 1.0f)
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <Next_LFO+0x84>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80011e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f4:	db04      	blt.n	8001200 <Next_LFO+0x24>
        {
        	chorus->lfoSign = -1.0f;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <Next_LFO+0x84>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a1a      	ldr	r2, [pc, #104]	; (8001264 <Next_LFO+0x88>)
 80011fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80011fe:	e00f      	b.n	8001220 <Next_LFO+0x44>
        }
        else if (chorus->lfoPhase <= -1.0f)
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <Next_LFO+0x84>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001208:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800120c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001214:	d804      	bhi.n	8001220 <Next_LFO+0x44>
        {
        	chorus->lfoSign = +1.0f;
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <Next_LFO+0x84>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800121e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
        chorus->lfoPhase += chorus->lfoStepSize * chorus->lfoSign;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <Next_LFO+0x84>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001228:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <Next_LFO+0x84>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <Next_LFO+0x84>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <Next_LFO+0x84>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
        return chorus->lfoPhase;
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <Next_LFO+0x84>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	ee07 3a90 	vmov	s15, r3
    }
 8001252:	eeb0 0a67 	vmov.f32	s0, s15
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	240000a8 	.word	0x240000a8
 8001264:	bf800000 	.word	0xbf800000

08001268 <YKChorus_Process>:

float YKChorus_Process(float sample) {
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	ed2d 8b02 	vpush	{d8}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	ed87 0a01 	vstr	s0, [r7, #4]
	// Get delay time
	chorus->offset = (Next_LFO() * 0.3f + 0.4f) * chorus->delayTime * chorus->sampleRate * 0.001f;
 8001276:	f7ff ffb1 	bl	80011dc <Next_LFO>
 800127a:	eef0 7a40 	vmov.f32	s15, s0
 800127e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001424 <YKChorus_Process+0x1bc>
 8001282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001286:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001428 <YKChorus_Process+0x1c0>
 800128a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800128e:	4b67      	ldr	r3, [pc, #412]	; (800142c <YKChorus_Process+0x1c4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	edd3 7a07 	vldr	s15, [r3, #28]
 8001296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800129a:	4b64      	ldr	r3, [pc, #400]	; (800142c <YKChorus_Process+0x1c4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	edd3 7a06 	vldr	s15, [r3, #24]
 80012a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a6:	4b61      	ldr	r3, [pc, #388]	; (800142c <YKChorus_Process+0x1c4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001430 <YKChorus_Process+0x1c8>
 80012ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b2:	edc3 7a08 	vstr	s15, [r3, #32]

	// Compute the largest read pointer based on the offset.  If ptr
	// is before the first delayline location, wrap around end point

	chorus->ptr = chorus->writePtr - (int)floorf(chorus->offset);
 80012b6:	4b5d      	ldr	r3, [pc, #372]	; (800142c <YKChorus_Process+0x1c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689c      	ldr	r4, [r3, #8]
 80012bc:	4b5b      	ldr	r3, [pc, #364]	; (800142c <YKChorus_Process+0x1c4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	edd3 7a08 	vldr	s15, [r3, #32]
 80012c4:	eeb0 0a67 	vmov.f32	s0, s15
 80012c8:	f00a fb02 	bl	800b8d0 <floorf>
 80012cc:	eef0 7a40 	vmov.f32	s15, s0
 80012d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d4:	ee17 3a90 	vmov	r3, s15
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	425a      	negs	r2, r3
 80012dc:	4b53      	ldr	r3, [pc, #332]	; (800142c <YKChorus_Process+0x1c4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4422      	add	r2, r4
 80012e2:	62da      	str	r2, [r3, #44]	; 0x2c
//	chorus->ptr = chorus->writePtr - 5;
//	return sample;

	if (chorus->ptr < chorus->delayLineStart)
 80012e4:	4b51      	ldr	r3, [pc, #324]	; (800142c <YKChorus_Process+0x1c4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ea:	4b50      	ldr	r3, [pc, #320]	; (800142c <YKChorus_Process+0x1c4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d20a      	bcs.n	800130a <YKChorus_Process+0xa2>
		chorus->ptr += chorus->delayLineLength;
 80012f4:	4b4d      	ldr	r3, [pc, #308]	; (800142c <YKChorus_Process+0x1c4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012fa:	4b4c      	ldr	r3, [pc, #304]	; (800142c <YKChorus_Process+0x1c4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	009a      	lsls	r2, r3, #2
 8001302:	4b4a      	ldr	r3, [pc, #296]	; (800142c <YKChorus_Process+0x1c4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	440a      	add	r2, r1
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c

	chorus->ptr2 = chorus->ptr - 1;
 800130a:	4b48      	ldr	r3, [pc, #288]	; (800142c <YKChorus_Process+0x1c4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001310:	4b46      	ldr	r3, [pc, #280]	; (800142c <YKChorus_Process+0x1c4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3a04      	subs	r2, #4
 8001316:	631a      	str	r2, [r3, #48]	; 0x30
	if (chorus->ptr2 < chorus->delayLineStart)
 8001318:	4b44      	ldr	r3, [pc, #272]	; (800142c <YKChorus_Process+0x1c4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800131e:	4b43      	ldr	r3, [pc, #268]	; (800142c <YKChorus_Process+0x1c4>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d20a      	bcs.n	800133e <YKChorus_Process+0xd6>
		chorus->ptr2 += chorus->delayLineLength;
 8001328:	4b40      	ldr	r3, [pc, #256]	; (800142c <YKChorus_Process+0x1c4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800132e:	4b3f      	ldr	r3, [pc, #252]	; (800142c <YKChorus_Process+0x1c4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	009a      	lsls	r2, r3, #2
 8001336:	4b3d      	ldr	r3, [pc, #244]	; (800142c <YKChorus_Process+0x1c4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	440a      	add	r2, r1
 800133c:	631a      	str	r2, [r3, #48]	; 0x30

	chorus->frac = chorus->offset - (int)floorf(chorus->offset);
 800133e:	4b3b      	ldr	r3, [pc, #236]	; (800142c <YKChorus_Process+0x1c4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	ed93 8a08 	vldr	s16, [r3, #32]
 8001346:	4b39      	ldr	r3, [pc, #228]	; (800142c <YKChorus_Process+0x1c4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	edd3 7a08 	vldr	s15, [r3, #32]
 800134e:	eeb0 0a67 	vmov.f32	s0, s15
 8001352:	f00a fabd 	bl	800b8d0 <floorf>
 8001356:	eef0 7a40 	vmov.f32	s15, s0
 800135a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001362:	4b32      	ldr	r3, [pc, #200]	; (800142c <YKChorus_Process+0x1c4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	ee78 7a67 	vsub.f32	s15, s16, s15
 800136a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
//	chorus->frac = chorus->offset - 5;
	chorus->delayLineOutput = *chorus->ptr2 + *chorus->ptr * (1 - chorus->frac) - (1 - chorus->frac) * chorus->z1;
 800136e:	4b2f      	ldr	r3, [pc, #188]	; (800142c <YKChorus_Process+0x1c4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	ed93 7a00 	vldr	s14, [r3]
 8001378:	4b2c      	ldr	r3, [pc, #176]	; (800142c <YKChorus_Process+0x1c4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	edd3 6a00 	vldr	s13, [r3]
 8001382:	4b2a      	ldr	r3, [pc, #168]	; (800142c <YKChorus_Process+0x1c4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800138a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800138e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001396:	ee37 7a27 	vadd.f32	s14, s14, s15
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <YKChorus_Process+0x1c4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80013a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80013a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <YKChorus_Process+0x1c4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80013b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <YKChorus_Process+0x1c4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013be:	edc3 7a05 	vstr	s15, [r3, #20]
	chorus->z1 = chorus->delayLineOutput;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <YKChorus_Process+0x1c4>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <YKChorus_Process+0x1c4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6952      	ldr	r2, [r2, #20]
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38

	// Low pass
	Tick(&chorus->delayLineOutput, 0.95f);
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <YKChorus_Process+0x1c4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3314      	adds	r3, #20
 80013d4:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001434 <YKChorus_Process+0x1cc>
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fca1 	bl	8000d20 <Tick>

	// Write the input sample and any feedback to delayline
	*chorus->writePtr = sample;
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <YKChorus_Process+0x1c4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	601a      	str	r2, [r3, #0]

	// Increment buffer index and wrap if necesary
	if (++chorus->writePtr >= chorus->delayLineEnd) {
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <YKChorus_Process+0x1c4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	3204      	adds	r2, #4
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	4b0d      	ldr	r3, [pc, #52]	; (800142c <YKChorus_Process+0x1c4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d305      	bcc.n	800140a <YKChorus_Process+0x1a2>
		chorus->writePtr = chorus->delayLineStart;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <YKChorus_Process+0x1c4>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <YKChorus_Process+0x1c4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	609a      	str	r2, [r3, #8]
	}
	return chorus->delayLineOutput;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <YKChorus_Process+0x1c4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	ee07 3a90 	vmov	s15, r3
}
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	ecbd 8b02 	vpop	{d8}
 8001420:	bd90      	pop	{r4, r7, pc}
 8001422:	bf00      	nop
 8001424:	3e99999a 	.word	0x3e99999a
 8001428:	3ecccccd 	.word	0x3ecccccd
 800142c:	240000a8 	.word	0x240000a8
 8001430:	3a83126f 	.word	0x3a83126f
 8001434:	3f733333 	.word	0x3f733333

08001438 <YKChorus_Set_Params>:

void YKChorus_Set_Params(float rate, float phase) {
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001442:	edc7 0a00 	vstr	s1, [r7]
	if(rate - 0.1 > chorus->rate - 0.01  || rate + 0.1 < chorus->rate + 0.01) {
 8001446:	edd7 7a01 	vldr	s15, [r7, #4]
 800144a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800144e:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80014e0 <YKChorus_Set_Params+0xa8>
 8001452:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <YKChorus_Set_Params+0xb8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	edd3 7a04 	vldr	s15, [r3, #16]
 800145e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001462:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80014e8 <YKChorus_Set_Params+0xb0>
 8001466:	ee37 7b45 	vsub.f64	d7, d7, d5
 800146a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001472:	dc17      	bgt.n	80014a4 <YKChorus_Set_Params+0x6c>
 8001474:	edd7 7a01 	vldr	s15, [r7, #4]
 8001478:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800147c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80014e0 <YKChorus_Set_Params+0xa8>
 8001480:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <YKChorus_Set_Params+0xb8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	edd3 7a04 	vldr	s15, [r3, #16]
 800148c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001490:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80014e8 <YKChorus_Set_Params+0xb0>
 8001494:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001498:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	d400      	bmi.n	80014a4 <YKChorus_Set_Params+0x6c>
//	if(phase - 0.1 > chorus->phase - 0.01  || phase + 0.1 < chorus->phase + 0.01) {
//		chorus->phase = phase;
//		chorus->lfoPhase = phase * 2.0f - 1.0f;
//	}

}
 80014a2:	e015      	b.n	80014d0 <YKChorus_Set_Params+0x98>
		chorus->rate = rate;
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <YKChorus_Set_Params+0xb8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	611a      	str	r2, [r3, #16]
		chorus->lfoStepSize = (4.0f * chorus->rate / chorus->sampleRate);
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <YKChorus_Set_Params+0xb8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80014b4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80014b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <YKChorus_Set_Params+0xb8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	ed93 7a06 	vldr	s14, [r3, #24]
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <YKChorus_Set_Params+0xb8>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014cc:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	f3af 8000 	nop.w
 80014e0:	9999999a 	.word	0x9999999a
 80014e4:	3fb99999 	.word	0x3fb99999
 80014e8:	47ae147b 	.word	0x47ae147b
 80014ec:	3f847ae1 	.word	0x3f847ae1
 80014f0:	240000a8 	.word	0x240000a8

080014f4 <YKChorus_Free>:

void YKChorus_Free() {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	if(chorus != NULL) {
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <YKChorus_Free+0x2c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00d      	beq.n	800151c <YKChorus_Free+0x28>
		free(chorus->delayLineStart);
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <YKChorus_Free+0x2c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f00a f8d4 	bl	800b6b4 <free>
		free(chorus);
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <YKChorus_Free+0x2c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f00a f8cf 	bl	800b6b4 <free>
		chorus = NULL;
 8001516:	4b02      	ldr	r3, [pc, #8]	; (8001520 <YKChorus_Free+0x2c>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
	}
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	240000a8 	.word	0x240000a8

08001524 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001536:	463b      	mov	r3, r7
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	615a      	str	r2, [r3, #20]
 8001546:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001548:	4b30      	ldr	r3, [pc, #192]	; (800160c <MX_ADC1_Init+0xe8>)
 800154a:	4a31      	ldr	r2, [pc, #196]	; (8001610 <MX_ADC1_Init+0xec>)
 800154c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800154e:	4b2f      	ldr	r3, [pc, #188]	; (800160c <MX_ADC1_Init+0xe8>)
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <MX_ADC1_Init+0xe8>)
 8001556:	2208      	movs	r2, #8
 8001558:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800155a:	4b2c      	ldr	r3, [pc, #176]	; (800160c <MX_ADC1_Init+0xe8>)
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001560:	4b2a      	ldr	r3, [pc, #168]	; (800160c <MX_ADC1_Init+0xe8>)
 8001562:	2204      	movs	r2, #4
 8001564:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001566:	4b29      	ldr	r3, [pc, #164]	; (800160c <MX_ADC1_Init+0xe8>)
 8001568:	2200      	movs	r2, #0
 800156a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <MX_ADC1_Init+0xe8>)
 800156e:	2200      	movs	r2, #0
 8001570:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <MX_ADC1_Init+0xe8>)
 8001574:	2201      	movs	r2, #1
 8001576:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <MX_ADC1_Init+0xe8>)
 800157a:	2200      	movs	r2, #0
 800157c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800157e:	4b23      	ldr	r3, [pc, #140]	; (800160c <MX_ADC1_Init+0xe8>)
 8001580:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8001584:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <MX_ADC1_Init+0xe8>)
 8001588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <MX_ADC1_Init+0xe8>)
 8001590:	2203      	movs	r2, #3
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_ADC1_Init+0xe8>)
 8001596:	2200      	movs	r2, #0
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_ADC1_Init+0xe8>)
 800159c:	2200      	movs	r2, #0
 800159e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_ADC1_Init+0xe8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015a8:	4818      	ldr	r0, [pc, #96]	; (800160c <MX_ADC1_Init+0xe8>)
 80015aa:	f001 fbed 	bl	8002d88 <HAL_ADC_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80015b4:	f000 fe84 	bl	80022c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	4812      	ldr	r0, [pc, #72]	; (800160c <MX_ADC1_Init+0xe8>)
 80015c4:	f002 fae0 	bl	8003b88 <HAL_ADCEx_MultiModeConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80015ce:	f000 fe77 	bl	80022c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_ADC1_Init+0xf0>)
 80015d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015d6:	2306      	movs	r3, #6
 80015d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015de:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015e2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015e4:	2304      	movs	r3, #4
 80015e6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_ADC1_Init+0xe8>)
 80015f6:	f001 fddf 	bl	80031b8 <HAL_ADC_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001600:	f000 fe5e 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	; 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	240000ac 	.word	0x240000ac
 8001610:	40022000 	.word	0x40022000
 8001614:	08600004 	.word	0x08600004

08001618 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
 800162c:	615a      	str	r2, [r3, #20]
 800162e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001630:	4b38      	ldr	r3, [pc, #224]	; (8001714 <MX_ADC2_Init+0xfc>)
 8001632:	4a39      	ldr	r2, [pc, #228]	; (8001718 <MX_ADC2_Init+0x100>)
 8001634:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <MX_ADC2_Init+0xfc>)
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800163c:	4b35      	ldr	r3, [pc, #212]	; (8001714 <MX_ADC2_Init+0xfc>)
 800163e:	2208      	movs	r2, #8
 8001640:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001642:	4b34      	ldr	r3, [pc, #208]	; (8001714 <MX_ADC2_Init+0xfc>)
 8001644:	2201      	movs	r2, #1
 8001646:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001648:	4b32      	ldr	r3, [pc, #200]	; (8001714 <MX_ADC2_Init+0xfc>)
 800164a:	2204      	movs	r2, #4
 800164c:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <MX_ADC2_Init+0xfc>)
 8001650:	2200      	movs	r2, #0
 8001652:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001654:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <MX_ADC2_Init+0xfc>)
 8001656:	2200      	movs	r2, #0
 8001658:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 3;
 800165a:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <MX_ADC2_Init+0xfc>)
 800165c:	2203      	movs	r2, #3
 800165e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001660:	4b2c      	ldr	r3, [pc, #176]	; (8001714 <MX_ADC2_Init+0xfc>)
 8001662:	2200      	movs	r2, #0
 8001664:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001666:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <MX_ADC2_Init+0xfc>)
 8001668:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800166e:	4b29      	ldr	r3, [pc, #164]	; (8001714 <MX_ADC2_Init+0xfc>)
 8001670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001676:	4b27      	ldr	r3, [pc, #156]	; (8001714 <MX_ADC2_Init+0xfc>)
 8001678:	2203      	movs	r2, #3
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <MX_ADC2_Init+0xfc>)
 800167e:	2200      	movs	r2, #0
 8001680:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001682:	4b24      	ldr	r3, [pc, #144]	; (8001714 <MX_ADC2_Init+0xfc>)
 8001684:	2200      	movs	r2, #0
 8001686:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8001688:	4b22      	ldr	r3, [pc, #136]	; (8001714 <MX_ADC2_Init+0xfc>)
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001690:	4820      	ldr	r0, [pc, #128]	; (8001714 <MX_ADC2_Init+0xfc>)
 8001692:	f001 fb79 	bl	8002d88 <HAL_ADC_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 800169c:	f000 fe10 	bl	80022c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <MX_ADC2_Init+0x104>)
 80016a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016a4:	2306      	movs	r3, #6
 80016a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016ac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80016b0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016b2:	2304      	movs	r3, #4
 80016b4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	4619      	mov	r1, r3
 80016c2:	4814      	ldr	r0, [pc, #80]	; (8001714 <MX_ADC2_Init+0xfc>)
 80016c4:	f001 fd78 	bl	80031b8 <HAL_ADC_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80016ce:	f000 fdf7 	bl	80022c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <MX_ADC2_Init+0x108>)
 80016d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80016d6:	230c      	movs	r3, #12
 80016d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	4619      	mov	r1, r3
 80016de:	480d      	ldr	r0, [pc, #52]	; (8001714 <MX_ADC2_Init+0xfc>)
 80016e0:	f001 fd6a 	bl	80031b8 <HAL_ADC_ConfigChannel>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80016ea:	f000 fde9 	bl	80022c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016ee:	4b0d      	ldr	r3, [pc, #52]	; (8001724 <MX_ADC2_Init+0x10c>)
 80016f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80016f2:	2312      	movs	r3, #18
 80016f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	4806      	ldr	r0, [pc, #24]	; (8001714 <MX_ADC2_Init+0xfc>)
 80016fc:	f001 fd5c 	bl	80031b8 <HAL_ADC_ConfigChannel>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 8001706:	f000 fddb 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	24000110 	.word	0x24000110
 8001718:	40022100 	.word	0x40022100
 800171c:	19200040 	.word	0x19200040
 8001720:	1d500080 	.word	0x1d500080
 8001724:	21800100 	.word	0x21800100

08001728 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08e      	sub	sp, #56	; 0x38
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a86      	ldr	r2, [pc, #536]	; (8001960 <HAL_ADC_MspInit+0x238>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d165      	bne.n	8001816 <HAL_ADC_MspInit+0xee>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800174a:	4b86      	ldr	r3, [pc, #536]	; (8001964 <HAL_ADC_MspInit+0x23c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	4a84      	ldr	r2, [pc, #528]	; (8001964 <HAL_ADC_MspInit+0x23c>)
 8001752:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001754:	4b83      	ldr	r3, [pc, #524]	; (8001964 <HAL_ADC_MspInit+0x23c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d10e      	bne.n	800177a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800175c:	4b82      	ldr	r3, [pc, #520]	; (8001968 <HAL_ADC_MspInit+0x240>)
 800175e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001762:	4a81      	ldr	r2, [pc, #516]	; (8001968 <HAL_ADC_MspInit+0x240>)
 8001764:	f043 0320 	orr.w	r3, r3, #32
 8001768:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800176c:	4b7e      	ldr	r3, [pc, #504]	; (8001968 <HAL_ADC_MspInit+0x240>)
 800176e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001772:	f003 0320 	and.w	r3, r3, #32
 8001776:	623b      	str	r3, [r7, #32]
 8001778:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800177a:	4b7b      	ldr	r3, [pc, #492]	; (8001968 <HAL_ADC_MspInit+0x240>)
 800177c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001780:	4a79      	ldr	r2, [pc, #484]	; (8001968 <HAL_ADC_MspInit+0x240>)
 8001782:	f043 0320 	orr.w	r3, r3, #32
 8001786:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800178a:	4b77      	ldr	r3, [pc, #476]	; (8001968 <HAL_ADC_MspInit+0x240>)
 800178c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001790:	f003 0320 	and.w	r3, r3, #32
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001798:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179e:	2303      	movs	r3, #3
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	4619      	mov	r1, r3
 80017ac:	486f      	ldr	r0, [pc, #444]	; (800196c <HAL_ADC_MspInit+0x244>)
 80017ae:	f004 ffd9 	bl	8006764 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80017b2:	4b6f      	ldr	r3, [pc, #444]	; (8001970 <HAL_ADC_MspInit+0x248>)
 80017b4:	4a6f      	ldr	r2, [pc, #444]	; (8001974 <HAL_ADC_MspInit+0x24c>)
 80017b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80017b8:	4b6d      	ldr	r3, [pc, #436]	; (8001970 <HAL_ADC_MspInit+0x248>)
 80017ba:	2209      	movs	r2, #9
 80017bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017be:	4b6c      	ldr	r3, [pc, #432]	; (8001970 <HAL_ADC_MspInit+0x248>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c4:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <HAL_ADC_MspInit+0x248>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017ca:	4b69      	ldr	r3, [pc, #420]	; (8001970 <HAL_ADC_MspInit+0x248>)
 80017cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017d2:	4b67      	ldr	r3, [pc, #412]	; (8001970 <HAL_ADC_MspInit+0x248>)
 80017d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017da:	4b65      	ldr	r3, [pc, #404]	; (8001970 <HAL_ADC_MspInit+0x248>)
 80017dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017e2:	4b63      	ldr	r3, [pc, #396]	; (8001970 <HAL_ADC_MspInit+0x248>)
 80017e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80017ea:	4b61      	ldr	r3, [pc, #388]	; (8001970 <HAL_ADC_MspInit+0x248>)
 80017ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017f2:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <HAL_ADC_MspInit+0x248>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017f8:	485d      	ldr	r0, [pc, #372]	; (8001970 <HAL_ADC_MspInit+0x248>)
 80017fa:	f002 fe37 	bl	800446c <HAL_DMA_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8001804:	f000 fd5c 	bl	80022c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a59      	ldr	r2, [pc, #356]	; (8001970 <HAL_ADC_MspInit+0x248>)
 800180c:	64da      	str	r2, [r3, #76]	; 0x4c
 800180e:	4a58      	ldr	r2, [pc, #352]	; (8001970 <HAL_ADC_MspInit+0x248>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001814:	e09f      	b.n	8001956 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a57      	ldr	r2, [pc, #348]	; (8001978 <HAL_ADC_MspInit+0x250>)
 800181c:	4293      	cmp	r3, r2
 800181e:	f040 809a 	bne.w	8001956 <HAL_ADC_MspInit+0x22e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001822:	4b50      	ldr	r3, [pc, #320]	; (8001964 <HAL_ADC_MspInit+0x23c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	3301      	adds	r3, #1
 8001828:	4a4e      	ldr	r2, [pc, #312]	; (8001964 <HAL_ADC_MspInit+0x23c>)
 800182a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800182c:	4b4d      	ldr	r3, [pc, #308]	; (8001964 <HAL_ADC_MspInit+0x23c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d10e      	bne.n	8001852 <HAL_ADC_MspInit+0x12a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001834:	4b4c      	ldr	r3, [pc, #304]	; (8001968 <HAL_ADC_MspInit+0x240>)
 8001836:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800183a:	4a4b      	ldr	r2, [pc, #300]	; (8001968 <HAL_ADC_MspInit+0x240>)
 800183c:	f043 0320 	orr.w	r3, r3, #32
 8001840:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001844:	4b48      	ldr	r3, [pc, #288]	; (8001968 <HAL_ADC_MspInit+0x240>)
 8001846:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800184a:	f003 0320 	and.w	r3, r3, #32
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	4b45      	ldr	r3, [pc, #276]	; (8001968 <HAL_ADC_MspInit+0x240>)
 8001854:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001858:	4a43      	ldr	r2, [pc, #268]	; (8001968 <HAL_ADC_MspInit+0x240>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <HAL_ADC_MspInit+0x240>)
 8001864:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001870:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <HAL_ADC_MspInit+0x240>)
 8001872:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001876:	4a3c      	ldr	r2, [pc, #240]	; (8001968 <HAL_ADC_MspInit+0x240>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_ADC_MspInit+0x240>)
 8001882:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800188e:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_ADC_MspInit+0x240>)
 8001890:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001894:	4a34      	ldr	r2, [pc, #208]	; (8001968 <HAL_ADC_MspInit+0x240>)
 8001896:	f043 0320 	orr.w	r3, r3, #32
 800189a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <HAL_ADC_MspInit+0x240>)
 80018a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b0:	2303      	movs	r3, #3
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018bc:	4619      	mov	r1, r3
 80018be:	482f      	ldr	r0, [pc, #188]	; (800197c <HAL_ADC_MspInit+0x254>)
 80018c0:	f004 ff50 	bl	8006764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018c4:	2320      	movs	r3, #32
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c8:	2303      	movs	r3, #3
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d4:	4619      	mov	r1, r3
 80018d6:	482a      	ldr	r0, [pc, #168]	; (8001980 <HAL_ADC_MspInit+0x258>)
 80018d8:	f004 ff44 	bl	8006764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80018dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e2:	2303      	movs	r3, #3
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ee:	4619      	mov	r1, r3
 80018f0:	481e      	ldr	r0, [pc, #120]	; (800196c <HAL_ADC_MspInit+0x244>)
 80018f2:	f004 ff37 	bl	8006764 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream2;
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <HAL_ADC_MspInit+0x25c>)
 80018f8:	4a23      	ldr	r2, [pc, #140]	; (8001988 <HAL_ADC_MspInit+0x260>)
 80018fa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80018fc:	4b21      	ldr	r3, [pc, #132]	; (8001984 <HAL_ADC_MspInit+0x25c>)
 80018fe:	220a      	movs	r2, #10
 8001900:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <HAL_ADC_MspInit+0x25c>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001908:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <HAL_ADC_MspInit+0x25c>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_ADC_MspInit+0x25c>)
 8001910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001914:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_ADC_MspInit+0x25c>)
 8001918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800191c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_ADC_MspInit+0x25c>)
 8001920:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001924:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <HAL_ADC_MspInit+0x25c>)
 8001928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800192c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <HAL_ADC_MspInit+0x25c>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <HAL_ADC_MspInit+0x25c>)
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800193a:	4812      	ldr	r0, [pc, #72]	; (8001984 <HAL_ADC_MspInit+0x25c>)
 800193c:	f002 fd96 	bl	800446c <HAL_DMA_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_ADC_MspInit+0x222>
      Error_Handler();
 8001946:	f000 fcbb 	bl	80022c0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <HAL_ADC_MspInit+0x25c>)
 800194e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001950:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <HAL_ADC_MspInit+0x25c>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001956:	bf00      	nop
 8001958:	3738      	adds	r7, #56	; 0x38
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40022000 	.word	0x40022000
 8001964:	24000264 	.word	0x24000264
 8001968:	58024400 	.word	0x58024400
 800196c:	58021400 	.word	0x58021400
 8001970:	24000174 	.word	0x24000174
 8001974:	40020010 	.word	0x40020010
 8001978:	40022100 	.word	0x40022100
 800197c:	58020000 	.word	0x58020000
 8001980:	58020800 	.word	0x58020800
 8001984:	240001ec 	.word	0x240001ec
 8001988:	40020040 	.word	0x40020040

0800198c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	2224      	movs	r2, #36	; 0x24
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f009 fe93 	bl	800b6c4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <MX_DAC1_Init+0x5c>)
 80019a0:	4a12      	ldr	r2, [pc, #72]	; (80019ec <MX_DAC1_Init+0x60>)
 80019a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80019a4:	4810      	ldr	r0, [pc, #64]	; (80019e8 <MX_DAC1_Init+0x5c>)
 80019a6:	f002 fa9a 	bl	8003ede <HAL_DAC_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80019b0:	f000 fc86 	bl	80022c0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80019b8:	2316      	movs	r3, #22
 80019ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80019c0:	2301      	movs	r3, #1
 80019c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2200      	movs	r2, #0
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <MX_DAC1_Init+0x5c>)
 80019d0:	f002 fb92 	bl	80040f8 <HAL_DAC_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80019da:	f000 fc71 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	24000268 	.word	0x24000268
 80019ec:	40007400 	.word	0x40007400

080019f0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a30      	ldr	r2, [pc, #192]	; (8001ad0 <HAL_DAC_MspInit+0xe0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d15a      	bne.n	8001ac8 <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <HAL_DAC_MspInit+0xe4>)
 8001a14:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a18:	4a2e      	ldr	r2, [pc, #184]	; (8001ad4 <HAL_DAC_MspInit+0xe4>)
 8001a1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001a1e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001a22:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <HAL_DAC_MspInit+0xe4>)
 8001a24:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a30:	4b28      	ldr	r3, [pc, #160]	; (8001ad4 <HAL_DAC_MspInit+0xe4>)
 8001a32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a36:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <HAL_DAC_MspInit+0xe4>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_DAC_MspInit+0xe4>)
 8001a42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a4e:	2310      	movs	r3, #16
 8001a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a52:	2303      	movs	r3, #3
 8001a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	481d      	ldr	r0, [pc, #116]	; (8001ad8 <HAL_DAC_MspInit+0xe8>)
 8001a62:	f004 fe7f 	bl	8006764 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <HAL_DAC_MspInit+0xec>)
 8001a68:	4a1d      	ldr	r2, [pc, #116]	; (8001ae0 <HAL_DAC_MspInit+0xf0>)
 8001a6a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <HAL_DAC_MspInit+0xec>)
 8001a6e:	2243      	movs	r2, #67	; 0x43
 8001a70:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <HAL_DAC_MspInit+0xec>)
 8001a74:	2240      	movs	r2, #64	; 0x40
 8001a76:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_DAC_MspInit+0xec>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <HAL_DAC_MspInit+0xec>)
 8001a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a84:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_DAC_MspInit+0xec>)
 8001a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a8c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <HAL_DAC_MspInit+0xec>)
 8001a90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a94:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_DAC_MspInit+0xec>)
 8001a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a9c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_DAC_MspInit+0xec>)
 8001aa0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aa4:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_DAC_MspInit+0xec>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001aac:	480b      	ldr	r0, [pc, #44]	; (8001adc <HAL_DAC_MspInit+0xec>)
 8001aae:	f002 fcdd 	bl	800446c <HAL_DMA_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8001ab8:	f000 fc02 	bl	80022c0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a07      	ldr	r2, [pc, #28]	; (8001adc <HAL_DAC_MspInit+0xec>)
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	4a06      	ldr	r2, [pc, #24]	; (8001adc <HAL_DAC_MspInit+0xec>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001ac8:	bf00      	nop
 8001aca:	3728      	adds	r7, #40	; 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40007400 	.word	0x40007400
 8001ad4:	58024400 	.word	0x58024400
 8001ad8:	58020000 	.word	0x58020000
 8001adc:	2400027c 	.word	0x2400027c
 8001ae0:	40020028 	.word	0x40020028

08001ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <MX_DMA_Init+0x5c>)
 8001aec:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001af0:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <MX_DMA_Init+0x5c>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_DMA_Init+0x5c>)
 8001afc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	200b      	movs	r0, #11
 8001b0e:	f002 f9b2 	bl	8003e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b12:	200b      	movs	r0, #11
 8001b14:	f002 f9c9 	bl	8003eaa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	200c      	movs	r0, #12
 8001b1e:	f002 f9aa 	bl	8003e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b22:	200c      	movs	r0, #12
 8001b24:	f002 f9c1 	bl	8003eaa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	200d      	movs	r0, #13
 8001b2e:	f002 f9a2 	bl	8003e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b32:	200d      	movs	r0, #13
 8001b34:	f002 f9b9 	bl	8003eaa <HAL_NVIC_EnableIRQ>

}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	58024400 	.word	0x58024400

08001b44 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	; 0x30
 8001b48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	4b61      	ldr	r3, [pc, #388]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001b5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b60:	4a5f      	ldr	r2, [pc, #380]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001b6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b78:	4b59      	ldr	r3, [pc, #356]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001b7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b7e:	4a58      	ldr	r2, [pc, #352]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001b80:	f043 0320 	orr.w	r3, r3, #32
 8001b84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b88:	4b55      	ldr	r3, [pc, #340]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001b8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b96:	4b52      	ldr	r3, [pc, #328]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001b98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b9c:	4a50      	ldr	r2, [pc, #320]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001ba6:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001ba8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	4b4a      	ldr	r3, [pc, #296]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001bb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bba:	4a49      	ldr	r2, [pc, #292]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001bc4:	4b46      	ldr	r3, [pc, #280]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001bc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd2:	4b43      	ldr	r3, [pc, #268]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001bd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bd8:	4a41      	ldr	r2, [pc, #260]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001bda:	f043 0308 	orr.w	r3, r3, #8
 8001bde:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001be2:	4b3f      	ldr	r3, [pc, #252]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001be4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bf0:	4b3b      	ldr	r3, [pc, #236]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001bf6:	4a3a      	ldr	r2, [pc, #232]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bfc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001c00:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <MX_GPIO_Init+0x19c>)
 8001c02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c14:	4833      	ldr	r0, [pc, #204]	; (8001ce4 <MX_GPIO_Init+0x1a0>)
 8001c16:	f004 ff55 	bl	8006ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	482d      	ldr	r0, [pc, #180]	; (8001ce8 <MX_GPIO_Init+0x1a4>)
 8001c32:	f004 fd97 	bl	8006764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4825      	ldr	r0, [pc, #148]	; (8001ce4 <MX_GPIO_Init+0x1a0>)
 8001c50:	f004 fd88 	bl	8006764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	4619      	mov	r1, r3
 8001c68:	4820      	ldr	r0, [pc, #128]	; (8001cec <MX_GPIO_Init+0x1a8>)
 8001c6a:	f004 fd7b 	bl	8006764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4619      	mov	r1, r3
 8001c82:	481b      	ldr	r0, [pc, #108]	; (8001cf0 <MX_GPIO_Init+0x1ac>)
 8001c84:	f004 fd6e 	bl	8006764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4812      	ldr	r0, [pc, #72]	; (8001cf0 <MX_GPIO_Init+0x1ac>)
 8001ca6:	f004 fd5d 	bl	8006764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001caa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <MX_GPIO_Init+0x1ac>)
 8001cc4:	f004 fd4e 	bl	8006764 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2028      	movs	r0, #40	; 0x28
 8001cce:	f002 f8d2 	bl	8003e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cd2:	2028      	movs	r0, #40	; 0x28
 8001cd4:	f002 f8e9 	bl	8003eaa <HAL_NVIC_EnableIRQ>

}
 8001cd8:	bf00      	nop
 8001cda:	3730      	adds	r7, #48	; 0x30
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	58024400 	.word	0x58024400
 8001ce4:	58021400 	.word	0x58021400
 8001ce8:	58020800 	.word	0x58020800
 8001cec:	58021800 	.word	0x58021800
 8001cf0:	58020000 	.word	0x58020000

08001cf4 <HAL_ADC_ConvHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1) {
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a09      	ldr	r2, [pc, #36]	; (8001d24 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d108      	bne.n	8001d16 <HAL_ADC_ConvHalfCpltCallback+0x22>
		// when we enter this function, first half of the buffer is complete
		// so we set the input buffer pointer at the beginning
		inBuffPtr = &adcData[0];
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001d06:	4a09      	ldr	r2, [pc, #36]	; (8001d2c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8001d08:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[DATA_SIZE];
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001d0c:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001d0e:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
	}

}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	240000ac 	.word	0x240000ac
 8001d28:	24000afc 	.word	0x24000afc
 8001d2c:	240002f4 	.word	0x240002f4
 8001d30:	24000b00 	.word	0x24000b00
 8001d34:	240008f4 	.word	0x240008f4
 8001d38:	24000b04 	.word	0x24000b04

08001d3c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

	if(hadc == &hadc1) {
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <HAL_ADC_ConvCpltCallback+0x30>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d108      	bne.n	8001d5e <HAL_ADC_ConvCpltCallback+0x22>
		// when we enter this function, first half of the buffer is complete
		// so we set the input buffer pointer at the beginning

		inBuffPtr = &adcData[DATA_SIZE];
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_ADC_ConvCpltCallback+0x34>)
 8001d4e:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <HAL_ADC_ConvCpltCallback+0x38>)
 8001d50:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[0];
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001d54:	4a09      	ldr	r2, [pc, #36]	; (8001d7c <HAL_ADC_ConvCpltCallback+0x40>)
 8001d56:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_ADC_ConvCpltCallback+0x44>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]
	}

}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	240000ac 	.word	0x240000ac
 8001d70:	24000afc 	.word	0x24000afc
 8001d74:	240004f4 	.word	0x240004f4
 8001d78:	24000b00 	.word	0x24000b00
 8001d7c:	240006f4 	.word	0x240006f4
 8001d80:	24000b04 	.word	0x24000b04

08001d84 <Is_Tremolo>:
enum Effect { CleanEf, DelayEf, SineEf, SquareEf, SquareSlopedEdgesEf, TriangleEf, ChorusEf };
uint8_t currentEffect =  ChorusEf;

const float INT16_TO_FLOAT = 1.0f / 32768.0f;

uint8_t Is_Tremolo() {
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
	return currentEffect == SineEf || currentEffect == SquareEf || currentEffect == SquareSlopedEdgesEf || currentEffect == TriangleEf;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <Is_Tremolo+0x38>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d00b      	beq.n	8001da8 <Is_Tremolo+0x24>
 8001d90:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <Is_Tremolo+0x38>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d007      	beq.n	8001da8 <Is_Tremolo+0x24>
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <Is_Tremolo+0x38>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d003      	beq.n	8001da8 <Is_Tremolo+0x24>
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <Is_Tremolo+0x38>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d101      	bne.n	8001dac <Is_Tremolo+0x28>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <Is_Tremolo+0x2a>
 8001dac:	2300      	movs	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	24000001 	.word	0x24000001

08001dc0 <processData>:

void processData()
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
	if(effectReady == 0) return;
 8001dc6:	4b84      	ldr	r3, [pc, #528]	; (8001fd8 <processData+0x218>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 80ff 	beq.w	8001fce <processData+0x20e>

	float knob1 = adc2Data[0]/4095.0f;
 8001dd0:	4b82      	ldr	r3, [pc, #520]	; (8001fdc <processData+0x21c>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	ee07 3a90 	vmov	s15, r3
 8001dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ddc:	eddf 6a80 	vldr	s13, [pc, #512]	; 8001fe0 <processData+0x220>
 8001de0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001de4:	edc7 7a01 	vstr	s15, [r7, #4]
	float knob2 = adc2Data[1]/4095.0f;
 8001de8:	4b7c      	ldr	r3, [pc, #496]	; (8001fdc <processData+0x21c>)
 8001dea:	885b      	ldrh	r3, [r3, #2]
 8001dec:	ee07 3a90 	vmov	s15, r3
 8001df0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001df4:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8001fe0 <processData+0x220>
 8001df8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dfc:	edc7 7a00 	vstr	s15, [r7]

	if(currentEffect == CleanEf) {
 8001e00:	4b78      	ldr	r3, [pc, #480]	; (8001fe4 <processData+0x224>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d116      	bne.n	8001e36 <processData+0x76>
		for(int i = 0; i < DATA_SIZE; i++) {
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e00f      	b.n	8001e2e <processData+0x6e>
			 outBuffPtr[i] = inBuffPtr[i];
 8001e0e:	4b76      	ldr	r3, [pc, #472]	; (8001fe8 <processData+0x228>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	441a      	add	r2, r3
 8001e18:	4b74      	ldr	r3, [pc, #464]	; (8001fec <processData+0x22c>)
 8001e1a:	6819      	ldr	r1, [r3, #0]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	440b      	add	r3, r1
 8001e22:	8812      	ldrh	r2, [r2, #0]
 8001e24:	b292      	uxth	r2, r2
 8001e26:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2bff      	cmp	r3, #255	; 0xff
 8001e32:	ddec      	ble.n	8001e0e <processData+0x4e>
 8001e34:	e0c7      	b.n	8001fc6 <processData+0x206>
		}
	}
	else if(currentEffect == DelayEf) {
 8001e36:	4b6b      	ldr	r3, [pc, #428]	; (8001fe4 <processData+0x224>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d120      	bne.n	8001e80 <processData+0xc0>
		Delay_Set_Params(knob1, knob2);
 8001e3e:	edd7 0a00 	vldr	s1, [r7]
 8001e42:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e46:	f7fe fe67 	bl	8000b18 <Delay_Set_Params>
		for(int i = 0; i < DATA_SIZE; i++) {
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	e013      	b.n	8001e78 <processData+0xb8>
			 outBuffPtr[i] = Delay_Process(inBuffPtr[i]);
 8001e50:	4b65      	ldr	r3, [pc, #404]	; (8001fe8 <processData+0x228>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b299      	uxth	r1, r3
 8001e5e:	4b63      	ldr	r3, [pc, #396]	; (8001fec <processData+0x22c>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	18d4      	adds	r4, r2, r3
 8001e68:	4608      	mov	r0, r1
 8001e6a:	f7fe fdd9 	bl	8000a20 <Delay_Process>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	8023      	strh	r3, [r4, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	3301      	adds	r3, #1
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2bff      	cmp	r3, #255	; 0xff
 8001e7c:	dde8      	ble.n	8001e50 <processData+0x90>
 8001e7e:	e0a2      	b.n	8001fc6 <processData+0x206>
		}
	} else if(Is_Tremolo()) {
 8001e80:	f7ff ff80 	bl	8001d84 <Is_Tremolo>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d055      	beq.n	8001f36 <processData+0x176>
		static float in, out;
		for(int i = 0; i < DATA_SIZE; i++) {
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	e04e      	b.n	8001f2e <processData+0x16e>
			in = INT16_TO_FLOAT * inBuffPtr[i];
 8001e90:	4b55      	ldr	r3, [pc, #340]	; (8001fe8 <processData+0x228>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea6:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001ff0 <processData+0x230>
 8001eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eae:	4b51      	ldr	r3, [pc, #324]	; (8001ff4 <processData+0x234>)
 8001eb0:	edc3 7a00 	vstr	s15, [r3]
			if(in > 1.0f) {
 8001eb4:	4b4f      	ldr	r3, [pc, #316]	; (8001ff4 <processData+0x234>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec6:	dd09      	ble.n	8001edc <processData+0x11c>
				in -= 2.0f;
 8001ec8:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <processData+0x234>)
 8001eca:	edd3 7a00 	vldr	s15, [r3]
 8001ece:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001ed2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ed6:	4b47      	ldr	r3, [pc, #284]	; (8001ff4 <processData+0x234>)
 8001ed8:	edc3 7a00 	vstr	s15, [r3]
			}
			out = Tremolo_Process(in, knob1, knob2) * 1.4f;
 8001edc:	4b45      	ldr	r3, [pc, #276]	; (8001ff4 <processData+0x234>)
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	ed97 1a00 	vldr	s2, [r7]
 8001ee6:	edd7 0a01 	vldr	s1, [r7, #4]
 8001eea:	eeb0 0a67 	vmov.f32	s0, s15
 8001eee:	f7ff f84d 	bl	8000f8c <Tremolo_Process>
 8001ef2:	eef0 7a40 	vmov.f32	s15, s0
 8001ef6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001ff8 <processData+0x238>
 8001efa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001efe:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <processData+0x23c>)
 8001f00:	edc3 7a00 	vstr	s15, [r3]
			outBuffPtr[i] = (uint16_t) (out * 32768.0f);
 8001f04:	4b3d      	ldr	r3, [pc, #244]	; (8001ffc <processData+0x23c>)
 8001f06:	edd3 7a00 	vldr	s15, [r3]
 8001f0a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002000 <processData+0x240>
 8001f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f12:	4b36      	ldr	r3, [pc, #216]	; (8001fec <processData+0x22c>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	4413      	add	r3, r2
 8001f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f20:	ee17 2a90 	vmov	r2, s15
 8001f24:	b292      	uxth	r2, r2
 8001f26:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2bff      	cmp	r3, #255	; 0xff
 8001f32:	ddad      	ble.n	8001e90 <processData+0xd0>
 8001f34:	e047      	b.n	8001fc6 <processData+0x206>
		}
	} else if(currentEffect == ChorusEf) {
 8001f36:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <processData+0x224>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d143      	bne.n	8001fc6 <processData+0x206>
		YKChorus_Set_Params(knob1, knob2);
 8001f3e:	edd7 0a00 	vldr	s1, [r7]
 8001f42:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f46:	f7ff fa77 	bl	8001438 <YKChorus_Set_Params>
		static float in, out;
		for(int i = 0; i < DATA_SIZE; i++) {
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	e037      	b.n	8001fc0 <processData+0x200>
//			if(in > 1.0f) {
//				in -= 2.0f;
//			}
			in = INT16_TO_FLOAT * inBuffPtr[i];
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <processData+0x228>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f66:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001ff0 <processData+0x230>
 8001f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f6e:	4b25      	ldr	r3, [pc, #148]	; (8002004 <processData+0x244>)
 8001f70:	edc3 7a00 	vstr	s15, [r3]
			out = in+YKChorus_Process(in);
 8001f74:	4b23      	ldr	r3, [pc, #140]	; (8002004 <processData+0x244>)
 8001f76:	edd3 7a00 	vldr	s15, [r3]
 8001f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7e:	f7ff f973 	bl	8001268 <YKChorus_Process>
 8001f82:	eeb0 7a40 	vmov.f32	s14, s0
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <processData+0x244>)
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <processData+0x248>)
 8001f92:	edc3 7a00 	vstr	s15, [r3]
			outBuffPtr[i] = (uint16_t) (out * 32768.0f);
 8001f96:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <processData+0x248>)
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002000 <processData+0x240>
 8001fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <processData+0x22c>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb2:	ee17 2a90 	vmov	r2, s15
 8001fb6:	b292      	uxth	r2, r2
 8001fb8:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < DATA_SIZE; i++) {
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2bff      	cmp	r3, #255	; 0xff
 8001fc4:	ddc4      	ble.n	8001f50 <processData+0x190>
//		out = Flanger_Process(in) * 1.4f;
//		outBuffPtr[i] = (uint16_t) (out * 32768.0f);
//	}


	dataReady = 0;
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <processData+0x24c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
 8001fcc:	e000      	b.n	8001fd0 <processData+0x210>
	if(effectReady == 0) return;
 8001fce:	bf00      	nop
}
 8001fd0:	371c      	adds	r7, #28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd90      	pop	{r4, r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	24000000 	.word	0x24000000
 8001fdc:	24000af4 	.word	0x24000af4
 8001fe0:	457ff000 	.word	0x457ff000
 8001fe4:	24000001 	.word	0x24000001
 8001fe8:	24000afc 	.word	0x24000afc
 8001fec:	24000b00 	.word	0x24000b00
 8001ff0:	38000000 	.word	0x38000000
 8001ff4:	24000b08 	.word	0x24000b08
 8001ff8:	3fb33333 	.word	0x3fb33333
 8001ffc:	24000b0c 	.word	0x24000b0c
 8002000:	47000000 	.word	0x47000000
 8002004:	24000b10 	.word	0x24000b10
 8002008:	24000b14 	.word	0x24000b14
 800200c:	24000b04 	.word	0x24000b04

08002010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002016:	f000 fc19 	bl	800284c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800201a:	f000 f853 	bl	80020c4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800201e:	f000 f8cd 	bl	80021bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002022:	f7ff fd8f 	bl	8001b44 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002026:	f000 fb2d 	bl	8002684 <MX_USART3_UART_Init>
  MX_DMA_Init();
 800202a:	f7ff fd5b 	bl	8001ae4 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 800202e:	f000 fbdb 	bl	80027e8 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 8002032:	f7ff fa77 	bl	8001524 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002036:	f000 fab5 	bl	80025a4 <MX_TIM6_Init>
  MX_DAC1_Init();
 800203a:	f7ff fca7 	bl	800198c <MX_DAC1_Init>
  MX_ADC2_Init();
 800203e:	f7ff faeb 	bl	8001618 <MX_ADC2_Init>
  MX_TIM1_Init();
 8002042:	f000 fa5b 	bl	80024fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8002046:	4815      	ldr	r0, [pc, #84]	; (800209c <main+0x8c>)
 8002048:	f007 fe60 	bl	8009d0c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);
 800204c:	4814      	ldr	r0, [pc, #80]	; (80020a0 <main+0x90>)
 800204e:	f007 fe5d 	bl	8009d0c <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcData, BUFFER_SIZE);
 8002052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002056:	4913      	ldr	r1, [pc, #76]	; (80020a4 <main+0x94>)
 8002058:	4813      	ldr	r0, [pc, #76]	; (80020a8 <main+0x98>)
 800205a:	f000 ffef 	bl	800303c <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) dacData, BUFFER_SIZE, DAC_ALIGN_12B_R);
 800205e:	2300      	movs	r3, #0
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002066:	4a11      	ldr	r2, [pc, #68]	; (80020ac <main+0x9c>)
 8002068:	2100      	movs	r1, #0
 800206a:	4811      	ldr	r0, [pc, #68]	; (80020b0 <main+0xa0>)
 800206c:	f001 ff5a 	bl	8003f24 <HAL_DAC_Start_DMA>

//  Delay_Init(SAMPLE_RATE);
  YKChorus_Init(SAMPLE_RATE, 1.0f, 1.0f, 7.0f);
 8002070:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8002074:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002078:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800207c:	480d      	ldr	r0, [pc, #52]	; (80020b4 <main+0xa4>)
 800207e:	f7ff f805 	bl	800108c <YKChorus_Init>
//  Tremolo_Init(SAMPLE_RATE);
//  Flanger_Init();
//  uint8_t msg[30] = "\0";
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2Data, 3);
 8002082:	2203      	movs	r2, #3
 8002084:	490c      	ldr	r1, [pc, #48]	; (80020b8 <main+0xa8>)
 8002086:	480d      	ldr	r0, [pc, #52]	; (80020bc <main+0xac>)
 8002088:	f000 ffd8 	bl	800303c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(dataReady) {
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <main+0xb0>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0fb      	beq.n	800208c <main+0x7c>
		  processData();
 8002094:	f7ff fe94 	bl	8001dc0 <processData>
	  if(dataReady) {
 8002098:	e7f8      	b.n	800208c <main+0x7c>
 800209a:	bf00      	nop
 800209c:	24000b1c 	.word	0x24000b1c
 80020a0:	24000b68 	.word	0x24000b68
 80020a4:	240002f4 	.word	0x240002f4
 80020a8:	240000ac 	.word	0x240000ac
 80020ac:	240006f4 	.word	0x240006f4
 80020b0:	24000268 	.word	0x24000268
 80020b4:	00017715 	.word	0x00017715
 80020b8:	24000af4 	.word	0x24000af4
 80020bc:	24000110 	.word	0x24000110
 80020c0:	24000b04 	.word	0x24000b04

080020c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b09c      	sub	sp, #112	; 0x70
 80020c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ce:	224c      	movs	r2, #76	; 0x4c
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f009 faf6 	bl	800b6c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	2220      	movs	r2, #32
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f009 faf0 	bl	800b6c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80020e4:	2004      	movs	r0, #4
 80020e6:	f004 fd21 	bl	8006b2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80020ea:	2300      	movs	r3, #0
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <SystemClock_Config+0xf0>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <SystemClock_Config+0xf0>)
 80020f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020f8:	6193      	str	r3, [r2, #24]
 80020fa:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <SystemClock_Config+0xf0>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002106:	bf00      	nop
 8002108:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <SystemClock_Config+0xf0>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002114:	d1f8      	bne.n	8002108 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002116:	4b28      	ldr	r3, [pc, #160]	; (80021b8 <SystemClock_Config+0xf4>)
 8002118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211a:	f023 0303 	bic.w	r3, r3, #3
 800211e:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <SystemClock_Config+0xf4>)
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8002126:	2329      	movs	r3, #41	; 0x29
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800212a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002130:	2301      	movs	r3, #1
 8002132:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002134:	2301      	movs	r3, #1
 8002136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002138:	2302      	movs	r3, #2
 800213a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800213c:	2302      	movs	r3, #2
 800213e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002140:	2301      	movs	r3, #1
 8002142:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8002144:	2346      	movs	r3, #70	; 0x46
 8002146:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002148:	2302      	movs	r3, #2
 800214a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800214c:	2304      	movs	r3, #4
 800214e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002150:	2302      	movs	r3, #2
 8002152:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002154:	230c      	movs	r3, #12
 8002156:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002158:	2300      	movs	r3, #0
 800215a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002164:	4618      	mov	r0, r3
 8002166:	f004 fd3b 	bl	8006be0 <HAL_RCC_OscConfig>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002170:	f000 f8a6 	bl	80022c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002174:	233f      	movs	r3, #63	; 0x3f
 8002176:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002178:	2303      	movs	r3, #3
 800217a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002184:	2340      	movs	r3, #64	; 0x40
 8002186:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002188:	2340      	movs	r3, #64	; 0x40
 800218a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800218c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002190:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002192:	2340      	movs	r3, #64	; 0x40
 8002194:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	2107      	movs	r1, #7
 800219a:	4618      	mov	r0, r3
 800219c:	f005 f924 	bl	80073e8 <HAL_RCC_ClockConfig>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80021a6:	f000 f88b 	bl	80022c0 <Error_Handler>
  }
}
 80021aa:	bf00      	nop
 80021ac:	3770      	adds	r7, #112	; 0x70
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	58024800 	.word	0x58024800
 80021b8:	58024400 	.word	0x58024400

080021bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b0ae      	sub	sp, #184	; 0xb8
 80021c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c2:	463b      	mov	r3, r7
 80021c4:	22b8      	movs	r2, #184	; 0xb8
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f009 fa7b 	bl	800b6c4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80021ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80021d2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80021d4:	2301      	movs	r3, #1
 80021d6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80021d8:	2310      	movs	r3, #16
 80021da:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80021dc:	2301      	movs	r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80021e0:	2302      	movs	r3, #2
 80021e2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80021e4:	2302      	movs	r3, #2
 80021e6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80021e8:	23c0      	movs	r3, #192	; 0xc0
 80021ea:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021fa:	463b      	mov	r3, r7
 80021fc:	4618      	mov	r0, r3
 80021fe:	f005 fc7f 	bl	8007b00 <HAL_RCCEx_PeriphCLKConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 8002208:	f000 f85a 	bl	80022c0 <Error_Handler>
  }
}
 800220c:	bf00      	nop
 800220e:	37b8      	adds	r7, #184	; 0xb8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == GPIO_PIN_13) {
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002224:	d141      	bne.n	80022aa <HAL_GPIO_EXTI_Callback+0x96>
		effectReady = 0;
 8002226:	4b23      	ldr	r3, [pc, #140]	; (80022b4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]

		if(currentEffect == ChorusEf) {
 800222c:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b06      	cmp	r3, #6
 8002232:	d105      	bne.n	8002240 <HAL_GPIO_EXTI_Callback+0x2c>
			currentEffect = 0;
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
			YKChorus_Free();
 800223a:	f7ff f95b 	bl	80014f4 <YKChorus_Free>
 800223e:	e00c      	b.n	800225a <HAL_GPIO_EXTI_Callback+0x46>
		} else if(currentEffect == DelayEf) {
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d102      	bne.n	800224e <HAL_GPIO_EXTI_Callback+0x3a>
			Delay_Free();
 8002248:	f7fe fd3c 	bl	8000cc4 <Delay_Free>
 800224c:	e005      	b.n	800225a <HAL_GPIO_EXTI_Callback+0x46>
		} else if(currentEffect == 4) {
 800224e:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b04      	cmp	r3, #4
 8002254:	d101      	bne.n	800225a <HAL_GPIO_EXTI_Callback+0x46>
			Tremolo_Free();
 8002256:	f7fe ff07 	bl	8001068 <Tremolo_Free>
		}

		currentEffect++;
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	3301      	adds	r3, #1
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002264:	701a      	strb	r2, [r3, #0]

		if(currentEffect == ChorusEf) {
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b06      	cmp	r3, #6
 800226c:	d109      	bne.n	8002282 <HAL_GPIO_EXTI_Callback+0x6e>
			YKChorus_Init(SAMPLE_RATE, 1.0f, 1.0f, 7.0f);
 800226e:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8002272:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002276:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800227a:	4810      	ldr	r0, [pc, #64]	; (80022bc <HAL_GPIO_EXTI_Callback+0xa8>)
 800227c:	f7fe ff06 	bl	800108c <YKChorus_Init>
 8002280:	e00f      	b.n	80022a2 <HAL_GPIO_EXTI_Callback+0x8e>
		}
		else if(currentEffect == DelayEf) {
 8002282:	4b0d      	ldr	r3, [pc, #52]	; (80022b8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d103      	bne.n	8002292 <HAL_GPIO_EXTI_Callback+0x7e>
			Delay_Init(SAMPLE_RATE);
 800228a:	480c      	ldr	r0, [pc, #48]	; (80022bc <HAL_GPIO_EXTI_Callback+0xa8>)
 800228c:	f7fe fb6e 	bl	800096c <Delay_Init>
 8002290:	e007      	b.n	80022a2 <HAL_GPIO_EXTI_Callback+0x8e>
		} else if(Is_Tremolo()) {
 8002292:	f7ff fd77 	bl	8001d84 <Is_Tremolo>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <HAL_GPIO_EXTI_Callback+0x8e>
			Tremolo_Init(SAMPLE_RATE);
 800229c:	4807      	ldr	r0, [pc, #28]	; (80022bc <HAL_GPIO_EXTI_Callback+0xa8>)
 800229e:	f7fe fe43 	bl	8000f28 <Tremolo_Init>
		}

		effectReady = 1;
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <HAL_GPIO_EXTI_Callback+0xa0>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
	} else {
		__NOP();
	}
}
 80022a8:	e000      	b.n	80022ac <HAL_GPIO_EXTI_Callback+0x98>
		__NOP();
 80022aa:	bf00      	nop
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	24000000 	.word	0x24000000
 80022b8:	24000001 	.word	0x24000001
 80022bc:	00017715 	.word	0x00017715

080022c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c4:	b672      	cpsid	i
}
 80022c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <Error_Handler+0x8>
	...

080022cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_MspInit+0x30>)
 80022d4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80022d8:	4a08      	ldr	r2, [pc, #32]	; (80022fc <HAL_MspInit+0x30>)
 80022da:	f043 0302 	orr.w	r3, r3, #2
 80022de:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_MspInit+0x30>)
 80022e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	58024400 	.word	0x58024400

08002300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002304:	e7fe      	b.n	8002304 <NMI_Handler+0x4>

08002306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800230a:	e7fe      	b.n	800230a <HardFault_Handler+0x4>

0800230c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002310:	e7fe      	b.n	8002310 <MemManage_Handler+0x4>

08002312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <BusFault_Handler+0x4>

08002318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <UsageFault_Handler+0x4>

0800231e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800234c:	f000 faf0 	bl	8002930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002350:	bf00      	nop
 8002352:	bd80      	pop	{r7, pc}

08002354 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <DMA1_Stream0_IRQHandler+0x10>)
 800235a:	f002 fe81 	bl	8005060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	24000174 	.word	0x24000174

08002368 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <DMA1_Stream1_IRQHandler+0x10>)
 800236e:	f002 fe77 	bl	8005060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	2400027c 	.word	0x2400027c

0800237c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <DMA1_Stream2_IRQHandler+0x10>)
 8002382:	f002 fe6d 	bl	8005060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	240001ec 	.word	0x240001ec

08002390 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002394:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002398:	f004 fbad 	bl	8006af6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a8:	4a14      	ldr	r2, [pc, #80]	; (80023fc <_sbrk+0x5c>)
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <_sbrk+0x60>)
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <_sbrk+0x64>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <_sbrk+0x64>)
 80023be:	4a12      	ldr	r2, [pc, #72]	; (8002408 <_sbrk+0x68>)
 80023c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d207      	bcs.n	80023e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d0:	f009 f93e 	bl	800b650 <__errno>
 80023d4:	4603      	mov	r3, r0
 80023d6:	220c      	movs	r2, #12
 80023d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023da:	f04f 33ff 	mov.w	r3, #4294967295
 80023de:	e009      	b.n	80023f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <_sbrk+0x64>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <_sbrk+0x64>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	4a05      	ldr	r2, [pc, #20]	; (8002404 <_sbrk+0x64>)
 80023f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	24100000 	.word	0x24100000
 8002400:	00000400 	.word	0x00000400
 8002404:	24000b18 	.word	0x24000b18
 8002408:	24000c58 	.word	0x24000c58

0800240c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002410:	4b32      	ldr	r3, [pc, #200]	; (80024dc <SystemInit+0xd0>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	4a31      	ldr	r2, [pc, #196]	; (80024dc <SystemInit+0xd0>)
 8002418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800241c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002420:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <SystemInit+0xd4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	2b02      	cmp	r3, #2
 800242a:	d807      	bhi.n	800243c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800242c:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <SystemInit+0xd4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 030f 	bic.w	r3, r3, #15
 8002434:	4a2a      	ldr	r2, [pc, #168]	; (80024e0 <SystemInit+0xd4>)
 8002436:	f043 0303 	orr.w	r3, r3, #3
 800243a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800243c:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <SystemInit+0xd8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a28      	ldr	r2, [pc, #160]	; (80024e4 <SystemInit+0xd8>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002448:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <SystemInit+0xd8>)
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800244e:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <SystemInit+0xd8>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4924      	ldr	r1, [pc, #144]	; (80024e4 <SystemInit+0xd8>)
 8002454:	4b24      	ldr	r3, [pc, #144]	; (80024e8 <SystemInit+0xdc>)
 8002456:	4013      	ands	r3, r2
 8002458:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <SystemInit+0xd4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002466:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <SystemInit+0xd4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 030f 	bic.w	r3, r3, #15
 800246e:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <SystemInit+0xd4>)
 8002470:	f043 0303 	orr.w	r3, r3, #3
 8002474:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002476:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <SystemInit+0xd8>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800247c:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <SystemInit+0xd8>)
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002482:	4b18      	ldr	r3, [pc, #96]	; (80024e4 <SystemInit+0xd8>)
 8002484:	2200      	movs	r2, #0
 8002486:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002488:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <SystemInit+0xd8>)
 800248a:	4a18      	ldr	r2, [pc, #96]	; (80024ec <SystemInit+0xe0>)
 800248c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <SystemInit+0xd8>)
 8002490:	4a17      	ldr	r2, [pc, #92]	; (80024f0 <SystemInit+0xe4>)
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002494:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <SystemInit+0xd8>)
 8002496:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <SystemInit+0xe8>)
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <SystemInit+0xd8>)
 800249c:	2200      	movs	r2, #0
 800249e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024a0:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <SystemInit+0xd8>)
 80024a2:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <SystemInit+0xe8>)
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <SystemInit+0xd8>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024ac:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <SystemInit+0xd8>)
 80024ae:	4a11      	ldr	r2, [pc, #68]	; (80024f4 <SystemInit+0xe8>)
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <SystemInit+0xd8>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024b8:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <SystemInit+0xd8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <SystemInit+0xd8>)
 80024be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024c4:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <SystemInit+0xd8>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <SystemInit+0xec>)
 80024cc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80024d0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00
 80024e0:	52002000 	.word	0x52002000
 80024e4:	58024400 	.word	0x58024400
 80024e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80024ec:	02020200 	.word	0x02020200
 80024f0:	01ff0000 	.word	0x01ff0000
 80024f4:	01010280 	.word	0x01010280
 80024f8:	52004000 	.word	0x52004000

080024fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002502:	f107 0310 	add.w	r3, r7, #16
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	609a      	str	r2, [r3, #8]
 800250e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002510:	1d3b      	adds	r3, r7, #4
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <MX_TIM1_Init+0xa0>)
 800251c:	4a20      	ldr	r2, [pc, #128]	; (80025a0 <MX_TIM1_Init+0xa4>)
 800251e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 8002520:	4b1e      	ldr	r3, [pc, #120]	; (800259c <MX_TIM1_Init+0xa0>)
 8002522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002526:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002528:	4b1c      	ldr	r3, [pc, #112]	; (800259c <MX_TIM1_Init+0xa0>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2800;
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <MX_TIM1_Init+0xa0>)
 8002530:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8002534:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <MX_TIM1_Init+0xa0>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800253c:	4b17      	ldr	r3, [pc, #92]	; (800259c <MX_TIM1_Init+0xa0>)
 800253e:	2200      	movs	r2, #0
 8002540:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002542:	4b16      	ldr	r3, [pc, #88]	; (800259c <MX_TIM1_Init+0xa0>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002548:	4814      	ldr	r0, [pc, #80]	; (800259c <MX_TIM1_Init+0xa0>)
 800254a:	f007 fb87 	bl	8009c5c <HAL_TIM_Base_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002554:	f7ff feb4 	bl	80022c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800255e:	f107 0310 	add.w	r3, r7, #16
 8002562:	4619      	mov	r1, r3
 8002564:	480d      	ldr	r0, [pc, #52]	; (800259c <MX_TIM1_Init+0xa0>)
 8002566:	f007 fc41 	bl	8009dec <HAL_TIM_ConfigClockSource>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002570:	f7ff fea6 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002574:	2320      	movs	r3, #32
 8002576:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	4619      	mov	r1, r3
 8002584:	4805      	ldr	r0, [pc, #20]	; (800259c <MX_TIM1_Init+0xa0>)
 8002586:	f007 fe61 	bl	800a24c <HAL_TIMEx_MasterConfigSynchronization>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002590:	f7ff fe96 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002594:	bf00      	nop
 8002596:	3720      	adds	r7, #32
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	24000b1c 	.word	0x24000b1c
 80025a0:	40010000 	.word	0x40010000

080025a4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025b4:	4b14      	ldr	r3, [pc, #80]	; (8002608 <MX_TIM6_Init+0x64>)
 80025b6:	4a15      	ldr	r2, [pc, #84]	; (800260c <MX_TIM6_Init+0x68>)
 80025b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <MX_TIM6_Init+0x64>)
 80025bc:	2200      	movs	r2, #0
 80025be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <MX_TIM6_Init+0x64>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2916-1;
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <MX_TIM6_Init+0x64>)
 80025c8:	f640 3263 	movw	r2, #2915	; 0xb63
 80025cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MX_TIM6_Init+0x64>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025d4:	480c      	ldr	r0, [pc, #48]	; (8002608 <MX_TIM6_Init+0x64>)
 80025d6:	f007 fb41 	bl	8009c5c <HAL_TIM_Base_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80025e0:	f7ff fe6e 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025e4:	2320      	movs	r3, #32
 80025e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	4619      	mov	r1, r3
 80025f0:	4805      	ldr	r0, [pc, #20]	; (8002608 <MX_TIM6_Init+0x64>)
 80025f2:	f007 fe2b 	bl	800a24c <HAL_TIMEx_MasterConfigSynchronization>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80025fc:	f7ff fe60 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	24000b68 	.word	0x24000b68
 800260c:	40001000 	.word	0x40001000

08002610 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a16      	ldr	r2, [pc, #88]	; (8002678 <HAL_TIM_Base_MspInit+0x68>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d10f      	bne.n	8002642 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 8002624:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002628:	4a14      	ldr	r2, [pc, #80]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 8002634:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002640:	e013      	b.n	800266a <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM6)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <HAL_TIM_Base_MspInit+0x70>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d10e      	bne.n	800266a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 800264e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 8002654:	f043 0310 	orr.w	r3, r3, #16
 8002658:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <HAL_TIM_Base_MspInit+0x6c>)
 800265e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
}
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40010000 	.word	0x40010000
 800267c:	58024400 	.word	0x58024400
 8002680:	40001000 	.word	0x40001000

08002684 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <MX_USART3_UART_Init+0x90>)
 800268a:	4a23      	ldr	r2, [pc, #140]	; (8002718 <MX_USART3_UART_Init+0x94>)
 800268c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800268e:	4b21      	ldr	r3, [pc, #132]	; (8002714 <MX_USART3_UART_Init+0x90>)
 8002690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002694:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002696:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <MX_USART3_UART_Init+0x90>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <MX_USART3_UART_Init+0x90>)
 800269e:	2200      	movs	r2, #0
 80026a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <MX_USART3_UART_Init+0x90>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <MX_USART3_UART_Init+0x90>)
 80026aa:	220c      	movs	r2, #12
 80026ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <MX_USART3_UART_Init+0x90>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b4:	4b17      	ldr	r3, [pc, #92]	; (8002714 <MX_USART3_UART_Init+0x90>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <MX_USART3_UART_Init+0x90>)
 80026bc:	2200      	movs	r2, #0
 80026be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026c0:	4b14      	ldr	r3, [pc, #80]	; (8002714 <MX_USART3_UART_Init+0x90>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026c6:	4b13      	ldr	r3, [pc, #76]	; (8002714 <MX_USART3_UART_Init+0x90>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026cc:	4811      	ldr	r0, [pc, #68]	; (8002714 <MX_USART3_UART_Init+0x90>)
 80026ce:	f007 fe4b 	bl	800a368 <HAL_UART_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80026d8:	f7ff fdf2 	bl	80022c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026dc:	2100      	movs	r1, #0
 80026de:	480d      	ldr	r0, [pc, #52]	; (8002714 <MX_USART3_UART_Init+0x90>)
 80026e0:	f008 feec 	bl	800b4bc <HAL_UARTEx_SetTxFifoThreshold>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80026ea:	f7ff fde9 	bl	80022c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ee:	2100      	movs	r1, #0
 80026f0:	4808      	ldr	r0, [pc, #32]	; (8002714 <MX_USART3_UART_Init+0x90>)
 80026f2:	f008 ff21 	bl	800b538 <HAL_UARTEx_SetRxFifoThreshold>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80026fc:	f7ff fde0 	bl	80022c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002700:	4804      	ldr	r0, [pc, #16]	; (8002714 <MX_USART3_UART_Init+0x90>)
 8002702:	f008 fea2 	bl	800b44a <HAL_UARTEx_DisableFifoMode>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800270c:	f7ff fdd8 	bl	80022c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	24000bb4 	.word	0x24000bb4
 8002718:	40004800 	.word	0x40004800

0800271c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b0b8      	sub	sp, #224	; 0xe0
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	22b8      	movs	r2, #184	; 0xb8
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f008 ffc1 	bl	800b6c4 <memset>
  if(uartHandle->Instance==USART3)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a25      	ldr	r2, [pc, #148]	; (80027dc <HAL_UART_MspInit+0xc0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d142      	bne.n	80027d2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800274c:	2302      	movs	r3, #2
 800274e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002750:	2300      	movs	r3, #0
 8002752:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	4618      	mov	r0, r3
 800275c:	f005 f9d0 	bl	8007b00 <HAL_RCCEx_PeriphCLKConfig>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002766:	f7ff fdab 	bl	80022c0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_UART_MspInit+0xc4>)
 800276c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002770:	4a1b      	ldr	r2, [pc, #108]	; (80027e0 <HAL_UART_MspInit+0xc4>)
 8002772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002776:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800277a:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_UART_MspInit+0xc4>)
 800277c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002788:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_UART_MspInit+0xc4>)
 800278a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800278e:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <HAL_UART_MspInit+0xc4>)
 8002790:	f043 0308 	orr.w	r3, r3, #8
 8002794:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_UART_MspInit+0xc4>)
 800279a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80027a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ae:	2302      	movs	r3, #2
 80027b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027c0:	2307      	movs	r3, #7
 80027c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027ca:	4619      	mov	r1, r3
 80027cc:	4805      	ldr	r0, [pc, #20]	; (80027e4 <HAL_UART_MspInit+0xc8>)
 80027ce:	f003 ffc9 	bl	8006764 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80027d2:	bf00      	nop
 80027d4:	37e0      	adds	r7, #224	; 0xe0
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40004800 	.word	0x40004800
 80027e0:	58024400 	.word	0x58024400
 80027e4:	58020c00 	.word	0x58020c00

080027e8 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002830 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027fc:	f7ff fe06 	bl	800240c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002800:	480c      	ldr	r0, [pc, #48]	; (8002834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002802:	490d      	ldr	r1, [pc, #52]	; (8002838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002804:	4a0d      	ldr	r2, [pc, #52]	; (800283c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002818:	4c0a      	ldr	r4, [pc, #40]	; (8002844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002826:	f008 ff19 	bl	800b65c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800282a:	f7ff fbf1 	bl	8002010 <main>
  bx  lr
 800282e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002830:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002834:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002838:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800283c:	0800bcb8 	.word	0x0800bcb8
  ldr r2, =_sbss
 8002840:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8002844:	24000c58 	.word	0x24000c58

08002848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002848:	e7fe      	b.n	8002848 <ADC_IRQHandler>
	...

0800284c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002852:	2003      	movs	r0, #3
 8002854:	f001 fb04 	bl	8003e60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002858:	f004 ff7c 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 800285c:	4602      	mov	r2, r0
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_Init+0x68>)
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	4913      	ldr	r1, [pc, #76]	; (80028b8 <HAL_Init+0x6c>)
 800286a:	5ccb      	ldrb	r3, [r1, r3]
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
 8002874:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002876:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <HAL_Init+0x68>)
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <HAL_Init+0x6c>)
 8002880:	5cd3      	ldrb	r3, [r2, r3]
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
 800288c:	4a0b      	ldr	r2, [pc, #44]	; (80028bc <HAL_Init+0x70>)
 800288e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002890:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <HAL_Init+0x74>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002896:	2000      	movs	r0, #0
 8002898:	f000 f814 	bl	80028c4 <HAL_InitTick>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e002      	b.n	80028ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028a6:	f7ff fd11 	bl	80022cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	58024400 	.word	0x58024400
 80028b8:	0800bb28 	.word	0x0800bb28
 80028bc:	24000008 	.word	0x24000008
 80028c0:	24000004 	.word	0x24000004

080028c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028cc:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_InitTick+0x60>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e021      	b.n	800291c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <HAL_InitTick+0x64>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_InitTick+0x60>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 fae9 	bl	8003ec6 <HAL_SYSTICK_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00e      	b.n	800291c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b0f      	cmp	r3, #15
 8002902:	d80a      	bhi.n	800291a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002904:	2200      	movs	r2, #0
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	f001 fab3 	bl	8003e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002910:	4a06      	ldr	r2, [pc, #24]	; (800292c <HAL_InitTick+0x68>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	24000010 	.word	0x24000010
 8002928:	24000004 	.word	0x24000004
 800292c:	2400000c 	.word	0x2400000c

08002930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_IncTick+0x20>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_IncTick+0x24>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4413      	add	r3, r2
 8002940:	4a04      	ldr	r2, [pc, #16]	; (8002954 <HAL_IncTick+0x24>)
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	24000010 	.word	0x24000010
 8002954:	24000c44 	.word	0x24000c44

08002958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return uwTick;
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_GetTick+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	24000c44 	.word	0x24000c44

08002970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7ff ffee 	bl	8002958 <HAL_GetTick>
 800297c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d005      	beq.n	8002996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_Delay+0x44>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002996:	bf00      	nop
 8002998:	f7ff ffde 	bl	8002958 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d8f7      	bhi.n	8002998 <HAL_Delay+0x28>
  {
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	24000010 	.word	0x24000010

080029b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	609a      	str	r2, [r3, #8]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	609a      	str	r2, [r3, #8]
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3360      	adds	r3, #96	; 0x60
 8002a32:	461a      	mov	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a54:	bf00      	nop
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	431a      	orrs	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	611a      	str	r2, [r3, #16]
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b087      	sub	sp, #28
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3360      	adds	r3, #96	; 0x60
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	601a      	str	r2, [r3, #0]
  }
}
 8002abc:	bf00      	nop
 8002abe:	371c      	adds	r7, #28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b087      	sub	sp, #28
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	3330      	adds	r3, #48	; 0x30
 8002afe:	461a      	mov	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	4413      	add	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	211f      	movs	r1, #31
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	401a      	ands	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	f003 011f 	and.w	r1, r3, #31
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	431a      	orrs	r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b3a:	bf00      	nop
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f023 0203 	bic.w	r2, r3, #3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	60da      	str	r2, [r3, #12]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3314      	adds	r3, #20
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	0e5b      	lsrs	r3, r3, #25
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	4413      	add	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	0d1b      	lsrs	r3, r3, #20
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	2107      	movs	r1, #7
 8002b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	401a      	ands	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	0d1b      	lsrs	r3, r3, #20
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002bb6:	bf00      	nop
 8002bb8:	371c      	adds	r7, #28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	401a      	ands	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f003 0318 	and.w	r3, r3, #24
 8002be6:	4908      	ldr	r1, [pc, #32]	; (8002c08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002be8:	40d9      	lsrs	r1, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	400b      	ands	r3, r1
 8002bee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	000fffff 	.word	0x000fffff

08002c0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 031f 	and.w	r3, r3, #31
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6093      	str	r3, [r2, #8]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	5fffffc0 	.word	0x5fffffc0

08002c4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c60:	d101      	bne.n	8002c66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <LL_ADC_EnableInternalRegulator+0x24>)
 8002c82:	4013      	ands	r3, r2
 8002c84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	6fffffc0 	.word	0x6fffffc0

08002c9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cb0:	d101      	bne.n	8002cb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <LL_ADC_Enable+0x24>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	7fffffc0 	.word	0x7fffffc0

08002cec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <LL_ADC_IsEnabled+0x18>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <LL_ADC_IsEnabled+0x1a>
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <LL_ADC_REG_StartConversion+0x24>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	f043 0204 	orr.w	r2, r3, #4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	7fffffc0 	.word	0x7fffffc0

08002d3c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d101      	bne.n	8002d54 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d101      	bne.n	8002d7a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d88:	b590      	push	{r4, r7, lr}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e138      	b.n	8003014 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7fe fcb9 	bl	8001728 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff ff3f 	bl	8002c4c <LL_ADC_IsDeepPowerDownEnabled>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff25 	bl	8002c28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff ff5a 	bl	8002c9c <LL_ADC_IsInternalRegulatorEnabled>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d114      	bne.n	8002e18 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ff3e 	bl	8002c74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002df8:	4b88      	ldr	r3, [pc, #544]	; (800301c <HAL_ADC_Init+0x294>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	099b      	lsrs	r3, r3, #6
 8002dfe:	4a88      	ldr	r2, [pc, #544]	; (8003020 <HAL_ADC_Init+0x298>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	099b      	lsrs	r3, r3, #6
 8002e06:	3301      	adds	r3, #1
 8002e08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e0a:	e002      	b.n	8002e12 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f9      	bne.n	8002e0c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff3d 	bl	8002c9c <LL_ADC_IsInternalRegulatorEnabled>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10d      	bne.n	8002e44 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2c:	f043 0210 	orr.w	r2, r3, #16
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff77 	bl	8002d3c <LL_ADC_REG_IsConversionOngoing>
 8002e4e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 80d2 	bne.w	8003002 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f040 80ce 	bne.w	8003002 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e6e:	f043 0202 	orr.w	r2, r3, #2
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff ff36 	bl	8002cec <LL_ADC_IsEnabled>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d110      	bne.n	8002ea8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e86:	4867      	ldr	r0, [pc, #412]	; (8003024 <HAL_ADC_Init+0x29c>)
 8002e88:	f7ff ff30 	bl	8002cec <LL_ADC_IsEnabled>
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	4866      	ldr	r0, [pc, #408]	; (8003028 <HAL_ADC_Init+0x2a0>)
 8002e90:	f7ff ff2c 	bl	8002cec <LL_ADC_IsEnabled>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4323      	orrs	r3, r4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4862      	ldr	r0, [pc, #392]	; (800302c <HAL_ADC_Init+0x2a4>)
 8002ea4:	f7ff fd88 	bl	80029b8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7d5b      	ldrb	r3, [r3, #21]
 8002eac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eb2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002eb8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	7f1b      	ldrb	r3, [r3, #28]
 8002ebe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7f1b      	ldrb	r3, [r3, #28]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d106      	bne.n	8002eda <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	045b      	lsls	r3, r3, #17
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	4b4c      	ldr	r3, [pc, #304]	; (8003030 <HAL_ADC_Init+0x2a8>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	69b9      	ldr	r1, [r7, #24]
 8002f06:	430b      	orrs	r3, r1
 8002f08:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ff14 	bl	8002d3c <LL_ADC_REG_IsConversionOngoing>
 8002f14:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff ff21 	bl	8002d62 <LL_ADC_INJ_IsConversionOngoing>
 8002f20:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d14a      	bne.n	8002fbe <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d147      	bne.n	8002fbe <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	7d1b      	ldrb	r3, [r3, #20]
 8002f32:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	4b3c      	ldr	r3, [pc, #240]	; (8003034 <HAL_ADC_Init+0x2ac>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	69b9      	ldr	r1, [r7, #24]
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d11b      	bne.n	8002f92 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	4b34      	ldr	r3, [pc, #208]	; (8003038 <HAL_ADC_Init+0x2b0>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f6e:	3a01      	subs	r2, #1
 8002f70:	0411      	lsls	r1, r2, #16
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f76:	4311      	orrs	r1, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f7c:	4311      	orrs	r1, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f82:	430a      	orrs	r2, r1
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	611a      	str	r2, [r3, #16]
 8002f90:	e007      	b.n	8002fa2 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 fcf3 	bl	80039a4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	f023 010f 	bic.w	r1, r3, #15
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	1e5a      	subs	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30
 8002fde:	e007      	b.n	8002ff0 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 020f 	bic.w	r2, r2, #15
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff4:	f023 0303 	bic.w	r3, r3, #3
 8002ff8:	f043 0201 	orr.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	655a      	str	r2, [r3, #84]	; 0x54
 8003000:	e007      	b.n	8003012 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f043 0210 	orr.w	r2, r3, #16
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003012:	7ffb      	ldrb	r3, [r7, #31]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3724      	adds	r7, #36	; 0x24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd90      	pop	{r4, r7, pc}
 800301c:	24000004 	.word	0x24000004
 8003020:	053e2d63 	.word	0x053e2d63
 8003024:	40022000 	.word	0x40022000
 8003028:	40022100 	.word	0x40022100
 800302c:	40022300 	.word	0x40022300
 8003030:	fff0c003 	.word	0xfff0c003
 8003034:	ffffbffc 	.word	0xffffbffc
 8003038:	fc00f81e 	.word	0xfc00f81e

0800303c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003048:	484f      	ldr	r0, [pc, #316]	; (8003188 <HAL_ADC_Start_DMA+0x14c>)
 800304a:	f7ff fddf 	bl	8002c0c <LL_ADC_GetMultimode>
 800304e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fe71 	bl	8002d3c <LL_ADC_REG_IsConversionOngoing>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	f040 808c 	bne.w	800317a <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_ADC_Start_DMA+0x34>
 800306c:	2302      	movs	r3, #2
 800306e:	e087      	b.n	8003180 <HAL_ADC_Start_DMA+0x144>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	2b05      	cmp	r3, #5
 8003082:	d002      	beq.n	800308a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	2b09      	cmp	r3, #9
 8003088:	d170      	bne.n	800316c <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 fb7a 	bl	8003784 <ADC_Enable>
 8003090:	4603      	mov	r3, r0
 8003092:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d163      	bne.n	8003162 <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800309e:	4b3b      	ldr	r3, [pc, #236]	; (800318c <HAL_ADC_Start_DMA+0x150>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a38      	ldr	r2, [pc, #224]	; (8003190 <HAL_ADC_Start_DMA+0x154>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d002      	beq.n	80030ba <HAL_ADC_Start_DMA+0x7e>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	e000      	b.n	80030bc <HAL_ADC_Start_DMA+0x80>
 80030ba:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_ADC_Start_DMA+0x158>)
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d002      	beq.n	80030ca <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e6:	f023 0206 	bic.w	r2, r3, #6
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	659a      	str	r2, [r3, #88]	; 0x58
 80030ee:	e002      	b.n	80030f6 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fa:	4a27      	ldr	r2, [pc, #156]	; (8003198 <HAL_ADC_Start_DMA+0x15c>)
 80030fc:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003102:	4a26      	ldr	r2, [pc, #152]	; (800319c <HAL_ADC_Start_DMA+0x160>)
 8003104:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310a:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <HAL_ADC_Start_DMA+0x164>)
 800310c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	221c      	movs	r2, #28
 8003114:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0210 	orr.w	r2, r2, #16
 800312c:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	4619      	mov	r1, r3
 8003138:	4610      	mov	r0, r2
 800313a:	f7ff fd04 	bl	8002b46 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3340      	adds	r3, #64	; 0x40
 8003148:	4619      	mov	r1, r3
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f001 fd1d 	bl	8004b8c <HAL_DMA_Start_IT>
 8003152:	4603      	mov	r3, r0
 8003154:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fdda 	bl	8002d14 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003160:	e00d      	b.n	800317e <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800316a:	e008      	b.n	800317e <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003178:	e001      	b.n	800317e <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800317a:	2302      	movs	r3, #2
 800317c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800317e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40022300 	.word	0x40022300
 800318c:	fffff0fe 	.word	0xfffff0fe
 8003190:	40022100 	.word	0x40022100
 8003194:	40022000 	.word	0x40022000
 8003198:	0800387d 	.word	0x0800387d
 800319c:	08003955 	.word	0x08003955
 80031a0:	08003971 	.word	0x08003971

080031a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b0a1      	sub	sp, #132	; 0x84
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a9a      	ldr	r2, [pc, #616]	; (800343c <HAL_ADC_ConfigChannel+0x284>)
 80031d2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x2a>
 80031de:	2302      	movs	r3, #2
 80031e0:	e2bc      	b.n	800375c <HAL_ADC_ConfigChannel+0x5a4>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fda4 	bl	8002d3c <LL_ADC_REG_IsConversionOngoing>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f040 82a1 	bne.w	800373e <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003204:	2b00      	cmp	r3, #0
 8003206:	d108      	bne.n	800321a <HAL_ADC_ConfigChannel+0x62>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	0e9b      	lsrs	r3, r3, #26
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	2201      	movs	r2, #1
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	e016      	b.n	8003248 <HAL_ADC_ConfigChannel+0x90>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800322a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800322c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003232:	2320      	movs	r3, #32
 8003234:	e003      	b.n	800323e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	2201      	movs	r2, #1
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	69d1      	ldr	r1, [r2, #28]
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	430b      	orrs	r3, r1
 8003254:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6859      	ldr	r1, [r3, #4]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	f7ff fc43 	bl	8002aee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fd65 	bl	8002d3c <LL_ADC_REG_IsConversionOngoing>
 8003272:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fd72 	bl	8002d62 <LL_ADC_INJ_IsConversionOngoing>
 800327e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003282:	2b00      	cmp	r3, #0
 8003284:	f040 80a0 	bne.w	80033c8 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 809c 	bne.w	80033c8 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	6819      	ldr	r1, [r3, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	461a      	mov	r2, r3
 800329e:	f7ff fc65 	bl	8002b6c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10b      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x110>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	695a      	ldr	r2, [r3, #20]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	e00a      	b.n	80032de <HAL_ADC_ConfigChannel+0x126>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	089b      	lsrs	r3, r3, #2
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d027      	beq.n	8003338 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6919      	ldr	r1, [r3, #16]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f6:	f7ff fb93 	bl	8002a20 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	6919      	ldr	r1, [r3, #16]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	7e5b      	ldrb	r3, [r3, #25]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d102      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x158>
 800330a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800330e:	e000      	b.n	8003312 <HAL_ADC_ConfigChannel+0x15a>
 8003310:	2300      	movs	r3, #0
 8003312:	461a      	mov	r2, r3
 8003314:	f7ff fbbd 	bl	8002a92 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	6919      	ldr	r1, [r3, #16]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	7e1b      	ldrb	r3, [r3, #24]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d102      	bne.n	800332e <HAL_ADC_ConfigChannel+0x176>
 8003328:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800332c:	e000      	b.n	8003330 <HAL_ADC_ConfigChannel+0x178>
 800332e:	2300      	movs	r3, #0
 8003330:	461a      	mov	r2, r3
 8003332:	f7ff fb95 	bl	8002a60 <LL_ADC_SetDataRightShift>
 8003336:	e047      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	069b      	lsls	r3, r3, #26
 8003348:	429a      	cmp	r2, r3
 800334a:	d107      	bne.n	800335c <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800335a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003362:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	069b      	lsls	r3, r3, #26
 800336c:	429a      	cmp	r2, r3
 800336e:	d107      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800337e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003386:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	069b      	lsls	r3, r3, #26
 8003390:	429a      	cmp	r2, r3
 8003392:	d107      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033a2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	069b      	lsls	r3, r3, #26
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d107      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fc8d 	bl	8002cec <LL_ADC_IsEnabled>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f040 81bb 	bne.w	8003750 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6819      	ldr	r1, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f7ff fbec 	bl	8002bc4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4a12      	ldr	r2, [pc, #72]	; (800343c <HAL_ADC_ConfigChannel+0x284>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	f040 8130 	bne.w	8003658 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x268>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	0e9b      	lsrs	r3, r3, #26
 800340e:	3301      	adds	r3, #1
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2b09      	cmp	r3, #9
 8003416:	bf94      	ite	ls
 8003418:	2301      	movls	r3, #1
 800341a:	2300      	movhi	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e01b      	b.n	8003458 <HAL_ADC_ConfigChannel+0x2a0>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800342e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003430:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003434:	2b00      	cmp	r3, #0
 8003436:	d103      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8003438:	2320      	movs	r3, #32
 800343a:	e005      	b.n	8003448 <HAL_ADC_ConfigChannel+0x290>
 800343c:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8003440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	3301      	adds	r3, #1
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	2b09      	cmp	r3, #9
 8003450:	bf94      	ite	ls
 8003452:	2301      	movls	r3, #1
 8003454:	2300      	movhi	r3, #0
 8003456:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003458:	2b00      	cmp	r3, #0
 800345a:	d079      	beq.n	8003550 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003464:	2b00      	cmp	r3, #0
 8003466:	d107      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x2c0>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	0e9b      	lsrs	r3, r3, #26
 800346e:	3301      	adds	r3, #1
 8003470:	069b      	lsls	r3, r3, #26
 8003472:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003476:	e015      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x2ec>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003488:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800348a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8003490:	2320      	movs	r3, #32
 8003492:	e003      	b.n	800349c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8003494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	3301      	adds	r3, #1
 800349e:	069b      	lsls	r3, r3, #26
 80034a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d109      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x30c>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	0e9b      	lsrs	r3, r3, #26
 80034b6:	3301      	adds	r3, #1
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2101      	movs	r1, #1
 80034be:	fa01 f303 	lsl.w	r3, r1, r3
 80034c2:	e017      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x33c>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80034d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80034d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80034dc:	2320      	movs	r3, #32
 80034de:	e003      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80034e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e2:	fab3 f383 	clz	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	3301      	adds	r3, #1
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	2101      	movs	r1, #1
 80034f0:	fa01 f303 	lsl.w	r3, r1, r3
 80034f4:	ea42 0103 	orr.w	r1, r2, r3
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <HAL_ADC_ConfigChannel+0x362>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	0e9b      	lsrs	r3, r3, #26
 800350a:	3301      	adds	r3, #1
 800350c:	f003 021f 	and.w	r2, r3, #31
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4413      	add	r3, r2
 8003516:	051b      	lsls	r3, r3, #20
 8003518:	e018      	b.n	800354c <HAL_ADC_ConfigChannel+0x394>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800352c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003532:	2320      	movs	r3, #32
 8003534:	e003      	b.n	800353e <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	3301      	adds	r3, #1
 8003540:	f003 021f 	and.w	r2, r3, #31
 8003544:	4613      	mov	r3, r2
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4413      	add	r3, r2
 800354a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800354c:	430b      	orrs	r3, r1
 800354e:	e07e      	b.n	800364e <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003558:	2b00      	cmp	r3, #0
 800355a:	d107      	bne.n	800356c <HAL_ADC_ConfigChannel+0x3b4>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	0e9b      	lsrs	r3, r3, #26
 8003562:	3301      	adds	r3, #1
 8003564:	069b      	lsls	r3, r3, #26
 8003566:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800356a:	e015      	b.n	8003598 <HAL_ADC_ConfigChannel+0x3e0>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	fa93 f3a3 	rbit	r3, r3
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003584:	2320      	movs	r3, #32
 8003586:	e003      	b.n	8003590 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	3301      	adds	r3, #1
 8003592:	069b      	lsls	r3, r3, #26
 8003594:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d109      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x400>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	0e9b      	lsrs	r3, r3, #26
 80035aa:	3301      	adds	r3, #1
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	2101      	movs	r1, #1
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	e017      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x430>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	61bb      	str	r3, [r7, #24]
  return result;
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80035d0:	2320      	movs	r3, #32
 80035d2:	e003      	b.n	80035dc <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	fab3 f383 	clz	r3, r3
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	3301      	adds	r3, #1
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	2101      	movs	r1, #1
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	ea42 0103 	orr.w	r1, r2, r3
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10d      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x45c>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	0e9b      	lsrs	r3, r3, #26
 80035fe:	3301      	adds	r3, #1
 8003600:	f003 021f 	and.w	r2, r3, #31
 8003604:	4613      	mov	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4413      	add	r3, r2
 800360a:	3b1e      	subs	r3, #30
 800360c:	051b      	lsls	r3, r3, #20
 800360e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003612:	e01b      	b.n	800364c <HAL_ADC_ConfigChannel+0x494>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	60fb      	str	r3, [r7, #12]
  return result;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 800362c:	2320      	movs	r3, #32
 800362e:	e003      	b.n	8003638 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	3301      	adds	r3, #1
 800363a:	f003 021f 	and.w	r2, r3, #31
 800363e:	4613      	mov	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	4413      	add	r3, r2
 8003644:	3b1e      	subs	r3, #30
 8003646:	051b      	lsls	r3, r3, #20
 8003648:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800364c:	430b      	orrs	r3, r1
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	6892      	ldr	r2, [r2, #8]
 8003652:	4619      	mov	r1, r3
 8003654:	f7ff fa8a 	bl	8002b6c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	da77      	bge.n	8003750 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003660:	4840      	ldr	r0, [pc, #256]	; (8003764 <HAL_ADC_ConfigChannel+0x5ac>)
 8003662:	f7ff f9cf 	bl	8002a04 <LL_ADC_GetCommonPathInternalCh>
 8003666:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003668:	483f      	ldr	r0, [pc, #252]	; (8003768 <HAL_ADC_ConfigChannel+0x5b0>)
 800366a:	f7ff fb3f 	bl	8002cec <LL_ADC_IsEnabled>
 800366e:	4604      	mov	r4, r0
 8003670:	483e      	ldr	r0, [pc, #248]	; (800376c <HAL_ADC_ConfigChannel+0x5b4>)
 8003672:	f7ff fb3b 	bl	8002cec <LL_ADC_IsEnabled>
 8003676:	4603      	mov	r3, r0
 8003678:	4323      	orrs	r3, r4
 800367a:	2b00      	cmp	r3, #0
 800367c:	d155      	bne.n	800372a <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a3b      	ldr	r2, [pc, #236]	; (8003770 <HAL_ADC_ConfigChannel+0x5b8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d122      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x516>
 8003688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11d      	bne.n	80036ce <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a35      	ldr	r2, [pc, #212]	; (800376c <HAL_ADC_ConfigChannel+0x5b4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d159      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800369c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800369e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036a2:	4619      	mov	r1, r3
 80036a4:	482f      	ldr	r0, [pc, #188]	; (8003764 <HAL_ADC_ConfigChannel+0x5ac>)
 80036a6:	f7ff f99a 	bl	80029de <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036aa:	4b32      	ldr	r3, [pc, #200]	; (8003774 <HAL_ADC_ConfigChannel+0x5bc>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	099b      	lsrs	r3, r3, #6
 80036b0:	4a31      	ldr	r2, [pc, #196]	; (8003778 <HAL_ADC_ConfigChannel+0x5c0>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	099b      	lsrs	r3, r3, #6
 80036b8:	3301      	adds	r3, #1
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80036be:	e002      	b.n	80036c6 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f9      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036cc:	e040      	b.n	8003750 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a2a      	ldr	r2, [pc, #168]	; (800377c <HAL_ADC_ConfigChannel+0x5c4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d111      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x544>
 80036d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10c      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a21      	ldr	r2, [pc, #132]	; (800376c <HAL_ADC_ConfigChannel+0x5b4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d131      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80036ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036f2:	4619      	mov	r1, r3
 80036f4:	481b      	ldr	r0, [pc, #108]	; (8003764 <HAL_ADC_ConfigChannel+0x5ac>)
 80036f6:	f7ff f972 	bl	80029de <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036fa:	e029      	b.n	8003750 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <HAL_ADC_ConfigChannel+0x5c8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d124      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x598>
 8003706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d11f      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a15      	ldr	r2, [pc, #84]	; (800376c <HAL_ADC_ConfigChannel+0x5b4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d11a      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800371a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003720:	4619      	mov	r1, r3
 8003722:	4810      	ldr	r0, [pc, #64]	; (8003764 <HAL_ADC_ConfigChannel+0x5ac>)
 8003724:	f7ff f95b 	bl	80029de <LL_ADC_SetCommonPathInternalCh>
 8003728:	e012      	b.n	8003750 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372e:	f043 0220 	orr.w	r2, r3, #32
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800373c:	e008      	b.n	8003750 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003742:	f043 0220 	orr.w	r2, r3, #32
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003758:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800375c:	4618      	mov	r0, r3
 800375e:	3784      	adds	r7, #132	; 0x84
 8003760:	46bd      	mov	sp, r7
 8003762:	bd90      	pop	{r4, r7, pc}
 8003764:	40022300 	.word	0x40022300
 8003768:	40022000 	.word	0x40022000
 800376c:	40022100 	.word	0x40022100
 8003770:	cb840000 	.word	0xcb840000
 8003774:	24000004 	.word	0x24000004
 8003778:	053e2d63 	.word	0x053e2d63
 800377c:	bac04000 	.word	0xbac04000
 8003780:	cfb80000 	.word	0xcfb80000

08003784 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff faab 	bl	8002cec <LL_ADC_IsEnabled>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d161      	bne.n	8003860 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	4b32      	ldr	r3, [pc, #200]	; (800386c <ADC_Enable+0xe8>)
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ae:	f043 0210 	orr.w	r2, r3, #16
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ba:	f043 0201 	orr.w	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e04d      	b.n	8003862 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fa7a 	bl	8002cc4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037d0:	f7ff f8c2 	bl	8002958 <HAL_GetTick>
 80037d4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037d6:	4826      	ldr	r0, [pc, #152]	; (8003870 <ADC_Enable+0xec>)
 80037d8:	f7ff fa18 	bl	8002c0c <LL_ADC_GetMultimode>
 80037dc:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a24      	ldr	r2, [pc, #144]	; (8003874 <ADC_Enable+0xf0>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d002      	beq.n	80037ee <ADC_Enable+0x6a>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	e000      	b.n	80037f0 <ADC_Enable+0x6c>
 80037ee:	4b22      	ldr	r3, [pc, #136]	; (8003878 <ADC_Enable+0xf4>)
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6812      	ldr	r2, [r2, #0]
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d02c      	beq.n	8003852 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d130      	bne.n	8003860 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037fe:	e028      	b.n	8003852 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fa71 	bl	8002cec <LL_ADC_IsEnabled>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d104      	bne.n	800381a <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fa55 	bl	8002cc4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800381a:	f7ff f89d 	bl	8002958 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d914      	bls.n	8003852 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b01      	cmp	r3, #1
 8003834:	d00d      	beq.n	8003852 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	f043 0210 	orr.w	r2, r3, #16
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003846:	f043 0201 	orr.w	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e007      	b.n	8003862 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d1cf      	bne.n	8003800 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	8000003f 	.word	0x8000003f
 8003870:	40022300 	.word	0x40022300
 8003874:	40022100 	.word	0x40022100
 8003878:	40022000 	.word	0x40022000

0800387c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003892:	2b00      	cmp	r3, #0
 8003894:	d14b      	bne.n	800392e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d021      	beq.n	80038f4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff f907 	bl	8002ac8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d032      	beq.n	8003926 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d12b      	bne.n	8003926 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d11f      	bne.n	8003926 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f043 0201 	orr.w	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
 80038f2:	e018      	b.n	8003926 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d111      	bne.n	8003926 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d105      	bne.n	8003926 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f043 0201 	orr.w	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7fe fa08 	bl	8001d3c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800392c:	e00e      	b.n	800394c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f7ff fc32 	bl	80031a4 <HAL_ADC_ErrorCallback>
}
 8003940:	e004      	b.n	800394c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f7fe f9c6 	bl	8001cf4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	f043 0204 	orr.w	r2, r3, #4
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f7ff fc04 	bl	80031a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80039ac:	4b5f      	ldr	r3, [pc, #380]	; (8003b2c <ADC_ConfigureBoostMode+0x188>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01c      	beq.n	80039f2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80039b8:	f004 f846 	bl	8007a48 <HAL_RCC_GetHCLKFreq>
 80039bc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039c6:	d010      	beq.n	80039ea <ADC_ConfigureBoostMode+0x46>
 80039c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039cc:	d871      	bhi.n	8003ab2 <ADC_ConfigureBoostMode+0x10e>
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d2:	d002      	beq.n	80039da <ADC_ConfigureBoostMode+0x36>
 80039d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039d8:	d16b      	bne.n	8003ab2 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	0c1b      	lsrs	r3, r3, #16
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e6:	60fb      	str	r3, [r7, #12]
        break;
 80039e8:	e066      	b.n	8003ab8 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	089b      	lsrs	r3, r3, #2
 80039ee:	60fb      	str	r3, [r7, #12]
        break;
 80039f0:	e062      	b.n	8003ab8 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80039f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80039f6:	f004 ff8f 	bl	8008918 <HAL_RCCEx_GetPeriphCLKFreq>
 80039fa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a04:	d051      	beq.n	8003aaa <ADC_ConfigureBoostMode+0x106>
 8003a06:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a0a:	d854      	bhi.n	8003ab6 <ADC_ConfigureBoostMode+0x112>
 8003a0c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a10:	d047      	beq.n	8003aa2 <ADC_ConfigureBoostMode+0xfe>
 8003a12:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a16:	d84e      	bhi.n	8003ab6 <ADC_ConfigureBoostMode+0x112>
 8003a18:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a1c:	d03d      	beq.n	8003a9a <ADC_ConfigureBoostMode+0xf6>
 8003a1e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a22:	d848      	bhi.n	8003ab6 <ADC_ConfigureBoostMode+0x112>
 8003a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a28:	d033      	beq.n	8003a92 <ADC_ConfigureBoostMode+0xee>
 8003a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a2e:	d842      	bhi.n	8003ab6 <ADC_ConfigureBoostMode+0x112>
 8003a30:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a34:	d029      	beq.n	8003a8a <ADC_ConfigureBoostMode+0xe6>
 8003a36:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a3a:	d83c      	bhi.n	8003ab6 <ADC_ConfigureBoostMode+0x112>
 8003a3c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a40:	d01a      	beq.n	8003a78 <ADC_ConfigureBoostMode+0xd4>
 8003a42:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a46:	d836      	bhi.n	8003ab6 <ADC_ConfigureBoostMode+0x112>
 8003a48:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a4c:	d014      	beq.n	8003a78 <ADC_ConfigureBoostMode+0xd4>
 8003a4e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a52:	d830      	bhi.n	8003ab6 <ADC_ConfigureBoostMode+0x112>
 8003a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a58:	d00e      	beq.n	8003a78 <ADC_ConfigureBoostMode+0xd4>
 8003a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5e:	d82a      	bhi.n	8003ab6 <ADC_ConfigureBoostMode+0x112>
 8003a60:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a64:	d008      	beq.n	8003a78 <ADC_ConfigureBoostMode+0xd4>
 8003a66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a6a:	d824      	bhi.n	8003ab6 <ADC_ConfigureBoostMode+0x112>
 8003a6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a70:	d002      	beq.n	8003a78 <ADC_ConfigureBoostMode+0xd4>
 8003a72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a76:	d11e      	bne.n	8003ab6 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	0c9b      	lsrs	r3, r3, #18
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a86:	60fb      	str	r3, [r7, #12]
        break;
 8003a88:	e016      	b.n	8003ab8 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	60fb      	str	r3, [r7, #12]
        break;
 8003a90:	e012      	b.n	8003ab8 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	60fb      	str	r3, [r7, #12]
        break;
 8003a98:	e00e      	b.n	8003ab8 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	099b      	lsrs	r3, r3, #6
 8003a9e:	60fb      	str	r3, [r7, #12]
        break;
 8003aa0:	e00a      	b.n	8003ab8 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	09db      	lsrs	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]
        break;
 8003aa8:	e006      	b.n	8003ab8 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	60fb      	str	r3, [r7, #12]
        break;
 8003ab0:	e002      	b.n	8003ab8 <ADC_ConfigureBoostMode+0x114>
        break;
 8003ab2:	bf00      	nop
 8003ab4:	e000      	b.n	8003ab8 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8003ab6:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <ADC_ConfigureBoostMode+0x18c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d808      	bhi.n	8003ad8 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ad4:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ad6:	e025      	b.n	8003b24 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a16      	ldr	r2, [pc, #88]	; (8003b34 <ADC_ConfigureBoostMode+0x190>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d80a      	bhi.n	8003af6 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af2:	609a      	str	r2, [r3, #8]
}
 8003af4:	e016      	b.n	8003b24 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4a0f      	ldr	r2, [pc, #60]	; (8003b38 <ADC_ConfigureBoostMode+0x194>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d80a      	bhi.n	8003b14 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b10:	609a      	str	r2, [r3, #8]
}
 8003b12:	e007      	b.n	8003b24 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003b22:	609a      	str	r2, [r3, #8]
}
 8003b24:	bf00      	nop
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40022300 	.word	0x40022300
 8003b30:	005f5e10 	.word	0x005f5e10
 8003b34:	00bebc20 	.word	0x00bebc20
 8003b38:	017d7840 	.word	0x017d7840

08003b3c <LL_ADC_IsEnabled>:
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <LL_ADC_IsEnabled+0x18>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <LL_ADC_IsEnabled+0x1a>
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d101      	bne.n	8003b7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b09f      	sub	sp, #124	; 0x7c
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e080      	b.n	8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a3d      	ldr	r2, [pc, #244]	; (8003cb0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d102      	bne.n	8003bc6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003bc0:	4b3c      	ldr	r3, [pc, #240]	; (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	e001      	b.n	8003bca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10b      	bne.n	8003be8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	f043 0220 	orr.w	r2, r3, #32
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e05f      	b.n	8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff ffb9 	bl	8003b62 <LL_ADC_REG_IsConversionOngoing>
 8003bf0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff ffb3 	bl	8003b62 <LL_ADC_REG_IsConversionOngoing>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d141      	bne.n	8003c86 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003c02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d13e      	bne.n	8003c86 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c08:	4b2b      	ldr	r3, [pc, #172]	; (8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003c0a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d020      	beq.n	8003c56 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c24:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c26:	4822      	ldr	r0, [pc, #136]	; (8003cb0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003c28:	f7ff ff88 	bl	8003b3c <LL_ADC_IsEnabled>
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	4821      	ldr	r0, [pc, #132]	; (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003c30:	f7ff ff84 	bl	8003b3c <LL_ADC_IsEnabled>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4323      	orrs	r3, r4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d12e      	bne.n	8003c9a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	6811      	ldr	r1, [r2, #0]
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	6892      	ldr	r2, [r2, #8]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c52:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c54:	e021      	b.n	8003c9a <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c60:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c62:	4813      	ldr	r0, [pc, #76]	; (8003cb0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003c64:	f7ff ff6a 	bl	8003b3c <LL_ADC_IsEnabled>
 8003c68:	4604      	mov	r4, r0
 8003c6a:	4812      	ldr	r0, [pc, #72]	; (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003c6c:	f7ff ff66 	bl	8003b3c <LL_ADC_IsEnabled>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4323      	orrs	r3, r4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d110      	bne.n	8003c9a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	4b0f      	ldr	r3, [pc, #60]	; (8003cbc <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c82:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c84:	e009      	b.n	8003c9a <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8a:	f043 0220 	orr.w	r2, r3, #32
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003c98:	e000      	b.n	8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c9a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ca4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	377c      	adds	r7, #124	; 0x7c
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd90      	pop	{r4, r7, pc}
 8003cb0:	40022000 	.word	0x40022000
 8003cb4:	40022100 	.word	0x40022100
 8003cb8:	40022300 	.word	0x40022300
 8003cbc:	fffff0e0 	.word	0xfffff0e0

08003cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <__NVIC_SetPriorityGrouping+0x40>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <__NVIC_SetPriorityGrouping+0x44>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cee:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <__NVIC_SetPriorityGrouping+0x40>)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	60d3      	str	r3, [r2, #12]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	e000ed00 	.word	0xe000ed00
 8003d04:	05fa0000 	.word	0x05fa0000

08003d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <__NVIC_GetPriorityGrouping+0x18>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	0a1b      	lsrs	r3, r3, #8
 8003d12:	f003 0307 	and.w	r3, r3, #7
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	e000ed00 	.word	0xe000ed00

08003d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	db0b      	blt.n	8003d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	f003 021f 	and.w	r2, r3, #31
 8003d3c:	4907      	ldr	r1, [pc, #28]	; (8003d5c <__NVIC_EnableIRQ+0x38>)
 8003d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	2001      	movs	r0, #1
 8003d46:	fa00 f202 	lsl.w	r2, r0, r2
 8003d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	e000e100 	.word	0xe000e100

08003d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	6039      	str	r1, [r7, #0]
 8003d6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	db0a      	blt.n	8003d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	490c      	ldr	r1, [pc, #48]	; (8003dac <__NVIC_SetPriority+0x4c>)
 8003d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d7e:	0112      	lsls	r2, r2, #4
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	440b      	add	r3, r1
 8003d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d88:	e00a      	b.n	8003da0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	4908      	ldr	r1, [pc, #32]	; (8003db0 <__NVIC_SetPriority+0x50>)
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	3b04      	subs	r3, #4
 8003d98:	0112      	lsls	r2, r2, #4
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	761a      	strb	r2, [r3, #24]
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	e000e100 	.word	0xe000e100
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b089      	sub	sp, #36	; 0x24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f1c3 0307 	rsb	r3, r3, #7
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	bf28      	it	cs
 8003dd2:	2304      	movcs	r3, #4
 8003dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	2b06      	cmp	r3, #6
 8003ddc:	d902      	bls.n	8003de4 <NVIC_EncodePriority+0x30>
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	3b03      	subs	r3, #3
 8003de2:	e000      	b.n	8003de6 <NVIC_EncodePriority+0x32>
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	43da      	mvns	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	401a      	ands	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	fa01 f303 	lsl.w	r3, r1, r3
 8003e06:	43d9      	mvns	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e0c:	4313      	orrs	r3, r2
         );
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3724      	adds	r7, #36	; 0x24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e2c:	d301      	bcc.n	8003e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e00f      	b.n	8003e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e32:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <SysTick_Config+0x40>)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e3a:	210f      	movs	r1, #15
 8003e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e40:	f7ff ff8e 	bl	8003d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <SysTick_Config+0x40>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <SysTick_Config+0x40>)
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	e000e010 	.word	0xe000e010

08003e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ff29 	bl	8003cc0 <__NVIC_SetPriorityGrouping>
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e84:	f7ff ff40 	bl	8003d08 <__NVIC_GetPriorityGrouping>
 8003e88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	6978      	ldr	r0, [r7, #20]
 8003e90:	f7ff ff90 	bl	8003db4 <NVIC_EncodePriority>
 8003e94:	4602      	mov	r2, r0
 8003e96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff5f 	bl	8003d60 <__NVIC_SetPriority>
}
 8003ea2:	bf00      	nop
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003eb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ff33 	bl	8003d24 <__NVIC_EnableIRQ>
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff ffa4 	bl	8003e1c <SysTick_Config>
 8003ed4:	4603      	mov	r3, r0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e014      	b.n	8003f1a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	791b      	ldrb	r3, [r3, #4]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7fd fd75 	bl	80019f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	795b      	ldrb	r3, [r3, #5]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d101      	bne.n	8003f42 <HAL_DAC_Start_DMA+0x1e>
 8003f3e:	2302      	movs	r3, #2
 8003f40:	e0ab      	b.n	800409a <HAL_DAC_Start_DMA+0x176>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d12f      	bne.n	8003fb4 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4a52      	ldr	r2, [pc, #328]	; (80040a4 <HAL_DAC_Start_DMA+0x180>)
 8003f5a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	4a51      	ldr	r2, [pc, #324]	; (80040a8 <HAL_DAC_Start_DMA+0x184>)
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	4a50      	ldr	r2, [pc, #320]	; (80040ac <HAL_DAC_Start_DMA+0x188>)
 8003f6a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f7a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d013      	beq.n	8003faa <HAL_DAC_Start_DMA+0x86>
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d845      	bhi.n	8004014 <HAL_DAC_Start_DMA+0xf0>
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_DAC_Start_DMA+0x72>
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d005      	beq.n	8003fa0 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003f94:	e03e      	b.n	8004014 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	613b      	str	r3, [r7, #16]
        break;
 8003f9e:	e03c      	b.n	800401a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	613b      	str	r3, [r7, #16]
        break;
 8003fa8:	e037      	b.n	800401a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3310      	adds	r3, #16
 8003fb0:	613b      	str	r3, [r7, #16]
        break;
 8003fb2:	e032      	b.n	800401a <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4a3d      	ldr	r2, [pc, #244]	; (80040b0 <HAL_DAC_Start_DMA+0x18c>)
 8003fba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4a3c      	ldr	r2, [pc, #240]	; (80040b4 <HAL_DAC_Start_DMA+0x190>)
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4a3b      	ldr	r2, [pc, #236]	; (80040b8 <HAL_DAC_Start_DMA+0x194>)
 8003fca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003fda:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d013      	beq.n	800400a <HAL_DAC_Start_DMA+0xe6>
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d817      	bhi.n	8004018 <HAL_DAC_Start_DMA+0xf4>
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_DAC_Start_DMA+0xd2>
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d005      	beq.n	8004000 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003ff4:	e010      	b.n	8004018 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3314      	adds	r3, #20
 8003ffc:	613b      	str	r3, [r7, #16]
        break;
 8003ffe:	e00c      	b.n	800401a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3318      	adds	r3, #24
 8004006:	613b      	str	r3, [r7, #16]
        break;
 8004008:	e007      	b.n	800401a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	331c      	adds	r3, #28
 8004010:	613b      	str	r3, [r7, #16]
        break;
 8004012:	e002      	b.n	800401a <HAL_DAC_Start_DMA+0xf6>
        break;
 8004014:	bf00      	nop
 8004016:	e000      	b.n	800401a <HAL_DAC_Start_DMA+0xf6>
        break;
 8004018:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d111      	bne.n	8004044 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800402e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6898      	ldr	r0, [r3, #8]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	f000 fda7 	bl	8004b8c <HAL_DMA_Start_IT>
 800403e:	4603      	mov	r3, r0
 8004040:	75fb      	strb	r3, [r7, #23]
 8004042:	e010      	b.n	8004066 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004052:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68d8      	ldr	r0, [r3, #12]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	f000 fd95 	bl	8004b8c <HAL_DMA_Start_IT>
 8004062:	4603      	mov	r3, r0
 8004064:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800406c:	7dfb      	ldrb	r3, [r7, #23]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10c      	bne.n	800408c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6819      	ldr	r1, [r3, #0]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2201      	movs	r2, #1
 8004080:	409a      	lsls	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e005      	b.n	8004098 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f043 0204 	orr.w	r2, r3, #4
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004098:	7dfb      	ldrb	r3, [r7, #23]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	08004359 	.word	0x08004359
 80040a8:	0800437b 	.word	0x0800437b
 80040ac:	08004397 	.word	0x08004397
 80040b0:	08004401 	.word	0x08004401
 80040b4:	08004423 	.word	0x08004423
 80040b8:	0800443f 	.word	0x0800443f

080040bc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	795b      	ldrb	r3, [r3, #5]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_DAC_ConfigChannel+0x18>
 800410c:	2302      	movs	r3, #2
 800410e:	e11d      	b.n	800434c <HAL_DAC_ConfigChannel+0x254>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2202      	movs	r2, #2
 800411a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b04      	cmp	r3, #4
 8004122:	d174      	bne.n	800420e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004124:	f7fe fc18 	bl	8002958 <HAL_GetTick>
 8004128:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d134      	bne.n	800419a <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004130:	e011      	b.n	8004156 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004132:	f7fe fc11 	bl	8002958 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b01      	cmp	r3, #1
 800413e:	d90a      	bls.n	8004156 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f043 0208 	orr.w	r2, r3, #8
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2203      	movs	r2, #3
 8004150:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e0fa      	b.n	800434c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800415c:	4b7d      	ldr	r3, [pc, #500]	; (8004354 <HAL_DAC_ConfigChannel+0x25c>)
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e6      	bne.n	8004132 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004164:	2001      	movs	r0, #1
 8004166:	f7fe fc03 	bl	8002970 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	6992      	ldr	r2, [r2, #24]
 8004172:	641a      	str	r2, [r3, #64]	; 0x40
 8004174:	e01e      	b.n	80041b4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004176:	f7fe fbef 	bl	8002958 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b01      	cmp	r3, #1
 8004182:	d90a      	bls.n	800419a <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f043 0208 	orr.w	r2, r3, #8
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2203      	movs	r2, #3
 8004194:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e0d8      	b.n	800434c <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	dbe8      	blt.n	8004176 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80041a4:	2001      	movs	r0, #1
 80041a6:	f7fe fbe3 	bl	8002970 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68ba      	ldr	r2, [r7, #8]
 80041b0:	6992      	ldr	r2, [r2, #24]
 80041b2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80041c4:	fa01 f303 	lsl.w	r3, r1, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	ea02 0103 	and.w	r1, r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	69da      	ldr	r2, [r3, #28]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	409a      	lsls	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	21ff      	movs	r1, #255	; 0xff
 80041f0:	fa01 f303 	lsl.w	r3, r1, r3
 80041f4:	43db      	mvns	r3, r3
 80041f6:	ea02 0103 	and.w	r1, r2, r3
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	6a1a      	ldr	r2, [r3, #32]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	409a      	lsls	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d11d      	bne.n	8004252 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	221f      	movs	r2, #31
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4013      	ands	r3, r2
 8004230:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004258:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2207      	movs	r2, #7
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4013      	ands	r3, r2
 800426c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d102      	bne.n	800427c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	e00f      	b.n	800429c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d102      	bne.n	800428a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004284:	2301      	movs	r3, #1
 8004286:	61fb      	str	r3, [r7, #28]
 8004288:	e008      	b.n	800429c <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d102      	bne.n	8004298 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004292:	2301      	movs	r3, #1
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	e001      	b.n	800429c <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004298:	2300      	movs	r3, #0
 800429a:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	69fa      	ldr	r2, [r7, #28]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6819      	ldr	r1, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f003 0310 	and.w	r3, r3, #16
 80042d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43da      	mvns	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	400a      	ands	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43db      	mvns	r3, r3
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4013      	ands	r3, r2
 8004300:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f003 0310 	and.w	r3, r3, #16
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6819      	ldr	r1, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f003 0310 	and.w	r3, r3, #16
 800432e:	22c0      	movs	r2, #192	; 0xc0
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	43da      	mvns	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	400a      	ands	r2, r1
 800433c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20008000 	.word	0x20008000

08004358 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7ff fea8 	bl	80040bc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	711a      	strb	r2, [r3, #4]
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7ff fea1 	bl	80040d0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800438e:	bf00      	nop
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b084      	sub	sp, #16
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f043 0204 	orr.w	r2, r3, #4
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f7ff fe97 	bl	80040e4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	711a      	strb	r2, [r3, #4]
}
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f7ff ffd8 	bl	80043c4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	711a      	strb	r2, [r3, #4]
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff ffd1 	bl	80043d8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	f043 0204 	orr.w	r2, r3, #4
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff ffc7 	bl	80043ec <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	711a      	strb	r2, [r3, #4]
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004474:	f7fe fa70 	bl	8002958 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e37f      	b.n	8004b84 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a66      	ldr	r2, [pc, #408]	; (8004624 <HAL_DMA_Init+0x1b8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d04a      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a65      	ldr	r2, [pc, #404]	; (8004628 <HAL_DMA_Init+0x1bc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d045      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a63      	ldr	r2, [pc, #396]	; (800462c <HAL_DMA_Init+0x1c0>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d040      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a62      	ldr	r2, [pc, #392]	; (8004630 <HAL_DMA_Init+0x1c4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d03b      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a60      	ldr	r2, [pc, #384]	; (8004634 <HAL_DMA_Init+0x1c8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d036      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a5f      	ldr	r2, [pc, #380]	; (8004638 <HAL_DMA_Init+0x1cc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d031      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a5d      	ldr	r2, [pc, #372]	; (800463c <HAL_DMA_Init+0x1d0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d02c      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a5c      	ldr	r2, [pc, #368]	; (8004640 <HAL_DMA_Init+0x1d4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d027      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a5a      	ldr	r2, [pc, #360]	; (8004644 <HAL_DMA_Init+0x1d8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d022      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a59      	ldr	r2, [pc, #356]	; (8004648 <HAL_DMA_Init+0x1dc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d01d      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a57      	ldr	r2, [pc, #348]	; (800464c <HAL_DMA_Init+0x1e0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d018      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a56      	ldr	r2, [pc, #344]	; (8004650 <HAL_DMA_Init+0x1e4>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d013      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a54      	ldr	r2, [pc, #336]	; (8004654 <HAL_DMA_Init+0x1e8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00e      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a53      	ldr	r2, [pc, #332]	; (8004658 <HAL_DMA_Init+0x1ec>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d009      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a51      	ldr	r2, [pc, #324]	; (800465c <HAL_DMA_Init+0x1f0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d004      	beq.n	8004524 <HAL_DMA_Init+0xb8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a50      	ldr	r2, [pc, #320]	; (8004660 <HAL_DMA_Init+0x1f4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d101      	bne.n	8004528 <HAL_DMA_Init+0xbc>
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <HAL_DMA_Init+0xbe>
 8004528:	2300      	movs	r3, #0
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 813c 	beq.w	80047a8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a37      	ldr	r2, [pc, #220]	; (8004624 <HAL_DMA_Init+0x1b8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d04a      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a36      	ldr	r2, [pc, #216]	; (8004628 <HAL_DMA_Init+0x1bc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d045      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a34      	ldr	r2, [pc, #208]	; (800462c <HAL_DMA_Init+0x1c0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d040      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a33      	ldr	r2, [pc, #204]	; (8004630 <HAL_DMA_Init+0x1c4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d03b      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a31      	ldr	r2, [pc, #196]	; (8004634 <HAL_DMA_Init+0x1c8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d036      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a30      	ldr	r2, [pc, #192]	; (8004638 <HAL_DMA_Init+0x1cc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d031      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a2e      	ldr	r2, [pc, #184]	; (800463c <HAL_DMA_Init+0x1d0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d02c      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a2d      	ldr	r2, [pc, #180]	; (8004640 <HAL_DMA_Init+0x1d4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d027      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a2b      	ldr	r2, [pc, #172]	; (8004644 <HAL_DMA_Init+0x1d8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d022      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a2a      	ldr	r2, [pc, #168]	; (8004648 <HAL_DMA_Init+0x1dc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d01d      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a28      	ldr	r2, [pc, #160]	; (800464c <HAL_DMA_Init+0x1e0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d018      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a27      	ldr	r2, [pc, #156]	; (8004650 <HAL_DMA_Init+0x1e4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a25      	ldr	r2, [pc, #148]	; (8004654 <HAL_DMA_Init+0x1e8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a24      	ldr	r2, [pc, #144]	; (8004658 <HAL_DMA_Init+0x1ec>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d009      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a22      	ldr	r2, [pc, #136]	; (800465c <HAL_DMA_Init+0x1f0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d004      	beq.n	80045e0 <HAL_DMA_Init+0x174>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a21      	ldr	r2, [pc, #132]	; (8004660 <HAL_DMA_Init+0x1f4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d108      	bne.n	80045f2 <HAL_DMA_Init+0x186>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0201 	bic.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e007      	b.n	8004602 <HAL_DMA_Init+0x196>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0201 	bic.w	r2, r2, #1
 8004600:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004602:	e02f      	b.n	8004664 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004604:	f7fe f9a8 	bl	8002958 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b05      	cmp	r3, #5
 8004610:	d928      	bls.n	8004664 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2203      	movs	r2, #3
 800461c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e2af      	b.n	8004b84 <HAL_DMA_Init+0x718>
 8004624:	40020010 	.word	0x40020010
 8004628:	40020028 	.word	0x40020028
 800462c:	40020040 	.word	0x40020040
 8004630:	40020058 	.word	0x40020058
 8004634:	40020070 	.word	0x40020070
 8004638:	40020088 	.word	0x40020088
 800463c:	400200a0 	.word	0x400200a0
 8004640:	400200b8 	.word	0x400200b8
 8004644:	40020410 	.word	0x40020410
 8004648:	40020428 	.word	0x40020428
 800464c:	40020440 	.word	0x40020440
 8004650:	40020458 	.word	0x40020458
 8004654:	40020470 	.word	0x40020470
 8004658:	40020488 	.word	0x40020488
 800465c:	400204a0 	.word	0x400204a0
 8004660:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1c8      	bne.n	8004604 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4b73      	ldr	r3, [pc, #460]	; (800484c <HAL_DMA_Init+0x3e0>)
 800467e:	4013      	ands	r3, r2
 8004680:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800468a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004696:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d107      	bne.n	80046c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	4313      	orrs	r3, r2
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b28      	cmp	r3, #40	; 0x28
 80046ce:	d903      	bls.n	80046d8 <HAL_DMA_Init+0x26c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b2e      	cmp	r3, #46	; 0x2e
 80046d6:	d91f      	bls.n	8004718 <HAL_DMA_Init+0x2ac>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b3e      	cmp	r3, #62	; 0x3e
 80046de:	d903      	bls.n	80046e8 <HAL_DMA_Init+0x27c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b42      	cmp	r3, #66	; 0x42
 80046e6:	d917      	bls.n	8004718 <HAL_DMA_Init+0x2ac>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b46      	cmp	r3, #70	; 0x46
 80046ee:	d903      	bls.n	80046f8 <HAL_DMA_Init+0x28c>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b48      	cmp	r3, #72	; 0x48
 80046f6:	d90f      	bls.n	8004718 <HAL_DMA_Init+0x2ac>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b4e      	cmp	r3, #78	; 0x4e
 80046fe:	d903      	bls.n	8004708 <HAL_DMA_Init+0x29c>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b52      	cmp	r3, #82	; 0x52
 8004706:	d907      	bls.n	8004718 <HAL_DMA_Init+0x2ac>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b73      	cmp	r3, #115	; 0x73
 800470e:	d905      	bls.n	800471c <HAL_DMA_Init+0x2b0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b77      	cmp	r3, #119	; 0x77
 8004716:	d801      	bhi.n	800471c <HAL_DMA_Init+0x2b0>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <HAL_DMA_Init+0x2b2>
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004728:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f023 0307 	bic.w	r3, r3, #7
 8004740:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	2b04      	cmp	r3, #4
 8004752:	d117      	bne.n	8004784 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00e      	beq.n	8004784 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f001 fe72 	bl	8006450 <DMA_CheckFifoParam>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2240      	movs	r2, #64	; 0x40
 8004776:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e1ff      	b.n	8004b84 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f001 fdad 	bl	80062ec <DMA_CalcBaseAndBitshift>
 8004792:	4603      	mov	r3, r0
 8004794:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	223f      	movs	r2, #63	; 0x3f
 80047a0:	409a      	lsls	r2, r3
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	609a      	str	r2, [r3, #8]
 80047a6:	e0fe      	b.n	80049a6 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a28      	ldr	r2, [pc, #160]	; (8004850 <HAL_DMA_Init+0x3e4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d04a      	beq.n	8004848 <HAL_DMA_Init+0x3dc>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a27      	ldr	r2, [pc, #156]	; (8004854 <HAL_DMA_Init+0x3e8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d045      	beq.n	8004848 <HAL_DMA_Init+0x3dc>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a25      	ldr	r2, [pc, #148]	; (8004858 <HAL_DMA_Init+0x3ec>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d040      	beq.n	8004848 <HAL_DMA_Init+0x3dc>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a24      	ldr	r2, [pc, #144]	; (800485c <HAL_DMA_Init+0x3f0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d03b      	beq.n	8004848 <HAL_DMA_Init+0x3dc>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a22      	ldr	r2, [pc, #136]	; (8004860 <HAL_DMA_Init+0x3f4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d036      	beq.n	8004848 <HAL_DMA_Init+0x3dc>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a21      	ldr	r2, [pc, #132]	; (8004864 <HAL_DMA_Init+0x3f8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d031      	beq.n	8004848 <HAL_DMA_Init+0x3dc>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <HAL_DMA_Init+0x3fc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d02c      	beq.n	8004848 <HAL_DMA_Init+0x3dc>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1e      	ldr	r2, [pc, #120]	; (800486c <HAL_DMA_Init+0x400>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d027      	beq.n	8004848 <HAL_DMA_Init+0x3dc>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1c      	ldr	r2, [pc, #112]	; (8004870 <HAL_DMA_Init+0x404>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d022      	beq.n	8004848 <HAL_DMA_Init+0x3dc>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1b      	ldr	r2, [pc, #108]	; (8004874 <HAL_DMA_Init+0x408>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d01d      	beq.n	8004848 <HAL_DMA_Init+0x3dc>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a19      	ldr	r2, [pc, #100]	; (8004878 <HAL_DMA_Init+0x40c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d018      	beq.n	8004848 <HAL_DMA_Init+0x3dc>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a18      	ldr	r2, [pc, #96]	; (800487c <HAL_DMA_Init+0x410>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d013      	beq.n	8004848 <HAL_DMA_Init+0x3dc>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a16      	ldr	r2, [pc, #88]	; (8004880 <HAL_DMA_Init+0x414>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00e      	beq.n	8004848 <HAL_DMA_Init+0x3dc>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a15      	ldr	r2, [pc, #84]	; (8004884 <HAL_DMA_Init+0x418>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d009      	beq.n	8004848 <HAL_DMA_Init+0x3dc>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a13      	ldr	r2, [pc, #76]	; (8004888 <HAL_DMA_Init+0x41c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d004      	beq.n	8004848 <HAL_DMA_Init+0x3dc>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a12      	ldr	r2, [pc, #72]	; (800488c <HAL_DMA_Init+0x420>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d123      	bne.n	8004890 <HAL_DMA_Init+0x424>
 8004848:	2301      	movs	r3, #1
 800484a:	e022      	b.n	8004892 <HAL_DMA_Init+0x426>
 800484c:	fe10803f 	.word	0xfe10803f
 8004850:	48022c08 	.word	0x48022c08
 8004854:	48022c1c 	.word	0x48022c1c
 8004858:	48022c30 	.word	0x48022c30
 800485c:	48022c44 	.word	0x48022c44
 8004860:	48022c58 	.word	0x48022c58
 8004864:	48022c6c 	.word	0x48022c6c
 8004868:	48022c80 	.word	0x48022c80
 800486c:	48022c94 	.word	0x48022c94
 8004870:	58025408 	.word	0x58025408
 8004874:	5802541c 	.word	0x5802541c
 8004878:	58025430 	.word	0x58025430
 800487c:	58025444 	.word	0x58025444
 8004880:	58025458 	.word	0x58025458
 8004884:	5802546c 	.word	0x5802546c
 8004888:	58025480 	.word	0x58025480
 800488c:	58025494 	.word	0x58025494
 8004890:	2300      	movs	r3, #0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d07e      	beq.n	8004994 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a80      	ldr	r2, [pc, #512]	; (8004a9c <HAL_DMA_Init+0x630>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d021      	beq.n	80048e4 <HAL_DMA_Init+0x478>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a7e      	ldr	r2, [pc, #504]	; (8004aa0 <HAL_DMA_Init+0x634>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d01c      	beq.n	80048e4 <HAL_DMA_Init+0x478>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a7d      	ldr	r2, [pc, #500]	; (8004aa4 <HAL_DMA_Init+0x638>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d017      	beq.n	80048e4 <HAL_DMA_Init+0x478>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a7b      	ldr	r2, [pc, #492]	; (8004aa8 <HAL_DMA_Init+0x63c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d012      	beq.n	80048e4 <HAL_DMA_Init+0x478>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a7a      	ldr	r2, [pc, #488]	; (8004aac <HAL_DMA_Init+0x640>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00d      	beq.n	80048e4 <HAL_DMA_Init+0x478>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a78      	ldr	r2, [pc, #480]	; (8004ab0 <HAL_DMA_Init+0x644>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d008      	beq.n	80048e4 <HAL_DMA_Init+0x478>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a77      	ldr	r2, [pc, #476]	; (8004ab4 <HAL_DMA_Init+0x648>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d003      	beq.n	80048e4 <HAL_DMA_Init+0x478>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a75      	ldr	r2, [pc, #468]	; (8004ab8 <HAL_DMA_Init+0x64c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4b6e      	ldr	r3, [pc, #440]	; (8004abc <HAL_DMA_Init+0x650>)
 8004902:	4013      	ands	r3, r2
 8004904:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b40      	cmp	r3, #64	; 0x40
 800490c:	d008      	beq.n	8004920 <HAL_DMA_Init+0x4b4>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d102      	bne.n	800491c <HAL_DMA_Init+0x4b0>
 8004916:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800491a:	e002      	b.n	8004922 <HAL_DMA_Init+0x4b6>
 800491c:	2300      	movs	r3, #0
 800491e:	e000      	b.n	8004922 <HAL_DMA_Init+0x4b6>
 8004920:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	68d2      	ldr	r2, [r2, #12]
 8004926:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004928:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004930:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004938:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004940:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004948:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004950:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	4313      	orrs	r3, r2
 8004956:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	4b56      	ldr	r3, [pc, #344]	; (8004ac0 <HAL_DMA_Init+0x654>)
 8004968:	4413      	add	r3, r2
 800496a:	4a56      	ldr	r2, [pc, #344]	; (8004ac4 <HAL_DMA_Init+0x658>)
 800496c:	fba2 2303 	umull	r2, r3, r2, r3
 8004970:	091b      	lsrs	r3, r3, #4
 8004972:	009a      	lsls	r2, r3, #2
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f001 fcb7 	bl	80062ec <DMA_CalcBaseAndBitshift>
 800497e:	4603      	mov	r3, r0
 8004980:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	2201      	movs	r2, #1
 800498c:	409a      	lsls	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	605a      	str	r2, [r3, #4]
 8004992:	e008      	b.n	80049a6 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2240      	movs	r2, #64	; 0x40
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2203      	movs	r2, #3
 800499e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e0ee      	b.n	8004b84 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a47      	ldr	r2, [pc, #284]	; (8004ac8 <HAL_DMA_Init+0x65c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d072      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a45      	ldr	r2, [pc, #276]	; (8004acc <HAL_DMA_Init+0x660>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d06d      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a44      	ldr	r2, [pc, #272]	; (8004ad0 <HAL_DMA_Init+0x664>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d068      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a42      	ldr	r2, [pc, #264]	; (8004ad4 <HAL_DMA_Init+0x668>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d063      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a41      	ldr	r2, [pc, #260]	; (8004ad8 <HAL_DMA_Init+0x66c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d05e      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a3f      	ldr	r2, [pc, #252]	; (8004adc <HAL_DMA_Init+0x670>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d059      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a3e      	ldr	r2, [pc, #248]	; (8004ae0 <HAL_DMA_Init+0x674>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d054      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a3c      	ldr	r2, [pc, #240]	; (8004ae4 <HAL_DMA_Init+0x678>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d04f      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a3b      	ldr	r2, [pc, #236]	; (8004ae8 <HAL_DMA_Init+0x67c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d04a      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a39      	ldr	r2, [pc, #228]	; (8004aec <HAL_DMA_Init+0x680>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d045      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a38      	ldr	r2, [pc, #224]	; (8004af0 <HAL_DMA_Init+0x684>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d040      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a36      	ldr	r2, [pc, #216]	; (8004af4 <HAL_DMA_Init+0x688>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d03b      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a35      	ldr	r2, [pc, #212]	; (8004af8 <HAL_DMA_Init+0x68c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d036      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a33      	ldr	r2, [pc, #204]	; (8004afc <HAL_DMA_Init+0x690>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d031      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a32      	ldr	r2, [pc, #200]	; (8004b00 <HAL_DMA_Init+0x694>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d02c      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a30      	ldr	r2, [pc, #192]	; (8004b04 <HAL_DMA_Init+0x698>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d027      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a14      	ldr	r2, [pc, #80]	; (8004a9c <HAL_DMA_Init+0x630>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d022      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <HAL_DMA_Init+0x634>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01d      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a11      	ldr	r2, [pc, #68]	; (8004aa4 <HAL_DMA_Init+0x638>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d018      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a0f      	ldr	r2, [pc, #60]	; (8004aa8 <HAL_DMA_Init+0x63c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d013      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a0e      	ldr	r2, [pc, #56]	; (8004aac <HAL_DMA_Init+0x640>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d00e      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a0c      	ldr	r2, [pc, #48]	; (8004ab0 <HAL_DMA_Init+0x644>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d009      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a0b      	ldr	r2, [pc, #44]	; (8004ab4 <HAL_DMA_Init+0x648>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <HAL_DMA_Init+0x62a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <HAL_DMA_Init+0x64c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d138      	bne.n	8004b08 <HAL_DMA_Init+0x69c>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e037      	b.n	8004b0a <HAL_DMA_Init+0x69e>
 8004a9a:	bf00      	nop
 8004a9c:	58025408 	.word	0x58025408
 8004aa0:	5802541c 	.word	0x5802541c
 8004aa4:	58025430 	.word	0x58025430
 8004aa8:	58025444 	.word	0x58025444
 8004aac:	58025458 	.word	0x58025458
 8004ab0:	5802546c 	.word	0x5802546c
 8004ab4:	58025480 	.word	0x58025480
 8004ab8:	58025494 	.word	0x58025494
 8004abc:	fffe000f 	.word	0xfffe000f
 8004ac0:	a7fdabf8 	.word	0xa7fdabf8
 8004ac4:	cccccccd 	.word	0xcccccccd
 8004ac8:	40020010 	.word	0x40020010
 8004acc:	40020028 	.word	0x40020028
 8004ad0:	40020040 	.word	0x40020040
 8004ad4:	40020058 	.word	0x40020058
 8004ad8:	40020070 	.word	0x40020070
 8004adc:	40020088 	.word	0x40020088
 8004ae0:	400200a0 	.word	0x400200a0
 8004ae4:	400200b8 	.word	0x400200b8
 8004ae8:	40020410 	.word	0x40020410
 8004aec:	40020428 	.word	0x40020428
 8004af0:	40020440 	.word	0x40020440
 8004af4:	40020458 	.word	0x40020458
 8004af8:	40020470 	.word	0x40020470
 8004afc:	40020488 	.word	0x40020488
 8004b00:	400204a0 	.word	0x400204a0
 8004b04:	400204b8 	.word	0x400204b8
 8004b08:	2300      	movs	r3, #0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d032      	beq.n	8004b74 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f001 fd1a 	bl	8006548 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d102      	bne.n	8004b22 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004b36:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d010      	beq.n	8004b62 <HAL_DMA_Init+0x6f6>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d80c      	bhi.n	8004b62 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f001 fd97 	bl	800667c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b5e:	605a      	str	r2, [r3, #4]
 8004b60:	e008      	b.n	8004b74 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e226      	b.n	8004ff6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d101      	bne.n	8004bb6 <HAL_DMA_Start_IT+0x2a>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	e21f      	b.n	8004ff6 <HAL_DMA_Start_IT+0x46a>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	f040 820a 	bne.w	8004fe0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a68      	ldr	r2, [pc, #416]	; (8004d80 <HAL_DMA_Start_IT+0x1f4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d04a      	beq.n	8004c7a <HAL_DMA_Start_IT+0xee>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a66      	ldr	r2, [pc, #408]	; (8004d84 <HAL_DMA_Start_IT+0x1f8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d045      	beq.n	8004c7a <HAL_DMA_Start_IT+0xee>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a65      	ldr	r2, [pc, #404]	; (8004d88 <HAL_DMA_Start_IT+0x1fc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d040      	beq.n	8004c7a <HAL_DMA_Start_IT+0xee>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a63      	ldr	r2, [pc, #396]	; (8004d8c <HAL_DMA_Start_IT+0x200>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d03b      	beq.n	8004c7a <HAL_DMA_Start_IT+0xee>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a62      	ldr	r2, [pc, #392]	; (8004d90 <HAL_DMA_Start_IT+0x204>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d036      	beq.n	8004c7a <HAL_DMA_Start_IT+0xee>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a60      	ldr	r2, [pc, #384]	; (8004d94 <HAL_DMA_Start_IT+0x208>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d031      	beq.n	8004c7a <HAL_DMA_Start_IT+0xee>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a5f      	ldr	r2, [pc, #380]	; (8004d98 <HAL_DMA_Start_IT+0x20c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d02c      	beq.n	8004c7a <HAL_DMA_Start_IT+0xee>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5d      	ldr	r2, [pc, #372]	; (8004d9c <HAL_DMA_Start_IT+0x210>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d027      	beq.n	8004c7a <HAL_DMA_Start_IT+0xee>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a5c      	ldr	r2, [pc, #368]	; (8004da0 <HAL_DMA_Start_IT+0x214>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d022      	beq.n	8004c7a <HAL_DMA_Start_IT+0xee>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a5a      	ldr	r2, [pc, #360]	; (8004da4 <HAL_DMA_Start_IT+0x218>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d01d      	beq.n	8004c7a <HAL_DMA_Start_IT+0xee>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a59      	ldr	r2, [pc, #356]	; (8004da8 <HAL_DMA_Start_IT+0x21c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d018      	beq.n	8004c7a <HAL_DMA_Start_IT+0xee>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a57      	ldr	r2, [pc, #348]	; (8004dac <HAL_DMA_Start_IT+0x220>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d013      	beq.n	8004c7a <HAL_DMA_Start_IT+0xee>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a56      	ldr	r2, [pc, #344]	; (8004db0 <HAL_DMA_Start_IT+0x224>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00e      	beq.n	8004c7a <HAL_DMA_Start_IT+0xee>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a54      	ldr	r2, [pc, #336]	; (8004db4 <HAL_DMA_Start_IT+0x228>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d009      	beq.n	8004c7a <HAL_DMA_Start_IT+0xee>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a53      	ldr	r2, [pc, #332]	; (8004db8 <HAL_DMA_Start_IT+0x22c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d004      	beq.n	8004c7a <HAL_DMA_Start_IT+0xee>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a51      	ldr	r2, [pc, #324]	; (8004dbc <HAL_DMA_Start_IT+0x230>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d108      	bne.n	8004c8c <HAL_DMA_Start_IT+0x100>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0201 	bic.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e007      	b.n	8004c9c <HAL_DMA_Start_IT+0x110>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0201 	bic.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f001 f93e 	bl	8005f24 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a34      	ldr	r2, [pc, #208]	; (8004d80 <HAL_DMA_Start_IT+0x1f4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d04a      	beq.n	8004d48 <HAL_DMA_Start_IT+0x1bc>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a33      	ldr	r2, [pc, #204]	; (8004d84 <HAL_DMA_Start_IT+0x1f8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d045      	beq.n	8004d48 <HAL_DMA_Start_IT+0x1bc>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a31      	ldr	r2, [pc, #196]	; (8004d88 <HAL_DMA_Start_IT+0x1fc>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d040      	beq.n	8004d48 <HAL_DMA_Start_IT+0x1bc>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a30      	ldr	r2, [pc, #192]	; (8004d8c <HAL_DMA_Start_IT+0x200>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d03b      	beq.n	8004d48 <HAL_DMA_Start_IT+0x1bc>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2e      	ldr	r2, [pc, #184]	; (8004d90 <HAL_DMA_Start_IT+0x204>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d036      	beq.n	8004d48 <HAL_DMA_Start_IT+0x1bc>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a2d      	ldr	r2, [pc, #180]	; (8004d94 <HAL_DMA_Start_IT+0x208>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d031      	beq.n	8004d48 <HAL_DMA_Start_IT+0x1bc>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a2b      	ldr	r2, [pc, #172]	; (8004d98 <HAL_DMA_Start_IT+0x20c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d02c      	beq.n	8004d48 <HAL_DMA_Start_IT+0x1bc>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a2a      	ldr	r2, [pc, #168]	; (8004d9c <HAL_DMA_Start_IT+0x210>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d027      	beq.n	8004d48 <HAL_DMA_Start_IT+0x1bc>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a28      	ldr	r2, [pc, #160]	; (8004da0 <HAL_DMA_Start_IT+0x214>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d022      	beq.n	8004d48 <HAL_DMA_Start_IT+0x1bc>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a27      	ldr	r2, [pc, #156]	; (8004da4 <HAL_DMA_Start_IT+0x218>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d01d      	beq.n	8004d48 <HAL_DMA_Start_IT+0x1bc>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a25      	ldr	r2, [pc, #148]	; (8004da8 <HAL_DMA_Start_IT+0x21c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d018      	beq.n	8004d48 <HAL_DMA_Start_IT+0x1bc>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a24      	ldr	r2, [pc, #144]	; (8004dac <HAL_DMA_Start_IT+0x220>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d013      	beq.n	8004d48 <HAL_DMA_Start_IT+0x1bc>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a22      	ldr	r2, [pc, #136]	; (8004db0 <HAL_DMA_Start_IT+0x224>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00e      	beq.n	8004d48 <HAL_DMA_Start_IT+0x1bc>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a21      	ldr	r2, [pc, #132]	; (8004db4 <HAL_DMA_Start_IT+0x228>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d009      	beq.n	8004d48 <HAL_DMA_Start_IT+0x1bc>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a1f      	ldr	r2, [pc, #124]	; (8004db8 <HAL_DMA_Start_IT+0x22c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <HAL_DMA_Start_IT+0x1bc>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a1e      	ldr	r2, [pc, #120]	; (8004dbc <HAL_DMA_Start_IT+0x230>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d101      	bne.n	8004d4c <HAL_DMA_Start_IT+0x1c0>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <HAL_DMA_Start_IT+0x1c2>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d036      	beq.n	8004dc0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f023 021e 	bic.w	r2, r3, #30
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0216 	orr.w	r2, r2, #22
 8004d64:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d03e      	beq.n	8004dec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0208 	orr.w	r2, r2, #8
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e035      	b.n	8004dec <HAL_DMA_Start_IT+0x260>
 8004d80:	40020010 	.word	0x40020010
 8004d84:	40020028 	.word	0x40020028
 8004d88:	40020040 	.word	0x40020040
 8004d8c:	40020058 	.word	0x40020058
 8004d90:	40020070 	.word	0x40020070
 8004d94:	40020088 	.word	0x40020088
 8004d98:	400200a0 	.word	0x400200a0
 8004d9c:	400200b8 	.word	0x400200b8
 8004da0:	40020410 	.word	0x40020410
 8004da4:	40020428 	.word	0x40020428
 8004da8:	40020440 	.word	0x40020440
 8004dac:	40020458 	.word	0x40020458
 8004db0:	40020470 	.word	0x40020470
 8004db4:	40020488 	.word	0x40020488
 8004db8:	400204a0 	.word	0x400204a0
 8004dbc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f023 020e 	bic.w	r2, r3, #14
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 020a 	orr.w	r2, r2, #10
 8004dd2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0204 	orr.w	r2, r2, #4
 8004dea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a83      	ldr	r2, [pc, #524]	; (8005000 <HAL_DMA_Start_IT+0x474>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d072      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a82      	ldr	r2, [pc, #520]	; (8005004 <HAL_DMA_Start_IT+0x478>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d06d      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a80      	ldr	r2, [pc, #512]	; (8005008 <HAL_DMA_Start_IT+0x47c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d068      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a7f      	ldr	r2, [pc, #508]	; (800500c <HAL_DMA_Start_IT+0x480>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d063      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a7d      	ldr	r2, [pc, #500]	; (8005010 <HAL_DMA_Start_IT+0x484>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d05e      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a7c      	ldr	r2, [pc, #496]	; (8005014 <HAL_DMA_Start_IT+0x488>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d059      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a7a      	ldr	r2, [pc, #488]	; (8005018 <HAL_DMA_Start_IT+0x48c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d054      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a79      	ldr	r2, [pc, #484]	; (800501c <HAL_DMA_Start_IT+0x490>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d04f      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a77      	ldr	r2, [pc, #476]	; (8005020 <HAL_DMA_Start_IT+0x494>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d04a      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a76      	ldr	r2, [pc, #472]	; (8005024 <HAL_DMA_Start_IT+0x498>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d045      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a74      	ldr	r2, [pc, #464]	; (8005028 <HAL_DMA_Start_IT+0x49c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d040      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a73      	ldr	r2, [pc, #460]	; (800502c <HAL_DMA_Start_IT+0x4a0>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d03b      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a71      	ldr	r2, [pc, #452]	; (8005030 <HAL_DMA_Start_IT+0x4a4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d036      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a70      	ldr	r2, [pc, #448]	; (8005034 <HAL_DMA_Start_IT+0x4a8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d031      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a6e      	ldr	r2, [pc, #440]	; (8005038 <HAL_DMA_Start_IT+0x4ac>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d02c      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a6d      	ldr	r2, [pc, #436]	; (800503c <HAL_DMA_Start_IT+0x4b0>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d027      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a6b      	ldr	r2, [pc, #428]	; (8005040 <HAL_DMA_Start_IT+0x4b4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d022      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a6a      	ldr	r2, [pc, #424]	; (8005044 <HAL_DMA_Start_IT+0x4b8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d01d      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a68      	ldr	r2, [pc, #416]	; (8005048 <HAL_DMA_Start_IT+0x4bc>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d018      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a67      	ldr	r2, [pc, #412]	; (800504c <HAL_DMA_Start_IT+0x4c0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d013      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a65      	ldr	r2, [pc, #404]	; (8005050 <HAL_DMA_Start_IT+0x4c4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00e      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a64      	ldr	r2, [pc, #400]	; (8005054 <HAL_DMA_Start_IT+0x4c8>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d009      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a62      	ldr	r2, [pc, #392]	; (8005058 <HAL_DMA_Start_IT+0x4cc>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d004      	beq.n	8004edc <HAL_DMA_Start_IT+0x350>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a61      	ldr	r2, [pc, #388]	; (800505c <HAL_DMA_Start_IT+0x4d0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d101      	bne.n	8004ee0 <HAL_DMA_Start_IT+0x354>
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <HAL_DMA_Start_IT+0x356>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01a      	beq.n	8004f1c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f02:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f1a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a37      	ldr	r2, [pc, #220]	; (8005000 <HAL_DMA_Start_IT+0x474>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d04a      	beq.n	8004fbc <HAL_DMA_Start_IT+0x430>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a36      	ldr	r2, [pc, #216]	; (8005004 <HAL_DMA_Start_IT+0x478>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d045      	beq.n	8004fbc <HAL_DMA_Start_IT+0x430>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a34      	ldr	r2, [pc, #208]	; (8005008 <HAL_DMA_Start_IT+0x47c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d040      	beq.n	8004fbc <HAL_DMA_Start_IT+0x430>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a33      	ldr	r2, [pc, #204]	; (800500c <HAL_DMA_Start_IT+0x480>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d03b      	beq.n	8004fbc <HAL_DMA_Start_IT+0x430>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a31      	ldr	r2, [pc, #196]	; (8005010 <HAL_DMA_Start_IT+0x484>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d036      	beq.n	8004fbc <HAL_DMA_Start_IT+0x430>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a30      	ldr	r2, [pc, #192]	; (8005014 <HAL_DMA_Start_IT+0x488>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d031      	beq.n	8004fbc <HAL_DMA_Start_IT+0x430>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a2e      	ldr	r2, [pc, #184]	; (8005018 <HAL_DMA_Start_IT+0x48c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d02c      	beq.n	8004fbc <HAL_DMA_Start_IT+0x430>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a2d      	ldr	r2, [pc, #180]	; (800501c <HAL_DMA_Start_IT+0x490>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d027      	beq.n	8004fbc <HAL_DMA_Start_IT+0x430>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a2b      	ldr	r2, [pc, #172]	; (8005020 <HAL_DMA_Start_IT+0x494>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d022      	beq.n	8004fbc <HAL_DMA_Start_IT+0x430>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a2a      	ldr	r2, [pc, #168]	; (8005024 <HAL_DMA_Start_IT+0x498>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d01d      	beq.n	8004fbc <HAL_DMA_Start_IT+0x430>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a28      	ldr	r2, [pc, #160]	; (8005028 <HAL_DMA_Start_IT+0x49c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d018      	beq.n	8004fbc <HAL_DMA_Start_IT+0x430>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a27      	ldr	r2, [pc, #156]	; (800502c <HAL_DMA_Start_IT+0x4a0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d013      	beq.n	8004fbc <HAL_DMA_Start_IT+0x430>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a25      	ldr	r2, [pc, #148]	; (8005030 <HAL_DMA_Start_IT+0x4a4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00e      	beq.n	8004fbc <HAL_DMA_Start_IT+0x430>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a24      	ldr	r2, [pc, #144]	; (8005034 <HAL_DMA_Start_IT+0x4a8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d009      	beq.n	8004fbc <HAL_DMA_Start_IT+0x430>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a22      	ldr	r2, [pc, #136]	; (8005038 <HAL_DMA_Start_IT+0x4ac>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d004      	beq.n	8004fbc <HAL_DMA_Start_IT+0x430>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a21      	ldr	r2, [pc, #132]	; (800503c <HAL_DMA_Start_IT+0x4b0>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d108      	bne.n	8004fce <HAL_DMA_Start_IT+0x442>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0201 	orr.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	e012      	b.n	8004ff4 <HAL_DMA_Start_IT+0x468>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0201 	orr.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e009      	b.n	8004ff4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40020010 	.word	0x40020010
 8005004:	40020028 	.word	0x40020028
 8005008:	40020040 	.word	0x40020040
 800500c:	40020058 	.word	0x40020058
 8005010:	40020070 	.word	0x40020070
 8005014:	40020088 	.word	0x40020088
 8005018:	400200a0 	.word	0x400200a0
 800501c:	400200b8 	.word	0x400200b8
 8005020:	40020410 	.word	0x40020410
 8005024:	40020428 	.word	0x40020428
 8005028:	40020440 	.word	0x40020440
 800502c:	40020458 	.word	0x40020458
 8005030:	40020470 	.word	0x40020470
 8005034:	40020488 	.word	0x40020488
 8005038:	400204a0 	.word	0x400204a0
 800503c:	400204b8 	.word	0x400204b8
 8005040:	58025408 	.word	0x58025408
 8005044:	5802541c 	.word	0x5802541c
 8005048:	58025430 	.word	0x58025430
 800504c:	58025444 	.word	0x58025444
 8005050:	58025458 	.word	0x58025458
 8005054:	5802546c 	.word	0x5802546c
 8005058:	58025480 	.word	0x58025480
 800505c:	58025494 	.word	0x58025494

08005060 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	; 0x28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800506c:	4b67      	ldr	r3, [pc, #412]	; (800520c <HAL_DMA_IRQHandler+0x1ac>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a67      	ldr	r2, [pc, #412]	; (8005210 <HAL_DMA_IRQHandler+0x1b0>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	0a9b      	lsrs	r3, r3, #10
 8005078:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005084:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a5f      	ldr	r2, [pc, #380]	; (8005214 <HAL_DMA_IRQHandler+0x1b4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d04a      	beq.n	8005132 <HAL_DMA_IRQHandler+0xd2>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a5d      	ldr	r2, [pc, #372]	; (8005218 <HAL_DMA_IRQHandler+0x1b8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d045      	beq.n	8005132 <HAL_DMA_IRQHandler+0xd2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a5c      	ldr	r2, [pc, #368]	; (800521c <HAL_DMA_IRQHandler+0x1bc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d040      	beq.n	8005132 <HAL_DMA_IRQHandler+0xd2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a5a      	ldr	r2, [pc, #360]	; (8005220 <HAL_DMA_IRQHandler+0x1c0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d03b      	beq.n	8005132 <HAL_DMA_IRQHandler+0xd2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a59      	ldr	r2, [pc, #356]	; (8005224 <HAL_DMA_IRQHandler+0x1c4>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d036      	beq.n	8005132 <HAL_DMA_IRQHandler+0xd2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a57      	ldr	r2, [pc, #348]	; (8005228 <HAL_DMA_IRQHandler+0x1c8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d031      	beq.n	8005132 <HAL_DMA_IRQHandler+0xd2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a56      	ldr	r2, [pc, #344]	; (800522c <HAL_DMA_IRQHandler+0x1cc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d02c      	beq.n	8005132 <HAL_DMA_IRQHandler+0xd2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a54      	ldr	r2, [pc, #336]	; (8005230 <HAL_DMA_IRQHandler+0x1d0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d027      	beq.n	8005132 <HAL_DMA_IRQHandler+0xd2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a53      	ldr	r2, [pc, #332]	; (8005234 <HAL_DMA_IRQHandler+0x1d4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d022      	beq.n	8005132 <HAL_DMA_IRQHandler+0xd2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a51      	ldr	r2, [pc, #324]	; (8005238 <HAL_DMA_IRQHandler+0x1d8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d01d      	beq.n	8005132 <HAL_DMA_IRQHandler+0xd2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a50      	ldr	r2, [pc, #320]	; (800523c <HAL_DMA_IRQHandler+0x1dc>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d018      	beq.n	8005132 <HAL_DMA_IRQHandler+0xd2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a4e      	ldr	r2, [pc, #312]	; (8005240 <HAL_DMA_IRQHandler+0x1e0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d013      	beq.n	8005132 <HAL_DMA_IRQHandler+0xd2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a4d      	ldr	r2, [pc, #308]	; (8005244 <HAL_DMA_IRQHandler+0x1e4>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00e      	beq.n	8005132 <HAL_DMA_IRQHandler+0xd2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a4b      	ldr	r2, [pc, #300]	; (8005248 <HAL_DMA_IRQHandler+0x1e8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d009      	beq.n	8005132 <HAL_DMA_IRQHandler+0xd2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a4a      	ldr	r2, [pc, #296]	; (800524c <HAL_DMA_IRQHandler+0x1ec>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d004      	beq.n	8005132 <HAL_DMA_IRQHandler+0xd2>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a48      	ldr	r2, [pc, #288]	; (8005250 <HAL_DMA_IRQHandler+0x1f0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d101      	bne.n	8005136 <HAL_DMA_IRQHandler+0xd6>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <HAL_DMA_IRQHandler+0xd8>
 8005136:	2300      	movs	r3, #0
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 842b 	beq.w	8005994 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	2208      	movs	r2, #8
 8005148:	409a      	lsls	r2, r3
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	4013      	ands	r3, r2
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 80a2 	beq.w	8005298 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2e      	ldr	r2, [pc, #184]	; (8005214 <HAL_DMA_IRQHandler+0x1b4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d04a      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x194>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2d      	ldr	r2, [pc, #180]	; (8005218 <HAL_DMA_IRQHandler+0x1b8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d045      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x194>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a2b      	ldr	r2, [pc, #172]	; (800521c <HAL_DMA_IRQHandler+0x1bc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d040      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x194>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a2a      	ldr	r2, [pc, #168]	; (8005220 <HAL_DMA_IRQHandler+0x1c0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d03b      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x194>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a28      	ldr	r2, [pc, #160]	; (8005224 <HAL_DMA_IRQHandler+0x1c4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d036      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x194>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a27      	ldr	r2, [pc, #156]	; (8005228 <HAL_DMA_IRQHandler+0x1c8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d031      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x194>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a25      	ldr	r2, [pc, #148]	; (800522c <HAL_DMA_IRQHandler+0x1cc>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d02c      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x194>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a24      	ldr	r2, [pc, #144]	; (8005230 <HAL_DMA_IRQHandler+0x1d0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d027      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x194>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a22      	ldr	r2, [pc, #136]	; (8005234 <HAL_DMA_IRQHandler+0x1d4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d022      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x194>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a21      	ldr	r2, [pc, #132]	; (8005238 <HAL_DMA_IRQHandler+0x1d8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d01d      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x194>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1f      	ldr	r2, [pc, #124]	; (800523c <HAL_DMA_IRQHandler+0x1dc>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d018      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x194>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1e      	ldr	r2, [pc, #120]	; (8005240 <HAL_DMA_IRQHandler+0x1e0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x194>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1c      	ldr	r2, [pc, #112]	; (8005244 <HAL_DMA_IRQHandler+0x1e4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00e      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x194>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1b      	ldr	r2, [pc, #108]	; (8005248 <HAL_DMA_IRQHandler+0x1e8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d009      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x194>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a19      	ldr	r2, [pc, #100]	; (800524c <HAL_DMA_IRQHandler+0x1ec>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <HAL_DMA_IRQHandler+0x194>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a18      	ldr	r2, [pc, #96]	; (8005250 <HAL_DMA_IRQHandler+0x1f0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d12f      	bne.n	8005254 <HAL_DMA_IRQHandler+0x1f4>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	bf14      	ite	ne
 8005202:	2301      	movne	r3, #1
 8005204:	2300      	moveq	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	e02e      	b.n	8005268 <HAL_DMA_IRQHandler+0x208>
 800520a:	bf00      	nop
 800520c:	24000004 	.word	0x24000004
 8005210:	1b4e81b5 	.word	0x1b4e81b5
 8005214:	40020010 	.word	0x40020010
 8005218:	40020028 	.word	0x40020028
 800521c:	40020040 	.word	0x40020040
 8005220:	40020058 	.word	0x40020058
 8005224:	40020070 	.word	0x40020070
 8005228:	40020088 	.word	0x40020088
 800522c:	400200a0 	.word	0x400200a0
 8005230:	400200b8 	.word	0x400200b8
 8005234:	40020410 	.word	0x40020410
 8005238:	40020428 	.word	0x40020428
 800523c:	40020440 	.word	0x40020440
 8005240:	40020458 	.word	0x40020458
 8005244:	40020470 	.word	0x40020470
 8005248:	40020488 	.word	0x40020488
 800524c:	400204a0 	.word	0x400204a0
 8005250:	400204b8 	.word	0x400204b8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	bf14      	ite	ne
 8005262:	2301      	movne	r3, #1
 8005264:	2300      	moveq	r3, #0
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d015      	beq.n	8005298 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0204 	bic.w	r2, r2, #4
 800527a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	2208      	movs	r2, #8
 8005286:	409a      	lsls	r2, r3
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005290:	f043 0201 	orr.w	r2, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	fa22 f303 	lsr.w	r3, r2, r3
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d06e      	beq.n	800538c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a69      	ldr	r2, [pc, #420]	; (8005458 <HAL_DMA_IRQHandler+0x3f8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d04a      	beq.n	800534e <HAL_DMA_IRQHandler+0x2ee>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a67      	ldr	r2, [pc, #412]	; (800545c <HAL_DMA_IRQHandler+0x3fc>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d045      	beq.n	800534e <HAL_DMA_IRQHandler+0x2ee>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a66      	ldr	r2, [pc, #408]	; (8005460 <HAL_DMA_IRQHandler+0x400>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d040      	beq.n	800534e <HAL_DMA_IRQHandler+0x2ee>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a64      	ldr	r2, [pc, #400]	; (8005464 <HAL_DMA_IRQHandler+0x404>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d03b      	beq.n	800534e <HAL_DMA_IRQHandler+0x2ee>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a63      	ldr	r2, [pc, #396]	; (8005468 <HAL_DMA_IRQHandler+0x408>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d036      	beq.n	800534e <HAL_DMA_IRQHandler+0x2ee>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a61      	ldr	r2, [pc, #388]	; (800546c <HAL_DMA_IRQHandler+0x40c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d031      	beq.n	800534e <HAL_DMA_IRQHandler+0x2ee>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a60      	ldr	r2, [pc, #384]	; (8005470 <HAL_DMA_IRQHandler+0x410>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d02c      	beq.n	800534e <HAL_DMA_IRQHandler+0x2ee>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a5e      	ldr	r2, [pc, #376]	; (8005474 <HAL_DMA_IRQHandler+0x414>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d027      	beq.n	800534e <HAL_DMA_IRQHandler+0x2ee>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a5d      	ldr	r2, [pc, #372]	; (8005478 <HAL_DMA_IRQHandler+0x418>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d022      	beq.n	800534e <HAL_DMA_IRQHandler+0x2ee>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a5b      	ldr	r2, [pc, #364]	; (800547c <HAL_DMA_IRQHandler+0x41c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d01d      	beq.n	800534e <HAL_DMA_IRQHandler+0x2ee>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a5a      	ldr	r2, [pc, #360]	; (8005480 <HAL_DMA_IRQHandler+0x420>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d018      	beq.n	800534e <HAL_DMA_IRQHandler+0x2ee>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a58      	ldr	r2, [pc, #352]	; (8005484 <HAL_DMA_IRQHandler+0x424>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <HAL_DMA_IRQHandler+0x2ee>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a57      	ldr	r2, [pc, #348]	; (8005488 <HAL_DMA_IRQHandler+0x428>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00e      	beq.n	800534e <HAL_DMA_IRQHandler+0x2ee>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a55      	ldr	r2, [pc, #340]	; (800548c <HAL_DMA_IRQHandler+0x42c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d009      	beq.n	800534e <HAL_DMA_IRQHandler+0x2ee>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a54      	ldr	r2, [pc, #336]	; (8005490 <HAL_DMA_IRQHandler+0x430>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d004      	beq.n	800534e <HAL_DMA_IRQHandler+0x2ee>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a52      	ldr	r2, [pc, #328]	; (8005494 <HAL_DMA_IRQHandler+0x434>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d10a      	bne.n	8005364 <HAL_DMA_IRQHandler+0x304>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005358:	2b00      	cmp	r3, #0
 800535a:	bf14      	ite	ne
 800535c:	2301      	movne	r3, #1
 800535e:	2300      	moveq	r3, #0
 8005360:	b2db      	uxtb	r3, r3
 8005362:	e003      	b.n	800536c <HAL_DMA_IRQHandler+0x30c>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2300      	movs	r3, #0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00d      	beq.n	800538c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005374:	f003 031f 	and.w	r3, r3, #31
 8005378:	2201      	movs	r2, #1
 800537a:	409a      	lsls	r2, r3
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005384:	f043 0202 	orr.w	r2, r3, #2
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	2204      	movs	r2, #4
 8005396:	409a      	lsls	r2, r3
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	4013      	ands	r3, r2
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 808f 	beq.w	80054c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a2c      	ldr	r2, [pc, #176]	; (8005458 <HAL_DMA_IRQHandler+0x3f8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d04a      	beq.n	8005442 <HAL_DMA_IRQHandler+0x3e2>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a2a      	ldr	r2, [pc, #168]	; (800545c <HAL_DMA_IRQHandler+0x3fc>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d045      	beq.n	8005442 <HAL_DMA_IRQHandler+0x3e2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a29      	ldr	r2, [pc, #164]	; (8005460 <HAL_DMA_IRQHandler+0x400>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d040      	beq.n	8005442 <HAL_DMA_IRQHandler+0x3e2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a27      	ldr	r2, [pc, #156]	; (8005464 <HAL_DMA_IRQHandler+0x404>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d03b      	beq.n	8005442 <HAL_DMA_IRQHandler+0x3e2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a26      	ldr	r2, [pc, #152]	; (8005468 <HAL_DMA_IRQHandler+0x408>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d036      	beq.n	8005442 <HAL_DMA_IRQHandler+0x3e2>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a24      	ldr	r2, [pc, #144]	; (800546c <HAL_DMA_IRQHandler+0x40c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d031      	beq.n	8005442 <HAL_DMA_IRQHandler+0x3e2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a23      	ldr	r2, [pc, #140]	; (8005470 <HAL_DMA_IRQHandler+0x410>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d02c      	beq.n	8005442 <HAL_DMA_IRQHandler+0x3e2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a21      	ldr	r2, [pc, #132]	; (8005474 <HAL_DMA_IRQHandler+0x414>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d027      	beq.n	8005442 <HAL_DMA_IRQHandler+0x3e2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a20      	ldr	r2, [pc, #128]	; (8005478 <HAL_DMA_IRQHandler+0x418>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d022      	beq.n	8005442 <HAL_DMA_IRQHandler+0x3e2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1e      	ldr	r2, [pc, #120]	; (800547c <HAL_DMA_IRQHandler+0x41c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d01d      	beq.n	8005442 <HAL_DMA_IRQHandler+0x3e2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1d      	ldr	r2, [pc, #116]	; (8005480 <HAL_DMA_IRQHandler+0x420>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d018      	beq.n	8005442 <HAL_DMA_IRQHandler+0x3e2>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a1b      	ldr	r2, [pc, #108]	; (8005484 <HAL_DMA_IRQHandler+0x424>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d013      	beq.n	8005442 <HAL_DMA_IRQHandler+0x3e2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1a      	ldr	r2, [pc, #104]	; (8005488 <HAL_DMA_IRQHandler+0x428>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00e      	beq.n	8005442 <HAL_DMA_IRQHandler+0x3e2>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a18      	ldr	r2, [pc, #96]	; (800548c <HAL_DMA_IRQHandler+0x42c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d009      	beq.n	8005442 <HAL_DMA_IRQHandler+0x3e2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a17      	ldr	r2, [pc, #92]	; (8005490 <HAL_DMA_IRQHandler+0x430>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d004      	beq.n	8005442 <HAL_DMA_IRQHandler+0x3e2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a15      	ldr	r2, [pc, #84]	; (8005494 <HAL_DMA_IRQHandler+0x434>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d12a      	bne.n	8005498 <HAL_DMA_IRQHandler+0x438>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	bf14      	ite	ne
 8005450:	2301      	movne	r3, #1
 8005452:	2300      	moveq	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	e023      	b.n	80054a0 <HAL_DMA_IRQHandler+0x440>
 8005458:	40020010 	.word	0x40020010
 800545c:	40020028 	.word	0x40020028
 8005460:	40020040 	.word	0x40020040
 8005464:	40020058 	.word	0x40020058
 8005468:	40020070 	.word	0x40020070
 800546c:	40020088 	.word	0x40020088
 8005470:	400200a0 	.word	0x400200a0
 8005474:	400200b8 	.word	0x400200b8
 8005478:	40020410 	.word	0x40020410
 800547c:	40020428 	.word	0x40020428
 8005480:	40020440 	.word	0x40020440
 8005484:	40020458 	.word	0x40020458
 8005488:	40020470 	.word	0x40020470
 800548c:	40020488 	.word	0x40020488
 8005490:	400204a0 	.word	0x400204a0
 8005494:	400204b8 	.word	0x400204b8
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2300      	movs	r3, #0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00d      	beq.n	80054c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	2204      	movs	r2, #4
 80054ae:	409a      	lsls	r2, r3
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b8:	f043 0204 	orr.w	r2, r3, #4
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c4:	f003 031f 	and.w	r3, r3, #31
 80054c8:	2210      	movs	r2, #16
 80054ca:	409a      	lsls	r2, r3
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 80a6 	beq.w	8005622 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a85      	ldr	r2, [pc, #532]	; (80056f0 <HAL_DMA_IRQHandler+0x690>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d04a      	beq.n	8005576 <HAL_DMA_IRQHandler+0x516>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a83      	ldr	r2, [pc, #524]	; (80056f4 <HAL_DMA_IRQHandler+0x694>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d045      	beq.n	8005576 <HAL_DMA_IRQHandler+0x516>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a82      	ldr	r2, [pc, #520]	; (80056f8 <HAL_DMA_IRQHandler+0x698>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d040      	beq.n	8005576 <HAL_DMA_IRQHandler+0x516>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a80      	ldr	r2, [pc, #512]	; (80056fc <HAL_DMA_IRQHandler+0x69c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d03b      	beq.n	8005576 <HAL_DMA_IRQHandler+0x516>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a7f      	ldr	r2, [pc, #508]	; (8005700 <HAL_DMA_IRQHandler+0x6a0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d036      	beq.n	8005576 <HAL_DMA_IRQHandler+0x516>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a7d      	ldr	r2, [pc, #500]	; (8005704 <HAL_DMA_IRQHandler+0x6a4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d031      	beq.n	8005576 <HAL_DMA_IRQHandler+0x516>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a7c      	ldr	r2, [pc, #496]	; (8005708 <HAL_DMA_IRQHandler+0x6a8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d02c      	beq.n	8005576 <HAL_DMA_IRQHandler+0x516>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a7a      	ldr	r2, [pc, #488]	; (800570c <HAL_DMA_IRQHandler+0x6ac>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d027      	beq.n	8005576 <HAL_DMA_IRQHandler+0x516>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a79      	ldr	r2, [pc, #484]	; (8005710 <HAL_DMA_IRQHandler+0x6b0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d022      	beq.n	8005576 <HAL_DMA_IRQHandler+0x516>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a77      	ldr	r2, [pc, #476]	; (8005714 <HAL_DMA_IRQHandler+0x6b4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01d      	beq.n	8005576 <HAL_DMA_IRQHandler+0x516>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a76      	ldr	r2, [pc, #472]	; (8005718 <HAL_DMA_IRQHandler+0x6b8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d018      	beq.n	8005576 <HAL_DMA_IRQHandler+0x516>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a74      	ldr	r2, [pc, #464]	; (800571c <HAL_DMA_IRQHandler+0x6bc>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d013      	beq.n	8005576 <HAL_DMA_IRQHandler+0x516>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a73      	ldr	r2, [pc, #460]	; (8005720 <HAL_DMA_IRQHandler+0x6c0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00e      	beq.n	8005576 <HAL_DMA_IRQHandler+0x516>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a71      	ldr	r2, [pc, #452]	; (8005724 <HAL_DMA_IRQHandler+0x6c4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d009      	beq.n	8005576 <HAL_DMA_IRQHandler+0x516>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a70      	ldr	r2, [pc, #448]	; (8005728 <HAL_DMA_IRQHandler+0x6c8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d004      	beq.n	8005576 <HAL_DMA_IRQHandler+0x516>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a6e      	ldr	r2, [pc, #440]	; (800572c <HAL_DMA_IRQHandler+0x6cc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d10a      	bne.n	800558c <HAL_DMA_IRQHandler+0x52c>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	bf14      	ite	ne
 8005584:	2301      	movne	r3, #1
 8005586:	2300      	moveq	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	e009      	b.n	80055a0 <HAL_DMA_IRQHandler+0x540>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b00      	cmp	r3, #0
 8005598:	bf14      	ite	ne
 800559a:	2301      	movne	r3, #1
 800559c:	2300      	moveq	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d03e      	beq.n	8005622 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a8:	f003 031f 	and.w	r3, r3, #31
 80055ac:	2210      	movs	r2, #16
 80055ae:	409a      	lsls	r2, r3
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d018      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d108      	bne.n	80055e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d024      	beq.n	8005622 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	4798      	blx	r3
 80055e0:	e01f      	b.n	8005622 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01b      	beq.n	8005622 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	4798      	blx	r3
 80055f2:	e016      	b.n	8005622 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d107      	bne.n	8005612 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 0208 	bic.w	r2, r2, #8
 8005610:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	2220      	movs	r2, #32
 800562c:	409a      	lsls	r2, r3
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	4013      	ands	r3, r2
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 8110 	beq.w	8005858 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a2c      	ldr	r2, [pc, #176]	; (80056f0 <HAL_DMA_IRQHandler+0x690>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d04a      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x678>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a2b      	ldr	r2, [pc, #172]	; (80056f4 <HAL_DMA_IRQHandler+0x694>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d045      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x678>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a29      	ldr	r2, [pc, #164]	; (80056f8 <HAL_DMA_IRQHandler+0x698>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d040      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x678>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a28      	ldr	r2, [pc, #160]	; (80056fc <HAL_DMA_IRQHandler+0x69c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d03b      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x678>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a26      	ldr	r2, [pc, #152]	; (8005700 <HAL_DMA_IRQHandler+0x6a0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d036      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x678>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a25      	ldr	r2, [pc, #148]	; (8005704 <HAL_DMA_IRQHandler+0x6a4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d031      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x678>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a23      	ldr	r2, [pc, #140]	; (8005708 <HAL_DMA_IRQHandler+0x6a8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d02c      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x678>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a22      	ldr	r2, [pc, #136]	; (800570c <HAL_DMA_IRQHandler+0x6ac>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d027      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x678>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a20      	ldr	r2, [pc, #128]	; (8005710 <HAL_DMA_IRQHandler+0x6b0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d022      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x678>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <HAL_DMA_IRQHandler+0x6b4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d01d      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x678>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1d      	ldr	r2, [pc, #116]	; (8005718 <HAL_DMA_IRQHandler+0x6b8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d018      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x678>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1c      	ldr	r2, [pc, #112]	; (800571c <HAL_DMA_IRQHandler+0x6bc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d013      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x678>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1a      	ldr	r2, [pc, #104]	; (8005720 <HAL_DMA_IRQHandler+0x6c0>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00e      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x678>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a19      	ldr	r2, [pc, #100]	; (8005724 <HAL_DMA_IRQHandler+0x6c4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d009      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x678>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a17      	ldr	r2, [pc, #92]	; (8005728 <HAL_DMA_IRQHandler+0x6c8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d004      	beq.n	80056d8 <HAL_DMA_IRQHandler+0x678>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a16      	ldr	r2, [pc, #88]	; (800572c <HAL_DMA_IRQHandler+0x6cc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d12b      	bne.n	8005730 <HAL_DMA_IRQHandler+0x6d0>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0310 	and.w	r3, r3, #16
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	bf14      	ite	ne
 80056e6:	2301      	movne	r3, #1
 80056e8:	2300      	moveq	r3, #0
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	e02a      	b.n	8005744 <HAL_DMA_IRQHandler+0x6e4>
 80056ee:	bf00      	nop
 80056f0:	40020010 	.word	0x40020010
 80056f4:	40020028 	.word	0x40020028
 80056f8:	40020040 	.word	0x40020040
 80056fc:	40020058 	.word	0x40020058
 8005700:	40020070 	.word	0x40020070
 8005704:	40020088 	.word	0x40020088
 8005708:	400200a0 	.word	0x400200a0
 800570c:	400200b8 	.word	0x400200b8
 8005710:	40020410 	.word	0x40020410
 8005714:	40020428 	.word	0x40020428
 8005718:	40020440 	.word	0x40020440
 800571c:	40020458 	.word	0x40020458
 8005720:	40020470 	.word	0x40020470
 8005724:	40020488 	.word	0x40020488
 8005728:	400204a0 	.word	0x400204a0
 800572c:	400204b8 	.word	0x400204b8
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	2b00      	cmp	r3, #0
 800573c:	bf14      	ite	ne
 800573e:	2301      	movne	r3, #1
 8005740:	2300      	moveq	r3, #0
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8087 	beq.w	8005858 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	2220      	movs	r2, #32
 8005754:	409a      	lsls	r2, r3
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b04      	cmp	r3, #4
 8005764:	d139      	bne.n	80057da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0216 	bic.w	r2, r2, #22
 8005774:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005784:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <HAL_DMA_IRQHandler+0x736>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0208 	bic.w	r2, r2, #8
 80057a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	223f      	movs	r2, #63	; 0x3f
 80057b0:	409a      	lsls	r2, r3
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 8382 	beq.w	8005ed4 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
          }
          return;
 80057d8:	e37c      	b.n	8005ed4 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d018      	beq.n	800581a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d108      	bne.n	8005808 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d02c      	beq.n	8005858 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	4798      	blx	r3
 8005806:	e027      	b.n	8005858 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580c:	2b00      	cmp	r3, #0
 800580e:	d023      	beq.n	8005858 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	4798      	blx	r3
 8005818:	e01e      	b.n	8005858 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10f      	bne.n	8005848 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0210 	bic.w	r2, r2, #16
 8005836:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 833e 	beq.w	8005ede <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 8088 	beq.w	8005980 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2204      	movs	r2, #4
 8005874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a89      	ldr	r2, [pc, #548]	; (8005aa4 <HAL_DMA_IRQHandler+0xa44>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d04a      	beq.n	8005918 <HAL_DMA_IRQHandler+0x8b8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a88      	ldr	r2, [pc, #544]	; (8005aa8 <HAL_DMA_IRQHandler+0xa48>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d045      	beq.n	8005918 <HAL_DMA_IRQHandler+0x8b8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a86      	ldr	r2, [pc, #536]	; (8005aac <HAL_DMA_IRQHandler+0xa4c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d040      	beq.n	8005918 <HAL_DMA_IRQHandler+0x8b8>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a85      	ldr	r2, [pc, #532]	; (8005ab0 <HAL_DMA_IRQHandler+0xa50>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d03b      	beq.n	8005918 <HAL_DMA_IRQHandler+0x8b8>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a83      	ldr	r2, [pc, #524]	; (8005ab4 <HAL_DMA_IRQHandler+0xa54>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d036      	beq.n	8005918 <HAL_DMA_IRQHandler+0x8b8>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a82      	ldr	r2, [pc, #520]	; (8005ab8 <HAL_DMA_IRQHandler+0xa58>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d031      	beq.n	8005918 <HAL_DMA_IRQHandler+0x8b8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a80      	ldr	r2, [pc, #512]	; (8005abc <HAL_DMA_IRQHandler+0xa5c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d02c      	beq.n	8005918 <HAL_DMA_IRQHandler+0x8b8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a7f      	ldr	r2, [pc, #508]	; (8005ac0 <HAL_DMA_IRQHandler+0xa60>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d027      	beq.n	8005918 <HAL_DMA_IRQHandler+0x8b8>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a7d      	ldr	r2, [pc, #500]	; (8005ac4 <HAL_DMA_IRQHandler+0xa64>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d022      	beq.n	8005918 <HAL_DMA_IRQHandler+0x8b8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a7c      	ldr	r2, [pc, #496]	; (8005ac8 <HAL_DMA_IRQHandler+0xa68>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d01d      	beq.n	8005918 <HAL_DMA_IRQHandler+0x8b8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a7a      	ldr	r2, [pc, #488]	; (8005acc <HAL_DMA_IRQHandler+0xa6c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d018      	beq.n	8005918 <HAL_DMA_IRQHandler+0x8b8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a79      	ldr	r2, [pc, #484]	; (8005ad0 <HAL_DMA_IRQHandler+0xa70>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d013      	beq.n	8005918 <HAL_DMA_IRQHandler+0x8b8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a77      	ldr	r2, [pc, #476]	; (8005ad4 <HAL_DMA_IRQHandler+0xa74>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00e      	beq.n	8005918 <HAL_DMA_IRQHandler+0x8b8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a76      	ldr	r2, [pc, #472]	; (8005ad8 <HAL_DMA_IRQHandler+0xa78>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d009      	beq.n	8005918 <HAL_DMA_IRQHandler+0x8b8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a74      	ldr	r2, [pc, #464]	; (8005adc <HAL_DMA_IRQHandler+0xa7c>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d004      	beq.n	8005918 <HAL_DMA_IRQHandler+0x8b8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a73      	ldr	r2, [pc, #460]	; (8005ae0 <HAL_DMA_IRQHandler+0xa80>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d108      	bne.n	800592a <HAL_DMA_IRQHandler+0x8ca>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0201 	bic.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	e007      	b.n	800593a <HAL_DMA_IRQHandler+0x8da>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0201 	bic.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3301      	adds	r3, #1
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005942:	429a      	cmp	r2, r3
 8005944:	d307      	bcc.n	8005956 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1f2      	bne.n	800593a <HAL_DMA_IRQHandler+0x8da>
 8005954:	e000      	b.n	8005958 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005956:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2203      	movs	r2, #3
 800596a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800596e:	e003      	b.n	8005978 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 82aa 	beq.w	8005ede <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	4798      	blx	r3
 8005992:	e2a4      	b.n	8005ede <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a52      	ldr	r2, [pc, #328]	; (8005ae4 <HAL_DMA_IRQHandler+0xa84>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d04a      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x9d4>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a51      	ldr	r2, [pc, #324]	; (8005ae8 <HAL_DMA_IRQHandler+0xa88>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d045      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x9d4>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a4f      	ldr	r2, [pc, #316]	; (8005aec <HAL_DMA_IRQHandler+0xa8c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d040      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x9d4>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a4e      	ldr	r2, [pc, #312]	; (8005af0 <HAL_DMA_IRQHandler+0xa90>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d03b      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x9d4>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a4c      	ldr	r2, [pc, #304]	; (8005af4 <HAL_DMA_IRQHandler+0xa94>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d036      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x9d4>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a4b      	ldr	r2, [pc, #300]	; (8005af8 <HAL_DMA_IRQHandler+0xa98>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d031      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x9d4>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a49      	ldr	r2, [pc, #292]	; (8005afc <HAL_DMA_IRQHandler+0xa9c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d02c      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x9d4>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a48      	ldr	r2, [pc, #288]	; (8005b00 <HAL_DMA_IRQHandler+0xaa0>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d027      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x9d4>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a46      	ldr	r2, [pc, #280]	; (8005b04 <HAL_DMA_IRQHandler+0xaa4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d022      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x9d4>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a45      	ldr	r2, [pc, #276]	; (8005b08 <HAL_DMA_IRQHandler+0xaa8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d01d      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x9d4>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a43      	ldr	r2, [pc, #268]	; (8005b0c <HAL_DMA_IRQHandler+0xaac>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d018      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x9d4>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a42      	ldr	r2, [pc, #264]	; (8005b10 <HAL_DMA_IRQHandler+0xab0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d013      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x9d4>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a40      	ldr	r2, [pc, #256]	; (8005b14 <HAL_DMA_IRQHandler+0xab4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00e      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x9d4>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a3f      	ldr	r2, [pc, #252]	; (8005b18 <HAL_DMA_IRQHandler+0xab8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d009      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x9d4>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a3d      	ldr	r2, [pc, #244]	; (8005b1c <HAL_DMA_IRQHandler+0xabc>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d004      	beq.n	8005a34 <HAL_DMA_IRQHandler+0x9d4>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a3c      	ldr	r2, [pc, #240]	; (8005b20 <HAL_DMA_IRQHandler+0xac0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d101      	bne.n	8005a38 <HAL_DMA_IRQHandler+0x9d8>
 8005a34:	2301      	movs	r3, #1
 8005a36:	e000      	b.n	8005a3a <HAL_DMA_IRQHandler+0x9da>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f000 824f 	beq.w	8005ede <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a4c:	f003 031f 	and.w	r3, r3, #31
 8005a50:	2204      	movs	r2, #4
 8005a52:	409a      	lsls	r2, r3
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	4013      	ands	r3, r2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 80dd 	beq.w	8005c18 <HAL_DMA_IRQHandler+0xbb8>
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 80d7 	beq.w	8005c18 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6e:	f003 031f 	and.w	r3, r3, #31
 8005a72:	2204      	movs	r2, #4
 8005a74:	409a      	lsls	r2, r3
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d059      	beq.n	8005b38 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d14a      	bne.n	8005b24 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 8220 	beq.w	8005ed8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005aa0:	e21a      	b.n	8005ed8 <HAL_DMA_IRQHandler+0xe78>
 8005aa2:	bf00      	nop
 8005aa4:	40020010 	.word	0x40020010
 8005aa8:	40020028 	.word	0x40020028
 8005aac:	40020040 	.word	0x40020040
 8005ab0:	40020058 	.word	0x40020058
 8005ab4:	40020070 	.word	0x40020070
 8005ab8:	40020088 	.word	0x40020088
 8005abc:	400200a0 	.word	0x400200a0
 8005ac0:	400200b8 	.word	0x400200b8
 8005ac4:	40020410 	.word	0x40020410
 8005ac8:	40020428 	.word	0x40020428
 8005acc:	40020440 	.word	0x40020440
 8005ad0:	40020458 	.word	0x40020458
 8005ad4:	40020470 	.word	0x40020470
 8005ad8:	40020488 	.word	0x40020488
 8005adc:	400204a0 	.word	0x400204a0
 8005ae0:	400204b8 	.word	0x400204b8
 8005ae4:	48022c08 	.word	0x48022c08
 8005ae8:	48022c1c 	.word	0x48022c1c
 8005aec:	48022c30 	.word	0x48022c30
 8005af0:	48022c44 	.word	0x48022c44
 8005af4:	48022c58 	.word	0x48022c58
 8005af8:	48022c6c 	.word	0x48022c6c
 8005afc:	48022c80 	.word	0x48022c80
 8005b00:	48022c94 	.word	0x48022c94
 8005b04:	58025408 	.word	0x58025408
 8005b08:	5802541c 	.word	0x5802541c
 8005b0c:	58025430 	.word	0x58025430
 8005b10:	58025444 	.word	0x58025444
 8005b14:	58025458 	.word	0x58025458
 8005b18:	5802546c 	.word	0x5802546c
 8005b1c:	58025480 	.word	0x58025480
 8005b20:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 81d5 	beq.w	8005ed8 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b36:	e1cf      	b.n	8005ed8 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f003 0320 	and.w	r3, r3, #32
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d160      	bne.n	8005c04 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a7f      	ldr	r2, [pc, #508]	; (8005d44 <HAL_DMA_IRQHandler+0xce4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d04a      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb82>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a7d      	ldr	r2, [pc, #500]	; (8005d48 <HAL_DMA_IRQHandler+0xce8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d045      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb82>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a7c      	ldr	r2, [pc, #496]	; (8005d4c <HAL_DMA_IRQHandler+0xcec>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d040      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb82>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a7a      	ldr	r2, [pc, #488]	; (8005d50 <HAL_DMA_IRQHandler+0xcf0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d03b      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb82>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a79      	ldr	r2, [pc, #484]	; (8005d54 <HAL_DMA_IRQHandler+0xcf4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d036      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb82>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a77      	ldr	r2, [pc, #476]	; (8005d58 <HAL_DMA_IRQHandler+0xcf8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d031      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb82>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a76      	ldr	r2, [pc, #472]	; (8005d5c <HAL_DMA_IRQHandler+0xcfc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d02c      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb82>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a74      	ldr	r2, [pc, #464]	; (8005d60 <HAL_DMA_IRQHandler+0xd00>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d027      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb82>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a73      	ldr	r2, [pc, #460]	; (8005d64 <HAL_DMA_IRQHandler+0xd04>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d022      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb82>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a71      	ldr	r2, [pc, #452]	; (8005d68 <HAL_DMA_IRQHandler+0xd08>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01d      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb82>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a70      	ldr	r2, [pc, #448]	; (8005d6c <HAL_DMA_IRQHandler+0xd0c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d018      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb82>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a6e      	ldr	r2, [pc, #440]	; (8005d70 <HAL_DMA_IRQHandler+0xd10>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d013      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb82>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a6d      	ldr	r2, [pc, #436]	; (8005d74 <HAL_DMA_IRQHandler+0xd14>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00e      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb82>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a6b      	ldr	r2, [pc, #428]	; (8005d78 <HAL_DMA_IRQHandler+0xd18>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d009      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb82>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a6a      	ldr	r2, [pc, #424]	; (8005d7c <HAL_DMA_IRQHandler+0xd1c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d004      	beq.n	8005be2 <HAL_DMA_IRQHandler+0xb82>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a68      	ldr	r2, [pc, #416]	; (8005d80 <HAL_DMA_IRQHandler+0xd20>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d108      	bne.n	8005bf4 <HAL_DMA_IRQHandler+0xb94>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0208 	bic.w	r2, r2, #8
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	e007      	b.n	8005c04 <HAL_DMA_IRQHandler+0xba4>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0204 	bic.w	r2, r2, #4
 8005c02:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 8165 	beq.w	8005ed8 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c16:	e15f      	b.n	8005ed8 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	2202      	movs	r2, #2
 8005c22:	409a      	lsls	r2, r3
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4013      	ands	r3, r2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 80c5 	beq.w	8005db8 <HAL_DMA_IRQHandler+0xd58>
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80bf 	beq.w	8005db8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3e:	f003 031f 	and.w	r3, r3, #31
 8005c42:	2202      	movs	r2, #2
 8005c44:	409a      	lsls	r2, r3
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d018      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d109      	bne.n	8005c72 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 813a 	beq.w	8005edc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c70:	e134      	b.n	8005edc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 8130 	beq.w	8005edc <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c84:	e12a      	b.n	8005edc <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f040 8089 	bne.w	8005da4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a2b      	ldr	r2, [pc, #172]	; (8005d44 <HAL_DMA_IRQHandler+0xce4>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d04a      	beq.n	8005d32 <HAL_DMA_IRQHandler+0xcd2>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a29      	ldr	r2, [pc, #164]	; (8005d48 <HAL_DMA_IRQHandler+0xce8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d045      	beq.n	8005d32 <HAL_DMA_IRQHandler+0xcd2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a28      	ldr	r2, [pc, #160]	; (8005d4c <HAL_DMA_IRQHandler+0xcec>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d040      	beq.n	8005d32 <HAL_DMA_IRQHandler+0xcd2>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a26      	ldr	r2, [pc, #152]	; (8005d50 <HAL_DMA_IRQHandler+0xcf0>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d03b      	beq.n	8005d32 <HAL_DMA_IRQHandler+0xcd2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a25      	ldr	r2, [pc, #148]	; (8005d54 <HAL_DMA_IRQHandler+0xcf4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d036      	beq.n	8005d32 <HAL_DMA_IRQHandler+0xcd2>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a23      	ldr	r2, [pc, #140]	; (8005d58 <HAL_DMA_IRQHandler+0xcf8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d031      	beq.n	8005d32 <HAL_DMA_IRQHandler+0xcd2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a22      	ldr	r2, [pc, #136]	; (8005d5c <HAL_DMA_IRQHandler+0xcfc>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d02c      	beq.n	8005d32 <HAL_DMA_IRQHandler+0xcd2>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a20      	ldr	r2, [pc, #128]	; (8005d60 <HAL_DMA_IRQHandler+0xd00>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d027      	beq.n	8005d32 <HAL_DMA_IRQHandler+0xcd2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a1f      	ldr	r2, [pc, #124]	; (8005d64 <HAL_DMA_IRQHandler+0xd04>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d022      	beq.n	8005d32 <HAL_DMA_IRQHandler+0xcd2>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1d      	ldr	r2, [pc, #116]	; (8005d68 <HAL_DMA_IRQHandler+0xd08>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d01d      	beq.n	8005d32 <HAL_DMA_IRQHandler+0xcd2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a1c      	ldr	r2, [pc, #112]	; (8005d6c <HAL_DMA_IRQHandler+0xd0c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d018      	beq.n	8005d32 <HAL_DMA_IRQHandler+0xcd2>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1a      	ldr	r2, [pc, #104]	; (8005d70 <HAL_DMA_IRQHandler+0xd10>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d013      	beq.n	8005d32 <HAL_DMA_IRQHandler+0xcd2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a19      	ldr	r2, [pc, #100]	; (8005d74 <HAL_DMA_IRQHandler+0xd14>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00e      	beq.n	8005d32 <HAL_DMA_IRQHandler+0xcd2>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <HAL_DMA_IRQHandler+0xd18>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_DMA_IRQHandler+0xcd2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a16      	ldr	r2, [pc, #88]	; (8005d7c <HAL_DMA_IRQHandler+0xd1c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_DMA_IRQHandler+0xcd2>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a14      	ldr	r2, [pc, #80]	; (8005d80 <HAL_DMA_IRQHandler+0xd20>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d128      	bne.n	8005d84 <HAL_DMA_IRQHandler+0xd24>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0214 	bic.w	r2, r2, #20
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	e027      	b.n	8005d94 <HAL_DMA_IRQHandler+0xd34>
 8005d44:	40020010 	.word	0x40020010
 8005d48:	40020028 	.word	0x40020028
 8005d4c:	40020040 	.word	0x40020040
 8005d50:	40020058 	.word	0x40020058
 8005d54:	40020070 	.word	0x40020070
 8005d58:	40020088 	.word	0x40020088
 8005d5c:	400200a0 	.word	0x400200a0
 8005d60:	400200b8 	.word	0x400200b8
 8005d64:	40020410 	.word	0x40020410
 8005d68:	40020428 	.word	0x40020428
 8005d6c:	40020440 	.word	0x40020440
 8005d70:	40020458 	.word	0x40020458
 8005d74:	40020470 	.word	0x40020470
 8005d78:	40020488 	.word	0x40020488
 8005d7c:	400204a0 	.word	0x400204a0
 8005d80:	400204b8 	.word	0x400204b8
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 020a 	bic.w	r2, r2, #10
 8005d92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 8097 	beq.w	8005edc <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005db6:	e091      	b.n	8005edc <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbc:	f003 031f 	and.w	r3, r3, #31
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	409a      	lsls	r2, r3
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 8088 	beq.w	8005ede <HAL_DMA_IRQHandler+0xe7e>
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8082 	beq.w	8005ede <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a41      	ldr	r2, [pc, #260]	; (8005ee4 <HAL_DMA_IRQHandler+0xe84>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d04a      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xe1a>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a3f      	ldr	r2, [pc, #252]	; (8005ee8 <HAL_DMA_IRQHandler+0xe88>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d045      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xe1a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a3e      	ldr	r2, [pc, #248]	; (8005eec <HAL_DMA_IRQHandler+0xe8c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d040      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xe1a>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a3c      	ldr	r2, [pc, #240]	; (8005ef0 <HAL_DMA_IRQHandler+0xe90>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d03b      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xe1a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a3b      	ldr	r2, [pc, #236]	; (8005ef4 <HAL_DMA_IRQHandler+0xe94>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d036      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xe1a>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a39      	ldr	r2, [pc, #228]	; (8005ef8 <HAL_DMA_IRQHandler+0xe98>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d031      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xe1a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a38      	ldr	r2, [pc, #224]	; (8005efc <HAL_DMA_IRQHandler+0xe9c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d02c      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xe1a>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a36      	ldr	r2, [pc, #216]	; (8005f00 <HAL_DMA_IRQHandler+0xea0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d027      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xe1a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a35      	ldr	r2, [pc, #212]	; (8005f04 <HAL_DMA_IRQHandler+0xea4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d022      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xe1a>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a33      	ldr	r2, [pc, #204]	; (8005f08 <HAL_DMA_IRQHandler+0xea8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d01d      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xe1a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a32      	ldr	r2, [pc, #200]	; (8005f0c <HAL_DMA_IRQHandler+0xeac>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d018      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xe1a>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a30      	ldr	r2, [pc, #192]	; (8005f10 <HAL_DMA_IRQHandler+0xeb0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d013      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xe1a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a2f      	ldr	r2, [pc, #188]	; (8005f14 <HAL_DMA_IRQHandler+0xeb4>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00e      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xe1a>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a2d      	ldr	r2, [pc, #180]	; (8005f18 <HAL_DMA_IRQHandler+0xeb8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d009      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xe1a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a2c      	ldr	r2, [pc, #176]	; (8005f1c <HAL_DMA_IRQHandler+0xebc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d004      	beq.n	8005e7a <HAL_DMA_IRQHandler+0xe1a>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a2a      	ldr	r2, [pc, #168]	; (8005f20 <HAL_DMA_IRQHandler+0xec0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d108      	bne.n	8005e8c <HAL_DMA_IRQHandler+0xe2c>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 021c 	bic.w	r2, r2, #28
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	e007      	b.n	8005e9c <HAL_DMA_IRQHandler+0xe3c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 020e 	bic.w	r2, r2, #14
 8005e9a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	409a      	lsls	r2, r3
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d009      	beq.n	8005ede <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4798      	blx	r3
 8005ed2:	e004      	b.n	8005ede <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005ed4:	bf00      	nop
 8005ed6:	e002      	b.n	8005ede <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ed8:	bf00      	nop
 8005eda:	e000      	b.n	8005ede <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005edc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005ede:	3728      	adds	r7, #40	; 0x28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40020010 	.word	0x40020010
 8005ee8:	40020028 	.word	0x40020028
 8005eec:	40020040 	.word	0x40020040
 8005ef0:	40020058 	.word	0x40020058
 8005ef4:	40020070 	.word	0x40020070
 8005ef8:	40020088 	.word	0x40020088
 8005efc:	400200a0 	.word	0x400200a0
 8005f00:	400200b8 	.word	0x400200b8
 8005f04:	40020410 	.word	0x40020410
 8005f08:	40020428 	.word	0x40020428
 8005f0c:	40020440 	.word	0x40020440
 8005f10:	40020458 	.word	0x40020458
 8005f14:	40020470 	.word	0x40020470
 8005f18:	40020488 	.word	0x40020488
 8005f1c:	400204a0 	.word	0x400204a0
 8005f20:	400204b8 	.word	0x400204b8

08005f24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f36:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a7f      	ldr	r2, [pc, #508]	; (8006140 <DMA_SetConfig+0x21c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d072      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a7d      	ldr	r2, [pc, #500]	; (8006144 <DMA_SetConfig+0x220>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d06d      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a7c      	ldr	r2, [pc, #496]	; (8006148 <DMA_SetConfig+0x224>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d068      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a7a      	ldr	r2, [pc, #488]	; (800614c <DMA_SetConfig+0x228>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d063      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a79      	ldr	r2, [pc, #484]	; (8006150 <DMA_SetConfig+0x22c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d05e      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a77      	ldr	r2, [pc, #476]	; (8006154 <DMA_SetConfig+0x230>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d059      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a76      	ldr	r2, [pc, #472]	; (8006158 <DMA_SetConfig+0x234>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d054      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a74      	ldr	r2, [pc, #464]	; (800615c <DMA_SetConfig+0x238>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d04f      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a73      	ldr	r2, [pc, #460]	; (8006160 <DMA_SetConfig+0x23c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d04a      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a71      	ldr	r2, [pc, #452]	; (8006164 <DMA_SetConfig+0x240>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d045      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a70      	ldr	r2, [pc, #448]	; (8006168 <DMA_SetConfig+0x244>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d040      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a6e      	ldr	r2, [pc, #440]	; (800616c <DMA_SetConfig+0x248>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d03b      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a6d      	ldr	r2, [pc, #436]	; (8006170 <DMA_SetConfig+0x24c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d036      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a6b      	ldr	r2, [pc, #428]	; (8006174 <DMA_SetConfig+0x250>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d031      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a6a      	ldr	r2, [pc, #424]	; (8006178 <DMA_SetConfig+0x254>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d02c      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a68      	ldr	r2, [pc, #416]	; (800617c <DMA_SetConfig+0x258>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d027      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a67      	ldr	r2, [pc, #412]	; (8006180 <DMA_SetConfig+0x25c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d022      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a65      	ldr	r2, [pc, #404]	; (8006184 <DMA_SetConfig+0x260>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d01d      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a64      	ldr	r2, [pc, #400]	; (8006188 <DMA_SetConfig+0x264>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d018      	beq.n	800602e <DMA_SetConfig+0x10a>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a62      	ldr	r2, [pc, #392]	; (800618c <DMA_SetConfig+0x268>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d013      	beq.n	800602e <DMA_SetConfig+0x10a>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a61      	ldr	r2, [pc, #388]	; (8006190 <DMA_SetConfig+0x26c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d00e      	beq.n	800602e <DMA_SetConfig+0x10a>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a5f      	ldr	r2, [pc, #380]	; (8006194 <DMA_SetConfig+0x270>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d009      	beq.n	800602e <DMA_SetConfig+0x10a>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a5e      	ldr	r2, [pc, #376]	; (8006198 <DMA_SetConfig+0x274>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d004      	beq.n	800602e <DMA_SetConfig+0x10a>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a5c      	ldr	r2, [pc, #368]	; (800619c <DMA_SetConfig+0x278>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d101      	bne.n	8006032 <DMA_SetConfig+0x10e>
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <DMA_SetConfig+0x110>
 8006032:	2300      	movs	r3, #0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00d      	beq.n	8006054 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006040:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d004      	beq.n	8006054 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006052:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a39      	ldr	r2, [pc, #228]	; (8006140 <DMA_SetConfig+0x21c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d04a      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a38      	ldr	r2, [pc, #224]	; (8006144 <DMA_SetConfig+0x220>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d045      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a36      	ldr	r2, [pc, #216]	; (8006148 <DMA_SetConfig+0x224>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d040      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a35      	ldr	r2, [pc, #212]	; (800614c <DMA_SetConfig+0x228>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d03b      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a33      	ldr	r2, [pc, #204]	; (8006150 <DMA_SetConfig+0x22c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d036      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a32      	ldr	r2, [pc, #200]	; (8006154 <DMA_SetConfig+0x230>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d031      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a30      	ldr	r2, [pc, #192]	; (8006158 <DMA_SetConfig+0x234>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d02c      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a2f      	ldr	r2, [pc, #188]	; (800615c <DMA_SetConfig+0x238>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d027      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <DMA_SetConfig+0x23c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d022      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a2c      	ldr	r2, [pc, #176]	; (8006164 <DMA_SetConfig+0x240>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d01d      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a2a      	ldr	r2, [pc, #168]	; (8006168 <DMA_SetConfig+0x244>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d018      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a29      	ldr	r2, [pc, #164]	; (800616c <DMA_SetConfig+0x248>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a27      	ldr	r2, [pc, #156]	; (8006170 <DMA_SetConfig+0x24c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00e      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a26      	ldr	r2, [pc, #152]	; (8006174 <DMA_SetConfig+0x250>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d009      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a24      	ldr	r2, [pc, #144]	; (8006178 <DMA_SetConfig+0x254>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <DMA_SetConfig+0x1d0>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a23      	ldr	r2, [pc, #140]	; (800617c <DMA_SetConfig+0x258>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d101      	bne.n	80060f8 <DMA_SetConfig+0x1d4>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <DMA_SetConfig+0x1d6>
 80060f8:	2300      	movs	r3, #0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d059      	beq.n	80061b2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006102:	f003 031f 	and.w	r3, r3, #31
 8006106:	223f      	movs	r2, #63	; 0x3f
 8006108:	409a      	lsls	r2, r3
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800611c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d138      	bne.n	80061a0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800613e:	e0ae      	b.n	800629e <DMA_SetConfig+0x37a>
 8006140:	40020010 	.word	0x40020010
 8006144:	40020028 	.word	0x40020028
 8006148:	40020040 	.word	0x40020040
 800614c:	40020058 	.word	0x40020058
 8006150:	40020070 	.word	0x40020070
 8006154:	40020088 	.word	0x40020088
 8006158:	400200a0 	.word	0x400200a0
 800615c:	400200b8 	.word	0x400200b8
 8006160:	40020410 	.word	0x40020410
 8006164:	40020428 	.word	0x40020428
 8006168:	40020440 	.word	0x40020440
 800616c:	40020458 	.word	0x40020458
 8006170:	40020470 	.word	0x40020470
 8006174:	40020488 	.word	0x40020488
 8006178:	400204a0 	.word	0x400204a0
 800617c:	400204b8 	.word	0x400204b8
 8006180:	58025408 	.word	0x58025408
 8006184:	5802541c 	.word	0x5802541c
 8006188:	58025430 	.word	0x58025430
 800618c:	58025444 	.word	0x58025444
 8006190:	58025458 	.word	0x58025458
 8006194:	5802546c 	.word	0x5802546c
 8006198:	58025480 	.word	0x58025480
 800619c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	60da      	str	r2, [r3, #12]
}
 80061b0:	e075      	b.n	800629e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a3d      	ldr	r2, [pc, #244]	; (80062ac <DMA_SetConfig+0x388>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d04a      	beq.n	8006252 <DMA_SetConfig+0x32e>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a3b      	ldr	r2, [pc, #236]	; (80062b0 <DMA_SetConfig+0x38c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d045      	beq.n	8006252 <DMA_SetConfig+0x32e>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a3a      	ldr	r2, [pc, #232]	; (80062b4 <DMA_SetConfig+0x390>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d040      	beq.n	8006252 <DMA_SetConfig+0x32e>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a38      	ldr	r2, [pc, #224]	; (80062b8 <DMA_SetConfig+0x394>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d03b      	beq.n	8006252 <DMA_SetConfig+0x32e>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a37      	ldr	r2, [pc, #220]	; (80062bc <DMA_SetConfig+0x398>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d036      	beq.n	8006252 <DMA_SetConfig+0x32e>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a35      	ldr	r2, [pc, #212]	; (80062c0 <DMA_SetConfig+0x39c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d031      	beq.n	8006252 <DMA_SetConfig+0x32e>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a34      	ldr	r2, [pc, #208]	; (80062c4 <DMA_SetConfig+0x3a0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d02c      	beq.n	8006252 <DMA_SetConfig+0x32e>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a32      	ldr	r2, [pc, #200]	; (80062c8 <DMA_SetConfig+0x3a4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d027      	beq.n	8006252 <DMA_SetConfig+0x32e>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a31      	ldr	r2, [pc, #196]	; (80062cc <DMA_SetConfig+0x3a8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d022      	beq.n	8006252 <DMA_SetConfig+0x32e>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a2f      	ldr	r2, [pc, #188]	; (80062d0 <DMA_SetConfig+0x3ac>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d01d      	beq.n	8006252 <DMA_SetConfig+0x32e>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a2e      	ldr	r2, [pc, #184]	; (80062d4 <DMA_SetConfig+0x3b0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d018      	beq.n	8006252 <DMA_SetConfig+0x32e>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a2c      	ldr	r2, [pc, #176]	; (80062d8 <DMA_SetConfig+0x3b4>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <DMA_SetConfig+0x32e>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a2b      	ldr	r2, [pc, #172]	; (80062dc <DMA_SetConfig+0x3b8>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00e      	beq.n	8006252 <DMA_SetConfig+0x32e>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a29      	ldr	r2, [pc, #164]	; (80062e0 <DMA_SetConfig+0x3bc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d009      	beq.n	8006252 <DMA_SetConfig+0x32e>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a28      	ldr	r2, [pc, #160]	; (80062e4 <DMA_SetConfig+0x3c0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d004      	beq.n	8006252 <DMA_SetConfig+0x32e>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a26      	ldr	r2, [pc, #152]	; (80062e8 <DMA_SetConfig+0x3c4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d101      	bne.n	8006256 <DMA_SetConfig+0x332>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <DMA_SetConfig+0x334>
 8006256:	2300      	movs	r3, #0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d020      	beq.n	800629e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	2201      	movs	r2, #1
 8006266:	409a      	lsls	r2, r3
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2b40      	cmp	r3, #64	; 0x40
 800627a:	d108      	bne.n	800628e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	60da      	str	r2, [r3, #12]
}
 800628c:	e007      	b.n	800629e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	60da      	str	r2, [r3, #12]
}
 800629e:	bf00      	nop
 80062a0:	371c      	adds	r7, #28
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	48022c08 	.word	0x48022c08
 80062b0:	48022c1c 	.word	0x48022c1c
 80062b4:	48022c30 	.word	0x48022c30
 80062b8:	48022c44 	.word	0x48022c44
 80062bc:	48022c58 	.word	0x48022c58
 80062c0:	48022c6c 	.word	0x48022c6c
 80062c4:	48022c80 	.word	0x48022c80
 80062c8:	48022c94 	.word	0x48022c94
 80062cc:	58025408 	.word	0x58025408
 80062d0:	5802541c 	.word	0x5802541c
 80062d4:	58025430 	.word	0x58025430
 80062d8:	58025444 	.word	0x58025444
 80062dc:	58025458 	.word	0x58025458
 80062e0:	5802546c 	.word	0x5802546c
 80062e4:	58025480 	.word	0x58025480
 80062e8:	58025494 	.word	0x58025494

080062ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a42      	ldr	r2, [pc, #264]	; (8006404 <DMA_CalcBaseAndBitshift+0x118>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d04a      	beq.n	8006394 <DMA_CalcBaseAndBitshift+0xa8>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a41      	ldr	r2, [pc, #260]	; (8006408 <DMA_CalcBaseAndBitshift+0x11c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d045      	beq.n	8006394 <DMA_CalcBaseAndBitshift+0xa8>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a3f      	ldr	r2, [pc, #252]	; (800640c <DMA_CalcBaseAndBitshift+0x120>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d040      	beq.n	8006394 <DMA_CalcBaseAndBitshift+0xa8>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a3e      	ldr	r2, [pc, #248]	; (8006410 <DMA_CalcBaseAndBitshift+0x124>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d03b      	beq.n	8006394 <DMA_CalcBaseAndBitshift+0xa8>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a3c      	ldr	r2, [pc, #240]	; (8006414 <DMA_CalcBaseAndBitshift+0x128>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d036      	beq.n	8006394 <DMA_CalcBaseAndBitshift+0xa8>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a3b      	ldr	r2, [pc, #236]	; (8006418 <DMA_CalcBaseAndBitshift+0x12c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d031      	beq.n	8006394 <DMA_CalcBaseAndBitshift+0xa8>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a39      	ldr	r2, [pc, #228]	; (800641c <DMA_CalcBaseAndBitshift+0x130>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d02c      	beq.n	8006394 <DMA_CalcBaseAndBitshift+0xa8>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a38      	ldr	r2, [pc, #224]	; (8006420 <DMA_CalcBaseAndBitshift+0x134>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d027      	beq.n	8006394 <DMA_CalcBaseAndBitshift+0xa8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a36      	ldr	r2, [pc, #216]	; (8006424 <DMA_CalcBaseAndBitshift+0x138>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d022      	beq.n	8006394 <DMA_CalcBaseAndBitshift+0xa8>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a35      	ldr	r2, [pc, #212]	; (8006428 <DMA_CalcBaseAndBitshift+0x13c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d01d      	beq.n	8006394 <DMA_CalcBaseAndBitshift+0xa8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a33      	ldr	r2, [pc, #204]	; (800642c <DMA_CalcBaseAndBitshift+0x140>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d018      	beq.n	8006394 <DMA_CalcBaseAndBitshift+0xa8>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a32      	ldr	r2, [pc, #200]	; (8006430 <DMA_CalcBaseAndBitshift+0x144>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d013      	beq.n	8006394 <DMA_CalcBaseAndBitshift+0xa8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a30      	ldr	r2, [pc, #192]	; (8006434 <DMA_CalcBaseAndBitshift+0x148>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00e      	beq.n	8006394 <DMA_CalcBaseAndBitshift+0xa8>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a2f      	ldr	r2, [pc, #188]	; (8006438 <DMA_CalcBaseAndBitshift+0x14c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d009      	beq.n	8006394 <DMA_CalcBaseAndBitshift+0xa8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a2d      	ldr	r2, [pc, #180]	; (800643c <DMA_CalcBaseAndBitshift+0x150>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d004      	beq.n	8006394 <DMA_CalcBaseAndBitshift+0xa8>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a2c      	ldr	r2, [pc, #176]	; (8006440 <DMA_CalcBaseAndBitshift+0x154>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d101      	bne.n	8006398 <DMA_CalcBaseAndBitshift+0xac>
 8006394:	2301      	movs	r3, #1
 8006396:	e000      	b.n	800639a <DMA_CalcBaseAndBitshift+0xae>
 8006398:	2300      	movs	r3, #0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d024      	beq.n	80063e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	3b10      	subs	r3, #16
 80063a6:	4a27      	ldr	r2, [pc, #156]	; (8006444 <DMA_CalcBaseAndBitshift+0x158>)
 80063a8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ac:	091b      	lsrs	r3, r3, #4
 80063ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	4a24      	ldr	r2, [pc, #144]	; (8006448 <DMA_CalcBaseAndBitshift+0x15c>)
 80063b8:	5cd3      	ldrb	r3, [r2, r3]
 80063ba:	461a      	mov	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d908      	bls.n	80063d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	4b1f      	ldr	r3, [pc, #124]	; (800644c <DMA_CalcBaseAndBitshift+0x160>)
 80063ce:	4013      	ands	r3, r2
 80063d0:	1d1a      	adds	r2, r3, #4
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	659a      	str	r2, [r3, #88]	; 0x58
 80063d6:	e00d      	b.n	80063f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	4b1b      	ldr	r3, [pc, #108]	; (800644c <DMA_CalcBaseAndBitshift+0x160>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6593      	str	r3, [r2, #88]	; 0x58
 80063e6:	e005      	b.n	80063f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	40020010 	.word	0x40020010
 8006408:	40020028 	.word	0x40020028
 800640c:	40020040 	.word	0x40020040
 8006410:	40020058 	.word	0x40020058
 8006414:	40020070 	.word	0x40020070
 8006418:	40020088 	.word	0x40020088
 800641c:	400200a0 	.word	0x400200a0
 8006420:	400200b8 	.word	0x400200b8
 8006424:	40020410 	.word	0x40020410
 8006428:	40020428 	.word	0x40020428
 800642c:	40020440 	.word	0x40020440
 8006430:	40020458 	.word	0x40020458
 8006434:	40020470 	.word	0x40020470
 8006438:	40020488 	.word	0x40020488
 800643c:	400204a0 	.word	0x400204a0
 8006440:	400204b8 	.word	0x400204b8
 8006444:	aaaaaaab 	.word	0xaaaaaaab
 8006448:	0800bb38 	.word	0x0800bb38
 800644c:	fffffc00 	.word	0xfffffc00

08006450 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d120      	bne.n	80064a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	2b03      	cmp	r3, #3
 800646a:	d858      	bhi.n	800651e <DMA_CheckFifoParam+0xce>
 800646c:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <DMA_CheckFifoParam+0x24>)
 800646e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006472:	bf00      	nop
 8006474:	08006485 	.word	0x08006485
 8006478:	08006497 	.word	0x08006497
 800647c:	08006485 	.word	0x08006485
 8006480:	0800651f 	.word	0x0800651f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d048      	beq.n	8006522 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006494:	e045      	b.n	8006522 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800649e:	d142      	bne.n	8006526 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064a4:	e03f      	b.n	8006526 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ae:	d123      	bne.n	80064f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d838      	bhi.n	800652a <DMA_CheckFifoParam+0xda>
 80064b8:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <DMA_CheckFifoParam+0x70>)
 80064ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064be:	bf00      	nop
 80064c0:	080064d1 	.word	0x080064d1
 80064c4:	080064d7 	.word	0x080064d7
 80064c8:	080064d1 	.word	0x080064d1
 80064cc:	080064e9 	.word	0x080064e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	73fb      	strb	r3, [r7, #15]
        break;
 80064d4:	e030      	b.n	8006538 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d025      	beq.n	800652e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064e6:	e022      	b.n	800652e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064f0:	d11f      	bne.n	8006532 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064f6:	e01c      	b.n	8006532 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d902      	bls.n	8006506 <DMA_CheckFifoParam+0xb6>
 8006500:	2b03      	cmp	r3, #3
 8006502:	d003      	beq.n	800650c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006504:	e018      	b.n	8006538 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	73fb      	strb	r3, [r7, #15]
        break;
 800650a:	e015      	b.n	8006538 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00e      	beq.n	8006536 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	73fb      	strb	r3, [r7, #15]
    break;
 800651c:	e00b      	b.n	8006536 <DMA_CheckFifoParam+0xe6>
        break;
 800651e:	bf00      	nop
 8006520:	e00a      	b.n	8006538 <DMA_CheckFifoParam+0xe8>
        break;
 8006522:	bf00      	nop
 8006524:	e008      	b.n	8006538 <DMA_CheckFifoParam+0xe8>
        break;
 8006526:	bf00      	nop
 8006528:	e006      	b.n	8006538 <DMA_CheckFifoParam+0xe8>
        break;
 800652a:	bf00      	nop
 800652c:	e004      	b.n	8006538 <DMA_CheckFifoParam+0xe8>
        break;
 800652e:	bf00      	nop
 8006530:	e002      	b.n	8006538 <DMA_CheckFifoParam+0xe8>
        break;
 8006532:	bf00      	nop
 8006534:	e000      	b.n	8006538 <DMA_CheckFifoParam+0xe8>
    break;
 8006536:	bf00      	nop
    }
  }

  return status;
 8006538:	7bfb      	ldrb	r3, [r7, #15]
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop

08006548 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a38      	ldr	r2, [pc, #224]	; (800663c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d022      	beq.n	80065a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a36      	ldr	r2, [pc, #216]	; (8006640 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d01d      	beq.n	80065a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a35      	ldr	r2, [pc, #212]	; (8006644 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d018      	beq.n	80065a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a33      	ldr	r2, [pc, #204]	; (8006648 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d013      	beq.n	80065a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a32      	ldr	r2, [pc, #200]	; (800664c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00e      	beq.n	80065a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a30      	ldr	r2, [pc, #192]	; (8006650 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d009      	beq.n	80065a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a2f      	ldr	r2, [pc, #188]	; (8006654 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d004      	beq.n	80065a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a2d      	ldr	r2, [pc, #180]	; (8006658 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d101      	bne.n	80065aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80065aa:	2300      	movs	r3, #0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01a      	beq.n	80065e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	3b08      	subs	r3, #8
 80065b8:	4a28      	ldr	r2, [pc, #160]	; (800665c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80065ba:	fba2 2303 	umull	r2, r3, r2, r3
 80065be:	091b      	lsrs	r3, r3, #4
 80065c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4b26      	ldr	r3, [pc, #152]	; (8006660 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	461a      	mov	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a24      	ldr	r2, [pc, #144]	; (8006664 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80065d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f003 031f 	and.w	r3, r3, #31
 80065dc:	2201      	movs	r2, #1
 80065de:	409a      	lsls	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80065e4:	e024      	b.n	8006630 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	3b10      	subs	r3, #16
 80065ee:	4a1e      	ldr	r2, [pc, #120]	; (8006668 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80065f0:	fba2 2303 	umull	r2, r3, r2, r3
 80065f4:	091b      	lsrs	r3, r3, #4
 80065f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4a1c      	ldr	r2, [pc, #112]	; (800666c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d806      	bhi.n	800660e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	4a1b      	ldr	r2, [pc, #108]	; (8006670 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d902      	bls.n	800660e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3308      	adds	r3, #8
 800660c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4b18      	ldr	r3, [pc, #96]	; (8006674 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	461a      	mov	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a16      	ldr	r2, [pc, #88]	; (8006678 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006620:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	2201      	movs	r2, #1
 800662a:	409a      	lsls	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006630:	bf00      	nop
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	58025408 	.word	0x58025408
 8006640:	5802541c 	.word	0x5802541c
 8006644:	58025430 	.word	0x58025430
 8006648:	58025444 	.word	0x58025444
 800664c:	58025458 	.word	0x58025458
 8006650:	5802546c 	.word	0x5802546c
 8006654:	58025480 	.word	0x58025480
 8006658:	58025494 	.word	0x58025494
 800665c:	cccccccd 	.word	0xcccccccd
 8006660:	16009600 	.word	0x16009600
 8006664:	58025880 	.word	0x58025880
 8006668:	aaaaaaab 	.word	0xaaaaaaab
 800666c:	400204b8 	.word	0x400204b8
 8006670:	4002040f 	.word	0x4002040f
 8006674:	10008200 	.word	0x10008200
 8006678:	40020880 	.word	0x40020880

0800667c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d04a      	beq.n	8006728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b08      	cmp	r3, #8
 8006696:	d847      	bhi.n	8006728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a25      	ldr	r2, [pc, #148]	; (8006734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d022      	beq.n	80066e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a24      	ldr	r2, [pc, #144]	; (8006738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d01d      	beq.n	80066e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a22      	ldr	r2, [pc, #136]	; (800673c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d018      	beq.n	80066e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a21      	ldr	r2, [pc, #132]	; (8006740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d013      	beq.n	80066e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1f      	ldr	r2, [pc, #124]	; (8006744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d00e      	beq.n	80066e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1e      	ldr	r2, [pc, #120]	; (8006748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d009      	beq.n	80066e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a1c      	ldr	r2, [pc, #112]	; (800674c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d004      	beq.n	80066e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a1b      	ldr	r2, [pc, #108]	; (8006750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d101      	bne.n	80066ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80066e8:	2301      	movs	r3, #1
 80066ea:	e000      	b.n	80066ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80066ec:	2300      	movs	r3, #0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00a      	beq.n	8006708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4b17      	ldr	r3, [pc, #92]	; (8006754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	461a      	mov	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a15      	ldr	r2, [pc, #84]	; (8006758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006704:	671a      	str	r2, [r3, #112]	; 0x70
 8006706:	e009      	b.n	800671c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4b14      	ldr	r3, [pc, #80]	; (800675c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	461a      	mov	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a11      	ldr	r2, [pc, #68]	; (8006760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800671a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3b01      	subs	r3, #1
 8006720:	2201      	movs	r2, #1
 8006722:	409a      	lsls	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006728:	bf00      	nop
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	58025408 	.word	0x58025408
 8006738:	5802541c 	.word	0x5802541c
 800673c:	58025430 	.word	0x58025430
 8006740:	58025444 	.word	0x58025444
 8006744:	58025458 	.word	0x58025458
 8006748:	5802546c 	.word	0x5802546c
 800674c:	58025480 	.word	0x58025480
 8006750:	58025494 	.word	0x58025494
 8006754:	1600963f 	.word	0x1600963f
 8006758:	58025940 	.word	0x58025940
 800675c:	1000823f 	.word	0x1000823f
 8006760:	40020940 	.word	0x40020940

08006764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006764:	b480      	push	{r7}
 8006766:	b089      	sub	sp, #36	; 0x24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800676e:	2300      	movs	r3, #0
 8006770:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006772:	4b89      	ldr	r3, [pc, #548]	; (8006998 <HAL_GPIO_Init+0x234>)
 8006774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006776:	e194      	b.n	8006aa2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	2101      	movs	r1, #1
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	fa01 f303 	lsl.w	r3, r1, r3
 8006784:	4013      	ands	r3, r2
 8006786:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8186 	beq.w	8006a9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f003 0303 	and.w	r3, r3, #3
 8006798:	2b01      	cmp	r3, #1
 800679a:	d005      	beq.n	80067a8 <HAL_GPIO_Init+0x44>
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d130      	bne.n	800680a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	2203      	movs	r2, #3
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	43db      	mvns	r3, r3
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	4013      	ands	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	68da      	ldr	r2, [r3, #12]
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	005b      	lsls	r3, r3, #1
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067de:	2201      	movs	r2, #1
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	43db      	mvns	r3, r3
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	4013      	ands	r3, r2
 80067ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	091b      	lsrs	r3, r3, #4
 80067f4:	f003 0201 	and.w	r2, r3, #1
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	fa02 f303 	lsl.w	r3, r2, r3
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	4313      	orrs	r3, r2
 8006802:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69ba      	ldr	r2, [r7, #24]
 8006808:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	2b03      	cmp	r3, #3
 8006814:	d017      	beq.n	8006846 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	2203      	movs	r2, #3
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	43db      	mvns	r3, r3
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	4013      	ands	r3, r2
 800682c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	fa02 f303 	lsl.w	r3, r2, r3
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	4313      	orrs	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f003 0303 	and.w	r3, r3, #3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d123      	bne.n	800689a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	08da      	lsrs	r2, r3, #3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3208      	adds	r2, #8
 800685a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	220f      	movs	r2, #15
 800686a:	fa02 f303 	lsl.w	r3, r2, r3
 800686e:	43db      	mvns	r3, r3
 8006870:	69ba      	ldr	r2, [r7, #24]
 8006872:	4013      	ands	r3, r2
 8006874:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	4313      	orrs	r3, r2
 800688a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	08da      	lsrs	r2, r3, #3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3208      	adds	r2, #8
 8006894:	69b9      	ldr	r1, [r7, #24]
 8006896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	2203      	movs	r2, #3
 80068a6:	fa02 f303 	lsl.w	r3, r2, r3
 80068aa:	43db      	mvns	r3, r3
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	4013      	ands	r3, r2
 80068b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f003 0203 	and.w	r2, r3, #3
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	fa02 f303 	lsl.w	r3, r2, r3
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 80e0 	beq.w	8006a9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068dc:	4b2f      	ldr	r3, [pc, #188]	; (800699c <HAL_GPIO_Init+0x238>)
 80068de:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80068e2:	4a2e      	ldr	r2, [pc, #184]	; (800699c <HAL_GPIO_Init+0x238>)
 80068e4:	f043 0302 	orr.w	r3, r3, #2
 80068e8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80068ec:	4b2b      	ldr	r3, [pc, #172]	; (800699c <HAL_GPIO_Init+0x238>)
 80068ee:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80068fa:	4a29      	ldr	r2, [pc, #164]	; (80069a0 <HAL_GPIO_Init+0x23c>)
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	089b      	lsrs	r3, r3, #2
 8006900:	3302      	adds	r3, #2
 8006902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	f003 0303 	and.w	r3, r3, #3
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	220f      	movs	r2, #15
 8006912:	fa02 f303 	lsl.w	r3, r2, r3
 8006916:	43db      	mvns	r3, r3
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	4013      	ands	r3, r2
 800691c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a20      	ldr	r2, [pc, #128]	; (80069a4 <HAL_GPIO_Init+0x240>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d052      	beq.n	80069cc <HAL_GPIO_Init+0x268>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a1f      	ldr	r2, [pc, #124]	; (80069a8 <HAL_GPIO_Init+0x244>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d031      	beq.n	8006992 <HAL_GPIO_Init+0x22e>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a1e      	ldr	r2, [pc, #120]	; (80069ac <HAL_GPIO_Init+0x248>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d02b      	beq.n	800698e <HAL_GPIO_Init+0x22a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <HAL_GPIO_Init+0x24c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d025      	beq.n	800698a <HAL_GPIO_Init+0x226>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <HAL_GPIO_Init+0x250>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d01f      	beq.n	8006986 <HAL_GPIO_Init+0x222>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a1b      	ldr	r2, [pc, #108]	; (80069b8 <HAL_GPIO_Init+0x254>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d019      	beq.n	8006982 <HAL_GPIO_Init+0x21e>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a1a      	ldr	r2, [pc, #104]	; (80069bc <HAL_GPIO_Init+0x258>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <HAL_GPIO_Init+0x21a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a19      	ldr	r2, [pc, #100]	; (80069c0 <HAL_GPIO_Init+0x25c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00d      	beq.n	800697a <HAL_GPIO_Init+0x216>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a18      	ldr	r2, [pc, #96]	; (80069c4 <HAL_GPIO_Init+0x260>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d007      	beq.n	8006976 <HAL_GPIO_Init+0x212>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <HAL_GPIO_Init+0x264>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d101      	bne.n	8006972 <HAL_GPIO_Init+0x20e>
 800696e:	2309      	movs	r3, #9
 8006970:	e02d      	b.n	80069ce <HAL_GPIO_Init+0x26a>
 8006972:	230a      	movs	r3, #10
 8006974:	e02b      	b.n	80069ce <HAL_GPIO_Init+0x26a>
 8006976:	2308      	movs	r3, #8
 8006978:	e029      	b.n	80069ce <HAL_GPIO_Init+0x26a>
 800697a:	2307      	movs	r3, #7
 800697c:	e027      	b.n	80069ce <HAL_GPIO_Init+0x26a>
 800697e:	2306      	movs	r3, #6
 8006980:	e025      	b.n	80069ce <HAL_GPIO_Init+0x26a>
 8006982:	2305      	movs	r3, #5
 8006984:	e023      	b.n	80069ce <HAL_GPIO_Init+0x26a>
 8006986:	2304      	movs	r3, #4
 8006988:	e021      	b.n	80069ce <HAL_GPIO_Init+0x26a>
 800698a:	2303      	movs	r3, #3
 800698c:	e01f      	b.n	80069ce <HAL_GPIO_Init+0x26a>
 800698e:	2302      	movs	r3, #2
 8006990:	e01d      	b.n	80069ce <HAL_GPIO_Init+0x26a>
 8006992:	2301      	movs	r3, #1
 8006994:	e01b      	b.n	80069ce <HAL_GPIO_Init+0x26a>
 8006996:	bf00      	nop
 8006998:	58000080 	.word	0x58000080
 800699c:	58024400 	.word	0x58024400
 80069a0:	58000400 	.word	0x58000400
 80069a4:	58020000 	.word	0x58020000
 80069a8:	58020400 	.word	0x58020400
 80069ac:	58020800 	.word	0x58020800
 80069b0:	58020c00 	.word	0x58020c00
 80069b4:	58021000 	.word	0x58021000
 80069b8:	58021400 	.word	0x58021400
 80069bc:	58021800 	.word	0x58021800
 80069c0:	58021c00 	.word	0x58021c00
 80069c4:	58022000 	.word	0x58022000
 80069c8:	58022400 	.word	0x58022400
 80069cc:	2300      	movs	r3, #0
 80069ce:	69fa      	ldr	r2, [r7, #28]
 80069d0:	f002 0203 	and.w	r2, r2, #3
 80069d4:	0092      	lsls	r2, r2, #2
 80069d6:	4093      	lsls	r3, r2
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	4313      	orrs	r3, r2
 80069dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069de:	4938      	ldr	r1, [pc, #224]	; (8006ac0 <HAL_GPIO_Init+0x35c>)
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	089b      	lsrs	r3, r3, #2
 80069e4:	3302      	adds	r3, #2
 80069e6:	69ba      	ldr	r2, [r7, #24]
 80069e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	43db      	mvns	r3, r3
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	4013      	ands	r3, r2
 80069fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	43db      	mvns	r3, r3
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	43db      	mvns	r3, r3
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	4013      	ands	r3, r2
 8006a56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	43db      	mvns	r3, r3
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f47f ae63 	bne.w	8006778 <HAL_GPIO_Init+0x14>
  }
}
 8006ab2:	bf00      	nop
 8006ab4:	bf00      	nop
 8006ab6:	3724      	adds	r7, #36	; 0x24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	58000400 	.word	0x58000400

08006ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	807b      	strh	r3, [r7, #2]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ad4:	787b      	ldrb	r3, [r7, #1]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ada:	887a      	ldrh	r2, [r7, #2]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006ae0:	e003      	b.n	8006aea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006ae2:	887b      	ldrh	r3, [r7, #2]
 8006ae4:	041a      	lsls	r2, r3, #16
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	619a      	str	r2, [r3, #24]
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b082      	sub	sp, #8
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	4603      	mov	r3, r0
 8006afe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b08:	88fb      	ldrh	r3, [r7, #6]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d008      	beq.n	8006b22 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b14:	88fb      	ldrh	r3, [r7, #6]
 8006b16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b1a:	88fb      	ldrh	r3, [r7, #6]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fb fb79 	bl	8002214 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006b22:	bf00      	nop
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
	...

08006b2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006b34:	4b29      	ldr	r3, [pc, #164]	; (8006bdc <HAL_PWREx_ConfigSupply+0xb0>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0307 	and.w	r3, r3, #7
 8006b3c:	2b06      	cmp	r3, #6
 8006b3e:	d00a      	beq.n	8006b56 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b40:	4b26      	ldr	r3, [pc, #152]	; (8006bdc <HAL_PWREx_ConfigSupply+0xb0>)
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d001      	beq.n	8006b52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e040      	b.n	8006bd4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	e03e      	b.n	8006bd4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b56:	4b21      	ldr	r3, [pc, #132]	; (8006bdc <HAL_PWREx_ConfigSupply+0xb0>)
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006b5e:	491f      	ldr	r1, [pc, #124]	; (8006bdc <HAL_PWREx_ConfigSupply+0xb0>)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b66:	f7fb fef7 	bl	8002958 <HAL_GetTick>
 8006b6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b6c:	e009      	b.n	8006b82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b6e:	f7fb fef3 	bl	8002958 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b7c:	d901      	bls.n	8006b82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e028      	b.n	8006bd4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b82:	4b16      	ldr	r3, [pc, #88]	; (8006bdc <HAL_PWREx_ConfigSupply+0xb0>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b8e:	d1ee      	bne.n	8006b6e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b1e      	cmp	r3, #30
 8006b94:	d008      	beq.n	8006ba8 <HAL_PWREx_ConfigSupply+0x7c>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b2e      	cmp	r3, #46	; 0x2e
 8006b9a:	d005      	beq.n	8006ba8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b1d      	cmp	r3, #29
 8006ba0:	d002      	beq.n	8006ba8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b2d      	cmp	r3, #45	; 0x2d
 8006ba6:	d114      	bne.n	8006bd2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006ba8:	f7fb fed6 	bl	8002958 <HAL_GetTick>
 8006bac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006bae:	e009      	b.n	8006bc4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006bb0:	f7fb fed2 	bl	8002958 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bbe:	d901      	bls.n	8006bc4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e007      	b.n	8006bd4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <HAL_PWREx_ConfigSupply+0xb0>)
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd0:	d1ee      	bne.n	8006bb0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	58024800 	.word	0x58024800

08006be0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08c      	sub	sp, #48	; 0x30
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e3f4      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 80b3 	beq.w	8006d66 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c00:	4b95      	ldr	r3, [pc, #596]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c0a:	4b93      	ldr	r3, [pc, #588]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c12:	2b10      	cmp	r3, #16
 8006c14:	d007      	beq.n	8006c26 <HAL_RCC_OscConfig+0x46>
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	2b18      	cmp	r3, #24
 8006c1a:	d112      	bne.n	8006c42 <HAL_RCC_OscConfig+0x62>
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d10d      	bne.n	8006c42 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c26:	4b8c      	ldr	r3, [pc, #560]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 8098 	beq.w	8006d64 <HAL_RCC_OscConfig+0x184>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f040 8093 	bne.w	8006d64 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e3cc      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c4a:	d106      	bne.n	8006c5a <HAL_RCC_OscConfig+0x7a>
 8006c4c:	4b82      	ldr	r3, [pc, #520]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a81      	ldr	r2, [pc, #516]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	e058      	b.n	8006d0c <HAL_RCC_OscConfig+0x12c>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d112      	bne.n	8006c88 <HAL_RCC_OscConfig+0xa8>
 8006c62:	4b7d      	ldr	r3, [pc, #500]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a7c      	ldr	r2, [pc, #496]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c6c:	6013      	str	r3, [r2, #0]
 8006c6e:	4b7a      	ldr	r3, [pc, #488]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a79      	ldr	r2, [pc, #484]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006c74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	4b77      	ldr	r3, [pc, #476]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a76      	ldr	r2, [pc, #472]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	e041      	b.n	8006d0c <HAL_RCC_OscConfig+0x12c>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c90:	d112      	bne.n	8006cb8 <HAL_RCC_OscConfig+0xd8>
 8006c92:	4b71      	ldr	r3, [pc, #452]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a70      	ldr	r2, [pc, #448]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	4b6e      	ldr	r3, [pc, #440]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a6d      	ldr	r2, [pc, #436]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006ca4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	4b6b      	ldr	r3, [pc, #428]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a6a      	ldr	r2, [pc, #424]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	e029      	b.n	8006d0c <HAL_RCC_OscConfig+0x12c>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8006cc0:	d112      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x108>
 8006cc2:	4b65      	ldr	r3, [pc, #404]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a64      	ldr	r2, [pc, #400]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	4b62      	ldr	r3, [pc, #392]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a61      	ldr	r2, [pc, #388]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006cd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	4b5f      	ldr	r3, [pc, #380]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a5e      	ldr	r2, [pc, #376]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	e011      	b.n	8006d0c <HAL_RCC_OscConfig+0x12c>
 8006ce8:	4b5b      	ldr	r3, [pc, #364]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a5a      	ldr	r2, [pc, #360]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cf2:	6013      	str	r3, [r2, #0]
 8006cf4:	4b58      	ldr	r3, [pc, #352]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a57      	ldr	r2, [pc, #348]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	4b55      	ldr	r3, [pc, #340]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a54      	ldr	r2, [pc, #336]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006d06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d013      	beq.n	8006d3c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d14:	f7fb fe20 	bl	8002958 <HAL_GetTick>
 8006d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d1c:	f7fb fe1c 	bl	8002958 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b64      	cmp	r3, #100	; 0x64
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e356      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d2e:	4b4a      	ldr	r3, [pc, #296]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0f0      	beq.n	8006d1c <HAL_RCC_OscConfig+0x13c>
 8006d3a:	e014      	b.n	8006d66 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3c:	f7fb fe0c 	bl	8002958 <HAL_GetTick>
 8006d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d44:	f7fb fe08 	bl	8002958 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b64      	cmp	r3, #100	; 0x64
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e342      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006d56:	4b40      	ldr	r3, [pc, #256]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f0      	bne.n	8006d44 <HAL_RCC_OscConfig+0x164>
 8006d62:	e000      	b.n	8006d66 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 808d 	beq.w	8006e8e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d74:	4b38      	ldr	r3, [pc, #224]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d7e:	4b36      	ldr	r3, [pc, #216]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d007      	beq.n	8006d9a <HAL_RCC_OscConfig+0x1ba>
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	2b18      	cmp	r3, #24
 8006d8e:	d137      	bne.n	8006e00 <HAL_RCC_OscConfig+0x220>
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d132      	bne.n	8006e00 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d9a:	4b2f      	ldr	r3, [pc, #188]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0304 	and.w	r3, r3, #4
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <HAL_RCC_OscConfig+0x1d2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e314      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006db2:	4b29      	ldr	r3, [pc, #164]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f023 0219 	bic.w	r2, r3, #25
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	4926      	ldr	r1, [pc, #152]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006dc4:	f7fb fdc8 	bl	8002958 <HAL_GetTick>
 8006dc8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dcc:	f7fb fdc4 	bl	8002958 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e2fe      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dde:	4b1e      	ldr	r3, [pc, #120]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0304 	and.w	r3, r3, #4
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0f0      	beq.n	8006dcc <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dea:	4b1b      	ldr	r3, [pc, #108]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	061b      	lsls	r3, r3, #24
 8006df8:	4917      	ldr	r1, [pc, #92]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dfe:	e046      	b.n	8006e8e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d029      	beq.n	8006e5c <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e08:	4b13      	ldr	r3, [pc, #76]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f023 0219 	bic.w	r2, r3, #25
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	4910      	ldr	r1, [pc, #64]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e1a:	f7fb fd9d 	bl	8002958 <HAL_GetTick>
 8006e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e20:	e008      	b.n	8006e34 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e22:	f7fb fd99 	bl	8002958 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d901      	bls.n	8006e34 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e2d3      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e34:	4b08      	ldr	r3, [pc, #32]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0f0      	beq.n	8006e22 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e40:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	061b      	lsls	r3, r3, #24
 8006e4e:	4902      	ldr	r1, [pc, #8]	; (8006e58 <HAL_RCC_OscConfig+0x278>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	604b      	str	r3, [r1, #4]
 8006e54:	e01b      	b.n	8006e8e <HAL_RCC_OscConfig+0x2ae>
 8006e56:	bf00      	nop
 8006e58:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e5c:	4b97      	ldr	r3, [pc, #604]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a96      	ldr	r2, [pc, #600]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006e62:	f023 0301 	bic.w	r3, r3, #1
 8006e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e68:	f7fb fd76 	bl	8002958 <HAL_GetTick>
 8006e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e70:	f7fb fd72 	bl	8002958 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e2ac      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e82:	4b8e      	ldr	r3, [pc, #568]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0304 	and.w	r3, r3, #4
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f0      	bne.n	8006e70 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0310 	and.w	r3, r3, #16
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d06a      	beq.n	8006f70 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e9a:	4b88      	ldr	r3, [pc, #544]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ea2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ea4:	4b85      	ldr	r3, [pc, #532]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d007      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x2e0>
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	2b18      	cmp	r3, #24
 8006eb4:	d11b      	bne.n	8006eee <HAL_RCC_OscConfig+0x30e>
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f003 0303 	and.w	r3, r3, #3
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d116      	bne.n	8006eee <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ec0:	4b7e      	ldr	r3, [pc, #504]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_RCC_OscConfig+0x2f8>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	2b80      	cmp	r3, #128	; 0x80
 8006ed2:	d001      	beq.n	8006ed8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e281      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ed8:	4b78      	ldr	r3, [pc, #480]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	061b      	lsls	r3, r3, #24
 8006ee6:	4975      	ldr	r1, [pc, #468]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006eec:	e040      	b.n	8006f70 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d023      	beq.n	8006f3e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006ef6:	4b71      	ldr	r3, [pc, #452]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a70      	ldr	r2, [pc, #448]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f02:	f7fb fd29 	bl	8002958 <HAL_GetTick>
 8006f06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f08:	e008      	b.n	8006f1c <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006f0a:	f7fb fd25 	bl	8002958 <HAL_GetTick>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d901      	bls.n	8006f1c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e25f      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f1c:	4b67      	ldr	r3, [pc, #412]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d0f0      	beq.n	8006f0a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f28:	4b64      	ldr	r3, [pc, #400]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	061b      	lsls	r3, r3, #24
 8006f36:	4961      	ldr	r1, [pc, #388]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	60cb      	str	r3, [r1, #12]
 8006f3c:	e018      	b.n	8006f70 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006f3e:	4b5f      	ldr	r3, [pc, #380]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a5e      	ldr	r2, [pc, #376]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4a:	f7fb fd05 	bl	8002958 <HAL_GetTick>
 8006f4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f50:	e008      	b.n	8006f64 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006f52:	f7fb fd01 	bl	8002958 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d901      	bls.n	8006f64 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e23b      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f64:	4b55      	ldr	r3, [pc, #340]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1f0      	bne.n	8006f52 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0308 	and.w	r3, r3, #8
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d036      	beq.n	8006fea <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d019      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f84:	4b4d      	ldr	r3, [pc, #308]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f88:	4a4c      	ldr	r2, [pc, #304]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006f8a:	f043 0301 	orr.w	r3, r3, #1
 8006f8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f90:	f7fb fce2 	bl	8002958 <HAL_GetTick>
 8006f94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f96:	e008      	b.n	8006faa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f98:	f7fb fcde 	bl	8002958 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e218      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006faa:	4b44      	ldr	r3, [pc, #272]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0f0      	beq.n	8006f98 <HAL_RCC_OscConfig+0x3b8>
 8006fb6:	e018      	b.n	8006fea <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fb8:	4b40      	ldr	r3, [pc, #256]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fbc:	4a3f      	ldr	r2, [pc, #252]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006fbe:	f023 0301 	bic.w	r3, r3, #1
 8006fc2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc4:	f7fb fcc8 	bl	8002958 <HAL_GetTick>
 8006fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fca:	e008      	b.n	8006fde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fcc:	f7fb fcc4 	bl	8002958 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e1fe      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006fde:	4b37      	ldr	r3, [pc, #220]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8006fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1f0      	bne.n	8006fcc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d036      	beq.n	8007064 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d019      	beq.n	8007032 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ffe:	4b2f      	ldr	r3, [pc, #188]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a2e      	ldr	r2, [pc, #184]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8007004:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007008:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800700a:	f7fb fca5 	bl	8002958 <HAL_GetTick>
 800700e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007010:	e008      	b.n	8007024 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007012:	f7fb fca1 	bl	8002958 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d901      	bls.n	8007024 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e1db      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007024:	4b25      	ldr	r3, [pc, #148]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0f0      	beq.n	8007012 <HAL_RCC_OscConfig+0x432>
 8007030:	e018      	b.n	8007064 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007032:	4b22      	ldr	r3, [pc, #136]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a21      	ldr	r2, [pc, #132]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 8007038:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800703c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800703e:	f7fb fc8b 	bl	8002958 <HAL_GetTick>
 8007042:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007044:	e008      	b.n	8007058 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007046:	f7fb fc87 	bl	8002958 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e1c1      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007058:	4b18      	ldr	r3, [pc, #96]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1f0      	bne.n	8007046 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0304 	and.w	r3, r3, #4
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 80af 	beq.w	80071d0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007072:	4b13      	ldr	r3, [pc, #76]	; (80070c0 <HAL_RCC_OscConfig+0x4e0>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a12      	ldr	r2, [pc, #72]	; (80070c0 <HAL_RCC_OscConfig+0x4e0>)
 8007078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800707c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800707e:	f7fb fc6b 	bl	8002958 <HAL_GetTick>
 8007082:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007084:	e008      	b.n	8007098 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007086:	f7fb fc67 	bl	8002958 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	2b64      	cmp	r3, #100	; 0x64
 8007092:	d901      	bls.n	8007098 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e1a1      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007098:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <HAL_RCC_OscConfig+0x4e0>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0f0      	beq.n	8007086 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d10b      	bne.n	80070c4 <HAL_RCC_OscConfig+0x4e4>
 80070ac:	4b03      	ldr	r3, [pc, #12]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 80070ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b0:	4a02      	ldr	r2, [pc, #8]	; (80070bc <HAL_RCC_OscConfig+0x4dc>)
 80070b2:	f043 0301 	orr.w	r3, r3, #1
 80070b6:	6713      	str	r3, [r2, #112]	; 0x70
 80070b8:	e05b      	b.n	8007172 <HAL_RCC_OscConfig+0x592>
 80070ba:	bf00      	nop
 80070bc:	58024400 	.word	0x58024400
 80070c0:	58024800 	.word	0x58024800
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d112      	bne.n	80070f2 <HAL_RCC_OscConfig+0x512>
 80070cc:	4b9d      	ldr	r3, [pc, #628]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80070ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d0:	4a9c      	ldr	r2, [pc, #624]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80070d2:	f023 0301 	bic.w	r3, r3, #1
 80070d6:	6713      	str	r3, [r2, #112]	; 0x70
 80070d8:	4b9a      	ldr	r3, [pc, #616]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80070da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070dc:	4a99      	ldr	r2, [pc, #612]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80070de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070e2:	6713      	str	r3, [r2, #112]	; 0x70
 80070e4:	4b97      	ldr	r3, [pc, #604]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80070e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e8:	4a96      	ldr	r2, [pc, #600]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80070ea:	f023 0304 	bic.w	r3, r3, #4
 80070ee:	6713      	str	r3, [r2, #112]	; 0x70
 80070f0:	e03f      	b.n	8007172 <HAL_RCC_OscConfig+0x592>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	2b05      	cmp	r3, #5
 80070f8:	d112      	bne.n	8007120 <HAL_RCC_OscConfig+0x540>
 80070fa:	4b92      	ldr	r3, [pc, #584]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80070fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070fe:	4a91      	ldr	r2, [pc, #580]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007100:	f043 0304 	orr.w	r3, r3, #4
 8007104:	6713      	str	r3, [r2, #112]	; 0x70
 8007106:	4b8f      	ldr	r3, [pc, #572]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710a:	4a8e      	ldr	r2, [pc, #568]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 800710c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007110:	6713      	str	r3, [r2, #112]	; 0x70
 8007112:	4b8c      	ldr	r3, [pc, #560]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007116:	4a8b      	ldr	r2, [pc, #556]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007118:	f043 0301 	orr.w	r3, r3, #1
 800711c:	6713      	str	r3, [r2, #112]	; 0x70
 800711e:	e028      	b.n	8007172 <HAL_RCC_OscConfig+0x592>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	2b85      	cmp	r3, #133	; 0x85
 8007126:	d112      	bne.n	800714e <HAL_RCC_OscConfig+0x56e>
 8007128:	4b86      	ldr	r3, [pc, #536]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 800712a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800712c:	4a85      	ldr	r2, [pc, #532]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 800712e:	f043 0304 	orr.w	r3, r3, #4
 8007132:	6713      	str	r3, [r2, #112]	; 0x70
 8007134:	4b83      	ldr	r3, [pc, #524]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007138:	4a82      	ldr	r2, [pc, #520]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 800713a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713e:	6713      	str	r3, [r2, #112]	; 0x70
 8007140:	4b80      	ldr	r3, [pc, #512]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007144:	4a7f      	ldr	r2, [pc, #508]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	6713      	str	r3, [r2, #112]	; 0x70
 800714c:	e011      	b.n	8007172 <HAL_RCC_OscConfig+0x592>
 800714e:	4b7d      	ldr	r3, [pc, #500]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007152:	4a7c      	ldr	r2, [pc, #496]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007154:	f023 0301 	bic.w	r3, r3, #1
 8007158:	6713      	str	r3, [r2, #112]	; 0x70
 800715a:	4b7a      	ldr	r3, [pc, #488]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 800715c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715e:	4a79      	ldr	r2, [pc, #484]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007160:	f023 0304 	bic.w	r3, r3, #4
 8007164:	6713      	str	r3, [r2, #112]	; 0x70
 8007166:	4b77      	ldr	r3, [pc, #476]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716a:	4a76      	ldr	r2, [pc, #472]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 800716c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007170:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d015      	beq.n	80071a6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800717a:	f7fb fbed 	bl	8002958 <HAL_GetTick>
 800717e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007180:	e00a      	b.n	8007198 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007182:	f7fb fbe9 	bl	8002958 <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007190:	4293      	cmp	r3, r2
 8007192:	d901      	bls.n	8007198 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e121      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007198:	4b6a      	ldr	r3, [pc, #424]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 800719a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719c:	f003 0302 	and.w	r3, r3, #2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d0ee      	beq.n	8007182 <HAL_RCC_OscConfig+0x5a2>
 80071a4:	e014      	b.n	80071d0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a6:	f7fb fbd7 	bl	8002958 <HAL_GetTick>
 80071aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071ac:	e00a      	b.n	80071c4 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071ae:	f7fb fbd3 	bl	8002958 <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071bc:	4293      	cmp	r3, r2
 80071be:	d901      	bls.n	80071c4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e10b      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071c4:	4b5f      	ldr	r3, [pc, #380]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80071c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1ee      	bne.n	80071ae <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 8100 	beq.w	80073da <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80071da:	4b5a      	ldr	r3, [pc, #360]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071e2:	2b18      	cmp	r3, #24
 80071e4:	f000 80bb 	beq.w	800735e <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	f040 8095 	bne.w	800731c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f2:	4b54      	ldr	r3, [pc, #336]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a53      	ldr	r2, [pc, #332]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80071f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fe:	f7fb fbab 	bl	8002958 <HAL_GetTick>
 8007202:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007204:	e008      	b.n	8007218 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007206:	f7fb fba7 	bl	8002958 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b02      	cmp	r3, #2
 8007212:	d901      	bls.n	8007218 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e0e1      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007218:	4b4a      	ldr	r3, [pc, #296]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1f0      	bne.n	8007206 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007224:	4b47      	ldr	r3, [pc, #284]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007228:	4b47      	ldr	r3, [pc, #284]	; (8007348 <HAL_RCC_OscConfig+0x768>)
 800722a:	4013      	ands	r3, r2
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007234:	0112      	lsls	r2, r2, #4
 8007236:	430a      	orrs	r2, r1
 8007238:	4942      	ldr	r1, [pc, #264]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 800723a:	4313      	orrs	r3, r2
 800723c:	628b      	str	r3, [r1, #40]	; 0x28
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007242:	3b01      	subs	r3, #1
 8007244:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724c:	3b01      	subs	r3, #1
 800724e:	025b      	lsls	r3, r3, #9
 8007250:	b29b      	uxth	r3, r3
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007258:	3b01      	subs	r3, #1
 800725a:	041b      	lsls	r3, r3, #16
 800725c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007260:	431a      	orrs	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007266:	3b01      	subs	r3, #1
 8007268:	061b      	lsls	r3, r3, #24
 800726a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800726e:	4935      	ldr	r1, [pc, #212]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007270:	4313      	orrs	r3, r2
 8007272:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007274:	4b33      	ldr	r3, [pc, #204]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	4a32      	ldr	r2, [pc, #200]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 800727a:	f023 0301 	bic.w	r3, r3, #1
 800727e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007280:	4b30      	ldr	r3, [pc, #192]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007284:	4b31      	ldr	r3, [pc, #196]	; (800734c <HAL_RCC_OscConfig+0x76c>)
 8007286:	4013      	ands	r3, r2
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800728c:	00d2      	lsls	r2, r2, #3
 800728e:	492d      	ldr	r1, [pc, #180]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007290:	4313      	orrs	r3, r2
 8007292:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007294:	4b2b      	ldr	r3, [pc, #172]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	f023 020c 	bic.w	r2, r3, #12
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a0:	4928      	ldr	r1, [pc, #160]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80072a6:	4b27      	ldr	r3, [pc, #156]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80072a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072aa:	f023 0202 	bic.w	r2, r3, #2
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b2:	4924      	ldr	r1, [pc, #144]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80072b8:	4b22      	ldr	r3, [pc, #136]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	4a21      	ldr	r2, [pc, #132]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80072be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c4:	4b1f      	ldr	r3, [pc, #124]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	4a1e      	ldr	r2, [pc, #120]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80072ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80072d0:	4b1c      	ldr	r3, [pc, #112]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80072d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d4:	4a1b      	ldr	r2, [pc, #108]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80072d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80072da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80072dc:	4b19      	ldr	r3, [pc, #100]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	4a18      	ldr	r2, [pc, #96]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80072e2:	f043 0301 	orr.w	r3, r3, #1
 80072e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072e8:	4b16      	ldr	r3, [pc, #88]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a15      	ldr	r2, [pc, #84]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 80072ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f4:	f7fb fb30 	bl	8002958 <HAL_GetTick>
 80072f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072fa:	e008      	b.n	800730e <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072fc:	f7fb fb2c 	bl	8002958 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b02      	cmp	r3, #2
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e066      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800730e:	4b0d      	ldr	r3, [pc, #52]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0f0      	beq.n	80072fc <HAL_RCC_OscConfig+0x71c>
 800731a:	e05e      	b.n	80073da <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800731c:	4b09      	ldr	r3, [pc, #36]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a08      	ldr	r2, [pc, #32]	; (8007344 <HAL_RCC_OscConfig+0x764>)
 8007322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007328:	f7fb fb16 	bl	8002958 <HAL_GetTick>
 800732c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800732e:	e00f      	b.n	8007350 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007330:	f7fb fb12 	bl	8002958 <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b02      	cmp	r3, #2
 800733c:	d908      	bls.n	8007350 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e04c      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
 8007342:	bf00      	nop
 8007344:	58024400 	.word	0x58024400
 8007348:	fffffc0c 	.word	0xfffffc0c
 800734c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007350:	4b24      	ldr	r3, [pc, #144]	; (80073e4 <HAL_RCC_OscConfig+0x804>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1e9      	bne.n	8007330 <HAL_RCC_OscConfig+0x750>
 800735c:	e03d      	b.n	80073da <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800735e:	4b21      	ldr	r3, [pc, #132]	; (80073e4 <HAL_RCC_OscConfig+0x804>)
 8007360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007362:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007364:	4b1f      	ldr	r3, [pc, #124]	; (80073e4 <HAL_RCC_OscConfig+0x804>)
 8007366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007368:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	2b01      	cmp	r3, #1
 8007370:	d031      	beq.n	80073d6 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f003 0203 	and.w	r2, r3, #3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800737c:	429a      	cmp	r2, r3
 800737e:	d12a      	bne.n	80073d6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	091b      	lsrs	r3, r3, #4
 8007384:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800738c:	429a      	cmp	r2, r3
 800738e:	d122      	bne.n	80073d6 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800739c:	429a      	cmp	r2, r3
 800739e:	d11a      	bne.n	80073d6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	0a5b      	lsrs	r3, r3, #9
 80073a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ac:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d111      	bne.n	80073d6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	0c1b      	lsrs	r3, r3, #16
 80073b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d108      	bne.n	80073d6 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	0e1b      	lsrs	r3, r3, #24
 80073c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d001      	beq.n	80073da <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e000      	b.n	80073dc <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3730      	adds	r7, #48	; 0x30
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	58024400 	.word	0x58024400

080073e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e19c      	b.n	8007736 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073fc:	4b8a      	ldr	r3, [pc, #552]	; (8007628 <HAL_RCC_ClockConfig+0x240>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 030f 	and.w	r3, r3, #15
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d910      	bls.n	800742c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800740a:	4b87      	ldr	r3, [pc, #540]	; (8007628 <HAL_RCC_ClockConfig+0x240>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f023 020f 	bic.w	r2, r3, #15
 8007412:	4985      	ldr	r1, [pc, #532]	; (8007628 <HAL_RCC_ClockConfig+0x240>)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	4313      	orrs	r3, r2
 8007418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800741a:	4b83      	ldr	r3, [pc, #524]	; (8007628 <HAL_RCC_ClockConfig+0x240>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 030f 	and.w	r3, r3, #15
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d001      	beq.n	800742c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e184      	b.n	8007736 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b00      	cmp	r3, #0
 8007436:	d010      	beq.n	800745a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	691a      	ldr	r2, [r3, #16]
 800743c:	4b7b      	ldr	r3, [pc, #492]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007444:	429a      	cmp	r2, r3
 8007446:	d908      	bls.n	800745a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007448:	4b78      	ldr	r3, [pc, #480]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	4975      	ldr	r1, [pc, #468]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 8007456:	4313      	orrs	r3, r2
 8007458:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0308 	and.w	r3, r3, #8
 8007462:	2b00      	cmp	r3, #0
 8007464:	d010      	beq.n	8007488 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	695a      	ldr	r2, [r3, #20]
 800746a:	4b70      	ldr	r3, [pc, #448]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007472:	429a      	cmp	r2, r3
 8007474:	d908      	bls.n	8007488 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007476:	4b6d      	ldr	r3, [pc, #436]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	496a      	ldr	r1, [pc, #424]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 8007484:	4313      	orrs	r3, r2
 8007486:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0310 	and.w	r3, r3, #16
 8007490:	2b00      	cmp	r3, #0
 8007492:	d010      	beq.n	80074b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	699a      	ldr	r2, [r3, #24]
 8007498:	4b64      	ldr	r3, [pc, #400]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d908      	bls.n	80074b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80074a4:	4b61      	ldr	r3, [pc, #388]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	495e      	ldr	r1, [pc, #376]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0320 	and.w	r3, r3, #32
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d010      	beq.n	80074e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	69da      	ldr	r2, [r3, #28]
 80074c6:	4b59      	ldr	r3, [pc, #356]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d908      	bls.n	80074e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80074d2:	4b56      	ldr	r3, [pc, #344]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	4953      	ldr	r1, [pc, #332]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d010      	beq.n	8007512 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68da      	ldr	r2, [r3, #12]
 80074f4:	4b4d      	ldr	r3, [pc, #308]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	f003 030f 	and.w	r3, r3, #15
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d908      	bls.n	8007512 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007500:	4b4a      	ldr	r3, [pc, #296]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	f023 020f 	bic.w	r2, r3, #15
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	4947      	ldr	r1, [pc, #284]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 800750e:	4313      	orrs	r3, r2
 8007510:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d055      	beq.n	80075ca <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800751e:	4b43      	ldr	r3, [pc, #268]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	4940      	ldr	r1, [pc, #256]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 800752c:	4313      	orrs	r3, r2
 800752e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2b02      	cmp	r3, #2
 8007536:	d107      	bne.n	8007548 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007538:	4b3c      	ldr	r3, [pc, #240]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d121      	bne.n	8007588 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e0f6      	b.n	8007736 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	2b03      	cmp	r3, #3
 800754e:	d107      	bne.n	8007560 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007550:	4b36      	ldr	r3, [pc, #216]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d115      	bne.n	8007588 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e0ea      	b.n	8007736 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d107      	bne.n	8007578 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007568:	4b30      	ldr	r3, [pc, #192]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007570:	2b00      	cmp	r3, #0
 8007572:	d109      	bne.n	8007588 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e0de      	b.n	8007736 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007578:	4b2c      	ldr	r3, [pc, #176]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e0d6      	b.n	8007736 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007588:	4b28      	ldr	r3, [pc, #160]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	f023 0207 	bic.w	r2, r3, #7
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	4925      	ldr	r1, [pc, #148]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 8007596:	4313      	orrs	r3, r2
 8007598:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800759a:	f7fb f9dd 	bl	8002958 <HAL_GetTick>
 800759e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075a0:	e00a      	b.n	80075b8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075a2:	f7fb f9d9 	bl	8002958 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d901      	bls.n	80075b8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e0be      	b.n	8007736 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075b8:	4b1c      	ldr	r3, [pc, #112]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d1eb      	bne.n	80075a2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d010      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	68da      	ldr	r2, [r3, #12]
 80075da:	4b14      	ldr	r3, [pc, #80]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d208      	bcs.n	80075f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075e6:	4b11      	ldr	r3, [pc, #68]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	f023 020f 	bic.w	r2, r3, #15
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	490e      	ldr	r1, [pc, #56]	; (800762c <HAL_RCC_ClockConfig+0x244>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075f8:	4b0b      	ldr	r3, [pc, #44]	; (8007628 <HAL_RCC_ClockConfig+0x240>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 030f 	and.w	r3, r3, #15
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	429a      	cmp	r2, r3
 8007604:	d214      	bcs.n	8007630 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007606:	4b08      	ldr	r3, [pc, #32]	; (8007628 <HAL_RCC_ClockConfig+0x240>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f023 020f 	bic.w	r2, r3, #15
 800760e:	4906      	ldr	r1, [pc, #24]	; (8007628 <HAL_RCC_ClockConfig+0x240>)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	4313      	orrs	r3, r2
 8007614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007616:	4b04      	ldr	r3, [pc, #16]	; (8007628 <HAL_RCC_ClockConfig+0x240>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 030f 	and.w	r3, r3, #15
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	429a      	cmp	r2, r3
 8007622:	d005      	beq.n	8007630 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e086      	b.n	8007736 <HAL_RCC_ClockConfig+0x34e>
 8007628:	52002000 	.word	0x52002000
 800762c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	2b00      	cmp	r3, #0
 800763a:	d010      	beq.n	800765e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	691a      	ldr	r2, [r3, #16]
 8007640:	4b3f      	ldr	r3, [pc, #252]	; (8007740 <HAL_RCC_ClockConfig+0x358>)
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007648:	429a      	cmp	r2, r3
 800764a:	d208      	bcs.n	800765e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800764c:	4b3c      	ldr	r3, [pc, #240]	; (8007740 <HAL_RCC_ClockConfig+0x358>)
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	4939      	ldr	r1, [pc, #228]	; (8007740 <HAL_RCC_ClockConfig+0x358>)
 800765a:	4313      	orrs	r3, r2
 800765c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0308 	and.w	r3, r3, #8
 8007666:	2b00      	cmp	r3, #0
 8007668:	d010      	beq.n	800768c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	695a      	ldr	r2, [r3, #20]
 800766e:	4b34      	ldr	r3, [pc, #208]	; (8007740 <HAL_RCC_ClockConfig+0x358>)
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007676:	429a      	cmp	r2, r3
 8007678:	d208      	bcs.n	800768c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800767a:	4b31      	ldr	r3, [pc, #196]	; (8007740 <HAL_RCC_ClockConfig+0x358>)
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	492e      	ldr	r1, [pc, #184]	; (8007740 <HAL_RCC_ClockConfig+0x358>)
 8007688:	4313      	orrs	r3, r2
 800768a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0310 	and.w	r3, r3, #16
 8007694:	2b00      	cmp	r3, #0
 8007696:	d010      	beq.n	80076ba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699a      	ldr	r2, [r3, #24]
 800769c:	4b28      	ldr	r3, [pc, #160]	; (8007740 <HAL_RCC_ClockConfig+0x358>)
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d208      	bcs.n	80076ba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80076a8:	4b25      	ldr	r3, [pc, #148]	; (8007740 <HAL_RCC_ClockConfig+0x358>)
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	4922      	ldr	r1, [pc, #136]	; (8007740 <HAL_RCC_ClockConfig+0x358>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0320 	and.w	r3, r3, #32
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d010      	beq.n	80076e8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	69da      	ldr	r2, [r3, #28]
 80076ca:	4b1d      	ldr	r3, [pc, #116]	; (8007740 <HAL_RCC_ClockConfig+0x358>)
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d208      	bcs.n	80076e8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80076d6:	4b1a      	ldr	r3, [pc, #104]	; (8007740 <HAL_RCC_ClockConfig+0x358>)
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	4917      	ldr	r1, [pc, #92]	; (8007740 <HAL_RCC_ClockConfig+0x358>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80076e8:	f000 f834 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 80076ec:	4602      	mov	r2, r0
 80076ee:	4b14      	ldr	r3, [pc, #80]	; (8007740 <HAL_RCC_ClockConfig+0x358>)
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	0a1b      	lsrs	r3, r3, #8
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	4912      	ldr	r1, [pc, #72]	; (8007744 <HAL_RCC_ClockConfig+0x35c>)
 80076fa:	5ccb      	ldrb	r3, [r1, r3]
 80076fc:	f003 031f 	and.w	r3, r3, #31
 8007700:	fa22 f303 	lsr.w	r3, r2, r3
 8007704:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007706:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <HAL_RCC_ClockConfig+0x358>)
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	4a0d      	ldr	r2, [pc, #52]	; (8007744 <HAL_RCC_ClockConfig+0x35c>)
 8007710:	5cd3      	ldrb	r3, [r2, r3]
 8007712:	f003 031f 	and.w	r3, r3, #31
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	fa22 f303 	lsr.w	r3, r2, r3
 800771c:	4a0a      	ldr	r2, [pc, #40]	; (8007748 <HAL_RCC_ClockConfig+0x360>)
 800771e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007720:	4a0a      	ldr	r2, [pc, #40]	; (800774c <HAL_RCC_ClockConfig+0x364>)
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007726:	4b0a      	ldr	r3, [pc, #40]	; (8007750 <HAL_RCC_ClockConfig+0x368>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4618      	mov	r0, r3
 800772c:	f7fb f8ca 	bl	80028c4 <HAL_InitTick>
 8007730:	4603      	mov	r3, r0
 8007732:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007734:	7bfb      	ldrb	r3, [r7, #15]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	58024400 	.word	0x58024400
 8007744:	0800bb28 	.word	0x0800bb28
 8007748:	24000008 	.word	0x24000008
 800774c:	24000004 	.word	0x24000004
 8007750:	2400000c 	.word	0x2400000c

08007754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007754:	b480      	push	{r7}
 8007756:	b089      	sub	sp, #36	; 0x24
 8007758:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800775a:	4bb3      	ldr	r3, [pc, #716]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007762:	2b18      	cmp	r3, #24
 8007764:	f200 8155 	bhi.w	8007a12 <HAL_RCC_GetSysClockFreq+0x2be>
 8007768:	a201      	add	r2, pc, #4	; (adr r2, 8007770 <HAL_RCC_GetSysClockFreq+0x1c>)
 800776a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776e:	bf00      	nop
 8007770:	080077d5 	.word	0x080077d5
 8007774:	08007a13 	.word	0x08007a13
 8007778:	08007a13 	.word	0x08007a13
 800777c:	08007a13 	.word	0x08007a13
 8007780:	08007a13 	.word	0x08007a13
 8007784:	08007a13 	.word	0x08007a13
 8007788:	08007a13 	.word	0x08007a13
 800778c:	08007a13 	.word	0x08007a13
 8007790:	080077fb 	.word	0x080077fb
 8007794:	08007a13 	.word	0x08007a13
 8007798:	08007a13 	.word	0x08007a13
 800779c:	08007a13 	.word	0x08007a13
 80077a0:	08007a13 	.word	0x08007a13
 80077a4:	08007a13 	.word	0x08007a13
 80077a8:	08007a13 	.word	0x08007a13
 80077ac:	08007a13 	.word	0x08007a13
 80077b0:	08007801 	.word	0x08007801
 80077b4:	08007a13 	.word	0x08007a13
 80077b8:	08007a13 	.word	0x08007a13
 80077bc:	08007a13 	.word	0x08007a13
 80077c0:	08007a13 	.word	0x08007a13
 80077c4:	08007a13 	.word	0x08007a13
 80077c8:	08007a13 	.word	0x08007a13
 80077cc:	08007a13 	.word	0x08007a13
 80077d0:	08007807 	.word	0x08007807
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077d4:	4b94      	ldr	r3, [pc, #592]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0320 	and.w	r3, r3, #32
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d009      	beq.n	80077f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80077e0:	4b91      	ldr	r3, [pc, #580]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	08db      	lsrs	r3, r3, #3
 80077e6:	f003 0303 	and.w	r3, r3, #3
 80077ea:	4a90      	ldr	r2, [pc, #576]	; (8007a2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077ec:	fa22 f303 	lsr.w	r3, r2, r3
 80077f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80077f2:	e111      	b.n	8007a18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80077f4:	4b8d      	ldr	r3, [pc, #564]	; (8007a2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80077f6:	61bb      	str	r3, [r7, #24]
    break;
 80077f8:	e10e      	b.n	8007a18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80077fa:	4b8d      	ldr	r3, [pc, #564]	; (8007a30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80077fc:	61bb      	str	r3, [r7, #24]
    break;
 80077fe:	e10b      	b.n	8007a18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007800:	4b8c      	ldr	r3, [pc, #560]	; (8007a34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007802:	61bb      	str	r3, [r7, #24]
    break;
 8007804:	e108      	b.n	8007a18 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007806:	4b88      	ldr	r3, [pc, #544]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007810:	4b85      	ldr	r3, [pc, #532]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007814:	091b      	lsrs	r3, r3, #4
 8007816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800781a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800781c:	4b82      	ldr	r3, [pc, #520]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007826:	4b80      	ldr	r3, [pc, #512]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782a:	08db      	lsrs	r3, r3, #3
 800782c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	fb02 f303 	mul.w	r3, r2, r3
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 80e1 	beq.w	8007a0c <HAL_RCC_GetSysClockFreq+0x2b8>
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b02      	cmp	r3, #2
 800784e:	f000 8083 	beq.w	8007958 <HAL_RCC_GetSysClockFreq+0x204>
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2b02      	cmp	r3, #2
 8007856:	f200 80a1 	bhi.w	800799c <HAL_RCC_GetSysClockFreq+0x248>
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <HAL_RCC_GetSysClockFreq+0x114>
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d056      	beq.n	8007914 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007866:	e099      	b.n	800799c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007868:	4b6f      	ldr	r3, [pc, #444]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0320 	and.w	r3, r3, #32
 8007870:	2b00      	cmp	r3, #0
 8007872:	d02d      	beq.n	80078d0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007874:	4b6c      	ldr	r3, [pc, #432]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	08db      	lsrs	r3, r3, #3
 800787a:	f003 0303 	and.w	r3, r3, #3
 800787e:	4a6b      	ldr	r2, [pc, #428]	; (8007a2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007880:	fa22 f303 	lsr.w	r3, r2, r3
 8007884:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	ee07 3a90 	vmov	s15, r3
 800788c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800789a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800789e:	4b62      	ldr	r3, [pc, #392]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80078b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80078ce:	e087      	b.n	80079e0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078da:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007a3c <HAL_RCC_GetSysClockFreq+0x2e8>
 80078de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078e2:	4b51      	ldr	r3, [pc, #324]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80078f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80078fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800790a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007912:	e065      	b.n	80079e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007a40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007926:	4b40      	ldr	r3, [pc, #256]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007936:	ed97 6a02 	vldr	s12, [r7, #8]
 800793a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 800793e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800794a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800794e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007956:	e043      	b.n	80079e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	ee07 3a90 	vmov	s15, r3
 800795e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007962:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007a44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800796a:	4b2f      	ldr	r3, [pc, #188]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800796c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800797a:	ed97 6a02 	vldr	s12, [r7, #8]
 800797e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800798a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800798e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800799a:	e021      	b.n	80079e0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	ee07 3a90 	vmov	s15, r3
 80079a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007a40 <HAL_RCC_GetSysClockFreq+0x2ec>
 80079aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ae:	4b1e      	ldr	r3, [pc, #120]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079be:	ed97 6a02 	vldr	s12, [r7, #8]
 80079c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079de:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80079e0:	4b11      	ldr	r3, [pc, #68]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e4:	0a5b      	lsrs	r3, r3, #9
 80079e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ea:	3301      	adds	r3, #1
 80079ec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	ee07 3a90 	vmov	s15, r3
 80079f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80079f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80079fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a04:	ee17 3a90 	vmov	r3, s15
 8007a08:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007a0a:	e005      	b.n	8007a18 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	61bb      	str	r3, [r7, #24]
    break;
 8007a10:	e002      	b.n	8007a18 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007a12:	4b07      	ldr	r3, [pc, #28]	; (8007a30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a14:	61bb      	str	r3, [r7, #24]
    break;
 8007a16:	bf00      	nop
  }

  return sysclockfreq;
 8007a18:	69bb      	ldr	r3, [r7, #24]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3724      	adds	r7, #36	; 0x24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	58024400 	.word	0x58024400
 8007a2c:	03d09000 	.word	0x03d09000
 8007a30:	003d0900 	.word	0x003d0900
 8007a34:	007a1200 	.word	0x007a1200
 8007a38:	46000000 	.word	0x46000000
 8007a3c:	4c742400 	.word	0x4c742400
 8007a40:	4a742400 	.word	0x4a742400
 8007a44:	4af42400 	.word	0x4af42400

08007a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007a4e:	f7ff fe81 	bl	8007754 <HAL_RCC_GetSysClockFreq>
 8007a52:	4602      	mov	r2, r0
 8007a54:	4b10      	ldr	r3, [pc, #64]	; (8007a98 <HAL_RCC_GetHCLKFreq+0x50>)
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	0a1b      	lsrs	r3, r3, #8
 8007a5a:	f003 030f 	and.w	r3, r3, #15
 8007a5e:	490f      	ldr	r1, [pc, #60]	; (8007a9c <HAL_RCC_GetHCLKFreq+0x54>)
 8007a60:	5ccb      	ldrb	r3, [r1, r3]
 8007a62:	f003 031f 	and.w	r3, r3, #31
 8007a66:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007a6c:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <HAL_RCC_GetHCLKFreq+0x50>)
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	f003 030f 	and.w	r3, r3, #15
 8007a74:	4a09      	ldr	r2, [pc, #36]	; (8007a9c <HAL_RCC_GetHCLKFreq+0x54>)
 8007a76:	5cd3      	ldrb	r3, [r2, r3]
 8007a78:	f003 031f 	and.w	r3, r3, #31
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a82:	4a07      	ldr	r2, [pc, #28]	; (8007aa0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a86:	4a07      	ldr	r2, [pc, #28]	; (8007aa4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007a8c:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	58024400 	.word	0x58024400
 8007a9c:	0800bb28 	.word	0x0800bb28
 8007aa0:	24000008 	.word	0x24000008
 8007aa4:	24000004 	.word	0x24000004

08007aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007aac:	f7ff ffcc 	bl	8007a48 <HAL_RCC_GetHCLKFreq>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	4b06      	ldr	r3, [pc, #24]	; (8007acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	091b      	lsrs	r3, r3, #4
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	4904      	ldr	r1, [pc, #16]	; (8007ad0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007abe:	5ccb      	ldrb	r3, [r1, r3]
 8007ac0:	f003 031f 	and.w	r3, r3, #31
 8007ac4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	58024400 	.word	0x58024400
 8007ad0:	0800bb28 	.word	0x0800bb28

08007ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007ad8:	f7ff ffb6 	bl	8007a48 <HAL_RCC_GetHCLKFreq>
 8007adc:	4602      	mov	r2, r0
 8007ade:	4b06      	ldr	r3, [pc, #24]	; (8007af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	0a1b      	lsrs	r3, r3, #8
 8007ae4:	f003 0307 	and.w	r3, r3, #7
 8007ae8:	4904      	ldr	r1, [pc, #16]	; (8007afc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007aea:	5ccb      	ldrb	r3, [r1, r3]
 8007aec:	f003 031f 	and.w	r3, r3, #31
 8007af0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	58024400 	.word	0x58024400
 8007afc:	0800bb28 	.word	0x0800bb28

08007b00 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b08:	2300      	movs	r3, #0
 8007b0a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d03f      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b24:	d02a      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007b26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b2a:	d824      	bhi.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b30:	d018      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b36:	d81e      	bhi.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b40:	d007      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007b42:	e018      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b44:	4b9f      	ldr	r3, [pc, #636]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	4a9e      	ldr	r2, [pc, #632]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b50:	e015      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3304      	adds	r3, #4
 8007b56:	2102      	movs	r1, #2
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f001 ff1b 	bl	8009994 <RCCEx_PLL2_Config>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b62:	e00c      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	3324      	adds	r3, #36	; 0x24
 8007b68:	2102      	movs	r1, #2
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f001 ffc4 	bl	8009af8 <RCCEx_PLL3_Config>
 8007b70:	4603      	mov	r3, r0
 8007b72:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b74:	e003      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	75fb      	strb	r3, [r7, #23]
      break;
 8007b7a:	e000      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d109      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b84:	4b8f      	ldr	r3, [pc, #572]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b90:	498c      	ldr	r1, [pc, #560]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	650b      	str	r3, [r1, #80]	; 0x50
 8007b96:	e001      	b.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
 8007b9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d03d      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d826      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007bb0:	a201      	add	r2, pc, #4	; (adr r2, 8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb6:	bf00      	nop
 8007bb8:	08007bcd 	.word	0x08007bcd
 8007bbc:	08007bdb 	.word	0x08007bdb
 8007bc0:	08007bed 	.word	0x08007bed
 8007bc4:	08007c05 	.word	0x08007c05
 8007bc8:	08007c05 	.word	0x08007c05
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bcc:	4b7d      	ldr	r3, [pc, #500]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	4a7c      	ldr	r2, [pc, #496]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bd8:	e015      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	3304      	adds	r3, #4
 8007bde:	2100      	movs	r1, #0
 8007be0:	4618      	mov	r0, r3
 8007be2:	f001 fed7 	bl	8009994 <RCCEx_PLL2_Config>
 8007be6:	4603      	mov	r3, r0
 8007be8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bea:	e00c      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	3324      	adds	r3, #36	; 0x24
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f001 ff80 	bl	8009af8 <RCCEx_PLL3_Config>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007bfc:	e003      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	75fb      	strb	r3, [r7, #23]
      break;
 8007c02:	e000      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007c04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d109      	bne.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c0c:	4b6d      	ldr	r3, [pc, #436]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c10:	f023 0207 	bic.w	r2, r3, #7
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c18:	496a      	ldr	r1, [pc, #424]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	650b      	str	r3, [r1, #80]	; 0x50
 8007c1e:	e001      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c20:	7dfb      	ldrb	r3, [r7, #23]
 8007c22:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d04a      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c34:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007c38:	d031      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8007c3a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007c3e:	d82b      	bhi.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c44:	d02d      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8007c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4a:	d825      	bhi.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007c4c:	2bc0      	cmp	r3, #192	; 0xc0
 8007c4e:	d02a      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007c50:	2bc0      	cmp	r3, #192	; 0xc0
 8007c52:	d821      	bhi.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007c54:	2b80      	cmp	r3, #128	; 0x80
 8007c56:	d016      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007c58:	2b80      	cmp	r3, #128	; 0x80
 8007c5a:	d81d      	bhi.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007c60:	2b40      	cmp	r3, #64	; 0x40
 8007c62:	d007      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8007c64:	e018      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c66:	4b57      	ldr	r3, [pc, #348]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	4a56      	ldr	r2, [pc, #344]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8007c72:	e019      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3304      	adds	r3, #4
 8007c78:	2100      	movs	r1, #0
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 fe8a 	bl	8009994 <RCCEx_PLL2_Config>
 8007c80:	4603      	mov	r3, r0
 8007c82:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8007c84:	e010      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3324      	adds	r3, #36	; 0x24
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f001 ff33 	bl	8009af8 <RCCEx_PLL3_Config>
 8007c92:	4603      	mov	r3, r0
 8007c94:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8007c96:	e007      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c9c:	e004      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007c9e:	bf00      	nop
 8007ca0:	e002      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007ca2:	bf00      	nop
 8007ca4:	e000      	b.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d109      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007cae:	4b45      	ldr	r3, [pc, #276]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cba:	4942      	ldr	r1, [pc, #264]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	650b      	str	r3, [r1, #80]	; 0x50
 8007cc0:	e001      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d04f      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cd6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007cda:	d036      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8007cdc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007ce0:	d830      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ce6:	d032      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cec:	d82a      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007cee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007cf2:	d02e      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8007cf4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007cf8:	d824      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cfe:	d018      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8007d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d04:	d81e      	bhi.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8007d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d0e:	d007      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8007d10:	e018      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d12:	4b2c      	ldr	r3, [pc, #176]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d16:	4a2b      	ldr	r2, [pc, #172]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007d1e:	e019      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3304      	adds	r3, #4
 8007d24:	2100      	movs	r1, #0
 8007d26:	4618      	mov	r0, r3
 8007d28:	f001 fe34 	bl	8009994 <RCCEx_PLL2_Config>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007d30:	e010      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	3324      	adds	r3, #36	; 0x24
 8007d36:	2100      	movs	r1, #0
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 fedd 	bl	8009af8 <RCCEx_PLL3_Config>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8007d42:	e007      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	75fb      	strb	r3, [r7, #23]
      break;
 8007d48:	e004      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007d4a:	bf00      	nop
 8007d4c:	e002      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007d4e:	bf00      	nop
 8007d50:	e000      	b.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007d52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d109      	bne.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007d5a:	4b1a      	ldr	r3, [pc, #104]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d5e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d66:	4917      	ldr	r1, [pc, #92]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	650b      	str	r3, [r1, #80]	; 0x50
 8007d6c:	e001      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d034      	beq.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d82:	2b30      	cmp	r3, #48	; 0x30
 8007d84:	d01c      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8007d86:	2b30      	cmp	r3, #48	; 0x30
 8007d88:	d817      	bhi.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007d8a:	2b20      	cmp	r3, #32
 8007d8c:	d00c      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d8e:	2b20      	cmp	r3, #32
 8007d90:	d813      	bhi.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d018      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8007d96:	2b10      	cmp	r3, #16
 8007d98:	d10f      	bne.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d9a:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9e:	4a09      	ldr	r2, [pc, #36]	; (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007da4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007da6:	e010      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3304      	adds	r3, #4
 8007dac:	2102      	movs	r1, #2
 8007dae:	4618      	mov	r0, r3
 8007db0:	f001 fdf0 	bl	8009994 <RCCEx_PLL2_Config>
 8007db4:	4603      	mov	r3, r0
 8007db6:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007db8:	e007      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8007dbe:	e004      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8007dc0:	bf00      	nop
 8007dc2:	e002      	b.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007dc4:	58024400 	.word	0x58024400
      break;
 8007dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d109      	bne.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007dd0:	4b9b      	ldr	r3, [pc, #620]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ddc:	4998      	ldr	r1, [pc, #608]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007de2:	e001      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
 8007de6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d047      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dfc:	d030      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e02:	d82a      	bhi.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007e04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e08:	d02c      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8007e0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e0e:	d824      	bhi.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e14:	d018      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e1a:	d81e      	bhi.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e24:	d007      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007e26:	e018      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e28:	4b85      	ldr	r3, [pc, #532]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	4a84      	ldr	r2, [pc, #528]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e34:	e017      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f001 fda9 	bl	8009994 <RCCEx_PLL2_Config>
 8007e42:	4603      	mov	r3, r0
 8007e44:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e46:	e00e      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3324      	adds	r3, #36	; 0x24
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f001 fe52 	bl	8009af8 <RCCEx_PLL3_Config>
 8007e54:	4603      	mov	r3, r0
 8007e56:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e58:	e005      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e5e:	e002      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8007e60:	bf00      	nop
 8007e62:	e000      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8007e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d109      	bne.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007e6c:	4b74      	ldr	r3, [pc, #464]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e70:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e78:	4971      	ldr	r1, [pc, #452]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	650b      	str	r3, [r1, #80]	; 0x50
 8007e7e:	e001      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e80:	7dfb      	ldrb	r3, [r7, #23]
 8007e82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d049      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e98:	d02e      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007e9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e9e:	d828      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007ea0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ea4:	d02a      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8007ea6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007eaa:	d822      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007eac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007eb0:	d026      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8007eb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007eb6:	d81c      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007eb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ebc:	d010      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ec2:	d816      	bhi.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01d      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ecc:	d111      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f001 fd5d 	bl	8009994 <RCCEx_PLL2_Config>
 8007eda:	4603      	mov	r3, r0
 8007edc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007ede:	e012      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3324      	adds	r3, #36	; 0x24
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f001 fe06 	bl	8009af8 <RCCEx_PLL3_Config>
 8007eec:	4603      	mov	r3, r0
 8007eee:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007ef0:	e009      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef6:	e006      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007ef8:	bf00      	nop
 8007efa:	e004      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007efc:	bf00      	nop
 8007efe:	e002      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007f00:	bf00      	nop
 8007f02:	e000      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8007f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f06:	7dfb      	ldrb	r3, [r7, #23]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d109      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f0c:	4b4c      	ldr	r3, [pc, #304]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f10:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f18:	4949      	ldr	r1, [pc, #292]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	650b      	str	r3, [r1, #80]	; 0x50
 8007f1e:	e001      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d053      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f36:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007f3a:	d034      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007f3c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007f40:	d82e      	bhi.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f46:	d030      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8007f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f4c:	d828      	bhi.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f52:	d02c      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f58:	d822      	bhi.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007f5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f5e:	d028      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007f60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f64:	d81c      	bhi.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007f66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f6a:	d010      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8007f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f70:	d816      	bhi.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d01f      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f7a:	d111      	bne.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	2101      	movs	r1, #1
 8007f82:	4618      	mov	r0, r3
 8007f84:	f001 fd06 	bl	8009994 <RCCEx_PLL2_Config>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007f8c:	e014      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	3324      	adds	r3, #36	; 0x24
 8007f92:	2101      	movs	r1, #1
 8007f94:	4618      	mov	r0, r3
 8007f96:	f001 fdaf 	bl	8009af8 <RCCEx_PLL3_Config>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007f9e:	e00b      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa4:	e008      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007fa6:	bf00      	nop
 8007fa8:	e006      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007faa:	bf00      	nop
 8007fac:	e004      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007fae:	bf00      	nop
 8007fb0:	e002      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007fb2:	bf00      	nop
 8007fb4:	e000      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fb8:	7dfb      	ldrb	r3, [r7, #23]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10a      	bne.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007fbe:	4b20      	ldr	r3, [pc, #128]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007fcc:	491c      	ldr	r1, [pc, #112]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	658b      	str	r3, [r1, #88]	; 0x58
 8007fd2:	e001      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
 8007fd6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d031      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fec:	d00e      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ff2:	d814      	bhi.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d015      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007ff8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ffc:	d10f      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ffe:	4b10      	ldr	r3, [pc, #64]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008002:	4a0f      	ldr	r2, [pc, #60]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008008:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800800a:	e00c      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3304      	adds	r3, #4
 8008010:	2101      	movs	r1, #1
 8008012:	4618      	mov	r0, r3
 8008014:	f001 fcbe 	bl	8009994 <RCCEx_PLL2_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800801c:	e003      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	75fb      	strb	r3, [r7, #23]
      break;
 8008022:	e000      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8008024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10b      	bne.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800802c:	4b04      	ldr	r3, [pc, #16]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800802e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008030:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008038:	4901      	ldr	r1, [pc, #4]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800803a:	4313      	orrs	r3, r2
 800803c:	650b      	str	r3, [r1, #80]	; 0x50
 800803e:	e003      	b.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8008040:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008044:	7dfb      	ldrb	r3, [r7, #23]
 8008046:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d032      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008058:	2b03      	cmp	r3, #3
 800805a:	d81b      	bhi.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800805c:	a201      	add	r2, pc, #4	; (adr r2, 8008064 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800805e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008062:	bf00      	nop
 8008064:	0800809b 	.word	0x0800809b
 8008068:	08008075 	.word	0x08008075
 800806c:	08008083 	.word	0x08008083
 8008070:	0800809b 	.word	0x0800809b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008074:	4bb2      	ldr	r3, [pc, #712]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	4ab1      	ldr	r2, [pc, #708]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800807a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800807e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008080:	e00c      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3304      	adds	r3, #4
 8008086:	2102      	movs	r1, #2
 8008088:	4618      	mov	r0, r3
 800808a:	f001 fc83 	bl	8009994 <RCCEx_PLL2_Config>
 800808e:	4603      	mov	r3, r0
 8008090:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008092:	e003      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	75fb      	strb	r3, [r7, #23]
      break;
 8008098:	e000      	b.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800809a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800809c:	7dfb      	ldrb	r3, [r7, #23]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d109      	bne.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80080a2:	4ba7      	ldr	r3, [pc, #668]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a6:	f023 0203 	bic.w	r2, r3, #3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ae:	49a4      	ldr	r1, [pc, #656]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080b4:	e001      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 8086 	beq.w	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080c8:	4b9e      	ldr	r3, [pc, #632]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a9d      	ldr	r2, [pc, #628]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80080ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080d4:	f7fa fc40 	bl	8002958 <HAL_GetTick>
 80080d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080da:	e009      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080dc:	f7fa fc3c 	bl	8002958 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b64      	cmp	r3, #100	; 0x64
 80080e8:	d902      	bls.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	75fb      	strb	r3, [r7, #23]
        break;
 80080ee:	e005      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080f0:	4b94      	ldr	r3, [pc, #592]	; (8008344 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d0ef      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80080fc:	7dfb      	ldrb	r3, [r7, #23]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d166      	bne.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008102:	4b8f      	ldr	r3, [pc, #572]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008104:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800810c:	4053      	eors	r3, r2
 800810e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008112:	2b00      	cmp	r3, #0
 8008114:	d013      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008116:	4b8a      	ldr	r3, [pc, #552]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800811e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008120:	4b87      	ldr	r3, [pc, #540]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008124:	4a86      	ldr	r2, [pc, #536]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800812a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800812c:	4b84      	ldr	r3, [pc, #528]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800812e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008130:	4a83      	ldr	r2, [pc, #524]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008136:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008138:	4a81      	ldr	r2, [pc, #516]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008148:	d115      	bne.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800814a:	f7fa fc05 	bl	8002958 <HAL_GetTick>
 800814e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008150:	e00b      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008152:	f7fa fc01 	bl	8002958 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008160:	4293      	cmp	r3, r2
 8008162:	d902      	bls.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	75fb      	strb	r3, [r7, #23]
            break;
 8008168:	e005      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800816a:	4b75      	ldr	r3, [pc, #468]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800816c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0ed      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d126      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008186:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800818a:	d10d      	bne.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 800818c:	4b6c      	ldr	r3, [pc, #432]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800819a:	0919      	lsrs	r1, r3, #4
 800819c:	4b6a      	ldr	r3, [pc, #424]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800819e:	400b      	ands	r3, r1
 80081a0:	4967      	ldr	r1, [pc, #412]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80081a2:	4313      	orrs	r3, r2
 80081a4:	610b      	str	r3, [r1, #16]
 80081a6:	e005      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80081a8:	4b65      	ldr	r3, [pc, #404]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	4a64      	ldr	r2, [pc, #400]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80081ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80081b2:	6113      	str	r3, [r2, #16]
 80081b4:	4b62      	ldr	r3, [pc, #392]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80081b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081c2:	495f      	ldr	r1, [pc, #380]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	670b      	str	r3, [r1, #112]	; 0x70
 80081c8:	e004      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	75bb      	strb	r3, [r7, #22]
 80081ce:	e001      	b.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d0:	7dfb      	ldrb	r3, [r7, #23]
 80081d2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d07f      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081e6:	2b28      	cmp	r3, #40	; 0x28
 80081e8:	d866      	bhi.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80081ea:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80081ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f0:	080082bf 	.word	0x080082bf
 80081f4:	080082b9 	.word	0x080082b9
 80081f8:	080082b9 	.word	0x080082b9
 80081fc:	080082b9 	.word	0x080082b9
 8008200:	080082b9 	.word	0x080082b9
 8008204:	080082b9 	.word	0x080082b9
 8008208:	080082b9 	.word	0x080082b9
 800820c:	080082b9 	.word	0x080082b9
 8008210:	08008295 	.word	0x08008295
 8008214:	080082b9 	.word	0x080082b9
 8008218:	080082b9 	.word	0x080082b9
 800821c:	080082b9 	.word	0x080082b9
 8008220:	080082b9 	.word	0x080082b9
 8008224:	080082b9 	.word	0x080082b9
 8008228:	080082b9 	.word	0x080082b9
 800822c:	080082b9 	.word	0x080082b9
 8008230:	080082a7 	.word	0x080082a7
 8008234:	080082b9 	.word	0x080082b9
 8008238:	080082b9 	.word	0x080082b9
 800823c:	080082b9 	.word	0x080082b9
 8008240:	080082b9 	.word	0x080082b9
 8008244:	080082b9 	.word	0x080082b9
 8008248:	080082b9 	.word	0x080082b9
 800824c:	080082b9 	.word	0x080082b9
 8008250:	080082bf 	.word	0x080082bf
 8008254:	080082b9 	.word	0x080082b9
 8008258:	080082b9 	.word	0x080082b9
 800825c:	080082b9 	.word	0x080082b9
 8008260:	080082b9 	.word	0x080082b9
 8008264:	080082b9 	.word	0x080082b9
 8008268:	080082b9 	.word	0x080082b9
 800826c:	080082b9 	.word	0x080082b9
 8008270:	080082bf 	.word	0x080082bf
 8008274:	080082b9 	.word	0x080082b9
 8008278:	080082b9 	.word	0x080082b9
 800827c:	080082b9 	.word	0x080082b9
 8008280:	080082b9 	.word	0x080082b9
 8008284:	080082b9 	.word	0x080082b9
 8008288:	080082b9 	.word	0x080082b9
 800828c:	080082b9 	.word	0x080082b9
 8008290:	080082bf 	.word	0x080082bf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3304      	adds	r3, #4
 8008298:	2101      	movs	r1, #1
 800829a:	4618      	mov	r0, r3
 800829c:	f001 fb7a 	bl	8009994 <RCCEx_PLL2_Config>
 80082a0:	4603      	mov	r3, r0
 80082a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80082a4:	e00c      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3324      	adds	r3, #36	; 0x24
 80082aa:	2101      	movs	r1, #1
 80082ac:	4618      	mov	r0, r3
 80082ae:	f001 fc23 	bl	8009af8 <RCCEx_PLL3_Config>
 80082b2:	4603      	mov	r3, r0
 80082b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80082b6:	e003      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	75fb      	strb	r3, [r7, #23]
      break;
 80082bc:	e000      	b.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80082be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10a      	bne.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80082c6:	4b1e      	ldr	r3, [pc, #120]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80082c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082d4:	491a      	ldr	r1, [pc, #104]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	654b      	str	r3, [r1, #84]	; 0x54
 80082da:	e001      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0302 	and.w	r3, r3, #2
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d03f      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082f0:	2b05      	cmp	r3, #5
 80082f2:	d821      	bhi.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80082f4:	a201      	add	r2, pc, #4	; (adr r2, 80082fc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80082f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fa:	bf00      	nop
 80082fc:	0800834d 	.word	0x0800834d
 8008300:	08008315 	.word	0x08008315
 8008304:	08008327 	.word	0x08008327
 8008308:	0800834d 	.word	0x0800834d
 800830c:	0800834d 	.word	0x0800834d
 8008310:	0800834d 	.word	0x0800834d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	3304      	adds	r3, #4
 8008318:	2101      	movs	r1, #1
 800831a:	4618      	mov	r0, r3
 800831c:	f001 fb3a 	bl	8009994 <RCCEx_PLL2_Config>
 8008320:	4603      	mov	r3, r0
 8008322:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008324:	e013      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	3324      	adds	r3, #36	; 0x24
 800832a:	2101      	movs	r1, #1
 800832c:	4618      	mov	r0, r3
 800832e:	f001 fbe3 	bl	8009af8 <RCCEx_PLL3_Config>
 8008332:	4603      	mov	r3, r0
 8008334:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008336:	e00a      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	75fb      	strb	r3, [r7, #23]
      break;
 800833c:	e007      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800833e:	bf00      	nop
 8008340:	58024400 	.word	0x58024400
 8008344:	58024800 	.word	0x58024800
 8008348:	00ffffcf 	.word	0x00ffffcf
      break;
 800834c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d109      	bne.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008354:	4b9f      	ldr	r3, [pc, #636]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008358:	f023 0207 	bic.w	r2, r3, #7
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008360:	499c      	ldr	r1, [pc, #624]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008362:	4313      	orrs	r3, r2
 8008364:	654b      	str	r3, [r1, #84]	; 0x54
 8008366:	e001      	b.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0304 	and.w	r3, r3, #4
 8008374:	2b00      	cmp	r3, #0
 8008376:	d039      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800837e:	2b05      	cmp	r3, #5
 8008380:	d820      	bhi.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8008382:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8008384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008388:	080083cb 	.word	0x080083cb
 800838c:	080083a1 	.word	0x080083a1
 8008390:	080083b3 	.word	0x080083b3
 8008394:	080083cb 	.word	0x080083cb
 8008398:	080083cb 	.word	0x080083cb
 800839c:	080083cb 	.word	0x080083cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	3304      	adds	r3, #4
 80083a4:	2101      	movs	r1, #1
 80083a6:	4618      	mov	r0, r3
 80083a8:	f001 faf4 	bl	8009994 <RCCEx_PLL2_Config>
 80083ac:	4603      	mov	r3, r0
 80083ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80083b0:	e00c      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3324      	adds	r3, #36	; 0x24
 80083b6:	2101      	movs	r1, #1
 80083b8:	4618      	mov	r0, r3
 80083ba:	f001 fb9d 	bl	8009af8 <RCCEx_PLL3_Config>
 80083be:	4603      	mov	r3, r0
 80083c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80083c2:	e003      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	75fb      	strb	r3, [r7, #23]
      break;
 80083c8:	e000      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80083ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10a      	bne.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083d2:	4b80      	ldr	r3, [pc, #512]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80083d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d6:	f023 0207 	bic.w	r2, r3, #7
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083e0:	497c      	ldr	r1, [pc, #496]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	658b      	str	r3, [r1, #88]	; 0x58
 80083e6:	e001      	b.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
 80083ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d04b      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008402:	d02e      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8008404:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008408:	d828      	bhi.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800840a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800840e:	d02a      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8008410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008414:	d822      	bhi.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008416:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800841a:	d026      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800841c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008420:	d81c      	bhi.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008426:	d010      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8008428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800842c:	d816      	bhi.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800842e:	2b00      	cmp	r3, #0
 8008430:	d01d      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8008432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008436:	d111      	bne.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3304      	adds	r3, #4
 800843c:	2100      	movs	r1, #0
 800843e:	4618      	mov	r0, r3
 8008440:	f001 faa8 	bl	8009994 <RCCEx_PLL2_Config>
 8008444:	4603      	mov	r3, r0
 8008446:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008448:	e012      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3324      	adds	r3, #36	; 0x24
 800844e:	2102      	movs	r1, #2
 8008450:	4618      	mov	r0, r3
 8008452:	f001 fb51 	bl	8009af8 <RCCEx_PLL3_Config>
 8008456:	4603      	mov	r3, r0
 8008458:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800845a:	e009      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	75fb      	strb	r3, [r7, #23]
      break;
 8008460:	e006      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008462:	bf00      	nop
 8008464:	e004      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008466:	bf00      	nop
 8008468:	e002      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800846a:	bf00      	nop
 800846c:	e000      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800846e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10a      	bne.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008476:	4b57      	ldr	r3, [pc, #348]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008484:	4953      	ldr	r1, [pc, #332]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008486:	4313      	orrs	r3, r2
 8008488:	654b      	str	r3, [r1, #84]	; 0x54
 800848a:	e001      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800848c:	7dfb      	ldrb	r3, [r7, #23]
 800848e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008498:	2b00      	cmp	r3, #0
 800849a:	d04b      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80084a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80084a6:	d02e      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80084a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80084ac:	d828      	bhi.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80084ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b2:	d02a      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80084b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b8:	d822      	bhi.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80084ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084be:	d026      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80084c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084c4:	d81c      	bhi.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80084c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ca:	d010      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80084cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084d0:	d816      	bhi.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d01d      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80084d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084da:	d111      	bne.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	3304      	adds	r3, #4
 80084e0:	2100      	movs	r1, #0
 80084e2:	4618      	mov	r0, r3
 80084e4:	f001 fa56 	bl	8009994 <RCCEx_PLL2_Config>
 80084e8:	4603      	mov	r3, r0
 80084ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80084ec:	e012      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	3324      	adds	r3, #36	; 0x24
 80084f2:	2102      	movs	r1, #2
 80084f4:	4618      	mov	r0, r3
 80084f6:	f001 faff 	bl	8009af8 <RCCEx_PLL3_Config>
 80084fa:	4603      	mov	r3, r0
 80084fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80084fe:	e009      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	75fb      	strb	r3, [r7, #23]
      break;
 8008504:	e006      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008506:	bf00      	nop
 8008508:	e004      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800850a:	bf00      	nop
 800850c:	e002      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800850e:	bf00      	nop
 8008510:	e000      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008514:	7dfb      	ldrb	r3, [r7, #23]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10a      	bne.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800851a:	4b2e      	ldr	r3, [pc, #184]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800851c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800851e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008528:	492a      	ldr	r1, [pc, #168]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800852a:	4313      	orrs	r3, r2
 800852c:	658b      	str	r3, [r1, #88]	; 0x58
 800852e:	e001      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008530:	7dfb      	ldrb	r3, [r7, #23]
 8008532:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800853c:	2b00      	cmp	r3, #0
 800853e:	d04d      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008546:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800854a:	d02e      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800854c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008550:	d828      	bhi.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008556:	d02a      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800855c:	d822      	bhi.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800855e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008562:	d026      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008564:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008568:	d81c      	bhi.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800856a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800856e:	d010      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8008570:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008574:	d816      	bhi.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008576:	2b00      	cmp	r3, #0
 8008578:	d01d      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800857a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800857e:	d111      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3304      	adds	r3, #4
 8008584:	2100      	movs	r1, #0
 8008586:	4618      	mov	r0, r3
 8008588:	f001 fa04 	bl	8009994 <RCCEx_PLL2_Config>
 800858c:	4603      	mov	r3, r0
 800858e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008590:	e012      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	3324      	adds	r3, #36	; 0x24
 8008596:	2102      	movs	r1, #2
 8008598:	4618      	mov	r0, r3
 800859a:	f001 faad 	bl	8009af8 <RCCEx_PLL3_Config>
 800859e:	4603      	mov	r3, r0
 80085a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80085a2:	e009      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	75fb      	strb	r3, [r7, #23]
      break;
 80085a8:	e006      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80085aa:	bf00      	nop
 80085ac:	e004      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80085ae:	bf00      	nop
 80085b0:	e002      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80085b2:	bf00      	nop
 80085b4:	e000      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80085b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10c      	bne.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80085be:	4b05      	ldr	r3, [pc, #20]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80085c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80085cc:	4901      	ldr	r1, [pc, #4]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	658b      	str	r3, [r1, #88]	; 0x58
 80085d2:	e003      	b.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80085d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
 80085da:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0308 	and.w	r3, r3, #8
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d01a      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f2:	d10a      	bne.n	800860a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3324      	adds	r3, #36	; 0x24
 80085f8:	2102      	movs	r1, #2
 80085fa:	4618      	mov	r0, r3
 80085fc:	f001 fa7c 	bl	8009af8 <RCCEx_PLL3_Config>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800860a:	4b8c      	ldr	r3, [pc, #560]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800860c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008618:	4988      	ldr	r1, [pc, #544]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800861a:	4313      	orrs	r3, r2
 800861c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0310 	and.w	r3, r3, #16
 8008626:	2b00      	cmp	r3, #0
 8008628:	d01a      	beq.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008634:	d10a      	bne.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	3324      	adds	r3, #36	; 0x24
 800863a:	2102      	movs	r1, #2
 800863c:	4618      	mov	r0, r3
 800863e:	f001 fa5b 	bl	8009af8 <RCCEx_PLL3_Config>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800864c:	4b7b      	ldr	r3, [pc, #492]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800864e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800865a:	4978      	ldr	r1, [pc, #480]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800865c:	4313      	orrs	r3, r2
 800865e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d034      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008676:	d01d      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8008678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800867c:	d817      	bhi.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8008682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008686:	d009      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008688:	e011      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	3304      	adds	r3, #4
 800868e:	2100      	movs	r1, #0
 8008690:	4618      	mov	r0, r3
 8008692:	f001 f97f 	bl	8009994 <RCCEx_PLL2_Config>
 8008696:	4603      	mov	r3, r0
 8008698:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800869a:	e00c      	b.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	3324      	adds	r3, #36	; 0x24
 80086a0:	2102      	movs	r1, #2
 80086a2:	4618      	mov	r0, r3
 80086a4:	f001 fa28 	bl	8009af8 <RCCEx_PLL3_Config>
 80086a8:	4603      	mov	r3, r0
 80086aa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80086ac:	e003      	b.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	75fb      	strb	r3, [r7, #23]
      break;
 80086b2:	e000      	b.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80086b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d10a      	bne.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80086bc:	4b5f      	ldr	r3, [pc, #380]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80086be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80086ca:	495c      	ldr	r1, [pc, #368]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	658b      	str	r3, [r1, #88]	; 0x58
 80086d0:	e001      	b.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d033      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086ec:	d01c      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80086ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086f2:	d816      	bhi.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80086f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086f8:	d003      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80086fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086fe:	d007      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008700:	e00f      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008702:	4b4e      	ldr	r3, [pc, #312]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008706:	4a4d      	ldr	r2, [pc, #308]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800870c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800870e:	e00c      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	3324      	adds	r3, #36	; 0x24
 8008714:	2101      	movs	r1, #1
 8008716:	4618      	mov	r0, r3
 8008718:	f001 f9ee 	bl	8009af8 <RCCEx_PLL3_Config>
 800871c:	4603      	mov	r3, r0
 800871e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008720:	e003      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	75fb      	strb	r3, [r7, #23]
      break;
 8008726:	e000      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10a      	bne.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008730:	4b42      	ldr	r3, [pc, #264]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008734:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800873e:	493f      	ldr	r1, [pc, #252]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008740:	4313      	orrs	r3, r2
 8008742:	654b      	str	r3, [r1, #84]	; 0x54
 8008744:	e001      	b.n	800874a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d029      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 800875e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008762:	d007      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008764:	e00f      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008766:	4b35      	ldr	r3, [pc, #212]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876a:	4a34      	ldr	r2, [pc, #208]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800876c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008772:	e00b      	b.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3304      	adds	r3, #4
 8008778:	2102      	movs	r1, #2
 800877a:	4618      	mov	r0, r3
 800877c:	f001 f90a 	bl	8009994 <RCCEx_PLL2_Config>
 8008780:	4603      	mov	r3, r0
 8008782:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008784:	e002      	b.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	75fb      	strb	r3, [r7, #23]
      break;
 800878a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d109      	bne.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008792:	4b2a      	ldr	r3, [pc, #168]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008796:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800879e:	4927      	ldr	r1, [pc, #156]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80087a4:	e001      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
 80087a8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	3324      	adds	r3, #36	; 0x24
 80087ba:	2102      	movs	r1, #2
 80087bc:	4618      	mov	r0, r3
 80087be:	f001 f99b 	bl	8009af8 <RCCEx_PLL3_Config>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d035      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087e2:	d017      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80087e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087e8:	d811      	bhi.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80087ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ee:	d013      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80087f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087f4:	d80b      	bhi.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d010      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80087fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087fe:	d106      	bne.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008800:	4b0e      	ldr	r3, [pc, #56]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008804:	4a0d      	ldr	r2, [pc, #52]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800880a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800880c:	e007      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	75fb      	strb	r3, [r7, #23]
      break;
 8008812:	e004      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008814:	bf00      	nop
 8008816:	e002      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008818:	bf00      	nop
 800881a:	e000      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800881c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10d      	bne.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008824:	4b05      	ldr	r3, [pc, #20]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008832:	4902      	ldr	r1, [pc, #8]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8008834:	4313      	orrs	r3, r2
 8008836:	654b      	str	r3, [r1, #84]	; 0x54
 8008838:	e004      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800883a:	bf00      	nop
 800883c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d008      	beq.n	8008862 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008850:	4b30      	ldr	r3, [pc, #192]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008854:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800885c:	492d      	ldr	r1, [pc, #180]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800885e:	4313      	orrs	r3, r2
 8008860:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d008      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800886e:	4b29      	ldr	r3, [pc, #164]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8008870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008872:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800887a:	4926      	ldr	r1, [pc, #152]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800887c:	4313      	orrs	r3, r2
 800887e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008888:	2b00      	cmp	r3, #0
 800888a:	d008      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800888c:	4b21      	ldr	r3, [pc, #132]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800888e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008890:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008898:	491e      	ldr	r1, [pc, #120]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800889a:	4313      	orrs	r3, r2
 800889c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00d      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80088aa:	4b1a      	ldr	r3, [pc, #104]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	4a19      	ldr	r2, [pc, #100]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80088b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088b4:	6113      	str	r3, [r2, #16]
 80088b6:	4b17      	ldr	r3, [pc, #92]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80088b8:	691a      	ldr	r2, [r3, #16]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80088c0:	4914      	ldr	r1, [pc, #80]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	da08      	bge.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80088ce:	4b11      	ldr	r3, [pc, #68]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80088d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088da:	490e      	ldr	r1, [pc, #56]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d009      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80088ec:	4b09      	ldr	r3, [pc, #36]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80088ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088fa:	4906      	ldr	r1, [pc, #24]	; (8008914 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008900:	7dbb      	ldrb	r3, [r7, #22]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	e000      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
}
 800890c:	4618      	mov	r0, r3
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	58024400 	.word	0x58024400

08008918 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b090      	sub	sp, #64	; 0x40
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008926:	f040 8089 	bne.w	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800892a:	4b91      	ldr	r3, [pc, #580]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800892c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800892e:	f003 0307 	and.w	r3, r3, #7
 8008932:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008936:	2b04      	cmp	r3, #4
 8008938:	d87d      	bhi.n	8008a36 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800893a:	a201      	add	r2, pc, #4	; (adr r2, 8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800893c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008940:	08008955 	.word	0x08008955
 8008944:	08008979 	.word	0x08008979
 8008948:	0800899d 	.word	0x0800899d
 800894c:	08008a31 	.word	0x08008a31
 8008950:	080089c1 	.word	0x080089c1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008954:	4b86      	ldr	r3, [pc, #536]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800895c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008960:	d107      	bne.n	8008972 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fec2 	bl	80096f0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008970:	e3f4      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008976:	e3f1      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008978:	4b7d      	ldr	r3, [pc, #500]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008980:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008984:	d107      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008986:	f107 0318 	add.w	r3, r7, #24
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fc08 	bl	80091a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008994:	e3e2      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008996:	2300      	movs	r3, #0
 8008998:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800899a:	e3df      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800899c:	4b74      	ldr	r3, [pc, #464]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089a8:	d107      	bne.n	80089ba <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089aa:	f107 030c 	add.w	r3, r7, #12
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 fd4a 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089b8:	e3d0      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089be:	e3cd      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80089c0:	4b6b      	ldr	r3, [pc, #428]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80089c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089c8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089ca:	4b69      	ldr	r3, [pc, #420]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0304 	and.w	r3, r3, #4
 80089d2:	2b04      	cmp	r3, #4
 80089d4:	d10c      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80089d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d109      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089dc:	4b64      	ldr	r3, [pc, #400]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	08db      	lsrs	r3, r3, #3
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	4a63      	ldr	r2, [pc, #396]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80089e8:	fa22 f303 	lsr.w	r3, r2, r3
 80089ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089ee:	e01e      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089f0:	4b5f      	ldr	r3, [pc, #380]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089fc:	d106      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80089fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a04:	d102      	bne.n	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a06:	4b5c      	ldr	r3, [pc, #368]	; (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a0a:	e010      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a0c:	4b58      	ldr	r3, [pc, #352]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a18:	d106      	bne.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a20:	d102      	bne.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a22:	4b56      	ldr	r3, [pc, #344]	; (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a26:	e002      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a2c:	e396      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008a2e:	e395      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008a30:	4b53      	ldr	r3, [pc, #332]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008a32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a34:	e392      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8008a36:	2300      	movs	r3, #0
 8008a38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a3a:	e38f      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a42:	f040 809f 	bne.w	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8008a46:	4b4a      	ldr	r3, [pc, #296]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a4a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008a4e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a56:	d04d      	beq.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a5e:	f200 8084 	bhi.w	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	2bc0      	cmp	r3, #192	; 0xc0
 8008a66:	d07d      	beq.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8008a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8008a6c:	d87d      	bhi.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a70:	2b80      	cmp	r3, #128	; 0x80
 8008a72:	d02d      	beq.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a76:	2b80      	cmp	r3, #128	; 0x80
 8008a78:	d877      	bhi.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d003      	beq.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	2b40      	cmp	r3, #64	; 0x40
 8008a84:	d012      	beq.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8008a86:	e070      	b.n	8008b6a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a88:	4b39      	ldr	r3, [pc, #228]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a94:	d107      	bne.n	8008aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fe28 	bl	80096f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008aa4:	e35a      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aaa:	e357      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008aac:	4b30      	ldr	r3, [pc, #192]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ab4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ab8:	d107      	bne.n	8008aca <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aba:	f107 0318 	add.w	r3, r7, #24
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fb6e 	bl	80091a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ac8:	e348      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ace:	e345      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ad0:	4b27      	ldr	r3, [pc, #156]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008adc:	d107      	bne.n	8008aee <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ade:	f107 030c 	add.w	r3, r7, #12
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 fcb0 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008aec:	e336      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008aee:	2300      	movs	r3, #0
 8008af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008af2:	e333      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008af4:	4b1e      	ldr	r3, [pc, #120]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008af8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008afc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008afe:	4b1c      	ldr	r3, [pc, #112]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0304 	and.w	r3, r3, #4
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d10c      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8008b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d109      	bne.n	8008b24 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b10:	4b17      	ldr	r3, [pc, #92]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	08db      	lsrs	r3, r3, #3
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	4a16      	ldr	r2, [pc, #88]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b22:	e01e      	b.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b24:	4b12      	ldr	r3, [pc, #72]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b30:	d106      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8008b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b38:	d102      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008b3a:	4b0f      	ldr	r3, [pc, #60]	; (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b3e:	e010      	b.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b40:	4b0b      	ldr	r3, [pc, #44]	; (8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b4c:	d106      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b54:	d102      	bne.n	8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008b56:	4b09      	ldr	r3, [pc, #36]	; (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b5a:	e002      	b.n	8008b62 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008b60:	e2fc      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008b62:	e2fb      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008b64:	4b06      	ldr	r3, [pc, #24]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b68:	e2f8      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b6e:	e2f5      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008b70:	58024400 	.word	0x58024400
 8008b74:	03d09000 	.word	0x03d09000
 8008b78:	003d0900 	.word	0x003d0900
 8008b7c:	007a1200 	.word	0x007a1200
 8008b80:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b8a:	f040 809c 	bne.w	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8008b8e:	4b9d      	ldr	r3, [pc, #628]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b92:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008b96:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b9e:	d054      	beq.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ba6:	f200 808b 	bhi.w	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008bb0:	f000 8083 	beq.w	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008bba:	f200 8081 	bhi.w	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bc4:	d02f      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bcc:	d878      	bhi.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d004      	beq.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bda:	d012      	beq.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8008bdc:	e070      	b.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bde:	4b89      	ldr	r3, [pc, #548]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008be6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bea:	d107      	bne.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fd7d 	bl	80096f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bfa:	e2af      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c00:	e2ac      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c02:	4b80      	ldr	r3, [pc, #512]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c0e:	d107      	bne.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c10:	f107 0318 	add.w	r3, r7, #24
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 fac3 	bl	80091a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c1e:	e29d      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008c20:	2300      	movs	r3, #0
 8008c22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c24:	e29a      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c26:	4b77      	ldr	r3, [pc, #476]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c32:	d107      	bne.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c34:	f107 030c 	add.w	r3, r7, #12
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 fc05 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c42:	e28b      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008c44:	2300      	movs	r3, #0
 8008c46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c48:	e288      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008c4a:	4b6e      	ldr	r3, [pc, #440]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c52:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c54:	4b6b      	ldr	r3, [pc, #428]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0304 	and.w	r3, r3, #4
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	d10c      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8008c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d109      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c66:	4b67      	ldr	r3, [pc, #412]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	08db      	lsrs	r3, r3, #3
 8008c6c:	f003 0303 	and.w	r3, r3, #3
 8008c70:	4a65      	ldr	r2, [pc, #404]	; (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8008c72:	fa22 f303 	lsr.w	r3, r2, r3
 8008c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c78:	e01e      	b.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c7a:	4b62      	ldr	r3, [pc, #392]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c86:	d106      	bne.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8008c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c8e:	d102      	bne.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008c90:	4b5e      	ldr	r3, [pc, #376]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c94:	e010      	b.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c96:	4b5b      	ldr	r3, [pc, #364]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ca2:	d106      	bne.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8008ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008caa:	d102      	bne.n	8008cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008cac:	4b58      	ldr	r3, [pc, #352]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8008cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cb0:	e002      	b.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8008cb6:	e251      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008cb8:	e250      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008cba:	4b56      	ldr	r3, [pc, #344]	; (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cbe:	e24d      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc4:	e24a      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ccc:	f040 80a7 	bne.w	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008cd0:	4b4c      	ldr	r3, [pc, #304]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cd4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008cd8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ce0:	d055      	beq.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ce8:	f200 8096 	bhi.w	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cf2:	f000 8084 	beq.w	8008dfe <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cfc:	f200 808c 	bhi.w	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d06:	d030      	beq.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d0e:	f200 8083 	bhi.w	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8008d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d004      	beq.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8008d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d1e:	d012      	beq.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8008d20:	e07a      	b.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d22:	4b38      	ldr	r3, [pc, #224]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d2e:	d107      	bne.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 fcdb 	bl	80096f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d3e:	e20d      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d44:	e20a      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d46:	4b2f      	ldr	r3, [pc, #188]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d52:	d107      	bne.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d54:	f107 0318 	add.w	r3, r7, #24
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 fa21 	bl	80091a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d62:	e1fb      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d68:	e1f8      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d6a:	4b26      	ldr	r3, [pc, #152]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d76:	d107      	bne.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d78:	f107 030c 	add.w	r3, r7, #12
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 fb63 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d86:	e1e9      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d8c:	e1e6      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d8e:	4b1d      	ldr	r3, [pc, #116]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d96:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d98:	4b1a      	ldr	r3, [pc, #104]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0304 	and.w	r3, r3, #4
 8008da0:	2b04      	cmp	r3, #4
 8008da2:	d10c      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8008da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d109      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008daa:	4b16      	ldr	r3, [pc, #88]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	08db      	lsrs	r3, r3, #3
 8008db0:	f003 0303 	and.w	r3, r3, #3
 8008db4:	4a14      	ldr	r2, [pc, #80]	; (8008e08 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8008db6:	fa22 f303 	lsr.w	r3, r2, r3
 8008dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dbc:	e01e      	b.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dbe:	4b11      	ldr	r3, [pc, #68]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dca:	d106      	bne.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8008dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dd2:	d102      	bne.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008dd4:	4b0d      	ldr	r3, [pc, #52]	; (8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dd8:	e010      	b.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008dda:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008de6:	d106      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dee:	d102      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008df0:	4b07      	ldr	r3, [pc, #28]	; (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8008df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008df4:	e002      	b.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008df6:	2300      	movs	r3, #0
 8008df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008dfa:	e1af      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008dfc:	e1ae      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008dfe:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008e00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e02:	e1ab      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008e04:	58024400 	.word	0x58024400
 8008e08:	03d09000 	.word	0x03d09000
 8008e0c:	003d0900 	.word	0x003d0900
 8008e10:	007a1200 	.word	0x007a1200
 8008e14:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e1c:	e19e      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008e24:	d173      	bne.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008e26:	4b9d      	ldr	r3, [pc, #628]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e2e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e36:	d02f      	beq.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e3e:	d863      	bhi.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d004      	beq.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e4c:	d012      	beq.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8008e4e:	e05b      	b.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e50:	4b92      	ldr	r3, [pc, #584]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e5c:	d107      	bne.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e5e:	f107 0318 	add.w	r3, r7, #24
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 f99c 	bl	80091a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e6c:	e176      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e72:	e173      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e74:	4b89      	ldr	r3, [pc, #548]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e80:	d107      	bne.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e82:	f107 030c 	add.w	r3, r7, #12
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 fade 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e90:	e164      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e96:	e161      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e98:	4b80      	ldr	r3, [pc, #512]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ea0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ea2:	4b7e      	ldr	r3, [pc, #504]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0304 	and.w	r3, r3, #4
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	d10c      	bne.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8008eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d109      	bne.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008eb4:	4b79      	ldr	r3, [pc, #484]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	08db      	lsrs	r3, r3, #3
 8008eba:	f003 0303 	and.w	r3, r3, #3
 8008ebe:	4a78      	ldr	r2, [pc, #480]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ec6:	e01e      	b.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ec8:	4b74      	ldr	r3, [pc, #464]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ed4:	d106      	bne.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008edc:	d102      	bne.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008ede:	4b71      	ldr	r3, [pc, #452]	; (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ee2:	e010      	b.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ee4:	4b6d      	ldr	r3, [pc, #436]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ef0:	d106      	bne.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ef8:	d102      	bne.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008efa:	4b6b      	ldr	r3, [pc, #428]	; (80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008efe:	e002      	b.n	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008f00:	2300      	movs	r3, #0
 8008f02:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008f04:	e12a      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008f06:	e129      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f0c:	e126      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f14:	d133      	bne.n	8008f7e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008f16:	4b61      	ldr	r3, [pc, #388]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f1e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d004      	beq.n	8008f30 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f2c:	d012      	beq.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008f2e:	e023      	b.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f30:	4b5a      	ldr	r3, [pc, #360]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f3c:	d107      	bne.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fbd4 	bl	80096f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f4c:	e106      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f52:	e103      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f54:	4b51      	ldr	r3, [pc, #324]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f60:	d107      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f62:	f107 0318 	add.w	r3, r7, #24
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 f91a 	bl	80091a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008f70:	e0f4      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008f72:	2300      	movs	r3, #0
 8008f74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f76:	e0f1      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f7c:	e0ee      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f84:	f040 809b 	bne.w	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008f88:	4b44      	ldr	r3, [pc, #272]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f8c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008f90:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f94:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008f98:	f000 808b 	beq.w	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008fa2:	f200 8089 	bhi.w	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fac:	d06c      	beq.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fb4:	f200 8080 	bhi.w	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fbe:	d056      	beq.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fc6:	d877      	bhi.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fce:	d03b      	beq.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fd6:	d86f      	bhi.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fde:	d021      	beq.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fe6:	d867      	bhi.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d004      	beq.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8008fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ff4:	d004      	beq.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8008ff6:	e05f      	b.n	80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008ff8:	f000 f8bc 	bl	8009174 <HAL_RCCEx_GetD3PCLK1Freq>
 8008ffc:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008ffe:	e0ad      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009000:	4b26      	ldr	r3, [pc, #152]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800900c:	d107      	bne.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800900e:	f107 0318 	add.w	r3, r7, #24
 8009012:	4618      	mov	r0, r3
 8009014:	f000 f8c4 	bl	80091a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800901c:	e09e      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800901e:	2300      	movs	r3, #0
 8009020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009022:	e09b      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009024:	4b1d      	ldr	r3, [pc, #116]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800902c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009030:	d107      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009032:	f107 030c 	add.w	r3, r7, #12
 8009036:	4618      	mov	r0, r3
 8009038:	f000 fa06 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009040:	e08c      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009046:	e089      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009048:	4b14      	ldr	r3, [pc, #80]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b04      	cmp	r3, #4
 8009052:	d109      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009054:	4b11      	ldr	r3, [pc, #68]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	08db      	lsrs	r3, r3, #3
 800905a:	f003 0303 	and.w	r3, r3, #3
 800905e:	4a10      	ldr	r2, [pc, #64]	; (80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8009060:	fa22 f303 	lsr.w	r3, r2, r3
 8009064:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009066:	e079      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009068:	2300      	movs	r3, #0
 800906a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800906c:	e076      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800906e:	4b0b      	ldr	r3, [pc, #44]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800907a:	d102      	bne.n	8009082 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 800907c:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800907e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009080:	e06c      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8009082:	2300      	movs	r3, #0
 8009084:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009086:	e069      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009088:	4b04      	ldr	r3, [pc, #16]	; (800909c <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009094:	d10a      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 8009096:	4b04      	ldr	r3, [pc, #16]	; (80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009098:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800909a:	e05f      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800909c:	58024400 	.word	0x58024400
 80090a0:	03d09000 	.word	0x03d09000
 80090a4:	003d0900 	.word	0x003d0900
 80090a8:	007a1200 	.word	0x007a1200
          frequency = 0;
 80090ac:	2300      	movs	r3, #0
 80090ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090b0:	e054      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80090b2:	4b2d      	ldr	r3, [pc, #180]	; (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80090b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090b6:	e051      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090bc:	e04e      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090c4:	d148      	bne.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80090c6:	4b29      	ldr	r3, [pc, #164]	; (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80090c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090ce:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090d6:	d02a      	beq.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090de:	d838      	bhi.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80090e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d004      	beq.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 80090e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090ec:	d00d      	beq.n	800910a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80090ee:	e030      	b.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80090f0:	4b1e      	ldr	r3, [pc, #120]	; (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090fc:	d102      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 80090fe:	4b1c      	ldr	r3, [pc, #112]	; (8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 8009100:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009102:	e02b      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009108:	e028      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800910a:	4b18      	ldr	r3, [pc, #96]	; (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009116:	d107      	bne.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800911c:	4618      	mov	r0, r3
 800911e:	f000 fae7 	bl	80096f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009124:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009126:	e019      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8009128:	2300      	movs	r3, #0
 800912a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800912c:	e016      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800912e:	4b0f      	ldr	r3, [pc, #60]	; (800916c <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800913a:	d107      	bne.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800913c:	f107 0318 	add.w	r3, r7, #24
 8009140:	4618      	mov	r0, r3
 8009142:	f000 f82d 	bl	80091a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800914a:	e007      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800914c:	2300      	movs	r3, #0
 800914e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009150:	e004      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8009152:	2300      	movs	r3, #0
 8009154:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009156:	e001      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800915c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800915e:	4618      	mov	r0, r3
 8009160:	3740      	adds	r7, #64	; 0x40
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	00bb8000 	.word	0x00bb8000
 800916c:	58024400 	.word	0x58024400
 8009170:	007a1200 	.word	0x007a1200

08009174 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009178:	f7fe fc66 	bl	8007a48 <HAL_RCC_GetHCLKFreq>
 800917c:	4602      	mov	r2, r0
 800917e:	4b06      	ldr	r3, [pc, #24]	; (8009198 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	091b      	lsrs	r3, r3, #4
 8009184:	f003 0307 	and.w	r3, r3, #7
 8009188:	4904      	ldr	r1, [pc, #16]	; (800919c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800918a:	5ccb      	ldrb	r3, [r1, r3]
 800918c:	f003 031f 	and.w	r3, r3, #31
 8009190:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009194:	4618      	mov	r0, r3
 8009196:	bd80      	pop	{r7, pc}
 8009198:	58024400 	.word	0x58024400
 800919c:	0800bb28 	.word	0x0800bb28

080091a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b089      	sub	sp, #36	; 0x24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091a8:	4ba1      	ldr	r3, [pc, #644]	; (8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ac:	f003 0303 	and.w	r3, r3, #3
 80091b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80091b2:	4b9f      	ldr	r3, [pc, #636]	; (8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b6:	0b1b      	lsrs	r3, r3, #12
 80091b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80091be:	4b9c      	ldr	r3, [pc, #624]	; (8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c2:	091b      	lsrs	r3, r3, #4
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80091ca:	4b99      	ldr	r3, [pc, #612]	; (8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ce:	08db      	lsrs	r3, r3, #3
 80091d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	fb02 f303 	mul.w	r3, r2, r3
 80091da:	ee07 3a90 	vmov	s15, r3
 80091de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 8111 	beq.w	8009410 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	f000 8083 	beq.w	80092fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	f200 80a1 	bhi.w	8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d003      	beq.n	800920c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d056      	beq.n	80092b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800920a:	e099      	b.n	8009340 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800920c:	4b88      	ldr	r3, [pc, #544]	; (8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0320 	and.w	r3, r3, #32
 8009214:	2b00      	cmp	r3, #0
 8009216:	d02d      	beq.n	8009274 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009218:	4b85      	ldr	r3, [pc, #532]	; (8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	08db      	lsrs	r3, r3, #3
 800921e:	f003 0303 	and.w	r3, r3, #3
 8009222:	4a84      	ldr	r2, [pc, #528]	; (8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009224:	fa22 f303 	lsr.w	r3, r2, r3
 8009228:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	ee07 3a90 	vmov	s15, r3
 8009230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	ee07 3a90 	vmov	s15, r3
 800923a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009242:	4b7b      	ldr	r3, [pc, #492]	; (8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800924a:	ee07 3a90 	vmov	s15, r3
 800924e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009252:	ed97 6a03 	vldr	s12, [r7, #12]
 8009256:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800925a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800925e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800926a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800926e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009272:	e087      	b.n	8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	ee07 3a90 	vmov	s15, r3
 800927a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800927e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800943c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009286:	4b6a      	ldr	r3, [pc, #424]	; (8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800928e:	ee07 3a90 	vmov	s15, r3
 8009292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009296:	ed97 6a03 	vldr	s12, [r7, #12]
 800929a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800929e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092b6:	e065      	b.n	8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	ee07 3a90 	vmov	s15, r3
 80092be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80092c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ca:	4b59      	ldr	r3, [pc, #356]	; (8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092d2:	ee07 3a90 	vmov	s15, r3
 80092d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092da:	ed97 6a03 	vldr	s12, [r7, #12]
 80092de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092fa:	e043      	b.n	8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	ee07 3a90 	vmov	s15, r3
 8009302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009306:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009444 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800930a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800930e:	4b48      	ldr	r3, [pc, #288]	; (8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009316:	ee07 3a90 	vmov	s15, r3
 800931a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009322:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800932a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800932e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800933a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800933e:	e021      	b.n	8009384 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	ee07 3a90 	vmov	s15, r3
 8009346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800934a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800934e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009352:	4b37      	ldr	r3, [pc, #220]	; (8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800935a:	ee07 3a90 	vmov	s15, r3
 800935e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009362:	ed97 6a03 	vldr	s12, [r7, #12]
 8009366:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009438 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800936a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800936e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800937a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800937e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009382:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009384:	4b2a      	ldr	r3, [pc, #168]	; (8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009388:	0a5b      	lsrs	r3, r3, #9
 800938a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800938e:	ee07 3a90 	vmov	s15, r3
 8009392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800939a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800939e:	edd7 6a07 	vldr	s13, [r7, #28]
 80093a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093aa:	ee17 2a90 	vmov	r2, s15
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80093b2:	4b1f      	ldr	r3, [pc, #124]	; (8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b6:	0c1b      	lsrs	r3, r3, #16
 80093b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093bc:	ee07 3a90 	vmov	s15, r3
 80093c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80093d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093d8:	ee17 2a90 	vmov	r2, s15
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80093e0:	4b13      	ldr	r3, [pc, #76]	; (8009430 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e4:	0e1b      	lsrs	r3, r3, #24
 80093e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80093fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009406:	ee17 2a90 	vmov	r2, s15
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800940e:	e008      	b.n	8009422 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	609a      	str	r2, [r3, #8]
}
 8009422:	bf00      	nop
 8009424:	3724      	adds	r7, #36	; 0x24
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	58024400 	.word	0x58024400
 8009434:	03d09000 	.word	0x03d09000
 8009438:	46000000 	.word	0x46000000
 800943c:	4c742400 	.word	0x4c742400
 8009440:	4a742400 	.word	0x4a742400
 8009444:	4af42400 	.word	0x4af42400

08009448 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009448:	b480      	push	{r7}
 800944a:	b089      	sub	sp, #36	; 0x24
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009450:	4ba1      	ldr	r3, [pc, #644]	; (80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009454:	f003 0303 	and.w	r3, r3, #3
 8009458:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800945a:	4b9f      	ldr	r3, [pc, #636]	; (80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800945c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945e:	0d1b      	lsrs	r3, r3, #20
 8009460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009464:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009466:	4b9c      	ldr	r3, [pc, #624]	; (80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	0a1b      	lsrs	r3, r3, #8
 800946c:	f003 0301 	and.w	r3, r3, #1
 8009470:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009472:	4b99      	ldr	r3, [pc, #612]	; (80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009476:	08db      	lsrs	r3, r3, #3
 8009478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	fb02 f303 	mul.w	r3, r2, r3
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	f000 8111 	beq.w	80096b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	2b02      	cmp	r3, #2
 800949a:	f000 8083 	beq.w	80095a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	f200 80a1 	bhi.w	80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d003      	beq.n	80094b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d056      	beq.n	8009560 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80094b2:	e099      	b.n	80095e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094b4:	4b88      	ldr	r3, [pc, #544]	; (80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 0320 	and.w	r3, r3, #32
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d02d      	beq.n	800951c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094c0:	4b85      	ldr	r3, [pc, #532]	; (80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	08db      	lsrs	r3, r3, #3
 80094c6:	f003 0303 	and.w	r3, r3, #3
 80094ca:	4a84      	ldr	r2, [pc, #528]	; (80096dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80094cc:	fa22 f303 	lsr.w	r3, r2, r3
 80094d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	ee07 3a90 	vmov	s15, r3
 80094d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	ee07 3a90 	vmov	s15, r3
 80094e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ea:	4b7b      	ldr	r3, [pc, #492]	; (80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f2:	ee07 3a90 	vmov	s15, r3
 80094f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80094fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80096e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800950a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800950e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009516:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800951a:	e087      	b.n	800962c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	ee07 3a90 	vmov	s15, r3
 8009522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009526:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80096e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800952a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800952e:	4b6a      	ldr	r3, [pc, #424]	; (80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009536:	ee07 3a90 	vmov	s15, r3
 800953a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800953e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009542:	eddf 5a67 	vldr	s11, [pc, #412]	; 80096e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800954a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800954e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800955a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800955e:	e065      	b.n	800962c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	ee07 3a90 	vmov	s15, r3
 8009566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800956e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009572:	4b59      	ldr	r3, [pc, #356]	; (80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800957a:	ee07 3a90 	vmov	s15, r3
 800957e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009582:	ed97 6a03 	vldr	s12, [r7, #12]
 8009586:	eddf 5a56 	vldr	s11, [pc, #344]	; 80096e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800958a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800958e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800959a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800959e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095a2:	e043      	b.n	800962c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	ee07 3a90 	vmov	s15, r3
 80095aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80096ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80095b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095b6:	4b48      	ldr	r3, [pc, #288]	; (80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095be:	ee07 3a90 	vmov	s15, r3
 80095c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80096e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095e6:	e021      	b.n	800962c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	ee07 3a90 	vmov	s15, r3
 80095ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095fa:	4b37      	ldr	r3, [pc, #220]	; (80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009602:	ee07 3a90 	vmov	s15, r3
 8009606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800960a:	ed97 6a03 	vldr	s12, [r7, #12]
 800960e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80096e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800961a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800961e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009626:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800962a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800962c:	4b2a      	ldr	r3, [pc, #168]	; (80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800962e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009630:	0a5b      	lsrs	r3, r3, #9
 8009632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009636:	ee07 3a90 	vmov	s15, r3
 800963a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800963e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009642:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009646:	edd7 6a07 	vldr	s13, [r7, #28]
 800964a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800964e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009652:	ee17 2a90 	vmov	r2, s15
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800965a:	4b1f      	ldr	r3, [pc, #124]	; (80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800965c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965e:	0c1b      	lsrs	r3, r3, #16
 8009660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009664:	ee07 3a90 	vmov	s15, r3
 8009668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800966c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009670:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009674:	edd7 6a07 	vldr	s13, [r7, #28]
 8009678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800967c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009680:	ee17 2a90 	vmov	r2, s15
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009688:	4b13      	ldr	r3, [pc, #76]	; (80096d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800968a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968c:	0e1b      	lsrs	r3, r3, #24
 800968e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009692:	ee07 3a90 	vmov	s15, r3
 8009696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800969a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800969e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80096a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096ae:	ee17 2a90 	vmov	r2, s15
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80096b6:	e008      	b.n	80096ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	609a      	str	r2, [r3, #8]
}
 80096ca:	bf00      	nop
 80096cc:	3724      	adds	r7, #36	; 0x24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	58024400 	.word	0x58024400
 80096dc:	03d09000 	.word	0x03d09000
 80096e0:	46000000 	.word	0x46000000
 80096e4:	4c742400 	.word	0x4c742400
 80096e8:	4a742400 	.word	0x4a742400
 80096ec:	4af42400 	.word	0x4af42400

080096f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b089      	sub	sp, #36	; 0x24
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80096f8:	4ba0      	ldr	r3, [pc, #640]	; (800997c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fc:	f003 0303 	and.w	r3, r3, #3
 8009700:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009702:	4b9e      	ldr	r3, [pc, #632]	; (800997c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009706:	091b      	lsrs	r3, r3, #4
 8009708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800970c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800970e:	4b9b      	ldr	r3, [pc, #620]	; (800997c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009718:	4b98      	ldr	r3, [pc, #608]	; (800997c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800971a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800971c:	08db      	lsrs	r3, r3, #3
 800971e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009722:	693a      	ldr	r2, [r7, #16]
 8009724:	fb02 f303 	mul.w	r3, r2, r3
 8009728:	ee07 3a90 	vmov	s15, r3
 800972c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009730:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 8111 	beq.w	800995e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	2b02      	cmp	r3, #2
 8009740:	f000 8083 	beq.w	800984a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	2b02      	cmp	r3, #2
 8009748:	f200 80a1 	bhi.w	800988e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d056      	beq.n	8009806 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009758:	e099      	b.n	800988e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800975a:	4b88      	ldr	r3, [pc, #544]	; (800997c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 0320 	and.w	r3, r3, #32
 8009762:	2b00      	cmp	r3, #0
 8009764:	d02d      	beq.n	80097c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009766:	4b85      	ldr	r3, [pc, #532]	; (800997c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	08db      	lsrs	r3, r3, #3
 800976c:	f003 0303 	and.w	r3, r3, #3
 8009770:	4a83      	ldr	r2, [pc, #524]	; (8009980 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009772:	fa22 f303 	lsr.w	r3, r2, r3
 8009776:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	ee07 3a90 	vmov	s15, r3
 8009788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009790:	4b7a      	ldr	r3, [pc, #488]	; (800997c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009798:	ee07 3a90 	vmov	s15, r3
 800979c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80097a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097bc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80097c0:	e087      	b.n	80098d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	ee07 3a90 	vmov	s15, r3
 80097c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009988 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80097d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097d4:	4b69      	ldr	r3, [pc, #420]	; (800997c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097dc:	ee07 3a90 	vmov	s15, r3
 80097e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80097e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009800:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009804:	e065      	b.n	80098d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	ee07 3a90 	vmov	s15, r3
 800980c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009810:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800998c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009814:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009818:	4b58      	ldr	r3, [pc, #352]	; (800997c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800981a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009820:	ee07 3a90 	vmov	s15, r3
 8009824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009828:	ed97 6a03 	vldr	s12, [r7, #12]
 800982c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009830:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009834:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009838:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800983c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009844:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009848:	e043      	b.n	80098d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	ee07 3a90 	vmov	s15, r3
 8009850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009854:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009990 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009858:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800985c:	4b47      	ldr	r3, [pc, #284]	; (800997c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800985e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009864:	ee07 3a90 	vmov	s15, r3
 8009868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800986c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009870:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009874:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009878:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800987c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009880:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009888:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800988c:	e021      	b.n	80098d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	ee07 3a90 	vmov	s15, r3
 8009894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009898:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009988 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800989c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a0:	4b36      	ldr	r3, [pc, #216]	; (800997c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a8:	ee07 3a90 	vmov	s15, r3
 80098ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80098b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009984 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80098d2:	4b2a      	ldr	r3, [pc, #168]	; (800997c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d6:	0a5b      	lsrs	r3, r3, #9
 80098d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098dc:	ee07 3a90 	vmov	s15, r3
 80098e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80098f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098f8:	ee17 2a90 	vmov	r2, s15
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009900:	4b1e      	ldr	r3, [pc, #120]	; (800997c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009904:	0c1b      	lsrs	r3, r3, #16
 8009906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800990a:	ee07 3a90 	vmov	s15, r3
 800990e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800991a:	edd7 6a07 	vldr	s13, [r7, #28]
 800991e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009926:	ee17 2a90 	vmov	r2, s15
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800992e:	4b13      	ldr	r3, [pc, #76]	; (800997c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009932:	0e1b      	lsrs	r3, r3, #24
 8009934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009938:	ee07 3a90 	vmov	s15, r3
 800993c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009944:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009948:	edd7 6a07 	vldr	s13, [r7, #28]
 800994c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009954:	ee17 2a90 	vmov	r2, s15
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800995c:	e008      	b.n	8009970 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	609a      	str	r2, [r3, #8]
}
 8009970:	bf00      	nop
 8009972:	3724      	adds	r7, #36	; 0x24
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	58024400 	.word	0x58024400
 8009980:	03d09000 	.word	0x03d09000
 8009984:	46000000 	.word	0x46000000
 8009988:	4c742400 	.word	0x4c742400
 800998c:	4a742400 	.word	0x4a742400
 8009990:	4af42400 	.word	0x4af42400

08009994 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099a2:	4b53      	ldr	r3, [pc, #332]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 80099a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a6:	f003 0303 	and.w	r3, r3, #3
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	d101      	bne.n	80099b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e099      	b.n	8009ae6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80099b2:	4b4f      	ldr	r3, [pc, #316]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a4e      	ldr	r2, [pc, #312]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 80099b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099be:	f7f8 ffcb 	bl	8002958 <HAL_GetTick>
 80099c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099c4:	e008      	b.n	80099d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80099c6:	f7f8 ffc7 	bl	8002958 <HAL_GetTick>
 80099ca:	4602      	mov	r2, r0
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d901      	bls.n	80099d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099d4:	2303      	movs	r3, #3
 80099d6:	e086      	b.n	8009ae6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099d8:	4b45      	ldr	r3, [pc, #276]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1f0      	bne.n	80099c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80099e4:	4b42      	ldr	r3, [pc, #264]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 80099e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	031b      	lsls	r3, r3, #12
 80099f2:	493f      	ldr	r1, [pc, #252]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 80099f4:	4313      	orrs	r3, r2
 80099f6:	628b      	str	r3, [r1, #40]	; 0x28
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	3b01      	subs	r3, #1
 8009a08:	025b      	lsls	r3, r3, #9
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	431a      	orrs	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	3b01      	subs	r3, #1
 8009a14:	041b      	lsls	r3, r3, #16
 8009a16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	3b01      	subs	r3, #1
 8009a22:	061b      	lsls	r3, r3, #24
 8009a24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a28:	4931      	ldr	r1, [pc, #196]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009a2e:	4b30      	ldr	r3, [pc, #192]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	492d      	ldr	r1, [pc, #180]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009a40:	4b2b      	ldr	r3, [pc, #172]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a44:	f023 0220 	bic.w	r2, r3, #32
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	4928      	ldr	r1, [pc, #160]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009a52:	4b27      	ldr	r3, [pc, #156]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a56:	4a26      	ldr	r2, [pc, #152]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009a58:	f023 0310 	bic.w	r3, r3, #16
 8009a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009a5e:	4b24      	ldr	r3, [pc, #144]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009a60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a62:	4b24      	ldr	r3, [pc, #144]	; (8009af4 <RCCEx_PLL2_Config+0x160>)
 8009a64:	4013      	ands	r3, r2
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	69d2      	ldr	r2, [r2, #28]
 8009a6a:	00d2      	lsls	r2, r2, #3
 8009a6c:	4920      	ldr	r1, [pc, #128]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009a72:	4b1f      	ldr	r3, [pc, #124]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a76:	4a1e      	ldr	r2, [pc, #120]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009a78:	f043 0310 	orr.w	r3, r3, #16
 8009a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d106      	bne.n	8009a92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009a84:	4b1a      	ldr	r3, [pc, #104]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	4a19      	ldr	r2, [pc, #100]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009a8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a90:	e00f      	b.n	8009ab2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d106      	bne.n	8009aa6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009a98:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9c:	4a14      	ldr	r2, [pc, #80]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009aa4:	e005      	b.n	8009ab2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009aa6:	4b12      	ldr	r3, [pc, #72]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aaa:	4a11      	ldr	r2, [pc, #68]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ab0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009ab2:	4b0f      	ldr	r3, [pc, #60]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a0e      	ldr	r2, [pc, #56]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009ab8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009abe:	f7f8 ff4b 	bl	8002958 <HAL_GetTick>
 8009ac2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ac4:	e008      	b.n	8009ad8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009ac6:	f7f8 ff47 	bl	8002958 <HAL_GetTick>
 8009aca:	4602      	mov	r2, r0
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d901      	bls.n	8009ad8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	e006      	b.n	8009ae6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ad8:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <RCCEx_PLL2_Config+0x15c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d0f0      	beq.n	8009ac6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	58024400 	.word	0x58024400
 8009af4:	ffff0007 	.word	0xffff0007

08009af8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b06:	4b53      	ldr	r3, [pc, #332]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b0a:	f003 0303 	and.w	r3, r3, #3
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	d101      	bne.n	8009b16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e099      	b.n	8009c4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009b16:	4b4f      	ldr	r3, [pc, #316]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a4e      	ldr	r2, [pc, #312]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b22:	f7f8 ff19 	bl	8002958 <HAL_GetTick>
 8009b26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b28:	e008      	b.n	8009b3c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009b2a:	f7f8 ff15 	bl	8002958 <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d901      	bls.n	8009b3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e086      	b.n	8009c4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b3c:	4b45      	ldr	r3, [pc, #276]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1f0      	bne.n	8009b2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009b48:	4b42      	ldr	r3, [pc, #264]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	051b      	lsls	r3, r3, #20
 8009b56:	493f      	ldr	r1, [pc, #252]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	628b      	str	r3, [r1, #40]	; 0x28
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	3b01      	subs	r3, #1
 8009b62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	025b      	lsls	r3, r3, #9
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	431a      	orrs	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	3b01      	subs	r3, #1
 8009b78:	041b      	lsls	r3, r3, #16
 8009b7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	3b01      	subs	r3, #1
 8009b86:	061b      	lsls	r3, r3, #24
 8009b88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009b8c:	4931      	ldr	r1, [pc, #196]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b92:	4b30      	ldr	r3, [pc, #192]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	695b      	ldr	r3, [r3, #20]
 8009b9e:	492d      	ldr	r1, [pc, #180]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009ba4:	4b2b      	ldr	r3, [pc, #172]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	4928      	ldr	r1, [pc, #160]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009bb6:	4b27      	ldr	r3, [pc, #156]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bba:	4a26      	ldr	r2, [pc, #152]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009bc2:	4b24      	ldr	r3, [pc, #144]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bc6:	4b24      	ldr	r3, [pc, #144]	; (8009c58 <RCCEx_PLL3_Config+0x160>)
 8009bc8:	4013      	ands	r3, r2
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	69d2      	ldr	r2, [r2, #28]
 8009bce:	00d2      	lsls	r2, r2, #3
 8009bd0:	4920      	ldr	r1, [pc, #128]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009bd6:	4b1f      	ldr	r3, [pc, #124]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bda:	4a1e      	ldr	r2, [pc, #120]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009be0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d106      	bne.n	8009bf6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009be8:	4b1a      	ldr	r3, [pc, #104]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bec:	4a19      	ldr	r2, [pc, #100]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009bee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009bf4:	e00f      	b.n	8009c16 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d106      	bne.n	8009c0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009bfc:	4b15      	ldr	r3, [pc, #84]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c00:	4a14      	ldr	r2, [pc, #80]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009c02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c08:	e005      	b.n	8009c16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009c0a:	4b12      	ldr	r3, [pc, #72]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0e:	4a11      	ldr	r2, [pc, #68]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009c10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009c16:	4b0f      	ldr	r3, [pc, #60]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a0e      	ldr	r2, [pc, #56]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c22:	f7f8 fe99 	bl	8002958 <HAL_GetTick>
 8009c26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c28:	e008      	b.n	8009c3c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009c2a:	f7f8 fe95 	bl	8002958 <HAL_GetTick>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d901      	bls.n	8009c3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	e006      	b.n	8009c4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c3c:	4b05      	ldr	r3, [pc, #20]	; (8009c54 <RCCEx_PLL3_Config+0x15c>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d0f0      	beq.n	8009c2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	58024400 	.word	0x58024400
 8009c58:	ffff0007 	.word	0xffff0007

08009c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e049      	b.n	8009d02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d106      	bne.n	8009c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f7f8 fcc4 	bl	8002610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	3304      	adds	r3, #4
 8009c98:	4619      	mov	r1, r3
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	f000 f99e 	bl	8009fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
	...

08009d0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d001      	beq.n	8009d24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	e04c      	b.n	8009dbe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a26      	ldr	r2, [pc, #152]	; (8009dcc <HAL_TIM_Base_Start+0xc0>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d022      	beq.n	8009d7c <HAL_TIM_Base_Start+0x70>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d3e:	d01d      	beq.n	8009d7c <HAL_TIM_Base_Start+0x70>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a22      	ldr	r2, [pc, #136]	; (8009dd0 <HAL_TIM_Base_Start+0xc4>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d018      	beq.n	8009d7c <HAL_TIM_Base_Start+0x70>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a21      	ldr	r2, [pc, #132]	; (8009dd4 <HAL_TIM_Base_Start+0xc8>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d013      	beq.n	8009d7c <HAL_TIM_Base_Start+0x70>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a1f      	ldr	r2, [pc, #124]	; (8009dd8 <HAL_TIM_Base_Start+0xcc>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d00e      	beq.n	8009d7c <HAL_TIM_Base_Start+0x70>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a1e      	ldr	r2, [pc, #120]	; (8009ddc <HAL_TIM_Base_Start+0xd0>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d009      	beq.n	8009d7c <HAL_TIM_Base_Start+0x70>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a1c      	ldr	r2, [pc, #112]	; (8009de0 <HAL_TIM_Base_Start+0xd4>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d004      	beq.n	8009d7c <HAL_TIM_Base_Start+0x70>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a1b      	ldr	r2, [pc, #108]	; (8009de4 <HAL_TIM_Base_Start+0xd8>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d115      	bne.n	8009da8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	689a      	ldr	r2, [r3, #8]
 8009d82:	4b19      	ldr	r3, [pc, #100]	; (8009de8 <HAL_TIM_Base_Start+0xdc>)
 8009d84:	4013      	ands	r3, r2
 8009d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2b06      	cmp	r3, #6
 8009d8c:	d015      	beq.n	8009dba <HAL_TIM_Base_Start+0xae>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d94:	d011      	beq.n	8009dba <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f042 0201 	orr.w	r2, r2, #1
 8009da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009da6:	e008      	b.n	8009dba <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f042 0201 	orr.w	r2, r2, #1
 8009db6:	601a      	str	r2, [r3, #0]
 8009db8:	e000      	b.n	8009dbc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop
 8009dcc:	40010000 	.word	0x40010000
 8009dd0:	40000400 	.word	0x40000400
 8009dd4:	40000800 	.word	0x40000800
 8009dd8:	40000c00 	.word	0x40000c00
 8009ddc:	40010400 	.word	0x40010400
 8009de0:	40001800 	.word	0x40001800
 8009de4:	40014000 	.word	0x40014000
 8009de8:	00010007 	.word	0x00010007

08009dec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009df6:	2300      	movs	r3, #0
 8009df8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d101      	bne.n	8009e08 <HAL_TIM_ConfigClockSource+0x1c>
 8009e04:	2302      	movs	r3, #2
 8009e06:	e0dc      	b.n	8009fc2 <HAL_TIM_ConfigClockSource+0x1d6>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2202      	movs	r2, #2
 8009e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	4b6a      	ldr	r3, [pc, #424]	; (8009fcc <HAL_TIM_ConfigClockSource+0x1e0>)
 8009e24:	4013      	ands	r3, r2
 8009e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a64      	ldr	r2, [pc, #400]	; (8009fd0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	f000 80a9 	beq.w	8009f96 <HAL_TIM_ConfigClockSource+0x1aa>
 8009e44:	4a62      	ldr	r2, [pc, #392]	; (8009fd0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	f200 80ae 	bhi.w	8009fa8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e4c:	4a61      	ldr	r2, [pc, #388]	; (8009fd4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	f000 80a1 	beq.w	8009f96 <HAL_TIM_ConfigClockSource+0x1aa>
 8009e54:	4a5f      	ldr	r2, [pc, #380]	; (8009fd4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	f200 80a6 	bhi.w	8009fa8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e5c:	4a5e      	ldr	r2, [pc, #376]	; (8009fd8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	f000 8099 	beq.w	8009f96 <HAL_TIM_ConfigClockSource+0x1aa>
 8009e64:	4a5c      	ldr	r2, [pc, #368]	; (8009fd8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	f200 809e 	bhi.w	8009fa8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009e70:	f000 8091 	beq.w	8009f96 <HAL_TIM_ConfigClockSource+0x1aa>
 8009e74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009e78:	f200 8096 	bhi.w	8009fa8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e80:	f000 8089 	beq.w	8009f96 <HAL_TIM_ConfigClockSource+0x1aa>
 8009e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e88:	f200 808e 	bhi.w	8009fa8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e90:	d03e      	beq.n	8009f10 <HAL_TIM_ConfigClockSource+0x124>
 8009e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e96:	f200 8087 	bhi.w	8009fa8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e9e:	f000 8086 	beq.w	8009fae <HAL_TIM_ConfigClockSource+0x1c2>
 8009ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ea6:	d87f      	bhi.n	8009fa8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ea8:	2b70      	cmp	r3, #112	; 0x70
 8009eaa:	d01a      	beq.n	8009ee2 <HAL_TIM_ConfigClockSource+0xf6>
 8009eac:	2b70      	cmp	r3, #112	; 0x70
 8009eae:	d87b      	bhi.n	8009fa8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009eb0:	2b60      	cmp	r3, #96	; 0x60
 8009eb2:	d050      	beq.n	8009f56 <HAL_TIM_ConfigClockSource+0x16a>
 8009eb4:	2b60      	cmp	r3, #96	; 0x60
 8009eb6:	d877      	bhi.n	8009fa8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009eb8:	2b50      	cmp	r3, #80	; 0x50
 8009eba:	d03c      	beq.n	8009f36 <HAL_TIM_ConfigClockSource+0x14a>
 8009ebc:	2b50      	cmp	r3, #80	; 0x50
 8009ebe:	d873      	bhi.n	8009fa8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ec0:	2b40      	cmp	r3, #64	; 0x40
 8009ec2:	d058      	beq.n	8009f76 <HAL_TIM_ConfigClockSource+0x18a>
 8009ec4:	2b40      	cmp	r3, #64	; 0x40
 8009ec6:	d86f      	bhi.n	8009fa8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ec8:	2b30      	cmp	r3, #48	; 0x30
 8009eca:	d064      	beq.n	8009f96 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ecc:	2b30      	cmp	r3, #48	; 0x30
 8009ece:	d86b      	bhi.n	8009fa8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ed0:	2b20      	cmp	r3, #32
 8009ed2:	d060      	beq.n	8009f96 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ed4:	2b20      	cmp	r3, #32
 8009ed6:	d867      	bhi.n	8009fa8 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d05c      	beq.n	8009f96 <HAL_TIM_ConfigClockSource+0x1aa>
 8009edc:	2b10      	cmp	r3, #16
 8009ede:	d05a      	beq.n	8009f96 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ee0:	e062      	b.n	8009fa8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6818      	ldr	r0, [r3, #0]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	6899      	ldr	r1, [r3, #8]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	685a      	ldr	r2, [r3, #4]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	f000 f98b 	bl	800a20c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	609a      	str	r2, [r3, #8]
      break;
 8009f0e:	e04f      	b.n	8009fb0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6818      	ldr	r0, [r3, #0]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	6899      	ldr	r1, [r3, #8]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	685a      	ldr	r2, [r3, #4]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	f000 f974 	bl	800a20c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	689a      	ldr	r2, [r3, #8]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f32:	609a      	str	r2, [r3, #8]
      break;
 8009f34:	e03c      	b.n	8009fb0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6818      	ldr	r0, [r3, #0]
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	6859      	ldr	r1, [r3, #4]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	461a      	mov	r2, r3
 8009f44:	f000 f8e4 	bl	800a110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2150      	movs	r1, #80	; 0x50
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f000 f93e 	bl	800a1d0 <TIM_ITRx_SetConfig>
      break;
 8009f54:	e02c      	b.n	8009fb0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6818      	ldr	r0, [r3, #0]
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	6859      	ldr	r1, [r3, #4]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	461a      	mov	r2, r3
 8009f64:	f000 f903 	bl	800a16e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	2160      	movs	r1, #96	; 0x60
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 f92e 	bl	800a1d0 <TIM_ITRx_SetConfig>
      break;
 8009f74:	e01c      	b.n	8009fb0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6818      	ldr	r0, [r3, #0]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	6859      	ldr	r1, [r3, #4]
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	461a      	mov	r2, r3
 8009f84:	f000 f8c4 	bl	800a110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2140      	movs	r1, #64	; 0x40
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f000 f91e 	bl	800a1d0 <TIM_ITRx_SetConfig>
      break;
 8009f94:	e00c      	b.n	8009fb0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	f000 f915 	bl	800a1d0 <TIM_ITRx_SetConfig>
      break;
 8009fa6:	e003      	b.n	8009fb0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	73fb      	strb	r3, [r7, #15]
      break;
 8009fac:	e000      	b.n	8009fb0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009fae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	ffceff88 	.word	0xffceff88
 8009fd0:	00100040 	.word	0x00100040
 8009fd4:	00100030 	.word	0x00100030
 8009fd8:	00100020 	.word	0x00100020

08009fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a40      	ldr	r2, [pc, #256]	; (800a0f0 <TIM_Base_SetConfig+0x114>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d013      	beq.n	800a01c <TIM_Base_SetConfig+0x40>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ffa:	d00f      	beq.n	800a01c <TIM_Base_SetConfig+0x40>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a3d      	ldr	r2, [pc, #244]	; (800a0f4 <TIM_Base_SetConfig+0x118>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d00b      	beq.n	800a01c <TIM_Base_SetConfig+0x40>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a3c      	ldr	r2, [pc, #240]	; (800a0f8 <TIM_Base_SetConfig+0x11c>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d007      	beq.n	800a01c <TIM_Base_SetConfig+0x40>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a3b      	ldr	r2, [pc, #236]	; (800a0fc <TIM_Base_SetConfig+0x120>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d003      	beq.n	800a01c <TIM_Base_SetConfig+0x40>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a3a      	ldr	r2, [pc, #232]	; (800a100 <TIM_Base_SetConfig+0x124>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d108      	bne.n	800a02e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a2f      	ldr	r2, [pc, #188]	; (800a0f0 <TIM_Base_SetConfig+0x114>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d01f      	beq.n	800a076 <TIM_Base_SetConfig+0x9a>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a03c:	d01b      	beq.n	800a076 <TIM_Base_SetConfig+0x9a>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a2c      	ldr	r2, [pc, #176]	; (800a0f4 <TIM_Base_SetConfig+0x118>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d017      	beq.n	800a076 <TIM_Base_SetConfig+0x9a>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a2b      	ldr	r2, [pc, #172]	; (800a0f8 <TIM_Base_SetConfig+0x11c>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d013      	beq.n	800a076 <TIM_Base_SetConfig+0x9a>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a2a      	ldr	r2, [pc, #168]	; (800a0fc <TIM_Base_SetConfig+0x120>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d00f      	beq.n	800a076 <TIM_Base_SetConfig+0x9a>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a29      	ldr	r2, [pc, #164]	; (800a100 <TIM_Base_SetConfig+0x124>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d00b      	beq.n	800a076 <TIM_Base_SetConfig+0x9a>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a28      	ldr	r2, [pc, #160]	; (800a104 <TIM_Base_SetConfig+0x128>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d007      	beq.n	800a076 <TIM_Base_SetConfig+0x9a>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a27      	ldr	r2, [pc, #156]	; (800a108 <TIM_Base_SetConfig+0x12c>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d003      	beq.n	800a076 <TIM_Base_SetConfig+0x9a>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a26      	ldr	r2, [pc, #152]	; (800a10c <TIM_Base_SetConfig+0x130>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d108      	bne.n	800a088 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a07c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	4313      	orrs	r3, r2
 800a086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	695b      	ldr	r3, [r3, #20]
 800a092:	4313      	orrs	r3, r2
 800a094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	689a      	ldr	r2, [r3, #8]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a10      	ldr	r2, [pc, #64]	; (800a0f0 <TIM_Base_SetConfig+0x114>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d00f      	beq.n	800a0d4 <TIM_Base_SetConfig+0xf8>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a12      	ldr	r2, [pc, #72]	; (800a100 <TIM_Base_SetConfig+0x124>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d00b      	beq.n	800a0d4 <TIM_Base_SetConfig+0xf8>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a11      	ldr	r2, [pc, #68]	; (800a104 <TIM_Base_SetConfig+0x128>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d007      	beq.n	800a0d4 <TIM_Base_SetConfig+0xf8>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a10      	ldr	r2, [pc, #64]	; (800a108 <TIM_Base_SetConfig+0x12c>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d003      	beq.n	800a0d4 <TIM_Base_SetConfig+0xf8>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a0f      	ldr	r2, [pc, #60]	; (800a10c <TIM_Base_SetConfig+0x130>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d103      	bne.n	800a0dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	691a      	ldr	r2, [r3, #16]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	615a      	str	r2, [r3, #20]
}
 800a0e2:	bf00      	nop
 800a0e4:	3714      	adds	r7, #20
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	40010000 	.word	0x40010000
 800a0f4:	40000400 	.word	0x40000400
 800a0f8:	40000800 	.word	0x40000800
 800a0fc:	40000c00 	.word	0x40000c00
 800a100:	40010400 	.word	0x40010400
 800a104:	40014000 	.word	0x40014000
 800a108:	40014400 	.word	0x40014400
 800a10c:	40014800 	.word	0x40014800

0800a110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a110:	b480      	push	{r7}
 800a112:	b087      	sub	sp, #28
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6a1b      	ldr	r3, [r3, #32]
 800a120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	f023 0201 	bic.w	r2, r3, #1
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a13a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	011b      	lsls	r3, r3, #4
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	4313      	orrs	r3, r2
 800a144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f023 030a 	bic.w	r3, r3, #10
 800a14c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	4313      	orrs	r3, r2
 800a154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	621a      	str	r2, [r3, #32]
}
 800a162:	bf00      	nop
 800a164:	371c      	adds	r7, #28
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr

0800a16e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a16e:	b480      	push	{r7}
 800a170:	b087      	sub	sp, #28
 800a172:	af00      	add	r7, sp, #0
 800a174:	60f8      	str	r0, [r7, #12]
 800a176:	60b9      	str	r1, [r7, #8]
 800a178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	f023 0210 	bic.w	r2, r3, #16
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	031b      	lsls	r3, r3, #12
 800a19e:	697a      	ldr	r2, [r7, #20]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	011b      	lsls	r3, r3, #4
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	697a      	ldr	r2, [r7, #20]
 800a1ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	621a      	str	r2, [r3, #32]
}
 800a1c2:	bf00      	nop
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
	...

0800a1d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	4b09      	ldr	r3, [pc, #36]	; (800a208 <TIM_ITRx_SetConfig+0x38>)
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	f043 0307 	orr.w	r3, r3, #7
 800a1f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	609a      	str	r2, [r3, #8]
}
 800a1fa:	bf00      	nop
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	ffcfff8f 	.word	0xffcfff8f

0800a20c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
 800a218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	021a      	lsls	r2, r3, #8
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	431a      	orrs	r2, r3
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	4313      	orrs	r3, r2
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	4313      	orrs	r3, r2
 800a238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	609a      	str	r2, [r3, #8]
}
 800a240:	bf00      	nop
 800a242:	371c      	adds	r7, #28
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d101      	bne.n	800a264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a260:	2302      	movs	r3, #2
 800a262:	e06d      	b.n	800a340 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2202      	movs	r2, #2
 800a270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a30      	ldr	r2, [pc, #192]	; (800a34c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d004      	beq.n	800a298 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a2f      	ldr	r2, [pc, #188]	; (800a350 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d108      	bne.n	800a2aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a29e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a20      	ldr	r2, [pc, #128]	; (800a34c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d022      	beq.n	800a314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d6:	d01d      	beq.n	800a314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a1d      	ldr	r2, [pc, #116]	; (800a354 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d018      	beq.n	800a314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a1c      	ldr	r2, [pc, #112]	; (800a358 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d013      	beq.n	800a314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a1a      	ldr	r2, [pc, #104]	; (800a35c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d00e      	beq.n	800a314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a15      	ldr	r2, [pc, #84]	; (800a350 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d009      	beq.n	800a314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a16      	ldr	r2, [pc, #88]	; (800a360 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d004      	beq.n	800a314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a15      	ldr	r2, [pc, #84]	; (800a364 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d10c      	bne.n	800a32e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a31a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	4313      	orrs	r3, r2
 800a324:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	40010000 	.word	0x40010000
 800a350:	40010400 	.word	0x40010400
 800a354:	40000400 	.word	0x40000400
 800a358:	40000800 	.word	0x40000800
 800a35c:	40000c00 	.word	0x40000c00
 800a360:	40001800 	.word	0x40001800
 800a364:	40014000 	.word	0x40014000

0800a368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e042      	b.n	800a400 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a380:	2b00      	cmp	r3, #0
 800a382:	d106      	bne.n	800a392 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7f8 f9c5 	bl	800271c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2224      	movs	r2, #36	; 0x24
 800a396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f022 0201 	bic.w	r2, r2, #1
 800a3a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f82c 	bl	800a408 <UART_SetConfig>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d101      	bne.n	800a3ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e022      	b.n	800a400 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d002      	beq.n	800a3c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fe8c 	bl	800b0e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685a      	ldr	r2, [r3, #4]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689a      	ldr	r2, [r3, #8]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f042 0201 	orr.w	r2, r2, #1
 800a3f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 ff13 	bl	800b224 <UART_CheckIdleState>
 800a3fe:	4603      	mov	r3, r0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a40c:	b092      	sub	sp, #72	; 0x48
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	689a      	ldr	r2, [r3, #8]
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	431a      	orrs	r2, r3
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	695b      	ldr	r3, [r3, #20]
 800a426:	431a      	orrs	r2, r3
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	69db      	ldr	r3, [r3, #28]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	4bbe      	ldr	r3, [pc, #760]	; (800a730 <UART_SetConfig+0x328>)
 800a438:	4013      	ands	r3, r2
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	6812      	ldr	r2, [r2, #0]
 800a43e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a440:	430b      	orrs	r3, r1
 800a442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	68da      	ldr	r2, [r3, #12]
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4ab3      	ldr	r2, [pc, #716]	; (800a734 <UART_SetConfig+0x32c>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d004      	beq.n	800a474 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a470:	4313      	orrs	r3, r2
 800a472:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	689a      	ldr	r2, [r3, #8]
 800a47a:	4baf      	ldr	r3, [pc, #700]	; (800a738 <UART_SetConfig+0x330>)
 800a47c:	4013      	ands	r3, r2
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	6812      	ldr	r2, [r2, #0]
 800a482:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a484:	430b      	orrs	r3, r1
 800a486:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48e:	f023 010f 	bic.w	r1, r3, #15
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	430a      	orrs	r2, r1
 800a49c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4aa6      	ldr	r2, [pc, #664]	; (800a73c <UART_SetConfig+0x334>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d177      	bne.n	800a598 <UART_SetConfig+0x190>
 800a4a8:	4ba5      	ldr	r3, [pc, #660]	; (800a740 <UART_SetConfig+0x338>)
 800a4aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4b0:	2b28      	cmp	r3, #40	; 0x28
 800a4b2:	d86d      	bhi.n	800a590 <UART_SetConfig+0x188>
 800a4b4:	a201      	add	r2, pc, #4	; (adr r2, 800a4bc <UART_SetConfig+0xb4>)
 800a4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ba:	bf00      	nop
 800a4bc:	0800a561 	.word	0x0800a561
 800a4c0:	0800a591 	.word	0x0800a591
 800a4c4:	0800a591 	.word	0x0800a591
 800a4c8:	0800a591 	.word	0x0800a591
 800a4cc:	0800a591 	.word	0x0800a591
 800a4d0:	0800a591 	.word	0x0800a591
 800a4d4:	0800a591 	.word	0x0800a591
 800a4d8:	0800a591 	.word	0x0800a591
 800a4dc:	0800a569 	.word	0x0800a569
 800a4e0:	0800a591 	.word	0x0800a591
 800a4e4:	0800a591 	.word	0x0800a591
 800a4e8:	0800a591 	.word	0x0800a591
 800a4ec:	0800a591 	.word	0x0800a591
 800a4f0:	0800a591 	.word	0x0800a591
 800a4f4:	0800a591 	.word	0x0800a591
 800a4f8:	0800a591 	.word	0x0800a591
 800a4fc:	0800a571 	.word	0x0800a571
 800a500:	0800a591 	.word	0x0800a591
 800a504:	0800a591 	.word	0x0800a591
 800a508:	0800a591 	.word	0x0800a591
 800a50c:	0800a591 	.word	0x0800a591
 800a510:	0800a591 	.word	0x0800a591
 800a514:	0800a591 	.word	0x0800a591
 800a518:	0800a591 	.word	0x0800a591
 800a51c:	0800a579 	.word	0x0800a579
 800a520:	0800a591 	.word	0x0800a591
 800a524:	0800a591 	.word	0x0800a591
 800a528:	0800a591 	.word	0x0800a591
 800a52c:	0800a591 	.word	0x0800a591
 800a530:	0800a591 	.word	0x0800a591
 800a534:	0800a591 	.word	0x0800a591
 800a538:	0800a591 	.word	0x0800a591
 800a53c:	0800a581 	.word	0x0800a581
 800a540:	0800a591 	.word	0x0800a591
 800a544:	0800a591 	.word	0x0800a591
 800a548:	0800a591 	.word	0x0800a591
 800a54c:	0800a591 	.word	0x0800a591
 800a550:	0800a591 	.word	0x0800a591
 800a554:	0800a591 	.word	0x0800a591
 800a558:	0800a591 	.word	0x0800a591
 800a55c:	0800a589 	.word	0x0800a589
 800a560:	2301      	movs	r3, #1
 800a562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a566:	e326      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a568:	2304      	movs	r3, #4
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a56e:	e322      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a570:	2308      	movs	r3, #8
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a576:	e31e      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a578:	2310      	movs	r3, #16
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a57e:	e31a      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a580:	2320      	movs	r3, #32
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a586:	e316      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a588:	2340      	movs	r3, #64	; 0x40
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a58e:	e312      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a590:	2380      	movs	r3, #128	; 0x80
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a596:	e30e      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a69      	ldr	r2, [pc, #420]	; (800a744 <UART_SetConfig+0x33c>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d130      	bne.n	800a604 <UART_SetConfig+0x1fc>
 800a5a2:	4b67      	ldr	r3, [pc, #412]	; (800a740 <UART_SetConfig+0x338>)
 800a5a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5a6:	f003 0307 	and.w	r3, r3, #7
 800a5aa:	2b05      	cmp	r3, #5
 800a5ac:	d826      	bhi.n	800a5fc <UART_SetConfig+0x1f4>
 800a5ae:	a201      	add	r2, pc, #4	; (adr r2, 800a5b4 <UART_SetConfig+0x1ac>)
 800a5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b4:	0800a5cd 	.word	0x0800a5cd
 800a5b8:	0800a5d5 	.word	0x0800a5d5
 800a5bc:	0800a5dd 	.word	0x0800a5dd
 800a5c0:	0800a5e5 	.word	0x0800a5e5
 800a5c4:	0800a5ed 	.word	0x0800a5ed
 800a5c8:	0800a5f5 	.word	0x0800a5f5
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5d2:	e2f0      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a5d4:	2304      	movs	r3, #4
 800a5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5da:	e2ec      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a5dc:	2308      	movs	r3, #8
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5e2:	e2e8      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a5e4:	2310      	movs	r3, #16
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ea:	e2e4      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a5ec:	2320      	movs	r3, #32
 800a5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5f2:	e2e0      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a5f4:	2340      	movs	r3, #64	; 0x40
 800a5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5fa:	e2dc      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a5fc:	2380      	movs	r3, #128	; 0x80
 800a5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a602:	e2d8      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a4f      	ldr	r2, [pc, #316]	; (800a748 <UART_SetConfig+0x340>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d130      	bne.n	800a670 <UART_SetConfig+0x268>
 800a60e:	4b4c      	ldr	r3, [pc, #304]	; (800a740 <UART_SetConfig+0x338>)
 800a610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a612:	f003 0307 	and.w	r3, r3, #7
 800a616:	2b05      	cmp	r3, #5
 800a618:	d826      	bhi.n	800a668 <UART_SetConfig+0x260>
 800a61a:	a201      	add	r2, pc, #4	; (adr r2, 800a620 <UART_SetConfig+0x218>)
 800a61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a620:	0800a639 	.word	0x0800a639
 800a624:	0800a641 	.word	0x0800a641
 800a628:	0800a649 	.word	0x0800a649
 800a62c:	0800a651 	.word	0x0800a651
 800a630:	0800a659 	.word	0x0800a659
 800a634:	0800a661 	.word	0x0800a661
 800a638:	2300      	movs	r3, #0
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a63e:	e2ba      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a640:	2304      	movs	r3, #4
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a646:	e2b6      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a648:	2308      	movs	r3, #8
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a64e:	e2b2      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a650:	2310      	movs	r3, #16
 800a652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a656:	e2ae      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a658:	2320      	movs	r3, #32
 800a65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a65e:	e2aa      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a660:	2340      	movs	r3, #64	; 0x40
 800a662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a666:	e2a6      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a668:	2380      	movs	r3, #128	; 0x80
 800a66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a66e:	e2a2      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a35      	ldr	r2, [pc, #212]	; (800a74c <UART_SetConfig+0x344>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d130      	bne.n	800a6dc <UART_SetConfig+0x2d4>
 800a67a:	4b31      	ldr	r3, [pc, #196]	; (800a740 <UART_SetConfig+0x338>)
 800a67c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a67e:	f003 0307 	and.w	r3, r3, #7
 800a682:	2b05      	cmp	r3, #5
 800a684:	d826      	bhi.n	800a6d4 <UART_SetConfig+0x2cc>
 800a686:	a201      	add	r2, pc, #4	; (adr r2, 800a68c <UART_SetConfig+0x284>)
 800a688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68c:	0800a6a5 	.word	0x0800a6a5
 800a690:	0800a6ad 	.word	0x0800a6ad
 800a694:	0800a6b5 	.word	0x0800a6b5
 800a698:	0800a6bd 	.word	0x0800a6bd
 800a69c:	0800a6c5 	.word	0x0800a6c5
 800a6a0:	0800a6cd 	.word	0x0800a6cd
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6aa:	e284      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a6ac:	2304      	movs	r3, #4
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6b2:	e280      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a6b4:	2308      	movs	r3, #8
 800a6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ba:	e27c      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a6bc:	2310      	movs	r3, #16
 800a6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6c2:	e278      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a6c4:	2320      	movs	r3, #32
 800a6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ca:	e274      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a6cc:	2340      	movs	r3, #64	; 0x40
 800a6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6d2:	e270      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a6d4:	2380      	movs	r3, #128	; 0x80
 800a6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6da:	e26c      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a1b      	ldr	r2, [pc, #108]	; (800a750 <UART_SetConfig+0x348>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d142      	bne.n	800a76c <UART_SetConfig+0x364>
 800a6e6:	4b16      	ldr	r3, [pc, #88]	; (800a740 <UART_SetConfig+0x338>)
 800a6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ea:	f003 0307 	and.w	r3, r3, #7
 800a6ee:	2b05      	cmp	r3, #5
 800a6f0:	d838      	bhi.n	800a764 <UART_SetConfig+0x35c>
 800a6f2:	a201      	add	r2, pc, #4	; (adr r2, 800a6f8 <UART_SetConfig+0x2f0>)
 800a6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f8:	0800a711 	.word	0x0800a711
 800a6fc:	0800a719 	.word	0x0800a719
 800a700:	0800a721 	.word	0x0800a721
 800a704:	0800a729 	.word	0x0800a729
 800a708:	0800a755 	.word	0x0800a755
 800a70c:	0800a75d 	.word	0x0800a75d
 800a710:	2300      	movs	r3, #0
 800a712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a716:	e24e      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a718:	2304      	movs	r3, #4
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a71e:	e24a      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a720:	2308      	movs	r3, #8
 800a722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a726:	e246      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a728:	2310      	movs	r3, #16
 800a72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72e:	e242      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a730:	cfff69f3 	.word	0xcfff69f3
 800a734:	58000c00 	.word	0x58000c00
 800a738:	11fff4ff 	.word	0x11fff4ff
 800a73c:	40011000 	.word	0x40011000
 800a740:	58024400 	.word	0x58024400
 800a744:	40004400 	.word	0x40004400
 800a748:	40004800 	.word	0x40004800
 800a74c:	40004c00 	.word	0x40004c00
 800a750:	40005000 	.word	0x40005000
 800a754:	2320      	movs	r3, #32
 800a756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a75a:	e22c      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a75c:	2340      	movs	r3, #64	; 0x40
 800a75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a762:	e228      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a764:	2380      	movs	r3, #128	; 0x80
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a76a:	e224      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4ab1      	ldr	r2, [pc, #708]	; (800aa38 <UART_SetConfig+0x630>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d176      	bne.n	800a864 <UART_SetConfig+0x45c>
 800a776:	4bb1      	ldr	r3, [pc, #708]	; (800aa3c <UART_SetConfig+0x634>)
 800a778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a77a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a77e:	2b28      	cmp	r3, #40	; 0x28
 800a780:	d86c      	bhi.n	800a85c <UART_SetConfig+0x454>
 800a782:	a201      	add	r2, pc, #4	; (adr r2, 800a788 <UART_SetConfig+0x380>)
 800a784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a788:	0800a82d 	.word	0x0800a82d
 800a78c:	0800a85d 	.word	0x0800a85d
 800a790:	0800a85d 	.word	0x0800a85d
 800a794:	0800a85d 	.word	0x0800a85d
 800a798:	0800a85d 	.word	0x0800a85d
 800a79c:	0800a85d 	.word	0x0800a85d
 800a7a0:	0800a85d 	.word	0x0800a85d
 800a7a4:	0800a85d 	.word	0x0800a85d
 800a7a8:	0800a835 	.word	0x0800a835
 800a7ac:	0800a85d 	.word	0x0800a85d
 800a7b0:	0800a85d 	.word	0x0800a85d
 800a7b4:	0800a85d 	.word	0x0800a85d
 800a7b8:	0800a85d 	.word	0x0800a85d
 800a7bc:	0800a85d 	.word	0x0800a85d
 800a7c0:	0800a85d 	.word	0x0800a85d
 800a7c4:	0800a85d 	.word	0x0800a85d
 800a7c8:	0800a83d 	.word	0x0800a83d
 800a7cc:	0800a85d 	.word	0x0800a85d
 800a7d0:	0800a85d 	.word	0x0800a85d
 800a7d4:	0800a85d 	.word	0x0800a85d
 800a7d8:	0800a85d 	.word	0x0800a85d
 800a7dc:	0800a85d 	.word	0x0800a85d
 800a7e0:	0800a85d 	.word	0x0800a85d
 800a7e4:	0800a85d 	.word	0x0800a85d
 800a7e8:	0800a845 	.word	0x0800a845
 800a7ec:	0800a85d 	.word	0x0800a85d
 800a7f0:	0800a85d 	.word	0x0800a85d
 800a7f4:	0800a85d 	.word	0x0800a85d
 800a7f8:	0800a85d 	.word	0x0800a85d
 800a7fc:	0800a85d 	.word	0x0800a85d
 800a800:	0800a85d 	.word	0x0800a85d
 800a804:	0800a85d 	.word	0x0800a85d
 800a808:	0800a84d 	.word	0x0800a84d
 800a80c:	0800a85d 	.word	0x0800a85d
 800a810:	0800a85d 	.word	0x0800a85d
 800a814:	0800a85d 	.word	0x0800a85d
 800a818:	0800a85d 	.word	0x0800a85d
 800a81c:	0800a85d 	.word	0x0800a85d
 800a820:	0800a85d 	.word	0x0800a85d
 800a824:	0800a85d 	.word	0x0800a85d
 800a828:	0800a855 	.word	0x0800a855
 800a82c:	2301      	movs	r3, #1
 800a82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a832:	e1c0      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a834:	2304      	movs	r3, #4
 800a836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a83a:	e1bc      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a83c:	2308      	movs	r3, #8
 800a83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a842:	e1b8      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a844:	2310      	movs	r3, #16
 800a846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a84a:	e1b4      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a84c:	2320      	movs	r3, #32
 800a84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a852:	e1b0      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a854:	2340      	movs	r3, #64	; 0x40
 800a856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a85a:	e1ac      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a85c:	2380      	movs	r3, #128	; 0x80
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a862:	e1a8      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a75      	ldr	r2, [pc, #468]	; (800aa40 <UART_SetConfig+0x638>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d130      	bne.n	800a8d0 <UART_SetConfig+0x4c8>
 800a86e:	4b73      	ldr	r3, [pc, #460]	; (800aa3c <UART_SetConfig+0x634>)
 800a870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a872:	f003 0307 	and.w	r3, r3, #7
 800a876:	2b05      	cmp	r3, #5
 800a878:	d826      	bhi.n	800a8c8 <UART_SetConfig+0x4c0>
 800a87a:	a201      	add	r2, pc, #4	; (adr r2, 800a880 <UART_SetConfig+0x478>)
 800a87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a880:	0800a899 	.word	0x0800a899
 800a884:	0800a8a1 	.word	0x0800a8a1
 800a888:	0800a8a9 	.word	0x0800a8a9
 800a88c:	0800a8b1 	.word	0x0800a8b1
 800a890:	0800a8b9 	.word	0x0800a8b9
 800a894:	0800a8c1 	.word	0x0800a8c1
 800a898:	2300      	movs	r3, #0
 800a89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a89e:	e18a      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a8a0:	2304      	movs	r3, #4
 800a8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8a6:	e186      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a8a8:	2308      	movs	r3, #8
 800a8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ae:	e182      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a8b0:	2310      	movs	r3, #16
 800a8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8b6:	e17e      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a8b8:	2320      	movs	r3, #32
 800a8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8be:	e17a      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a8c0:	2340      	movs	r3, #64	; 0x40
 800a8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8c6:	e176      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a8c8:	2380      	movs	r3, #128	; 0x80
 800a8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ce:	e172      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a5b      	ldr	r2, [pc, #364]	; (800aa44 <UART_SetConfig+0x63c>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d130      	bne.n	800a93c <UART_SetConfig+0x534>
 800a8da:	4b58      	ldr	r3, [pc, #352]	; (800aa3c <UART_SetConfig+0x634>)
 800a8dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8de:	f003 0307 	and.w	r3, r3, #7
 800a8e2:	2b05      	cmp	r3, #5
 800a8e4:	d826      	bhi.n	800a934 <UART_SetConfig+0x52c>
 800a8e6:	a201      	add	r2, pc, #4	; (adr r2, 800a8ec <UART_SetConfig+0x4e4>)
 800a8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ec:	0800a905 	.word	0x0800a905
 800a8f0:	0800a90d 	.word	0x0800a90d
 800a8f4:	0800a915 	.word	0x0800a915
 800a8f8:	0800a91d 	.word	0x0800a91d
 800a8fc:	0800a925 	.word	0x0800a925
 800a900:	0800a92d 	.word	0x0800a92d
 800a904:	2300      	movs	r3, #0
 800a906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a90a:	e154      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a90c:	2304      	movs	r3, #4
 800a90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a912:	e150      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a914:	2308      	movs	r3, #8
 800a916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a91a:	e14c      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a91c:	2310      	movs	r3, #16
 800a91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a922:	e148      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a924:	2320      	movs	r3, #32
 800a926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a92a:	e144      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a92c:	2340      	movs	r3, #64	; 0x40
 800a92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a932:	e140      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a934:	2380      	movs	r3, #128	; 0x80
 800a936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a93a:	e13c      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a41      	ldr	r2, [pc, #260]	; (800aa48 <UART_SetConfig+0x640>)
 800a942:	4293      	cmp	r3, r2
 800a944:	f040 8082 	bne.w	800aa4c <UART_SetConfig+0x644>
 800a948:	4b3c      	ldr	r3, [pc, #240]	; (800aa3c <UART_SetConfig+0x634>)
 800a94a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a94c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a950:	2b28      	cmp	r3, #40	; 0x28
 800a952:	d86d      	bhi.n	800aa30 <UART_SetConfig+0x628>
 800a954:	a201      	add	r2, pc, #4	; (adr r2, 800a95c <UART_SetConfig+0x554>)
 800a956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95a:	bf00      	nop
 800a95c:	0800aa01 	.word	0x0800aa01
 800a960:	0800aa31 	.word	0x0800aa31
 800a964:	0800aa31 	.word	0x0800aa31
 800a968:	0800aa31 	.word	0x0800aa31
 800a96c:	0800aa31 	.word	0x0800aa31
 800a970:	0800aa31 	.word	0x0800aa31
 800a974:	0800aa31 	.word	0x0800aa31
 800a978:	0800aa31 	.word	0x0800aa31
 800a97c:	0800aa09 	.word	0x0800aa09
 800a980:	0800aa31 	.word	0x0800aa31
 800a984:	0800aa31 	.word	0x0800aa31
 800a988:	0800aa31 	.word	0x0800aa31
 800a98c:	0800aa31 	.word	0x0800aa31
 800a990:	0800aa31 	.word	0x0800aa31
 800a994:	0800aa31 	.word	0x0800aa31
 800a998:	0800aa31 	.word	0x0800aa31
 800a99c:	0800aa11 	.word	0x0800aa11
 800a9a0:	0800aa31 	.word	0x0800aa31
 800a9a4:	0800aa31 	.word	0x0800aa31
 800a9a8:	0800aa31 	.word	0x0800aa31
 800a9ac:	0800aa31 	.word	0x0800aa31
 800a9b0:	0800aa31 	.word	0x0800aa31
 800a9b4:	0800aa31 	.word	0x0800aa31
 800a9b8:	0800aa31 	.word	0x0800aa31
 800a9bc:	0800aa19 	.word	0x0800aa19
 800a9c0:	0800aa31 	.word	0x0800aa31
 800a9c4:	0800aa31 	.word	0x0800aa31
 800a9c8:	0800aa31 	.word	0x0800aa31
 800a9cc:	0800aa31 	.word	0x0800aa31
 800a9d0:	0800aa31 	.word	0x0800aa31
 800a9d4:	0800aa31 	.word	0x0800aa31
 800a9d8:	0800aa31 	.word	0x0800aa31
 800a9dc:	0800aa21 	.word	0x0800aa21
 800a9e0:	0800aa31 	.word	0x0800aa31
 800a9e4:	0800aa31 	.word	0x0800aa31
 800a9e8:	0800aa31 	.word	0x0800aa31
 800a9ec:	0800aa31 	.word	0x0800aa31
 800a9f0:	0800aa31 	.word	0x0800aa31
 800a9f4:	0800aa31 	.word	0x0800aa31
 800a9f8:	0800aa31 	.word	0x0800aa31
 800a9fc:	0800aa29 	.word	0x0800aa29
 800aa00:	2301      	movs	r3, #1
 800aa02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa06:	e0d6      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800aa08:	2304      	movs	r3, #4
 800aa0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa0e:	e0d2      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800aa10:	2308      	movs	r3, #8
 800aa12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa16:	e0ce      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800aa18:	2310      	movs	r3, #16
 800aa1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa1e:	e0ca      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800aa20:	2320      	movs	r3, #32
 800aa22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa26:	e0c6      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800aa28:	2340      	movs	r3, #64	; 0x40
 800aa2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa2e:	e0c2      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800aa30:	2380      	movs	r3, #128	; 0x80
 800aa32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa36:	e0be      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800aa38:	40011400 	.word	0x40011400
 800aa3c:	58024400 	.word	0x58024400
 800aa40:	40007800 	.word	0x40007800
 800aa44:	40007c00 	.word	0x40007c00
 800aa48:	40011800 	.word	0x40011800
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4aad      	ldr	r2, [pc, #692]	; (800ad08 <UART_SetConfig+0x900>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d176      	bne.n	800ab44 <UART_SetConfig+0x73c>
 800aa56:	4bad      	ldr	r3, [pc, #692]	; (800ad0c <UART_SetConfig+0x904>)
 800aa58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa5e:	2b28      	cmp	r3, #40	; 0x28
 800aa60:	d86c      	bhi.n	800ab3c <UART_SetConfig+0x734>
 800aa62:	a201      	add	r2, pc, #4	; (adr r2, 800aa68 <UART_SetConfig+0x660>)
 800aa64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa68:	0800ab0d 	.word	0x0800ab0d
 800aa6c:	0800ab3d 	.word	0x0800ab3d
 800aa70:	0800ab3d 	.word	0x0800ab3d
 800aa74:	0800ab3d 	.word	0x0800ab3d
 800aa78:	0800ab3d 	.word	0x0800ab3d
 800aa7c:	0800ab3d 	.word	0x0800ab3d
 800aa80:	0800ab3d 	.word	0x0800ab3d
 800aa84:	0800ab3d 	.word	0x0800ab3d
 800aa88:	0800ab15 	.word	0x0800ab15
 800aa8c:	0800ab3d 	.word	0x0800ab3d
 800aa90:	0800ab3d 	.word	0x0800ab3d
 800aa94:	0800ab3d 	.word	0x0800ab3d
 800aa98:	0800ab3d 	.word	0x0800ab3d
 800aa9c:	0800ab3d 	.word	0x0800ab3d
 800aaa0:	0800ab3d 	.word	0x0800ab3d
 800aaa4:	0800ab3d 	.word	0x0800ab3d
 800aaa8:	0800ab1d 	.word	0x0800ab1d
 800aaac:	0800ab3d 	.word	0x0800ab3d
 800aab0:	0800ab3d 	.word	0x0800ab3d
 800aab4:	0800ab3d 	.word	0x0800ab3d
 800aab8:	0800ab3d 	.word	0x0800ab3d
 800aabc:	0800ab3d 	.word	0x0800ab3d
 800aac0:	0800ab3d 	.word	0x0800ab3d
 800aac4:	0800ab3d 	.word	0x0800ab3d
 800aac8:	0800ab25 	.word	0x0800ab25
 800aacc:	0800ab3d 	.word	0x0800ab3d
 800aad0:	0800ab3d 	.word	0x0800ab3d
 800aad4:	0800ab3d 	.word	0x0800ab3d
 800aad8:	0800ab3d 	.word	0x0800ab3d
 800aadc:	0800ab3d 	.word	0x0800ab3d
 800aae0:	0800ab3d 	.word	0x0800ab3d
 800aae4:	0800ab3d 	.word	0x0800ab3d
 800aae8:	0800ab2d 	.word	0x0800ab2d
 800aaec:	0800ab3d 	.word	0x0800ab3d
 800aaf0:	0800ab3d 	.word	0x0800ab3d
 800aaf4:	0800ab3d 	.word	0x0800ab3d
 800aaf8:	0800ab3d 	.word	0x0800ab3d
 800aafc:	0800ab3d 	.word	0x0800ab3d
 800ab00:	0800ab3d 	.word	0x0800ab3d
 800ab04:	0800ab3d 	.word	0x0800ab3d
 800ab08:	0800ab35 	.word	0x0800ab35
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab12:	e050      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800ab14:	2304      	movs	r3, #4
 800ab16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab1a:	e04c      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800ab1c:	2308      	movs	r3, #8
 800ab1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab22:	e048      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800ab24:	2310      	movs	r3, #16
 800ab26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab2a:	e044      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800ab2c:	2320      	movs	r3, #32
 800ab2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab32:	e040      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800ab34:	2340      	movs	r3, #64	; 0x40
 800ab36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab3a:	e03c      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800ab3c:	2380      	movs	r3, #128	; 0x80
 800ab3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab42:	e038      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a71      	ldr	r2, [pc, #452]	; (800ad10 <UART_SetConfig+0x908>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d130      	bne.n	800abb0 <UART_SetConfig+0x7a8>
 800ab4e:	4b6f      	ldr	r3, [pc, #444]	; (800ad0c <UART_SetConfig+0x904>)
 800ab50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab52:	f003 0307 	and.w	r3, r3, #7
 800ab56:	2b05      	cmp	r3, #5
 800ab58:	d826      	bhi.n	800aba8 <UART_SetConfig+0x7a0>
 800ab5a:	a201      	add	r2, pc, #4	; (adr r2, 800ab60 <UART_SetConfig+0x758>)
 800ab5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab60:	0800ab79 	.word	0x0800ab79
 800ab64:	0800ab81 	.word	0x0800ab81
 800ab68:	0800ab89 	.word	0x0800ab89
 800ab6c:	0800ab91 	.word	0x0800ab91
 800ab70:	0800ab99 	.word	0x0800ab99
 800ab74:	0800aba1 	.word	0x0800aba1
 800ab78:	2302      	movs	r3, #2
 800ab7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab7e:	e01a      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800ab80:	2304      	movs	r3, #4
 800ab82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab86:	e016      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800ab88:	2308      	movs	r3, #8
 800ab8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab8e:	e012      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800ab90:	2310      	movs	r3, #16
 800ab92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab96:	e00e      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800ab98:	2320      	movs	r3, #32
 800ab9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ab9e:	e00a      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800aba0:	2340      	movs	r3, #64	; 0x40
 800aba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aba6:	e006      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800aba8:	2380      	movs	r3, #128	; 0x80
 800abaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abae:	e002      	b.n	800abb6 <UART_SetConfig+0x7ae>
 800abb0:	2380      	movs	r3, #128	; 0x80
 800abb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a55      	ldr	r2, [pc, #340]	; (800ad10 <UART_SetConfig+0x908>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	f040 80f8 	bne.w	800adb2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800abc2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800abc6:	2b20      	cmp	r3, #32
 800abc8:	dc46      	bgt.n	800ac58 <UART_SetConfig+0x850>
 800abca:	2b02      	cmp	r3, #2
 800abcc:	db75      	blt.n	800acba <UART_SetConfig+0x8b2>
 800abce:	3b02      	subs	r3, #2
 800abd0:	2b1e      	cmp	r3, #30
 800abd2:	d872      	bhi.n	800acba <UART_SetConfig+0x8b2>
 800abd4:	a201      	add	r2, pc, #4	; (adr r2, 800abdc <UART_SetConfig+0x7d4>)
 800abd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abda:	bf00      	nop
 800abdc:	0800ac5f 	.word	0x0800ac5f
 800abe0:	0800acbb 	.word	0x0800acbb
 800abe4:	0800ac67 	.word	0x0800ac67
 800abe8:	0800acbb 	.word	0x0800acbb
 800abec:	0800acbb 	.word	0x0800acbb
 800abf0:	0800acbb 	.word	0x0800acbb
 800abf4:	0800ac77 	.word	0x0800ac77
 800abf8:	0800acbb 	.word	0x0800acbb
 800abfc:	0800acbb 	.word	0x0800acbb
 800ac00:	0800acbb 	.word	0x0800acbb
 800ac04:	0800acbb 	.word	0x0800acbb
 800ac08:	0800acbb 	.word	0x0800acbb
 800ac0c:	0800acbb 	.word	0x0800acbb
 800ac10:	0800acbb 	.word	0x0800acbb
 800ac14:	0800ac87 	.word	0x0800ac87
 800ac18:	0800acbb 	.word	0x0800acbb
 800ac1c:	0800acbb 	.word	0x0800acbb
 800ac20:	0800acbb 	.word	0x0800acbb
 800ac24:	0800acbb 	.word	0x0800acbb
 800ac28:	0800acbb 	.word	0x0800acbb
 800ac2c:	0800acbb 	.word	0x0800acbb
 800ac30:	0800acbb 	.word	0x0800acbb
 800ac34:	0800acbb 	.word	0x0800acbb
 800ac38:	0800acbb 	.word	0x0800acbb
 800ac3c:	0800acbb 	.word	0x0800acbb
 800ac40:	0800acbb 	.word	0x0800acbb
 800ac44:	0800acbb 	.word	0x0800acbb
 800ac48:	0800acbb 	.word	0x0800acbb
 800ac4c:	0800acbb 	.word	0x0800acbb
 800ac50:	0800acbb 	.word	0x0800acbb
 800ac54:	0800acad 	.word	0x0800acad
 800ac58:	2b40      	cmp	r3, #64	; 0x40
 800ac5a:	d02a      	beq.n	800acb2 <UART_SetConfig+0x8aa>
 800ac5c:	e02d      	b.n	800acba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ac5e:	f7fe fa89 	bl	8009174 <HAL_RCCEx_GetD3PCLK1Freq>
 800ac62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ac64:	e02f      	b.n	800acc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fe fa98 	bl	80091a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac74:	e027      	b.n	800acc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac76:	f107 0318 	add.w	r3, r7, #24
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7fe fbe4 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac84:	e01f      	b.n	800acc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac86:	4b21      	ldr	r3, [pc, #132]	; (800ad0c <UART_SetConfig+0x904>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0320 	and.w	r3, r3, #32
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d009      	beq.n	800aca6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac92:	4b1e      	ldr	r3, [pc, #120]	; (800ad0c <UART_SetConfig+0x904>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	08db      	lsrs	r3, r3, #3
 800ac98:	f003 0303 	and.w	r3, r3, #3
 800ac9c:	4a1d      	ldr	r2, [pc, #116]	; (800ad14 <UART_SetConfig+0x90c>)
 800ac9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aca4:	e00f      	b.n	800acc6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aca6:	4b1b      	ldr	r3, [pc, #108]	; (800ad14 <UART_SetConfig+0x90c>)
 800aca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acaa:	e00c      	b.n	800acc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acac:	4b1a      	ldr	r3, [pc, #104]	; (800ad18 <UART_SetConfig+0x910>)
 800acae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acb0:	e009      	b.n	800acc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800acb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acb8:	e005      	b.n	800acc6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800acba:	2300      	movs	r3, #0
 800acbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800acc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800acc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f000 81ee 	beq.w	800b0aa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd2:	4a12      	ldr	r2, [pc, #72]	; (800ad1c <UART_SetConfig+0x914>)
 800acd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acd8:	461a      	mov	r2, r3
 800acda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acdc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ace0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	4613      	mov	r3, r2
 800ace8:	005b      	lsls	r3, r3, #1
 800acea:	4413      	add	r3, r2
 800acec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acee:	429a      	cmp	r2, r3
 800acf0:	d305      	bcc.n	800acfe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d910      	bls.n	800ad20 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ad04:	e1d1      	b.n	800b0aa <UART_SetConfig+0xca2>
 800ad06:	bf00      	nop
 800ad08:	40011c00 	.word	0x40011c00
 800ad0c:	58024400 	.word	0x58024400
 800ad10:	58000c00 	.word	0x58000c00
 800ad14:	03d09000 	.word	0x03d09000
 800ad18:	003d0900 	.word	0x003d0900
 800ad1c:	0800bb40 	.word	0x0800bb40
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad22:	2200      	movs	r2, #0
 800ad24:	60bb      	str	r3, [r7, #8]
 800ad26:	60fa      	str	r2, [r7, #12]
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	4ac0      	ldr	r2, [pc, #768]	; (800b030 <UART_SetConfig+0xc28>)
 800ad2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	2200      	movs	r2, #0
 800ad36:	603b      	str	r3, [r7, #0]
 800ad38:	607a      	str	r2, [r7, #4]
 800ad3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad42:	f7f5 fc91 	bl	8000668 <__aeabi_uldivmod>
 800ad46:	4602      	mov	r2, r0
 800ad48:	460b      	mov	r3, r1
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	f04f 0200 	mov.w	r2, #0
 800ad52:	f04f 0300 	mov.w	r3, #0
 800ad56:	020b      	lsls	r3, r1, #8
 800ad58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad5c:	0202      	lsls	r2, r0, #8
 800ad5e:	6979      	ldr	r1, [r7, #20]
 800ad60:	6849      	ldr	r1, [r1, #4]
 800ad62:	0849      	lsrs	r1, r1, #1
 800ad64:	2000      	movs	r0, #0
 800ad66:	460c      	mov	r4, r1
 800ad68:	4605      	mov	r5, r0
 800ad6a:	eb12 0804 	adds.w	r8, r2, r4
 800ad6e:	eb43 0905 	adc.w	r9, r3, r5
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	469a      	mov	sl, r3
 800ad7a:	4693      	mov	fp, r2
 800ad7c:	4652      	mov	r2, sl
 800ad7e:	465b      	mov	r3, fp
 800ad80:	4640      	mov	r0, r8
 800ad82:	4649      	mov	r1, r9
 800ad84:	f7f5 fc70 	bl	8000668 <__aeabi_uldivmod>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad96:	d308      	bcc.n	800adaa <UART_SetConfig+0x9a2>
 800ad98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad9e:	d204      	bcs.n	800adaa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ada6:	60da      	str	r2, [r3, #12]
 800ada8:	e17f      	b.n	800b0aa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800adb0:	e17b      	b.n	800b0aa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	69db      	ldr	r3, [r3, #28]
 800adb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adba:	f040 80bd 	bne.w	800af38 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800adbe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800adc2:	2b20      	cmp	r3, #32
 800adc4:	dc48      	bgt.n	800ae58 <UART_SetConfig+0xa50>
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	db7b      	blt.n	800aec2 <UART_SetConfig+0xaba>
 800adca:	2b20      	cmp	r3, #32
 800adcc:	d879      	bhi.n	800aec2 <UART_SetConfig+0xaba>
 800adce:	a201      	add	r2, pc, #4	; (adr r2, 800add4 <UART_SetConfig+0x9cc>)
 800add0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add4:	0800ae5f 	.word	0x0800ae5f
 800add8:	0800ae67 	.word	0x0800ae67
 800addc:	0800aec3 	.word	0x0800aec3
 800ade0:	0800aec3 	.word	0x0800aec3
 800ade4:	0800ae6f 	.word	0x0800ae6f
 800ade8:	0800aec3 	.word	0x0800aec3
 800adec:	0800aec3 	.word	0x0800aec3
 800adf0:	0800aec3 	.word	0x0800aec3
 800adf4:	0800ae7f 	.word	0x0800ae7f
 800adf8:	0800aec3 	.word	0x0800aec3
 800adfc:	0800aec3 	.word	0x0800aec3
 800ae00:	0800aec3 	.word	0x0800aec3
 800ae04:	0800aec3 	.word	0x0800aec3
 800ae08:	0800aec3 	.word	0x0800aec3
 800ae0c:	0800aec3 	.word	0x0800aec3
 800ae10:	0800aec3 	.word	0x0800aec3
 800ae14:	0800ae8f 	.word	0x0800ae8f
 800ae18:	0800aec3 	.word	0x0800aec3
 800ae1c:	0800aec3 	.word	0x0800aec3
 800ae20:	0800aec3 	.word	0x0800aec3
 800ae24:	0800aec3 	.word	0x0800aec3
 800ae28:	0800aec3 	.word	0x0800aec3
 800ae2c:	0800aec3 	.word	0x0800aec3
 800ae30:	0800aec3 	.word	0x0800aec3
 800ae34:	0800aec3 	.word	0x0800aec3
 800ae38:	0800aec3 	.word	0x0800aec3
 800ae3c:	0800aec3 	.word	0x0800aec3
 800ae40:	0800aec3 	.word	0x0800aec3
 800ae44:	0800aec3 	.word	0x0800aec3
 800ae48:	0800aec3 	.word	0x0800aec3
 800ae4c:	0800aec3 	.word	0x0800aec3
 800ae50:	0800aec3 	.word	0x0800aec3
 800ae54:	0800aeb5 	.word	0x0800aeb5
 800ae58:	2b40      	cmp	r3, #64	; 0x40
 800ae5a:	d02e      	beq.n	800aeba <UART_SetConfig+0xab2>
 800ae5c:	e031      	b.n	800aec2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae5e:	f7fc fe23 	bl	8007aa8 <HAL_RCC_GetPCLK1Freq>
 800ae62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae64:	e033      	b.n	800aece <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae66:	f7fc fe35 	bl	8007ad4 <HAL_RCC_GetPCLK2Freq>
 800ae6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ae6c:	e02f      	b.n	800aece <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fe f994 	bl	80091a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae7c:	e027      	b.n	800aece <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae7e:	f107 0318 	add.w	r3, r7, #24
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fe fae0 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae8c:	e01f      	b.n	800aece <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae8e:	4b69      	ldr	r3, [pc, #420]	; (800b034 <UART_SetConfig+0xc2c>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 0320 	and.w	r3, r3, #32
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d009      	beq.n	800aeae <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae9a:	4b66      	ldr	r3, [pc, #408]	; (800b034 <UART_SetConfig+0xc2c>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	08db      	lsrs	r3, r3, #3
 800aea0:	f003 0303 	and.w	r3, r3, #3
 800aea4:	4a64      	ldr	r2, [pc, #400]	; (800b038 <UART_SetConfig+0xc30>)
 800aea6:	fa22 f303 	lsr.w	r3, r2, r3
 800aeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aeac:	e00f      	b.n	800aece <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800aeae:	4b62      	ldr	r3, [pc, #392]	; (800b038 <UART_SetConfig+0xc30>)
 800aeb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeb2:	e00c      	b.n	800aece <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aeb4:	4b61      	ldr	r3, [pc, #388]	; (800b03c <UART_SetConfig+0xc34>)
 800aeb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeb8:	e009      	b.n	800aece <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aeba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aec0:	e005      	b.n	800aece <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800aec2:	2300      	movs	r3, #0
 800aec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aecc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	f000 80ea 	beq.w	800b0aa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeda:	4a55      	ldr	r2, [pc, #340]	; (800b030 <UART_SetConfig+0xc28>)
 800aedc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aee0:	461a      	mov	r2, r3
 800aee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aee4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aee8:	005a      	lsls	r2, r3, #1
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	085b      	lsrs	r3, r3, #1
 800aef0:	441a      	add	r2, r3
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aefa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefe:	2b0f      	cmp	r3, #15
 800af00:	d916      	bls.n	800af30 <UART_SetConfig+0xb28>
 800af02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af08:	d212      	bcs.n	800af30 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	f023 030f 	bic.w	r3, r3, #15
 800af12:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af16:	085b      	lsrs	r3, r3, #1
 800af18:	b29b      	uxth	r3, r3
 800af1a:	f003 0307 	and.w	r3, r3, #7
 800af1e:	b29a      	uxth	r2, r3
 800af20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af22:	4313      	orrs	r3, r2
 800af24:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800af2c:	60da      	str	r2, [r3, #12]
 800af2e:	e0bc      	b.n	800b0aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800af36:	e0b8      	b.n	800b0aa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800af3c:	2b20      	cmp	r3, #32
 800af3e:	dc4b      	bgt.n	800afd8 <UART_SetConfig+0xbd0>
 800af40:	2b00      	cmp	r3, #0
 800af42:	f2c0 8087 	blt.w	800b054 <UART_SetConfig+0xc4c>
 800af46:	2b20      	cmp	r3, #32
 800af48:	f200 8084 	bhi.w	800b054 <UART_SetConfig+0xc4c>
 800af4c:	a201      	add	r2, pc, #4	; (adr r2, 800af54 <UART_SetConfig+0xb4c>)
 800af4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af52:	bf00      	nop
 800af54:	0800afdf 	.word	0x0800afdf
 800af58:	0800afe7 	.word	0x0800afe7
 800af5c:	0800b055 	.word	0x0800b055
 800af60:	0800b055 	.word	0x0800b055
 800af64:	0800afef 	.word	0x0800afef
 800af68:	0800b055 	.word	0x0800b055
 800af6c:	0800b055 	.word	0x0800b055
 800af70:	0800b055 	.word	0x0800b055
 800af74:	0800afff 	.word	0x0800afff
 800af78:	0800b055 	.word	0x0800b055
 800af7c:	0800b055 	.word	0x0800b055
 800af80:	0800b055 	.word	0x0800b055
 800af84:	0800b055 	.word	0x0800b055
 800af88:	0800b055 	.word	0x0800b055
 800af8c:	0800b055 	.word	0x0800b055
 800af90:	0800b055 	.word	0x0800b055
 800af94:	0800b00f 	.word	0x0800b00f
 800af98:	0800b055 	.word	0x0800b055
 800af9c:	0800b055 	.word	0x0800b055
 800afa0:	0800b055 	.word	0x0800b055
 800afa4:	0800b055 	.word	0x0800b055
 800afa8:	0800b055 	.word	0x0800b055
 800afac:	0800b055 	.word	0x0800b055
 800afb0:	0800b055 	.word	0x0800b055
 800afb4:	0800b055 	.word	0x0800b055
 800afb8:	0800b055 	.word	0x0800b055
 800afbc:	0800b055 	.word	0x0800b055
 800afc0:	0800b055 	.word	0x0800b055
 800afc4:	0800b055 	.word	0x0800b055
 800afc8:	0800b055 	.word	0x0800b055
 800afcc:	0800b055 	.word	0x0800b055
 800afd0:	0800b055 	.word	0x0800b055
 800afd4:	0800b047 	.word	0x0800b047
 800afd8:	2b40      	cmp	r3, #64	; 0x40
 800afda:	d037      	beq.n	800b04c <UART_SetConfig+0xc44>
 800afdc:	e03a      	b.n	800b054 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afde:	f7fc fd63 	bl	8007aa8 <HAL_RCC_GetPCLK1Freq>
 800afe2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800afe4:	e03c      	b.n	800b060 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afe6:	f7fc fd75 	bl	8007ad4 <HAL_RCC_GetPCLK2Freq>
 800afea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800afec:	e038      	b.n	800b060 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7fe f8d4 	bl	80091a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800affc:	e030      	b.n	800b060 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800affe:	f107 0318 	add.w	r3, r7, #24
 800b002:	4618      	mov	r0, r3
 800b004:	f7fe fa20 	bl	8009448 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b00c:	e028      	b.n	800b060 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b00e:	4b09      	ldr	r3, [pc, #36]	; (800b034 <UART_SetConfig+0xc2c>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f003 0320 	and.w	r3, r3, #32
 800b016:	2b00      	cmp	r3, #0
 800b018:	d012      	beq.n	800b040 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b01a:	4b06      	ldr	r3, [pc, #24]	; (800b034 <UART_SetConfig+0xc2c>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	08db      	lsrs	r3, r3, #3
 800b020:	f003 0303 	and.w	r3, r3, #3
 800b024:	4a04      	ldr	r2, [pc, #16]	; (800b038 <UART_SetConfig+0xc30>)
 800b026:	fa22 f303 	lsr.w	r3, r2, r3
 800b02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b02c:	e018      	b.n	800b060 <UART_SetConfig+0xc58>
 800b02e:	bf00      	nop
 800b030:	0800bb40 	.word	0x0800bb40
 800b034:	58024400 	.word	0x58024400
 800b038:	03d09000 	.word	0x03d09000
 800b03c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b040:	4b24      	ldr	r3, [pc, #144]	; (800b0d4 <UART_SetConfig+0xccc>)
 800b042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b044:	e00c      	b.n	800b060 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b046:	4b24      	ldr	r3, [pc, #144]	; (800b0d8 <UART_SetConfig+0xcd0>)
 800b048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b04a:	e009      	b.n	800b060 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b04c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b052:	e005      	b.n	800b060 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b054:	2300      	movs	r3, #0
 800b056:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b05e:	bf00      	nop
    }

    if (pclk != 0U)
 800b060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b062:	2b00      	cmp	r3, #0
 800b064:	d021      	beq.n	800b0aa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06a:	4a1c      	ldr	r2, [pc, #112]	; (800b0dc <UART_SetConfig+0xcd4>)
 800b06c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b070:	461a      	mov	r2, r3
 800b072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b074:	fbb3 f2f2 	udiv	r2, r3, r2
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	085b      	lsrs	r3, r3, #1
 800b07e:	441a      	add	r2, r3
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	fbb2 f3f3 	udiv	r3, r2, r3
 800b088:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08c:	2b0f      	cmp	r3, #15
 800b08e:	d909      	bls.n	800b0a4 <UART_SetConfig+0xc9c>
 800b090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b096:	d205      	bcs.n	800b0a4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09a:	b29a      	uxth	r2, r3
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	60da      	str	r2, [r3, #12]
 800b0a2:	e002      	b.n	800b0aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b0c6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3748      	adds	r7, #72	; 0x48
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b0d4:	03d09000 	.word	0x03d09000
 800b0d8:	003d0900 	.word	0x003d0900
 800b0dc:	0800bb40 	.word	0x0800bb40

0800b0e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ec:	f003 0301 	and.w	r3, r3, #1
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d00a      	beq.n	800b10a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	430a      	orrs	r2, r1
 800b108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b10e:	f003 0302 	and.w	r3, r3, #2
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00a      	beq.n	800b12c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	430a      	orrs	r2, r1
 800b12a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b130:	f003 0304 	and.w	r3, r3, #4
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00a      	beq.n	800b14e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	430a      	orrs	r2, r1
 800b14c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b152:	f003 0308 	and.w	r3, r3, #8
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00a      	beq.n	800b170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	430a      	orrs	r2, r1
 800b16e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b174:	f003 0310 	and.w	r3, r3, #16
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00a      	beq.n	800b192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	430a      	orrs	r2, r1
 800b190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b196:	f003 0320 	and.w	r3, r3, #32
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00a      	beq.n	800b1b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	430a      	orrs	r2, r1
 800b1b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d01a      	beq.n	800b1f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	430a      	orrs	r2, r1
 800b1d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1de:	d10a      	bne.n	800b1f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	430a      	orrs	r2, r1
 800b1f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d00a      	beq.n	800b218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	430a      	orrs	r2, r1
 800b216:	605a      	str	r2, [r3, #4]
  }
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af02      	add	r7, sp, #8
 800b22a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b234:	f7f7 fb90 	bl	8002958 <HAL_GetTick>
 800b238:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f003 0308 	and.w	r3, r3, #8
 800b244:	2b08      	cmp	r3, #8
 800b246:	d10e      	bne.n	800b266 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f82f 	bl	800b2ba <UART_WaitOnFlagUntilTimeout>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b262:	2303      	movs	r3, #3
 800b264:	e025      	b.n	800b2b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 0304 	and.w	r3, r3, #4
 800b270:	2b04      	cmp	r3, #4
 800b272:	d10e      	bne.n	800b292 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 f819 	bl	800b2ba <UART_WaitOnFlagUntilTimeout>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b28e:	2303      	movs	r3, #3
 800b290:	e00f      	b.n	800b2b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2220      	movs	r2, #32
 800b296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2220      	movs	r2, #32
 800b29e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b09c      	sub	sp, #112	; 0x70
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	60f8      	str	r0, [r7, #12]
 800b2c2:	60b9      	str	r1, [r7, #8]
 800b2c4:	603b      	str	r3, [r7, #0]
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2ca:	e0a9      	b.n	800b420 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d2:	f000 80a5 	beq.w	800b420 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2d6:	f7f7 fb3f 	bl	8002958 <HAL_GetTick>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	1ad3      	subs	r3, r2, r3
 800b2e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d302      	bcc.n	800b2ec <UART_WaitOnFlagUntilTimeout+0x32>
 800b2e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d140      	bne.n	800b36e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2f4:	e853 3f00 	ldrex	r3, [r3]
 800b2f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b2fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b300:	667b      	str	r3, [r7, #100]	; 0x64
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	461a      	mov	r2, r3
 800b308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b30a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b30c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b310:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b312:	e841 2300 	strex	r3, r2, [r1]
 800b316:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d1e6      	bne.n	800b2ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3308      	adds	r3, #8
 800b324:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b328:	e853 3f00 	ldrex	r3, [r3]
 800b32c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b330:	f023 0301 	bic.w	r3, r3, #1
 800b334:	663b      	str	r3, [r7, #96]	; 0x60
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	3308      	adds	r3, #8
 800b33c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b33e:	64ba      	str	r2, [r7, #72]	; 0x48
 800b340:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b342:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b346:	e841 2300 	strex	r3, r2, [r1]
 800b34a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b34c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1e5      	bne.n	800b31e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2220      	movs	r2, #32
 800b356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2220      	movs	r2, #32
 800b35e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b36a:	2303      	movs	r3, #3
 800b36c:	e069      	b.n	800b442 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f003 0304 	and.w	r3, r3, #4
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d051      	beq.n	800b420 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	69db      	ldr	r3, [r3, #28]
 800b382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b38a:	d149      	bne.n	800b420 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b394:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39e:	e853 3f00 	ldrex	r3, [r3]
 800b3a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b3aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3b4:	637b      	str	r3, [r7, #52]	; 0x34
 800b3b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3bc:	e841 2300 	strex	r3, r2, [r1]
 800b3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1e6      	bne.n	800b396 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	3308      	adds	r3, #8
 800b3ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	e853 3f00 	ldrex	r3, [r3]
 800b3d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	f023 0301 	bic.w	r3, r3, #1
 800b3de:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3308      	adds	r3, #8
 800b3e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b3e8:	623a      	str	r2, [r7, #32]
 800b3ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ec:	69f9      	ldr	r1, [r7, #28]
 800b3ee:	6a3a      	ldr	r2, [r7, #32]
 800b3f0:	e841 2300 	strex	r3, r2, [r1]
 800b3f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1e5      	bne.n	800b3c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2220      	movs	r2, #32
 800b400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2220      	movs	r2, #32
 800b408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2220      	movs	r2, #32
 800b410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b41c:	2303      	movs	r3, #3
 800b41e:	e010      	b.n	800b442 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	69da      	ldr	r2, [r3, #28]
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	4013      	ands	r3, r2
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	bf0c      	ite	eq
 800b430:	2301      	moveq	r3, #1
 800b432:	2300      	movne	r3, #0
 800b434:	b2db      	uxtb	r3, r3
 800b436:	461a      	mov	r2, r3
 800b438:	79fb      	ldrb	r3, [r7, #7]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	f43f af46 	beq.w	800b2cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	3770      	adds	r7, #112	; 0x70
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b44a:	b480      	push	{r7}
 800b44c:	b085      	sub	sp, #20
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d101      	bne.n	800b460 <HAL_UARTEx_DisableFifoMode+0x16>
 800b45c:	2302      	movs	r3, #2
 800b45e:	e027      	b.n	800b4b0 <HAL_UARTEx_DisableFifoMode+0x66>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2224      	movs	r2, #36	; 0x24
 800b46c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f022 0201 	bic.w	r2, r2, #1
 800b486:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b48e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2220      	movs	r2, #32
 800b4a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d101      	bne.n	800b4d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	e02d      	b.n	800b530 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2224      	movs	r2, #36	; 0x24
 800b4e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f022 0201 	bic.w	r2, r2, #1
 800b4fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	430a      	orrs	r2, r1
 800b50e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 f84f 	bl	800b5b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2220      	movs	r2, #32
 800b522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d101      	bne.n	800b550 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b54c:	2302      	movs	r3, #2
 800b54e:	e02d      	b.n	800b5ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2224      	movs	r2, #36	; 0x24
 800b55c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f022 0201 	bic.w	r2, r2, #1
 800b576:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	683a      	ldr	r2, [r7, #0]
 800b588:	430a      	orrs	r2, r1
 800b58a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 f811 	bl	800b5b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	68fa      	ldr	r2, [r7, #12]
 800b598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2220      	movs	r2, #32
 800b59e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b085      	sub	sp, #20
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d108      	bne.n	800b5d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b5d4:	e031      	b.n	800b63a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b5d6:	2310      	movs	r3, #16
 800b5d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b5da:	2310      	movs	r3, #16
 800b5dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	0e5b      	lsrs	r3, r3, #25
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	f003 0307 	and.w	r3, r3, #7
 800b5ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	0f5b      	lsrs	r3, r3, #29
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	f003 0307 	and.w	r3, r3, #7
 800b5fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5fe:	7bbb      	ldrb	r3, [r7, #14]
 800b600:	7b3a      	ldrb	r2, [r7, #12]
 800b602:	4911      	ldr	r1, [pc, #68]	; (800b648 <UARTEx_SetNbDataToProcess+0x94>)
 800b604:	5c8a      	ldrb	r2, [r1, r2]
 800b606:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b60a:	7b3a      	ldrb	r2, [r7, #12]
 800b60c:	490f      	ldr	r1, [pc, #60]	; (800b64c <UARTEx_SetNbDataToProcess+0x98>)
 800b60e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b610:	fb93 f3f2 	sdiv	r3, r3, r2
 800b614:	b29a      	uxth	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
 800b61e:	7b7a      	ldrb	r2, [r7, #13]
 800b620:	4909      	ldr	r1, [pc, #36]	; (800b648 <UARTEx_SetNbDataToProcess+0x94>)
 800b622:	5c8a      	ldrb	r2, [r1, r2]
 800b624:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b628:	7b7a      	ldrb	r2, [r7, #13]
 800b62a:	4908      	ldr	r1, [pc, #32]	; (800b64c <UARTEx_SetNbDataToProcess+0x98>)
 800b62c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b62e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b632:	b29a      	uxth	r2, r3
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b63a:	bf00      	nop
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	0800bb58 	.word	0x0800bb58
 800b64c:	0800bb60 	.word	0x0800bb60

0800b650 <__errno>:
 800b650:	4b01      	ldr	r3, [pc, #4]	; (800b658 <__errno+0x8>)
 800b652:	6818      	ldr	r0, [r3, #0]
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop
 800b658:	24000014 	.word	0x24000014

0800b65c <__libc_init_array>:
 800b65c:	b570      	push	{r4, r5, r6, lr}
 800b65e:	4d0d      	ldr	r5, [pc, #52]	; (800b694 <__libc_init_array+0x38>)
 800b660:	4c0d      	ldr	r4, [pc, #52]	; (800b698 <__libc_init_array+0x3c>)
 800b662:	1b64      	subs	r4, r4, r5
 800b664:	10a4      	asrs	r4, r4, #2
 800b666:	2600      	movs	r6, #0
 800b668:	42a6      	cmp	r6, r4
 800b66a:	d109      	bne.n	800b680 <__libc_init_array+0x24>
 800b66c:	4d0b      	ldr	r5, [pc, #44]	; (800b69c <__libc_init_array+0x40>)
 800b66e:	4c0c      	ldr	r4, [pc, #48]	; (800b6a0 <__libc_init_array+0x44>)
 800b670:	f000 fa4c 	bl	800bb0c <_init>
 800b674:	1b64      	subs	r4, r4, r5
 800b676:	10a4      	asrs	r4, r4, #2
 800b678:	2600      	movs	r6, #0
 800b67a:	42a6      	cmp	r6, r4
 800b67c:	d105      	bne.n	800b68a <__libc_init_array+0x2e>
 800b67e:	bd70      	pop	{r4, r5, r6, pc}
 800b680:	f855 3b04 	ldr.w	r3, [r5], #4
 800b684:	4798      	blx	r3
 800b686:	3601      	adds	r6, #1
 800b688:	e7ee      	b.n	800b668 <__libc_init_array+0xc>
 800b68a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b68e:	4798      	blx	r3
 800b690:	3601      	adds	r6, #1
 800b692:	e7f2      	b.n	800b67a <__libc_init_array+0x1e>
 800b694:	0800bcb0 	.word	0x0800bcb0
 800b698:	0800bcb0 	.word	0x0800bcb0
 800b69c:	0800bcb0 	.word	0x0800bcb0
 800b6a0:	0800bcb4 	.word	0x0800bcb4

0800b6a4 <malloc>:
 800b6a4:	4b02      	ldr	r3, [pc, #8]	; (800b6b0 <malloc+0xc>)
 800b6a6:	4601      	mov	r1, r0
 800b6a8:	6818      	ldr	r0, [r3, #0]
 800b6aa:	f000 b87f 	b.w	800b7ac <_malloc_r>
 800b6ae:	bf00      	nop
 800b6b0:	24000014 	.word	0x24000014

0800b6b4 <free>:
 800b6b4:	4b02      	ldr	r3, [pc, #8]	; (800b6c0 <free+0xc>)
 800b6b6:	4601      	mov	r1, r0
 800b6b8:	6818      	ldr	r0, [r3, #0]
 800b6ba:	f000 b80b 	b.w	800b6d4 <_free_r>
 800b6be:	bf00      	nop
 800b6c0:	24000014 	.word	0x24000014

0800b6c4 <memset>:
 800b6c4:	4402      	add	r2, r0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d100      	bne.n	800b6ce <memset+0xa>
 800b6cc:	4770      	bx	lr
 800b6ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b6d2:	e7f9      	b.n	800b6c8 <memset+0x4>

0800b6d4 <_free_r>:
 800b6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6d6:	2900      	cmp	r1, #0
 800b6d8:	d044      	beq.n	800b764 <_free_r+0x90>
 800b6da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6de:	9001      	str	r0, [sp, #4]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f1a1 0404 	sub.w	r4, r1, #4
 800b6e6:	bfb8      	it	lt
 800b6e8:	18e4      	addlt	r4, r4, r3
 800b6ea:	f000 f8e3 	bl	800b8b4 <__malloc_lock>
 800b6ee:	4a1e      	ldr	r2, [pc, #120]	; (800b768 <_free_r+0x94>)
 800b6f0:	9801      	ldr	r0, [sp, #4]
 800b6f2:	6813      	ldr	r3, [r2, #0]
 800b6f4:	b933      	cbnz	r3, 800b704 <_free_r+0x30>
 800b6f6:	6063      	str	r3, [r4, #4]
 800b6f8:	6014      	str	r4, [r2, #0]
 800b6fa:	b003      	add	sp, #12
 800b6fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b700:	f000 b8de 	b.w	800b8c0 <__malloc_unlock>
 800b704:	42a3      	cmp	r3, r4
 800b706:	d908      	bls.n	800b71a <_free_r+0x46>
 800b708:	6825      	ldr	r5, [r4, #0]
 800b70a:	1961      	adds	r1, r4, r5
 800b70c:	428b      	cmp	r3, r1
 800b70e:	bf01      	itttt	eq
 800b710:	6819      	ldreq	r1, [r3, #0]
 800b712:	685b      	ldreq	r3, [r3, #4]
 800b714:	1949      	addeq	r1, r1, r5
 800b716:	6021      	streq	r1, [r4, #0]
 800b718:	e7ed      	b.n	800b6f6 <_free_r+0x22>
 800b71a:	461a      	mov	r2, r3
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	b10b      	cbz	r3, 800b724 <_free_r+0x50>
 800b720:	42a3      	cmp	r3, r4
 800b722:	d9fa      	bls.n	800b71a <_free_r+0x46>
 800b724:	6811      	ldr	r1, [r2, #0]
 800b726:	1855      	adds	r5, r2, r1
 800b728:	42a5      	cmp	r5, r4
 800b72a:	d10b      	bne.n	800b744 <_free_r+0x70>
 800b72c:	6824      	ldr	r4, [r4, #0]
 800b72e:	4421      	add	r1, r4
 800b730:	1854      	adds	r4, r2, r1
 800b732:	42a3      	cmp	r3, r4
 800b734:	6011      	str	r1, [r2, #0]
 800b736:	d1e0      	bne.n	800b6fa <_free_r+0x26>
 800b738:	681c      	ldr	r4, [r3, #0]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	6053      	str	r3, [r2, #4]
 800b73e:	4421      	add	r1, r4
 800b740:	6011      	str	r1, [r2, #0]
 800b742:	e7da      	b.n	800b6fa <_free_r+0x26>
 800b744:	d902      	bls.n	800b74c <_free_r+0x78>
 800b746:	230c      	movs	r3, #12
 800b748:	6003      	str	r3, [r0, #0]
 800b74a:	e7d6      	b.n	800b6fa <_free_r+0x26>
 800b74c:	6825      	ldr	r5, [r4, #0]
 800b74e:	1961      	adds	r1, r4, r5
 800b750:	428b      	cmp	r3, r1
 800b752:	bf04      	itt	eq
 800b754:	6819      	ldreq	r1, [r3, #0]
 800b756:	685b      	ldreq	r3, [r3, #4]
 800b758:	6063      	str	r3, [r4, #4]
 800b75a:	bf04      	itt	eq
 800b75c:	1949      	addeq	r1, r1, r5
 800b75e:	6021      	streq	r1, [r4, #0]
 800b760:	6054      	str	r4, [r2, #4]
 800b762:	e7ca      	b.n	800b6fa <_free_r+0x26>
 800b764:	b003      	add	sp, #12
 800b766:	bd30      	pop	{r4, r5, pc}
 800b768:	24000c48 	.word	0x24000c48

0800b76c <sbrk_aligned>:
 800b76c:	b570      	push	{r4, r5, r6, lr}
 800b76e:	4e0e      	ldr	r6, [pc, #56]	; (800b7a8 <sbrk_aligned+0x3c>)
 800b770:	460c      	mov	r4, r1
 800b772:	6831      	ldr	r1, [r6, #0]
 800b774:	4605      	mov	r5, r0
 800b776:	b911      	cbnz	r1, 800b77e <sbrk_aligned+0x12>
 800b778:	f000 f88c 	bl	800b894 <_sbrk_r>
 800b77c:	6030      	str	r0, [r6, #0]
 800b77e:	4621      	mov	r1, r4
 800b780:	4628      	mov	r0, r5
 800b782:	f000 f887 	bl	800b894 <_sbrk_r>
 800b786:	1c43      	adds	r3, r0, #1
 800b788:	d00a      	beq.n	800b7a0 <sbrk_aligned+0x34>
 800b78a:	1cc4      	adds	r4, r0, #3
 800b78c:	f024 0403 	bic.w	r4, r4, #3
 800b790:	42a0      	cmp	r0, r4
 800b792:	d007      	beq.n	800b7a4 <sbrk_aligned+0x38>
 800b794:	1a21      	subs	r1, r4, r0
 800b796:	4628      	mov	r0, r5
 800b798:	f000 f87c 	bl	800b894 <_sbrk_r>
 800b79c:	3001      	adds	r0, #1
 800b79e:	d101      	bne.n	800b7a4 <sbrk_aligned+0x38>
 800b7a0:	f04f 34ff 	mov.w	r4, #4294967295
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	bd70      	pop	{r4, r5, r6, pc}
 800b7a8:	24000c4c 	.word	0x24000c4c

0800b7ac <_malloc_r>:
 800b7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b0:	1ccd      	adds	r5, r1, #3
 800b7b2:	f025 0503 	bic.w	r5, r5, #3
 800b7b6:	3508      	adds	r5, #8
 800b7b8:	2d0c      	cmp	r5, #12
 800b7ba:	bf38      	it	cc
 800b7bc:	250c      	movcc	r5, #12
 800b7be:	2d00      	cmp	r5, #0
 800b7c0:	4607      	mov	r7, r0
 800b7c2:	db01      	blt.n	800b7c8 <_malloc_r+0x1c>
 800b7c4:	42a9      	cmp	r1, r5
 800b7c6:	d905      	bls.n	800b7d4 <_malloc_r+0x28>
 800b7c8:	230c      	movs	r3, #12
 800b7ca:	603b      	str	r3, [r7, #0]
 800b7cc:	2600      	movs	r6, #0
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7d4:	4e2e      	ldr	r6, [pc, #184]	; (800b890 <_malloc_r+0xe4>)
 800b7d6:	f000 f86d 	bl	800b8b4 <__malloc_lock>
 800b7da:	6833      	ldr	r3, [r6, #0]
 800b7dc:	461c      	mov	r4, r3
 800b7de:	bb34      	cbnz	r4, 800b82e <_malloc_r+0x82>
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	4638      	mov	r0, r7
 800b7e4:	f7ff ffc2 	bl	800b76c <sbrk_aligned>
 800b7e8:	1c43      	adds	r3, r0, #1
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	d14d      	bne.n	800b88a <_malloc_r+0xde>
 800b7ee:	6834      	ldr	r4, [r6, #0]
 800b7f0:	4626      	mov	r6, r4
 800b7f2:	2e00      	cmp	r6, #0
 800b7f4:	d140      	bne.n	800b878 <_malloc_r+0xcc>
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	4631      	mov	r1, r6
 800b7fa:	4638      	mov	r0, r7
 800b7fc:	eb04 0803 	add.w	r8, r4, r3
 800b800:	f000 f848 	bl	800b894 <_sbrk_r>
 800b804:	4580      	cmp	r8, r0
 800b806:	d13a      	bne.n	800b87e <_malloc_r+0xd2>
 800b808:	6821      	ldr	r1, [r4, #0]
 800b80a:	3503      	adds	r5, #3
 800b80c:	1a6d      	subs	r5, r5, r1
 800b80e:	f025 0503 	bic.w	r5, r5, #3
 800b812:	3508      	adds	r5, #8
 800b814:	2d0c      	cmp	r5, #12
 800b816:	bf38      	it	cc
 800b818:	250c      	movcc	r5, #12
 800b81a:	4629      	mov	r1, r5
 800b81c:	4638      	mov	r0, r7
 800b81e:	f7ff ffa5 	bl	800b76c <sbrk_aligned>
 800b822:	3001      	adds	r0, #1
 800b824:	d02b      	beq.n	800b87e <_malloc_r+0xd2>
 800b826:	6823      	ldr	r3, [r4, #0]
 800b828:	442b      	add	r3, r5
 800b82a:	6023      	str	r3, [r4, #0]
 800b82c:	e00e      	b.n	800b84c <_malloc_r+0xa0>
 800b82e:	6822      	ldr	r2, [r4, #0]
 800b830:	1b52      	subs	r2, r2, r5
 800b832:	d41e      	bmi.n	800b872 <_malloc_r+0xc6>
 800b834:	2a0b      	cmp	r2, #11
 800b836:	d916      	bls.n	800b866 <_malloc_r+0xba>
 800b838:	1961      	adds	r1, r4, r5
 800b83a:	42a3      	cmp	r3, r4
 800b83c:	6025      	str	r5, [r4, #0]
 800b83e:	bf18      	it	ne
 800b840:	6059      	strne	r1, [r3, #4]
 800b842:	6863      	ldr	r3, [r4, #4]
 800b844:	bf08      	it	eq
 800b846:	6031      	streq	r1, [r6, #0]
 800b848:	5162      	str	r2, [r4, r5]
 800b84a:	604b      	str	r3, [r1, #4]
 800b84c:	4638      	mov	r0, r7
 800b84e:	f104 060b 	add.w	r6, r4, #11
 800b852:	f000 f835 	bl	800b8c0 <__malloc_unlock>
 800b856:	f026 0607 	bic.w	r6, r6, #7
 800b85a:	1d23      	adds	r3, r4, #4
 800b85c:	1af2      	subs	r2, r6, r3
 800b85e:	d0b6      	beq.n	800b7ce <_malloc_r+0x22>
 800b860:	1b9b      	subs	r3, r3, r6
 800b862:	50a3      	str	r3, [r4, r2]
 800b864:	e7b3      	b.n	800b7ce <_malloc_r+0x22>
 800b866:	6862      	ldr	r2, [r4, #4]
 800b868:	42a3      	cmp	r3, r4
 800b86a:	bf0c      	ite	eq
 800b86c:	6032      	streq	r2, [r6, #0]
 800b86e:	605a      	strne	r2, [r3, #4]
 800b870:	e7ec      	b.n	800b84c <_malloc_r+0xa0>
 800b872:	4623      	mov	r3, r4
 800b874:	6864      	ldr	r4, [r4, #4]
 800b876:	e7b2      	b.n	800b7de <_malloc_r+0x32>
 800b878:	4634      	mov	r4, r6
 800b87a:	6876      	ldr	r6, [r6, #4]
 800b87c:	e7b9      	b.n	800b7f2 <_malloc_r+0x46>
 800b87e:	230c      	movs	r3, #12
 800b880:	603b      	str	r3, [r7, #0]
 800b882:	4638      	mov	r0, r7
 800b884:	f000 f81c 	bl	800b8c0 <__malloc_unlock>
 800b888:	e7a1      	b.n	800b7ce <_malloc_r+0x22>
 800b88a:	6025      	str	r5, [r4, #0]
 800b88c:	e7de      	b.n	800b84c <_malloc_r+0xa0>
 800b88e:	bf00      	nop
 800b890:	24000c48 	.word	0x24000c48

0800b894 <_sbrk_r>:
 800b894:	b538      	push	{r3, r4, r5, lr}
 800b896:	4d06      	ldr	r5, [pc, #24]	; (800b8b0 <_sbrk_r+0x1c>)
 800b898:	2300      	movs	r3, #0
 800b89a:	4604      	mov	r4, r0
 800b89c:	4608      	mov	r0, r1
 800b89e:	602b      	str	r3, [r5, #0]
 800b8a0:	f7f6 fd7e 	bl	80023a0 <_sbrk>
 800b8a4:	1c43      	adds	r3, r0, #1
 800b8a6:	d102      	bne.n	800b8ae <_sbrk_r+0x1a>
 800b8a8:	682b      	ldr	r3, [r5, #0]
 800b8aa:	b103      	cbz	r3, 800b8ae <_sbrk_r+0x1a>
 800b8ac:	6023      	str	r3, [r4, #0]
 800b8ae:	bd38      	pop	{r3, r4, r5, pc}
 800b8b0:	24000c50 	.word	0x24000c50

0800b8b4 <__malloc_lock>:
 800b8b4:	4801      	ldr	r0, [pc, #4]	; (800b8bc <__malloc_lock+0x8>)
 800b8b6:	f000 b809 	b.w	800b8cc <__retarget_lock_acquire_recursive>
 800b8ba:	bf00      	nop
 800b8bc:	24000c54 	.word	0x24000c54

0800b8c0 <__malloc_unlock>:
 800b8c0:	4801      	ldr	r0, [pc, #4]	; (800b8c8 <__malloc_unlock+0x8>)
 800b8c2:	f000 b804 	b.w	800b8ce <__retarget_lock_release_recursive>
 800b8c6:	bf00      	nop
 800b8c8:	24000c54 	.word	0x24000c54

0800b8cc <__retarget_lock_acquire_recursive>:
 800b8cc:	4770      	bx	lr

0800b8ce <__retarget_lock_release_recursive>:
 800b8ce:	4770      	bx	lr

0800b8d0 <floorf>:
 800b8d0:	ee10 3a10 	vmov	r3, s0
 800b8d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b8d8:	3a7f      	subs	r2, #127	; 0x7f
 800b8da:	2a16      	cmp	r2, #22
 800b8dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b8e0:	dc2a      	bgt.n	800b938 <floorf+0x68>
 800b8e2:	2a00      	cmp	r2, #0
 800b8e4:	da11      	bge.n	800b90a <floorf+0x3a>
 800b8e6:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b948 <floorf+0x78>
 800b8ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b8ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f6:	dd05      	ble.n	800b904 <floorf+0x34>
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	da23      	bge.n	800b944 <floorf+0x74>
 800b8fc:	4a13      	ldr	r2, [pc, #76]	; (800b94c <floorf+0x7c>)
 800b8fe:	2900      	cmp	r1, #0
 800b900:	bf18      	it	ne
 800b902:	4613      	movne	r3, r2
 800b904:	ee00 3a10 	vmov	s0, r3
 800b908:	4770      	bx	lr
 800b90a:	4911      	ldr	r1, [pc, #68]	; (800b950 <floorf+0x80>)
 800b90c:	4111      	asrs	r1, r2
 800b90e:	420b      	tst	r3, r1
 800b910:	d0fa      	beq.n	800b908 <floorf+0x38>
 800b912:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b948 <floorf+0x78>
 800b916:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b91a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b922:	ddef      	ble.n	800b904 <floorf+0x34>
 800b924:	2b00      	cmp	r3, #0
 800b926:	bfbe      	ittt	lt
 800b928:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b92c:	fa40 f202 	asrlt.w	r2, r0, r2
 800b930:	189b      	addlt	r3, r3, r2
 800b932:	ea23 0301 	bic.w	r3, r3, r1
 800b936:	e7e5      	b.n	800b904 <floorf+0x34>
 800b938:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b93c:	d3e4      	bcc.n	800b908 <floorf+0x38>
 800b93e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b942:	4770      	bx	lr
 800b944:	2300      	movs	r3, #0
 800b946:	e7dd      	b.n	800b904 <floorf+0x34>
 800b948:	7149f2ca 	.word	0x7149f2ca
 800b94c:	bf800000 	.word	0xbf800000
 800b950:	007fffff 	.word	0x007fffff

0800b954 <sinf_poly>:
 800b954:	07cb      	lsls	r3, r1, #31
 800b956:	d412      	bmi.n	800b97e <sinf_poly+0x2a>
 800b958:	ee21 5b00 	vmul.f64	d5, d1, d0
 800b95c:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 800b960:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800b964:	eea6 7b01 	vfma.f64	d7, d6, d1
 800b968:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 800b96c:	ee21 1b05 	vmul.f64	d1, d1, d5
 800b970:	eea6 0b05 	vfma.f64	d0, d6, d5
 800b974:	eea7 0b01 	vfma.f64	d0, d7, d1
 800b978:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b97c:	4770      	bx	lr
 800b97e:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 800b982:	ee21 5b01 	vmul.f64	d5, d1, d1
 800b986:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800b98a:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800b98e:	eea1 7b06 	vfma.f64	d7, d1, d6
 800b992:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 800b996:	eea1 0b06 	vfma.f64	d0, d1, d6
 800b99a:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 800b99e:	ee21 1b05 	vmul.f64	d1, d1, d5
 800b9a2:	eea5 0b06 	vfma.f64	d0, d5, d6
 800b9a6:	e7e5      	b.n	800b974 <sinf_poly+0x20>

0800b9a8 <sinf>:
 800b9a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9aa:	ee10 4a10 	vmov	r4, s0
 800b9ae:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800b9b2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800b9b6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800b9ba:	eef0 7a40 	vmov.f32	s15, s0
 800b9be:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800b9c2:	d218      	bcs.n	800b9f6 <sinf+0x4e>
 800b9c4:	ee26 1b06 	vmul.f64	d1, d6, d6
 800b9c8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800b9cc:	d20a      	bcs.n	800b9e4 <sinf+0x3c>
 800b9ce:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800b9d2:	d103      	bne.n	800b9dc <sinf+0x34>
 800b9d4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800b9d8:	ed8d 1a01 	vstr	s2, [sp, #4]
 800b9dc:	eeb0 0a67 	vmov.f32	s0, s15
 800b9e0:	b003      	add	sp, #12
 800b9e2:	bd30      	pop	{r4, r5, pc}
 800b9e4:	483a      	ldr	r0, [pc, #232]	; (800bad0 <sinf+0x128>)
 800b9e6:	eeb0 0b46 	vmov.f64	d0, d6
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	b003      	add	sp, #12
 800b9ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9f2:	f7ff bfaf 	b.w	800b954 <sinf_poly>
 800b9f6:	f240 422e 	movw	r2, #1070	; 0x42e
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d824      	bhi.n	800ba48 <sinf+0xa0>
 800b9fe:	4b34      	ldr	r3, [pc, #208]	; (800bad0 <sinf+0x128>)
 800ba00:	ed93 7b08 	vldr	d7, [r3, #32]
 800ba04:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ba08:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800ba0c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800ba10:	ee17 1a90 	vmov	r1, s15
 800ba14:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800ba18:	1609      	asrs	r1, r1, #24
 800ba1a:	ee07 1a90 	vmov	s15, r1
 800ba1e:	f001 0203 	and.w	r2, r1, #3
 800ba22:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ba26:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800ba2a:	ed92 0b00 	vldr	d0, [r2]
 800ba2e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800ba32:	f011 0f02 	tst.w	r1, #2
 800ba36:	eea5 6b47 	vfms.f64	d6, d5, d7
 800ba3a:	bf08      	it	eq
 800ba3c:	4618      	moveq	r0, r3
 800ba3e:	ee26 1b06 	vmul.f64	d1, d6, d6
 800ba42:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ba46:	e7d1      	b.n	800b9ec <sinf+0x44>
 800ba48:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800ba4c:	d237      	bcs.n	800babe <sinf+0x116>
 800ba4e:	4a21      	ldr	r2, [pc, #132]	; (800bad4 <sinf+0x12c>)
 800ba50:	f3c4 6183 	ubfx	r1, r4, #26, #4
 800ba54:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800ba58:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800ba5c:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800ba60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ba64:	4083      	lsls	r3, r0
 800ba66:	6a28      	ldr	r0, [r5, #32]
 800ba68:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ba6c:	fba3 1000 	umull	r1, r0, r3, r0
 800ba70:	6929      	ldr	r1, [r5, #16]
 800ba72:	435a      	muls	r2, r3
 800ba74:	fbe3 0201 	umlal	r0, r2, r3, r1
 800ba78:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 800ba7c:	0f8d      	lsrs	r5, r1, #30
 800ba7e:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800ba82:	1a51      	subs	r1, r2, r1
 800ba84:	f7f4 fdc2 	bl	800060c <__aeabi_l2d>
 800ba88:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800ba8c:	4b10      	ldr	r3, [pc, #64]	; (800bad0 <sinf+0x128>)
 800ba8e:	f004 0203 	and.w	r2, r4, #3
 800ba92:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ba96:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800bac8 <sinf+0x120>
 800ba9a:	ed92 0b00 	vldr	d0, [r2]
 800ba9e:	ec41 0b16 	vmov	d6, r0, r1
 800baa2:	f014 0f02 	tst.w	r4, #2
 800baa6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800baaa:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800baae:	4629      	mov	r1, r5
 800bab0:	bf08      	it	eq
 800bab2:	4618      	moveq	r0, r3
 800bab4:	ee27 1b07 	vmul.f64	d1, d7, d7
 800bab8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800babc:	e796      	b.n	800b9ec <sinf+0x44>
 800babe:	b003      	add	sp, #12
 800bac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bac4:	f000 b813 	b.w	800baee <__math_invalidf>
 800bac8:	54442d18 	.word	0x54442d18
 800bacc:	3c1921fb 	.word	0x3c1921fb
 800bad0:	0800bbc8 	.word	0x0800bbc8
 800bad4:	0800bb68 	.word	0x0800bb68

0800bad8 <with_errnof>:
 800bad8:	b513      	push	{r0, r1, r4, lr}
 800bada:	4604      	mov	r4, r0
 800badc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bae0:	f7ff fdb6 	bl	800b650 <__errno>
 800bae4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800bae8:	6004      	str	r4, [r0, #0]
 800baea:	b002      	add	sp, #8
 800baec:	bd10      	pop	{r4, pc}

0800baee <__math_invalidf>:
 800baee:	eef0 7a40 	vmov.f32	s15, s0
 800baf2:	ee30 7a40 	vsub.f32	s14, s0, s0
 800baf6:	eef4 7a67 	vcmp.f32	s15, s15
 800bafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bafe:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800bb02:	d602      	bvs.n	800bb0a <__math_invalidf+0x1c>
 800bb04:	2021      	movs	r0, #33	; 0x21
 800bb06:	f7ff bfe7 	b.w	800bad8 <with_errnof>
 800bb0a:	4770      	bx	lr

0800bb0c <_init>:
 800bb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb0e:	bf00      	nop
 800bb10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb12:	bc08      	pop	{r3}
 800bb14:	469e      	mov	lr, r3
 800bb16:	4770      	bx	lr

0800bb18 <_fini>:
 800bb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1a:	bf00      	nop
 800bb1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb1e:	bc08      	pop	{r3}
 800bb20:	469e      	mov	lr, r3
 800bb22:	4770      	bx	lr
