
thesis-2-nucleo-h7a3zi-q.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab14  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800adc8  0800adc8  0001adc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800af48  0800af48  0001af48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800af50  0800af50  0001af50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800af54  0800af54  0001af54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800af58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007f0  24000074  0800afcc  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000864  0800afcc  00020864  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ee3c  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003bcd  00000000  00000000  0003eede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001760  00000000  00000000  00042ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000015b8  00000000  00000000  00044210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000348f2  00000000  00000000  000457c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000210b1  00000000  00000000  0007a0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015574b  00000000  00000000  0009b16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f08b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000065c8  00000000  00000000  001f0908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800adac 	.word	0x0800adac

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800adac 	.word	0x0800adac

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b974 	b.w	8000968 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	4604      	mov	r4, r0
 80006a0:	468e      	mov	lr, r1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d14d      	bne.n	8000742 <__udivmoddi4+0xaa>
 80006a6:	428a      	cmp	r2, r1
 80006a8:	4694      	mov	ip, r2
 80006aa:	d969      	bls.n	8000780 <__udivmoddi4+0xe8>
 80006ac:	fab2 f282 	clz	r2, r2
 80006b0:	b152      	cbz	r2, 80006c8 <__udivmoddi4+0x30>
 80006b2:	fa01 f302 	lsl.w	r3, r1, r2
 80006b6:	f1c2 0120 	rsb	r1, r2, #32
 80006ba:	fa20 f101 	lsr.w	r1, r0, r1
 80006be:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c2:	ea41 0e03 	orr.w	lr, r1, r3
 80006c6:	4094      	lsls	r4, r2
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	0c21      	lsrs	r1, r4, #16
 80006ce:	fbbe f6f8 	udiv	r6, lr, r8
 80006d2:	fa1f f78c 	uxth.w	r7, ip
 80006d6:	fb08 e316 	mls	r3, r8, r6, lr
 80006da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006de:	fb06 f107 	mul.w	r1, r6, r7
 80006e2:	4299      	cmp	r1, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x64>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ee:	f080 811f 	bcs.w	8000930 <__udivmoddi4+0x298>
 80006f2:	4299      	cmp	r1, r3
 80006f4:	f240 811c 	bls.w	8000930 <__udivmoddi4+0x298>
 80006f8:	3e02      	subs	r6, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a5b      	subs	r3, r3, r1
 80006fe:	b2a4      	uxth	r4, r4
 8000700:	fbb3 f0f8 	udiv	r0, r3, r8
 8000704:	fb08 3310 	mls	r3, r8, r0, r3
 8000708:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800070c:	fb00 f707 	mul.w	r7, r0, r7
 8000710:	42a7      	cmp	r7, r4
 8000712:	d90a      	bls.n	800072a <__udivmoddi4+0x92>
 8000714:	eb1c 0404 	adds.w	r4, ip, r4
 8000718:	f100 33ff 	add.w	r3, r0, #4294967295
 800071c:	f080 810a 	bcs.w	8000934 <__udivmoddi4+0x29c>
 8000720:	42a7      	cmp	r7, r4
 8000722:	f240 8107 	bls.w	8000934 <__udivmoddi4+0x29c>
 8000726:	4464      	add	r4, ip
 8000728:	3802      	subs	r0, #2
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	1be4      	subs	r4, r4, r7
 8000730:	2600      	movs	r6, #0
 8000732:	b11d      	cbz	r5, 800073c <__udivmoddi4+0xa4>
 8000734:	40d4      	lsrs	r4, r2
 8000736:	2300      	movs	r3, #0
 8000738:	e9c5 4300 	strd	r4, r3, [r5]
 800073c:	4631      	mov	r1, r6
 800073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000742:	428b      	cmp	r3, r1
 8000744:	d909      	bls.n	800075a <__udivmoddi4+0xc2>
 8000746:	2d00      	cmp	r5, #0
 8000748:	f000 80ef 	beq.w	800092a <__udivmoddi4+0x292>
 800074c:	2600      	movs	r6, #0
 800074e:	e9c5 0100 	strd	r0, r1, [r5]
 8000752:	4630      	mov	r0, r6
 8000754:	4631      	mov	r1, r6
 8000756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075a:	fab3 f683 	clz	r6, r3
 800075e:	2e00      	cmp	r6, #0
 8000760:	d14a      	bne.n	80007f8 <__udivmoddi4+0x160>
 8000762:	428b      	cmp	r3, r1
 8000764:	d302      	bcc.n	800076c <__udivmoddi4+0xd4>
 8000766:	4282      	cmp	r2, r0
 8000768:	f200 80f9 	bhi.w	800095e <__udivmoddi4+0x2c6>
 800076c:	1a84      	subs	r4, r0, r2
 800076e:	eb61 0303 	sbc.w	r3, r1, r3
 8000772:	2001      	movs	r0, #1
 8000774:	469e      	mov	lr, r3
 8000776:	2d00      	cmp	r5, #0
 8000778:	d0e0      	beq.n	800073c <__udivmoddi4+0xa4>
 800077a:	e9c5 4e00 	strd	r4, lr, [r5]
 800077e:	e7dd      	b.n	800073c <__udivmoddi4+0xa4>
 8000780:	b902      	cbnz	r2, 8000784 <__udivmoddi4+0xec>
 8000782:	deff      	udf	#255	; 0xff
 8000784:	fab2 f282 	clz	r2, r2
 8000788:	2a00      	cmp	r2, #0
 800078a:	f040 8092 	bne.w	80008b2 <__udivmoddi4+0x21a>
 800078e:	eba1 010c 	sub.w	r1, r1, ip
 8000792:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000796:	fa1f fe8c 	uxth.w	lr, ip
 800079a:	2601      	movs	r6, #1
 800079c:	0c20      	lsrs	r0, r4, #16
 800079e:	fbb1 f3f7 	udiv	r3, r1, r7
 80007a2:	fb07 1113 	mls	r1, r7, r3, r1
 80007a6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007aa:	fb0e f003 	mul.w	r0, lr, r3
 80007ae:	4288      	cmp	r0, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0x12c>
 80007b2:	eb1c 0101 	adds.w	r1, ip, r1
 80007b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x12a>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f200 80cb 	bhi.w	8000958 <__udivmoddi4+0x2c0>
 80007c2:	4643      	mov	r3, r8
 80007c4:	1a09      	subs	r1, r1, r0
 80007c6:	b2a4      	uxth	r4, r4
 80007c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007cc:	fb07 1110 	mls	r1, r7, r0, r1
 80007d0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007d4:	fb0e fe00 	mul.w	lr, lr, r0
 80007d8:	45a6      	cmp	lr, r4
 80007da:	d908      	bls.n	80007ee <__udivmoddi4+0x156>
 80007dc:	eb1c 0404 	adds.w	r4, ip, r4
 80007e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007e4:	d202      	bcs.n	80007ec <__udivmoddi4+0x154>
 80007e6:	45a6      	cmp	lr, r4
 80007e8:	f200 80bb 	bhi.w	8000962 <__udivmoddi4+0x2ca>
 80007ec:	4608      	mov	r0, r1
 80007ee:	eba4 040e 	sub.w	r4, r4, lr
 80007f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007f6:	e79c      	b.n	8000732 <__udivmoddi4+0x9a>
 80007f8:	f1c6 0720 	rsb	r7, r6, #32
 80007fc:	40b3      	lsls	r3, r6
 80007fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000802:	ea4c 0c03 	orr.w	ip, ip, r3
 8000806:	fa20 f407 	lsr.w	r4, r0, r7
 800080a:	fa01 f306 	lsl.w	r3, r1, r6
 800080e:	431c      	orrs	r4, r3
 8000810:	40f9      	lsrs	r1, r7
 8000812:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000816:	fa00 f306 	lsl.w	r3, r0, r6
 800081a:	fbb1 f8f9 	udiv	r8, r1, r9
 800081e:	0c20      	lsrs	r0, r4, #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fb09 1118 	mls	r1, r9, r8, r1
 8000828:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800082c:	fb08 f00e 	mul.w	r0, r8, lr
 8000830:	4288      	cmp	r0, r1
 8000832:	fa02 f206 	lsl.w	r2, r2, r6
 8000836:	d90b      	bls.n	8000850 <__udivmoddi4+0x1b8>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000840:	f080 8088 	bcs.w	8000954 <__udivmoddi4+0x2bc>
 8000844:	4288      	cmp	r0, r1
 8000846:	f240 8085 	bls.w	8000954 <__udivmoddi4+0x2bc>
 800084a:	f1a8 0802 	sub.w	r8, r8, #2
 800084e:	4461      	add	r1, ip
 8000850:	1a09      	subs	r1, r1, r0
 8000852:	b2a4      	uxth	r4, r4
 8000854:	fbb1 f0f9 	udiv	r0, r1, r9
 8000858:	fb09 1110 	mls	r1, r9, r0, r1
 800085c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000860:	fb00 fe0e 	mul.w	lr, r0, lr
 8000864:	458e      	cmp	lr, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x1e2>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000870:	d26c      	bcs.n	800094c <__udivmoddi4+0x2b4>
 8000872:	458e      	cmp	lr, r1
 8000874:	d96a      	bls.n	800094c <__udivmoddi4+0x2b4>
 8000876:	3802      	subs	r0, #2
 8000878:	4461      	add	r1, ip
 800087a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800087e:	fba0 9402 	umull	r9, r4, r0, r2
 8000882:	eba1 010e 	sub.w	r1, r1, lr
 8000886:	42a1      	cmp	r1, r4
 8000888:	46c8      	mov	r8, r9
 800088a:	46a6      	mov	lr, r4
 800088c:	d356      	bcc.n	800093c <__udivmoddi4+0x2a4>
 800088e:	d053      	beq.n	8000938 <__udivmoddi4+0x2a0>
 8000890:	b15d      	cbz	r5, 80008aa <__udivmoddi4+0x212>
 8000892:	ebb3 0208 	subs.w	r2, r3, r8
 8000896:	eb61 010e 	sbc.w	r1, r1, lr
 800089a:	fa01 f707 	lsl.w	r7, r1, r7
 800089e:	fa22 f306 	lsr.w	r3, r2, r6
 80008a2:	40f1      	lsrs	r1, r6
 80008a4:	431f      	orrs	r7, r3
 80008a6:	e9c5 7100 	strd	r7, r1, [r5]
 80008aa:	2600      	movs	r6, #0
 80008ac:	4631      	mov	r1, r6
 80008ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b2:	f1c2 0320 	rsb	r3, r2, #32
 80008b6:	40d8      	lsrs	r0, r3
 80008b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008bc:	fa21 f303 	lsr.w	r3, r1, r3
 80008c0:	4091      	lsls	r1, r2
 80008c2:	4301      	orrs	r1, r0
 80008c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c8:	fa1f fe8c 	uxth.w	lr, ip
 80008cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80008d0:	fb07 3610 	mls	r6, r7, r0, r3
 80008d4:	0c0b      	lsrs	r3, r1, #16
 80008d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008da:	fb00 f60e 	mul.w	r6, r0, lr
 80008de:	429e      	cmp	r6, r3
 80008e0:	fa04 f402 	lsl.w	r4, r4, r2
 80008e4:	d908      	bls.n	80008f8 <__udivmoddi4+0x260>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ee:	d22f      	bcs.n	8000950 <__udivmoddi4+0x2b8>
 80008f0:	429e      	cmp	r6, r3
 80008f2:	d92d      	bls.n	8000950 <__udivmoddi4+0x2b8>
 80008f4:	3802      	subs	r0, #2
 80008f6:	4463      	add	r3, ip
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	b289      	uxth	r1, r1
 80008fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000900:	fb07 3316 	mls	r3, r7, r6, r3
 8000904:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000908:	fb06 f30e 	mul.w	r3, r6, lr
 800090c:	428b      	cmp	r3, r1
 800090e:	d908      	bls.n	8000922 <__udivmoddi4+0x28a>
 8000910:	eb1c 0101 	adds.w	r1, ip, r1
 8000914:	f106 38ff 	add.w	r8, r6, #4294967295
 8000918:	d216      	bcs.n	8000948 <__udivmoddi4+0x2b0>
 800091a:	428b      	cmp	r3, r1
 800091c:	d914      	bls.n	8000948 <__udivmoddi4+0x2b0>
 800091e:	3e02      	subs	r6, #2
 8000920:	4461      	add	r1, ip
 8000922:	1ac9      	subs	r1, r1, r3
 8000924:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000928:	e738      	b.n	800079c <__udivmoddi4+0x104>
 800092a:	462e      	mov	r6, r5
 800092c:	4628      	mov	r0, r5
 800092e:	e705      	b.n	800073c <__udivmoddi4+0xa4>
 8000930:	4606      	mov	r6, r0
 8000932:	e6e3      	b.n	80006fc <__udivmoddi4+0x64>
 8000934:	4618      	mov	r0, r3
 8000936:	e6f8      	b.n	800072a <__udivmoddi4+0x92>
 8000938:	454b      	cmp	r3, r9
 800093a:	d2a9      	bcs.n	8000890 <__udivmoddi4+0x1f8>
 800093c:	ebb9 0802 	subs.w	r8, r9, r2
 8000940:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000944:	3801      	subs	r0, #1
 8000946:	e7a3      	b.n	8000890 <__udivmoddi4+0x1f8>
 8000948:	4646      	mov	r6, r8
 800094a:	e7ea      	b.n	8000922 <__udivmoddi4+0x28a>
 800094c:	4620      	mov	r0, r4
 800094e:	e794      	b.n	800087a <__udivmoddi4+0x1e2>
 8000950:	4640      	mov	r0, r8
 8000952:	e7d1      	b.n	80008f8 <__udivmoddi4+0x260>
 8000954:	46d0      	mov	r8, sl
 8000956:	e77b      	b.n	8000850 <__udivmoddi4+0x1b8>
 8000958:	3b02      	subs	r3, #2
 800095a:	4461      	add	r1, ip
 800095c:	e732      	b.n	80007c4 <__udivmoddi4+0x12c>
 800095e:	4630      	mov	r0, r6
 8000960:	e709      	b.n	8000776 <__udivmoddi4+0xde>
 8000962:	4464      	add	r4, ip
 8000964:	3802      	subs	r0, #2
 8000966:	e742      	b.n	80007ee <__udivmoddi4+0x156>

08000968 <__aeabi_idiv0>:
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <Delay_Init>:
#define SAMPLE_RATE 96000
#define PI 3.14159265359

DelayEffect delay;

void Delay_Init() {
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	delay.delayBufferLength = 2*SAMPLE_RATE;
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <Delay_Init+0x90>)
 8000972:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <Delay_Init+0x94>)
 8000974:	611a      	str	r2, [r3, #16]
	delay.delayLength = 0.75;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <Delay_Init+0x90>)
 8000978:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800097c:	60da      	str	r2, [r3, #12]
	delay.delayWritePtr = 0;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <Delay_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
	delay.delayReadPtr = (int)(delay.delayWritePtr - (delay.delayLength * SAMPLE_RATE) + delay.delayBufferLength) % delay.delayBufferLength;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <Delay_Init+0x90>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	ee07 3a90 	vmov	s15, r3
 800098c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <Delay_Init+0x90>)
 8000992:	edd3 7a03 	vldr	s15, [r3, #12]
 8000996:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000a04 <Delay_Init+0x98>
 800099a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800099e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <Delay_Init+0x90>)
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	ee07 3a90 	vmov	s15, r3
 80009aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b6:	ee17 1a90 	vmov	r1, s15
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <Delay_Init+0x90>)
 80009bc:	691b      	ldr	r3, [r3, #16]
 80009be:	fb91 f2f3 	sdiv	r2, r1, r3
 80009c2:	fb02 f303 	mul.w	r3, r2, r3
 80009c6:	1acb      	subs	r3, r1, r3
 80009c8:	4a0c      	ldr	r2, [pc, #48]	; (80009fc <Delay_Init+0x90>)
 80009ca:	6093      	str	r3, [r2, #8]
	delay.delayData = (uint16_t*) malloc(delay.delayBufferLength * sizeof(uint16_t));
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <Delay_Init+0x90>)
 80009ce:	691b      	ldr	r3, [r3, #16]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4618      	mov	r0, r3
 80009d4:	f00a f84a 	bl	800aa6c <malloc>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <Delay_Init+0x90>)
 80009de:	601a      	str	r2, [r3, #0]
	delay.feedback = 0.5;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <Delay_Init+0x90>)
 80009e2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80009e6:	615a      	str	r2, [r3, #20]
	delay.dryMix = 1;
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <Delay_Init+0x90>)
 80009ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009ee:	619a      	str	r2, [r3, #24]
	delay.wetMix = 0.85;
 80009f0:	4b02      	ldr	r3, [pc, #8]	; (80009fc <Delay_Init+0x90>)
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <Delay_Init+0x9c>)
 80009f4:	61da      	str	r2, [r3, #28]
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	24000090 	.word	0x24000090
 8000a00:	0002ee00 	.word	0x0002ee00
 8000a04:	47bb8000 	.word	0x47bb8000
 8000a08:	3f59999a 	.word	0x3f59999a
 8000a0c:	00000000 	.word	0x00000000

08000a10 <lfo>:
#define PI 3.14159265359

TremoloEffect tremolo;

float lfo(float phase, int waveform)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a1a:	6038      	str	r0, [r7, #0]
	switch(waveform) {
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d04a      	beq.n	8000ab8 <lfo+0xa8>
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	f300 8082 	bgt.w	8000b2e <lfo+0x11e>
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <lfo+0x28>
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d031      	beq.n	8000a9a <lfo+0x8a>
 8000a36:	e07a      	b.n	8000b2e <lfo+0x11e>
		case Triangle:
			if(phase < 0.25f)
 8000a38:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a3c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a48:	d508      	bpl.n	8000a5c <lfo+0x4c>
				return 0.5f + 2.0f*phase;
 8000a4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000a56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a5a:	e080      	b.n	8000b5e <lfo+0x14e>
			else if(phase < 0.75f)
 8000a5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a60:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8000a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a6c:	d50c      	bpl.n	8000a88 <lfo+0x78>
				return 1.0f - 2.0f*(phase - 0.25f);
 8000a6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a72:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000a76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a86:	e06a      	b.n	8000b5e <lfo+0x14e>
			else
				return 2.0f*(phase-0.75f);
 8000a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a8c:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8000a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a94:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a98:	e061      	b.n	8000b5e <lfo+0x14e>
		case Square:
			if(phase < 0.5f)
 8000a9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aaa:	d502      	bpl.n	8000ab2 <lfo+0xa2>
				return 1.0f;
 8000aac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000ab0:	e055      	b.n	8000b5e <lfo+0x14e>
			else
				return 0.0f;
 8000ab2:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8000b70 <lfo+0x160>
 8000ab6:	e052      	b.n	8000b5e <lfo+0x14e>
		case SquareSlopedEdges:
			if(phase < 0.48f)
 8000ab8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000abc:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000b74 <lfo+0x164>
 8000ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac8:	d502      	bpl.n	8000ad0 <lfo+0xc0>
				return 1.0f;
 8000aca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000ace:	e046      	b.n	8000b5e <lfo+0x14e>
			else if(phase < 0.5f)
 8000ad0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ad4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ad8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae0:	d50e      	bpl.n	8000b00 <lfo+0xf0>
				return 1.0f - 50.0f*(phase - 0.48f);
 8000ae2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ae6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000b74 <lfo+0x164>
 8000aea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000aee:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000b78 <lfo+0x168>
 8000af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000afe:	e02e      	b.n	8000b5e <lfo+0x14e>
			else if(phase < 0.98f)
 8000b00:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b04:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000b7c <lfo+0x16c>
 8000b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b10:	d502      	bpl.n	8000b18 <lfo+0x108>
				return 0.0f;
 8000b12:	eddf 7a17 	vldr	s15, [pc, #92]	; 8000b70 <lfo+0x160>
 8000b16:	e022      	b.n	8000b5e <lfo+0x14e>
			else
				return 50.0f*(phase - 0.98f);
 8000b18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b1c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000b7c <lfo+0x16c>
 8000b20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b24:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000b78 <lfo+0x168>
 8000b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2c:	e017      	b.n	8000b5e <lfo+0x14e>
		case Sine:
		default:
			return 0.5f + 0.5f*sinf(2.0 * PI * phase);
 8000b2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b36:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000b68 <lfo+0x158>
 8000b3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b42:	eeb0 0a67 	vmov.f32	s0, s15
 8000b46:	f00a f87f 	bl	800ac48 <sinf>
 8000b4a:	eef0 7a40 	vmov.f32	s15, s0
 8000b4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000b52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000b5a:	ee77 7a87 	vadd.f32	s15, s15, s14
		}
}
 8000b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	54442eea 	.word	0x54442eea
 8000b6c:	401921fb 	.word	0x401921fb
 8000b70:	00000000 	.word	0x00000000
 8000b74:	3ef5c28f 	.word	0x3ef5c28f
 8000b78:	42480000 	.word	0x42480000
 8000b7c:	3f7ae148 	.word	0x3f7ae148

08000b80 <Tremolo_Init>:

void Tremolo_Init() {
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	tremolo.phase = 0;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <Tremolo_Init+0x2c>)
 8000b86:	f04f 0200 	mov.w	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
	tremolo.inverseSampleRate = 1.0f/SAMPLE_RATE;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <Tremolo_Init+0x2c>)
 8000b8e:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <Tremolo_Init+0x30>)
 8000b90:	605a      	str	r2, [r3, #4]
	tremolo.depth = 0.75;
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <Tremolo_Init+0x2c>)
 8000b94:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8000b98:	609a      	str	r2, [r3, #8]
	tremolo.frequency = 1.25;
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <Tremolo_Init+0x2c>)
 8000b9c:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <Tremolo_Init+0x34>)
 8000b9e:	60da      	str	r2, [r3, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	240000b0 	.word	0x240000b0
 8000bb0:	372ec33e 	.word	0x372ec33e
 8000bb4:	3fa00000 	.word	0x3fa00000

08000bb8 <calculateTremolo>:

uint16_t calculateTremolo(uint16_t in) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	ed2d 8b02 	vpush	{d8}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
	uint16_t out;
	out = in * (1.0f - tremolo.depth * lfo(tremolo.phase, Sine));
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	ee07 3a90 	vmov	s15, r3
 8000bcc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <calculateTremolo+0xa4>)
 8000bd2:	edd3 8a02 	vldr	s17, [r3, #8]
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <calculateTremolo+0xa4>)
 8000bd8:	edd3 7a00 	vldr	s15, [r3]
 8000bdc:	2003      	movs	r0, #3
 8000bde:	eeb0 0a67 	vmov.f32	s0, s15
 8000be2:	f7ff ff15 	bl	8000a10 <lfo>
 8000be6:	eef0 7a40 	vmov.f32	s15, s0
 8000bea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8000bee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bf6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bfe:	ee17 3a90 	vmov	r3, s15
 8000c02:	81fb      	strh	r3, [r7, #14]

	tremolo.phase += tremolo.frequency*tremolo.inverseSampleRate;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <calculateTremolo+0xa4>)
 8000c06:	ed93 7a00 	vldr	s14, [r3]
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <calculateTremolo+0xa4>)
 8000c0c:	edd3 6a03 	vldr	s13, [r3, #12]
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <calculateTremolo+0xa4>)
 8000c12:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <calculateTremolo+0xa4>)
 8000c20:	edc3 7a00 	vstr	s15, [r3]
	if(tremolo.phase >= 1.0)
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <calculateTremolo+0xa4>)
 8000c26:	edd3 7a00 	vldr	s15, [r3]
 8000c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c36:	db09      	blt.n	8000c4c <calculateTremolo+0x94>
		tremolo.phase -= 1.0;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <calculateTremolo+0xa4>)
 8000c3a:	edd3 7a00 	vldr	s15, [r3]
 8000c3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <calculateTremolo+0xa4>)
 8000c48:	edc3 7a00 	vstr	s15, [r3]

	return out;
 8000c4c:	89fb      	ldrh	r3, [r7, #14]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	ecbd 8b02 	vpop	{d8}
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	240000b0 	.word	0x240000b0

08000c60 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	615a      	str	r2, [r3, #20]
 8000c82:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c84:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000c86:	4a31      	ldr	r2, [pc, #196]	; (8000d4c <MX_ADC1_Init+0xec>)
 8000c88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c90:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000c92:	2208      	movs	r2, #8
 8000c94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c96:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000c9e:	2204      	movs	r2, #4
 8000ca0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ca2:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cb4:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000cba:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000cbc:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000ccc:	2203      	movs	r2, #3
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ce4:	4818      	ldr	r0, [pc, #96]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000ce6:	f001 fa4d 	bl	8002184 <HAL_ADC_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000cf0:	f000 fcf0 	bl	80016d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4812      	ldr	r0, [pc, #72]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000d00:	f002 f940 	bl	8002f84 <HAL_ADCEx_MultiModeConfigChannel>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d0a:	f000 fce3 	bl	80016d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_ADC1_Init+0xf0>)
 8000d10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d12:	2306      	movs	r3, #6
 8000d14:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d1a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d1e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d20:	2304      	movs	r3, #4
 8000d22:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_ADC1_Init+0xe8>)
 8000d32:	f001 fc3f 	bl	80025b4 <HAL_ADC_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000d3c:	f000 fcca 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	; 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	240000c0 	.word	0x240000c0
 8000d4c:	40022000 	.word	0x40022000
 8000d50:	08600004 	.word	0x08600004

08000d54 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d6c:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000d6e:	4a39      	ldr	r2, [pc, #228]	; (8000e54 <MX_ADC2_Init+0x100>)
 8000d70:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d72:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d78:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000d7a:	2208      	movs	r2, #8
 8000d7c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d7e:	4b34      	ldr	r3, [pc, #208]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d84:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000d86:	2204      	movs	r2, #4
 8000d88:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d8a:	4b31      	ldr	r3, [pc, #196]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000d90:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 3;
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000d98:	2203      	movs	r2, #3
 8000d9a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000da4:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000dac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000db2:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000db4:	2203      	movs	r2, #3
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000db8:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dbe:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000dc4:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dcc:	4820      	ldr	r0, [pc, #128]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000dce:	f001 f9d9 	bl	8002184 <HAL_ADC_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000dd8:	f000 fc7c 	bl	80016d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_ADC2_Init+0x104>)
 8000dde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de0:	2306      	movs	r3, #6
 8000de2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000dec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dee:	2304      	movs	r3, #4
 8000df0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4814      	ldr	r0, [pc, #80]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000e00:	f001 fbd8 	bl	80025b4 <HAL_ADC_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000e0a:	f000 fc63 	bl	80016d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <MX_ADC2_Init+0x108>)
 8000e10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e12:	230c      	movs	r3, #12
 8000e14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000e1c:	f001 fbca 	bl	80025b4 <HAL_ADC_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8000e26:	f000 fc55 	bl	80016d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_ADC2_Init+0x10c>)
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e2e:	2312      	movs	r3, #18
 8000e30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	; (8000e50 <MX_ADC2_Init+0xfc>)
 8000e38:	f001 fbbc 	bl	80025b4 <HAL_ADC_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 8000e42:	f000 fc47 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	24000124 	.word	0x24000124
 8000e54:	40022100 	.word	0x40022100
 8000e58:	19200040 	.word	0x19200040
 8000e5c:	1d500080 	.word	0x1d500080
 8000e60:	21800100 	.word	0x21800100

08000e64 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	; 0x38
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a86      	ldr	r2, [pc, #536]	; (800109c <HAL_ADC_MspInit+0x238>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d165      	bne.n	8000f52 <HAL_ADC_MspInit+0xee>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e86:	4b86      	ldr	r3, [pc, #536]	; (80010a0 <HAL_ADC_MspInit+0x23c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	4a84      	ldr	r2, [pc, #528]	; (80010a0 <HAL_ADC_MspInit+0x23c>)
 8000e8e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e90:	4b83      	ldr	r3, [pc, #524]	; (80010a0 <HAL_ADC_MspInit+0x23c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d10e      	bne.n	8000eb6 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e98:	4b82      	ldr	r3, [pc, #520]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000e9a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e9e:	4a81      	ldr	r2, [pc, #516]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000ea0:	f043 0320 	orr.w	r3, r3, #32
 8000ea4:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000ea8:	4b7e      	ldr	r3, [pc, #504]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000eaa:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000eae:	f003 0320 	and.w	r3, r3, #32
 8000eb2:	623b      	str	r3, [r7, #32]
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eb6:	4b7b      	ldr	r3, [pc, #492]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000eb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ebc:	4a79      	ldr	r2, [pc, #484]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000ebe:	f043 0320 	orr.w	r3, r3, #32
 8000ec2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ec6:	4b77      	ldr	r3, [pc, #476]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000ec8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ecc:	f003 0320 	and.w	r3, r3, #32
 8000ed0:	61fb      	str	r3, [r7, #28]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ed4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eda:	2303      	movs	r3, #3
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	486f      	ldr	r0, [pc, #444]	; (80010a8 <HAL_ADC_MspInit+0x244>)
 8000eea:	f004 fe39 	bl	8005b60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000eee:	4b6f      	ldr	r3, [pc, #444]	; (80010ac <HAL_ADC_MspInit+0x248>)
 8000ef0:	4a6f      	ldr	r2, [pc, #444]	; (80010b0 <HAL_ADC_MspInit+0x24c>)
 8000ef2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ef4:	4b6d      	ldr	r3, [pc, #436]	; (80010ac <HAL_ADC_MspInit+0x248>)
 8000ef6:	2209      	movs	r2, #9
 8000ef8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efa:	4b6c      	ldr	r3, [pc, #432]	; (80010ac <HAL_ADC_MspInit+0x248>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f00:	4b6a      	ldr	r3, [pc, #424]	; (80010ac <HAL_ADC_MspInit+0x248>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f06:	4b69      	ldr	r3, [pc, #420]	; (80010ac <HAL_ADC_MspInit+0x248>)
 8000f08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f0e:	4b67      	ldr	r3, [pc, #412]	; (80010ac <HAL_ADC_MspInit+0x248>)
 8000f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f16:	4b65      	ldr	r3, [pc, #404]	; (80010ac <HAL_ADC_MspInit+0x248>)
 8000f18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f1e:	4b63      	ldr	r3, [pc, #396]	; (80010ac <HAL_ADC_MspInit+0x248>)
 8000f20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f24:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000f26:	4b61      	ldr	r3, [pc, #388]	; (80010ac <HAL_ADC_MspInit+0x248>)
 8000f28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f2c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f2e:	4b5f      	ldr	r3, [pc, #380]	; (80010ac <HAL_ADC_MspInit+0x248>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f34:	485d      	ldr	r0, [pc, #372]	; (80010ac <HAL_ADC_MspInit+0x248>)
 8000f36:	f002 fc97 	bl	8003868 <HAL_DMA_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8000f40:	f000 fbc8 	bl	80016d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a59      	ldr	r2, [pc, #356]	; (80010ac <HAL_ADC_MspInit+0x248>)
 8000f48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f4a:	4a58      	ldr	r2, [pc, #352]	; (80010ac <HAL_ADC_MspInit+0x248>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000f50:	e09f      	b.n	8001092 <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC2)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a57      	ldr	r2, [pc, #348]	; (80010b4 <HAL_ADC_MspInit+0x250>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	f040 809a 	bne.w	8001092 <HAL_ADC_MspInit+0x22e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f5e:	4b50      	ldr	r3, [pc, #320]	; (80010a0 <HAL_ADC_MspInit+0x23c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a4e      	ldr	r2, [pc, #312]	; (80010a0 <HAL_ADC_MspInit+0x23c>)
 8000f66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f68:	4b4d      	ldr	r3, [pc, #308]	; (80010a0 <HAL_ADC_MspInit+0x23c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d10e      	bne.n	8000f8e <HAL_ADC_MspInit+0x12a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f70:	4b4c      	ldr	r3, [pc, #304]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000f72:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000f76:	4a4b      	ldr	r2, [pc, #300]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000f78:	f043 0320 	orr.w	r3, r3, #32
 8000f7c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000f80:	4b48      	ldr	r3, [pc, #288]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000f82:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000f86:	f003 0320 	and.w	r3, r3, #32
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000f90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f94:	4a43      	ldr	r2, [pc, #268]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f9e:	4b41      	ldr	r3, [pc, #260]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000fa0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fac:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000fae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fb2:	4a3c      	ldr	r2, [pc, #240]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fbc:	4b39      	ldr	r3, [pc, #228]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000fbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fc2:	f003 0304 	and.w	r3, r3, #4
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fca:	4b36      	ldr	r3, [pc, #216]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000fcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fd0:	4a34      	ldr	r2, [pc, #208]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000fd2:	f043 0320 	orr.w	r3, r3, #32
 8000fd6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fda:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <HAL_ADC_MspInit+0x240>)
 8000fdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fe0:	f003 0320 	and.w	r3, r3, #32
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fec:	2303      	movs	r3, #3
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	482f      	ldr	r0, [pc, #188]	; (80010b8 <HAL_ADC_MspInit+0x254>)
 8000ffc:	f004 fdb0 	bl	8005b60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001000:	2320      	movs	r3, #32
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001004:	2303      	movs	r3, #3
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	482a      	ldr	r0, [pc, #168]	; (80010bc <HAL_ADC_MspInit+0x258>)
 8001014:	f004 fda4 	bl	8005b60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001018:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	481e      	ldr	r0, [pc, #120]	; (80010a8 <HAL_ADC_MspInit+0x244>)
 800102e:	f004 fd97 	bl	8005b60 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream2;
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <HAL_ADC_MspInit+0x25c>)
 8001034:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <HAL_ADC_MspInit+0x260>)
 8001036:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_ADC_MspInit+0x25c>)
 800103a:	220a      	movs	r2, #10
 800103c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <HAL_ADC_MspInit+0x25c>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <HAL_ADC_MspInit+0x25c>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_ADC_MspInit+0x25c>)
 800104c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001050:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001052:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <HAL_ADC_MspInit+0x25c>)
 8001054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001058:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800105a:	4b19      	ldr	r3, [pc, #100]	; (80010c0 <HAL_ADC_MspInit+0x25c>)
 800105c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001060:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_ADC_MspInit+0x25c>)
 8001064:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001068:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_ADC_MspInit+0x25c>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001070:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_ADC_MspInit+0x25c>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001076:	4812      	ldr	r0, [pc, #72]	; (80010c0 <HAL_ADC_MspInit+0x25c>)
 8001078:	f002 fbf6 	bl	8003868 <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_ADC_MspInit+0x222>
      Error_Handler();
 8001082:	f000 fb27 	bl	80016d4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <HAL_ADC_MspInit+0x25c>)
 800108a:	64da      	str	r2, [r3, #76]	; 0x4c
 800108c:	4a0c      	ldr	r2, [pc, #48]	; (80010c0 <HAL_ADC_MspInit+0x25c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001092:	bf00      	nop
 8001094:	3738      	adds	r7, #56	; 0x38
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40022000 	.word	0x40022000
 80010a0:	24000278 	.word	0x24000278
 80010a4:	58024400 	.word	0x58024400
 80010a8:	58021400 	.word	0x58021400
 80010ac:	24000188 	.word	0x24000188
 80010b0:	40020010 	.word	0x40020010
 80010b4:	40022100 	.word	0x40022100
 80010b8:	58020000 	.word	0x58020000
 80010bc:	58020800 	.word	0x58020800
 80010c0:	24000200 	.word	0x24000200
 80010c4:	40020040 	.word	0x40020040

080010c8 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2224      	movs	r2, #36	; 0x24
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f009 fcd1 	bl	800aa7c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <MX_DAC1_Init+0x5c>)
 80010dc:	4a12      	ldr	r2, [pc, #72]	; (8001128 <MX_DAC1_Init+0x60>)
 80010de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80010e0:	4810      	ldr	r0, [pc, #64]	; (8001124 <MX_DAC1_Init+0x5c>)
 80010e2:	f002 f8fa 	bl	80032da <HAL_DAC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80010ec:	f000 faf2 	bl	80016d4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80010f4:	2316      	movs	r3, #22
 80010f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80010fc:	2301      	movs	r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_DAC1_Init+0x5c>)
 800110c:	f002 f9f2 	bl	80034f4 <HAL_DAC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001116:	f000 fadd 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2400027c 	.word	0x2400027c
 8001128:	40007400 	.word	0x40007400

0800112c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a30      	ldr	r2, [pc, #192]	; (800120c <HAL_DAC_MspInit+0xe0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d15a      	bne.n	8001204 <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800114e:	4b30      	ldr	r3, [pc, #192]	; (8001210 <HAL_DAC_MspInit+0xe4>)
 8001150:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001154:	4a2e      	ldr	r2, [pc, #184]	; (8001210 <HAL_DAC_MspInit+0xe4>)
 8001156:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800115a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <HAL_DAC_MspInit+0xe4>)
 8001160:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001164:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b28      	ldr	r3, [pc, #160]	; (8001210 <HAL_DAC_MspInit+0xe4>)
 800116e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001172:	4a27      	ldr	r2, [pc, #156]	; (8001210 <HAL_DAC_MspInit+0xe4>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <HAL_DAC_MspInit+0xe4>)
 800117e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800118a:	2310      	movs	r3, #16
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118e:	2303      	movs	r3, #3
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	481d      	ldr	r0, [pc, #116]	; (8001214 <HAL_DAC_MspInit+0xe8>)
 800119e:	f004 fcdf 	bl	8005b60 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <HAL_DAC_MspInit+0xec>)
 80011a4:	4a1d      	ldr	r2, [pc, #116]	; (800121c <HAL_DAC_MspInit+0xf0>)
 80011a6:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 80011a8:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_DAC_MspInit+0xec>)
 80011aa:	2243      	movs	r2, #67	; 0x43
 80011ac:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <HAL_DAC_MspInit+0xec>)
 80011b0:	2240      	movs	r2, #64	; 0x40
 80011b2:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_DAC_MspInit+0xec>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <HAL_DAC_MspInit+0xec>)
 80011bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_DAC_MspInit+0xec>)
 80011c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011c8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_DAC_MspInit+0xec>)
 80011cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_DAC_MspInit+0xec>)
 80011d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d8:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_DAC_MspInit+0xec>)
 80011dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011e0:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_DAC_MspInit+0xec>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80011e8:	480b      	ldr	r0, [pc, #44]	; (8001218 <HAL_DAC_MspInit+0xec>)
 80011ea:	f002 fb3d 	bl	8003868 <HAL_DMA_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 80011f4:	f000 fa6e 	bl	80016d4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_DAC_MspInit+0xec>)
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_DAC_MspInit+0xec>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40007400 	.word	0x40007400
 8001210:	58024400 	.word	0x58024400
 8001214:	58020000 	.word	0x58020000
 8001218:	24000290 	.word	0x24000290
 800121c:	40020028 	.word	0x40020028

08001220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_DMA_Init+0x5c>)
 8001228:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800122c:	4a13      	ldr	r2, [pc, #76]	; (800127c <MX_DMA_Init+0x5c>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_DMA_Init+0x5c>)
 8001238:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	200b      	movs	r0, #11
 800124a:	f002 f812 	bl	8003272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800124e:	200b      	movs	r0, #11
 8001250:	f002 f829 	bl	80032a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	200c      	movs	r0, #12
 800125a:	f002 f80a 	bl	8003272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800125e:	200c      	movs	r0, #12
 8001260:	f002 f821 	bl	80032a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	200d      	movs	r0, #13
 800126a:	f002 f802 	bl	8003272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800126e:	200d      	movs	r0, #13
 8001270:	f002 f819 	bl	80032a6 <HAL_NVIC_EnableIRQ>

}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	58024400 	.word	0x58024400

08001280 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	4b56      	ldr	r3, [pc, #344]	; (80013f0 <MX_GPIO_Init+0x170>)
 8001298:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800129c:	4a54      	ldr	r2, [pc, #336]	; (80013f0 <MX_GPIO_Init+0x170>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012a6:	4b52      	ldr	r3, [pc, #328]	; (80013f0 <MX_GPIO_Init+0x170>)
 80012a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012b4:	4b4e      	ldr	r3, [pc, #312]	; (80013f0 <MX_GPIO_Init+0x170>)
 80012b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ba:	4a4d      	ldr	r2, [pc, #308]	; (80013f0 <MX_GPIO_Init+0x170>)
 80012bc:	f043 0320 	orr.w	r3, r3, #32
 80012c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012c4:	4b4a      	ldr	r3, [pc, #296]	; (80013f0 <MX_GPIO_Init+0x170>)
 80012c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <MX_GPIO_Init+0x170>)
 80012d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012d8:	4a45      	ldr	r2, [pc, #276]	; (80013f0 <MX_GPIO_Init+0x170>)
 80012da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012e2:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <MX_GPIO_Init+0x170>)
 80012e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <MX_GPIO_Init+0x170>)
 80012f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012f6:	4a3e      	ldr	r2, [pc, #248]	; (80013f0 <MX_GPIO_Init+0x170>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001300:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <MX_GPIO_Init+0x170>)
 8001302:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <MX_GPIO_Init+0x170>)
 8001310:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001314:	4a36      	ldr	r2, [pc, #216]	; (80013f0 <MX_GPIO_Init+0x170>)
 8001316:	f043 0308 	orr.w	r3, r3, #8
 800131a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800131e:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <MX_GPIO_Init+0x170>)
 8001320:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800132c:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <MX_GPIO_Init+0x170>)
 800132e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001332:	4a2f      	ldr	r2, [pc, #188]	; (80013f0 <MX_GPIO_Init+0x170>)
 8001334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001338:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800133c:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <MX_GPIO_Init+0x170>)
 800133e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001350:	4828      	ldr	r0, [pc, #160]	; (80013f4 <MX_GPIO_Init+0x174>)
 8001352:	f004 fdb5 	bl	8005ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4821      	ldr	r0, [pc, #132]	; (80013f4 <MX_GPIO_Init+0x174>)
 8001370:	f004 fbf6 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001378:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800137c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	481b      	ldr	r0, [pc, #108]	; (80013f8 <MX_GPIO_Init+0x178>)
 800138a:	f004 fbe9 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800138e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 031c 	add.w	r3, r7, #28
 80013a0:	4619      	mov	r1, r3
 80013a2:	4816      	ldr	r0, [pc, #88]	; (80013fc <MX_GPIO_Init+0x17c>)
 80013a4:	f004 fbdc 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80013a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80013ba:	230a      	movs	r3, #10
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <MX_GPIO_Init+0x17c>)
 80013c6:	f004 fbcb 	bl	8005b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80013ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <MX_GPIO_Init+0x17c>)
 80013e4:	f004 fbbc 	bl	8005b60 <HAL_GPIO_Init>

}
 80013e8:	bf00      	nop
 80013ea:	3730      	adds	r7, #48	; 0x30
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	58024400 	.word	0x58024400
 80013f4:	58021400 	.word	0x58021400
 80013f8:	58021800 	.word	0x58021800
 80013fc:	58020000 	.word	0x58020000

08001400 <HAL_ADC_ConvHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1) {
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a09      	ldr	r2, [pc, #36]	; (8001430 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d108      	bne.n	8001422 <HAL_ADC_ConvHalfCpltCallback+0x22>
		// when we enter this function, first half of the buffer is complete
		// so we set the input buffer pointer at the beginning
		inBuffPtr = &adcData[0];
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8001412:	4a09      	ldr	r2, [pc, #36]	; (8001438 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8001414:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[DATA_SIZE];
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001418:	4a09      	ldr	r2, [pc, #36]	; (8001440 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 800141a:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
	}

}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	240000c0 	.word	0x240000c0
 8001434:	24000710 	.word	0x24000710
 8001438:	24000308 	.word	0x24000308
 800143c:	24000714 	.word	0x24000714
 8001440:	24000608 	.word	0x24000608
 8001444:	24000718 	.word	0x24000718

08001448 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

		inBuffPtr = &adcData[DATA_SIZE];
		outBuffPtr = &dacData[0];

		dataReady = 1;
	} else if (hadc == &hadc2) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <HAL_ADC_ConvCpltCallback+0x34>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d10b      	bne.n	8001470 <HAL_ADC_ConvCpltCallback+0x28>
//		snprintf(msg, sizeof(msg), " Vol %d || Mix %d || Tone %d || \r\n", adc2Data[0], adc2Data[1], adc2Data[2]);
//		sprintf(msg, "\rVol: %d ", adc2Data[0]);
//		sprintf(msg, "Mix: %d ", adc2Data[1]);
//		sprintf(msg, "Tone: %d\n", adc2Data[2]);
//		HAL_UART_Transmit(&huart3, msg, 40, HAL_MAX_DELAY);
		dataReady = 0;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_ADC_ConvCpltCallback+0x38>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]

		controls.volume = adc2Data[0];
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	ee07 3a90 	vmov	s15, r3
 8001466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <HAL_ADC_ConvCpltCallback+0x40>)
 800146c:	edc3 7a00 	vstr	s15, [r3]
	}

}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	24000124 	.word	0x24000124
 8001480:	24000718 	.word	0x24000718
 8001484:	24000708 	.word	0x24000708
 8001488:	2400071c 	.word	0x2400071c

0800148c <processData>:


void processData()
{
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
	for(int i = 0; i < DATA_SIZE; i++) {
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	e013      	b.n	80014c0 <processData+0x34>
		outBuffPtr[i] = calculateTremolo(inBuffPtr[i]);
 8001498:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <processData+0x48>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	b299      	uxth	r1, r3
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <processData+0x4c>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	18d4      	adds	r4, r2, r3
 80014b0:	4608      	mov	r0, r1
 80014b2:	f7ff fb81 	bl	8000bb8 <calculateTremolo>
 80014b6:	4603      	mov	r3, r0
 80014b8:	8023      	strh	r3, [r4, #0]
	for(int i = 0; i < DATA_SIZE; i++) {
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3301      	adds	r3, #1
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b7f      	cmp	r3, #127	; 0x7f
 80014c4:	dde8      	ble.n	8001498 <processData+0xc>
	}


	dataReady = 0;
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <processData+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd90      	pop	{r4, r7, pc}
 80014d4:	24000710 	.word	0x24000710
 80014d8:	24000714 	.word	0x24000714
 80014dc:	24000718 	.word	0x24000718

080014e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e6:	f000 fbaf 	bl	8001c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ea:	f000 f84b 	bl	8001584 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014ee:	f000 f8c5 	bl	800167c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f2:	f7ff fec5 	bl	8001280 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80014f6:	f000 fac3 	bl	8001a80 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80014fa:	f7ff fe91 	bl	8001220 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 80014fe:	f000 fb71 	bl	8001be4 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 8001502:	f7ff fbad 	bl	8000c60 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001506:	f000 fa4b 	bl	80019a0 <MX_TIM6_Init>
  MX_DAC1_Init();
 800150a:	f7ff fddd 	bl	80010c8 <MX_DAC1_Init>
  MX_ADC2_Init();
 800150e:	f7ff fc21 	bl	8000d54 <MX_ADC2_Init>
  MX_TIM3_Init();
 8001512:	f000 f9f5 	bl	8001900 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 8001516:	4812      	ldr	r0, [pc, #72]	; (8001560 <main+0x80>)
 8001518:	f007 fddc 	bl	80090d4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2Data, 3);
 800151c:	2203      	movs	r2, #3
 800151e:	4911      	ldr	r1, [pc, #68]	; (8001564 <main+0x84>)
 8001520:	4811      	ldr	r0, [pc, #68]	; (8001568 <main+0x88>)
 8001522:	f000 ff89 	bl	8002438 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim6);
 8001526:	4811      	ldr	r0, [pc, #68]	; (800156c <main+0x8c>)
 8001528:	f007 fdd4 	bl	80090d4 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcData, BUFFER_SIZE);
 800152c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001530:	490f      	ldr	r1, [pc, #60]	; (8001570 <main+0x90>)
 8001532:	4810      	ldr	r0, [pc, #64]	; (8001574 <main+0x94>)
 8001534:	f000 ff80 	bl	8002438 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) dacData, BUFFER_SIZE, DAC_ALIGN_12B_R);
 8001538:	2300      	movs	r3, #0
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <main+0x98>)
 8001542:	2100      	movs	r1, #0
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <main+0x9c>)
 8001546:	f001 feeb 	bl	8003320 <HAL_DAC_Start_DMA>

  Delay_Init();
 800154a:	f7ff fa0f 	bl	800096c <Delay_Init>
  Tremolo_Init();
 800154e:	f7ff fb17 	bl	8000b80 <Tremolo_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(dataReady) {
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <main+0xa0>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0fb      	beq.n	8001552 <main+0x72>
		  processData();
 800155a:	f7ff ff97 	bl	800148c <processData>
	  if(dataReady) {
 800155e:	e7f8      	b.n	8001552 <main+0x72>
 8001560:	24000728 	.word	0x24000728
 8001564:	24000708 	.word	0x24000708
 8001568:	24000124 	.word	0x24000124
 800156c:	24000774 	.word	0x24000774
 8001570:	24000308 	.word	0x24000308
 8001574:	240000c0 	.word	0x240000c0
 8001578:	24000508 	.word	0x24000508
 800157c:	2400027c 	.word	0x2400027c
 8001580:	24000718 	.word	0x24000718

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b09c      	sub	sp, #112	; 0x70
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	224c      	movs	r2, #76	; 0x4c
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f009 fa72 	bl	800aa7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2220      	movs	r2, #32
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f009 fa6c 	bl	800aa7c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80015a4:	2004      	movs	r0, #4
 80015a6:	f004 fca5 	bl	8005ef4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80015aa:	2300      	movs	r3, #0
 80015ac:	603b      	str	r3, [r7, #0]
 80015ae:	4b31      	ldr	r3, [pc, #196]	; (8001674 <SystemClock_Config+0xf0>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	4a30      	ldr	r2, [pc, #192]	; (8001674 <SystemClock_Config+0xf0>)
 80015b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015b8:	6193      	str	r3, [r2, #24]
 80015ba:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <SystemClock_Config+0xf0>)
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015c6:	bf00      	nop
 80015c8:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <SystemClock_Config+0xf0>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015d4:	d1f8      	bne.n	80015c8 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80015d6:	4b28      	ldr	r3, [pc, #160]	; (8001678 <SystemClock_Config+0xf4>)
 80015d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015da:	f023 0303 	bic.w	r3, r3, #3
 80015de:	4a26      	ldr	r2, [pc, #152]	; (8001678 <SystemClock_Config+0xf4>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80015e6:	2329      	movs	r3, #41	; 0x29
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015ea:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015f0:	2301      	movs	r3, #1
 80015f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80015f4:	2301      	movs	r3, #1
 80015f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f8:	2302      	movs	r3, #2
 80015fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015fc:	2302      	movs	r3, #2
 80015fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001600:	2301      	movs	r3, #1
 8001602:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8001604:	2346      	movs	r3, #70	; 0x46
 8001606:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001608:	2302      	movs	r3, #2
 800160a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800160c:	2304      	movs	r3, #4
 800160e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001610:	2302      	movs	r3, #2
 8001612:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001614:	230c      	movs	r3, #12
 8001616:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001618:	2300      	movs	r3, #0
 800161a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	4618      	mov	r0, r3
 8001626:	f004 fcbf 	bl	8005fa8 <HAL_RCC_OscConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001630:	f000 f850 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001634:	233f      	movs	r3, #63	; 0x3f
 8001636:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001638:	2303      	movs	r3, #3
 800163a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001644:	2340      	movs	r3, #64	; 0x40
 8001646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001648:	2340      	movs	r3, #64	; 0x40
 800164a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800164c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001650:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001652:	2340      	movs	r3, #64	; 0x40
 8001654:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2107      	movs	r1, #7
 800165a:	4618      	mov	r0, r3
 800165c:	f005 f8a8 	bl	80067b0 <HAL_RCC_ClockConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001666:	f000 f835 	bl	80016d4 <Error_Handler>
  }
}
 800166a:	bf00      	nop
 800166c:	3770      	adds	r7, #112	; 0x70
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	58024800 	.word	0x58024800
 8001678:	58024400 	.word	0x58024400

0800167c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0ae      	sub	sp, #184	; 0xb8
 8001680:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001682:	463b      	mov	r3, r7
 8001684:	22b8      	movs	r2, #184	; 0xb8
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f009 f9f7 	bl	800aa7c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800168e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001692:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001694:	2301      	movs	r3, #1
 8001696:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001698:	2310      	movs	r3, #16
 800169a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 800169c:	2301      	movs	r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80016a8:	23c0      	movs	r3, #192	; 0xc0
 80016aa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ba:	463b      	mov	r3, r7
 80016bc:	4618      	mov	r0, r3
 80016be:	f005 fc03 	bl	8006ec8 <HAL_RCCEx_PeriphCLKConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80016c8:	f000 f804 	bl	80016d4 <Error_Handler>
  }
}
 80016cc:	bf00      	nop
 80016ce:	37b8      	adds	r7, #184	; 0xb8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016dc:	e7fe      	b.n	80016dc <Error_Handler+0x8>
	...

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_MspInit+0x30>)
 80016e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80016ec:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x30>)
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x30>)
 80016f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	58024400 	.word	0x58024400

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001760:	f000 fae4 	bl	8001d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800176c:	4802      	ldr	r0, [pc, #8]	; (8001778 <DMA1_Stream0_IRQHandler+0x10>)
 800176e:	f002 fe75 	bl	800445c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	24000188 	.word	0x24000188

0800177c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <DMA1_Stream1_IRQHandler+0x10>)
 8001782:	f002 fe6b 	bl	800445c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	24000290 	.word	0x24000290

08001790 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <DMA1_Stream2_IRQHandler+0x10>)
 8001796:	f002 fe61 	bl	800445c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	24000200 	.word	0x24000200

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	; (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f009 f920 	bl	800aa18 <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	24100000 	.word	0x24100000
 8001804:	00000400 	.word	0x00000400
 8001808:	24000724 	.word	0x24000724
 800180c:	24000868 	.word	0x24000868

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001814:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <SystemInit+0xd0>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181a:	4a31      	ldr	r2, [pc, #196]	; (80018e0 <SystemInit+0xd0>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <SystemInit+0xd4>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 030f 	and.w	r3, r3, #15
 800182c:	2b02      	cmp	r3, #2
 800182e:	d807      	bhi.n	8001840 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001830:	4b2c      	ldr	r3, [pc, #176]	; (80018e4 <SystemInit+0xd4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f023 030f 	bic.w	r3, r3, #15
 8001838:	4a2a      	ldr	r2, [pc, #168]	; (80018e4 <SystemInit+0xd4>)
 800183a:	f043 0303 	orr.w	r3, r3, #3
 800183e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <SystemInit+0xd8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a28      	ldr	r2, [pc, #160]	; (80018e8 <SystemInit+0xd8>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800184c:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <SystemInit+0xd8>)
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001852:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <SystemInit+0xd8>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4924      	ldr	r1, [pc, #144]	; (80018e8 <SystemInit+0xd8>)
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <SystemInit+0xdc>)
 800185a:	4013      	ands	r3, r2
 800185c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800185e:	4b21      	ldr	r3, [pc, #132]	; (80018e4 <SystemInit+0xd4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800186a:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <SystemInit+0xd4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 030f 	bic.w	r3, r3, #15
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <SystemInit+0xd4>)
 8001874:	f043 0303 	orr.w	r3, r3, #3
 8001878:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <SystemInit+0xd8>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <SystemInit+0xd8>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <SystemInit+0xd8>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <SystemInit+0xd8>)
 800188e:	4a18      	ldr	r2, [pc, #96]	; (80018f0 <SystemInit+0xe0>)
 8001890:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <SystemInit+0xd8>)
 8001894:	4a17      	ldr	r2, [pc, #92]	; (80018f4 <SystemInit+0xe4>)
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <SystemInit+0xd8>)
 800189a:	4a17      	ldr	r2, [pc, #92]	; (80018f8 <SystemInit+0xe8>)
 800189c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <SystemInit+0xd8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <SystemInit+0xd8>)
 80018a6:	4a14      	ldr	r2, [pc, #80]	; (80018f8 <SystemInit+0xe8>)
 80018a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <SystemInit+0xd8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80018b0:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <SystemInit+0xd8>)
 80018b2:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <SystemInit+0xe8>)
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <SystemInit+0xd8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <SystemInit+0xd8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <SystemInit+0xd8>)
 80018c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <SystemInit+0xd8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <SystemInit+0xec>)
 80018d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80018d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00
 80018e4:	52002000 	.word	0x52002000
 80018e8:	58024400 	.word	0x58024400
 80018ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80018f0:	02020200 	.word	0x02020200
 80018f4:	01ff0000 	.word	0x01ff0000
 80018f8:	01010280 	.word	0x01010280
 80018fc:	52004000 	.word	0x52004000

08001900 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001906:	f107 0310 	add.w	r3, r7, #16
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <MX_TIM3_Init+0x98>)
 8001920:	4a1e      	ldr	r2, [pc, #120]	; (800199c <MX_TIM3_Init+0x9c>)
 8001922:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000 - 1;
 8001924:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <MX_TIM3_Init+0x98>)
 8001926:	f240 32e7 	movw	r2, #999	; 0x3e7
 800192a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <MX_TIM3_Init+0x98>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2800;
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <MX_TIM3_Init+0x98>)
 8001934:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8001938:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <MX_TIM3_Init+0x98>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <MX_TIM3_Init+0x98>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001946:	4814      	ldr	r0, [pc, #80]	; (8001998 <MX_TIM3_Init+0x98>)
 8001948:	f007 fb6c 	bl	8009024 <HAL_TIM_Base_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001952:	f7ff febf 	bl	80016d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	4619      	mov	r1, r3
 8001962:	480d      	ldr	r0, [pc, #52]	; (8001998 <MX_TIM3_Init+0x98>)
 8001964:	f007 fc26 	bl	80091b4 <HAL_TIM_ConfigClockSource>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800196e:	f7ff feb1 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001972:	2320      	movs	r3, #32
 8001974:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	4619      	mov	r1, r3
 800197e:	4806      	ldr	r0, [pc, #24]	; (8001998 <MX_TIM3_Init+0x98>)
 8001980:	f007 fe48 	bl	8009614 <HAL_TIMEx_MasterConfigSynchronization>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800198a:	f7ff fea3 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	3720      	adds	r7, #32
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	24000728 	.word	0x24000728
 800199c:	40000400 	.word	0x40000400

080019a0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MX_TIM6_Init+0x64>)
 80019b2:	4a15      	ldr	r2, [pc, #84]	; (8001a08 <MX_TIM6_Init+0x68>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <MX_TIM6_Init+0x64>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_TIM6_Init+0x64>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <MX_TIM6_Init+0x64>)
 80019c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_TIM6_Init+0x64>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019d0:	480c      	ldr	r0, [pc, #48]	; (8001a04 <MX_TIM6_Init+0x64>)
 80019d2:	f007 fb27 	bl	8009024 <HAL_TIM_Base_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80019dc:	f7ff fe7a 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019e0:	2320      	movs	r3, #32
 80019e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	4619      	mov	r1, r3
 80019ec:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MX_TIM6_Init+0x64>)
 80019ee:	f007 fe11 	bl	8009614 <HAL_TIMEx_MasterConfigSynchronization>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80019f8:	f7ff fe6c 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	24000774 	.word	0x24000774
 8001a08:	40001000 	.word	0x40001000

08001a0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <HAL_TIM_Base_MspInit+0x68>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d10f      	bne.n	8001a3e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_TIM_Base_MspInit+0x6c>)
 8001a20:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <HAL_TIM_Base_MspInit+0x6c>)
 8001a26:	f043 0302 	orr.w	r3, r3, #2
 8001a2a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_TIM_Base_MspInit+0x6c>)
 8001a30:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001a3c:	e013      	b.n	8001a66 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM6)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <HAL_TIM_Base_MspInit+0x70>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d10e      	bne.n	8001a66 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_TIM_Base_MspInit+0x6c>)
 8001a4a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_TIM_Base_MspInit+0x6c>)
 8001a50:	f043 0310 	orr.w	r3, r3, #16
 8001a54:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <HAL_TIM_Base_MspInit+0x6c>)
 8001a5a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40000400 	.word	0x40000400
 8001a78:	58024400 	.word	0x58024400
 8001a7c:	40001000 	.word	0x40001000

08001a80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a84:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <MX_USART3_UART_Init+0x90>)
 8001a86:	4a23      	ldr	r2, [pc, #140]	; (8001b14 <MX_USART3_UART_Init+0x94>)
 8001a88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a8a:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <MX_USART3_UART_Init+0x90>)
 8001a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <MX_USART3_UART_Init+0x90>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <MX_USART3_UART_Init+0x90>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <MX_USART3_UART_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001aa4:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <MX_USART3_UART_Init+0x90>)
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <MX_USART3_UART_Init+0x90>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <MX_USART3_UART_Init+0x90>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <MX_USART3_UART_Init+0x90>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_USART3_UART_Init+0x90>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <MX_USART3_UART_Init+0x90>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ac8:	4811      	ldr	r0, [pc, #68]	; (8001b10 <MX_USART3_UART_Init+0x90>)
 8001aca:	f007 fe31 	bl	8009730 <HAL_UART_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ad4:	f7ff fdfe 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ad8:	2100      	movs	r1, #0
 8001ada:	480d      	ldr	r0, [pc, #52]	; (8001b10 <MX_USART3_UART_Init+0x90>)
 8001adc:	f008 fed2 	bl	800a884 <HAL_UARTEx_SetTxFifoThreshold>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ae6:	f7ff fdf5 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aea:	2100      	movs	r1, #0
 8001aec:	4808      	ldr	r0, [pc, #32]	; (8001b10 <MX_USART3_UART_Init+0x90>)
 8001aee:	f008 ff07 	bl	800a900 <HAL_UARTEx_SetRxFifoThreshold>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001af8:	f7ff fdec 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <MX_USART3_UART_Init+0x90>)
 8001afe:	f008 fe88 	bl	800a812 <HAL_UARTEx_DisableFifoMode>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001b08:	f7ff fde4 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	240007c0 	.word	0x240007c0
 8001b14:	40004800 	.word	0x40004800

08001b18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b0b8      	sub	sp, #224	; 0xe0
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	22b8      	movs	r2, #184	; 0xb8
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f008 ff9f 	bl	800aa7c <memset>
  if(uartHandle->Instance==USART3)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a25      	ldr	r2, [pc, #148]	; (8001bd8 <HAL_UART_MspInit+0xc0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d142      	bne.n	8001bce <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4618      	mov	r0, r3
 8001b58:	f005 f9b6 	bl	8006ec8 <HAL_RCCEx_PeriphCLKConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b62:	f7ff fdb7 	bl	80016d4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b66:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <HAL_UART_MspInit+0xc4>)
 8001b68:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <HAL_UART_MspInit+0xc4>)
 8001b6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b72:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_UART_MspInit+0xc4>)
 8001b78:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_UART_MspInit+0xc4>)
 8001b86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b8a:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <HAL_UART_MspInit+0xc4>)
 8001b8c:	f043 0308 	orr.w	r3, r3, #8
 8001b90:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_UART_MspInit+0xc4>)
 8001b96:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001ba2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ba6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bbc:	2307      	movs	r3, #7
 8001bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4805      	ldr	r0, [pc, #20]	; (8001be0 <HAL_UART_MspInit+0xc8>)
 8001bca:	f003 ffc9 	bl	8005b60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001bce:	bf00      	nop
 8001bd0:	37e0      	adds	r7, #224	; 0xe0
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40004800 	.word	0x40004800
 8001bdc:	58024400 	.word	0x58024400
 8001be0:	58020c00 	.word	0x58020c00

08001be4 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bf8:	f7ff fe0a 	bl	8001810 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bfe:	490d      	ldr	r1, [pc, #52]	; (8001c34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c00:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c04:	e002      	b.n	8001c0c <LoopCopyDataInit>

08001c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0a:	3304      	adds	r3, #4

08001c0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c10:	d3f9      	bcc.n	8001c06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c14:	4c0a      	ldr	r4, [pc, #40]	; (8001c40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c18:	e001      	b.n	8001c1e <LoopFillZerobss>

08001c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c1c:	3204      	adds	r2, #4

08001c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c20:	d3fb      	bcc.n	8001c1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c22:	f008 feff 	bl	800aa24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c26:	f7ff fc5b 	bl	80014e0 <main>
  bx  lr
 8001c2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c2c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001c30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c34:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001c38:	0800af58 	.word	0x0800af58
  ldr r2, =_sbss
 8001c3c:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001c40:	24000864 	.word	0x24000864

08001c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c44:	e7fe      	b.n	8001c44 <ADC_IRQHandler>
	...

08001c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4e:	2003      	movs	r0, #3
 8001c50:	f001 fb04 	bl	800325c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001c54:	f004 ff62 	bl	8006b1c <HAL_RCC_GetSysClockFreq>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_Init+0x68>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	4913      	ldr	r1, [pc, #76]	; (8001cb4 <HAL_Init+0x6c>)
 8001c66:	5ccb      	ldrb	r3, [r1, r3]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c70:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_Init+0x68>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <HAL_Init+0x6c>)
 8001c7c:	5cd3      	ldrb	r3, [r2, r3]
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
 8001c88:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <HAL_Init+0x70>)
 8001c8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <HAL_Init+0x74>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c92:	2000      	movs	r0, #0
 8001c94:	f000 f814 	bl	8001cc0 <HAL_InitTick>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e002      	b.n	8001ca8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca2:	f7ff fd1d 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	58024400 	.word	0x58024400
 8001cb4:	0800adc8 	.word	0x0800adc8
 8001cb8:	24000004 	.word	0x24000004
 8001cbc:	24000000 	.word	0x24000000

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_InitTick+0x60>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e021      	b.n	8001d18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_InitTick+0x64>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_InitTick+0x60>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 fae9 	bl	80032c2 <HAL_SYSTICK_Config>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e00e      	b.n	8001d18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b0f      	cmp	r3, #15
 8001cfe:	d80a      	bhi.n	8001d16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d00:	2200      	movs	r2, #0
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	f001 fab3 	bl	8003272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d0c:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <HAL_InitTick+0x68>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	2400000c 	.word	0x2400000c
 8001d24:	24000000 	.word	0x24000000
 8001d28:	24000008 	.word	0x24000008

08001d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_IncTick+0x20>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_IncTick+0x24>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <HAL_IncTick+0x24>)
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	2400000c 	.word	0x2400000c
 8001d50:	24000850 	.word	0x24000850

08001d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return uwTick;
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <HAL_GetTick+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	24000850 	.word	0x24000850

08001d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d74:	f7ff ffee 	bl	8001d54 <HAL_GetTick>
 8001d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d84:	d005      	beq.n	8001d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_Delay+0x44>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d92:	bf00      	nop
 8001d94:	f7ff ffde 	bl	8001d54 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d8f7      	bhi.n	8001d94 <HAL_Delay+0x28>
  {
  }
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2400000c 	.word	0x2400000c

08001db4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	609a      	str	r2, [r3, #8]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	3360      	adds	r3, #96	; 0x60
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001e50:	bf00      	nop
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	611a      	str	r2, [r3, #16]
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b087      	sub	sp, #28
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	60f8      	str	r0, [r7, #12]
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3360      	adds	r3, #96	; 0x60
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	601a      	str	r2, [r3, #0]
  }
}
 8001eb8:	bf00      	nop
 8001eba:	371c      	adds	r7, #28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b087      	sub	sp, #28
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	60f8      	str	r0, [r7, #12]
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3330      	adds	r3, #48	; 0x30
 8001efa:	461a      	mov	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	4413      	add	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	211f      	movs	r1, #31
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	401a      	ands	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	0e9b      	lsrs	r3, r3, #26
 8001f22:	f003 011f 	and.w	r1, r3, #31
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	431a      	orrs	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f36:	bf00      	nop
 8001f38:	371c      	adds	r7, #28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f023 0203 	bic.w	r2, r3, #3
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	60da      	str	r2, [r3, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3314      	adds	r3, #20
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	0e5b      	lsrs	r3, r3, #25
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	4413      	add	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	0d1b      	lsrs	r3, r3, #20
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	2107      	movs	r1, #7
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	0d1b      	lsrs	r3, r3, #20
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	431a      	orrs	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fb2:	bf00      	nop
 8001fb4:	371c      	adds	r7, #28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
	...

08001fc0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	401a      	ands	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0318 	and.w	r3, r3, #24
 8001fe2:	4908      	ldr	r1, [pc, #32]	; (8002004 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fe4:	40d9      	lsrs	r1, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	400b      	ands	r3, r1
 8001fea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	000fffff 	.word	0x000fffff

08002008 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 031f 	and.w	r3, r3, #31
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002032:	4013      	ands	r3, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6093      	str	r3, [r2, #8]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	5fffffc0 	.word	0x5fffffc0

08002048 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800205c:	d101      	bne.n	8002062 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <LL_ADC_EnableInternalRegulator+0x24>)
 800207e:	4013      	ands	r3, r2
 8002080:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	6fffffc0 	.word	0x6fffffc0

08002098 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020ac:	d101      	bne.n	80020b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <LL_ADC_Enable+0x24>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	7fffffc0 	.word	0x7fffffc0

080020e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <LL_ADC_IsEnabled+0x18>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <LL_ADC_IsEnabled+0x1a>
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
	...

08002110 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <LL_ADC_REG_StartConversion+0x24>)
 800211e:	4013      	ands	r3, r2
 8002120:	f043 0204 	orr.w	r2, r3, #4
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	7fffffc0 	.word	0x7fffffc0

08002138 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b04      	cmp	r3, #4
 800214a:	d101      	bne.n	8002150 <LL_ADC_REG_IsConversionOngoing+0x18>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b08      	cmp	r3, #8
 8002170:	d101      	bne.n	8002176 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e138      	b.n	8002410 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7fe fe59 	bl	8000e64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff3f 	bl	8002048 <LL_ADC_IsDeepPowerDownEnabled>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff25 	bl	8002024 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff5a 	bl	8002098 <LL_ADC_IsInternalRegulatorEnabled>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d114      	bne.n	8002214 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ff3e 	bl	8002070 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021f4:	4b88      	ldr	r3, [pc, #544]	; (8002418 <HAL_ADC_Init+0x294>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	4a88      	ldr	r2, [pc, #544]	; (800241c <HAL_ADC_Init+0x298>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	099b      	lsrs	r3, r3, #6
 8002202:	3301      	adds	r3, #1
 8002204:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002206:	e002      	b.n	800220e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	3b01      	subs	r3, #1
 800220c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f9      	bne.n	8002208 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff3d 	bl	8002098 <LL_ADC_IsInternalRegulatorEnabled>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10d      	bne.n	8002240 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002228:	f043 0210 	orr.w	r2, r3, #16
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff77 	bl	8002138 <LL_ADC_REG_IsConversionOngoing>
 800224a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b00      	cmp	r3, #0
 8002256:	f040 80d2 	bne.w	80023fe <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b00      	cmp	r3, #0
 800225e:	f040 80ce 	bne.w	80023fe <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800226a:	f043 0202 	orr.w	r2, r3, #2
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff ff36 	bl	80020e8 <LL_ADC_IsEnabled>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d110      	bne.n	80022a4 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002282:	4867      	ldr	r0, [pc, #412]	; (8002420 <HAL_ADC_Init+0x29c>)
 8002284:	f7ff ff30 	bl	80020e8 <LL_ADC_IsEnabled>
 8002288:	4604      	mov	r4, r0
 800228a:	4866      	ldr	r0, [pc, #408]	; (8002424 <HAL_ADC_Init+0x2a0>)
 800228c:	f7ff ff2c 	bl	80020e8 <LL_ADC_IsEnabled>
 8002290:	4603      	mov	r3, r0
 8002292:	4323      	orrs	r3, r4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d105      	bne.n	80022a4 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4619      	mov	r1, r3
 800229e:	4862      	ldr	r0, [pc, #392]	; (8002428 <HAL_ADC_Init+0x2a4>)
 80022a0:	f7ff fd88 	bl	8001db4 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7d5b      	ldrb	r3, [r3, #21]
 80022a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022ae:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80022b4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	7f1b      	ldrb	r3, [r3, #28]
 80022ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7f1b      	ldrb	r3, [r3, #28]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d106      	bne.n	80022d6 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	045b      	lsls	r3, r3, #17
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	4b4c      	ldr	r3, [pc, #304]	; (800242c <HAL_ADC_Init+0x2a8>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	69b9      	ldr	r1, [r7, #24]
 8002302:	430b      	orrs	r3, r1
 8002304:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff14 	bl	8002138 <LL_ADC_REG_IsConversionOngoing>
 8002310:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff21 	bl	800215e <LL_ADC_INJ_IsConversionOngoing>
 800231c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d14a      	bne.n	80023ba <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d147      	bne.n	80023ba <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	7d1b      	ldrb	r3, [r3, #20]
 800232e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	4b3c      	ldr	r3, [pc, #240]	; (8002430 <HAL_ADC_Init+0x2ac>)
 8002340:	4013      	ands	r3, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	430b      	orrs	r3, r1
 800234a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002352:	2b01      	cmp	r3, #1
 8002354:	d11b      	bne.n	800238e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	4b34      	ldr	r3, [pc, #208]	; (8002434 <HAL_ADC_Init+0x2b0>)
 8002364:	4013      	ands	r3, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800236a:	3a01      	subs	r2, #1
 800236c:	0411      	lsls	r1, r2, #16
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002372:	4311      	orrs	r1, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002378:	4311      	orrs	r1, r2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800237e:	430a      	orrs	r2, r1
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	611a      	str	r2, [r3, #16]
 800238c:	e007      	b.n	800239e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0201 	bic.w	r2, r2, #1
 800239c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 fcf3 	bl	8002da0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d10c      	bne.n	80023dc <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	f023 010f 	bic.w	r1, r3, #15
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	1e5a      	subs	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	631a      	str	r2, [r3, #48]	; 0x30
 80023da:	e007      	b.n	80023ec <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 020f 	bic.w	r2, r2, #15
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	f023 0303 	bic.w	r3, r3, #3
 80023f4:	f043 0201 	orr.w	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
 80023fc:	e007      	b.n	800240e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002402:	f043 0210 	orr.w	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800240e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3724      	adds	r7, #36	; 0x24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd90      	pop	{r4, r7, pc}
 8002418:	24000000 	.word	0x24000000
 800241c:	053e2d63 	.word	0x053e2d63
 8002420:	40022000 	.word	0x40022000
 8002424:	40022100 	.word	0x40022100
 8002428:	40022300 	.word	0x40022300
 800242c:	fff0c003 	.word	0xfff0c003
 8002430:	ffffbffc 	.word	0xffffbffc
 8002434:	fc00f81e 	.word	0xfc00f81e

08002438 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002444:	484f      	ldr	r0, [pc, #316]	; (8002584 <HAL_ADC_Start_DMA+0x14c>)
 8002446:	f7ff fddf 	bl	8002008 <LL_ADC_GetMultimode>
 800244a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fe71 	bl	8002138 <LL_ADC_REG_IsConversionOngoing>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	f040 808c 	bne.w	8002576 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_ADC_Start_DMA+0x34>
 8002468:	2302      	movs	r3, #2
 800246a:	e087      	b.n	800257c <HAL_ADC_Start_DMA+0x144>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b05      	cmp	r3, #5
 800247e:	d002      	beq.n	8002486 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b09      	cmp	r3, #9
 8002484:	d170      	bne.n	8002568 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 fb7a 	bl	8002b80 <ADC_Enable>
 800248c:	4603      	mov	r3, r0
 800248e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002490:	7dfb      	ldrb	r3, [r7, #23]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d163      	bne.n	800255e <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800249a:	4b3b      	ldr	r3, [pc, #236]	; (8002588 <HAL_ADC_Start_DMA+0x150>)
 800249c:	4013      	ands	r3, r2
 800249e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a38      	ldr	r2, [pc, #224]	; (800258c <HAL_ADC_Start_DMA+0x154>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d002      	beq.n	80024b6 <HAL_ADC_Start_DMA+0x7e>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	e000      	b.n	80024b8 <HAL_ADC_Start_DMA+0x80>
 80024b6:	4b36      	ldr	r3, [pc, #216]	; (8002590 <HAL_ADC_Start_DMA+0x158>)
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	4293      	cmp	r3, r2
 80024be:	d002      	beq.n	80024c6 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d105      	bne.n	80024d2 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d006      	beq.n	80024ec <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	f023 0206 	bic.w	r2, r3, #6
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	659a      	str	r2, [r3, #88]	; 0x58
 80024ea:	e002      	b.n	80024f2 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f6:	4a27      	ldr	r2, [pc, #156]	; (8002594 <HAL_ADC_Start_DMA+0x15c>)
 80024f8:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fe:	4a26      	ldr	r2, [pc, #152]	; (8002598 <HAL_ADC_Start_DMA+0x160>)
 8002500:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	4a25      	ldr	r2, [pc, #148]	; (800259c <HAL_ADC_Start_DMA+0x164>)
 8002508:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	221c      	movs	r2, #28
 8002510:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0210 	orr.w	r2, r2, #16
 8002528:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	4619      	mov	r1, r3
 8002534:	4610      	mov	r0, r2
 8002536:	f7ff fd04 	bl	8001f42 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3340      	adds	r3, #64	; 0x40
 8002544:	4619      	mov	r1, r3
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f001 fd1d 	bl	8003f88 <HAL_DMA_Start_IT>
 800254e:	4603      	mov	r3, r0
 8002550:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fdda 	bl	8002110 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800255c:	e00d      	b.n	800257a <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002566:	e008      	b.n	800257a <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002574:	e001      	b.n	800257a <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002576:	2302      	movs	r3, #2
 8002578:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800257a:	7dfb      	ldrb	r3, [r7, #23]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40022300 	.word	0x40022300
 8002588:	fffff0fe 	.word	0xfffff0fe
 800258c:	40022100 	.word	0x40022100
 8002590:	40022000 	.word	0x40022000
 8002594:	08002c79 	.word	0x08002c79
 8002598:	08002d51 	.word	0x08002d51
 800259c:	08002d6d 	.word	0x08002d6d

080025a0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b0a1      	sub	sp, #132	; 0x84
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a9a      	ldr	r2, [pc, #616]	; (8002838 <HAL_ADC_ConfigChannel+0x284>)
 80025ce:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_ADC_ConfigChannel+0x2a>
 80025da:	2302      	movs	r3, #2
 80025dc:	e2bc      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x5a4>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fda4 	bl	8002138 <LL_ADC_REG_IsConversionOngoing>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 82a1 	bne.w	8002b3a <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002600:	2b00      	cmp	r3, #0
 8002602:	d108      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x62>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	0e9b      	lsrs	r3, r3, #26
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	2201      	movs	r2, #1
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	e016      	b.n	8002644 <HAL_ADC_ConfigChannel+0x90>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002626:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800262e:	2320      	movs	r3, #32
 8002630:	e003      	b.n	800263a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	2201      	movs	r2, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	69d1      	ldr	r1, [r2, #28]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	430b      	orrs	r3, r1
 8002650:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	f7ff fc43 	bl	8001eea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fd65 	bl	8002138 <LL_ADC_REG_IsConversionOngoing>
 800266e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fd72 	bl	800215e <LL_ADC_INJ_IsConversionOngoing>
 800267a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800267c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 80a0 	bne.w	80027c4 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 809c 	bne.w	80027c4 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	461a      	mov	r2, r3
 800269a:	f7ff fc65 	bl	8001f68 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10b      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x110>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	e00a      	b.n	80026da <HAL_ADC_ConfigChannel+0x126>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d027      	beq.n	8002734 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6919      	ldr	r1, [r3, #16]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026f2:	f7ff fb93 	bl	8001e1c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6919      	ldr	r1, [r3, #16]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	7e5b      	ldrb	r3, [r3, #25]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d102      	bne.n	800270c <HAL_ADC_ConfigChannel+0x158>
 8002706:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800270a:	e000      	b.n	800270e <HAL_ADC_ConfigChannel+0x15a>
 800270c:	2300      	movs	r3, #0
 800270e:	461a      	mov	r2, r3
 8002710:	f7ff fbbd 	bl	8001e8e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6919      	ldr	r1, [r3, #16]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	7e1b      	ldrb	r3, [r3, #24]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d102      	bne.n	800272a <HAL_ADC_ConfigChannel+0x176>
 8002724:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002728:	e000      	b.n	800272c <HAL_ADC_ConfigChannel+0x178>
 800272a:	2300      	movs	r3, #0
 800272c:	461a      	mov	r2, r3
 800272e:	f7ff fb95 	bl	8001e5c <LL_ADC_SetDataRightShift>
 8002732:	e047      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	069b      	lsls	r3, r3, #26
 8002744:	429a      	cmp	r2, r3
 8002746:	d107      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002756:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800275e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	069b      	lsls	r3, r3, #26
 8002768:	429a      	cmp	r2, r3
 800276a:	d107      	bne.n	800277c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800277a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002782:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	069b      	lsls	r3, r3, #26
 800278c:	429a      	cmp	r2, r3
 800278e:	d107      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800279e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	069b      	lsls	r3, r3, #26
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d107      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fc8d 	bl	80020e8 <LL_ADC_IsEnabled>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f040 81bb 	bne.w	8002b4c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	6819      	ldr	r1, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	461a      	mov	r2, r3
 80027e4:	f7ff fbec 	bl	8001fc0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4a12      	ldr	r2, [pc, #72]	; (8002838 <HAL_ADC_ConfigChannel+0x284>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	f040 8130 	bne.w	8002a54 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10b      	bne.n	800281c <HAL_ADC_ConfigChannel+0x268>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	0e9b      	lsrs	r3, r3, #26
 800280a:	3301      	adds	r3, #1
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	2b09      	cmp	r3, #9
 8002812:	bf94      	ite	ls
 8002814:	2301      	movls	r3, #1
 8002816:	2300      	movhi	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e01b      	b.n	8002854 <HAL_ADC_ConfigChannel+0x2a0>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800282a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800282e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d103      	bne.n	800283c <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002834:	2320      	movs	r3, #32
 8002836:	e005      	b.n	8002844 <HAL_ADC_ConfigChannel+0x290>
 8002838:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 800283c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	3301      	adds	r3, #1
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	2b09      	cmp	r3, #9
 800284c:	bf94      	ite	ls
 800284e:	2301      	movls	r3, #1
 8002850:	2300      	movhi	r3, #0
 8002852:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002854:	2b00      	cmp	r3, #0
 8002856:	d079      	beq.n	800294c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002860:	2b00      	cmp	r3, #0
 8002862:	d107      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x2c0>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	0e9b      	lsrs	r3, r3, #26
 800286a:	3301      	adds	r3, #1
 800286c:	069b      	lsls	r3, r3, #26
 800286e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002872:	e015      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x2ec>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287c:	fa93 f3a3 	rbit	r3, r3
 8002880:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002884:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800288c:	2320      	movs	r3, #32
 800288e:	e003      	b.n	8002898 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002892:	fab3 f383 	clz	r3, r3
 8002896:	b2db      	uxtb	r3, r3
 8002898:	3301      	adds	r3, #1
 800289a:	069b      	lsls	r3, r3, #26
 800289c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <HAL_ADC_ConfigChannel+0x30c>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	0e9b      	lsrs	r3, r3, #26
 80028b2:	3301      	adds	r3, #1
 80028b4:	f003 031f 	and.w	r3, r3, #31
 80028b8:	2101      	movs	r1, #1
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	e017      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x33c>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80028ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80028d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80028d8:	2320      	movs	r3, #32
 80028da:	e003      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80028dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	f003 031f 	and.w	r3, r3, #31
 80028ea:	2101      	movs	r1, #1
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	ea42 0103 	orr.w	r1, r2, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x362>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	0e9b      	lsrs	r3, r3, #26
 8002906:	3301      	adds	r3, #1
 8002908:	f003 021f 	and.w	r2, r3, #31
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	051b      	lsls	r3, r3, #20
 8002914:	e018      	b.n	8002948 <HAL_ADC_ConfigChannel+0x394>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002926:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800292e:	2320      	movs	r3, #32
 8002930:	e003      	b.n	800293a <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	fab3 f383 	clz	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	3301      	adds	r3, #1
 800293c:	f003 021f 	and.w	r2, r3, #31
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002948:	430b      	orrs	r3, r1
 800294a:	e07e      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002954:	2b00      	cmp	r3, #0
 8002956:	d107      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x3b4>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0e9b      	lsrs	r3, r3, #26
 800295e:	3301      	adds	r3, #1
 8002960:	069b      	lsls	r3, r3, #26
 8002962:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002966:	e015      	b.n	8002994 <HAL_ADC_ConfigChannel+0x3e0>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800297a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002980:	2320      	movs	r3, #32
 8002982:	e003      	b.n	800298c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	3301      	adds	r3, #1
 800298e:	069b      	lsls	r3, r3, #26
 8002990:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x400>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0e9b      	lsrs	r3, r3, #26
 80029a6:	3301      	adds	r3, #1
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	2101      	movs	r1, #1
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	e017      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x430>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	61bb      	str	r3, [r7, #24]
  return result;
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80029cc:	2320      	movs	r3, #32
 80029ce:	e003      	b.n	80029d8 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	2101      	movs	r1, #1
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	ea42 0103 	orr.w	r1, r2, r3
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10d      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x45c>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	0e9b      	lsrs	r3, r3, #26
 80029fa:	3301      	adds	r3, #1
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	3b1e      	subs	r3, #30
 8002a08:	051b      	lsls	r3, r3, #20
 8002a0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	e01b      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x494>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	60fb      	str	r3, [r7, #12]
  return result;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002a28:	2320      	movs	r3, #32
 8002a2a:	e003      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	3301      	adds	r3, #1
 8002a36:	f003 021f 	and.w	r2, r3, #31
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	3b1e      	subs	r3, #30
 8002a42:	051b      	lsls	r3, r3, #20
 8002a44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	6892      	ldr	r2, [r2, #8]
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f7ff fa8a 	bl	8001f68 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	da77      	bge.n	8002b4c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a5c:	4840      	ldr	r0, [pc, #256]	; (8002b60 <HAL_ADC_ConfigChannel+0x5ac>)
 8002a5e:	f7ff f9cf 	bl	8001e00 <LL_ADC_GetCommonPathInternalCh>
 8002a62:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a64:	483f      	ldr	r0, [pc, #252]	; (8002b64 <HAL_ADC_ConfigChannel+0x5b0>)
 8002a66:	f7ff fb3f 	bl	80020e8 <LL_ADC_IsEnabled>
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	483e      	ldr	r0, [pc, #248]	; (8002b68 <HAL_ADC_ConfigChannel+0x5b4>)
 8002a6e:	f7ff fb3b 	bl	80020e8 <LL_ADC_IsEnabled>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4323      	orrs	r3, r4
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d155      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a3b      	ldr	r2, [pc, #236]	; (8002b6c <HAL_ADC_ConfigChannel+0x5b8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d122      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x516>
 8002a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d11d      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a35      	ldr	r2, [pc, #212]	; (8002b68 <HAL_ADC_ConfigChannel+0x5b4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d159      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	482f      	ldr	r0, [pc, #188]	; (8002b60 <HAL_ADC_ConfigChannel+0x5ac>)
 8002aa2:	f7ff f99a 	bl	8001dda <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002aa6:	4b32      	ldr	r3, [pc, #200]	; (8002b70 <HAL_ADC_ConfigChannel+0x5bc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	099b      	lsrs	r3, r3, #6
 8002aac:	4a31      	ldr	r2, [pc, #196]	; (8002b74 <HAL_ADC_ConfigChannel+0x5c0>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	099b      	lsrs	r3, r3, #6
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002aba:	e002      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1f9      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ac8:	e040      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2a      	ldr	r2, [pc, #168]	; (8002b78 <HAL_ADC_ConfigChannel+0x5c4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d111      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x544>
 8002ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a21      	ldr	r2, [pc, #132]	; (8002b68 <HAL_ADC_ConfigChannel+0x5b4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d131      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aee:	4619      	mov	r1, r3
 8002af0:	481b      	ldr	r0, [pc, #108]	; (8002b60 <HAL_ADC_ConfigChannel+0x5ac>)
 8002af2:	f7ff f972 	bl	8001dda <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002af6:	e029      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1f      	ldr	r2, [pc, #124]	; (8002b7c <HAL_ADC_ConfigChannel+0x5c8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d124      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x598>
 8002b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d11f      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <HAL_ADC_ConfigChannel+0x5b4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d11a      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4810      	ldr	r0, [pc, #64]	; (8002b60 <HAL_ADC_ConfigChannel+0x5ac>)
 8002b20:	f7ff f95b 	bl	8001dda <LL_ADC_SetCommonPathInternalCh>
 8002b24:	e012      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	f043 0220 	orr.w	r2, r3, #32
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b38:	e008      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3e:	f043 0220 	orr.w	r2, r3, #32
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3784      	adds	r7, #132	; 0x84
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd90      	pop	{r4, r7, pc}
 8002b60:	40022300 	.word	0x40022300
 8002b64:	40022000 	.word	0x40022000
 8002b68:	40022100 	.word	0x40022100
 8002b6c:	cb840000 	.word	0xcb840000
 8002b70:	24000000 	.word	0x24000000
 8002b74:	053e2d63 	.word	0x053e2d63
 8002b78:	bac04000 	.word	0xbac04000
 8002b7c:	cfb80000 	.word	0xcfb80000

08002b80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff faab 	bl	80020e8 <LL_ADC_IsEnabled>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d161      	bne.n	8002c5c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <ADC_Enable+0xe8>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00d      	beq.n	8002bc2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002baa:	f043 0210 	orr.w	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	f043 0201 	orr.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e04d      	b.n	8002c5e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fa7a 	bl	80020c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002bcc:	f7ff f8c2 	bl	8001d54 <HAL_GetTick>
 8002bd0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bd2:	4826      	ldr	r0, [pc, #152]	; (8002c6c <ADC_Enable+0xec>)
 8002bd4:	f7ff fa18 	bl	8002008 <LL_ADC_GetMultimode>
 8002bd8:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a24      	ldr	r2, [pc, #144]	; (8002c70 <ADC_Enable+0xf0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d002      	beq.n	8002bea <ADC_Enable+0x6a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	e000      	b.n	8002bec <ADC_Enable+0x6c>
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <ADC_Enable+0xf4>)
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d02c      	beq.n	8002c4e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d130      	bne.n	8002c5c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bfa:	e028      	b.n	8002c4e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fa71 	bl	80020e8 <LL_ADC_IsEnabled>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d104      	bne.n	8002c16 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fa55 	bl	80020c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c16:	f7ff f89d 	bl	8001d54 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d914      	bls.n	8002c4e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d00d      	beq.n	8002c4e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	f043 0210 	orr.w	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e007      	b.n	8002c5e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d1cf      	bne.n	8002bfc <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	8000003f 	.word	0x8000003f
 8002c6c:	40022300 	.word	0x40022300
 8002c70:	40022100 	.word	0x40022100
 8002c74:	40022000 	.word	0x40022000

08002c78 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d14b      	bne.n	8002d2a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d021      	beq.n	8002cf0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff f907 	bl	8001ec4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d032      	beq.n	8002d22 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d12b      	bne.n	8002d22 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d11f      	bne.n	8002d22 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54
 8002cee:	e018      	b.n	8002d22 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d111      	bne.n	8002d22 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	f043 0201 	orr.w	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f7fe fb90 	bl	8001448 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d28:	e00e      	b.n	8002d48 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f7ff fc32 	bl	80025a0 <HAL_ADC_ErrorCallback>
}
 8002d3c:	e004      	b.n	8002d48 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f7fe fb4e 	bl	8001400 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	f043 0204 	orr.w	r2, r3, #4
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f7ff fc04 	bl	80025a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002da8:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <ADC_ConfigureBoostMode+0x188>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01c      	beq.n	8002dee <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002db4:	f004 f82c 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 8002db8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dc2:	d010      	beq.n	8002de6 <ADC_ConfigureBoostMode+0x46>
 8002dc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002dc8:	d871      	bhi.n	8002eae <ADC_ConfigureBoostMode+0x10e>
 8002dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dce:	d002      	beq.n	8002dd6 <ADC_ConfigureBoostMode+0x36>
 8002dd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dd4:	d16b      	bne.n	8002eae <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	0c1b      	lsrs	r3, r3, #16
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	60fb      	str	r3, [r7, #12]
        break;
 8002de4:	e066      	b.n	8002eb4 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	089b      	lsrs	r3, r3, #2
 8002dea:	60fb      	str	r3, [r7, #12]
        break;
 8002dec:	e062      	b.n	8002eb4 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002dee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002df2:	f004 ff75 	bl	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002df6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e00:	d051      	beq.n	8002ea6 <ADC_ConfigureBoostMode+0x106>
 8002e02:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e06:	d854      	bhi.n	8002eb2 <ADC_ConfigureBoostMode+0x112>
 8002e08:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e0c:	d047      	beq.n	8002e9e <ADC_ConfigureBoostMode+0xfe>
 8002e0e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e12:	d84e      	bhi.n	8002eb2 <ADC_ConfigureBoostMode+0x112>
 8002e14:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e18:	d03d      	beq.n	8002e96 <ADC_ConfigureBoostMode+0xf6>
 8002e1a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e1e:	d848      	bhi.n	8002eb2 <ADC_ConfigureBoostMode+0x112>
 8002e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e24:	d033      	beq.n	8002e8e <ADC_ConfigureBoostMode+0xee>
 8002e26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e2a:	d842      	bhi.n	8002eb2 <ADC_ConfigureBoostMode+0x112>
 8002e2c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e30:	d029      	beq.n	8002e86 <ADC_ConfigureBoostMode+0xe6>
 8002e32:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e36:	d83c      	bhi.n	8002eb2 <ADC_ConfigureBoostMode+0x112>
 8002e38:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e3c:	d01a      	beq.n	8002e74 <ADC_ConfigureBoostMode+0xd4>
 8002e3e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e42:	d836      	bhi.n	8002eb2 <ADC_ConfigureBoostMode+0x112>
 8002e44:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e48:	d014      	beq.n	8002e74 <ADC_ConfigureBoostMode+0xd4>
 8002e4a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e4e:	d830      	bhi.n	8002eb2 <ADC_ConfigureBoostMode+0x112>
 8002e50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e54:	d00e      	beq.n	8002e74 <ADC_ConfigureBoostMode+0xd4>
 8002e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5a:	d82a      	bhi.n	8002eb2 <ADC_ConfigureBoostMode+0x112>
 8002e5c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e60:	d008      	beq.n	8002e74 <ADC_ConfigureBoostMode+0xd4>
 8002e62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002e66:	d824      	bhi.n	8002eb2 <ADC_ConfigureBoostMode+0x112>
 8002e68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e6c:	d002      	beq.n	8002e74 <ADC_ConfigureBoostMode+0xd4>
 8002e6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e72:	d11e      	bne.n	8002eb2 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	0c9b      	lsrs	r3, r3, #18
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e82:	60fb      	str	r3, [r7, #12]
        break;
 8002e84:	e016      	b.n	8002eb4 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	60fb      	str	r3, [r7, #12]
        break;
 8002e8c:	e012      	b.n	8002eb4 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	60fb      	str	r3, [r7, #12]
        break;
 8002e94:	e00e      	b.n	8002eb4 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	60fb      	str	r3, [r7, #12]
        break;
 8002e9c:	e00a      	b.n	8002eb4 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	09db      	lsrs	r3, r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]
        break;
 8002ea4:	e006      	b.n	8002eb4 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	60fb      	str	r3, [r7, #12]
        break;
 8002eac:	e002      	b.n	8002eb4 <ADC_ConfigureBoostMode+0x114>
        break;
 8002eae:	bf00      	nop
 8002eb0:	e000      	b.n	8002eb4 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002eb2:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	085b      	lsrs	r3, r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <ADC_ConfigureBoostMode+0x18c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d808      	bhi.n	8002ed4 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ed0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ed2:	e025      	b.n	8002f20 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <ADC_ConfigureBoostMode+0x190>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d80a      	bhi.n	8002ef2 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eee:	609a      	str	r2, [r3, #8]
}
 8002ef0:	e016      	b.n	8002f20 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a0f      	ldr	r2, [pc, #60]	; (8002f34 <ADC_ConfigureBoostMode+0x194>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d80a      	bhi.n	8002f10 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0c:	609a      	str	r2, [r3, #8]
}
 8002f0e:	e007      	b.n	8002f20 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002f1e:	609a      	str	r2, [r3, #8]
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40022300 	.word	0x40022300
 8002f2c:	005f5e10 	.word	0x005f5e10
 8002f30:	00bebc20 	.word	0x00bebc20
 8002f34:	017d7840 	.word	0x017d7840

08002f38 <LL_ADC_IsEnabled>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <LL_ADC_IsEnabled+0x18>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <LL_ADC_IsEnabled+0x1a>
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <LL_ADC_REG_IsConversionOngoing>:
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d101      	bne.n	8002f76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b09f      	sub	sp, #124	; 0x7c
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e080      	b.n	80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002faa:	2300      	movs	r3, #0
 8002fac:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a3d      	ldr	r2, [pc, #244]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d102      	bne.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fbc:	4b3c      	ldr	r3, [pc, #240]	; (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	e001      	b.n	8002fc6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10b      	bne.n	8002fe4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e05f      	b.n	80030a4 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff ffb9 	bl	8002f5e <LL_ADC_REG_IsConversionOngoing>
 8002fec:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ffb3 	bl	8002f5e <LL_ADC_REG_IsConversionOngoing>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d141      	bne.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003000:	2b00      	cmp	r3, #0
 8003002:	d13e      	bne.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003004:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003006:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	431a      	orrs	r2, r3
 800301e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003020:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003022:	4822      	ldr	r0, [pc, #136]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003024:	f7ff ff88 	bl	8002f38 <LL_ADC_IsEnabled>
 8003028:	4604      	mov	r4, r0
 800302a:	4821      	ldr	r0, [pc, #132]	; (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800302c:	f7ff ff84 	bl	8002f38 <LL_ADC_IsEnabled>
 8003030:	4603      	mov	r3, r0
 8003032:	4323      	orrs	r3, r4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d12e      	bne.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800303e:	4013      	ands	r3, r2
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	6811      	ldr	r1, [r2, #0]
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	6892      	ldr	r2, [r2, #8]
 8003048:	430a      	orrs	r2, r1
 800304a:	431a      	orrs	r2, r3
 800304c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800304e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003050:	e021      	b.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800305a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800305e:	4813      	ldr	r0, [pc, #76]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003060:	f7ff ff6a 	bl	8002f38 <LL_ADC_IsEnabled>
 8003064:	4604      	mov	r4, r0
 8003066:	4812      	ldr	r0, [pc, #72]	; (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003068:	f7ff ff66 	bl	8002f38 <LL_ADC_IsEnabled>
 800306c:	4603      	mov	r3, r0
 800306e:	4323      	orrs	r3, r4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d110      	bne.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800307a:	4013      	ands	r3, r2
 800307c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800307e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003080:	e009      	b.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003086:	f043 0220 	orr.w	r2, r3, #32
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003094:	e000      	b.n	8003098 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003096:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	377c      	adds	r7, #124	; 0x7c
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd90      	pop	{r4, r7, pc}
 80030ac:	40022000 	.word	0x40022000
 80030b0:	40022100 	.word	0x40022100
 80030b4:	40022300 	.word	0x40022300
 80030b8:	fffff0e0 	.word	0xfffff0e0

080030bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <__NVIC_SetPriorityGrouping+0x40>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030d8:	4013      	ands	r3, r2
 80030da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <__NVIC_SetPriorityGrouping+0x44>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ea:	4a04      	ldr	r2, [pc, #16]	; (80030fc <__NVIC_SetPriorityGrouping+0x40>)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	60d3      	str	r3, [r2, #12]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000ed00 	.word	0xe000ed00
 8003100:	05fa0000 	.word	0x05fa0000

08003104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <__NVIC_GetPriorityGrouping+0x18>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	f003 0307 	and.w	r3, r3, #7
}
 8003112:	4618      	mov	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800312a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800312e:	2b00      	cmp	r3, #0
 8003130:	db0b      	blt.n	800314a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	4907      	ldr	r1, [pc, #28]	; (8003158 <__NVIC_EnableIRQ+0x38>)
 800313a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	2001      	movs	r0, #1
 8003142:	fa00 f202 	lsl.w	r2, r0, r2
 8003146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000e100 	.word	0xe000e100

0800315c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003168:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800316c:	2b00      	cmp	r3, #0
 800316e:	db0a      	blt.n	8003186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	490c      	ldr	r1, [pc, #48]	; (80031a8 <__NVIC_SetPriority+0x4c>)
 8003176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	440b      	add	r3, r1
 8003180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003184:	e00a      	b.n	800319c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4908      	ldr	r1, [pc, #32]	; (80031ac <__NVIC_SetPriority+0x50>)
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	3b04      	subs	r3, #4
 8003194:	0112      	lsls	r2, r2, #4
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	440b      	add	r3, r1
 800319a:	761a      	strb	r2, [r3, #24]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000e100 	.word	0xe000e100
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f1c3 0307 	rsb	r3, r3, #7
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	bf28      	it	cs
 80031ce:	2304      	movcs	r3, #4
 80031d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d902      	bls.n	80031e0 <NVIC_EncodePriority+0x30>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3b03      	subs	r3, #3
 80031de:	e000      	b.n	80031e2 <NVIC_EncodePriority+0x32>
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43da      	mvns	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	401a      	ands	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f8:	f04f 31ff 	mov.w	r1, #4294967295
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	43d9      	mvns	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	4313      	orrs	r3, r2
         );
}
 800320a:	4618      	mov	r0, r3
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3b01      	subs	r3, #1
 8003224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003228:	d301      	bcc.n	800322e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800322a:	2301      	movs	r3, #1
 800322c:	e00f      	b.n	800324e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <SysTick_Config+0x40>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003236:	210f      	movs	r1, #15
 8003238:	f04f 30ff 	mov.w	r0, #4294967295
 800323c:	f7ff ff8e 	bl	800315c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <SysTick_Config+0x40>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003246:	4b04      	ldr	r3, [pc, #16]	; (8003258 <SysTick_Config+0x40>)
 8003248:	2207      	movs	r2, #7
 800324a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	e000e010 	.word	0xe000e010

0800325c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff ff29 	bl	80030bc <__NVIC_SetPriorityGrouping>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b086      	sub	sp, #24
 8003276:	af00      	add	r7, sp, #0
 8003278:	4603      	mov	r3, r0
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003280:	f7ff ff40 	bl	8003104 <__NVIC_GetPriorityGrouping>
 8003284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	6978      	ldr	r0, [r7, #20]
 800328c:	f7ff ff90 	bl	80031b0 <NVIC_EncodePriority>
 8003290:	4602      	mov	r2, r0
 8003292:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff5f 	bl	800315c <__NVIC_SetPriority>
}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff33 	bl	8003120 <__NVIC_EnableIRQ>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ffa4 	bl	8003218 <SysTick_Config>
 80032d0:	4603      	mov	r3, r0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e014      	b.n	8003316 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	791b      	ldrb	r3, [r3, #4]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d105      	bne.n	8003302 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7fd ff15 	bl	800112c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	795b      	ldrb	r3, [r3, #5]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_DAC_Start_DMA+0x1e>
 800333a:	2302      	movs	r3, #2
 800333c:	e0ab      	b.n	8003496 <HAL_DAC_Start_DMA+0x176>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2202      	movs	r2, #2
 8003348:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d12f      	bne.n	80033b0 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a52      	ldr	r2, [pc, #328]	; (80034a0 <HAL_DAC_Start_DMA+0x180>)
 8003356:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a51      	ldr	r2, [pc, #324]	; (80034a4 <HAL_DAC_Start_DMA+0x184>)
 800335e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a50      	ldr	r2, [pc, #320]	; (80034a8 <HAL_DAC_Start_DMA+0x188>)
 8003366:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003376:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	2b08      	cmp	r3, #8
 800337c:	d013      	beq.n	80033a6 <HAL_DAC_Start_DMA+0x86>
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d845      	bhi.n	8003410 <HAL_DAC_Start_DMA+0xf0>
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_DAC_Start_DMA+0x72>
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	2b04      	cmp	r3, #4
 800338e:	d005      	beq.n	800339c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003390:	e03e      	b.n	8003410 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3308      	adds	r3, #8
 8003398:	613b      	str	r3, [r7, #16]
        break;
 800339a:	e03c      	b.n	8003416 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	613b      	str	r3, [r7, #16]
        break;
 80033a4:	e037      	b.n	8003416 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3310      	adds	r3, #16
 80033ac:	613b      	str	r3, [r7, #16]
        break;
 80033ae:	e032      	b.n	8003416 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a3d      	ldr	r2, [pc, #244]	; (80034ac <HAL_DAC_Start_DMA+0x18c>)
 80033b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a3c      	ldr	r2, [pc, #240]	; (80034b0 <HAL_DAC_Start_DMA+0x190>)
 80033be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a3b      	ldr	r2, [pc, #236]	; (80034b4 <HAL_DAC_Start_DMA+0x194>)
 80033c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033d6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d013      	beq.n	8003406 <HAL_DAC_Start_DMA+0xe6>
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d817      	bhi.n	8003414 <HAL_DAC_Start_DMA+0xf4>
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_DAC_Start_DMA+0xd2>
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d005      	beq.n	80033fc <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80033f0:	e010      	b.n	8003414 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3314      	adds	r3, #20
 80033f8:	613b      	str	r3, [r7, #16]
        break;
 80033fa:	e00c      	b.n	8003416 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3318      	adds	r3, #24
 8003402:	613b      	str	r3, [r7, #16]
        break;
 8003404:	e007      	b.n	8003416 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	331c      	adds	r3, #28
 800340c:	613b      	str	r3, [r7, #16]
        break;
 800340e:	e002      	b.n	8003416 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003410:	bf00      	nop
 8003412:	e000      	b.n	8003416 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003414:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d111      	bne.n	8003440 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800342a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6898      	ldr	r0, [r3, #8]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	f000 fda7 	bl	8003f88 <HAL_DMA_Start_IT>
 800343a:	4603      	mov	r3, r0
 800343c:	75fb      	strb	r3, [r7, #23]
 800343e:	e010      	b.n	8003462 <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800344e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	68d8      	ldr	r0, [r3, #12]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	f000 fd95 	bl	8003f88 <HAL_DMA_Start_IT>
 800345e:	4603      	mov	r3, r0
 8003460:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10c      	bne.n	8003488 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6819      	ldr	r1, [r3, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2201      	movs	r2, #1
 800347c:	409a      	lsls	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	e005      	b.n	8003494 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	f043 0204 	orr.w	r2, r3, #4
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003494:	7dfb      	ldrb	r3, [r7, #23]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	08003755 	.word	0x08003755
 80034a4:	08003777 	.word	0x08003777
 80034a8:	08003793 	.word	0x08003793
 80034ac:	080037fd 	.word	0x080037fd
 80034b0:	0800381f 	.word	0x0800381f
 80034b4:	0800383b 	.word	0x0800383b

080034b8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	795b      	ldrb	r3, [r3, #5]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_DAC_ConfigChannel+0x18>
 8003508:	2302      	movs	r3, #2
 800350a:	e11d      	b.n	8003748 <HAL_DAC_ConfigChannel+0x254>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2202      	movs	r2, #2
 8003516:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b04      	cmp	r3, #4
 800351e:	d174      	bne.n	800360a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003520:	f7fe fc18 	bl	8001d54 <HAL_GetTick>
 8003524:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d134      	bne.n	8003596 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800352c:	e011      	b.n	8003552 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800352e:	f7fe fc11 	bl	8001d54 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d90a      	bls.n	8003552 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f043 0208 	orr.w	r2, r3, #8
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2203      	movs	r2, #3
 800354c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e0fa      	b.n	8003748 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003558:	4b7d      	ldr	r3, [pc, #500]	; (8003750 <HAL_DAC_ConfigChannel+0x25c>)
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e6      	bne.n	800352e <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003560:	2001      	movs	r0, #1
 8003562:	f7fe fc03 	bl	8001d6c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	6992      	ldr	r2, [r2, #24]
 800356e:	641a      	str	r2, [r3, #64]	; 0x40
 8003570:	e01e      	b.n	80035b0 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003572:	f7fe fbef 	bl	8001d54 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	d90a      	bls.n	8003596 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f043 0208 	orr.w	r2, r3, #8
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2203      	movs	r2, #3
 8003590:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e0d8      	b.n	8003748 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359c:	2b00      	cmp	r3, #0
 800359e:	dbe8      	blt.n	8003572 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80035a0:	2001      	movs	r0, #1
 80035a2:	f7fe fbe3 	bl	8001d6c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	6992      	ldr	r2, [r2, #24]
 80035ae:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80035c0:	fa01 f303 	lsl.w	r3, r1, r3
 80035c4:	43db      	mvns	r3, r3
 80035c6:	ea02 0103 	and.w	r1, r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	409a      	lsls	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	21ff      	movs	r1, #255	; 0xff
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	ea02 0103 	and.w	r1, r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	6a1a      	ldr	r2, [r3, #32]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	409a      	lsls	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d11d      	bne.n	800364e <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	221f      	movs	r2, #31
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43db      	mvns	r3, r3
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	4013      	ands	r3, r2
 800362c:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f003 0310 	and.w	r3, r3, #16
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2207      	movs	r2, #7
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4013      	ands	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d102      	bne.n	8003678 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
 8003676:	e00f      	b.n	8003698 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d102      	bne.n	8003686 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003680:	2301      	movs	r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	e008      	b.n	8003698 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d102      	bne.n	8003694 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800368e:	2301      	movs	r3, #1
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	e001      	b.n	8003698 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6819      	ldr	r1, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43da      	mvns	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	400a      	ands	r2, r1
 80036de:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	f640 72fe 	movw	r2, #4094	; 0xffe
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4013      	ands	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f003 0310 	and.w	r3, r3, #16
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	22c0      	movs	r2, #192	; 0xc0
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43da      	mvns	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	400a      	ands	r2, r1
 8003738:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3720      	adds	r7, #32
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20008000 	.word	0x20008000

08003754 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff fea8 	bl	80034b8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	711a      	strb	r2, [r3, #4]
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f7ff fea1 	bl	80034cc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f043 0204 	orr.w	r2, r3, #4
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f7ff fe97 	bl	80034e0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	711a      	strb	r2, [r3, #4]
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f7ff ffd8 	bl	80037c0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	711a      	strb	r2, [r3, #4]
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7ff ffd1 	bl	80037d4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b084      	sub	sp, #16
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f043 0204 	orr.w	r2, r3, #4
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f7ff ffc7 	bl	80037e8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	711a      	strb	r2, [r3, #4]
}
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7fe fa70 	bl	8001d54 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e37f      	b.n	8003f80 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a66      	ldr	r2, [pc, #408]	; (8003a20 <HAL_DMA_Init+0x1b8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d04a      	beq.n	8003920 <HAL_DMA_Init+0xb8>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a65      	ldr	r2, [pc, #404]	; (8003a24 <HAL_DMA_Init+0x1bc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d045      	beq.n	8003920 <HAL_DMA_Init+0xb8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a63      	ldr	r2, [pc, #396]	; (8003a28 <HAL_DMA_Init+0x1c0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d040      	beq.n	8003920 <HAL_DMA_Init+0xb8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a62      	ldr	r2, [pc, #392]	; (8003a2c <HAL_DMA_Init+0x1c4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d03b      	beq.n	8003920 <HAL_DMA_Init+0xb8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a60      	ldr	r2, [pc, #384]	; (8003a30 <HAL_DMA_Init+0x1c8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d036      	beq.n	8003920 <HAL_DMA_Init+0xb8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a5f      	ldr	r2, [pc, #380]	; (8003a34 <HAL_DMA_Init+0x1cc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d031      	beq.n	8003920 <HAL_DMA_Init+0xb8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a5d      	ldr	r2, [pc, #372]	; (8003a38 <HAL_DMA_Init+0x1d0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d02c      	beq.n	8003920 <HAL_DMA_Init+0xb8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a5c      	ldr	r2, [pc, #368]	; (8003a3c <HAL_DMA_Init+0x1d4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d027      	beq.n	8003920 <HAL_DMA_Init+0xb8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a5a      	ldr	r2, [pc, #360]	; (8003a40 <HAL_DMA_Init+0x1d8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d022      	beq.n	8003920 <HAL_DMA_Init+0xb8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a59      	ldr	r2, [pc, #356]	; (8003a44 <HAL_DMA_Init+0x1dc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d01d      	beq.n	8003920 <HAL_DMA_Init+0xb8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a57      	ldr	r2, [pc, #348]	; (8003a48 <HAL_DMA_Init+0x1e0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d018      	beq.n	8003920 <HAL_DMA_Init+0xb8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a56      	ldr	r2, [pc, #344]	; (8003a4c <HAL_DMA_Init+0x1e4>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d013      	beq.n	8003920 <HAL_DMA_Init+0xb8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a54      	ldr	r2, [pc, #336]	; (8003a50 <HAL_DMA_Init+0x1e8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00e      	beq.n	8003920 <HAL_DMA_Init+0xb8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a53      	ldr	r2, [pc, #332]	; (8003a54 <HAL_DMA_Init+0x1ec>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_DMA_Init+0xb8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a51      	ldr	r2, [pc, #324]	; (8003a58 <HAL_DMA_Init+0x1f0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_DMA_Init+0xb8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a50      	ldr	r2, [pc, #320]	; (8003a5c <HAL_DMA_Init+0x1f4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d101      	bne.n	8003924 <HAL_DMA_Init+0xbc>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <HAL_DMA_Init+0xbe>
 8003924:	2300      	movs	r3, #0
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 813c 	beq.w	8003ba4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a37      	ldr	r2, [pc, #220]	; (8003a20 <HAL_DMA_Init+0x1b8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d04a      	beq.n	80039dc <HAL_DMA_Init+0x174>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a36      	ldr	r2, [pc, #216]	; (8003a24 <HAL_DMA_Init+0x1bc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d045      	beq.n	80039dc <HAL_DMA_Init+0x174>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a34      	ldr	r2, [pc, #208]	; (8003a28 <HAL_DMA_Init+0x1c0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d040      	beq.n	80039dc <HAL_DMA_Init+0x174>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a33      	ldr	r2, [pc, #204]	; (8003a2c <HAL_DMA_Init+0x1c4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d03b      	beq.n	80039dc <HAL_DMA_Init+0x174>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a31      	ldr	r2, [pc, #196]	; (8003a30 <HAL_DMA_Init+0x1c8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d036      	beq.n	80039dc <HAL_DMA_Init+0x174>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a30      	ldr	r2, [pc, #192]	; (8003a34 <HAL_DMA_Init+0x1cc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d031      	beq.n	80039dc <HAL_DMA_Init+0x174>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a2e      	ldr	r2, [pc, #184]	; (8003a38 <HAL_DMA_Init+0x1d0>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d02c      	beq.n	80039dc <HAL_DMA_Init+0x174>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2d      	ldr	r2, [pc, #180]	; (8003a3c <HAL_DMA_Init+0x1d4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d027      	beq.n	80039dc <HAL_DMA_Init+0x174>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2b      	ldr	r2, [pc, #172]	; (8003a40 <HAL_DMA_Init+0x1d8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d022      	beq.n	80039dc <HAL_DMA_Init+0x174>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2a      	ldr	r2, [pc, #168]	; (8003a44 <HAL_DMA_Init+0x1dc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d01d      	beq.n	80039dc <HAL_DMA_Init+0x174>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a28      	ldr	r2, [pc, #160]	; (8003a48 <HAL_DMA_Init+0x1e0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d018      	beq.n	80039dc <HAL_DMA_Init+0x174>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a27      	ldr	r2, [pc, #156]	; (8003a4c <HAL_DMA_Init+0x1e4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d013      	beq.n	80039dc <HAL_DMA_Init+0x174>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a25      	ldr	r2, [pc, #148]	; (8003a50 <HAL_DMA_Init+0x1e8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00e      	beq.n	80039dc <HAL_DMA_Init+0x174>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a24      	ldr	r2, [pc, #144]	; (8003a54 <HAL_DMA_Init+0x1ec>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d009      	beq.n	80039dc <HAL_DMA_Init+0x174>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a22      	ldr	r2, [pc, #136]	; (8003a58 <HAL_DMA_Init+0x1f0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_DMA_Init+0x174>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <HAL_DMA_Init+0x1f4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d108      	bne.n	80039ee <HAL_DMA_Init+0x186>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0201 	bic.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e007      	b.n	80039fe <HAL_DMA_Init+0x196>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039fe:	e02f      	b.n	8003a60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a00:	f7fe f9a8 	bl	8001d54 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b05      	cmp	r3, #5
 8003a0c:	d928      	bls.n	8003a60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2203      	movs	r2, #3
 8003a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e2af      	b.n	8003f80 <HAL_DMA_Init+0x718>
 8003a20:	40020010 	.word	0x40020010
 8003a24:	40020028 	.word	0x40020028
 8003a28:	40020040 	.word	0x40020040
 8003a2c:	40020058 	.word	0x40020058
 8003a30:	40020070 	.word	0x40020070
 8003a34:	40020088 	.word	0x40020088
 8003a38:	400200a0 	.word	0x400200a0
 8003a3c:	400200b8 	.word	0x400200b8
 8003a40:	40020410 	.word	0x40020410
 8003a44:	40020428 	.word	0x40020428
 8003a48:	40020440 	.word	0x40020440
 8003a4c:	40020458 	.word	0x40020458
 8003a50:	40020470 	.word	0x40020470
 8003a54:	40020488 	.word	0x40020488
 8003a58:	400204a0 	.word	0x400204a0
 8003a5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1c8      	bne.n	8003a00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4b73      	ldr	r3, [pc, #460]	; (8003c48 <HAL_DMA_Init+0x3e0>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003a86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d107      	bne.n	8003ac4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	4313      	orrs	r3, r2
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b28      	cmp	r3, #40	; 0x28
 8003aca:	d903      	bls.n	8003ad4 <HAL_DMA_Init+0x26c>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2b2e      	cmp	r3, #46	; 0x2e
 8003ad2:	d91f      	bls.n	8003b14 <HAL_DMA_Init+0x2ac>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b3e      	cmp	r3, #62	; 0x3e
 8003ada:	d903      	bls.n	8003ae4 <HAL_DMA_Init+0x27c>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b42      	cmp	r3, #66	; 0x42
 8003ae2:	d917      	bls.n	8003b14 <HAL_DMA_Init+0x2ac>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b46      	cmp	r3, #70	; 0x46
 8003aea:	d903      	bls.n	8003af4 <HAL_DMA_Init+0x28c>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b48      	cmp	r3, #72	; 0x48
 8003af2:	d90f      	bls.n	8003b14 <HAL_DMA_Init+0x2ac>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b4e      	cmp	r3, #78	; 0x4e
 8003afa:	d903      	bls.n	8003b04 <HAL_DMA_Init+0x29c>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b52      	cmp	r3, #82	; 0x52
 8003b02:	d907      	bls.n	8003b14 <HAL_DMA_Init+0x2ac>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b73      	cmp	r3, #115	; 0x73
 8003b0a:	d905      	bls.n	8003b18 <HAL_DMA_Init+0x2b0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b77      	cmp	r3, #119	; 0x77
 8003b12:	d801      	bhi.n	8003b18 <HAL_DMA_Init+0x2b0>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_DMA_Init+0x2b2>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b24:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 0307 	bic.w	r3, r3, #7
 8003b3c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d117      	bne.n	8003b80 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00e      	beq.n	8003b80 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f001 fe72 	bl	800584c <DMA_CheckFifoParam>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2240      	movs	r2, #64	; 0x40
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e1ff      	b.n	8003f80 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f001 fdad 	bl	80056e8 <DMA_CalcBaseAndBitshift>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	f003 031f 	and.w	r3, r3, #31
 8003b9a:	223f      	movs	r2, #63	; 0x3f
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	609a      	str	r2, [r3, #8]
 8003ba2:	e0fe      	b.n	8003da2 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a28      	ldr	r2, [pc, #160]	; (8003c4c <HAL_DMA_Init+0x3e4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d04a      	beq.n	8003c44 <HAL_DMA_Init+0x3dc>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <HAL_DMA_Init+0x3e8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d045      	beq.n	8003c44 <HAL_DMA_Init+0x3dc>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a25      	ldr	r2, [pc, #148]	; (8003c54 <HAL_DMA_Init+0x3ec>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d040      	beq.n	8003c44 <HAL_DMA_Init+0x3dc>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a24      	ldr	r2, [pc, #144]	; (8003c58 <HAL_DMA_Init+0x3f0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d03b      	beq.n	8003c44 <HAL_DMA_Init+0x3dc>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a22      	ldr	r2, [pc, #136]	; (8003c5c <HAL_DMA_Init+0x3f4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d036      	beq.n	8003c44 <HAL_DMA_Init+0x3dc>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a21      	ldr	r2, [pc, #132]	; (8003c60 <HAL_DMA_Init+0x3f8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d031      	beq.n	8003c44 <HAL_DMA_Init+0x3dc>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1f      	ldr	r2, [pc, #124]	; (8003c64 <HAL_DMA_Init+0x3fc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d02c      	beq.n	8003c44 <HAL_DMA_Init+0x3dc>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1e      	ldr	r2, [pc, #120]	; (8003c68 <HAL_DMA_Init+0x400>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d027      	beq.n	8003c44 <HAL_DMA_Init+0x3dc>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <HAL_DMA_Init+0x404>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d022      	beq.n	8003c44 <HAL_DMA_Init+0x3dc>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <HAL_DMA_Init+0x408>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d01d      	beq.n	8003c44 <HAL_DMA_Init+0x3dc>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <HAL_DMA_Init+0x40c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d018      	beq.n	8003c44 <HAL_DMA_Init+0x3dc>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <HAL_DMA_Init+0x410>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d013      	beq.n	8003c44 <HAL_DMA_Init+0x3dc>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a16      	ldr	r2, [pc, #88]	; (8003c7c <HAL_DMA_Init+0x414>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d00e      	beq.n	8003c44 <HAL_DMA_Init+0x3dc>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a15      	ldr	r2, [pc, #84]	; (8003c80 <HAL_DMA_Init+0x418>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d009      	beq.n	8003c44 <HAL_DMA_Init+0x3dc>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a13      	ldr	r2, [pc, #76]	; (8003c84 <HAL_DMA_Init+0x41c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d004      	beq.n	8003c44 <HAL_DMA_Init+0x3dc>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <HAL_DMA_Init+0x420>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d123      	bne.n	8003c8c <HAL_DMA_Init+0x424>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e022      	b.n	8003c8e <HAL_DMA_Init+0x426>
 8003c48:	fe10803f 	.word	0xfe10803f
 8003c4c:	48022c08 	.word	0x48022c08
 8003c50:	48022c1c 	.word	0x48022c1c
 8003c54:	48022c30 	.word	0x48022c30
 8003c58:	48022c44 	.word	0x48022c44
 8003c5c:	48022c58 	.word	0x48022c58
 8003c60:	48022c6c 	.word	0x48022c6c
 8003c64:	48022c80 	.word	0x48022c80
 8003c68:	48022c94 	.word	0x48022c94
 8003c6c:	58025408 	.word	0x58025408
 8003c70:	5802541c 	.word	0x5802541c
 8003c74:	58025430 	.word	0x58025430
 8003c78:	58025444 	.word	0x58025444
 8003c7c:	58025458 	.word	0x58025458
 8003c80:	5802546c 	.word	0x5802546c
 8003c84:	58025480 	.word	0x58025480
 8003c88:	58025494 	.word	0x58025494
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d07e      	beq.n	8003d90 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a80      	ldr	r2, [pc, #512]	; (8003e98 <HAL_DMA_Init+0x630>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d021      	beq.n	8003ce0 <HAL_DMA_Init+0x478>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7e      	ldr	r2, [pc, #504]	; (8003e9c <HAL_DMA_Init+0x634>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d01c      	beq.n	8003ce0 <HAL_DMA_Init+0x478>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7d      	ldr	r2, [pc, #500]	; (8003ea0 <HAL_DMA_Init+0x638>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d017      	beq.n	8003ce0 <HAL_DMA_Init+0x478>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a7b      	ldr	r2, [pc, #492]	; (8003ea4 <HAL_DMA_Init+0x63c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d012      	beq.n	8003ce0 <HAL_DMA_Init+0x478>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a7a      	ldr	r2, [pc, #488]	; (8003ea8 <HAL_DMA_Init+0x640>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_DMA_Init+0x478>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a78      	ldr	r2, [pc, #480]	; (8003eac <HAL_DMA_Init+0x644>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d008      	beq.n	8003ce0 <HAL_DMA_Init+0x478>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a77      	ldr	r2, [pc, #476]	; (8003eb0 <HAL_DMA_Init+0x648>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d003      	beq.n	8003ce0 <HAL_DMA_Init+0x478>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a75      	ldr	r2, [pc, #468]	; (8003eb4 <HAL_DMA_Init+0x64c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4b6e      	ldr	r3, [pc, #440]	; (8003eb8 <HAL_DMA_Init+0x650>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b40      	cmp	r3, #64	; 0x40
 8003d08:	d008      	beq.n	8003d1c <HAL_DMA_Init+0x4b4>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b80      	cmp	r3, #128	; 0x80
 8003d10:	d102      	bne.n	8003d18 <HAL_DMA_Init+0x4b0>
 8003d12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d16:	e002      	b.n	8003d1e <HAL_DMA_Init+0x4b6>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_DMA_Init+0x4b6>
 8003d1c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68d2      	ldr	r2, [r2, #12]
 8003d22:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d4c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	4b56      	ldr	r3, [pc, #344]	; (8003ebc <HAL_DMA_Init+0x654>)
 8003d64:	4413      	add	r3, r2
 8003d66:	4a56      	ldr	r2, [pc, #344]	; (8003ec0 <HAL_DMA_Init+0x658>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	009a      	lsls	r2, r3, #2
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f001 fcb7 	bl	80056e8 <DMA_CalcBaseAndBitshift>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2201      	movs	r2, #1
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	e008      	b.n	8003da2 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2240      	movs	r2, #64	; 0x40
 8003d94:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2203      	movs	r2, #3
 8003d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e0ee      	b.n	8003f80 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a47      	ldr	r2, [pc, #284]	; (8003ec4 <HAL_DMA_Init+0x65c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d072      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a45      	ldr	r2, [pc, #276]	; (8003ec8 <HAL_DMA_Init+0x660>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d06d      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a44      	ldr	r2, [pc, #272]	; (8003ecc <HAL_DMA_Init+0x664>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d068      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a42      	ldr	r2, [pc, #264]	; (8003ed0 <HAL_DMA_Init+0x668>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d063      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a41      	ldr	r2, [pc, #260]	; (8003ed4 <HAL_DMA_Init+0x66c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d05e      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a3f      	ldr	r2, [pc, #252]	; (8003ed8 <HAL_DMA_Init+0x670>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d059      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a3e      	ldr	r2, [pc, #248]	; (8003edc <HAL_DMA_Init+0x674>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d054      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a3c      	ldr	r2, [pc, #240]	; (8003ee0 <HAL_DMA_Init+0x678>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d04f      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a3b      	ldr	r2, [pc, #236]	; (8003ee4 <HAL_DMA_Init+0x67c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d04a      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a39      	ldr	r2, [pc, #228]	; (8003ee8 <HAL_DMA_Init+0x680>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d045      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a38      	ldr	r2, [pc, #224]	; (8003eec <HAL_DMA_Init+0x684>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d040      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a36      	ldr	r2, [pc, #216]	; (8003ef0 <HAL_DMA_Init+0x688>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d03b      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a35      	ldr	r2, [pc, #212]	; (8003ef4 <HAL_DMA_Init+0x68c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d036      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a33      	ldr	r2, [pc, #204]	; (8003ef8 <HAL_DMA_Init+0x690>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d031      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a32      	ldr	r2, [pc, #200]	; (8003efc <HAL_DMA_Init+0x694>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d02c      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a30      	ldr	r2, [pc, #192]	; (8003f00 <HAL_DMA_Init+0x698>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d027      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <HAL_DMA_Init+0x630>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d022      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <HAL_DMA_Init+0x634>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01d      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a11      	ldr	r2, [pc, #68]	; (8003ea0 <HAL_DMA_Init+0x638>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d018      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0f      	ldr	r2, [pc, #60]	; (8003ea4 <HAL_DMA_Init+0x63c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a0e      	ldr	r2, [pc, #56]	; (8003ea8 <HAL_DMA_Init+0x640>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00e      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a0c      	ldr	r2, [pc, #48]	; (8003eac <HAL_DMA_Init+0x644>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d009      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a0b      	ldr	r2, [pc, #44]	; (8003eb0 <HAL_DMA_Init+0x648>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d004      	beq.n	8003e92 <HAL_DMA_Init+0x62a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <HAL_DMA_Init+0x64c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d138      	bne.n	8003f04 <HAL_DMA_Init+0x69c>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e037      	b.n	8003f06 <HAL_DMA_Init+0x69e>
 8003e96:	bf00      	nop
 8003e98:	58025408 	.word	0x58025408
 8003e9c:	5802541c 	.word	0x5802541c
 8003ea0:	58025430 	.word	0x58025430
 8003ea4:	58025444 	.word	0x58025444
 8003ea8:	58025458 	.word	0x58025458
 8003eac:	5802546c 	.word	0x5802546c
 8003eb0:	58025480 	.word	0x58025480
 8003eb4:	58025494 	.word	0x58025494
 8003eb8:	fffe000f 	.word	0xfffe000f
 8003ebc:	a7fdabf8 	.word	0xa7fdabf8
 8003ec0:	cccccccd 	.word	0xcccccccd
 8003ec4:	40020010 	.word	0x40020010
 8003ec8:	40020028 	.word	0x40020028
 8003ecc:	40020040 	.word	0x40020040
 8003ed0:	40020058 	.word	0x40020058
 8003ed4:	40020070 	.word	0x40020070
 8003ed8:	40020088 	.word	0x40020088
 8003edc:	400200a0 	.word	0x400200a0
 8003ee0:	400200b8 	.word	0x400200b8
 8003ee4:	40020410 	.word	0x40020410
 8003ee8:	40020428 	.word	0x40020428
 8003eec:	40020440 	.word	0x40020440
 8003ef0:	40020458 	.word	0x40020458
 8003ef4:	40020470 	.word	0x40020470
 8003ef8:	40020488 	.word	0x40020488
 8003efc:	400204a0 	.word	0x400204a0
 8003f00:	400204b8 	.word	0x400204b8
 8003f04:	2300      	movs	r3, #0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d032      	beq.n	8003f70 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f001 fd1a 	bl	8005944 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2b80      	cmp	r3, #128	; 0x80
 8003f16:	d102      	bne.n	8003f1e <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f32:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d010      	beq.n	8003f5e <HAL_DMA_Init+0x6f6>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d80c      	bhi.n	8003f5e <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f001 fd97 	bl	8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f5a:	605a      	str	r2, [r3, #4]
 8003f5c:	e008      	b.n	8003f70 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e226      	b.n	80043f2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_DMA_Start_IT+0x2a>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e21f      	b.n	80043f2 <HAL_DMA_Start_IT+0x46a>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	f040 820a 	bne.w	80043dc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a68      	ldr	r2, [pc, #416]	; (800417c <HAL_DMA_Start_IT+0x1f4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d04a      	beq.n	8004076 <HAL_DMA_Start_IT+0xee>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a66      	ldr	r2, [pc, #408]	; (8004180 <HAL_DMA_Start_IT+0x1f8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d045      	beq.n	8004076 <HAL_DMA_Start_IT+0xee>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a65      	ldr	r2, [pc, #404]	; (8004184 <HAL_DMA_Start_IT+0x1fc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d040      	beq.n	8004076 <HAL_DMA_Start_IT+0xee>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a63      	ldr	r2, [pc, #396]	; (8004188 <HAL_DMA_Start_IT+0x200>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d03b      	beq.n	8004076 <HAL_DMA_Start_IT+0xee>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a62      	ldr	r2, [pc, #392]	; (800418c <HAL_DMA_Start_IT+0x204>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d036      	beq.n	8004076 <HAL_DMA_Start_IT+0xee>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a60      	ldr	r2, [pc, #384]	; (8004190 <HAL_DMA_Start_IT+0x208>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d031      	beq.n	8004076 <HAL_DMA_Start_IT+0xee>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a5f      	ldr	r2, [pc, #380]	; (8004194 <HAL_DMA_Start_IT+0x20c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d02c      	beq.n	8004076 <HAL_DMA_Start_IT+0xee>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a5d      	ldr	r2, [pc, #372]	; (8004198 <HAL_DMA_Start_IT+0x210>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d027      	beq.n	8004076 <HAL_DMA_Start_IT+0xee>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a5c      	ldr	r2, [pc, #368]	; (800419c <HAL_DMA_Start_IT+0x214>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d022      	beq.n	8004076 <HAL_DMA_Start_IT+0xee>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a5a      	ldr	r2, [pc, #360]	; (80041a0 <HAL_DMA_Start_IT+0x218>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01d      	beq.n	8004076 <HAL_DMA_Start_IT+0xee>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a59      	ldr	r2, [pc, #356]	; (80041a4 <HAL_DMA_Start_IT+0x21c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d018      	beq.n	8004076 <HAL_DMA_Start_IT+0xee>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a57      	ldr	r2, [pc, #348]	; (80041a8 <HAL_DMA_Start_IT+0x220>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <HAL_DMA_Start_IT+0xee>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a56      	ldr	r2, [pc, #344]	; (80041ac <HAL_DMA_Start_IT+0x224>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00e      	beq.n	8004076 <HAL_DMA_Start_IT+0xee>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a54      	ldr	r2, [pc, #336]	; (80041b0 <HAL_DMA_Start_IT+0x228>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d009      	beq.n	8004076 <HAL_DMA_Start_IT+0xee>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a53      	ldr	r2, [pc, #332]	; (80041b4 <HAL_DMA_Start_IT+0x22c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d004      	beq.n	8004076 <HAL_DMA_Start_IT+0xee>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a51      	ldr	r2, [pc, #324]	; (80041b8 <HAL_DMA_Start_IT+0x230>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d108      	bne.n	8004088 <HAL_DMA_Start_IT+0x100>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0201 	bic.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e007      	b.n	8004098 <HAL_DMA_Start_IT+0x110>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f001 f93e 	bl	8005320 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a34      	ldr	r2, [pc, #208]	; (800417c <HAL_DMA_Start_IT+0x1f4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d04a      	beq.n	8004144 <HAL_DMA_Start_IT+0x1bc>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a33      	ldr	r2, [pc, #204]	; (8004180 <HAL_DMA_Start_IT+0x1f8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d045      	beq.n	8004144 <HAL_DMA_Start_IT+0x1bc>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a31      	ldr	r2, [pc, #196]	; (8004184 <HAL_DMA_Start_IT+0x1fc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d040      	beq.n	8004144 <HAL_DMA_Start_IT+0x1bc>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a30      	ldr	r2, [pc, #192]	; (8004188 <HAL_DMA_Start_IT+0x200>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d03b      	beq.n	8004144 <HAL_DMA_Start_IT+0x1bc>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a2e      	ldr	r2, [pc, #184]	; (800418c <HAL_DMA_Start_IT+0x204>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d036      	beq.n	8004144 <HAL_DMA_Start_IT+0x1bc>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a2d      	ldr	r2, [pc, #180]	; (8004190 <HAL_DMA_Start_IT+0x208>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d031      	beq.n	8004144 <HAL_DMA_Start_IT+0x1bc>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a2b      	ldr	r2, [pc, #172]	; (8004194 <HAL_DMA_Start_IT+0x20c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d02c      	beq.n	8004144 <HAL_DMA_Start_IT+0x1bc>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a2a      	ldr	r2, [pc, #168]	; (8004198 <HAL_DMA_Start_IT+0x210>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d027      	beq.n	8004144 <HAL_DMA_Start_IT+0x1bc>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a28      	ldr	r2, [pc, #160]	; (800419c <HAL_DMA_Start_IT+0x214>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d022      	beq.n	8004144 <HAL_DMA_Start_IT+0x1bc>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a27      	ldr	r2, [pc, #156]	; (80041a0 <HAL_DMA_Start_IT+0x218>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d01d      	beq.n	8004144 <HAL_DMA_Start_IT+0x1bc>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a25      	ldr	r2, [pc, #148]	; (80041a4 <HAL_DMA_Start_IT+0x21c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d018      	beq.n	8004144 <HAL_DMA_Start_IT+0x1bc>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a24      	ldr	r2, [pc, #144]	; (80041a8 <HAL_DMA_Start_IT+0x220>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d013      	beq.n	8004144 <HAL_DMA_Start_IT+0x1bc>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a22      	ldr	r2, [pc, #136]	; (80041ac <HAL_DMA_Start_IT+0x224>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00e      	beq.n	8004144 <HAL_DMA_Start_IT+0x1bc>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a21      	ldr	r2, [pc, #132]	; (80041b0 <HAL_DMA_Start_IT+0x228>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d009      	beq.n	8004144 <HAL_DMA_Start_IT+0x1bc>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1f      	ldr	r2, [pc, #124]	; (80041b4 <HAL_DMA_Start_IT+0x22c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d004      	beq.n	8004144 <HAL_DMA_Start_IT+0x1bc>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1e      	ldr	r2, [pc, #120]	; (80041b8 <HAL_DMA_Start_IT+0x230>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d101      	bne.n	8004148 <HAL_DMA_Start_IT+0x1c0>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <HAL_DMA_Start_IT+0x1c2>
 8004148:	2300      	movs	r3, #0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d036      	beq.n	80041bc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 021e 	bic.w	r2, r3, #30
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0216 	orr.w	r2, r2, #22
 8004160:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d03e      	beq.n	80041e8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0208 	orr.w	r2, r2, #8
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e035      	b.n	80041e8 <HAL_DMA_Start_IT+0x260>
 800417c:	40020010 	.word	0x40020010
 8004180:	40020028 	.word	0x40020028
 8004184:	40020040 	.word	0x40020040
 8004188:	40020058 	.word	0x40020058
 800418c:	40020070 	.word	0x40020070
 8004190:	40020088 	.word	0x40020088
 8004194:	400200a0 	.word	0x400200a0
 8004198:	400200b8 	.word	0x400200b8
 800419c:	40020410 	.word	0x40020410
 80041a0:	40020428 	.word	0x40020428
 80041a4:	40020440 	.word	0x40020440
 80041a8:	40020458 	.word	0x40020458
 80041ac:	40020470 	.word	0x40020470
 80041b0:	40020488 	.word	0x40020488
 80041b4:	400204a0 	.word	0x400204a0
 80041b8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f023 020e 	bic.w	r2, r3, #14
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 020a 	orr.w	r2, r2, #10
 80041ce:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d007      	beq.n	80041e8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0204 	orr.w	r2, r2, #4
 80041e6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a83      	ldr	r2, [pc, #524]	; (80043fc <HAL_DMA_Start_IT+0x474>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d072      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a82      	ldr	r2, [pc, #520]	; (8004400 <HAL_DMA_Start_IT+0x478>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d06d      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a80      	ldr	r2, [pc, #512]	; (8004404 <HAL_DMA_Start_IT+0x47c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d068      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a7f      	ldr	r2, [pc, #508]	; (8004408 <HAL_DMA_Start_IT+0x480>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d063      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a7d      	ldr	r2, [pc, #500]	; (800440c <HAL_DMA_Start_IT+0x484>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d05e      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a7c      	ldr	r2, [pc, #496]	; (8004410 <HAL_DMA_Start_IT+0x488>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d059      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a7a      	ldr	r2, [pc, #488]	; (8004414 <HAL_DMA_Start_IT+0x48c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d054      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a79      	ldr	r2, [pc, #484]	; (8004418 <HAL_DMA_Start_IT+0x490>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d04f      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a77      	ldr	r2, [pc, #476]	; (800441c <HAL_DMA_Start_IT+0x494>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d04a      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a76      	ldr	r2, [pc, #472]	; (8004420 <HAL_DMA_Start_IT+0x498>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d045      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a74      	ldr	r2, [pc, #464]	; (8004424 <HAL_DMA_Start_IT+0x49c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d040      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a73      	ldr	r2, [pc, #460]	; (8004428 <HAL_DMA_Start_IT+0x4a0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d03b      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a71      	ldr	r2, [pc, #452]	; (800442c <HAL_DMA_Start_IT+0x4a4>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d036      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a70      	ldr	r2, [pc, #448]	; (8004430 <HAL_DMA_Start_IT+0x4a8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d031      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a6e      	ldr	r2, [pc, #440]	; (8004434 <HAL_DMA_Start_IT+0x4ac>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d02c      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a6d      	ldr	r2, [pc, #436]	; (8004438 <HAL_DMA_Start_IT+0x4b0>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d027      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a6b      	ldr	r2, [pc, #428]	; (800443c <HAL_DMA_Start_IT+0x4b4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d022      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a6a      	ldr	r2, [pc, #424]	; (8004440 <HAL_DMA_Start_IT+0x4b8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d01d      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a68      	ldr	r2, [pc, #416]	; (8004444 <HAL_DMA_Start_IT+0x4bc>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d018      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a67      	ldr	r2, [pc, #412]	; (8004448 <HAL_DMA_Start_IT+0x4c0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d013      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a65      	ldr	r2, [pc, #404]	; (800444c <HAL_DMA_Start_IT+0x4c4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00e      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a64      	ldr	r2, [pc, #400]	; (8004450 <HAL_DMA_Start_IT+0x4c8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d009      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a62      	ldr	r2, [pc, #392]	; (8004454 <HAL_DMA_Start_IT+0x4cc>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <HAL_DMA_Start_IT+0x350>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a61      	ldr	r2, [pc, #388]	; (8004458 <HAL_DMA_Start_IT+0x4d0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d101      	bne.n	80042dc <HAL_DMA_Start_IT+0x354>
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <HAL_DMA_Start_IT+0x356>
 80042dc:	2300      	movs	r3, #0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01a      	beq.n	8004318 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042fe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004304:	2b00      	cmp	r3, #0
 8004306:	d007      	beq.n	8004318 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004316:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a37      	ldr	r2, [pc, #220]	; (80043fc <HAL_DMA_Start_IT+0x474>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d04a      	beq.n	80043b8 <HAL_DMA_Start_IT+0x430>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a36      	ldr	r2, [pc, #216]	; (8004400 <HAL_DMA_Start_IT+0x478>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d045      	beq.n	80043b8 <HAL_DMA_Start_IT+0x430>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a34      	ldr	r2, [pc, #208]	; (8004404 <HAL_DMA_Start_IT+0x47c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d040      	beq.n	80043b8 <HAL_DMA_Start_IT+0x430>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a33      	ldr	r2, [pc, #204]	; (8004408 <HAL_DMA_Start_IT+0x480>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d03b      	beq.n	80043b8 <HAL_DMA_Start_IT+0x430>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a31      	ldr	r2, [pc, #196]	; (800440c <HAL_DMA_Start_IT+0x484>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d036      	beq.n	80043b8 <HAL_DMA_Start_IT+0x430>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a30      	ldr	r2, [pc, #192]	; (8004410 <HAL_DMA_Start_IT+0x488>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d031      	beq.n	80043b8 <HAL_DMA_Start_IT+0x430>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a2e      	ldr	r2, [pc, #184]	; (8004414 <HAL_DMA_Start_IT+0x48c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d02c      	beq.n	80043b8 <HAL_DMA_Start_IT+0x430>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a2d      	ldr	r2, [pc, #180]	; (8004418 <HAL_DMA_Start_IT+0x490>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d027      	beq.n	80043b8 <HAL_DMA_Start_IT+0x430>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a2b      	ldr	r2, [pc, #172]	; (800441c <HAL_DMA_Start_IT+0x494>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d022      	beq.n	80043b8 <HAL_DMA_Start_IT+0x430>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a2a      	ldr	r2, [pc, #168]	; (8004420 <HAL_DMA_Start_IT+0x498>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d01d      	beq.n	80043b8 <HAL_DMA_Start_IT+0x430>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a28      	ldr	r2, [pc, #160]	; (8004424 <HAL_DMA_Start_IT+0x49c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d018      	beq.n	80043b8 <HAL_DMA_Start_IT+0x430>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a27      	ldr	r2, [pc, #156]	; (8004428 <HAL_DMA_Start_IT+0x4a0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d013      	beq.n	80043b8 <HAL_DMA_Start_IT+0x430>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a25      	ldr	r2, [pc, #148]	; (800442c <HAL_DMA_Start_IT+0x4a4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00e      	beq.n	80043b8 <HAL_DMA_Start_IT+0x430>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a24      	ldr	r2, [pc, #144]	; (8004430 <HAL_DMA_Start_IT+0x4a8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d009      	beq.n	80043b8 <HAL_DMA_Start_IT+0x430>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a22      	ldr	r2, [pc, #136]	; (8004434 <HAL_DMA_Start_IT+0x4ac>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <HAL_DMA_Start_IT+0x430>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a21      	ldr	r2, [pc, #132]	; (8004438 <HAL_DMA_Start_IT+0x4b0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d108      	bne.n	80043ca <HAL_DMA_Start_IT+0x442>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	e012      	b.n	80043f0 <HAL_DMA_Start_IT+0x468>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f042 0201 	orr.w	r2, r2, #1
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	e009      	b.n	80043f0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40020010 	.word	0x40020010
 8004400:	40020028 	.word	0x40020028
 8004404:	40020040 	.word	0x40020040
 8004408:	40020058 	.word	0x40020058
 800440c:	40020070 	.word	0x40020070
 8004410:	40020088 	.word	0x40020088
 8004414:	400200a0 	.word	0x400200a0
 8004418:	400200b8 	.word	0x400200b8
 800441c:	40020410 	.word	0x40020410
 8004420:	40020428 	.word	0x40020428
 8004424:	40020440 	.word	0x40020440
 8004428:	40020458 	.word	0x40020458
 800442c:	40020470 	.word	0x40020470
 8004430:	40020488 	.word	0x40020488
 8004434:	400204a0 	.word	0x400204a0
 8004438:	400204b8 	.word	0x400204b8
 800443c:	58025408 	.word	0x58025408
 8004440:	5802541c 	.word	0x5802541c
 8004444:	58025430 	.word	0x58025430
 8004448:	58025444 	.word	0x58025444
 800444c:	58025458 	.word	0x58025458
 8004450:	5802546c 	.word	0x5802546c
 8004454:	58025480 	.word	0x58025480
 8004458:	58025494 	.word	0x58025494

0800445c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08a      	sub	sp, #40	; 0x28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004468:	4b67      	ldr	r3, [pc, #412]	; (8004608 <HAL_DMA_IRQHandler+0x1ac>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a67      	ldr	r2, [pc, #412]	; (800460c <HAL_DMA_IRQHandler+0x1b0>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	0a9b      	lsrs	r3, r3, #10
 8004474:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a5f      	ldr	r2, [pc, #380]	; (8004610 <HAL_DMA_IRQHandler+0x1b4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d04a      	beq.n	800452e <HAL_DMA_IRQHandler+0xd2>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a5d      	ldr	r2, [pc, #372]	; (8004614 <HAL_DMA_IRQHandler+0x1b8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d045      	beq.n	800452e <HAL_DMA_IRQHandler+0xd2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a5c      	ldr	r2, [pc, #368]	; (8004618 <HAL_DMA_IRQHandler+0x1bc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d040      	beq.n	800452e <HAL_DMA_IRQHandler+0xd2>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a5a      	ldr	r2, [pc, #360]	; (800461c <HAL_DMA_IRQHandler+0x1c0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d03b      	beq.n	800452e <HAL_DMA_IRQHandler+0xd2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a59      	ldr	r2, [pc, #356]	; (8004620 <HAL_DMA_IRQHandler+0x1c4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d036      	beq.n	800452e <HAL_DMA_IRQHandler+0xd2>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a57      	ldr	r2, [pc, #348]	; (8004624 <HAL_DMA_IRQHandler+0x1c8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d031      	beq.n	800452e <HAL_DMA_IRQHandler+0xd2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a56      	ldr	r2, [pc, #344]	; (8004628 <HAL_DMA_IRQHandler+0x1cc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d02c      	beq.n	800452e <HAL_DMA_IRQHandler+0xd2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a54      	ldr	r2, [pc, #336]	; (800462c <HAL_DMA_IRQHandler+0x1d0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d027      	beq.n	800452e <HAL_DMA_IRQHandler+0xd2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a53      	ldr	r2, [pc, #332]	; (8004630 <HAL_DMA_IRQHandler+0x1d4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d022      	beq.n	800452e <HAL_DMA_IRQHandler+0xd2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a51      	ldr	r2, [pc, #324]	; (8004634 <HAL_DMA_IRQHandler+0x1d8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01d      	beq.n	800452e <HAL_DMA_IRQHandler+0xd2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a50      	ldr	r2, [pc, #320]	; (8004638 <HAL_DMA_IRQHandler+0x1dc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d018      	beq.n	800452e <HAL_DMA_IRQHandler+0xd2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a4e      	ldr	r2, [pc, #312]	; (800463c <HAL_DMA_IRQHandler+0x1e0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <HAL_DMA_IRQHandler+0xd2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a4d      	ldr	r2, [pc, #308]	; (8004640 <HAL_DMA_IRQHandler+0x1e4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00e      	beq.n	800452e <HAL_DMA_IRQHandler+0xd2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a4b      	ldr	r2, [pc, #300]	; (8004644 <HAL_DMA_IRQHandler+0x1e8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_DMA_IRQHandler+0xd2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a4a      	ldr	r2, [pc, #296]	; (8004648 <HAL_DMA_IRQHandler+0x1ec>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_DMA_IRQHandler+0xd2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a48      	ldr	r2, [pc, #288]	; (800464c <HAL_DMA_IRQHandler+0x1f0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d101      	bne.n	8004532 <HAL_DMA_IRQHandler+0xd6>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <HAL_DMA_IRQHandler+0xd8>
 8004532:	2300      	movs	r3, #0
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 842b 	beq.w	8004d90 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	2208      	movs	r2, #8
 8004544:	409a      	lsls	r2, r3
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 80a2 	beq.w	8004694 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a2e      	ldr	r2, [pc, #184]	; (8004610 <HAL_DMA_IRQHandler+0x1b4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d04a      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x194>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a2d      	ldr	r2, [pc, #180]	; (8004614 <HAL_DMA_IRQHandler+0x1b8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d045      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x194>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a2b      	ldr	r2, [pc, #172]	; (8004618 <HAL_DMA_IRQHandler+0x1bc>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d040      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x194>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a2a      	ldr	r2, [pc, #168]	; (800461c <HAL_DMA_IRQHandler+0x1c0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d03b      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x194>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a28      	ldr	r2, [pc, #160]	; (8004620 <HAL_DMA_IRQHandler+0x1c4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d036      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x194>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a27      	ldr	r2, [pc, #156]	; (8004624 <HAL_DMA_IRQHandler+0x1c8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d031      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x194>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a25      	ldr	r2, [pc, #148]	; (8004628 <HAL_DMA_IRQHandler+0x1cc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d02c      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x194>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a24      	ldr	r2, [pc, #144]	; (800462c <HAL_DMA_IRQHandler+0x1d0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d027      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x194>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a22      	ldr	r2, [pc, #136]	; (8004630 <HAL_DMA_IRQHandler+0x1d4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d022      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x194>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a21      	ldr	r2, [pc, #132]	; (8004634 <HAL_DMA_IRQHandler+0x1d8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d01d      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x194>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a1f      	ldr	r2, [pc, #124]	; (8004638 <HAL_DMA_IRQHandler+0x1dc>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d018      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x194>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1e      	ldr	r2, [pc, #120]	; (800463c <HAL_DMA_IRQHandler+0x1e0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d013      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x194>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1c      	ldr	r2, [pc, #112]	; (8004640 <HAL_DMA_IRQHandler+0x1e4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00e      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x194>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1b      	ldr	r2, [pc, #108]	; (8004644 <HAL_DMA_IRQHandler+0x1e8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d009      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x194>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a19      	ldr	r2, [pc, #100]	; (8004648 <HAL_DMA_IRQHandler+0x1ec>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d004      	beq.n	80045f0 <HAL_DMA_IRQHandler+0x194>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a18      	ldr	r2, [pc, #96]	; (800464c <HAL_DMA_IRQHandler+0x1f0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d12f      	bne.n	8004650 <HAL_DMA_IRQHandler+0x1f4>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	e02e      	b.n	8004664 <HAL_DMA_IRQHandler+0x208>
 8004606:	bf00      	nop
 8004608:	24000000 	.word	0x24000000
 800460c:	1b4e81b5 	.word	0x1b4e81b5
 8004610:	40020010 	.word	0x40020010
 8004614:	40020028 	.word	0x40020028
 8004618:	40020040 	.word	0x40020040
 800461c:	40020058 	.word	0x40020058
 8004620:	40020070 	.word	0x40020070
 8004624:	40020088 	.word	0x40020088
 8004628:	400200a0 	.word	0x400200a0
 800462c:	400200b8 	.word	0x400200b8
 8004630:	40020410 	.word	0x40020410
 8004634:	40020428 	.word	0x40020428
 8004638:	40020440 	.word	0x40020440
 800463c:	40020458 	.word	0x40020458
 8004640:	40020470 	.word	0x40020470
 8004644:	40020488 	.word	0x40020488
 8004648:	400204a0 	.word	0x400204a0
 800464c:	400204b8 	.word	0x400204b8
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	bf14      	ite	ne
 800465e:	2301      	movne	r3, #1
 8004660:	2300      	moveq	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d015      	beq.n	8004694 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0204 	bic.w	r2, r2, #4
 8004676:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	2208      	movs	r2, #8
 8004682:	409a      	lsls	r2, r3
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468c:	f043 0201 	orr.w	r2, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	fa22 f303 	lsr.w	r3, r2, r3
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d06e      	beq.n	8004788 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a69      	ldr	r2, [pc, #420]	; (8004854 <HAL_DMA_IRQHandler+0x3f8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d04a      	beq.n	800474a <HAL_DMA_IRQHandler+0x2ee>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a67      	ldr	r2, [pc, #412]	; (8004858 <HAL_DMA_IRQHandler+0x3fc>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d045      	beq.n	800474a <HAL_DMA_IRQHandler+0x2ee>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a66      	ldr	r2, [pc, #408]	; (800485c <HAL_DMA_IRQHandler+0x400>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d040      	beq.n	800474a <HAL_DMA_IRQHandler+0x2ee>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a64      	ldr	r2, [pc, #400]	; (8004860 <HAL_DMA_IRQHandler+0x404>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d03b      	beq.n	800474a <HAL_DMA_IRQHandler+0x2ee>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a63      	ldr	r2, [pc, #396]	; (8004864 <HAL_DMA_IRQHandler+0x408>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d036      	beq.n	800474a <HAL_DMA_IRQHandler+0x2ee>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a61      	ldr	r2, [pc, #388]	; (8004868 <HAL_DMA_IRQHandler+0x40c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d031      	beq.n	800474a <HAL_DMA_IRQHandler+0x2ee>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a60      	ldr	r2, [pc, #384]	; (800486c <HAL_DMA_IRQHandler+0x410>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d02c      	beq.n	800474a <HAL_DMA_IRQHandler+0x2ee>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a5e      	ldr	r2, [pc, #376]	; (8004870 <HAL_DMA_IRQHandler+0x414>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d027      	beq.n	800474a <HAL_DMA_IRQHandler+0x2ee>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a5d      	ldr	r2, [pc, #372]	; (8004874 <HAL_DMA_IRQHandler+0x418>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d022      	beq.n	800474a <HAL_DMA_IRQHandler+0x2ee>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a5b      	ldr	r2, [pc, #364]	; (8004878 <HAL_DMA_IRQHandler+0x41c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d01d      	beq.n	800474a <HAL_DMA_IRQHandler+0x2ee>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a5a      	ldr	r2, [pc, #360]	; (800487c <HAL_DMA_IRQHandler+0x420>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d018      	beq.n	800474a <HAL_DMA_IRQHandler+0x2ee>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a58      	ldr	r2, [pc, #352]	; (8004880 <HAL_DMA_IRQHandler+0x424>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <HAL_DMA_IRQHandler+0x2ee>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a57      	ldr	r2, [pc, #348]	; (8004884 <HAL_DMA_IRQHandler+0x428>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00e      	beq.n	800474a <HAL_DMA_IRQHandler+0x2ee>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a55      	ldr	r2, [pc, #340]	; (8004888 <HAL_DMA_IRQHandler+0x42c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d009      	beq.n	800474a <HAL_DMA_IRQHandler+0x2ee>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a54      	ldr	r2, [pc, #336]	; (800488c <HAL_DMA_IRQHandler+0x430>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d004      	beq.n	800474a <HAL_DMA_IRQHandler+0x2ee>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a52      	ldr	r2, [pc, #328]	; (8004890 <HAL_DMA_IRQHandler+0x434>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d10a      	bne.n	8004760 <HAL_DMA_IRQHandler+0x304>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004754:	2b00      	cmp	r3, #0
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e003      	b.n	8004768 <HAL_DMA_IRQHandler+0x30c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2300      	movs	r3, #0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00d      	beq.n	8004788 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2201      	movs	r2, #1
 8004776:	409a      	lsls	r2, r3
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004780:	f043 0202 	orr.w	r2, r3, #2
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	2204      	movs	r2, #4
 8004792:	409a      	lsls	r2, r3
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 808f 	beq.w	80048bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a2c      	ldr	r2, [pc, #176]	; (8004854 <HAL_DMA_IRQHandler+0x3f8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d04a      	beq.n	800483e <HAL_DMA_IRQHandler+0x3e2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a2a      	ldr	r2, [pc, #168]	; (8004858 <HAL_DMA_IRQHandler+0x3fc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d045      	beq.n	800483e <HAL_DMA_IRQHandler+0x3e2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a29      	ldr	r2, [pc, #164]	; (800485c <HAL_DMA_IRQHandler+0x400>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d040      	beq.n	800483e <HAL_DMA_IRQHandler+0x3e2>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a27      	ldr	r2, [pc, #156]	; (8004860 <HAL_DMA_IRQHandler+0x404>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d03b      	beq.n	800483e <HAL_DMA_IRQHandler+0x3e2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a26      	ldr	r2, [pc, #152]	; (8004864 <HAL_DMA_IRQHandler+0x408>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d036      	beq.n	800483e <HAL_DMA_IRQHandler+0x3e2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a24      	ldr	r2, [pc, #144]	; (8004868 <HAL_DMA_IRQHandler+0x40c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d031      	beq.n	800483e <HAL_DMA_IRQHandler+0x3e2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a23      	ldr	r2, [pc, #140]	; (800486c <HAL_DMA_IRQHandler+0x410>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d02c      	beq.n	800483e <HAL_DMA_IRQHandler+0x3e2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a21      	ldr	r2, [pc, #132]	; (8004870 <HAL_DMA_IRQHandler+0x414>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d027      	beq.n	800483e <HAL_DMA_IRQHandler+0x3e2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a20      	ldr	r2, [pc, #128]	; (8004874 <HAL_DMA_IRQHandler+0x418>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d022      	beq.n	800483e <HAL_DMA_IRQHandler+0x3e2>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1e      	ldr	r2, [pc, #120]	; (8004878 <HAL_DMA_IRQHandler+0x41c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d01d      	beq.n	800483e <HAL_DMA_IRQHandler+0x3e2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1d      	ldr	r2, [pc, #116]	; (800487c <HAL_DMA_IRQHandler+0x420>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d018      	beq.n	800483e <HAL_DMA_IRQHandler+0x3e2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1b      	ldr	r2, [pc, #108]	; (8004880 <HAL_DMA_IRQHandler+0x424>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <HAL_DMA_IRQHandler+0x3e2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1a      	ldr	r2, [pc, #104]	; (8004884 <HAL_DMA_IRQHandler+0x428>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d00e      	beq.n	800483e <HAL_DMA_IRQHandler+0x3e2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a18      	ldr	r2, [pc, #96]	; (8004888 <HAL_DMA_IRQHandler+0x42c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d009      	beq.n	800483e <HAL_DMA_IRQHandler+0x3e2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a17      	ldr	r2, [pc, #92]	; (800488c <HAL_DMA_IRQHandler+0x430>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d004      	beq.n	800483e <HAL_DMA_IRQHandler+0x3e2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a15      	ldr	r2, [pc, #84]	; (8004890 <HAL_DMA_IRQHandler+0x434>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d12a      	bne.n	8004894 <HAL_DMA_IRQHandler+0x438>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	bf14      	ite	ne
 800484c:	2301      	movne	r3, #1
 800484e:	2300      	moveq	r3, #0
 8004850:	b2db      	uxtb	r3, r3
 8004852:	e023      	b.n	800489c <HAL_DMA_IRQHandler+0x440>
 8004854:	40020010 	.word	0x40020010
 8004858:	40020028 	.word	0x40020028
 800485c:	40020040 	.word	0x40020040
 8004860:	40020058 	.word	0x40020058
 8004864:	40020070 	.word	0x40020070
 8004868:	40020088 	.word	0x40020088
 800486c:	400200a0 	.word	0x400200a0
 8004870:	400200b8 	.word	0x400200b8
 8004874:	40020410 	.word	0x40020410
 8004878:	40020428 	.word	0x40020428
 800487c:	40020440 	.word	0x40020440
 8004880:	40020458 	.word	0x40020458
 8004884:	40020470 	.word	0x40020470
 8004888:	40020488 	.word	0x40020488
 800488c:	400204a0 	.word	0x400204a0
 8004890:	400204b8 	.word	0x400204b8
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2300      	movs	r3, #0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00d      	beq.n	80048bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	2204      	movs	r2, #4
 80048aa:	409a      	lsls	r2, r3
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b4:	f043 0204 	orr.w	r2, r3, #4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c0:	f003 031f 	and.w	r3, r3, #31
 80048c4:	2210      	movs	r2, #16
 80048c6:	409a      	lsls	r2, r3
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 80a6 	beq.w	8004a1e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a85      	ldr	r2, [pc, #532]	; (8004aec <HAL_DMA_IRQHandler+0x690>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d04a      	beq.n	8004972 <HAL_DMA_IRQHandler+0x516>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a83      	ldr	r2, [pc, #524]	; (8004af0 <HAL_DMA_IRQHandler+0x694>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d045      	beq.n	8004972 <HAL_DMA_IRQHandler+0x516>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a82      	ldr	r2, [pc, #520]	; (8004af4 <HAL_DMA_IRQHandler+0x698>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d040      	beq.n	8004972 <HAL_DMA_IRQHandler+0x516>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a80      	ldr	r2, [pc, #512]	; (8004af8 <HAL_DMA_IRQHandler+0x69c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d03b      	beq.n	8004972 <HAL_DMA_IRQHandler+0x516>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a7f      	ldr	r2, [pc, #508]	; (8004afc <HAL_DMA_IRQHandler+0x6a0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d036      	beq.n	8004972 <HAL_DMA_IRQHandler+0x516>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a7d      	ldr	r2, [pc, #500]	; (8004b00 <HAL_DMA_IRQHandler+0x6a4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d031      	beq.n	8004972 <HAL_DMA_IRQHandler+0x516>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a7c      	ldr	r2, [pc, #496]	; (8004b04 <HAL_DMA_IRQHandler+0x6a8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d02c      	beq.n	8004972 <HAL_DMA_IRQHandler+0x516>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a7a      	ldr	r2, [pc, #488]	; (8004b08 <HAL_DMA_IRQHandler+0x6ac>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d027      	beq.n	8004972 <HAL_DMA_IRQHandler+0x516>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a79      	ldr	r2, [pc, #484]	; (8004b0c <HAL_DMA_IRQHandler+0x6b0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d022      	beq.n	8004972 <HAL_DMA_IRQHandler+0x516>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a77      	ldr	r2, [pc, #476]	; (8004b10 <HAL_DMA_IRQHandler+0x6b4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01d      	beq.n	8004972 <HAL_DMA_IRQHandler+0x516>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a76      	ldr	r2, [pc, #472]	; (8004b14 <HAL_DMA_IRQHandler+0x6b8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d018      	beq.n	8004972 <HAL_DMA_IRQHandler+0x516>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a74      	ldr	r2, [pc, #464]	; (8004b18 <HAL_DMA_IRQHandler+0x6bc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_DMA_IRQHandler+0x516>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a73      	ldr	r2, [pc, #460]	; (8004b1c <HAL_DMA_IRQHandler+0x6c0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_DMA_IRQHandler+0x516>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a71      	ldr	r2, [pc, #452]	; (8004b20 <HAL_DMA_IRQHandler+0x6c4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_DMA_IRQHandler+0x516>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a70      	ldr	r2, [pc, #448]	; (8004b24 <HAL_DMA_IRQHandler+0x6c8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_DMA_IRQHandler+0x516>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a6e      	ldr	r2, [pc, #440]	; (8004b28 <HAL_DMA_IRQHandler+0x6cc>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d10a      	bne.n	8004988 <HAL_DMA_IRQHandler+0x52c>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	bf14      	ite	ne
 8004980:	2301      	movne	r3, #1
 8004982:	2300      	moveq	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	e009      	b.n	800499c <HAL_DMA_IRQHandler+0x540>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b00      	cmp	r3, #0
 8004994:	bf14      	ite	ne
 8004996:	2301      	movne	r3, #1
 8004998:	2300      	moveq	r3, #0
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d03e      	beq.n	8004a1e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	2210      	movs	r2, #16
 80049aa:	409a      	lsls	r2, r3
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d018      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d108      	bne.n	80049de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d024      	beq.n	8004a1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	4798      	blx	r3
 80049dc:	e01f      	b.n	8004a1e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01b      	beq.n	8004a1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	4798      	blx	r3
 80049ee:	e016      	b.n	8004a1e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d107      	bne.n	8004a0e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0208 	bic.w	r2, r2, #8
 8004a0c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a22:	f003 031f 	and.w	r3, r3, #31
 8004a26:	2220      	movs	r2, #32
 8004a28:	409a      	lsls	r2, r3
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 8110 	beq.w	8004c54 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a2c      	ldr	r2, [pc, #176]	; (8004aec <HAL_DMA_IRQHandler+0x690>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d04a      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x678>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a2b      	ldr	r2, [pc, #172]	; (8004af0 <HAL_DMA_IRQHandler+0x694>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d045      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x678>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a29      	ldr	r2, [pc, #164]	; (8004af4 <HAL_DMA_IRQHandler+0x698>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d040      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x678>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a28      	ldr	r2, [pc, #160]	; (8004af8 <HAL_DMA_IRQHandler+0x69c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d03b      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x678>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a26      	ldr	r2, [pc, #152]	; (8004afc <HAL_DMA_IRQHandler+0x6a0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d036      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x678>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a25      	ldr	r2, [pc, #148]	; (8004b00 <HAL_DMA_IRQHandler+0x6a4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d031      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x678>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a23      	ldr	r2, [pc, #140]	; (8004b04 <HAL_DMA_IRQHandler+0x6a8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d02c      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x678>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a22      	ldr	r2, [pc, #136]	; (8004b08 <HAL_DMA_IRQHandler+0x6ac>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d027      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x678>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a20      	ldr	r2, [pc, #128]	; (8004b0c <HAL_DMA_IRQHandler+0x6b0>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d022      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x678>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <HAL_DMA_IRQHandler+0x6b4>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d01d      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x678>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <HAL_DMA_IRQHandler+0x6b8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d018      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x678>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1c      	ldr	r2, [pc, #112]	; (8004b18 <HAL_DMA_IRQHandler+0x6bc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d013      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x678>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1a      	ldr	r2, [pc, #104]	; (8004b1c <HAL_DMA_IRQHandler+0x6c0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00e      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x678>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a19      	ldr	r2, [pc, #100]	; (8004b20 <HAL_DMA_IRQHandler+0x6c4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d009      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x678>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a17      	ldr	r2, [pc, #92]	; (8004b24 <HAL_DMA_IRQHandler+0x6c8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0x678>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a16      	ldr	r2, [pc, #88]	; (8004b28 <HAL_DMA_IRQHandler+0x6cc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d12b      	bne.n	8004b2c <HAL_DMA_IRQHandler+0x6d0>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bf14      	ite	ne
 8004ae2:	2301      	movne	r3, #1
 8004ae4:	2300      	moveq	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	e02a      	b.n	8004b40 <HAL_DMA_IRQHandler+0x6e4>
 8004aea:	bf00      	nop
 8004aec:	40020010 	.word	0x40020010
 8004af0:	40020028 	.word	0x40020028
 8004af4:	40020040 	.word	0x40020040
 8004af8:	40020058 	.word	0x40020058
 8004afc:	40020070 	.word	0x40020070
 8004b00:	40020088 	.word	0x40020088
 8004b04:	400200a0 	.word	0x400200a0
 8004b08:	400200b8 	.word	0x400200b8
 8004b0c:	40020410 	.word	0x40020410
 8004b10:	40020428 	.word	0x40020428
 8004b14:	40020440 	.word	0x40020440
 8004b18:	40020458 	.word	0x40020458
 8004b1c:	40020470 	.word	0x40020470
 8004b20:	40020488 	.word	0x40020488
 8004b24:	400204a0 	.word	0x400204a0
 8004b28:	400204b8 	.word	0x400204b8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf14      	ite	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	2300      	moveq	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 8087 	beq.w	8004c54 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	2220      	movs	r2, #32
 8004b50:	409a      	lsls	r2, r3
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d139      	bne.n	8004bd6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0216 	bic.w	r2, r2, #22
 8004b70:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	695a      	ldr	r2, [r3, #20]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b80:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d103      	bne.n	8004b92 <HAL_DMA_IRQHandler+0x736>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d007      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0208 	bic.w	r2, r2, #8
 8004ba0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba6:	f003 031f 	and.w	r3, r3, #31
 8004baa:	223f      	movs	r2, #63	; 0x3f
 8004bac:	409a      	lsls	r2, r3
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 8382 	beq.w	80052d0 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	4798      	blx	r3
          }
          return;
 8004bd4:	e37c      	b.n	80052d0 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d018      	beq.n	8004c16 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d108      	bne.n	8004c04 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d02c      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	4798      	blx	r3
 8004c02:	e027      	b.n	8004c54 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d023      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	4798      	blx	r3
 8004c14:	e01e      	b.n	8004c54 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10f      	bne.n	8004c44 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0210 	bic.w	r2, r2, #16
 8004c32:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 833e 	beq.w	80052da <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 8088 	beq.w	8004d7c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2204      	movs	r2, #4
 8004c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a89      	ldr	r2, [pc, #548]	; (8004ea0 <HAL_DMA_IRQHandler+0xa44>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d04a      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x8b8>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a88      	ldr	r2, [pc, #544]	; (8004ea4 <HAL_DMA_IRQHandler+0xa48>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d045      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x8b8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a86      	ldr	r2, [pc, #536]	; (8004ea8 <HAL_DMA_IRQHandler+0xa4c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d040      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x8b8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a85      	ldr	r2, [pc, #532]	; (8004eac <HAL_DMA_IRQHandler+0xa50>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d03b      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x8b8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a83      	ldr	r2, [pc, #524]	; (8004eb0 <HAL_DMA_IRQHandler+0xa54>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d036      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x8b8>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a82      	ldr	r2, [pc, #520]	; (8004eb4 <HAL_DMA_IRQHandler+0xa58>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d031      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x8b8>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a80      	ldr	r2, [pc, #512]	; (8004eb8 <HAL_DMA_IRQHandler+0xa5c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d02c      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x8b8>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a7f      	ldr	r2, [pc, #508]	; (8004ebc <HAL_DMA_IRQHandler+0xa60>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d027      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x8b8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a7d      	ldr	r2, [pc, #500]	; (8004ec0 <HAL_DMA_IRQHandler+0xa64>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d022      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x8b8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a7c      	ldr	r2, [pc, #496]	; (8004ec4 <HAL_DMA_IRQHandler+0xa68>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d01d      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x8b8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a7a      	ldr	r2, [pc, #488]	; (8004ec8 <HAL_DMA_IRQHandler+0xa6c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d018      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x8b8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a79      	ldr	r2, [pc, #484]	; (8004ecc <HAL_DMA_IRQHandler+0xa70>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x8b8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a77      	ldr	r2, [pc, #476]	; (8004ed0 <HAL_DMA_IRQHandler+0xa74>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00e      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x8b8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a76      	ldr	r2, [pc, #472]	; (8004ed4 <HAL_DMA_IRQHandler+0xa78>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x8b8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a74      	ldr	r2, [pc, #464]	; (8004ed8 <HAL_DMA_IRQHandler+0xa7c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <HAL_DMA_IRQHandler+0x8b8>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a73      	ldr	r2, [pc, #460]	; (8004edc <HAL_DMA_IRQHandler+0xa80>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d108      	bne.n	8004d26 <HAL_DMA_IRQHandler+0x8ca>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0201 	bic.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e007      	b.n	8004d36 <HAL_DMA_IRQHandler+0x8da>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0201 	bic.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d307      	bcc.n	8004d52 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f2      	bne.n	8004d36 <HAL_DMA_IRQHandler+0x8da>
 8004d50:	e000      	b.n	8004d54 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004d52:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d004      	beq.n	8004d6c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2203      	movs	r2, #3
 8004d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004d6a:	e003      	b.n	8004d74 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 82aa 	beq.w	80052da <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	4798      	blx	r3
 8004d8e:	e2a4      	b.n	80052da <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a52      	ldr	r2, [pc, #328]	; (8004ee0 <HAL_DMA_IRQHandler+0xa84>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d04a      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x9d4>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a51      	ldr	r2, [pc, #324]	; (8004ee4 <HAL_DMA_IRQHandler+0xa88>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d045      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x9d4>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a4f      	ldr	r2, [pc, #316]	; (8004ee8 <HAL_DMA_IRQHandler+0xa8c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d040      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x9d4>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a4e      	ldr	r2, [pc, #312]	; (8004eec <HAL_DMA_IRQHandler+0xa90>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d03b      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x9d4>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a4c      	ldr	r2, [pc, #304]	; (8004ef0 <HAL_DMA_IRQHandler+0xa94>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d036      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x9d4>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a4b      	ldr	r2, [pc, #300]	; (8004ef4 <HAL_DMA_IRQHandler+0xa98>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d031      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x9d4>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a49      	ldr	r2, [pc, #292]	; (8004ef8 <HAL_DMA_IRQHandler+0xa9c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d02c      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x9d4>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a48      	ldr	r2, [pc, #288]	; (8004efc <HAL_DMA_IRQHandler+0xaa0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d027      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x9d4>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a46      	ldr	r2, [pc, #280]	; (8004f00 <HAL_DMA_IRQHandler+0xaa4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d022      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x9d4>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a45      	ldr	r2, [pc, #276]	; (8004f04 <HAL_DMA_IRQHandler+0xaa8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d01d      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x9d4>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a43      	ldr	r2, [pc, #268]	; (8004f08 <HAL_DMA_IRQHandler+0xaac>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d018      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x9d4>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a42      	ldr	r2, [pc, #264]	; (8004f0c <HAL_DMA_IRQHandler+0xab0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d013      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x9d4>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a40      	ldr	r2, [pc, #256]	; (8004f10 <HAL_DMA_IRQHandler+0xab4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00e      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x9d4>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a3f      	ldr	r2, [pc, #252]	; (8004f14 <HAL_DMA_IRQHandler+0xab8>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d009      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x9d4>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a3d      	ldr	r2, [pc, #244]	; (8004f18 <HAL_DMA_IRQHandler+0xabc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d004      	beq.n	8004e30 <HAL_DMA_IRQHandler+0x9d4>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a3c      	ldr	r2, [pc, #240]	; (8004f1c <HAL_DMA_IRQHandler+0xac0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d101      	bne.n	8004e34 <HAL_DMA_IRQHandler+0x9d8>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <HAL_DMA_IRQHandler+0x9da>
 8004e34:	2300      	movs	r3, #0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 824f 	beq.w	80052da <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e48:	f003 031f 	and.w	r3, r3, #31
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 80dd 	beq.w	8005014 <HAL_DMA_IRQHandler+0xbb8>
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80d7 	beq.w	8005014 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	2204      	movs	r2, #4
 8004e70:	409a      	lsls	r2, r3
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d059      	beq.n	8004f34 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d14a      	bne.n	8004f20 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8220 	beq.w	80052d4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e9c:	e21a      	b.n	80052d4 <HAL_DMA_IRQHandler+0xe78>
 8004e9e:	bf00      	nop
 8004ea0:	40020010 	.word	0x40020010
 8004ea4:	40020028 	.word	0x40020028
 8004ea8:	40020040 	.word	0x40020040
 8004eac:	40020058 	.word	0x40020058
 8004eb0:	40020070 	.word	0x40020070
 8004eb4:	40020088 	.word	0x40020088
 8004eb8:	400200a0 	.word	0x400200a0
 8004ebc:	400200b8 	.word	0x400200b8
 8004ec0:	40020410 	.word	0x40020410
 8004ec4:	40020428 	.word	0x40020428
 8004ec8:	40020440 	.word	0x40020440
 8004ecc:	40020458 	.word	0x40020458
 8004ed0:	40020470 	.word	0x40020470
 8004ed4:	40020488 	.word	0x40020488
 8004ed8:	400204a0 	.word	0x400204a0
 8004edc:	400204b8 	.word	0x400204b8
 8004ee0:	48022c08 	.word	0x48022c08
 8004ee4:	48022c1c 	.word	0x48022c1c
 8004ee8:	48022c30 	.word	0x48022c30
 8004eec:	48022c44 	.word	0x48022c44
 8004ef0:	48022c58 	.word	0x48022c58
 8004ef4:	48022c6c 	.word	0x48022c6c
 8004ef8:	48022c80 	.word	0x48022c80
 8004efc:	48022c94 	.word	0x48022c94
 8004f00:	58025408 	.word	0x58025408
 8004f04:	5802541c 	.word	0x5802541c
 8004f08:	58025430 	.word	0x58025430
 8004f0c:	58025444 	.word	0x58025444
 8004f10:	58025458 	.word	0x58025458
 8004f14:	5802546c 	.word	0x5802546c
 8004f18:	58025480 	.word	0x58025480
 8004f1c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 81d5 	beq.w	80052d4 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f32:	e1cf      	b.n	80052d4 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d160      	bne.n	8005000 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a7f      	ldr	r2, [pc, #508]	; (8005140 <HAL_DMA_IRQHandler+0xce4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d04a      	beq.n	8004fde <HAL_DMA_IRQHandler+0xb82>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a7d      	ldr	r2, [pc, #500]	; (8005144 <HAL_DMA_IRQHandler+0xce8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d045      	beq.n	8004fde <HAL_DMA_IRQHandler+0xb82>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a7c      	ldr	r2, [pc, #496]	; (8005148 <HAL_DMA_IRQHandler+0xcec>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d040      	beq.n	8004fde <HAL_DMA_IRQHandler+0xb82>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a7a      	ldr	r2, [pc, #488]	; (800514c <HAL_DMA_IRQHandler+0xcf0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d03b      	beq.n	8004fde <HAL_DMA_IRQHandler+0xb82>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a79      	ldr	r2, [pc, #484]	; (8005150 <HAL_DMA_IRQHandler+0xcf4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d036      	beq.n	8004fde <HAL_DMA_IRQHandler+0xb82>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a77      	ldr	r2, [pc, #476]	; (8005154 <HAL_DMA_IRQHandler+0xcf8>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d031      	beq.n	8004fde <HAL_DMA_IRQHandler+0xb82>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a76      	ldr	r2, [pc, #472]	; (8005158 <HAL_DMA_IRQHandler+0xcfc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d02c      	beq.n	8004fde <HAL_DMA_IRQHandler+0xb82>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a74      	ldr	r2, [pc, #464]	; (800515c <HAL_DMA_IRQHandler+0xd00>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d027      	beq.n	8004fde <HAL_DMA_IRQHandler+0xb82>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a73      	ldr	r2, [pc, #460]	; (8005160 <HAL_DMA_IRQHandler+0xd04>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d022      	beq.n	8004fde <HAL_DMA_IRQHandler+0xb82>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a71      	ldr	r2, [pc, #452]	; (8005164 <HAL_DMA_IRQHandler+0xd08>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d01d      	beq.n	8004fde <HAL_DMA_IRQHandler+0xb82>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a70      	ldr	r2, [pc, #448]	; (8005168 <HAL_DMA_IRQHandler+0xd0c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d018      	beq.n	8004fde <HAL_DMA_IRQHandler+0xb82>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a6e      	ldr	r2, [pc, #440]	; (800516c <HAL_DMA_IRQHandler+0xd10>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <HAL_DMA_IRQHandler+0xb82>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a6d      	ldr	r2, [pc, #436]	; (8005170 <HAL_DMA_IRQHandler+0xd14>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00e      	beq.n	8004fde <HAL_DMA_IRQHandler+0xb82>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a6b      	ldr	r2, [pc, #428]	; (8005174 <HAL_DMA_IRQHandler+0xd18>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d009      	beq.n	8004fde <HAL_DMA_IRQHandler+0xb82>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a6a      	ldr	r2, [pc, #424]	; (8005178 <HAL_DMA_IRQHandler+0xd1c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d004      	beq.n	8004fde <HAL_DMA_IRQHandler+0xb82>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a68      	ldr	r2, [pc, #416]	; (800517c <HAL_DMA_IRQHandler+0xd20>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d108      	bne.n	8004ff0 <HAL_DMA_IRQHandler+0xb94>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0208 	bic.w	r2, r2, #8
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e007      	b.n	8005000 <HAL_DMA_IRQHandler+0xba4>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0204 	bic.w	r2, r2, #4
 8004ffe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8165 	beq.w	80052d4 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005012:	e15f      	b.n	80052d4 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005018:	f003 031f 	and.w	r3, r3, #31
 800501c:	2202      	movs	r2, #2
 800501e:	409a      	lsls	r2, r3
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80c5 	beq.w	80051b4 <HAL_DMA_IRQHandler+0xd58>
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 80bf 	beq.w	80051b4 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503a:	f003 031f 	and.w	r3, r3, #31
 800503e:	2202      	movs	r2, #2
 8005040:	409a      	lsls	r2, r3
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d018      	beq.n	8005082 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 813a 	beq.w	80052d8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800506c:	e134      	b.n	80052d8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 8130 	beq.w	80052d8 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005080:	e12a      	b.n	80052d8 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b00      	cmp	r3, #0
 800508a:	f040 8089 	bne.w	80051a0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a2b      	ldr	r2, [pc, #172]	; (8005140 <HAL_DMA_IRQHandler+0xce4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d04a      	beq.n	800512e <HAL_DMA_IRQHandler+0xcd2>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a29      	ldr	r2, [pc, #164]	; (8005144 <HAL_DMA_IRQHandler+0xce8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d045      	beq.n	800512e <HAL_DMA_IRQHandler+0xcd2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a28      	ldr	r2, [pc, #160]	; (8005148 <HAL_DMA_IRQHandler+0xcec>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d040      	beq.n	800512e <HAL_DMA_IRQHandler+0xcd2>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a26      	ldr	r2, [pc, #152]	; (800514c <HAL_DMA_IRQHandler+0xcf0>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d03b      	beq.n	800512e <HAL_DMA_IRQHandler+0xcd2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a25      	ldr	r2, [pc, #148]	; (8005150 <HAL_DMA_IRQHandler+0xcf4>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d036      	beq.n	800512e <HAL_DMA_IRQHandler+0xcd2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a23      	ldr	r2, [pc, #140]	; (8005154 <HAL_DMA_IRQHandler+0xcf8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d031      	beq.n	800512e <HAL_DMA_IRQHandler+0xcd2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a22      	ldr	r2, [pc, #136]	; (8005158 <HAL_DMA_IRQHandler+0xcfc>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d02c      	beq.n	800512e <HAL_DMA_IRQHandler+0xcd2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a20      	ldr	r2, [pc, #128]	; (800515c <HAL_DMA_IRQHandler+0xd00>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d027      	beq.n	800512e <HAL_DMA_IRQHandler+0xcd2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <HAL_DMA_IRQHandler+0xd04>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d022      	beq.n	800512e <HAL_DMA_IRQHandler+0xcd2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <HAL_DMA_IRQHandler+0xd08>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d01d      	beq.n	800512e <HAL_DMA_IRQHandler+0xcd2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1c      	ldr	r2, [pc, #112]	; (8005168 <HAL_DMA_IRQHandler+0xd0c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d018      	beq.n	800512e <HAL_DMA_IRQHandler+0xcd2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1a      	ldr	r2, [pc, #104]	; (800516c <HAL_DMA_IRQHandler+0xd10>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <HAL_DMA_IRQHandler+0xcd2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a19      	ldr	r2, [pc, #100]	; (8005170 <HAL_DMA_IRQHandler+0xd14>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00e      	beq.n	800512e <HAL_DMA_IRQHandler+0xcd2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a17      	ldr	r2, [pc, #92]	; (8005174 <HAL_DMA_IRQHandler+0xd18>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_DMA_IRQHandler+0xcd2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a16      	ldr	r2, [pc, #88]	; (8005178 <HAL_DMA_IRQHandler+0xd1c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d004      	beq.n	800512e <HAL_DMA_IRQHandler+0xcd2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a14      	ldr	r2, [pc, #80]	; (800517c <HAL_DMA_IRQHandler+0xd20>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d128      	bne.n	8005180 <HAL_DMA_IRQHandler+0xd24>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0214 	bic.w	r2, r2, #20
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	e027      	b.n	8005190 <HAL_DMA_IRQHandler+0xd34>
 8005140:	40020010 	.word	0x40020010
 8005144:	40020028 	.word	0x40020028
 8005148:	40020040 	.word	0x40020040
 800514c:	40020058 	.word	0x40020058
 8005150:	40020070 	.word	0x40020070
 8005154:	40020088 	.word	0x40020088
 8005158:	400200a0 	.word	0x400200a0
 800515c:	400200b8 	.word	0x400200b8
 8005160:	40020410 	.word	0x40020410
 8005164:	40020428 	.word	0x40020428
 8005168:	40020440 	.word	0x40020440
 800516c:	40020458 	.word	0x40020458
 8005170:	40020470 	.word	0x40020470
 8005174:	40020488 	.word	0x40020488
 8005178:	400204a0 	.word	0x400204a0
 800517c:	400204b8 	.word	0x400204b8
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 020a 	bic.w	r2, r2, #10
 800518e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 8097 	beq.w	80052d8 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051b2:	e091      	b.n	80052d8 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b8:	f003 031f 	and.w	r3, r3, #31
 80051bc:	2208      	movs	r2, #8
 80051be:	409a      	lsls	r2, r3
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 8088 	beq.w	80052da <HAL_DMA_IRQHandler+0xe7e>
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 8082 	beq.w	80052da <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a41      	ldr	r2, [pc, #260]	; (80052e0 <HAL_DMA_IRQHandler+0xe84>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d04a      	beq.n	8005276 <HAL_DMA_IRQHandler+0xe1a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a3f      	ldr	r2, [pc, #252]	; (80052e4 <HAL_DMA_IRQHandler+0xe88>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d045      	beq.n	8005276 <HAL_DMA_IRQHandler+0xe1a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a3e      	ldr	r2, [pc, #248]	; (80052e8 <HAL_DMA_IRQHandler+0xe8c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d040      	beq.n	8005276 <HAL_DMA_IRQHandler+0xe1a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a3c      	ldr	r2, [pc, #240]	; (80052ec <HAL_DMA_IRQHandler+0xe90>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d03b      	beq.n	8005276 <HAL_DMA_IRQHandler+0xe1a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a3b      	ldr	r2, [pc, #236]	; (80052f0 <HAL_DMA_IRQHandler+0xe94>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d036      	beq.n	8005276 <HAL_DMA_IRQHandler+0xe1a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a39      	ldr	r2, [pc, #228]	; (80052f4 <HAL_DMA_IRQHandler+0xe98>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d031      	beq.n	8005276 <HAL_DMA_IRQHandler+0xe1a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a38      	ldr	r2, [pc, #224]	; (80052f8 <HAL_DMA_IRQHandler+0xe9c>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d02c      	beq.n	8005276 <HAL_DMA_IRQHandler+0xe1a>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a36      	ldr	r2, [pc, #216]	; (80052fc <HAL_DMA_IRQHandler+0xea0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d027      	beq.n	8005276 <HAL_DMA_IRQHandler+0xe1a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a35      	ldr	r2, [pc, #212]	; (8005300 <HAL_DMA_IRQHandler+0xea4>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d022      	beq.n	8005276 <HAL_DMA_IRQHandler+0xe1a>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a33      	ldr	r2, [pc, #204]	; (8005304 <HAL_DMA_IRQHandler+0xea8>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d01d      	beq.n	8005276 <HAL_DMA_IRQHandler+0xe1a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a32      	ldr	r2, [pc, #200]	; (8005308 <HAL_DMA_IRQHandler+0xeac>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d018      	beq.n	8005276 <HAL_DMA_IRQHandler+0xe1a>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a30      	ldr	r2, [pc, #192]	; (800530c <HAL_DMA_IRQHandler+0xeb0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <HAL_DMA_IRQHandler+0xe1a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a2f      	ldr	r2, [pc, #188]	; (8005310 <HAL_DMA_IRQHandler+0xeb4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00e      	beq.n	8005276 <HAL_DMA_IRQHandler+0xe1a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a2d      	ldr	r2, [pc, #180]	; (8005314 <HAL_DMA_IRQHandler+0xeb8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d009      	beq.n	8005276 <HAL_DMA_IRQHandler+0xe1a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a2c      	ldr	r2, [pc, #176]	; (8005318 <HAL_DMA_IRQHandler+0xebc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d004      	beq.n	8005276 <HAL_DMA_IRQHandler+0xe1a>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a2a      	ldr	r2, [pc, #168]	; (800531c <HAL_DMA_IRQHandler+0xec0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d108      	bne.n	8005288 <HAL_DMA_IRQHandler+0xe2c>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 021c 	bic.w	r2, r2, #28
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	e007      	b.n	8005298 <HAL_DMA_IRQHandler+0xe3c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 020e 	bic.w	r2, r2, #14
 8005296:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	2201      	movs	r2, #1
 80052a2:	409a      	lsls	r2, r3
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d009      	beq.n	80052da <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	4798      	blx	r3
 80052ce:	e004      	b.n	80052da <HAL_DMA_IRQHandler+0xe7e>
          return;
 80052d0:	bf00      	nop
 80052d2:	e002      	b.n	80052da <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052d4:	bf00      	nop
 80052d6:	e000      	b.n	80052da <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80052da:	3728      	adds	r7, #40	; 0x28
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40020010 	.word	0x40020010
 80052e4:	40020028 	.word	0x40020028
 80052e8:	40020040 	.word	0x40020040
 80052ec:	40020058 	.word	0x40020058
 80052f0:	40020070 	.word	0x40020070
 80052f4:	40020088 	.word	0x40020088
 80052f8:	400200a0 	.word	0x400200a0
 80052fc:	400200b8 	.word	0x400200b8
 8005300:	40020410 	.word	0x40020410
 8005304:	40020428 	.word	0x40020428
 8005308:	40020440 	.word	0x40020440
 800530c:	40020458 	.word	0x40020458
 8005310:	40020470 	.word	0x40020470
 8005314:	40020488 	.word	0x40020488
 8005318:	400204a0 	.word	0x400204a0
 800531c:	400204b8 	.word	0x400204b8

08005320 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005332:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005338:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a7f      	ldr	r2, [pc, #508]	; (800553c <DMA_SetConfig+0x21c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d072      	beq.n	800542a <DMA_SetConfig+0x10a>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a7d      	ldr	r2, [pc, #500]	; (8005540 <DMA_SetConfig+0x220>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d06d      	beq.n	800542a <DMA_SetConfig+0x10a>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a7c      	ldr	r2, [pc, #496]	; (8005544 <DMA_SetConfig+0x224>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d068      	beq.n	800542a <DMA_SetConfig+0x10a>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a7a      	ldr	r2, [pc, #488]	; (8005548 <DMA_SetConfig+0x228>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d063      	beq.n	800542a <DMA_SetConfig+0x10a>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a79      	ldr	r2, [pc, #484]	; (800554c <DMA_SetConfig+0x22c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d05e      	beq.n	800542a <DMA_SetConfig+0x10a>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a77      	ldr	r2, [pc, #476]	; (8005550 <DMA_SetConfig+0x230>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d059      	beq.n	800542a <DMA_SetConfig+0x10a>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a76      	ldr	r2, [pc, #472]	; (8005554 <DMA_SetConfig+0x234>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d054      	beq.n	800542a <DMA_SetConfig+0x10a>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a74      	ldr	r2, [pc, #464]	; (8005558 <DMA_SetConfig+0x238>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d04f      	beq.n	800542a <DMA_SetConfig+0x10a>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a73      	ldr	r2, [pc, #460]	; (800555c <DMA_SetConfig+0x23c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d04a      	beq.n	800542a <DMA_SetConfig+0x10a>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a71      	ldr	r2, [pc, #452]	; (8005560 <DMA_SetConfig+0x240>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d045      	beq.n	800542a <DMA_SetConfig+0x10a>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a70      	ldr	r2, [pc, #448]	; (8005564 <DMA_SetConfig+0x244>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d040      	beq.n	800542a <DMA_SetConfig+0x10a>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a6e      	ldr	r2, [pc, #440]	; (8005568 <DMA_SetConfig+0x248>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d03b      	beq.n	800542a <DMA_SetConfig+0x10a>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a6d      	ldr	r2, [pc, #436]	; (800556c <DMA_SetConfig+0x24c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d036      	beq.n	800542a <DMA_SetConfig+0x10a>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a6b      	ldr	r2, [pc, #428]	; (8005570 <DMA_SetConfig+0x250>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d031      	beq.n	800542a <DMA_SetConfig+0x10a>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a6a      	ldr	r2, [pc, #424]	; (8005574 <DMA_SetConfig+0x254>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d02c      	beq.n	800542a <DMA_SetConfig+0x10a>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a68      	ldr	r2, [pc, #416]	; (8005578 <DMA_SetConfig+0x258>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d027      	beq.n	800542a <DMA_SetConfig+0x10a>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a67      	ldr	r2, [pc, #412]	; (800557c <DMA_SetConfig+0x25c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d022      	beq.n	800542a <DMA_SetConfig+0x10a>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a65      	ldr	r2, [pc, #404]	; (8005580 <DMA_SetConfig+0x260>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d01d      	beq.n	800542a <DMA_SetConfig+0x10a>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a64      	ldr	r2, [pc, #400]	; (8005584 <DMA_SetConfig+0x264>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d018      	beq.n	800542a <DMA_SetConfig+0x10a>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a62      	ldr	r2, [pc, #392]	; (8005588 <DMA_SetConfig+0x268>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d013      	beq.n	800542a <DMA_SetConfig+0x10a>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a61      	ldr	r2, [pc, #388]	; (800558c <DMA_SetConfig+0x26c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00e      	beq.n	800542a <DMA_SetConfig+0x10a>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a5f      	ldr	r2, [pc, #380]	; (8005590 <DMA_SetConfig+0x270>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d009      	beq.n	800542a <DMA_SetConfig+0x10a>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a5e      	ldr	r2, [pc, #376]	; (8005594 <DMA_SetConfig+0x274>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d004      	beq.n	800542a <DMA_SetConfig+0x10a>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a5c      	ldr	r2, [pc, #368]	; (8005598 <DMA_SetConfig+0x278>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d101      	bne.n	800542e <DMA_SetConfig+0x10e>
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <DMA_SetConfig+0x110>
 800542e:	2300      	movs	r3, #0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00d      	beq.n	8005450 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800543c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d004      	beq.n	8005450 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800544e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a39      	ldr	r2, [pc, #228]	; (800553c <DMA_SetConfig+0x21c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d04a      	beq.n	80054f0 <DMA_SetConfig+0x1d0>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a38      	ldr	r2, [pc, #224]	; (8005540 <DMA_SetConfig+0x220>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d045      	beq.n	80054f0 <DMA_SetConfig+0x1d0>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a36      	ldr	r2, [pc, #216]	; (8005544 <DMA_SetConfig+0x224>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d040      	beq.n	80054f0 <DMA_SetConfig+0x1d0>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a35      	ldr	r2, [pc, #212]	; (8005548 <DMA_SetConfig+0x228>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d03b      	beq.n	80054f0 <DMA_SetConfig+0x1d0>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a33      	ldr	r2, [pc, #204]	; (800554c <DMA_SetConfig+0x22c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d036      	beq.n	80054f0 <DMA_SetConfig+0x1d0>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a32      	ldr	r2, [pc, #200]	; (8005550 <DMA_SetConfig+0x230>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d031      	beq.n	80054f0 <DMA_SetConfig+0x1d0>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a30      	ldr	r2, [pc, #192]	; (8005554 <DMA_SetConfig+0x234>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d02c      	beq.n	80054f0 <DMA_SetConfig+0x1d0>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a2f      	ldr	r2, [pc, #188]	; (8005558 <DMA_SetConfig+0x238>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d027      	beq.n	80054f0 <DMA_SetConfig+0x1d0>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a2d      	ldr	r2, [pc, #180]	; (800555c <DMA_SetConfig+0x23c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d022      	beq.n	80054f0 <DMA_SetConfig+0x1d0>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a2c      	ldr	r2, [pc, #176]	; (8005560 <DMA_SetConfig+0x240>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d01d      	beq.n	80054f0 <DMA_SetConfig+0x1d0>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2a      	ldr	r2, [pc, #168]	; (8005564 <DMA_SetConfig+0x244>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d018      	beq.n	80054f0 <DMA_SetConfig+0x1d0>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a29      	ldr	r2, [pc, #164]	; (8005568 <DMA_SetConfig+0x248>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d013      	beq.n	80054f0 <DMA_SetConfig+0x1d0>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a27      	ldr	r2, [pc, #156]	; (800556c <DMA_SetConfig+0x24c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00e      	beq.n	80054f0 <DMA_SetConfig+0x1d0>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a26      	ldr	r2, [pc, #152]	; (8005570 <DMA_SetConfig+0x250>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d009      	beq.n	80054f0 <DMA_SetConfig+0x1d0>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a24      	ldr	r2, [pc, #144]	; (8005574 <DMA_SetConfig+0x254>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <DMA_SetConfig+0x1d0>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a23      	ldr	r2, [pc, #140]	; (8005578 <DMA_SetConfig+0x258>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d101      	bne.n	80054f4 <DMA_SetConfig+0x1d4>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <DMA_SetConfig+0x1d6>
 80054f4:	2300      	movs	r3, #0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d059      	beq.n	80055ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fe:	f003 031f 	and.w	r3, r3, #31
 8005502:	223f      	movs	r2, #63	; 0x3f
 8005504:	409a      	lsls	r2, r3
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005518:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b40      	cmp	r3, #64	; 0x40
 8005528:	d138      	bne.n	800559c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800553a:	e0ae      	b.n	800569a <DMA_SetConfig+0x37a>
 800553c:	40020010 	.word	0x40020010
 8005540:	40020028 	.word	0x40020028
 8005544:	40020040 	.word	0x40020040
 8005548:	40020058 	.word	0x40020058
 800554c:	40020070 	.word	0x40020070
 8005550:	40020088 	.word	0x40020088
 8005554:	400200a0 	.word	0x400200a0
 8005558:	400200b8 	.word	0x400200b8
 800555c:	40020410 	.word	0x40020410
 8005560:	40020428 	.word	0x40020428
 8005564:	40020440 	.word	0x40020440
 8005568:	40020458 	.word	0x40020458
 800556c:	40020470 	.word	0x40020470
 8005570:	40020488 	.word	0x40020488
 8005574:	400204a0 	.word	0x400204a0
 8005578:	400204b8 	.word	0x400204b8
 800557c:	58025408 	.word	0x58025408
 8005580:	5802541c 	.word	0x5802541c
 8005584:	58025430 	.word	0x58025430
 8005588:	58025444 	.word	0x58025444
 800558c:	58025458 	.word	0x58025458
 8005590:	5802546c 	.word	0x5802546c
 8005594:	58025480 	.word	0x58025480
 8005598:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	60da      	str	r2, [r3, #12]
}
 80055ac:	e075      	b.n	800569a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a3d      	ldr	r2, [pc, #244]	; (80056a8 <DMA_SetConfig+0x388>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d04a      	beq.n	800564e <DMA_SetConfig+0x32e>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a3b      	ldr	r2, [pc, #236]	; (80056ac <DMA_SetConfig+0x38c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d045      	beq.n	800564e <DMA_SetConfig+0x32e>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a3a      	ldr	r2, [pc, #232]	; (80056b0 <DMA_SetConfig+0x390>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d040      	beq.n	800564e <DMA_SetConfig+0x32e>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a38      	ldr	r2, [pc, #224]	; (80056b4 <DMA_SetConfig+0x394>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d03b      	beq.n	800564e <DMA_SetConfig+0x32e>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a37      	ldr	r2, [pc, #220]	; (80056b8 <DMA_SetConfig+0x398>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d036      	beq.n	800564e <DMA_SetConfig+0x32e>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a35      	ldr	r2, [pc, #212]	; (80056bc <DMA_SetConfig+0x39c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d031      	beq.n	800564e <DMA_SetConfig+0x32e>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a34      	ldr	r2, [pc, #208]	; (80056c0 <DMA_SetConfig+0x3a0>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d02c      	beq.n	800564e <DMA_SetConfig+0x32e>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a32      	ldr	r2, [pc, #200]	; (80056c4 <DMA_SetConfig+0x3a4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d027      	beq.n	800564e <DMA_SetConfig+0x32e>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a31      	ldr	r2, [pc, #196]	; (80056c8 <DMA_SetConfig+0x3a8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d022      	beq.n	800564e <DMA_SetConfig+0x32e>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a2f      	ldr	r2, [pc, #188]	; (80056cc <DMA_SetConfig+0x3ac>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d01d      	beq.n	800564e <DMA_SetConfig+0x32e>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a2e      	ldr	r2, [pc, #184]	; (80056d0 <DMA_SetConfig+0x3b0>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d018      	beq.n	800564e <DMA_SetConfig+0x32e>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a2c      	ldr	r2, [pc, #176]	; (80056d4 <DMA_SetConfig+0x3b4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d013      	beq.n	800564e <DMA_SetConfig+0x32e>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a2b      	ldr	r2, [pc, #172]	; (80056d8 <DMA_SetConfig+0x3b8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00e      	beq.n	800564e <DMA_SetConfig+0x32e>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a29      	ldr	r2, [pc, #164]	; (80056dc <DMA_SetConfig+0x3bc>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d009      	beq.n	800564e <DMA_SetConfig+0x32e>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a28      	ldr	r2, [pc, #160]	; (80056e0 <DMA_SetConfig+0x3c0>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d004      	beq.n	800564e <DMA_SetConfig+0x32e>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a26      	ldr	r2, [pc, #152]	; (80056e4 <DMA_SetConfig+0x3c4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d101      	bne.n	8005652 <DMA_SetConfig+0x332>
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <DMA_SetConfig+0x334>
 8005652:	2300      	movs	r3, #0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d020      	beq.n	800569a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565c:	f003 031f 	and.w	r3, r3, #31
 8005660:	2201      	movs	r2, #1
 8005662:	409a      	lsls	r2, r3
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2b40      	cmp	r3, #64	; 0x40
 8005676:	d108      	bne.n	800568a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	60da      	str	r2, [r3, #12]
}
 8005688:	e007      	b.n	800569a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	60da      	str	r2, [r3, #12]
}
 800569a:	bf00      	nop
 800569c:	371c      	adds	r7, #28
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	48022c08 	.word	0x48022c08
 80056ac:	48022c1c 	.word	0x48022c1c
 80056b0:	48022c30 	.word	0x48022c30
 80056b4:	48022c44 	.word	0x48022c44
 80056b8:	48022c58 	.word	0x48022c58
 80056bc:	48022c6c 	.word	0x48022c6c
 80056c0:	48022c80 	.word	0x48022c80
 80056c4:	48022c94 	.word	0x48022c94
 80056c8:	58025408 	.word	0x58025408
 80056cc:	5802541c 	.word	0x5802541c
 80056d0:	58025430 	.word	0x58025430
 80056d4:	58025444 	.word	0x58025444
 80056d8:	58025458 	.word	0x58025458
 80056dc:	5802546c 	.word	0x5802546c
 80056e0:	58025480 	.word	0x58025480
 80056e4:	58025494 	.word	0x58025494

080056e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a42      	ldr	r2, [pc, #264]	; (8005800 <DMA_CalcBaseAndBitshift+0x118>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d04a      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a41      	ldr	r2, [pc, #260]	; (8005804 <DMA_CalcBaseAndBitshift+0x11c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d045      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a3f      	ldr	r2, [pc, #252]	; (8005808 <DMA_CalcBaseAndBitshift+0x120>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d040      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a3e      	ldr	r2, [pc, #248]	; (800580c <DMA_CalcBaseAndBitshift+0x124>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d03b      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a3c      	ldr	r2, [pc, #240]	; (8005810 <DMA_CalcBaseAndBitshift+0x128>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d036      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a3b      	ldr	r2, [pc, #236]	; (8005814 <DMA_CalcBaseAndBitshift+0x12c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d031      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a39      	ldr	r2, [pc, #228]	; (8005818 <DMA_CalcBaseAndBitshift+0x130>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d02c      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a38      	ldr	r2, [pc, #224]	; (800581c <DMA_CalcBaseAndBitshift+0x134>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d027      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a36      	ldr	r2, [pc, #216]	; (8005820 <DMA_CalcBaseAndBitshift+0x138>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d022      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a35      	ldr	r2, [pc, #212]	; (8005824 <DMA_CalcBaseAndBitshift+0x13c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d01d      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a33      	ldr	r2, [pc, #204]	; (8005828 <DMA_CalcBaseAndBitshift+0x140>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d018      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a32      	ldr	r2, [pc, #200]	; (800582c <DMA_CalcBaseAndBitshift+0x144>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d013      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a30      	ldr	r2, [pc, #192]	; (8005830 <DMA_CalcBaseAndBitshift+0x148>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00e      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a2f      	ldr	r2, [pc, #188]	; (8005834 <DMA_CalcBaseAndBitshift+0x14c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d009      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a2d      	ldr	r2, [pc, #180]	; (8005838 <DMA_CalcBaseAndBitshift+0x150>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <DMA_CalcBaseAndBitshift+0xa8>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a2c      	ldr	r2, [pc, #176]	; (800583c <DMA_CalcBaseAndBitshift+0x154>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d101      	bne.n	8005794 <DMA_CalcBaseAndBitshift+0xac>
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <DMA_CalcBaseAndBitshift+0xae>
 8005794:	2300      	movs	r3, #0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d024      	beq.n	80057e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	3b10      	subs	r3, #16
 80057a2:	4a27      	ldr	r2, [pc, #156]	; (8005840 <DMA_CalcBaseAndBitshift+0x158>)
 80057a4:	fba2 2303 	umull	r2, r3, r2, r3
 80057a8:	091b      	lsrs	r3, r3, #4
 80057aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	4a24      	ldr	r2, [pc, #144]	; (8005844 <DMA_CalcBaseAndBitshift+0x15c>)
 80057b4:	5cd3      	ldrb	r3, [r2, r3]
 80057b6:	461a      	mov	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d908      	bls.n	80057d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	4b1f      	ldr	r3, [pc, #124]	; (8005848 <DMA_CalcBaseAndBitshift+0x160>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	1d1a      	adds	r2, r3, #4
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	659a      	str	r2, [r3, #88]	; 0x58
 80057d2:	e00d      	b.n	80057f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	4b1b      	ldr	r3, [pc, #108]	; (8005848 <DMA_CalcBaseAndBitshift+0x160>)
 80057dc:	4013      	ands	r3, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6593      	str	r3, [r2, #88]	; 0x58
 80057e2:	e005      	b.n	80057f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	40020010 	.word	0x40020010
 8005804:	40020028 	.word	0x40020028
 8005808:	40020040 	.word	0x40020040
 800580c:	40020058 	.word	0x40020058
 8005810:	40020070 	.word	0x40020070
 8005814:	40020088 	.word	0x40020088
 8005818:	400200a0 	.word	0x400200a0
 800581c:	400200b8 	.word	0x400200b8
 8005820:	40020410 	.word	0x40020410
 8005824:	40020428 	.word	0x40020428
 8005828:	40020440 	.word	0x40020440
 800582c:	40020458 	.word	0x40020458
 8005830:	40020470 	.word	0x40020470
 8005834:	40020488 	.word	0x40020488
 8005838:	400204a0 	.word	0x400204a0
 800583c:	400204b8 	.word	0x400204b8
 8005840:	aaaaaaab 	.word	0xaaaaaaab
 8005844:	0800add8 	.word	0x0800add8
 8005848:	fffffc00 	.word	0xfffffc00

0800584c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d120      	bne.n	80058a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005864:	2b03      	cmp	r3, #3
 8005866:	d858      	bhi.n	800591a <DMA_CheckFifoParam+0xce>
 8005868:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <DMA_CheckFifoParam+0x24>)
 800586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586e:	bf00      	nop
 8005870:	08005881 	.word	0x08005881
 8005874:	08005893 	.word	0x08005893
 8005878:	08005881 	.word	0x08005881
 800587c:	0800591b 	.word	0x0800591b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d048      	beq.n	800591e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005890:	e045      	b.n	800591e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800589a:	d142      	bne.n	8005922 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058a0:	e03f      	b.n	8005922 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058aa:	d123      	bne.n	80058f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d838      	bhi.n	8005926 <DMA_CheckFifoParam+0xda>
 80058b4:	a201      	add	r2, pc, #4	; (adr r2, 80058bc <DMA_CheckFifoParam+0x70>)
 80058b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ba:	bf00      	nop
 80058bc:	080058cd 	.word	0x080058cd
 80058c0:	080058d3 	.word	0x080058d3
 80058c4:	080058cd 	.word	0x080058cd
 80058c8:	080058e5 	.word	0x080058e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	73fb      	strb	r3, [r7, #15]
        break;
 80058d0:	e030      	b.n	8005934 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d025      	beq.n	800592a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058e2:	e022      	b.n	800592a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058ec:	d11f      	bne.n	800592e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058f2:	e01c      	b.n	800592e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d902      	bls.n	8005902 <DMA_CheckFifoParam+0xb6>
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d003      	beq.n	8005908 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005900:	e018      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	73fb      	strb	r3, [r7, #15]
        break;
 8005906:	e015      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00e      	beq.n	8005932 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]
    break;
 8005918:	e00b      	b.n	8005932 <DMA_CheckFifoParam+0xe6>
        break;
 800591a:	bf00      	nop
 800591c:	e00a      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
        break;
 800591e:	bf00      	nop
 8005920:	e008      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
        break;
 8005922:	bf00      	nop
 8005924:	e006      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
        break;
 8005926:	bf00      	nop
 8005928:	e004      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
        break;
 800592a:	bf00      	nop
 800592c:	e002      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
        break;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <DMA_CheckFifoParam+0xe8>
    break;
 8005932:	bf00      	nop
    }
  }

  return status;
 8005934:	7bfb      	ldrb	r3, [r7, #15]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop

08005944 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a38      	ldr	r2, [pc, #224]	; (8005a38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d022      	beq.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a36      	ldr	r2, [pc, #216]	; (8005a3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d01d      	beq.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a35      	ldr	r2, [pc, #212]	; (8005a40 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d018      	beq.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a33      	ldr	r2, [pc, #204]	; (8005a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d013      	beq.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a32      	ldr	r2, [pc, #200]	; (8005a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00e      	beq.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a30      	ldr	r2, [pc, #192]	; (8005a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d009      	beq.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a2f      	ldr	r2, [pc, #188]	; (8005a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d004      	beq.n	80059a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a2d      	ldr	r2, [pc, #180]	; (8005a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d101      	bne.n	80059a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80059a6:	2300      	movs	r3, #0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01a      	beq.n	80059e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	3b08      	subs	r3, #8
 80059b4:	4a28      	ldr	r2, [pc, #160]	; (8005a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	091b      	lsrs	r3, r3, #4
 80059bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	4b26      	ldr	r3, [pc, #152]	; (8005a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	461a      	mov	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a24      	ldr	r2, [pc, #144]	; (8005a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80059d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	2201      	movs	r2, #1
 80059da:	409a      	lsls	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80059e0:	e024      	b.n	8005a2c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	3b10      	subs	r3, #16
 80059ea:	4a1e      	ldr	r2, [pc, #120]	; (8005a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80059ec:	fba2 2303 	umull	r2, r3, r2, r3
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4a1c      	ldr	r2, [pc, #112]	; (8005a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d806      	bhi.n	8005a0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4a1b      	ldr	r2, [pc, #108]	; (8005a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d902      	bls.n	8005a0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3308      	adds	r3, #8
 8005a08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4b18      	ldr	r3, [pc, #96]	; (8005a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	461a      	mov	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a16      	ldr	r2, [pc, #88]	; (8005a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a1c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f003 031f 	and.w	r3, r3, #31
 8005a24:	2201      	movs	r2, #1
 8005a26:	409a      	lsls	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a2c:	bf00      	nop
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	58025408 	.word	0x58025408
 8005a3c:	5802541c 	.word	0x5802541c
 8005a40:	58025430 	.word	0x58025430
 8005a44:	58025444 	.word	0x58025444
 8005a48:	58025458 	.word	0x58025458
 8005a4c:	5802546c 	.word	0x5802546c
 8005a50:	58025480 	.word	0x58025480
 8005a54:	58025494 	.word	0x58025494
 8005a58:	cccccccd 	.word	0xcccccccd
 8005a5c:	16009600 	.word	0x16009600
 8005a60:	58025880 	.word	0x58025880
 8005a64:	aaaaaaab 	.word	0xaaaaaaab
 8005a68:	400204b8 	.word	0x400204b8
 8005a6c:	4002040f 	.word	0x4002040f
 8005a70:	10008200 	.word	0x10008200
 8005a74:	40020880 	.word	0x40020880

08005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d04a      	beq.n	8005b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d847      	bhi.n	8005b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a25      	ldr	r2, [pc, #148]	; (8005b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d022      	beq.n	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a24      	ldr	r2, [pc, #144]	; (8005b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d01d      	beq.n	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a22      	ldr	r2, [pc, #136]	; (8005b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d018      	beq.n	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a21      	ldr	r2, [pc, #132]	; (8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d013      	beq.n	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1f      	ldr	r2, [pc, #124]	; (8005b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d00e      	beq.n	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a1e      	ldr	r2, [pc, #120]	; (8005b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d009      	beq.n	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d004      	beq.n	8005ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a1b      	ldr	r2, [pc, #108]	; (8005b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d101      	bne.n	8005ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4b17      	ldr	r3, [pc, #92]	; (8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	461a      	mov	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005b00:	671a      	str	r2, [r3, #112]	; 0x70
 8005b02:	e009      	b.n	8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4b14      	ldr	r3, [pc, #80]	; (8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a11      	ldr	r2, [pc, #68]	; (8005b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b16:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	409a      	lsls	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005b24:	bf00      	nop
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	58025408 	.word	0x58025408
 8005b34:	5802541c 	.word	0x5802541c
 8005b38:	58025430 	.word	0x58025430
 8005b3c:	58025444 	.word	0x58025444
 8005b40:	58025458 	.word	0x58025458
 8005b44:	5802546c 	.word	0x5802546c
 8005b48:	58025480 	.word	0x58025480
 8005b4c:	58025494 	.word	0x58025494
 8005b50:	1600963f 	.word	0x1600963f
 8005b54:	58025940 	.word	0x58025940
 8005b58:	1000823f 	.word	0x1000823f
 8005b5c:	40020940 	.word	0x40020940

08005b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b089      	sub	sp, #36	; 0x24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b6e:	4b89      	ldr	r3, [pc, #548]	; (8005d94 <HAL_GPIO_Init+0x234>)
 8005b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b72:	e194      	b.n	8005e9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	2101      	movs	r1, #1
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b80:	4013      	ands	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 8186 	beq.w	8005e98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f003 0303 	and.w	r3, r3, #3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d005      	beq.n	8005ba4 <HAL_GPIO_Init+0x44>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d130      	bne.n	8005c06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	2203      	movs	r2, #3
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bda:	2201      	movs	r2, #1
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	091b      	lsrs	r3, r3, #4
 8005bf0:	f003 0201 	and.w	r2, r3, #1
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d017      	beq.n	8005c42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c22:	43db      	mvns	r3, r3
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	4013      	ands	r3, r2
 8005c28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	fa02 f303 	lsl.w	r3, r2, r3
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d123      	bne.n	8005c96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	08da      	lsrs	r2, r3, #3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3208      	adds	r2, #8
 8005c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	220f      	movs	r2, #15
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	08da      	lsrs	r2, r3, #3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3208      	adds	r2, #8
 8005c90:	69b9      	ldr	r1, [r7, #24]
 8005c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	2203      	movs	r2, #3
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	43db      	mvns	r3, r3
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4013      	ands	r3, r2
 8005cac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f003 0203 	and.w	r2, r3, #3
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 80e0 	beq.w	8005e98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cd8:	4b2f      	ldr	r3, [pc, #188]	; (8005d98 <HAL_GPIO_Init+0x238>)
 8005cda:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005cde:	4a2e      	ldr	r2, [pc, #184]	; (8005d98 <HAL_GPIO_Init+0x238>)
 8005ce0:	f043 0302 	orr.w	r3, r3, #2
 8005ce4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005ce8:	4b2b      	ldr	r3, [pc, #172]	; (8005d98 <HAL_GPIO_Init+0x238>)
 8005cea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cf6:	4a29      	ldr	r2, [pc, #164]	; (8005d9c <HAL_GPIO_Init+0x23c>)
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	089b      	lsrs	r3, r3, #2
 8005cfc:	3302      	adds	r3, #2
 8005cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	220f      	movs	r2, #15
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	43db      	mvns	r3, r3
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	4013      	ands	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a20      	ldr	r2, [pc, #128]	; (8005da0 <HAL_GPIO_Init+0x240>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d052      	beq.n	8005dc8 <HAL_GPIO_Init+0x268>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a1f      	ldr	r2, [pc, #124]	; (8005da4 <HAL_GPIO_Init+0x244>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d031      	beq.n	8005d8e <HAL_GPIO_Init+0x22e>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a1e      	ldr	r2, [pc, #120]	; (8005da8 <HAL_GPIO_Init+0x248>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d02b      	beq.n	8005d8a <HAL_GPIO_Init+0x22a>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a1d      	ldr	r2, [pc, #116]	; (8005dac <HAL_GPIO_Init+0x24c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d025      	beq.n	8005d86 <HAL_GPIO_Init+0x226>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	; (8005db0 <HAL_GPIO_Init+0x250>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01f      	beq.n	8005d82 <HAL_GPIO_Init+0x222>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a1b      	ldr	r2, [pc, #108]	; (8005db4 <HAL_GPIO_Init+0x254>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d019      	beq.n	8005d7e <HAL_GPIO_Init+0x21e>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a1a      	ldr	r2, [pc, #104]	; (8005db8 <HAL_GPIO_Init+0x258>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d013      	beq.n	8005d7a <HAL_GPIO_Init+0x21a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a19      	ldr	r2, [pc, #100]	; (8005dbc <HAL_GPIO_Init+0x25c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00d      	beq.n	8005d76 <HAL_GPIO_Init+0x216>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a18      	ldr	r2, [pc, #96]	; (8005dc0 <HAL_GPIO_Init+0x260>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d007      	beq.n	8005d72 <HAL_GPIO_Init+0x212>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a17      	ldr	r2, [pc, #92]	; (8005dc4 <HAL_GPIO_Init+0x264>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d101      	bne.n	8005d6e <HAL_GPIO_Init+0x20e>
 8005d6a:	2309      	movs	r3, #9
 8005d6c:	e02d      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d6e:	230a      	movs	r3, #10
 8005d70:	e02b      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d72:	2308      	movs	r3, #8
 8005d74:	e029      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d76:	2307      	movs	r3, #7
 8005d78:	e027      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d7a:	2306      	movs	r3, #6
 8005d7c:	e025      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d7e:	2305      	movs	r3, #5
 8005d80:	e023      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d82:	2304      	movs	r3, #4
 8005d84:	e021      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d86:	2303      	movs	r3, #3
 8005d88:	e01f      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e01d      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e01b      	b.n	8005dca <HAL_GPIO_Init+0x26a>
 8005d92:	bf00      	nop
 8005d94:	58000080 	.word	0x58000080
 8005d98:	58024400 	.word	0x58024400
 8005d9c:	58000400 	.word	0x58000400
 8005da0:	58020000 	.word	0x58020000
 8005da4:	58020400 	.word	0x58020400
 8005da8:	58020800 	.word	0x58020800
 8005dac:	58020c00 	.word	0x58020c00
 8005db0:	58021000 	.word	0x58021000
 8005db4:	58021400 	.word	0x58021400
 8005db8:	58021800 	.word	0x58021800
 8005dbc:	58021c00 	.word	0x58021c00
 8005dc0:	58022000 	.word	0x58022000
 8005dc4:	58022400 	.word	0x58022400
 8005dc8:	2300      	movs	r3, #0
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	f002 0203 	and.w	r2, r2, #3
 8005dd0:	0092      	lsls	r2, r2, #2
 8005dd2:	4093      	lsls	r3, r2
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dda:	4938      	ldr	r1, [pc, #224]	; (8005ebc <HAL_GPIO_Init+0x35c>)
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	089b      	lsrs	r3, r3, #2
 8005de0:	3302      	adds	r3, #2
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	43db      	mvns	r3, r3
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	4013      	ands	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	43db      	mvns	r3, r3
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	4013      	ands	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4013      	ands	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	69ba      	ldr	r2, [r7, #24]
 8005e6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	43db      	mvns	r3, r3
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f47f ae63 	bne.w	8005b74 <HAL_GPIO_Init+0x14>
  }
}
 8005eae:	bf00      	nop
 8005eb0:	bf00      	nop
 8005eb2:	3724      	adds	r7, #36	; 0x24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	58000400 	.word	0x58000400

08005ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	807b      	strh	r3, [r7, #2]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ed0:	787b      	ldrb	r3, [r7, #1]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ed6:	887a      	ldrh	r2, [r7, #2]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005edc:	e003      	b.n	8005ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ede:	887b      	ldrh	r3, [r7, #2]
 8005ee0:	041a      	lsls	r2, r3, #16
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	619a      	str	r2, [r3, #24]
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
	...

08005ef4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005efc:	4b29      	ldr	r3, [pc, #164]	; (8005fa4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	2b06      	cmp	r3, #6
 8005f06:	d00a      	beq.n	8005f1e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f08:	4b26      	ldr	r3, [pc, #152]	; (8005fa4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d001      	beq.n	8005f1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e040      	b.n	8005f9c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e03e      	b.n	8005f9c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f1e:	4b21      	ldr	r3, [pc, #132]	; (8005fa4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005f26:	491f      	ldr	r1, [pc, #124]	; (8005fa4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f2e:	f7fb ff11 	bl	8001d54 <HAL_GetTick>
 8005f32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f34:	e009      	b.n	8005f4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f36:	f7fb ff0d 	bl	8001d54 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f44:	d901      	bls.n	8005f4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e028      	b.n	8005f9c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f4a:	4b16      	ldr	r3, [pc, #88]	; (8005fa4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f56:	d1ee      	bne.n	8005f36 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b1e      	cmp	r3, #30
 8005f5c:	d008      	beq.n	8005f70 <HAL_PWREx_ConfigSupply+0x7c>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b2e      	cmp	r3, #46	; 0x2e
 8005f62:	d005      	beq.n	8005f70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b1d      	cmp	r3, #29
 8005f68:	d002      	beq.n	8005f70 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b2d      	cmp	r3, #45	; 0x2d
 8005f6e:	d114      	bne.n	8005f9a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005f70:	f7fb fef0 	bl	8001d54 <HAL_GetTick>
 8005f74:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005f76:	e009      	b.n	8005f8c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f78:	f7fb feec 	bl	8001d54 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f86:	d901      	bls.n	8005f8c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e007      	b.n	8005f9c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005f8c:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f98:	d1ee      	bne.n	8005f78 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	58024800 	.word	0x58024800

08005fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08c      	sub	sp, #48	; 0x30
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e3f4      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f000 80b3 	beq.w	800612e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fc8:	4b95      	ldr	r3, [pc, #596]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fd2:	4b93      	ldr	r3, [pc, #588]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	2b10      	cmp	r3, #16
 8005fdc:	d007      	beq.n	8005fee <HAL_RCC_OscConfig+0x46>
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	2b18      	cmp	r3, #24
 8005fe2:	d112      	bne.n	800600a <HAL_RCC_OscConfig+0x62>
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d10d      	bne.n	800600a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fee:	4b8c      	ldr	r3, [pc, #560]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 8098 	beq.w	800612c <HAL_RCC_OscConfig+0x184>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	f040 8093 	bne.w	800612c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e3cc      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006012:	d106      	bne.n	8006022 <HAL_RCC_OscConfig+0x7a>
 8006014:	4b82      	ldr	r3, [pc, #520]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a81      	ldr	r2, [pc, #516]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 800601a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	e058      	b.n	80060d4 <HAL_RCC_OscConfig+0x12c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d112      	bne.n	8006050 <HAL_RCC_OscConfig+0xa8>
 800602a:	4b7d      	ldr	r3, [pc, #500]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a7c      	ldr	r2, [pc, #496]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	4b7a      	ldr	r3, [pc, #488]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a79      	ldr	r2, [pc, #484]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 800603c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006040:	6013      	str	r3, [r2, #0]
 8006042:	4b77      	ldr	r3, [pc, #476]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a76      	ldr	r2, [pc, #472]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	e041      	b.n	80060d4 <HAL_RCC_OscConfig+0x12c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006058:	d112      	bne.n	8006080 <HAL_RCC_OscConfig+0xd8>
 800605a:	4b71      	ldr	r3, [pc, #452]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a70      	ldr	r2, [pc, #448]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	4b6e      	ldr	r3, [pc, #440]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a6d      	ldr	r2, [pc, #436]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 800606c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	4b6b      	ldr	r3, [pc, #428]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a6a      	ldr	r2, [pc, #424]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	e029      	b.n	80060d4 <HAL_RCC_OscConfig+0x12c>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8006088:	d112      	bne.n	80060b0 <HAL_RCC_OscConfig+0x108>
 800608a:	4b65      	ldr	r3, [pc, #404]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a64      	ldr	r2, [pc, #400]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	4b62      	ldr	r3, [pc, #392]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a61      	ldr	r2, [pc, #388]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 800609c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	4b5f      	ldr	r3, [pc, #380]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a5e      	ldr	r2, [pc, #376]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 80060a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	e011      	b.n	80060d4 <HAL_RCC_OscConfig+0x12c>
 80060b0:	4b5b      	ldr	r3, [pc, #364]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a5a      	ldr	r2, [pc, #360]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 80060b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	4b58      	ldr	r3, [pc, #352]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a57      	ldr	r2, [pc, #348]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 80060c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060c6:	6013      	str	r3, [r2, #0]
 80060c8:	4b55      	ldr	r3, [pc, #340]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a54      	ldr	r2, [pc, #336]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 80060ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80060d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d013      	beq.n	8006104 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060dc:	f7fb fe3a 	bl	8001d54 <HAL_GetTick>
 80060e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060e4:	f7fb fe36 	bl	8001d54 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b64      	cmp	r3, #100	; 0x64
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e356      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060f6:	4b4a      	ldr	r3, [pc, #296]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0f0      	beq.n	80060e4 <HAL_RCC_OscConfig+0x13c>
 8006102:	e014      	b.n	800612e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006104:	f7fb fe26 	bl	8001d54 <HAL_GetTick>
 8006108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800610c:	f7fb fe22 	bl	8001d54 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b64      	cmp	r3, #100	; 0x64
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e342      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800611e:	4b40      	ldr	r3, [pc, #256]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1f0      	bne.n	800610c <HAL_RCC_OscConfig+0x164>
 800612a:	e000      	b.n	800612e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800612c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 808d 	beq.w	8006256 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800613c:	4b38      	ldr	r3, [pc, #224]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006144:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006146:	4b36      	ldr	r3, [pc, #216]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <HAL_RCC_OscConfig+0x1ba>
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	2b18      	cmp	r3, #24
 8006156:	d137      	bne.n	80061c8 <HAL_RCC_OscConfig+0x220>
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d132      	bne.n	80061c8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006162:	4b2f      	ldr	r3, [pc, #188]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	d005      	beq.n	800617a <HAL_RCC_OscConfig+0x1d2>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e314      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800617a:	4b29      	ldr	r3, [pc, #164]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f023 0219 	bic.w	r2, r3, #25
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	4926      	ldr	r1, [pc, #152]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006188:	4313      	orrs	r3, r2
 800618a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800618c:	f7fb fde2 	bl	8001d54 <HAL_GetTick>
 8006190:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006194:	f7fb fdde 	bl	8001d54 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e2fe      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061a6:	4b1e      	ldr	r3, [pc, #120]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0f0      	beq.n	8006194 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061b2:	4b1b      	ldr	r3, [pc, #108]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	061b      	lsls	r3, r3, #24
 80061c0:	4917      	ldr	r1, [pc, #92]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061c6:	e046      	b.n	8006256 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d029      	beq.n	8006224 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80061d0:	4b13      	ldr	r3, [pc, #76]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f023 0219 	bic.w	r2, r3, #25
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	4910      	ldr	r1, [pc, #64]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e2:	f7fb fdb7 	bl	8001d54 <HAL_GetTick>
 80061e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061e8:	e008      	b.n	80061fc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ea:	f7fb fdb3 	bl	8001d54 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e2d3      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061fc:	4b08      	ldr	r3, [pc, #32]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0f0      	beq.n	80061ea <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006208:	4b05      	ldr	r3, [pc, #20]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	061b      	lsls	r3, r3, #24
 8006216:	4902      	ldr	r1, [pc, #8]	; (8006220 <HAL_RCC_OscConfig+0x278>)
 8006218:	4313      	orrs	r3, r2
 800621a:	604b      	str	r3, [r1, #4]
 800621c:	e01b      	b.n	8006256 <HAL_RCC_OscConfig+0x2ae>
 800621e:	bf00      	nop
 8006220:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006224:	4b97      	ldr	r3, [pc, #604]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a96      	ldr	r2, [pc, #600]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 800622a:	f023 0301 	bic.w	r3, r3, #1
 800622e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006230:	f7fb fd90 	bl	8001d54 <HAL_GetTick>
 8006234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006238:	f7fb fd8c 	bl	8001d54 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e2ac      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800624a:	4b8e      	ldr	r3, [pc, #568]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f0      	bne.n	8006238 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	2b00      	cmp	r3, #0
 8006260:	d06a      	beq.n	8006338 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006262:	4b88      	ldr	r3, [pc, #544]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800626a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800626c:	4b85      	ldr	r3, [pc, #532]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	2b08      	cmp	r3, #8
 8006276:	d007      	beq.n	8006288 <HAL_RCC_OscConfig+0x2e0>
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	2b18      	cmp	r3, #24
 800627c:	d11b      	bne.n	80062b6 <HAL_RCC_OscConfig+0x30e>
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	2b01      	cmp	r3, #1
 8006286:	d116      	bne.n	80062b6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006288:	4b7e      	ldr	r3, [pc, #504]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <HAL_RCC_OscConfig+0x2f8>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	2b80      	cmp	r3, #128	; 0x80
 800629a:	d001      	beq.n	80062a0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e281      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062a0:	4b78      	ldr	r3, [pc, #480]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	061b      	lsls	r3, r3, #24
 80062ae:	4975      	ldr	r1, [pc, #468]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062b4:	e040      	b.n	8006338 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d023      	beq.n	8006306 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80062be:	4b71      	ldr	r3, [pc, #452]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a70      	ldr	r2, [pc, #448]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 80062c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ca:	f7fb fd43 	bl	8001d54 <HAL_GetTick>
 80062ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062d0:	e008      	b.n	80062e4 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80062d2:	f7fb fd3f 	bl	8001d54 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e25f      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062e4:	4b67      	ldr	r3, [pc, #412]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0f0      	beq.n	80062d2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062f0:	4b64      	ldr	r3, [pc, #400]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	061b      	lsls	r3, r3, #24
 80062fe:	4961      	ldr	r1, [pc, #388]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 8006300:	4313      	orrs	r3, r2
 8006302:	60cb      	str	r3, [r1, #12]
 8006304:	e018      	b.n	8006338 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006306:	4b5f      	ldr	r3, [pc, #380]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a5e      	ldr	r2, [pc, #376]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 800630c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006312:	f7fb fd1f 	bl	8001d54 <HAL_GetTick>
 8006316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006318:	e008      	b.n	800632c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800631a:	f7fb fd1b 	bl	8001d54 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d901      	bls.n	800632c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e23b      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800632c:	4b55      	ldr	r3, [pc, #340]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1f0      	bne.n	800631a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d036      	beq.n	80063b2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d019      	beq.n	8006380 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800634c:	4b4d      	ldr	r3, [pc, #308]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 800634e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006350:	4a4c      	ldr	r2, [pc, #304]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 8006352:	f043 0301 	orr.w	r3, r3, #1
 8006356:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006358:	f7fb fcfc 	bl	8001d54 <HAL_GetTick>
 800635c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006360:	f7fb fcf8 	bl	8001d54 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e218      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006372:	4b44      	ldr	r3, [pc, #272]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 8006374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0f0      	beq.n	8006360 <HAL_RCC_OscConfig+0x3b8>
 800637e:	e018      	b.n	80063b2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006380:	4b40      	ldr	r3, [pc, #256]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 8006382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006384:	4a3f      	ldr	r2, [pc, #252]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 8006386:	f023 0301 	bic.w	r3, r3, #1
 800638a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800638c:	f7fb fce2 	bl	8001d54 <HAL_GetTick>
 8006390:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006394:	f7fb fcde 	bl	8001d54 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e1fe      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063a6:	4b37      	ldr	r3, [pc, #220]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 80063a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f0      	bne.n	8006394 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d036      	beq.n	800642c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d019      	beq.n	80063fa <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063c6:	4b2f      	ldr	r3, [pc, #188]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a2e      	ldr	r2, [pc, #184]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 80063cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063d2:	f7fb fcbf 	bl	8001d54 <HAL_GetTick>
 80063d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063d8:	e008      	b.n	80063ec <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80063da:	f7fb fcbb 	bl	8001d54 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d901      	bls.n	80063ec <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e1db      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063ec:	4b25      	ldr	r3, [pc, #148]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0f0      	beq.n	80063da <HAL_RCC_OscConfig+0x432>
 80063f8:	e018      	b.n	800642c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063fa:	4b22      	ldr	r3, [pc, #136]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a21      	ldr	r2, [pc, #132]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 8006400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006404:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006406:	f7fb fca5 	bl	8001d54 <HAL_GetTick>
 800640a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800640e:	f7fb fca1 	bl	8001d54 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e1c1      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006420:	4b18      	ldr	r3, [pc, #96]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1f0      	bne.n	800640e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 80af 	beq.w	8006598 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800643a:	4b13      	ldr	r3, [pc, #76]	; (8006488 <HAL_RCC_OscConfig+0x4e0>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a12      	ldr	r2, [pc, #72]	; (8006488 <HAL_RCC_OscConfig+0x4e0>)
 8006440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006444:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006446:	f7fb fc85 	bl	8001d54 <HAL_GetTick>
 800644a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800644c:	e008      	b.n	8006460 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800644e:	f7fb fc81 	bl	8001d54 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	2b64      	cmp	r3, #100	; 0x64
 800645a:	d901      	bls.n	8006460 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e1a1      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006460:	4b09      	ldr	r3, [pc, #36]	; (8006488 <HAL_RCC_OscConfig+0x4e0>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0f0      	beq.n	800644e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	2b01      	cmp	r3, #1
 8006472:	d10b      	bne.n	800648c <HAL_RCC_OscConfig+0x4e4>
 8006474:	4b03      	ldr	r3, [pc, #12]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 8006476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006478:	4a02      	ldr	r2, [pc, #8]	; (8006484 <HAL_RCC_OscConfig+0x4dc>)
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	6713      	str	r3, [r2, #112]	; 0x70
 8006480:	e05b      	b.n	800653a <HAL_RCC_OscConfig+0x592>
 8006482:	bf00      	nop
 8006484:	58024400 	.word	0x58024400
 8006488:	58024800 	.word	0x58024800
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d112      	bne.n	80064ba <HAL_RCC_OscConfig+0x512>
 8006494:	4b9d      	ldr	r3, [pc, #628]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006498:	4a9c      	ldr	r2, [pc, #624]	; (800670c <HAL_RCC_OscConfig+0x764>)
 800649a:	f023 0301 	bic.w	r3, r3, #1
 800649e:	6713      	str	r3, [r2, #112]	; 0x70
 80064a0:	4b9a      	ldr	r3, [pc, #616]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80064a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a4:	4a99      	ldr	r2, [pc, #612]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80064a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064aa:	6713      	str	r3, [r2, #112]	; 0x70
 80064ac:	4b97      	ldr	r3, [pc, #604]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80064ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b0:	4a96      	ldr	r2, [pc, #600]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80064b2:	f023 0304 	bic.w	r3, r3, #4
 80064b6:	6713      	str	r3, [r2, #112]	; 0x70
 80064b8:	e03f      	b.n	800653a <HAL_RCC_OscConfig+0x592>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	2b05      	cmp	r3, #5
 80064c0:	d112      	bne.n	80064e8 <HAL_RCC_OscConfig+0x540>
 80064c2:	4b92      	ldr	r3, [pc, #584]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80064c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c6:	4a91      	ldr	r2, [pc, #580]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80064c8:	f043 0304 	orr.w	r3, r3, #4
 80064cc:	6713      	str	r3, [r2, #112]	; 0x70
 80064ce:	4b8f      	ldr	r3, [pc, #572]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80064d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d2:	4a8e      	ldr	r2, [pc, #568]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80064d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d8:	6713      	str	r3, [r2, #112]	; 0x70
 80064da:	4b8c      	ldr	r3, [pc, #560]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80064dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064de:	4a8b      	ldr	r2, [pc, #556]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80064e0:	f043 0301 	orr.w	r3, r3, #1
 80064e4:	6713      	str	r3, [r2, #112]	; 0x70
 80064e6:	e028      	b.n	800653a <HAL_RCC_OscConfig+0x592>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	2b85      	cmp	r3, #133	; 0x85
 80064ee:	d112      	bne.n	8006516 <HAL_RCC_OscConfig+0x56e>
 80064f0:	4b86      	ldr	r3, [pc, #536]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80064f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f4:	4a85      	ldr	r2, [pc, #532]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80064f6:	f043 0304 	orr.w	r3, r3, #4
 80064fa:	6713      	str	r3, [r2, #112]	; 0x70
 80064fc:	4b83      	ldr	r3, [pc, #524]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80064fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006500:	4a82      	ldr	r2, [pc, #520]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006506:	6713      	str	r3, [r2, #112]	; 0x70
 8006508:	4b80      	ldr	r3, [pc, #512]	; (800670c <HAL_RCC_OscConfig+0x764>)
 800650a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650c:	4a7f      	ldr	r2, [pc, #508]	; (800670c <HAL_RCC_OscConfig+0x764>)
 800650e:	f043 0301 	orr.w	r3, r3, #1
 8006512:	6713      	str	r3, [r2, #112]	; 0x70
 8006514:	e011      	b.n	800653a <HAL_RCC_OscConfig+0x592>
 8006516:	4b7d      	ldr	r3, [pc, #500]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651a:	4a7c      	ldr	r2, [pc, #496]	; (800670c <HAL_RCC_OscConfig+0x764>)
 800651c:	f023 0301 	bic.w	r3, r3, #1
 8006520:	6713      	str	r3, [r2, #112]	; 0x70
 8006522:	4b7a      	ldr	r3, [pc, #488]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006526:	4a79      	ldr	r2, [pc, #484]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006528:	f023 0304 	bic.w	r3, r3, #4
 800652c:	6713      	str	r3, [r2, #112]	; 0x70
 800652e:	4b77      	ldr	r3, [pc, #476]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006532:	4a76      	ldr	r2, [pc, #472]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006538:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d015      	beq.n	800656e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006542:	f7fb fc07 	bl	8001d54 <HAL_GetTick>
 8006546:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006548:	e00a      	b.n	8006560 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800654a:	f7fb fc03 	bl	8001d54 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	f241 3288 	movw	r2, #5000	; 0x1388
 8006558:	4293      	cmp	r3, r2
 800655a:	d901      	bls.n	8006560 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e121      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006560:	4b6a      	ldr	r3, [pc, #424]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0ee      	beq.n	800654a <HAL_RCC_OscConfig+0x5a2>
 800656c:	e014      	b.n	8006598 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800656e:	f7fb fbf1 	bl	8001d54 <HAL_GetTick>
 8006572:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006574:	e00a      	b.n	800658c <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006576:	f7fb fbed 	bl	8001d54 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	f241 3288 	movw	r2, #5000	; 0x1388
 8006584:	4293      	cmp	r3, r2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e10b      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800658c:	4b5f      	ldr	r3, [pc, #380]	; (800670c <HAL_RCC_OscConfig+0x764>)
 800658e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1ee      	bne.n	8006576 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8100 	beq.w	80067a2 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80065a2:	4b5a      	ldr	r3, [pc, #360]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065aa:	2b18      	cmp	r3, #24
 80065ac:	f000 80bb 	beq.w	8006726 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	f040 8095 	bne.w	80066e4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ba:	4b54      	ldr	r3, [pc, #336]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a53      	ldr	r2, [pc, #332]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80065c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c6:	f7fb fbc5 	bl	8001d54 <HAL_GetTick>
 80065ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065cc:	e008      	b.n	80065e0 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065ce:	f7fb fbc1 	bl	8001d54 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d901      	bls.n	80065e0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e0e1      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065e0:	4b4a      	ldr	r3, [pc, #296]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f0      	bne.n	80065ce <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065ec:	4b47      	ldr	r3, [pc, #284]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80065ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065f0:	4b47      	ldr	r3, [pc, #284]	; (8006710 <HAL_RCC_OscConfig+0x768>)
 80065f2:	4013      	ands	r3, r2
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80065fc:	0112      	lsls	r2, r2, #4
 80065fe:	430a      	orrs	r2, r1
 8006600:	4942      	ldr	r1, [pc, #264]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006602:	4313      	orrs	r3, r2
 8006604:	628b      	str	r3, [r1, #40]	; 0x28
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660a:	3b01      	subs	r3, #1
 800660c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006614:	3b01      	subs	r3, #1
 8006616:	025b      	lsls	r3, r3, #9
 8006618:	b29b      	uxth	r3, r3
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	3b01      	subs	r3, #1
 8006622:	041b      	lsls	r3, r3, #16
 8006624:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006628:	431a      	orrs	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662e:	3b01      	subs	r3, #1
 8006630:	061b      	lsls	r3, r3, #24
 8006632:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006636:	4935      	ldr	r1, [pc, #212]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006638:	4313      	orrs	r3, r2
 800663a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800663c:	4b33      	ldr	r3, [pc, #204]	; (800670c <HAL_RCC_OscConfig+0x764>)
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	4a32      	ldr	r2, [pc, #200]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006642:	f023 0301 	bic.w	r3, r3, #1
 8006646:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006648:	4b30      	ldr	r3, [pc, #192]	; (800670c <HAL_RCC_OscConfig+0x764>)
 800664a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800664c:	4b31      	ldr	r3, [pc, #196]	; (8006714 <HAL_RCC_OscConfig+0x76c>)
 800664e:	4013      	ands	r3, r2
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006654:	00d2      	lsls	r2, r2, #3
 8006656:	492d      	ldr	r1, [pc, #180]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006658:	4313      	orrs	r3, r2
 800665a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800665c:	4b2b      	ldr	r3, [pc, #172]	; (800670c <HAL_RCC_OscConfig+0x764>)
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	f023 020c 	bic.w	r2, r3, #12
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006668:	4928      	ldr	r1, [pc, #160]	; (800670c <HAL_RCC_OscConfig+0x764>)
 800666a:	4313      	orrs	r3, r2
 800666c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800666e:	4b27      	ldr	r3, [pc, #156]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006672:	f023 0202 	bic.w	r2, r3, #2
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667a:	4924      	ldr	r1, [pc, #144]	; (800670c <HAL_RCC_OscConfig+0x764>)
 800667c:	4313      	orrs	r3, r2
 800667e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006680:	4b22      	ldr	r3, [pc, #136]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	4a21      	ldr	r2, [pc, #132]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800668a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800668c:	4b1f      	ldr	r3, [pc, #124]	; (800670c <HAL_RCC_OscConfig+0x764>)
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	4a1e      	ldr	r2, [pc, #120]	; (800670c <HAL_RCC_OscConfig+0x764>)
 8006692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006698:	4b1c      	ldr	r3, [pc, #112]	; (800670c <HAL_RCC_OscConfig+0x764>)
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	4a1b      	ldr	r2, [pc, #108]	; (800670c <HAL_RCC_OscConfig+0x764>)
 800669e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80066a4:	4b19      	ldr	r3, [pc, #100]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	4a18      	ldr	r2, [pc, #96]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80066aa:	f043 0301 	orr.w	r3, r3, #1
 80066ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066b0:	4b16      	ldr	r3, [pc, #88]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a15      	ldr	r2, [pc, #84]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80066b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066bc:	f7fb fb4a 	bl	8001d54 <HAL_GetTick>
 80066c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066c4:	f7fb fb46 	bl	8001d54 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e066      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066d6:	4b0d      	ldr	r3, [pc, #52]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0f0      	beq.n	80066c4 <HAL_RCC_OscConfig+0x71c>
 80066e2:	e05e      	b.n	80067a2 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066e4:	4b09      	ldr	r3, [pc, #36]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a08      	ldr	r2, [pc, #32]	; (800670c <HAL_RCC_OscConfig+0x764>)
 80066ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f0:	f7fb fb30 	bl	8001d54 <HAL_GetTick>
 80066f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066f6:	e00f      	b.n	8006718 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066f8:	f7fb fb2c 	bl	8001d54 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b02      	cmp	r3, #2
 8006704:	d908      	bls.n	8006718 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e04c      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
 800670a:	bf00      	nop
 800670c:	58024400 	.word	0x58024400
 8006710:	fffffc0c 	.word	0xfffffc0c
 8006714:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006718:	4b24      	ldr	r3, [pc, #144]	; (80067ac <HAL_RCC_OscConfig+0x804>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e9      	bne.n	80066f8 <HAL_RCC_OscConfig+0x750>
 8006724:	e03d      	b.n	80067a2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006726:	4b21      	ldr	r3, [pc, #132]	; (80067ac <HAL_RCC_OscConfig+0x804>)
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800672c:	4b1f      	ldr	r3, [pc, #124]	; (80067ac <HAL_RCC_OscConfig+0x804>)
 800672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006730:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	2b01      	cmp	r3, #1
 8006738:	d031      	beq.n	800679e <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f003 0203 	and.w	r2, r3, #3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006744:	429a      	cmp	r2, r3
 8006746:	d12a      	bne.n	800679e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	091b      	lsrs	r3, r3, #4
 800674c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006754:	429a      	cmp	r2, r3
 8006756:	d122      	bne.n	800679e <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006764:	429a      	cmp	r2, r3
 8006766:	d11a      	bne.n	800679e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	0a5b      	lsrs	r3, r3, #9
 800676c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006774:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006776:	429a      	cmp	r2, r3
 8006778:	d111      	bne.n	800679e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	0c1b      	lsrs	r3, r3, #16
 800677e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006786:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006788:	429a      	cmp	r2, r3
 800678a:	d108      	bne.n	800679e <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	0e1b      	lsrs	r3, r3, #24
 8006790:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006798:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800679a:	429a      	cmp	r2, r3
 800679c:	d001      	beq.n	80067a2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e000      	b.n	80067a4 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3730      	adds	r7, #48	; 0x30
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	58024400 	.word	0x58024400

080067b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e19c      	b.n	8006afe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067c4:	4b8a      	ldr	r3, [pc, #552]	; (80069f0 <HAL_RCC_ClockConfig+0x240>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d910      	bls.n	80067f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067d2:	4b87      	ldr	r3, [pc, #540]	; (80069f0 <HAL_RCC_ClockConfig+0x240>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f023 020f 	bic.w	r2, r3, #15
 80067da:	4985      	ldr	r1, [pc, #532]	; (80069f0 <HAL_RCC_ClockConfig+0x240>)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	4313      	orrs	r3, r2
 80067e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067e2:	4b83      	ldr	r3, [pc, #524]	; (80069f0 <HAL_RCC_ClockConfig+0x240>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 030f 	and.w	r3, r3, #15
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d001      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e184      	b.n	8006afe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d010      	beq.n	8006822 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	4b7b      	ldr	r3, [pc, #492]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800680c:	429a      	cmp	r2, r3
 800680e:	d908      	bls.n	8006822 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006810:	4b78      	ldr	r3, [pc, #480]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	4975      	ldr	r1, [pc, #468]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 800681e:	4313      	orrs	r3, r2
 8006820:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d010      	beq.n	8006850 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695a      	ldr	r2, [r3, #20]
 8006832:	4b70      	ldr	r3, [pc, #448]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800683a:	429a      	cmp	r2, r3
 800683c:	d908      	bls.n	8006850 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800683e:	4b6d      	ldr	r3, [pc, #436]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	496a      	ldr	r1, [pc, #424]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 800684c:	4313      	orrs	r3, r2
 800684e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	2b00      	cmp	r3, #0
 800685a:	d010      	beq.n	800687e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699a      	ldr	r2, [r3, #24]
 8006860:	4b64      	ldr	r3, [pc, #400]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006868:	429a      	cmp	r2, r3
 800686a:	d908      	bls.n	800687e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800686c:	4b61      	ldr	r3, [pc, #388]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	495e      	ldr	r1, [pc, #376]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 800687a:	4313      	orrs	r3, r2
 800687c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	d010      	beq.n	80068ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69da      	ldr	r2, [r3, #28]
 800688e:	4b59      	ldr	r3, [pc, #356]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006896:	429a      	cmp	r2, r3
 8006898:	d908      	bls.n	80068ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800689a:	4b56      	ldr	r3, [pc, #344]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	4953      	ldr	r1, [pc, #332]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d010      	beq.n	80068da <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	4b4d      	ldr	r3, [pc, #308]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	f003 030f 	and.w	r3, r3, #15
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d908      	bls.n	80068da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068c8:	4b4a      	ldr	r3, [pc, #296]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	f023 020f 	bic.w	r2, r3, #15
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	4947      	ldr	r1, [pc, #284]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d055      	beq.n	8006992 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80068e6:	4b43      	ldr	r3, [pc, #268]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	4940      	ldr	r1, [pc, #256]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d107      	bne.n	8006910 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006900:	4b3c      	ldr	r3, [pc, #240]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d121      	bne.n	8006950 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e0f6      	b.n	8006afe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2b03      	cmp	r3, #3
 8006916:	d107      	bne.n	8006928 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006918:	4b36      	ldr	r3, [pc, #216]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d115      	bne.n	8006950 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e0ea      	b.n	8006afe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d107      	bne.n	8006940 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006930:	4b30      	ldr	r3, [pc, #192]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006938:	2b00      	cmp	r3, #0
 800693a:	d109      	bne.n	8006950 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e0de      	b.n	8006afe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006940:	4b2c      	ldr	r3, [pc, #176]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e0d6      	b.n	8006afe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006950:	4b28      	ldr	r3, [pc, #160]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f023 0207 	bic.w	r2, r3, #7
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	4925      	ldr	r1, [pc, #148]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 800695e:	4313      	orrs	r3, r2
 8006960:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006962:	f7fb f9f7 	bl	8001d54 <HAL_GetTick>
 8006966:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006968:	e00a      	b.n	8006980 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800696a:	f7fb f9f3 	bl	8001d54 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	f241 3288 	movw	r2, #5000	; 0x1388
 8006978:	4293      	cmp	r3, r2
 800697a:	d901      	bls.n	8006980 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e0be      	b.n	8006afe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006980:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	429a      	cmp	r2, r3
 8006990:	d1eb      	bne.n	800696a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d010      	beq.n	80069c0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	4b14      	ldr	r3, [pc, #80]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	f003 030f 	and.w	r3, r3, #15
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d208      	bcs.n	80069c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069ae:	4b11      	ldr	r3, [pc, #68]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f023 020f 	bic.w	r2, r3, #15
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	490e      	ldr	r1, [pc, #56]	; (80069f4 <HAL_RCC_ClockConfig+0x244>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <HAL_RCC_ClockConfig+0x240>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 030f 	and.w	r3, r3, #15
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d214      	bcs.n	80069f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ce:	4b08      	ldr	r3, [pc, #32]	; (80069f0 <HAL_RCC_ClockConfig+0x240>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f023 020f 	bic.w	r2, r3, #15
 80069d6:	4906      	ldr	r1, [pc, #24]	; (80069f0 <HAL_RCC_ClockConfig+0x240>)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	4313      	orrs	r3, r2
 80069dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069de:	4b04      	ldr	r3, [pc, #16]	; (80069f0 <HAL_RCC_ClockConfig+0x240>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 030f 	and.w	r3, r3, #15
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d005      	beq.n	80069f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e086      	b.n	8006afe <HAL_RCC_ClockConfig+0x34e>
 80069f0:	52002000 	.word	0x52002000
 80069f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d010      	beq.n	8006a26 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691a      	ldr	r2, [r3, #16]
 8006a08:	4b3f      	ldr	r3, [pc, #252]	; (8006b08 <HAL_RCC_ClockConfig+0x358>)
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d208      	bcs.n	8006a26 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a14:	4b3c      	ldr	r3, [pc, #240]	; (8006b08 <HAL_RCC_ClockConfig+0x358>)
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	4939      	ldr	r1, [pc, #228]	; (8006b08 <HAL_RCC_ClockConfig+0x358>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0308 	and.w	r3, r3, #8
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d010      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	695a      	ldr	r2, [r3, #20]
 8006a36:	4b34      	ldr	r3, [pc, #208]	; (8006b08 <HAL_RCC_ClockConfig+0x358>)
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d208      	bcs.n	8006a54 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a42:	4b31      	ldr	r3, [pc, #196]	; (8006b08 <HAL_RCC_ClockConfig+0x358>)
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	492e      	ldr	r1, [pc, #184]	; (8006b08 <HAL_RCC_ClockConfig+0x358>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d010      	beq.n	8006a82 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	699a      	ldr	r2, [r3, #24]
 8006a64:	4b28      	ldr	r3, [pc, #160]	; (8006b08 <HAL_RCC_ClockConfig+0x358>)
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d208      	bcs.n	8006a82 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a70:	4b25      	ldr	r3, [pc, #148]	; (8006b08 <HAL_RCC_ClockConfig+0x358>)
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	4922      	ldr	r1, [pc, #136]	; (8006b08 <HAL_RCC_ClockConfig+0x358>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d010      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69da      	ldr	r2, [r3, #28]
 8006a92:	4b1d      	ldr	r3, [pc, #116]	; (8006b08 <HAL_RCC_ClockConfig+0x358>)
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d208      	bcs.n	8006ab0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a9e:	4b1a      	ldr	r3, [pc, #104]	; (8006b08 <HAL_RCC_ClockConfig+0x358>)
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	4917      	ldr	r1, [pc, #92]	; (8006b08 <HAL_RCC_ClockConfig+0x358>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006ab0:	f000 f834 	bl	8006b1c <HAL_RCC_GetSysClockFreq>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <HAL_RCC_ClockConfig+0x358>)
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	0a1b      	lsrs	r3, r3, #8
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	4912      	ldr	r1, [pc, #72]	; (8006b0c <HAL_RCC_ClockConfig+0x35c>)
 8006ac2:	5ccb      	ldrb	r3, [r1, r3]
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8006acc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006ace:	4b0e      	ldr	r3, [pc, #56]	; (8006b08 <HAL_RCC_ClockConfig+0x358>)
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	4a0d      	ldr	r2, [pc, #52]	; (8006b0c <HAL_RCC_ClockConfig+0x35c>)
 8006ad8:	5cd3      	ldrb	r3, [r2, r3]
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae4:	4a0a      	ldr	r2, [pc, #40]	; (8006b10 <HAL_RCC_ClockConfig+0x360>)
 8006ae6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ae8:	4a0a      	ldr	r2, [pc, #40]	; (8006b14 <HAL_RCC_ClockConfig+0x364>)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006aee:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <HAL_RCC_ClockConfig+0x368>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fb f8e4 	bl	8001cc0 <HAL_InitTick>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3718      	adds	r7, #24
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	58024400 	.word	0x58024400
 8006b0c:	0800adc8 	.word	0x0800adc8
 8006b10:	24000004 	.word	0x24000004
 8006b14:	24000000 	.word	0x24000000
 8006b18:	24000008 	.word	0x24000008

08006b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b089      	sub	sp, #36	; 0x24
 8006b20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b22:	4bb3      	ldr	r3, [pc, #716]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b2a:	2b18      	cmp	r3, #24
 8006b2c:	f200 8155 	bhi.w	8006dda <HAL_RCC_GetSysClockFreq+0x2be>
 8006b30:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b9d 	.word	0x08006b9d
 8006b3c:	08006ddb 	.word	0x08006ddb
 8006b40:	08006ddb 	.word	0x08006ddb
 8006b44:	08006ddb 	.word	0x08006ddb
 8006b48:	08006ddb 	.word	0x08006ddb
 8006b4c:	08006ddb 	.word	0x08006ddb
 8006b50:	08006ddb 	.word	0x08006ddb
 8006b54:	08006ddb 	.word	0x08006ddb
 8006b58:	08006bc3 	.word	0x08006bc3
 8006b5c:	08006ddb 	.word	0x08006ddb
 8006b60:	08006ddb 	.word	0x08006ddb
 8006b64:	08006ddb 	.word	0x08006ddb
 8006b68:	08006ddb 	.word	0x08006ddb
 8006b6c:	08006ddb 	.word	0x08006ddb
 8006b70:	08006ddb 	.word	0x08006ddb
 8006b74:	08006ddb 	.word	0x08006ddb
 8006b78:	08006bc9 	.word	0x08006bc9
 8006b7c:	08006ddb 	.word	0x08006ddb
 8006b80:	08006ddb 	.word	0x08006ddb
 8006b84:	08006ddb 	.word	0x08006ddb
 8006b88:	08006ddb 	.word	0x08006ddb
 8006b8c:	08006ddb 	.word	0x08006ddb
 8006b90:	08006ddb 	.word	0x08006ddb
 8006b94:	08006ddb 	.word	0x08006ddb
 8006b98:	08006bcf 	.word	0x08006bcf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b9c:	4b94      	ldr	r3, [pc, #592]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0320 	and.w	r3, r3, #32
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d009      	beq.n	8006bbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ba8:	4b91      	ldr	r3, [pc, #580]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	08db      	lsrs	r3, r3, #3
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	4a90      	ldr	r2, [pc, #576]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006bba:	e111      	b.n	8006de0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006bbc:	4b8d      	ldr	r3, [pc, #564]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006bbe:	61bb      	str	r3, [r7, #24]
    break;
 8006bc0:	e10e      	b.n	8006de0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006bc2:	4b8d      	ldr	r3, [pc, #564]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006bc4:	61bb      	str	r3, [r7, #24]
    break;
 8006bc6:	e10b      	b.n	8006de0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006bc8:	4b8c      	ldr	r3, [pc, #560]	; (8006dfc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006bca:	61bb      	str	r3, [r7, #24]
    break;
 8006bcc:	e108      	b.n	8006de0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bce:	4b88      	ldr	r3, [pc, #544]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006bd8:	4b85      	ldr	r3, [pc, #532]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bdc:	091b      	lsrs	r3, r3, #4
 8006bde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006be2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006be4:	4b82      	ldr	r3, [pc, #520]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006bee:	4b80      	ldr	r3, [pc, #512]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf2:	08db      	lsrs	r3, r3, #3
 8006bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	fb02 f303 	mul.w	r3, r2, r3
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 80e1 	beq.w	8006dd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	f000 8083 	beq.w	8006d20 <HAL_RCC_GetSysClockFreq+0x204>
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	f200 80a1 	bhi.w	8006d64 <HAL_RCC_GetSysClockFreq+0x248>
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <HAL_RCC_GetSysClockFreq+0x114>
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d056      	beq.n	8006cdc <HAL_RCC_GetSysClockFreq+0x1c0>
 8006c2e:	e099      	b.n	8006d64 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c30:	4b6f      	ldr	r3, [pc, #444]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0320 	and.w	r3, r3, #32
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d02d      	beq.n	8006c98 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c3c:	4b6c      	ldr	r3, [pc, #432]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	08db      	lsrs	r3, r3, #3
 8006c42:	f003 0303 	and.w	r3, r3, #3
 8006c46:	4a6b      	ldr	r2, [pc, #428]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c48:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	ee07 3a90 	vmov	s15, r3
 8006c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c66:	4b62      	ldr	r3, [pc, #392]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c76:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006c96:	e087      	b.n	8006da8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006e04 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006caa:	4b51      	ldr	r3, [pc, #324]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cba:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cbe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cda:	e065      	b.n	8006da8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006e08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cee:	4b40      	ldr	r3, [pc, #256]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d1e:	e043      	b.n	8006da8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006e0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d32:	4b2f      	ldr	r3, [pc, #188]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3a:	ee07 3a90 	vmov	s15, r3
 8006d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d62:	e021      	b.n	8006da8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	ee07 3a90 	vmov	s15, r3
 8006d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006e08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d76:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006e00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006da6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006da8:	4b11      	ldr	r3, [pc, #68]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	0a5b      	lsrs	r3, r3, #9
 8006dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006db2:	3301      	adds	r3, #1
 8006db4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	ee07 3a90 	vmov	s15, r3
 8006dbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006dc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dcc:	ee17 3a90 	vmov	r3, s15
 8006dd0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006dd2:	e005      	b.n	8006de0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61bb      	str	r3, [r7, #24]
    break;
 8006dd8:	e002      	b.n	8006de0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006dda:	4b07      	ldr	r3, [pc, #28]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ddc:	61bb      	str	r3, [r7, #24]
    break;
 8006dde:	bf00      	nop
  }

  return sysclockfreq;
 8006de0:	69bb      	ldr	r3, [r7, #24]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3724      	adds	r7, #36	; 0x24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	58024400 	.word	0x58024400
 8006df4:	03d09000 	.word	0x03d09000
 8006df8:	003d0900 	.word	0x003d0900
 8006dfc:	007a1200 	.word	0x007a1200
 8006e00:	46000000 	.word	0x46000000
 8006e04:	4c742400 	.word	0x4c742400
 8006e08:	4a742400 	.word	0x4a742400
 8006e0c:	4af42400 	.word	0x4af42400

08006e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006e16:	f7ff fe81 	bl	8006b1c <HAL_RCC_GetSysClockFreq>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	4b10      	ldr	r3, [pc, #64]	; (8006e60 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	0a1b      	lsrs	r3, r3, #8
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	490f      	ldr	r1, [pc, #60]	; (8006e64 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e28:	5ccb      	ldrb	r3, [r1, r3]
 8006e2a:	f003 031f 	and.w	r3, r3, #31
 8006e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e32:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006e34:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <HAL_RCC_GetHCLKFreq+0x50>)
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	f003 030f 	and.w	r3, r3, #15
 8006e3c:	4a09      	ldr	r2, [pc, #36]	; (8006e64 <HAL_RCC_GetHCLKFreq+0x54>)
 8006e3e:	5cd3      	ldrb	r3, [r2, r3]
 8006e40:	f003 031f 	and.w	r3, r3, #31
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4a:	4a07      	ldr	r2, [pc, #28]	; (8006e68 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e4e:	4a07      	ldr	r2, [pc, #28]	; (8006e6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006e54:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <HAL_RCC_GetHCLKFreq+0x58>)
 8006e56:	681b      	ldr	r3, [r3, #0]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	58024400 	.word	0x58024400
 8006e64:	0800adc8 	.word	0x0800adc8
 8006e68:	24000004 	.word	0x24000004
 8006e6c:	24000000 	.word	0x24000000

08006e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006e74:	f7ff ffcc 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	4b06      	ldr	r3, [pc, #24]	; (8006e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	091b      	lsrs	r3, r3, #4
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	4904      	ldr	r1, [pc, #16]	; (8006e98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e86:	5ccb      	ldrb	r3, [r1, r3]
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	58024400 	.word	0x58024400
 8006e98:	0800adc8 	.word	0x0800adc8

08006e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006ea0:	f7ff ffb6 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	0a1b      	lsrs	r3, r3, #8
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	4904      	ldr	r1, [pc, #16]	; (8006ec4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006eb2:	5ccb      	ldrb	r3, [r1, r3]
 8006eb4:	f003 031f 	and.w	r3, r3, #31
 8006eb8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	58024400 	.word	0x58024400
 8006ec4:	0800adc8 	.word	0x0800adc8

08006ec8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d03f      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ee8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eec:	d02a      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006eee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ef2:	d824      	bhi.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ef4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ef8:	d018      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006efe:	d81e      	bhi.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f08:	d007      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f0a:	e018      	b.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f0c:	4b9f      	ldr	r3, [pc, #636]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	4a9e      	ldr	r2, [pc, #632]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f18:	e015      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	3304      	adds	r3, #4
 8006f1e:	2102      	movs	r1, #2
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 ff1b 	bl	8008d5c <RCCEx_PLL2_Config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f2a:	e00c      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3324      	adds	r3, #36	; 0x24
 8006f30:	2102      	movs	r1, #2
 8006f32:	4618      	mov	r0, r3
 8006f34:	f001 ffc4 	bl	8008ec0 <RCCEx_PLL3_Config>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006f3c:	e003      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	75fb      	strb	r3, [r7, #23]
      break;
 8006f42:	e000      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d109      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f4c:	4b8f      	ldr	r3, [pc, #572]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f58:	498c      	ldr	r1, [pc, #560]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	650b      	str	r3, [r1, #80]	; 0x50
 8006f5e:	e001      	b.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d03d      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	d826      	bhi.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006f78:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7e:	bf00      	nop
 8006f80:	08006f95 	.word	0x08006f95
 8006f84:	08006fa3 	.word	0x08006fa3
 8006f88:	08006fb5 	.word	0x08006fb5
 8006f8c:	08006fcd 	.word	0x08006fcd
 8006f90:	08006fcd 	.word	0x08006fcd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f94:	4b7d      	ldr	r3, [pc, #500]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	4a7c      	ldr	r2, [pc, #496]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fa0:	e015      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f001 fed7 	bl	8008d5c <RCCEx_PLL2_Config>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fb2:	e00c      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3324      	adds	r3, #36	; 0x24
 8006fb8:	2100      	movs	r1, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 ff80 	bl	8008ec0 <RCCEx_PLL3_Config>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006fc4:	e003      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8006fca:	e000      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fce:	7dfb      	ldrb	r3, [r7, #23]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d109      	bne.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fd4:	4b6d      	ldr	r3, [pc, #436]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd8:	f023 0207 	bic.w	r2, r3, #7
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe0:	496a      	ldr	r1, [pc, #424]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	650b      	str	r3, [r1, #80]	; 0x50
 8006fe6:	e001      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
 8006fea:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d04a      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007000:	d031      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8007002:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007006:	d82b      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800700c:	d02d      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800700e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007012:	d825      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007014:	2bc0      	cmp	r3, #192	; 0xc0
 8007016:	d02a      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007018:	2bc0      	cmp	r3, #192	; 0xc0
 800701a:	d821      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800701c:	2b80      	cmp	r3, #128	; 0x80
 800701e:	d016      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007020:	2b80      	cmp	r3, #128	; 0x80
 8007022:	d81d      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007028:	2b40      	cmp	r3, #64	; 0x40
 800702a:	d007      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x174>
 800702c:	e018      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800702e:	4b57      	ldr	r3, [pc, #348]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007032:	4a56      	ldr	r2, [pc, #344]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007038:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800703a:	e019      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3304      	adds	r3, #4
 8007040:	2100      	movs	r1, #0
 8007042:	4618      	mov	r0, r3
 8007044:	f001 fe8a 	bl	8008d5c <RCCEx_PLL2_Config>
 8007048:	4603      	mov	r3, r0
 800704a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800704c:	e010      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	3324      	adds	r3, #36	; 0x24
 8007052:	2100      	movs	r1, #0
 8007054:	4618      	mov	r0, r3
 8007056:	f001 ff33 	bl	8008ec0 <RCCEx_PLL3_Config>
 800705a:	4603      	mov	r3, r0
 800705c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800705e:	e007      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	75fb      	strb	r3, [r7, #23]
      break;
 8007064:	e004      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8007066:	bf00      	nop
 8007068:	e002      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800706a:	bf00      	nop
 800706c:	e000      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800706e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d109      	bne.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007076:	4b45      	ldr	r3, [pc, #276]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007082:	4942      	ldr	r1, [pc, #264]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007084:	4313      	orrs	r3, r2
 8007086:	650b      	str	r3, [r1, #80]	; 0x50
 8007088:	e001      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007096:	2b00      	cmp	r3, #0
 8007098:	d04f      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800709e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80070a2:	d036      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80070a4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80070a8:	d830      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80070aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070ae:	d032      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80070b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070b4:	d82a      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80070b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80070ba:	d02e      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x252>
 80070bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80070c0:	d824      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80070c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c6:	d018      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x232>
 80070c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070cc:	d81e      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x212>
 80070d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070d6:	d007      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80070d8:	e018      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070da:	4b2c      	ldr	r3, [pc, #176]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	4a2b      	ldr	r2, [pc, #172]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80070e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80070e6:	e019      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3304      	adds	r3, #4
 80070ec:	2100      	movs	r1, #0
 80070ee:	4618      	mov	r0, r3
 80070f0:	f001 fe34 	bl	8008d5c <RCCEx_PLL2_Config>
 80070f4:	4603      	mov	r3, r0
 80070f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80070f8:	e010      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3324      	adds	r3, #36	; 0x24
 80070fe:	2100      	movs	r1, #0
 8007100:	4618      	mov	r0, r3
 8007102:	f001 fedd 	bl	8008ec0 <RCCEx_PLL3_Config>
 8007106:	4603      	mov	r3, r0
 8007108:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800710a:	e007      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	75fb      	strb	r3, [r7, #23]
      break;
 8007110:	e004      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007112:	bf00      	nop
 8007114:	e002      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8007116:	bf00      	nop
 8007118:	e000      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800711a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800711c:	7dfb      	ldrb	r3, [r7, #23]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007122:	4b1a      	ldr	r3, [pc, #104]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007126:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800712e:	4917      	ldr	r1, [pc, #92]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007130:	4313      	orrs	r3, r2
 8007132:	650b      	str	r3, [r1, #80]	; 0x50
 8007134:	e001      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007136:	7dfb      	ldrb	r3, [r7, #23]
 8007138:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d034      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800714a:	2b30      	cmp	r3, #48	; 0x30
 800714c:	d01c      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800714e:	2b30      	cmp	r3, #48	; 0x30
 8007150:	d817      	bhi.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007152:	2b20      	cmp	r3, #32
 8007154:	d00c      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007156:	2b20      	cmp	r3, #32
 8007158:	d813      	bhi.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800715a:	2b00      	cmp	r3, #0
 800715c:	d018      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800715e:	2b10      	cmp	r3, #16
 8007160:	d10f      	bne.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007162:	4b0a      	ldr	r3, [pc, #40]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	4a09      	ldr	r2, [pc, #36]	; (800718c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800716c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800716e:	e010      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3304      	adds	r3, #4
 8007174:	2102      	movs	r1, #2
 8007176:	4618      	mov	r0, r3
 8007178:	f001 fdf0 	bl	8008d5c <RCCEx_PLL2_Config>
 800717c:	4603      	mov	r3, r0
 800717e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8007180:	e007      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	75fb      	strb	r3, [r7, #23]
      break;
 8007186:	e004      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8007188:	bf00      	nop
 800718a:	e002      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800718c:	58024400 	.word	0x58024400
      break;
 8007190:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007192:	7dfb      	ldrb	r3, [r7, #23]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d109      	bne.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007198:	4b9b      	ldr	r3, [pc, #620]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800719a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a4:	4998      	ldr	r1, [pc, #608]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80071aa:	e001      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d047      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071c4:	d030      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80071c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071ca:	d82a      	bhi.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80071cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071d0:	d02c      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x364>
 80071d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071d6:	d824      	bhi.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80071d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071dc:	d018      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80071de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071e2:	d81e      	bhi.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80071e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ec:	d007      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x336>
 80071ee:	e018      	b.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f0:	4b85      	ldr	r3, [pc, #532]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	4a84      	ldr	r2, [pc, #528]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80071f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80071fc:	e017      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3304      	adds	r3, #4
 8007202:	2100      	movs	r1, #0
 8007204:	4618      	mov	r0, r3
 8007206:	f001 fda9 	bl	8008d5c <RCCEx_PLL2_Config>
 800720a:	4603      	mov	r3, r0
 800720c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800720e:	e00e      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3324      	adds	r3, #36	; 0x24
 8007214:	2100      	movs	r1, #0
 8007216:	4618      	mov	r0, r3
 8007218:	f001 fe52 	bl	8008ec0 <RCCEx_PLL3_Config>
 800721c:	4603      	mov	r3, r0
 800721e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007220:	e005      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	75fb      	strb	r3, [r7, #23]
      break;
 8007226:	e002      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8007228:	bf00      	nop
 800722a:	e000      	b.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800722c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800722e:	7dfb      	ldrb	r3, [r7, #23]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d109      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007234:	4b74      	ldr	r3, [pc, #464]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007238:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007240:	4971      	ldr	r1, [pc, #452]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007242:	4313      	orrs	r3, r2
 8007244:	650b      	str	r3, [r1, #80]	; 0x50
 8007246:	e001      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d049      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800725c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007260:	d02e      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007262:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007266:	d828      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007268:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800726c:	d02a      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800726e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007272:	d822      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007274:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007278:	d026      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800727a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800727e:	d81c      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007284:	d010      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007286:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800728a:	d816      	bhi.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800728c:	2b00      	cmp	r3, #0
 800728e:	d01d      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007294:	d111      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3304      	adds	r3, #4
 800729a:	2101      	movs	r1, #1
 800729c:	4618      	mov	r0, r3
 800729e:	f001 fd5d 	bl	8008d5c <RCCEx_PLL2_Config>
 80072a2:	4603      	mov	r3, r0
 80072a4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80072a6:	e012      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3324      	adds	r3, #36	; 0x24
 80072ac:	2101      	movs	r1, #1
 80072ae:	4618      	mov	r0, r3
 80072b0:	f001 fe06 	bl	8008ec0 <RCCEx_PLL3_Config>
 80072b4:	4603      	mov	r3, r0
 80072b6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80072b8:	e009      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	75fb      	strb	r3, [r7, #23]
      break;
 80072be:	e006      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80072c0:	bf00      	nop
 80072c2:	e004      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80072c4:	bf00      	nop
 80072c6:	e002      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80072c8:	bf00      	nop
 80072ca:	e000      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80072cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d109      	bne.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072d4:	4b4c      	ldr	r3, [pc, #304]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80072d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072e0:	4949      	ldr	r1, [pc, #292]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	650b      	str	r3, [r1, #80]	; 0x50
 80072e6:	e001      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e8:	7dfb      	ldrb	r3, [r7, #23]
 80072ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d053      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072fe:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007302:	d034      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007304:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007308:	d82e      	bhi.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800730a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800730e:	d030      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8007310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007314:	d828      	bhi.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800731a:	d02c      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800731c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007320:	d822      	bhi.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007322:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007326:	d028      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007328:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800732c:	d81c      	bhi.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800732e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007332:	d010      	beq.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8007334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007338:	d816      	bhi.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d01f      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800733e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007342:	d111      	bne.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3304      	adds	r3, #4
 8007348:	2101      	movs	r1, #1
 800734a:	4618      	mov	r0, r3
 800734c:	f001 fd06 	bl	8008d5c <RCCEx_PLL2_Config>
 8007350:	4603      	mov	r3, r0
 8007352:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007354:	e014      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3324      	adds	r3, #36	; 0x24
 800735a:	2101      	movs	r1, #1
 800735c:	4618      	mov	r0, r3
 800735e:	f001 fdaf 	bl	8008ec0 <RCCEx_PLL3_Config>
 8007362:	4603      	mov	r3, r0
 8007364:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007366:	e00b      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	75fb      	strb	r3, [r7, #23]
      break;
 800736c:	e008      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800736e:	bf00      	nop
 8007370:	e006      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007372:	bf00      	nop
 8007374:	e004      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8007376:	bf00      	nop
 8007378:	e002      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800737a:	bf00      	nop
 800737c:	e000      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800737e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007380:	7dfb      	ldrb	r3, [r7, #23]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10a      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007386:	4b20      	ldr	r3, [pc, #128]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007394:	491c      	ldr	r1, [pc, #112]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007396:	4313      	orrs	r3, r2
 8007398:	658b      	str	r3, [r1, #88]	; 0x58
 800739a:	e001      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d031      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073b4:	d00e      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80073b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073ba:	d814      	bhi.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d015      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x524>
 80073c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073c4:	d10f      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073c6:	4b10      	ldr	r3, [pc, #64]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	4a0f      	ldr	r2, [pc, #60]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80073cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80073d2:	e00c      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3304      	adds	r3, #4
 80073d8:	2101      	movs	r1, #1
 80073da:	4618      	mov	r0, r3
 80073dc:	f001 fcbe 	bl	8008d5c <RCCEx_PLL2_Config>
 80073e0:	4603      	mov	r3, r0
 80073e2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80073e4:	e003      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	75fb      	strb	r3, [r7, #23]
      break;
 80073ea:	e000      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80073ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10b      	bne.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80073f4:	4b04      	ldr	r3, [pc, #16]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80073f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007400:	4901      	ldr	r1, [pc, #4]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007402:	4313      	orrs	r3, r2
 8007404:	650b      	str	r3, [r1, #80]	; 0x50
 8007406:	e003      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8007408:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d032      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007420:	2b03      	cmp	r3, #3
 8007422:	d81b      	bhi.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007424:	a201      	add	r2, pc, #4	; (adr r2, 800742c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	08007463 	.word	0x08007463
 8007430:	0800743d 	.word	0x0800743d
 8007434:	0800744b 	.word	0x0800744b
 8007438:	08007463 	.word	0x08007463
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800743c:	4bb2      	ldr	r3, [pc, #712]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	4ab1      	ldr	r2, [pc, #708]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007446:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007448:	e00c      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3304      	adds	r3, #4
 800744e:	2102      	movs	r1, #2
 8007450:	4618      	mov	r0, r3
 8007452:	f001 fc83 	bl	8008d5c <RCCEx_PLL2_Config>
 8007456:	4603      	mov	r3, r0
 8007458:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800745a:	e003      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	75fb      	strb	r3, [r7, #23]
      break;
 8007460:	e000      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007462:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007464:	7dfb      	ldrb	r3, [r7, #23]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d109      	bne.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800746a:	4ba7      	ldr	r3, [pc, #668]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800746c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746e:	f023 0203 	bic.w	r2, r3, #3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007476:	49a4      	ldr	r1, [pc, #656]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007478:	4313      	orrs	r3, r2
 800747a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800747c:	e001      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 8086 	beq.w	800759c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007490:	4b9e      	ldr	r3, [pc, #632]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a9d      	ldr	r2, [pc, #628]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8007496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800749a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800749c:	f7fa fc5a 	bl	8001d54 <HAL_GetTick>
 80074a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074a2:	e009      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074a4:	f7fa fc56 	bl	8001d54 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	2b64      	cmp	r3, #100	; 0x64
 80074b0:	d902      	bls.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	75fb      	strb	r3, [r7, #23]
        break;
 80074b6:	e005      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074b8:	4b94      	ldr	r3, [pc, #592]	; (800770c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0ef      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d166      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80074ca:	4b8f      	ldr	r3, [pc, #572]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80074cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074d4:	4053      	eors	r3, r2
 80074d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d013      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074de:	4b8a      	ldr	r3, [pc, #552]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80074e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074e8:	4b87      	ldr	r3, [pc, #540]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80074ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ec:	4a86      	ldr	r2, [pc, #536]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80074ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074f4:	4b84      	ldr	r3, [pc, #528]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80074f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f8:	4a83      	ldr	r2, [pc, #524]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80074fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007500:	4a81      	ldr	r2, [pc, #516]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800750c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007510:	d115      	bne.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007512:	f7fa fc1f 	bl	8001d54 <HAL_GetTick>
 8007516:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007518:	e00b      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800751a:	f7fa fc1b 	bl	8001d54 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	f241 3288 	movw	r2, #5000	; 0x1388
 8007528:	4293      	cmp	r3, r2
 800752a:	d902      	bls.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	75fb      	strb	r3, [r7, #23]
            break;
 8007530:	e005      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007532:	4b75      	ldr	r3, [pc, #468]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d0ed      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800753e:	7dfb      	ldrb	r3, [r7, #23]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d126      	bne.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800754a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800754e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007552:	d10d      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8007554:	4b6c      	ldr	r3, [pc, #432]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007562:	0919      	lsrs	r1, r3, #4
 8007564:	4b6a      	ldr	r3, [pc, #424]	; (8007710 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007566:	400b      	ands	r3, r1
 8007568:	4967      	ldr	r1, [pc, #412]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800756a:	4313      	orrs	r3, r2
 800756c:	610b      	str	r3, [r1, #16]
 800756e:	e005      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8007570:	4b65      	ldr	r3, [pc, #404]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	4a64      	ldr	r2, [pc, #400]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007576:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800757a:	6113      	str	r3, [r2, #16]
 800757c:	4b62      	ldr	r3, [pc, #392]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800757e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800758a:	495f      	ldr	r1, [pc, #380]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800758c:	4313      	orrs	r3, r2
 800758e:	670b      	str	r3, [r1, #112]	; 0x70
 8007590:	e004      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007592:	7dfb      	ldrb	r3, [r7, #23]
 8007594:	75bb      	strb	r3, [r7, #22]
 8007596:	e001      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d07f      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ae:	2b28      	cmp	r3, #40	; 0x28
 80075b0:	d866      	bhi.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80075b2:	a201      	add	r2, pc, #4	; (adr r2, 80075b8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80075b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b8:	08007687 	.word	0x08007687
 80075bc:	08007681 	.word	0x08007681
 80075c0:	08007681 	.word	0x08007681
 80075c4:	08007681 	.word	0x08007681
 80075c8:	08007681 	.word	0x08007681
 80075cc:	08007681 	.word	0x08007681
 80075d0:	08007681 	.word	0x08007681
 80075d4:	08007681 	.word	0x08007681
 80075d8:	0800765d 	.word	0x0800765d
 80075dc:	08007681 	.word	0x08007681
 80075e0:	08007681 	.word	0x08007681
 80075e4:	08007681 	.word	0x08007681
 80075e8:	08007681 	.word	0x08007681
 80075ec:	08007681 	.word	0x08007681
 80075f0:	08007681 	.word	0x08007681
 80075f4:	08007681 	.word	0x08007681
 80075f8:	0800766f 	.word	0x0800766f
 80075fc:	08007681 	.word	0x08007681
 8007600:	08007681 	.word	0x08007681
 8007604:	08007681 	.word	0x08007681
 8007608:	08007681 	.word	0x08007681
 800760c:	08007681 	.word	0x08007681
 8007610:	08007681 	.word	0x08007681
 8007614:	08007681 	.word	0x08007681
 8007618:	08007687 	.word	0x08007687
 800761c:	08007681 	.word	0x08007681
 8007620:	08007681 	.word	0x08007681
 8007624:	08007681 	.word	0x08007681
 8007628:	08007681 	.word	0x08007681
 800762c:	08007681 	.word	0x08007681
 8007630:	08007681 	.word	0x08007681
 8007634:	08007681 	.word	0x08007681
 8007638:	08007687 	.word	0x08007687
 800763c:	08007681 	.word	0x08007681
 8007640:	08007681 	.word	0x08007681
 8007644:	08007681 	.word	0x08007681
 8007648:	08007681 	.word	0x08007681
 800764c:	08007681 	.word	0x08007681
 8007650:	08007681 	.word	0x08007681
 8007654:	08007681 	.word	0x08007681
 8007658:	08007687 	.word	0x08007687
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3304      	adds	r3, #4
 8007660:	2101      	movs	r1, #1
 8007662:	4618      	mov	r0, r3
 8007664:	f001 fb7a 	bl	8008d5c <RCCEx_PLL2_Config>
 8007668:	4603      	mov	r3, r0
 800766a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800766c:	e00c      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3324      	adds	r3, #36	; 0x24
 8007672:	2101      	movs	r1, #1
 8007674:	4618      	mov	r0, r3
 8007676:	f001 fc23 	bl	8008ec0 <RCCEx_PLL3_Config>
 800767a:	4603      	mov	r3, r0
 800767c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800767e:	e003      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	75fb      	strb	r3, [r7, #23]
      break;
 8007684:	e000      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8007686:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007688:	7dfb      	ldrb	r3, [r7, #23]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800768e:	4b1e      	ldr	r3, [pc, #120]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007692:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800769c:	491a      	ldr	r1, [pc, #104]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	654b      	str	r3, [r1, #84]	; 0x54
 80076a2:	e001      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0302 	and.w	r3, r3, #2
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d03f      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076b8:	2b05      	cmp	r3, #5
 80076ba:	d821      	bhi.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80076bc:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	08007715 	.word	0x08007715
 80076c8:	080076dd 	.word	0x080076dd
 80076cc:	080076ef 	.word	0x080076ef
 80076d0:	08007715 	.word	0x08007715
 80076d4:	08007715 	.word	0x08007715
 80076d8:	08007715 	.word	0x08007715
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3304      	adds	r3, #4
 80076e0:	2101      	movs	r1, #1
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 fb3a 	bl	8008d5c <RCCEx_PLL2_Config>
 80076e8:	4603      	mov	r3, r0
 80076ea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80076ec:	e013      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	3324      	adds	r3, #36	; 0x24
 80076f2:	2101      	movs	r1, #1
 80076f4:	4618      	mov	r0, r3
 80076f6:	f001 fbe3 	bl	8008ec0 <RCCEx_PLL3_Config>
 80076fa:	4603      	mov	r3, r0
 80076fc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80076fe:	e00a      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]
      break;
 8007704:	e007      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8007706:	bf00      	nop
 8007708:	58024400 	.word	0x58024400
 800770c:	58024800 	.word	0x58024800
 8007710:	00ffffcf 	.word	0x00ffffcf
      break;
 8007714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d109      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800771c:	4b9f      	ldr	r3, [pc, #636]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800771e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007720:	f023 0207 	bic.w	r2, r3, #7
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007728:	499c      	ldr	r1, [pc, #624]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800772a:	4313      	orrs	r3, r2
 800772c:	654b      	str	r3, [r1, #84]	; 0x54
 800772e:	e001      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d039      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007746:	2b05      	cmp	r3, #5
 8007748:	d820      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800774a:	a201      	add	r2, pc, #4	; (adr r2, 8007750 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007750:	08007793 	.word	0x08007793
 8007754:	08007769 	.word	0x08007769
 8007758:	0800777b 	.word	0x0800777b
 800775c:	08007793 	.word	0x08007793
 8007760:	08007793 	.word	0x08007793
 8007764:	08007793 	.word	0x08007793
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3304      	adds	r3, #4
 800776c:	2101      	movs	r1, #1
 800776e:	4618      	mov	r0, r3
 8007770:	f001 faf4 	bl	8008d5c <RCCEx_PLL2_Config>
 8007774:	4603      	mov	r3, r0
 8007776:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007778:	e00c      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3324      	adds	r3, #36	; 0x24
 800777e:	2101      	movs	r1, #1
 8007780:	4618      	mov	r0, r3
 8007782:	f001 fb9d 	bl	8008ec0 <RCCEx_PLL3_Config>
 8007786:	4603      	mov	r3, r0
 8007788:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800778a:	e003      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	75fb      	strb	r3, [r7, #23]
      break;
 8007790:	e000      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8007792:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007794:	7dfb      	ldrb	r3, [r7, #23]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10a      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800779a:	4b80      	ldr	r3, [pc, #512]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800779c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779e:	f023 0207 	bic.w	r2, r3, #7
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077a8:	497c      	ldr	r1, [pc, #496]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	658b      	str	r3, [r1, #88]	; 0x58
 80077ae:	e001      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0320 	and.w	r3, r3, #32
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d04b      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077ca:	d02e      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x962>
 80077cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077d0:	d828      	bhi.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80077d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d6:	d02a      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80077d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077dc:	d822      	bhi.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80077de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077e2:	d026      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80077e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077e8:	d81c      	bhi.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80077ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077ee:	d010      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80077f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077f4:	d816      	bhi.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01d      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80077fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077fe:	d111      	bne.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3304      	adds	r3, #4
 8007804:	2100      	movs	r1, #0
 8007806:	4618      	mov	r0, r3
 8007808:	f001 faa8 	bl	8008d5c <RCCEx_PLL2_Config>
 800780c:	4603      	mov	r3, r0
 800780e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007810:	e012      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3324      	adds	r3, #36	; 0x24
 8007816:	2102      	movs	r1, #2
 8007818:	4618      	mov	r0, r3
 800781a:	f001 fb51 	bl	8008ec0 <RCCEx_PLL3_Config>
 800781e:	4603      	mov	r3, r0
 8007820:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007822:	e009      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	75fb      	strb	r3, [r7, #23]
      break;
 8007828:	e006      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800782a:	bf00      	nop
 800782c:	e004      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800782e:	bf00      	nop
 8007830:	e002      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007832:	bf00      	nop
 8007834:	e000      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007838:	7dfb      	ldrb	r3, [r7, #23]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10a      	bne.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800783e:	4b57      	ldr	r3, [pc, #348]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007842:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800784c:	4953      	ldr	r1, [pc, #332]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800784e:	4313      	orrs	r3, r2
 8007850:	654b      	str	r3, [r1, #84]	; 0x54
 8007852:	e001      	b.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007854:	7dfb      	ldrb	r3, [r7, #23]
 8007856:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007860:	2b00      	cmp	r3, #0
 8007862:	d04b      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800786a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800786e:	d02e      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8007870:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007874:	d828      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800787a:	d02a      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800787c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007880:	d822      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8007882:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007886:	d026      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007888:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800788c:	d81c      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800788e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007892:	d010      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8007894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007898:	d816      	bhi.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d01d      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800789e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078a2:	d111      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3304      	adds	r3, #4
 80078a8:	2100      	movs	r1, #0
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 fa56 	bl	8008d5c <RCCEx_PLL2_Config>
 80078b0:	4603      	mov	r3, r0
 80078b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80078b4:	e012      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3324      	adds	r3, #36	; 0x24
 80078ba:	2102      	movs	r1, #2
 80078bc:	4618      	mov	r0, r3
 80078be:	f001 faff 	bl	8008ec0 <RCCEx_PLL3_Config>
 80078c2:	4603      	mov	r3, r0
 80078c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80078c6:	e009      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	75fb      	strb	r3, [r7, #23]
      break;
 80078cc:	e006      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80078ce:	bf00      	nop
 80078d0:	e004      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80078d2:	bf00      	nop
 80078d4:	e002      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80078d6:	bf00      	nop
 80078d8:	e000      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80078da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078dc:	7dfb      	ldrb	r3, [r7, #23]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80078e2:	4b2e      	ldr	r3, [pc, #184]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80078e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80078f0:	492a      	ldr	r1, [pc, #168]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	658b      	str	r3, [r1, #88]	; 0x58
 80078f6:	e001      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
 80078fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007904:	2b00      	cmp	r3, #0
 8007906:	d04d      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800790e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007912:	d02e      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8007914:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007918:	d828      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800791a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800791e:	d02a      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007924:	d822      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007926:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800792a:	d026      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800792c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007930:	d81c      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007932:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007936:	d010      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8007938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800793c:	d816      	bhi.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800793e:	2b00      	cmp	r3, #0
 8007940:	d01d      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007946:	d111      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	3304      	adds	r3, #4
 800794c:	2100      	movs	r1, #0
 800794e:	4618      	mov	r0, r3
 8007950:	f001 fa04 	bl	8008d5c <RCCEx_PLL2_Config>
 8007954:	4603      	mov	r3, r0
 8007956:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007958:	e012      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3324      	adds	r3, #36	; 0x24
 800795e:	2102      	movs	r1, #2
 8007960:	4618      	mov	r0, r3
 8007962:	f001 faad 	bl	8008ec0 <RCCEx_PLL3_Config>
 8007966:	4603      	mov	r3, r0
 8007968:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800796a:	e009      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	75fb      	strb	r3, [r7, #23]
      break;
 8007970:	e006      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007972:	bf00      	nop
 8007974:	e004      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8007976:	bf00      	nop
 8007978:	e002      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800797a:	bf00      	nop
 800797c:	e000      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800797e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007980:	7dfb      	ldrb	r3, [r7, #23]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10c      	bne.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007986:	4b05      	ldr	r3, [pc, #20]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800798a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007994:	4901      	ldr	r1, [pc, #4]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007996:	4313      	orrs	r3, r2
 8007998:	658b      	str	r3, [r1, #88]	; 0x58
 800799a:	e003      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800799c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
 80079a2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0308 	and.w	r3, r3, #8
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01a      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ba:	d10a      	bne.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3324      	adds	r3, #36	; 0x24
 80079c0:	2102      	movs	r1, #2
 80079c2:	4618      	mov	r0, r3
 80079c4:	f001 fa7c 	bl	8008ec0 <RCCEx_PLL3_Config>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80079d2:	4b8c      	ldr	r3, [pc, #560]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80079d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e0:	4988      	ldr	r1, [pc, #544]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0310 	and.w	r3, r3, #16
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d01a      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079fc:	d10a      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3324      	adds	r3, #36	; 0x24
 8007a02:	2102      	movs	r1, #2
 8007a04:	4618      	mov	r0, r3
 8007a06:	f001 fa5b 	bl	8008ec0 <RCCEx_PLL3_Config>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a14:	4b7b      	ldr	r3, [pc, #492]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a22:	4978      	ldr	r1, [pc, #480]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d034      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a3e:	d01d      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8007a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a44:	d817      	bhi.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8007a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a4e:	d009      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007a50:	e011      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3304      	adds	r3, #4
 8007a56:	2100      	movs	r1, #0
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f001 f97f 	bl	8008d5c <RCCEx_PLL2_Config>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007a62:	e00c      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3324      	adds	r3, #36	; 0x24
 8007a68:	2102      	movs	r1, #2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f001 fa28 	bl	8008ec0 <RCCEx_PLL3_Config>
 8007a70:	4603      	mov	r3, r0
 8007a72:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007a74:	e003      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	75fb      	strb	r3, [r7, #23]
      break;
 8007a7a:	e000      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8007a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10a      	bne.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a84:	4b5f      	ldr	r3, [pc, #380]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a92:	495c      	ldr	r1, [pc, #368]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	658b      	str	r3, [r1, #88]	; 0x58
 8007a98:	e001      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
 8007a9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d033      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ab4:	d01c      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007ab6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007aba:	d816      	bhi.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ac0:	d003      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8007ac2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ac6:	d007      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007ac8:	e00f      	b.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aca:	4b4e      	ldr	r3, [pc, #312]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ace:	4a4d      	ldr	r2, [pc, #308]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007ad6:	e00c      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3324      	adds	r3, #36	; 0x24
 8007adc:	2101      	movs	r1, #1
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f001 f9ee 	bl	8008ec0 <RCCEx_PLL3_Config>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007ae8:	e003      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	75fb      	strb	r3, [r7, #23]
      break;
 8007aee:	e000      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007af0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007af2:	7dfb      	ldrb	r3, [r7, #23]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10a      	bne.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007af8:	4b42      	ldr	r3, [pc, #264]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b06:	493f      	ldr	r1, [pc, #252]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	654b      	str	r3, [r1, #84]	; 0x54
 8007b0c:	e001      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d029      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8007b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b2a:	d007      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007b2c:	e00f      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b2e:	4b35      	ldr	r3, [pc, #212]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	4a34      	ldr	r2, [pc, #208]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007b3a:	e00b      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	2102      	movs	r1, #2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 f90a 	bl	8008d5c <RCCEx_PLL2_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007b4c:	e002      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	75fb      	strb	r3, [r7, #23]
      break;
 8007b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d109      	bne.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007b5a:	4b2a      	ldr	r3, [pc, #168]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b66:	4927      	ldr	r1, [pc, #156]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007b6c:	e001      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3324      	adds	r3, #36	; 0x24
 8007b82:	2102      	movs	r1, #2
 8007b84:	4618      	mov	r0, r3
 8007b86:	f001 f99b 	bl	8008ec0 <RCCEx_PLL3_Config>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d035      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007baa:	d017      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007bac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bb0:	d811      	bhi.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bb6:	d013      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8007bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bbc:	d80b      	bhi.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d010      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8007bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bc6:	d106      	bne.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc8:	4b0e      	ldr	r3, [pc, #56]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bcc:	4a0d      	ldr	r2, [pc, #52]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007bd4:	e007      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bda:	e004      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007bdc:	bf00      	nop
 8007bde:	e002      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007be0:	bf00      	nop
 8007be2:	e000      	b.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10d      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007bec:	4b05      	ldr	r3, [pc, #20]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bfa:	4902      	ldr	r1, [pc, #8]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	654b      	str	r3, [r1, #84]	; 0x54
 8007c00:	e004      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007c02:	bf00      	nop
 8007c04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d008      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c18:	4b30      	ldr	r3, [pc, #192]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c24:	492d      	ldr	r1, [pc, #180]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d008      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c36:	4b29      	ldr	r3, [pc, #164]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c3a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c42:	4926      	ldr	r1, [pc, #152]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d008      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007c54:	4b21      	ldr	r3, [pc, #132]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c60:	491e      	ldr	r1, [pc, #120]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00d      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c72:	4b1a      	ldr	r3, [pc, #104]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	4a19      	ldr	r2, [pc, #100]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c7c:	6113      	str	r3, [r2, #16]
 8007c7e:	4b17      	ldr	r3, [pc, #92]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c80:	691a      	ldr	r2, [r3, #16]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007c88:	4914      	ldr	r1, [pc, #80]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	da08      	bge.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c96:	4b11      	ldr	r3, [pc, #68]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca2:	490e      	ldr	r1, [pc, #56]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d009      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007cb4:	4b09      	ldr	r3, [pc, #36]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc2:	4906      	ldr	r1, [pc, #24]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007cc8:	7dbb      	ldrb	r3, [r7, #22]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	e000      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	58024400 	.word	0x58024400

08007ce0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b090      	sub	sp, #64	; 0x40
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cee:	f040 8089 	bne.w	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007cf2:	4b91      	ldr	r3, [pc, #580]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	d87d      	bhi.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8007d02:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d08:	08007d1d 	.word	0x08007d1d
 8007d0c:	08007d41 	.word	0x08007d41
 8007d10:	08007d65 	.word	0x08007d65
 8007d14:	08007df9 	.word	0x08007df9
 8007d18:	08007d89 	.word	0x08007d89
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d1c:	4b86      	ldr	r3, [pc, #536]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d28:	d107      	bne.n	8007d3a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 fec2 	bl	8008ab8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d38:	e3f4      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d3e:	e3f1      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d40:	4b7d      	ldr	r3, [pc, #500]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d4c:	d107      	bne.n	8007d5e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d4e:	f107 0318 	add.w	r3, r7, #24
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 fc08 	bl	8008568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d5c:	e3e2      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d62:	e3df      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d64:	4b74      	ldr	r3, [pc, #464]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d70:	d107      	bne.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d72:	f107 030c 	add.w	r3, r7, #12
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 fd4a 	bl	8008810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d80:	e3d0      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007d82:	2300      	movs	r3, #0
 8007d84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d86:	e3cd      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d88:	4b6b      	ldr	r3, [pc, #428]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d90:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d92:	4b69      	ldr	r3, [pc, #420]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0304 	and.w	r3, r3, #4
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	d10c      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d109      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007da4:	4b64      	ldr	r3, [pc, #400]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	08db      	lsrs	r3, r3, #3
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	4a63      	ldr	r2, [pc, #396]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007db0:	fa22 f303 	lsr.w	r3, r2, r3
 8007db4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007db6:	e01e      	b.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007db8:	4b5f      	ldr	r3, [pc, #380]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dc4:	d106      	bne.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007dcc:	d102      	bne.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007dce:	4b5c      	ldr	r3, [pc, #368]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dd2:	e010      	b.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dd4:	4b58      	ldr	r3, [pc, #352]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007de0:	d106      	bne.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007de8:	d102      	bne.n	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007dea:	4b56      	ldr	r3, [pc, #344]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dee:	e002      	b.n	8007df6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007df0:	2300      	movs	r3, #0
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007df4:	e396      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007df6:	e395      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007df8:	4b53      	ldr	r3, [pc, #332]	; (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dfc:	e392      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e02:	e38f      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e0a:	f040 809f 	bne.w	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8007e0e:	4b4a      	ldr	r3, [pc, #296]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e12:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007e16:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e1e:	d04d      	beq.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e26:	f200 8084 	bhi.w	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2c:	2bc0      	cmp	r3, #192	; 0xc0
 8007e2e:	d07d      	beq.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	2bc0      	cmp	r3, #192	; 0xc0
 8007e34:	d87d      	bhi.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	2b80      	cmp	r3, #128	; 0x80
 8007e3a:	d02d      	beq.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8007e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3e:	2b80      	cmp	r3, #128	; 0x80
 8007e40:	d877      	bhi.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d003      	beq.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8007e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4a:	2b40      	cmp	r3, #64	; 0x40
 8007e4c:	d012      	beq.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007e4e:	e070      	b.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e50:	4b39      	ldr	r3, [pc, #228]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e5c:	d107      	bne.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fe28 	bl	8008ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e6c:	e35a      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e72:	e357      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e74:	4b30      	ldr	r3, [pc, #192]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e80:	d107      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e82:	f107 0318 	add.w	r3, r7, #24
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fb6e 	bl	8008568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e90:	e348      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e96:	e345      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e98:	4b27      	ldr	r3, [pc, #156]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ea4:	d107      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ea6:	f107 030c 	add.w	r3, r7, #12
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fcb0 	bl	8008810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007eb4:	e336      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eba:	e333      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ebc:	4b1e      	ldr	r3, [pc, #120]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ec0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ec4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ec6:	4b1c      	ldr	r3, [pc, #112]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0304 	and.w	r3, r3, #4
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d10c      	bne.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d109      	bne.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ed8:	4b17      	ldr	r3, [pc, #92]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	08db      	lsrs	r3, r3, #3
 8007ede:	f003 0303 	and.w	r3, r3, #3
 8007ee2:	4a16      	ldr	r2, [pc, #88]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eea:	e01e      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eec:	4b12      	ldr	r3, [pc, #72]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ef8:	d106      	bne.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8007efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f00:	d102      	bne.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007f02:	4b0f      	ldr	r3, [pc, #60]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f06:	e010      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f08:	4b0b      	ldr	r3, [pc, #44]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f14:	d106      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f1c:	d102      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007f1e:	4b09      	ldr	r3, [pc, #36]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f22:	e002      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007f24:	2300      	movs	r3, #0
 8007f26:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007f28:	e2fc      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007f2a:	e2fb      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f2c:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f30:	e2f8      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8007f32:	2300      	movs	r3, #0
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f36:	e2f5      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007f38:	58024400 	.word	0x58024400
 8007f3c:	03d09000 	.word	0x03d09000
 8007f40:	003d0900 	.word	0x003d0900
 8007f44:	007a1200 	.word	0x007a1200
 8007f48:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f52:	f040 809c 	bne.w	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8007f56:	4b9d      	ldr	r3, [pc, #628]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f5a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007f5e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f66:	d054      	beq.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f6e:	f200 808b 	bhi.w	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f78:	f000 8083 	beq.w	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f82:	f200 8081 	bhi.w	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f8c:	d02f      	beq.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f94:	d878      	bhi.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d004      	beq.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fa2:	d012      	beq.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007fa4:	e070      	b.n	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fa6:	4b89      	ldr	r3, [pc, #548]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fb2:	d107      	bne.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 fd7d 	bl	8008ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007fc2:	e2af      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fc8:	e2ac      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fca:	4b80      	ldr	r3, [pc, #512]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fd6:	d107      	bne.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fd8:	f107 0318 	add.w	r3, r7, #24
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fac3 	bl	8008568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007fe6:	e29d      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fec:	e29a      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fee:	4b77      	ldr	r3, [pc, #476]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ffa:	d107      	bne.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ffc:	f107 030c 	add.w	r3, r7, #12
 8008000:	4618      	mov	r0, r3
 8008002:	f000 fc05 	bl	8008810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800800a:	e28b      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008010:	e288      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008012:	4b6e      	ldr	r3, [pc, #440]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008016:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800801a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800801c:	4b6b      	ldr	r3, [pc, #428]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0304 	and.w	r3, r3, #4
 8008024:	2b04      	cmp	r3, #4
 8008026:	d10c      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8008028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802a:	2b00      	cmp	r3, #0
 800802c:	d109      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800802e:	4b67      	ldr	r3, [pc, #412]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	08db      	lsrs	r3, r3, #3
 8008034:	f003 0303 	and.w	r3, r3, #3
 8008038:	4a65      	ldr	r2, [pc, #404]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 800803a:	fa22 f303 	lsr.w	r3, r2, r3
 800803e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008040:	e01e      	b.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008042:	4b62      	ldr	r3, [pc, #392]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800804e:	d106      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8008050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008056:	d102      	bne.n	800805e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008058:	4b5e      	ldr	r3, [pc, #376]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800805a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800805c:	e010      	b.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800805e:	4b5b      	ldr	r3, [pc, #364]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800806a:	d106      	bne.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800806c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008072:	d102      	bne.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008074:	4b58      	ldr	r3, [pc, #352]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8008076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008078:	e002      	b.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 800807e:	e251      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008080:	e250      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008082:	4b56      	ldr	r3, [pc, #344]	; (80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008084:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008086:	e24d      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008088:	2300      	movs	r3, #0
 800808a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800808c:	e24a      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008094:	f040 80a7 	bne.w	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008098:	4b4c      	ldr	r3, [pc, #304]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800809a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80080a0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080a8:	d055      	beq.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80080aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080b0:	f200 8096 	bhi.w	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080ba:	f000 8084 	beq.w	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 80080be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080c4:	f200 808c 	bhi.w	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80080c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ce:	d030      	beq.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080d6:	f200 8083 	bhi.w	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d004      	beq.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 80080e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e6:	d012      	beq.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 80080e8:	e07a      	b.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080ea:	4b38      	ldr	r3, [pc, #224]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080f6:	d107      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 fcdb 	bl	8008ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008104:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008106:	e20d      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800810c:	e20a      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800810e:	4b2f      	ldr	r3, [pc, #188]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800811a:	d107      	bne.n	800812c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800811c:	f107 0318 	add.w	r3, r7, #24
 8008120:	4618      	mov	r0, r3
 8008122:	f000 fa21 	bl	8008568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800812a:	e1fb      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800812c:	2300      	movs	r3, #0
 800812e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008130:	e1f8      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008132:	4b26      	ldr	r3, [pc, #152]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800813a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800813e:	d107      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008140:	f107 030c 	add.w	r3, r7, #12
 8008144:	4618      	mov	r0, r3
 8008146:	f000 fb63 	bl	8008810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800814e:	e1e9      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008154:	e1e6      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008156:	4b1d      	ldr	r3, [pc, #116]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800815e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008160:	4b1a      	ldr	r3, [pc, #104]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b04      	cmp	r3, #4
 800816a:	d10c      	bne.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 800816c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800816e:	2b00      	cmp	r3, #0
 8008170:	d109      	bne.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008172:	4b16      	ldr	r3, [pc, #88]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	08db      	lsrs	r3, r3, #3
 8008178:	f003 0303 	and.w	r3, r3, #3
 800817c:	4a14      	ldr	r2, [pc, #80]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 800817e:	fa22 f303 	lsr.w	r3, r2, r3
 8008182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008184:	e01e      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008186:	4b11      	ldr	r3, [pc, #68]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008192:	d106      	bne.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8008194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800819a:	d102      	bne.n	80081a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800819c:	4b0d      	ldr	r3, [pc, #52]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800819e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081a0:	e010      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081a2:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ae:	d106      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80081b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081b6:	d102      	bne.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80081b8:	4b07      	ldr	r3, [pc, #28]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081bc:	e002      	b.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80081c2:	e1af      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80081c4:	e1ae      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80081c6:	4b05      	ldr	r3, [pc, #20]	; (80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80081c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081ca:	e1ab      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80081cc:	58024400 	.word	0x58024400
 80081d0:	03d09000 	.word	0x03d09000
 80081d4:	003d0900 	.word	0x003d0900
 80081d8:	007a1200 	.word	0x007a1200
 80081dc:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 80081e0:	2300      	movs	r3, #0
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081e4:	e19e      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081ec:	d173      	bne.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80081ee:	4b9d      	ldr	r3, [pc, #628]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80081f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80081f6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80081f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081fe:	d02f      	beq.n	8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8008200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008202:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008206:	d863      	bhi.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820a:	2b00      	cmp	r3, #0
 800820c:	d004      	beq.n	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800820e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008214:	d012      	beq.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8008216:	e05b      	b.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008218:	4b92      	ldr	r3, [pc, #584]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008224:	d107      	bne.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008226:	f107 0318 	add.w	r3, r7, #24
 800822a:	4618      	mov	r0, r3
 800822c:	f000 f99c 	bl	8008568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008234:	e176      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008236:	2300      	movs	r3, #0
 8008238:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800823a:	e173      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800823c:	4b89      	ldr	r3, [pc, #548]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008248:	d107      	bne.n	800825a <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800824a:	f107 030c 	add.w	r3, r7, #12
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fade 	bl	8008810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008258:	e164      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800825a:	2300      	movs	r3, #0
 800825c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800825e:	e161      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008260:	4b80      	ldr	r3, [pc, #512]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008264:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008268:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800826a:	4b7e      	ldr	r3, [pc, #504]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	2b04      	cmp	r3, #4
 8008274:	d10c      	bne.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8008276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008278:	2b00      	cmp	r3, #0
 800827a:	d109      	bne.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800827c:	4b79      	ldr	r3, [pc, #484]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	08db      	lsrs	r3, r3, #3
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	4a78      	ldr	r2, [pc, #480]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008288:	fa22 f303 	lsr.w	r3, r2, r3
 800828c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800828e:	e01e      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008290:	4b74      	ldr	r3, [pc, #464]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800829c:	d106      	bne.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800829e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082a4:	d102      	bne.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80082a6:	4b71      	ldr	r3, [pc, #452]	; (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80082a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082aa:	e010      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082ac:	4b6d      	ldr	r3, [pc, #436]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082b8:	d106      	bne.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80082ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082c0:	d102      	bne.n	80082c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80082c2:	4b6b      	ldr	r3, [pc, #428]	; (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80082c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c6:	e002      	b.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80082c8:	2300      	movs	r3, #0
 80082ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80082cc:	e12a      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80082ce:	e129      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80082d4:	e126      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082dc:	d133      	bne.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80082de:	4b61      	ldr	r3, [pc, #388]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80082e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082e6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80082e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d004      	beq.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80082ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082f4:	d012      	beq.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80082f6:	e023      	b.n	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80082f8:	4b5a      	ldr	r3, [pc, #360]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008304:	d107      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800830a:	4618      	mov	r0, r3
 800830c:	f000 fbd4 	bl	8008ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008314:	e106      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800831a:	e103      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800831c:	4b51      	ldr	r3, [pc, #324]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008328:	d107      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800832a:	f107 0318 	add.w	r3, r7, #24
 800832e:	4618      	mov	r0, r3
 8008330:	f000 f91a 	bl	8008568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008338:	e0f4      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800833e:	e0f1      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008344:	e0ee      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800834c:	f040 809b 	bne.w	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008350:	4b44      	ldr	r3, [pc, #272]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008354:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008358:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008360:	f000 808b 	beq.w	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800836a:	f200 8089 	bhi.w	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008374:	d06c      	beq.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800837c:	f200 8080 	bhi.w	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008386:	d056      	beq.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8008388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800838e:	d877      	bhi.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008396:	d03b      	beq.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8008398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800839e:	d86f      	bhi.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80083a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083a6:	d021      	beq.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 80083a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083ae:	d867      	bhi.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d004      	beq.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083bc:	d004      	beq.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 80083be:	e05f      	b.n	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80083c0:	f000 f8bc 	bl	800853c <HAL_RCCEx_GetD3PCLK1Freq>
 80083c4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80083c6:	e0ad      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083c8:	4b26      	ldr	r3, [pc, #152]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083d4:	d107      	bne.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083d6:	f107 0318 	add.w	r3, r7, #24
 80083da:	4618      	mov	r0, r3
 80083dc:	f000 f8c4 	bl	8008568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80083e4:	e09e      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80083e6:	2300      	movs	r3, #0
 80083e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083ea:	e09b      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083ec:	4b1d      	ldr	r3, [pc, #116]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083f8:	d107      	bne.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083fa:	f107 030c 	add.w	r3, r7, #12
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 fa06 	bl	8008810 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008408:	e08c      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800840e:	e089      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008410:	4b14      	ldr	r3, [pc, #80]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0304 	and.w	r3, r3, #4
 8008418:	2b04      	cmp	r3, #4
 800841a:	d109      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800841c:	4b11      	ldr	r3, [pc, #68]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	08db      	lsrs	r3, r3, #3
 8008422:	f003 0303 	and.w	r3, r3, #3
 8008426:	4a10      	ldr	r2, [pc, #64]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008428:	fa22 f303 	lsr.w	r3, r2, r3
 800842c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800842e:	e079      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008434:	e076      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008436:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800843e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008442:	d102      	bne.n	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8008444:	4b09      	ldr	r3, [pc, #36]	; (800846c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008446:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008448:	e06c      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800844a:	2300      	movs	r3, #0
 800844c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800844e:	e069      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008450:	4b04      	ldr	r3, [pc, #16]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008458:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800845c:	d10a      	bne.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 800845e:	4b04      	ldr	r3, [pc, #16]	; (8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008462:	e05f      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008464:	58024400 	.word	0x58024400
 8008468:	03d09000 	.word	0x03d09000
 800846c:	003d0900 	.word	0x003d0900
 8008470:	007a1200 	.word	0x007a1200
          frequency = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008478:	e054      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800847a:	4b2d      	ldr	r3, [pc, #180]	; (8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800847c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800847e:	e051      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008480:	2300      	movs	r3, #0
 8008482:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008484:	e04e      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800848c:	d148      	bne.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800848e:	4b29      	ldr	r3, [pc, #164]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008492:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008496:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800849e:	d02a      	beq.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084a6:	d838      	bhi.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d004      	beq.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 80084ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084b4:	d00d      	beq.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80084b6:	e030      	b.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80084b8:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084c4:	d102      	bne.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 80084c6:	4b1c      	ldr	r3, [pc, #112]	; (8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80084c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80084ca:	e02b      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80084cc:	2300      	movs	r3, #0
 80084ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084d0:	e028      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084d2:	4b18      	ldr	r3, [pc, #96]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084de:	d107      	bne.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 fae7 	bl	8008ab8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80084ee:	e019      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80084f0:	2300      	movs	r3, #0
 80084f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084f4:	e016      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084f6:	4b0f      	ldr	r3, [pc, #60]	; (8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008502:	d107      	bne.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008504:	f107 0318 	add.w	r3, r7, #24
 8008508:	4618      	mov	r0, r3
 800850a:	f000 f82d 	bl	8008568 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008512:	e007      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008518:	e004      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800851e:	e001      	b.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008526:	4618      	mov	r0, r3
 8008528:	3740      	adds	r7, #64	; 0x40
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	00bb8000 	.word	0x00bb8000
 8008534:	58024400 	.word	0x58024400
 8008538:	007a1200 	.word	0x007a1200

0800853c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008540:	f7fe fc66 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 8008544:	4602      	mov	r2, r0
 8008546:	4b06      	ldr	r3, [pc, #24]	; (8008560 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	091b      	lsrs	r3, r3, #4
 800854c:	f003 0307 	and.w	r3, r3, #7
 8008550:	4904      	ldr	r1, [pc, #16]	; (8008564 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008552:	5ccb      	ldrb	r3, [r1, r3]
 8008554:	f003 031f 	and.w	r3, r3, #31
 8008558:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800855c:	4618      	mov	r0, r3
 800855e:	bd80      	pop	{r7, pc}
 8008560:	58024400 	.word	0x58024400
 8008564:	0800adc8 	.word	0x0800adc8

08008568 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008568:	b480      	push	{r7}
 800856a:	b089      	sub	sp, #36	; 0x24
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008570:	4ba1      	ldr	r3, [pc, #644]	; (80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008574:	f003 0303 	and.w	r3, r3, #3
 8008578:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800857a:	4b9f      	ldr	r3, [pc, #636]	; (80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800857c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857e:	0b1b      	lsrs	r3, r3, #12
 8008580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008584:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008586:	4b9c      	ldr	r3, [pc, #624]	; (80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858a:	091b      	lsrs	r3, r3, #4
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008592:	4b99      	ldr	r3, [pc, #612]	; (80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008596:	08db      	lsrs	r3, r3, #3
 8008598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	fb02 f303 	mul.w	r3, r2, r3
 80085a2:	ee07 3a90 	vmov	s15, r3
 80085a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 8111 	beq.w	80087d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	f000 8083 	beq.w	80086c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	f200 80a1 	bhi.w	8008708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d003      	beq.n	80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d056      	beq.n	8008680 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80085d2:	e099      	b.n	8008708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085d4:	4b88      	ldr	r3, [pc, #544]	; (80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0320 	and.w	r3, r3, #32
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d02d      	beq.n	800863c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085e0:	4b85      	ldr	r3, [pc, #532]	; (80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	08db      	lsrs	r3, r3, #3
 80085e6:	f003 0303 	and.w	r3, r3, #3
 80085ea:	4a84      	ldr	r2, [pc, #528]	; (80087fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80085ec:	fa22 f303 	lsr.w	r3, r2, r3
 80085f0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	ee07 3a90 	vmov	s15, r3
 80085f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	ee07 3a90 	vmov	s15, r3
 8008602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800860a:	4b7b      	ldr	r3, [pc, #492]	; (80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800860c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861a:	ed97 6a03 	vldr	s12, [r7, #12]
 800861e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800862a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800862e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008636:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800863a:	e087      	b.n	800874c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008646:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008804 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800864a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800864e:	4b6a      	ldr	r3, [pc, #424]	; (80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008656:	ee07 3a90 	vmov	s15, r3
 800865a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800865e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008662:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800866a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800866e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800867e:	e065      	b.n	800874c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	ee07 3a90 	vmov	s15, r3
 8008686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800868a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800868e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008692:	4b59      	ldr	r3, [pc, #356]	; (80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800869a:	ee07 3a90 	vmov	s15, r3
 800869e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086c2:	e043      	b.n	800874c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800880c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80086d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086d6:	4b48      	ldr	r3, [pc, #288]	; (80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008702:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008706:	e021      	b.n	800874c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	ee07 3a90 	vmov	s15, r3
 800870e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008712:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800871a:	4b37      	ldr	r3, [pc, #220]	; (80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800871c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800872a:	ed97 6a03 	vldr	s12, [r7, #12]
 800872e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800873a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800873e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008746:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800874a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800874c:	4b2a      	ldr	r3, [pc, #168]	; (80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800874e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008750:	0a5b      	lsrs	r3, r3, #9
 8008752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008756:	ee07 3a90 	vmov	s15, r3
 800875a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800875e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008766:	edd7 6a07 	vldr	s13, [r7, #28]
 800876a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800876e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008772:	ee17 2a90 	vmov	r2, s15
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800877a:	4b1f      	ldr	r3, [pc, #124]	; (80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800877c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877e:	0c1b      	lsrs	r3, r3, #16
 8008780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008784:	ee07 3a90 	vmov	s15, r3
 8008788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008794:	edd7 6a07 	vldr	s13, [r7, #28]
 8008798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800879c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087a0:	ee17 2a90 	vmov	r2, s15
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80087a8:	4b13      	ldr	r3, [pc, #76]	; (80087f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ac:	0e1b      	lsrs	r3, r3, #24
 80087ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b2:	ee07 3a90 	vmov	s15, r3
 80087b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80087c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087ce:	ee17 2a90 	vmov	r2, s15
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80087d6:	e008      	b.n	80087ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	609a      	str	r2, [r3, #8]
}
 80087ea:	bf00      	nop
 80087ec:	3724      	adds	r7, #36	; 0x24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	58024400 	.word	0x58024400
 80087fc:	03d09000 	.word	0x03d09000
 8008800:	46000000 	.word	0x46000000
 8008804:	4c742400 	.word	0x4c742400
 8008808:	4a742400 	.word	0x4a742400
 800880c:	4af42400 	.word	0x4af42400

08008810 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008810:	b480      	push	{r7}
 8008812:	b089      	sub	sp, #36	; 0x24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008818:	4ba1      	ldr	r3, [pc, #644]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800881a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881c:	f003 0303 	and.w	r3, r3, #3
 8008820:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008822:	4b9f      	ldr	r3, [pc, #636]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008826:	0d1b      	lsrs	r3, r3, #20
 8008828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800882c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800882e:	4b9c      	ldr	r3, [pc, #624]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008832:	0a1b      	lsrs	r3, r3, #8
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800883a:	4b99      	ldr	r3, [pc, #612]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800883c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883e:	08db      	lsrs	r3, r3, #3
 8008840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	fb02 f303 	mul.w	r3, r2, r3
 800884a:	ee07 3a90 	vmov	s15, r3
 800884e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008852:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 8111 	beq.w	8008a80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	2b02      	cmp	r3, #2
 8008862:	f000 8083 	beq.w	800896c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	2b02      	cmp	r3, #2
 800886a:	f200 80a1 	bhi.w	80089b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d056      	beq.n	8008928 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800887a:	e099      	b.n	80089b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800887c:	4b88      	ldr	r3, [pc, #544]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0320 	and.w	r3, r3, #32
 8008884:	2b00      	cmp	r3, #0
 8008886:	d02d      	beq.n	80088e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008888:	4b85      	ldr	r3, [pc, #532]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	08db      	lsrs	r3, r3, #3
 800888e:	f003 0303 	and.w	r3, r3, #3
 8008892:	4a84      	ldr	r2, [pc, #528]	; (8008aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008894:	fa22 f303 	lsr.w	r3, r2, r3
 8008898:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	ee07 3a90 	vmov	s15, r3
 80088a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	ee07 3a90 	vmov	s15, r3
 80088aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b2:	4b7b      	ldr	r3, [pc, #492]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80088e2:	e087      	b.n	80089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008aac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80088f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f6:	4b6a      	ldr	r3, [pc, #424]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008906:	ed97 6a03 	vldr	s12, [r7, #12]
 800890a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800890e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800891a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800891e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008922:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008926:	e065      	b.n	80089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008932:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800893a:	4b59      	ldr	r3, [pc, #356]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894a:	ed97 6a03 	vldr	s12, [r7, #12]
 800894e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800895e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008966:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800896a:	e043      	b.n	80089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	ee07 3a90 	vmov	s15, r3
 8008972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008976:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800897a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800897e:	4b48      	ldr	r3, [pc, #288]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800898e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008992:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800899a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800899e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089ae:	e021      	b.n	80089f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80089be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c2:	4b37      	ldr	r3, [pc, #220]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ca:	ee07 3a90 	vmov	s15, r3
 80089ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80089f4:	4b2a      	ldr	r3, [pc, #168]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f8:	0a5b      	lsrs	r3, r3, #9
 80089fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a1a:	ee17 2a90 	vmov	r2, s15
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008a22:	4b1f      	ldr	r3, [pc, #124]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a26:	0c1b      	lsrs	r3, r3, #16
 8008a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a2c:	ee07 3a90 	vmov	s15, r3
 8008a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a48:	ee17 2a90 	vmov	r2, s15
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008a50:	4b13      	ldr	r3, [pc, #76]	; (8008aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a54:	0e1b      	lsrs	r3, r3, #24
 8008a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a5a:	ee07 3a90 	vmov	s15, r3
 8008a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a76:	ee17 2a90 	vmov	r2, s15
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008a7e:	e008      	b.n	8008a92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	609a      	str	r2, [r3, #8]
}
 8008a92:	bf00      	nop
 8008a94:	3724      	adds	r7, #36	; 0x24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	58024400 	.word	0x58024400
 8008aa4:	03d09000 	.word	0x03d09000
 8008aa8:	46000000 	.word	0x46000000
 8008aac:	4c742400 	.word	0x4c742400
 8008ab0:	4a742400 	.word	0x4a742400
 8008ab4:	4af42400 	.word	0x4af42400

08008ab8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b089      	sub	sp, #36	; 0x24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ac0:	4ba0      	ldr	r3, [pc, #640]	; (8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac4:	f003 0303 	and.w	r3, r3, #3
 8008ac8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8008aca:	4b9e      	ldr	r3, [pc, #632]	; (8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ace:	091b      	lsrs	r3, r3, #4
 8008ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ad4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008ad6:	4b9b      	ldr	r3, [pc, #620]	; (8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008ae0:	4b98      	ldr	r3, [pc, #608]	; (8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae4:	08db      	lsrs	r3, r3, #3
 8008ae6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	fb02 f303 	mul.w	r3, r2, r3
 8008af0:	ee07 3a90 	vmov	s15, r3
 8008af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008af8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 8111 	beq.w	8008d26 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	f000 8083 	beq.w	8008c12 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	f200 80a1 	bhi.w	8008c56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d056      	beq.n	8008bce <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008b20:	e099      	b.n	8008c56 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b22:	4b88      	ldr	r3, [pc, #544]	; (8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f003 0320 	and.w	r3, r3, #32
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d02d      	beq.n	8008b8a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b2e:	4b85      	ldr	r3, [pc, #532]	; (8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	08db      	lsrs	r3, r3, #3
 8008b34:	f003 0303 	and.w	r3, r3, #3
 8008b38:	4a83      	ldr	r2, [pc, #524]	; (8008d48 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8008b3e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	ee07 3a90 	vmov	s15, r3
 8008b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b58:	4b7a      	ldr	r3, [pc, #488]	; (8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b60:	ee07 3a90 	vmov	s15, r3
 8008b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b68:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b6c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008d4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008b70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b84:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008b88:	e087      	b.n	8008c9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	ee07 3a90 	vmov	s15, r3
 8008b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b94:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008d50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008b98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b9c:	4b69      	ldr	r3, [pc, #420]	; (8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba4:	ee07 3a90 	vmov	s15, r3
 8008ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bac:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bb0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008d4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008bb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008bcc:	e065      	b.n	8008c9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	ee07 3a90 	vmov	s15, r3
 8008bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008d54 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008be0:	4b58      	ldr	r3, [pc, #352]	; (8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be8:	ee07 3a90 	vmov	s15, r3
 8008bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bf4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008d4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008bf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c10:	e043      	b.n	8008c9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	ee07 3a90 	vmov	s15, r3
 8008c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c1c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008d58 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c24:	4b47      	ldr	r3, [pc, #284]	; (8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c2c:	ee07 3a90 	vmov	s15, r3
 8008c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c34:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c38:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008d4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c54:	e021      	b.n	8008c9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	ee07 3a90 	vmov	s15, r3
 8008c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c60:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008d50 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c68:	4b36      	ldr	r3, [pc, #216]	; (8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c70:	ee07 3a90 	vmov	s15, r3
 8008c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c78:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c7c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008d4c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c98:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008c9a:	4b2a      	ldr	r3, [pc, #168]	; (8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9e:	0a5b      	lsrs	r3, r3, #9
 8008ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ca4:	ee07 3a90 	vmov	s15, r3
 8008ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cc0:	ee17 2a90 	vmov	r2, s15
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8008cc8:	4b1e      	ldr	r3, [pc, #120]	; (8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ccc:	0c1b      	lsrs	r3, r3, #16
 8008cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cd2:	ee07 3a90 	vmov	s15, r3
 8008cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cee:	ee17 2a90 	vmov	r2, s15
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008cf6:	4b13      	ldr	r3, [pc, #76]	; (8008d44 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfa:	0e1b      	lsrs	r3, r3, #24
 8008cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d00:	ee07 3a90 	vmov	s15, r3
 8008d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d1c:	ee17 2a90 	vmov	r2, s15
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008d24:	e008      	b.n	8008d38 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	609a      	str	r2, [r3, #8]
}
 8008d38:	bf00      	nop
 8008d3a:	3724      	adds	r7, #36	; 0x24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr
 8008d44:	58024400 	.word	0x58024400
 8008d48:	03d09000 	.word	0x03d09000
 8008d4c:	46000000 	.word	0x46000000
 8008d50:	4c742400 	.word	0x4c742400
 8008d54:	4a742400 	.word	0x4a742400
 8008d58:	4af42400 	.word	0x4af42400

08008d5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d66:	2300      	movs	r3, #0
 8008d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008d6a:	4b53      	ldr	r3, [pc, #332]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6e:	f003 0303 	and.w	r3, r3, #3
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d101      	bne.n	8008d7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e099      	b.n	8008eae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008d7a:	4b4f      	ldr	r3, [pc, #316]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a4e      	ldr	r2, [pc, #312]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008d80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d86:	f7f8 ffe5 	bl	8001d54 <HAL_GetTick>
 8008d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008d8c:	e008      	b.n	8008da0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d8e:	f7f8 ffe1 	bl	8001d54 <HAL_GetTick>
 8008d92:	4602      	mov	r2, r0
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d901      	bls.n	8008da0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e086      	b.n	8008eae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008da0:	4b45      	ldr	r3, [pc, #276]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1f0      	bne.n	8008d8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008dac:	4b42      	ldr	r3, [pc, #264]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	031b      	lsls	r3, r3, #12
 8008dba:	493f      	ldr	r1, [pc, #252]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	628b      	str	r3, [r1, #40]	; 0x28
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	025b      	lsls	r3, r3, #9
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	041b      	lsls	r3, r3, #16
 8008dde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008de2:	431a      	orrs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	061b      	lsls	r3, r3, #24
 8008dec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008df0:	4931      	ldr	r1, [pc, #196]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008df6:	4b30      	ldr	r3, [pc, #192]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	492d      	ldr	r1, [pc, #180]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e04:	4313      	orrs	r3, r2
 8008e06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008e08:	4b2b      	ldr	r3, [pc, #172]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0c:	f023 0220 	bic.w	r2, r3, #32
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	4928      	ldr	r1, [pc, #160]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e16:	4313      	orrs	r3, r2
 8008e18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008e1a:	4b27      	ldr	r3, [pc, #156]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1e:	4a26      	ldr	r2, [pc, #152]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e20:	f023 0310 	bic.w	r3, r3, #16
 8008e24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008e26:	4b24      	ldr	r3, [pc, #144]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e2a:	4b24      	ldr	r3, [pc, #144]	; (8008ebc <RCCEx_PLL2_Config+0x160>)
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	69d2      	ldr	r2, [r2, #28]
 8008e32:	00d2      	lsls	r2, r2, #3
 8008e34:	4920      	ldr	r1, [pc, #128]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008e3a:	4b1f      	ldr	r3, [pc, #124]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3e:	4a1e      	ldr	r2, [pc, #120]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e40:	f043 0310 	orr.w	r3, r3, #16
 8008e44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d106      	bne.n	8008e5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008e4c:	4b1a      	ldr	r3, [pc, #104]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e50:	4a19      	ldr	r2, [pc, #100]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e58:	e00f      	b.n	8008e7a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d106      	bne.n	8008e6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008e60:	4b15      	ldr	r3, [pc, #84]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e64:	4a14      	ldr	r2, [pc, #80]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008e6c:	e005      	b.n	8008e7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008e6e:	4b12      	ldr	r3, [pc, #72]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e72:	4a11      	ldr	r2, [pc, #68]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a0e      	ldr	r2, [pc, #56]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008e80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e86:	f7f8 ff65 	bl	8001d54 <HAL_GetTick>
 8008e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008e8c:	e008      	b.n	8008ea0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008e8e:	f7f8 ff61 	bl	8001d54 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d901      	bls.n	8008ea0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e006      	b.n	8008eae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ea0:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <RCCEx_PLL2_Config+0x15c>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d0f0      	beq.n	8008e8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	58024400 	.word	0x58024400
 8008ebc:	ffff0007 	.word	0xffff0007

08008ec0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ece:	4b53      	ldr	r3, [pc, #332]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed2:	f003 0303 	and.w	r3, r3, #3
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	d101      	bne.n	8008ede <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e099      	b.n	8009012 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008ede:	4b4f      	ldr	r3, [pc, #316]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a4e      	ldr	r2, [pc, #312]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eea:	f7f8 ff33 	bl	8001d54 <HAL_GetTick>
 8008eee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ef0:	e008      	b.n	8008f04 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008ef2:	f7f8 ff2f 	bl	8001d54 <HAL_GetTick>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d901      	bls.n	8008f04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f00:	2303      	movs	r3, #3
 8008f02:	e086      	b.n	8009012 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f04:	4b45      	ldr	r3, [pc, #276]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1f0      	bne.n	8008ef2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008f10:	4b42      	ldr	r3, [pc, #264]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f14:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	051b      	lsls	r3, r3, #20
 8008f1e:	493f      	ldr	r1, [pc, #252]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	628b      	str	r3, [r1, #40]	; 0x28
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	3b01      	subs	r3, #1
 8008f34:	025b      	lsls	r3, r3, #9
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	041b      	lsls	r3, r3, #16
 8008f42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f46:	431a      	orrs	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	061b      	lsls	r3, r3, #24
 8008f50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f54:	4931      	ldr	r1, [pc, #196]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008f5a:	4b30      	ldr	r3, [pc, #192]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	492d      	ldr	r1, [pc, #180]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008f6c:	4b2b      	ldr	r3, [pc, #172]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f70:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	4928      	ldr	r1, [pc, #160]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008f7e:	4b27      	ldr	r3, [pc, #156]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f82:	4a26      	ldr	r2, [pc, #152]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008f8a:	4b24      	ldr	r3, [pc, #144]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f8e:	4b24      	ldr	r3, [pc, #144]	; (8009020 <RCCEx_PLL3_Config+0x160>)
 8008f90:	4013      	ands	r3, r2
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	69d2      	ldr	r2, [r2, #28]
 8008f96:	00d2      	lsls	r2, r2, #3
 8008f98:	4920      	ldr	r1, [pc, #128]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008f9e:	4b1f      	ldr	r3, [pc, #124]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa2:	4a1e      	ldr	r2, [pc, #120]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d106      	bne.n	8008fbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008fb0:	4b1a      	ldr	r3, [pc, #104]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb4:	4a19      	ldr	r2, [pc, #100]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008fb6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008fba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008fbc:	e00f      	b.n	8008fde <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d106      	bne.n	8008fd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008fc4:	4b15      	ldr	r3, [pc, #84]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	4a14      	ldr	r2, [pc, #80]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008fca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008fce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008fd0:	e005      	b.n	8008fde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008fd2:	4b12      	ldr	r3, [pc, #72]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd6:	4a11      	ldr	r2, [pc, #68]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008fd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fdc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008fde:	4b0f      	ldr	r3, [pc, #60]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a0e      	ldr	r2, [pc, #56]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8008fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fea:	f7f8 feb3 	bl	8001d54 <HAL_GetTick>
 8008fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ff0:	e008      	b.n	8009004 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008ff2:	f7f8 feaf 	bl	8001d54 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d901      	bls.n	8009004 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e006      	b.n	8009012 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009004:	4b05      	ldr	r3, [pc, #20]	; (800901c <RCCEx_PLL3_Config+0x15c>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0f0      	beq.n	8008ff2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009010:	7bfb      	ldrb	r3, [r7, #15]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	58024400 	.word	0x58024400
 8009020:	ffff0007 	.word	0xffff0007

08009024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e049      	b.n	80090ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d106      	bne.n	8009050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7f8 fcde 	bl	8001a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2202      	movs	r2, #2
 8009054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	3304      	adds	r3, #4
 8009060:	4619      	mov	r1, r3
 8009062:	4610      	mov	r0, r2
 8009064:	f000 f99e 	bl	80093a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
	...

080090d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d001      	beq.n	80090ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e04c      	b.n	8009186 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2202      	movs	r2, #2
 80090f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a26      	ldr	r2, [pc, #152]	; (8009194 <HAL_TIM_Base_Start+0xc0>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d022      	beq.n	8009144 <HAL_TIM_Base_Start+0x70>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009106:	d01d      	beq.n	8009144 <HAL_TIM_Base_Start+0x70>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a22      	ldr	r2, [pc, #136]	; (8009198 <HAL_TIM_Base_Start+0xc4>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d018      	beq.n	8009144 <HAL_TIM_Base_Start+0x70>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a21      	ldr	r2, [pc, #132]	; (800919c <HAL_TIM_Base_Start+0xc8>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d013      	beq.n	8009144 <HAL_TIM_Base_Start+0x70>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a1f      	ldr	r2, [pc, #124]	; (80091a0 <HAL_TIM_Base_Start+0xcc>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d00e      	beq.n	8009144 <HAL_TIM_Base_Start+0x70>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a1e      	ldr	r2, [pc, #120]	; (80091a4 <HAL_TIM_Base_Start+0xd0>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d009      	beq.n	8009144 <HAL_TIM_Base_Start+0x70>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a1c      	ldr	r2, [pc, #112]	; (80091a8 <HAL_TIM_Base_Start+0xd4>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d004      	beq.n	8009144 <HAL_TIM_Base_Start+0x70>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a1b      	ldr	r2, [pc, #108]	; (80091ac <HAL_TIM_Base_Start+0xd8>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d115      	bne.n	8009170 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689a      	ldr	r2, [r3, #8]
 800914a:	4b19      	ldr	r3, [pc, #100]	; (80091b0 <HAL_TIM_Base_Start+0xdc>)
 800914c:	4013      	ands	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b06      	cmp	r3, #6
 8009154:	d015      	beq.n	8009182 <HAL_TIM_Base_Start+0xae>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800915c:	d011      	beq.n	8009182 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f042 0201 	orr.w	r2, r2, #1
 800916c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800916e:	e008      	b.n	8009182 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f042 0201 	orr.w	r2, r2, #1
 800917e:	601a      	str	r2, [r3, #0]
 8009180:	e000      	b.n	8009184 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009182:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	40010000 	.word	0x40010000
 8009198:	40000400 	.word	0x40000400
 800919c:	40000800 	.word	0x40000800
 80091a0:	40000c00 	.word	0x40000c00
 80091a4:	40010400 	.word	0x40010400
 80091a8:	40001800 	.word	0x40001800
 80091ac:	40014000 	.word	0x40014000
 80091b0:	00010007 	.word	0x00010007

080091b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d101      	bne.n	80091d0 <HAL_TIM_ConfigClockSource+0x1c>
 80091cc:	2302      	movs	r3, #2
 80091ce:	e0dc      	b.n	800938a <HAL_TIM_ConfigClockSource+0x1d6>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2202      	movs	r2, #2
 80091dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	4b6a      	ldr	r3, [pc, #424]	; (8009394 <HAL_TIM_ConfigClockSource+0x1e0>)
 80091ec:	4013      	ands	r3, r2
 80091ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a64      	ldr	r2, [pc, #400]	; (8009398 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009206:	4293      	cmp	r3, r2
 8009208:	f000 80a9 	beq.w	800935e <HAL_TIM_ConfigClockSource+0x1aa>
 800920c:	4a62      	ldr	r2, [pc, #392]	; (8009398 <HAL_TIM_ConfigClockSource+0x1e4>)
 800920e:	4293      	cmp	r3, r2
 8009210:	f200 80ae 	bhi.w	8009370 <HAL_TIM_ConfigClockSource+0x1bc>
 8009214:	4a61      	ldr	r2, [pc, #388]	; (800939c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009216:	4293      	cmp	r3, r2
 8009218:	f000 80a1 	beq.w	800935e <HAL_TIM_ConfigClockSource+0x1aa>
 800921c:	4a5f      	ldr	r2, [pc, #380]	; (800939c <HAL_TIM_ConfigClockSource+0x1e8>)
 800921e:	4293      	cmp	r3, r2
 8009220:	f200 80a6 	bhi.w	8009370 <HAL_TIM_ConfigClockSource+0x1bc>
 8009224:	4a5e      	ldr	r2, [pc, #376]	; (80093a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009226:	4293      	cmp	r3, r2
 8009228:	f000 8099 	beq.w	800935e <HAL_TIM_ConfigClockSource+0x1aa>
 800922c:	4a5c      	ldr	r2, [pc, #368]	; (80093a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800922e:	4293      	cmp	r3, r2
 8009230:	f200 809e 	bhi.w	8009370 <HAL_TIM_ConfigClockSource+0x1bc>
 8009234:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009238:	f000 8091 	beq.w	800935e <HAL_TIM_ConfigClockSource+0x1aa>
 800923c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009240:	f200 8096 	bhi.w	8009370 <HAL_TIM_ConfigClockSource+0x1bc>
 8009244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009248:	f000 8089 	beq.w	800935e <HAL_TIM_ConfigClockSource+0x1aa>
 800924c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009250:	f200 808e 	bhi.w	8009370 <HAL_TIM_ConfigClockSource+0x1bc>
 8009254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009258:	d03e      	beq.n	80092d8 <HAL_TIM_ConfigClockSource+0x124>
 800925a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800925e:	f200 8087 	bhi.w	8009370 <HAL_TIM_ConfigClockSource+0x1bc>
 8009262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009266:	f000 8086 	beq.w	8009376 <HAL_TIM_ConfigClockSource+0x1c2>
 800926a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800926e:	d87f      	bhi.n	8009370 <HAL_TIM_ConfigClockSource+0x1bc>
 8009270:	2b70      	cmp	r3, #112	; 0x70
 8009272:	d01a      	beq.n	80092aa <HAL_TIM_ConfigClockSource+0xf6>
 8009274:	2b70      	cmp	r3, #112	; 0x70
 8009276:	d87b      	bhi.n	8009370 <HAL_TIM_ConfigClockSource+0x1bc>
 8009278:	2b60      	cmp	r3, #96	; 0x60
 800927a:	d050      	beq.n	800931e <HAL_TIM_ConfigClockSource+0x16a>
 800927c:	2b60      	cmp	r3, #96	; 0x60
 800927e:	d877      	bhi.n	8009370 <HAL_TIM_ConfigClockSource+0x1bc>
 8009280:	2b50      	cmp	r3, #80	; 0x50
 8009282:	d03c      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x14a>
 8009284:	2b50      	cmp	r3, #80	; 0x50
 8009286:	d873      	bhi.n	8009370 <HAL_TIM_ConfigClockSource+0x1bc>
 8009288:	2b40      	cmp	r3, #64	; 0x40
 800928a:	d058      	beq.n	800933e <HAL_TIM_ConfigClockSource+0x18a>
 800928c:	2b40      	cmp	r3, #64	; 0x40
 800928e:	d86f      	bhi.n	8009370 <HAL_TIM_ConfigClockSource+0x1bc>
 8009290:	2b30      	cmp	r3, #48	; 0x30
 8009292:	d064      	beq.n	800935e <HAL_TIM_ConfigClockSource+0x1aa>
 8009294:	2b30      	cmp	r3, #48	; 0x30
 8009296:	d86b      	bhi.n	8009370 <HAL_TIM_ConfigClockSource+0x1bc>
 8009298:	2b20      	cmp	r3, #32
 800929a:	d060      	beq.n	800935e <HAL_TIM_ConfigClockSource+0x1aa>
 800929c:	2b20      	cmp	r3, #32
 800929e:	d867      	bhi.n	8009370 <HAL_TIM_ConfigClockSource+0x1bc>
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d05c      	beq.n	800935e <HAL_TIM_ConfigClockSource+0x1aa>
 80092a4:	2b10      	cmp	r3, #16
 80092a6:	d05a      	beq.n	800935e <HAL_TIM_ConfigClockSource+0x1aa>
 80092a8:	e062      	b.n	8009370 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6818      	ldr	r0, [r3, #0]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	6899      	ldr	r1, [r3, #8]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	f000 f98b 	bl	80095d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68ba      	ldr	r2, [r7, #8]
 80092d4:	609a      	str	r2, [r3, #8]
      break;
 80092d6:	e04f      	b.n	8009378 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6818      	ldr	r0, [r3, #0]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	6899      	ldr	r1, [r3, #8]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	f000 f974 	bl	80095d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	689a      	ldr	r2, [r3, #8]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092fa:	609a      	str	r2, [r3, #8]
      break;
 80092fc:	e03c      	b.n	8009378 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6818      	ldr	r0, [r3, #0]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	6859      	ldr	r1, [r3, #4]
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	461a      	mov	r2, r3
 800930c:	f000 f8e4 	bl	80094d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2150      	movs	r1, #80	; 0x50
 8009316:	4618      	mov	r0, r3
 8009318:	f000 f93e 	bl	8009598 <TIM_ITRx_SetConfig>
      break;
 800931c:	e02c      	b.n	8009378 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6818      	ldr	r0, [r3, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	6859      	ldr	r1, [r3, #4]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	461a      	mov	r2, r3
 800932c:	f000 f903 	bl	8009536 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2160      	movs	r1, #96	; 0x60
 8009336:	4618      	mov	r0, r3
 8009338:	f000 f92e 	bl	8009598 <TIM_ITRx_SetConfig>
      break;
 800933c:	e01c      	b.n	8009378 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6818      	ldr	r0, [r3, #0]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	6859      	ldr	r1, [r3, #4]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	461a      	mov	r2, r3
 800934c:	f000 f8c4 	bl	80094d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2140      	movs	r1, #64	; 0x40
 8009356:	4618      	mov	r0, r3
 8009358:	f000 f91e 	bl	8009598 <TIM_ITRx_SetConfig>
      break;
 800935c:	e00c      	b.n	8009378 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4619      	mov	r1, r3
 8009368:	4610      	mov	r0, r2
 800936a:	f000 f915 	bl	8009598 <TIM_ITRx_SetConfig>
      break;
 800936e:	e003      	b.n	8009378 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	73fb      	strb	r3, [r7, #15]
      break;
 8009374:	e000      	b.n	8009378 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009376:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009388:	7bfb      	ldrb	r3, [r7, #15]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	ffceff88 	.word	0xffceff88
 8009398:	00100040 	.word	0x00100040
 800939c:	00100030 	.word	0x00100030
 80093a0:	00100020 	.word	0x00100020

080093a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a40      	ldr	r2, [pc, #256]	; (80094b8 <TIM_Base_SetConfig+0x114>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d013      	beq.n	80093e4 <TIM_Base_SetConfig+0x40>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c2:	d00f      	beq.n	80093e4 <TIM_Base_SetConfig+0x40>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a3d      	ldr	r2, [pc, #244]	; (80094bc <TIM_Base_SetConfig+0x118>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d00b      	beq.n	80093e4 <TIM_Base_SetConfig+0x40>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a3c      	ldr	r2, [pc, #240]	; (80094c0 <TIM_Base_SetConfig+0x11c>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d007      	beq.n	80093e4 <TIM_Base_SetConfig+0x40>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a3b      	ldr	r2, [pc, #236]	; (80094c4 <TIM_Base_SetConfig+0x120>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d003      	beq.n	80093e4 <TIM_Base_SetConfig+0x40>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a3a      	ldr	r2, [pc, #232]	; (80094c8 <TIM_Base_SetConfig+0x124>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d108      	bne.n	80093f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a2f      	ldr	r2, [pc, #188]	; (80094b8 <TIM_Base_SetConfig+0x114>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d01f      	beq.n	800943e <TIM_Base_SetConfig+0x9a>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009404:	d01b      	beq.n	800943e <TIM_Base_SetConfig+0x9a>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a2c      	ldr	r2, [pc, #176]	; (80094bc <TIM_Base_SetConfig+0x118>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d017      	beq.n	800943e <TIM_Base_SetConfig+0x9a>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a2b      	ldr	r2, [pc, #172]	; (80094c0 <TIM_Base_SetConfig+0x11c>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d013      	beq.n	800943e <TIM_Base_SetConfig+0x9a>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a2a      	ldr	r2, [pc, #168]	; (80094c4 <TIM_Base_SetConfig+0x120>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d00f      	beq.n	800943e <TIM_Base_SetConfig+0x9a>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a29      	ldr	r2, [pc, #164]	; (80094c8 <TIM_Base_SetConfig+0x124>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d00b      	beq.n	800943e <TIM_Base_SetConfig+0x9a>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a28      	ldr	r2, [pc, #160]	; (80094cc <TIM_Base_SetConfig+0x128>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d007      	beq.n	800943e <TIM_Base_SetConfig+0x9a>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a27      	ldr	r2, [pc, #156]	; (80094d0 <TIM_Base_SetConfig+0x12c>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d003      	beq.n	800943e <TIM_Base_SetConfig+0x9a>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a26      	ldr	r2, [pc, #152]	; (80094d4 <TIM_Base_SetConfig+0x130>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d108      	bne.n	8009450 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	4313      	orrs	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	695b      	ldr	r3, [r3, #20]
 800945a:	4313      	orrs	r3, r2
 800945c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	689a      	ldr	r2, [r3, #8]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a10      	ldr	r2, [pc, #64]	; (80094b8 <TIM_Base_SetConfig+0x114>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d00f      	beq.n	800949c <TIM_Base_SetConfig+0xf8>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a12      	ldr	r2, [pc, #72]	; (80094c8 <TIM_Base_SetConfig+0x124>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d00b      	beq.n	800949c <TIM_Base_SetConfig+0xf8>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a11      	ldr	r2, [pc, #68]	; (80094cc <TIM_Base_SetConfig+0x128>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d007      	beq.n	800949c <TIM_Base_SetConfig+0xf8>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a10      	ldr	r2, [pc, #64]	; (80094d0 <TIM_Base_SetConfig+0x12c>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d003      	beq.n	800949c <TIM_Base_SetConfig+0xf8>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a0f      	ldr	r2, [pc, #60]	; (80094d4 <TIM_Base_SetConfig+0x130>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d103      	bne.n	80094a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	691a      	ldr	r2, [r3, #16]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	615a      	str	r2, [r3, #20]
}
 80094aa:	bf00      	nop
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	40010000 	.word	0x40010000
 80094bc:	40000400 	.word	0x40000400
 80094c0:	40000800 	.word	0x40000800
 80094c4:	40000c00 	.word	0x40000c00
 80094c8:	40010400 	.word	0x40010400
 80094cc:	40014000 	.word	0x40014000
 80094d0:	40014400 	.word	0x40014400
 80094d4:	40014800 	.word	0x40014800

080094d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094d8:	b480      	push	{r7}
 80094da:	b087      	sub	sp, #28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6a1b      	ldr	r3, [r3, #32]
 80094e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	f023 0201 	bic.w	r2, r3, #1
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	011b      	lsls	r3, r3, #4
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	4313      	orrs	r3, r2
 800950c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f023 030a 	bic.w	r3, r3, #10
 8009514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	4313      	orrs	r3, r2
 800951c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	621a      	str	r2, [r3, #32]
}
 800952a:	bf00      	nop
 800952c:	371c      	adds	r7, #28
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr

08009536 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009536:	b480      	push	{r7}
 8009538:	b087      	sub	sp, #28
 800953a:	af00      	add	r7, sp, #0
 800953c:	60f8      	str	r0, [r7, #12]
 800953e:	60b9      	str	r1, [r7, #8]
 8009540:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	f023 0210 	bic.w	r2, r3, #16
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6a1b      	ldr	r3, [r3, #32]
 8009558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009560:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	031b      	lsls	r3, r3, #12
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	4313      	orrs	r3, r2
 800956a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009572:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	011b      	lsls	r3, r3, #4
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	4313      	orrs	r3, r2
 800957c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	621a      	str	r2, [r3, #32]
}
 800958a:	bf00      	nop
 800958c:	371c      	adds	r7, #28
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
	...

08009598 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	4b09      	ldr	r3, [pc, #36]	; (80095d0 <TIM_ITRx_SetConfig+0x38>)
 80095ac:	4013      	ands	r3, r2
 80095ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	f043 0307 	orr.w	r3, r3, #7
 80095ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	609a      	str	r2, [r3, #8]
}
 80095c2:	bf00      	nop
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	ffcfff8f 	.word	0xffcfff8f

080095d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b087      	sub	sp, #28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
 80095e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	021a      	lsls	r2, r3, #8
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	431a      	orrs	r2, r3
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	4313      	orrs	r3, r2
 8009600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	609a      	str	r2, [r3, #8]
}
 8009608:	bf00      	nop
 800960a:	371c      	adds	r7, #28
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009624:	2b01      	cmp	r3, #1
 8009626:	d101      	bne.n	800962c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009628:	2302      	movs	r3, #2
 800962a:	e06d      	b.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2202      	movs	r2, #2
 8009638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a30      	ldr	r2, [pc, #192]	; (8009714 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d004      	beq.n	8009660 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a2f      	ldr	r2, [pc, #188]	; (8009718 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d108      	bne.n	8009672 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009666:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	4313      	orrs	r3, r2
 8009670:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009678:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	4313      	orrs	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a20      	ldr	r2, [pc, #128]	; (8009714 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d022      	beq.n	80096dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800969e:	d01d      	beq.n	80096dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a1d      	ldr	r2, [pc, #116]	; (800971c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d018      	beq.n	80096dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a1c      	ldr	r2, [pc, #112]	; (8009720 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d013      	beq.n	80096dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a1a      	ldr	r2, [pc, #104]	; (8009724 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d00e      	beq.n	80096dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a15      	ldr	r2, [pc, #84]	; (8009718 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d009      	beq.n	80096dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a16      	ldr	r2, [pc, #88]	; (8009728 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d004      	beq.n	80096dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a15      	ldr	r2, [pc, #84]	; (800972c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d10c      	bne.n	80096f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	40010000 	.word	0x40010000
 8009718:	40010400 	.word	0x40010400
 800971c:	40000400 	.word	0x40000400
 8009720:	40000800 	.word	0x40000800
 8009724:	40000c00 	.word	0x40000c00
 8009728:	40001800 	.word	0x40001800
 800972c:	40014000 	.word	0x40014000

08009730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e042      	b.n	80097c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009748:	2b00      	cmp	r3, #0
 800974a:	d106      	bne.n	800975a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f7f8 f9df 	bl	8001b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2224      	movs	r2, #36	; 0x24
 800975e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f022 0201 	bic.w	r2, r2, #1
 8009770:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f82c 	bl	80097d0 <UART_SetConfig>
 8009778:	4603      	mov	r3, r0
 800977a:	2b01      	cmp	r3, #1
 800977c:	d101      	bne.n	8009782 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e022      	b.n	80097c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fe8c 	bl	800a4a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800979e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	689a      	ldr	r2, [r3, #8]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0201 	orr.w	r2, r2, #1
 80097be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 ff13 	bl	800a5ec <UART_CheckIdleState>
 80097c6:	4603      	mov	r3, r0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3708      	adds	r7, #8
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097d4:	b092      	sub	sp, #72	; 0x48
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	689a      	ldr	r2, [r3, #8]
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	431a      	orrs	r2, r3
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	431a      	orrs	r2, r3
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	69db      	ldr	r3, [r3, #28]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	4bbe      	ldr	r3, [pc, #760]	; (8009af8 <UART_SetConfig+0x328>)
 8009800:	4013      	ands	r3, r2
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	6812      	ldr	r2, [r2, #0]
 8009806:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009808:	430b      	orrs	r3, r1
 800980a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	68da      	ldr	r2, [r3, #12]
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	430a      	orrs	r2, r1
 8009820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4ab3      	ldr	r2, [pc, #716]	; (8009afc <UART_SetConfig+0x32c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d004      	beq.n	800983c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009838:	4313      	orrs	r3, r2
 800983a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689a      	ldr	r2, [r3, #8]
 8009842:	4baf      	ldr	r3, [pc, #700]	; (8009b00 <UART_SetConfig+0x330>)
 8009844:	4013      	ands	r3, r2
 8009846:	697a      	ldr	r2, [r7, #20]
 8009848:	6812      	ldr	r2, [r2, #0]
 800984a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800984c:	430b      	orrs	r3, r1
 800984e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009856:	f023 010f 	bic.w	r1, r3, #15
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4aa6      	ldr	r2, [pc, #664]	; (8009b04 <UART_SetConfig+0x334>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d177      	bne.n	8009960 <UART_SetConfig+0x190>
 8009870:	4ba5      	ldr	r3, [pc, #660]	; (8009b08 <UART_SetConfig+0x338>)
 8009872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009874:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009878:	2b28      	cmp	r3, #40	; 0x28
 800987a:	d86d      	bhi.n	8009958 <UART_SetConfig+0x188>
 800987c:	a201      	add	r2, pc, #4	; (adr r2, 8009884 <UART_SetConfig+0xb4>)
 800987e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009882:	bf00      	nop
 8009884:	08009929 	.word	0x08009929
 8009888:	08009959 	.word	0x08009959
 800988c:	08009959 	.word	0x08009959
 8009890:	08009959 	.word	0x08009959
 8009894:	08009959 	.word	0x08009959
 8009898:	08009959 	.word	0x08009959
 800989c:	08009959 	.word	0x08009959
 80098a0:	08009959 	.word	0x08009959
 80098a4:	08009931 	.word	0x08009931
 80098a8:	08009959 	.word	0x08009959
 80098ac:	08009959 	.word	0x08009959
 80098b0:	08009959 	.word	0x08009959
 80098b4:	08009959 	.word	0x08009959
 80098b8:	08009959 	.word	0x08009959
 80098bc:	08009959 	.word	0x08009959
 80098c0:	08009959 	.word	0x08009959
 80098c4:	08009939 	.word	0x08009939
 80098c8:	08009959 	.word	0x08009959
 80098cc:	08009959 	.word	0x08009959
 80098d0:	08009959 	.word	0x08009959
 80098d4:	08009959 	.word	0x08009959
 80098d8:	08009959 	.word	0x08009959
 80098dc:	08009959 	.word	0x08009959
 80098e0:	08009959 	.word	0x08009959
 80098e4:	08009941 	.word	0x08009941
 80098e8:	08009959 	.word	0x08009959
 80098ec:	08009959 	.word	0x08009959
 80098f0:	08009959 	.word	0x08009959
 80098f4:	08009959 	.word	0x08009959
 80098f8:	08009959 	.word	0x08009959
 80098fc:	08009959 	.word	0x08009959
 8009900:	08009959 	.word	0x08009959
 8009904:	08009949 	.word	0x08009949
 8009908:	08009959 	.word	0x08009959
 800990c:	08009959 	.word	0x08009959
 8009910:	08009959 	.word	0x08009959
 8009914:	08009959 	.word	0x08009959
 8009918:	08009959 	.word	0x08009959
 800991c:	08009959 	.word	0x08009959
 8009920:	08009959 	.word	0x08009959
 8009924:	08009951 	.word	0x08009951
 8009928:	2301      	movs	r3, #1
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800992e:	e326      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009930:	2304      	movs	r3, #4
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009936:	e322      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009938:	2308      	movs	r3, #8
 800993a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800993e:	e31e      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009940:	2310      	movs	r3, #16
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009946:	e31a      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009948:	2320      	movs	r3, #32
 800994a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800994e:	e316      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009950:	2340      	movs	r3, #64	; 0x40
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009956:	e312      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009958:	2380      	movs	r3, #128	; 0x80
 800995a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800995e:	e30e      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a69      	ldr	r2, [pc, #420]	; (8009b0c <UART_SetConfig+0x33c>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d130      	bne.n	80099cc <UART_SetConfig+0x1fc>
 800996a:	4b67      	ldr	r3, [pc, #412]	; (8009b08 <UART_SetConfig+0x338>)
 800996c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800996e:	f003 0307 	and.w	r3, r3, #7
 8009972:	2b05      	cmp	r3, #5
 8009974:	d826      	bhi.n	80099c4 <UART_SetConfig+0x1f4>
 8009976:	a201      	add	r2, pc, #4	; (adr r2, 800997c <UART_SetConfig+0x1ac>)
 8009978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997c:	08009995 	.word	0x08009995
 8009980:	0800999d 	.word	0x0800999d
 8009984:	080099a5 	.word	0x080099a5
 8009988:	080099ad 	.word	0x080099ad
 800998c:	080099b5 	.word	0x080099b5
 8009990:	080099bd 	.word	0x080099bd
 8009994:	2300      	movs	r3, #0
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999a:	e2f0      	b.n	8009f7e <UART_SetConfig+0x7ae>
 800999c:	2304      	movs	r3, #4
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a2:	e2ec      	b.n	8009f7e <UART_SetConfig+0x7ae>
 80099a4:	2308      	movs	r3, #8
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099aa:	e2e8      	b.n	8009f7e <UART_SetConfig+0x7ae>
 80099ac:	2310      	movs	r3, #16
 80099ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099b2:	e2e4      	b.n	8009f7e <UART_SetConfig+0x7ae>
 80099b4:	2320      	movs	r3, #32
 80099b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ba:	e2e0      	b.n	8009f7e <UART_SetConfig+0x7ae>
 80099bc:	2340      	movs	r3, #64	; 0x40
 80099be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c2:	e2dc      	b.n	8009f7e <UART_SetConfig+0x7ae>
 80099c4:	2380      	movs	r3, #128	; 0x80
 80099c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ca:	e2d8      	b.n	8009f7e <UART_SetConfig+0x7ae>
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a4f      	ldr	r2, [pc, #316]	; (8009b10 <UART_SetConfig+0x340>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d130      	bne.n	8009a38 <UART_SetConfig+0x268>
 80099d6:	4b4c      	ldr	r3, [pc, #304]	; (8009b08 <UART_SetConfig+0x338>)
 80099d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099da:	f003 0307 	and.w	r3, r3, #7
 80099de:	2b05      	cmp	r3, #5
 80099e0:	d826      	bhi.n	8009a30 <UART_SetConfig+0x260>
 80099e2:	a201      	add	r2, pc, #4	; (adr r2, 80099e8 <UART_SetConfig+0x218>)
 80099e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e8:	08009a01 	.word	0x08009a01
 80099ec:	08009a09 	.word	0x08009a09
 80099f0:	08009a11 	.word	0x08009a11
 80099f4:	08009a19 	.word	0x08009a19
 80099f8:	08009a21 	.word	0x08009a21
 80099fc:	08009a29 	.word	0x08009a29
 8009a00:	2300      	movs	r3, #0
 8009a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a06:	e2ba      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009a08:	2304      	movs	r3, #4
 8009a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0e:	e2b6      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009a10:	2308      	movs	r3, #8
 8009a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a16:	e2b2      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009a18:	2310      	movs	r3, #16
 8009a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a1e:	e2ae      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009a20:	2320      	movs	r3, #32
 8009a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a26:	e2aa      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009a28:	2340      	movs	r3, #64	; 0x40
 8009a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2e:	e2a6      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009a30:	2380      	movs	r3, #128	; 0x80
 8009a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a36:	e2a2      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a35      	ldr	r2, [pc, #212]	; (8009b14 <UART_SetConfig+0x344>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d130      	bne.n	8009aa4 <UART_SetConfig+0x2d4>
 8009a42:	4b31      	ldr	r3, [pc, #196]	; (8009b08 <UART_SetConfig+0x338>)
 8009a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a46:	f003 0307 	and.w	r3, r3, #7
 8009a4a:	2b05      	cmp	r3, #5
 8009a4c:	d826      	bhi.n	8009a9c <UART_SetConfig+0x2cc>
 8009a4e:	a201      	add	r2, pc, #4	; (adr r2, 8009a54 <UART_SetConfig+0x284>)
 8009a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a54:	08009a6d 	.word	0x08009a6d
 8009a58:	08009a75 	.word	0x08009a75
 8009a5c:	08009a7d 	.word	0x08009a7d
 8009a60:	08009a85 	.word	0x08009a85
 8009a64:	08009a8d 	.word	0x08009a8d
 8009a68:	08009a95 	.word	0x08009a95
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a72:	e284      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009a74:	2304      	movs	r3, #4
 8009a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7a:	e280      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009a7c:	2308      	movs	r3, #8
 8009a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a82:	e27c      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009a84:	2310      	movs	r3, #16
 8009a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a8a:	e278      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009a8c:	2320      	movs	r3, #32
 8009a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a92:	e274      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009a94:	2340      	movs	r3, #64	; 0x40
 8009a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a9a:	e270      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009a9c:	2380      	movs	r3, #128	; 0x80
 8009a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aa2:	e26c      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a1b      	ldr	r2, [pc, #108]	; (8009b18 <UART_SetConfig+0x348>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d142      	bne.n	8009b34 <UART_SetConfig+0x364>
 8009aae:	4b16      	ldr	r3, [pc, #88]	; (8009b08 <UART_SetConfig+0x338>)
 8009ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab2:	f003 0307 	and.w	r3, r3, #7
 8009ab6:	2b05      	cmp	r3, #5
 8009ab8:	d838      	bhi.n	8009b2c <UART_SetConfig+0x35c>
 8009aba:	a201      	add	r2, pc, #4	; (adr r2, 8009ac0 <UART_SetConfig+0x2f0>)
 8009abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac0:	08009ad9 	.word	0x08009ad9
 8009ac4:	08009ae1 	.word	0x08009ae1
 8009ac8:	08009ae9 	.word	0x08009ae9
 8009acc:	08009af1 	.word	0x08009af1
 8009ad0:	08009b1d 	.word	0x08009b1d
 8009ad4:	08009b25 	.word	0x08009b25
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ade:	e24e      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009ae0:	2304      	movs	r3, #4
 8009ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae6:	e24a      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009ae8:	2308      	movs	r3, #8
 8009aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aee:	e246      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009af0:	2310      	movs	r3, #16
 8009af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af6:	e242      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009af8:	cfff69f3 	.word	0xcfff69f3
 8009afc:	58000c00 	.word	0x58000c00
 8009b00:	11fff4ff 	.word	0x11fff4ff
 8009b04:	40011000 	.word	0x40011000
 8009b08:	58024400 	.word	0x58024400
 8009b0c:	40004400 	.word	0x40004400
 8009b10:	40004800 	.word	0x40004800
 8009b14:	40004c00 	.word	0x40004c00
 8009b18:	40005000 	.word	0x40005000
 8009b1c:	2320      	movs	r3, #32
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b22:	e22c      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009b24:	2340      	movs	r3, #64	; 0x40
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2a:	e228      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009b2c:	2380      	movs	r3, #128	; 0x80
 8009b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b32:	e224      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4ab1      	ldr	r2, [pc, #708]	; (8009e00 <UART_SetConfig+0x630>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d176      	bne.n	8009c2c <UART_SetConfig+0x45c>
 8009b3e:	4bb1      	ldr	r3, [pc, #708]	; (8009e04 <UART_SetConfig+0x634>)
 8009b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b46:	2b28      	cmp	r3, #40	; 0x28
 8009b48:	d86c      	bhi.n	8009c24 <UART_SetConfig+0x454>
 8009b4a:	a201      	add	r2, pc, #4	; (adr r2, 8009b50 <UART_SetConfig+0x380>)
 8009b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b50:	08009bf5 	.word	0x08009bf5
 8009b54:	08009c25 	.word	0x08009c25
 8009b58:	08009c25 	.word	0x08009c25
 8009b5c:	08009c25 	.word	0x08009c25
 8009b60:	08009c25 	.word	0x08009c25
 8009b64:	08009c25 	.word	0x08009c25
 8009b68:	08009c25 	.word	0x08009c25
 8009b6c:	08009c25 	.word	0x08009c25
 8009b70:	08009bfd 	.word	0x08009bfd
 8009b74:	08009c25 	.word	0x08009c25
 8009b78:	08009c25 	.word	0x08009c25
 8009b7c:	08009c25 	.word	0x08009c25
 8009b80:	08009c25 	.word	0x08009c25
 8009b84:	08009c25 	.word	0x08009c25
 8009b88:	08009c25 	.word	0x08009c25
 8009b8c:	08009c25 	.word	0x08009c25
 8009b90:	08009c05 	.word	0x08009c05
 8009b94:	08009c25 	.word	0x08009c25
 8009b98:	08009c25 	.word	0x08009c25
 8009b9c:	08009c25 	.word	0x08009c25
 8009ba0:	08009c25 	.word	0x08009c25
 8009ba4:	08009c25 	.word	0x08009c25
 8009ba8:	08009c25 	.word	0x08009c25
 8009bac:	08009c25 	.word	0x08009c25
 8009bb0:	08009c0d 	.word	0x08009c0d
 8009bb4:	08009c25 	.word	0x08009c25
 8009bb8:	08009c25 	.word	0x08009c25
 8009bbc:	08009c25 	.word	0x08009c25
 8009bc0:	08009c25 	.word	0x08009c25
 8009bc4:	08009c25 	.word	0x08009c25
 8009bc8:	08009c25 	.word	0x08009c25
 8009bcc:	08009c25 	.word	0x08009c25
 8009bd0:	08009c15 	.word	0x08009c15
 8009bd4:	08009c25 	.word	0x08009c25
 8009bd8:	08009c25 	.word	0x08009c25
 8009bdc:	08009c25 	.word	0x08009c25
 8009be0:	08009c25 	.word	0x08009c25
 8009be4:	08009c25 	.word	0x08009c25
 8009be8:	08009c25 	.word	0x08009c25
 8009bec:	08009c25 	.word	0x08009c25
 8009bf0:	08009c1d 	.word	0x08009c1d
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfa:	e1c0      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009bfc:	2304      	movs	r3, #4
 8009bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c02:	e1bc      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009c04:	2308      	movs	r3, #8
 8009c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c0a:	e1b8      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009c0c:	2310      	movs	r3, #16
 8009c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c12:	e1b4      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009c14:	2320      	movs	r3, #32
 8009c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c1a:	e1b0      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009c1c:	2340      	movs	r3, #64	; 0x40
 8009c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c22:	e1ac      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009c24:	2380      	movs	r3, #128	; 0x80
 8009c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c2a:	e1a8      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a75      	ldr	r2, [pc, #468]	; (8009e08 <UART_SetConfig+0x638>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d130      	bne.n	8009c98 <UART_SetConfig+0x4c8>
 8009c36:	4b73      	ldr	r3, [pc, #460]	; (8009e04 <UART_SetConfig+0x634>)
 8009c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c3a:	f003 0307 	and.w	r3, r3, #7
 8009c3e:	2b05      	cmp	r3, #5
 8009c40:	d826      	bhi.n	8009c90 <UART_SetConfig+0x4c0>
 8009c42:	a201      	add	r2, pc, #4	; (adr r2, 8009c48 <UART_SetConfig+0x478>)
 8009c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c48:	08009c61 	.word	0x08009c61
 8009c4c:	08009c69 	.word	0x08009c69
 8009c50:	08009c71 	.word	0x08009c71
 8009c54:	08009c79 	.word	0x08009c79
 8009c58:	08009c81 	.word	0x08009c81
 8009c5c:	08009c89 	.word	0x08009c89
 8009c60:	2300      	movs	r3, #0
 8009c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c66:	e18a      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009c68:	2304      	movs	r3, #4
 8009c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6e:	e186      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009c70:	2308      	movs	r3, #8
 8009c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c76:	e182      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009c78:	2310      	movs	r3, #16
 8009c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7e:	e17e      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009c80:	2320      	movs	r3, #32
 8009c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c86:	e17a      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009c88:	2340      	movs	r3, #64	; 0x40
 8009c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8e:	e176      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009c90:	2380      	movs	r3, #128	; 0x80
 8009c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c96:	e172      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a5b      	ldr	r2, [pc, #364]	; (8009e0c <UART_SetConfig+0x63c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d130      	bne.n	8009d04 <UART_SetConfig+0x534>
 8009ca2:	4b58      	ldr	r3, [pc, #352]	; (8009e04 <UART_SetConfig+0x634>)
 8009ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca6:	f003 0307 	and.w	r3, r3, #7
 8009caa:	2b05      	cmp	r3, #5
 8009cac:	d826      	bhi.n	8009cfc <UART_SetConfig+0x52c>
 8009cae:	a201      	add	r2, pc, #4	; (adr r2, 8009cb4 <UART_SetConfig+0x4e4>)
 8009cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb4:	08009ccd 	.word	0x08009ccd
 8009cb8:	08009cd5 	.word	0x08009cd5
 8009cbc:	08009cdd 	.word	0x08009cdd
 8009cc0:	08009ce5 	.word	0x08009ce5
 8009cc4:	08009ced 	.word	0x08009ced
 8009cc8:	08009cf5 	.word	0x08009cf5
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd2:	e154      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009cd4:	2304      	movs	r3, #4
 8009cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cda:	e150      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009cdc:	2308      	movs	r3, #8
 8009cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce2:	e14c      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009ce4:	2310      	movs	r3, #16
 8009ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cea:	e148      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009cec:	2320      	movs	r3, #32
 8009cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf2:	e144      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009cf4:	2340      	movs	r3, #64	; 0x40
 8009cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cfa:	e140      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009cfc:	2380      	movs	r3, #128	; 0x80
 8009cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d02:	e13c      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a41      	ldr	r2, [pc, #260]	; (8009e10 <UART_SetConfig+0x640>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	f040 8082 	bne.w	8009e14 <UART_SetConfig+0x644>
 8009d10:	4b3c      	ldr	r3, [pc, #240]	; (8009e04 <UART_SetConfig+0x634>)
 8009d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d18:	2b28      	cmp	r3, #40	; 0x28
 8009d1a:	d86d      	bhi.n	8009df8 <UART_SetConfig+0x628>
 8009d1c:	a201      	add	r2, pc, #4	; (adr r2, 8009d24 <UART_SetConfig+0x554>)
 8009d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d22:	bf00      	nop
 8009d24:	08009dc9 	.word	0x08009dc9
 8009d28:	08009df9 	.word	0x08009df9
 8009d2c:	08009df9 	.word	0x08009df9
 8009d30:	08009df9 	.word	0x08009df9
 8009d34:	08009df9 	.word	0x08009df9
 8009d38:	08009df9 	.word	0x08009df9
 8009d3c:	08009df9 	.word	0x08009df9
 8009d40:	08009df9 	.word	0x08009df9
 8009d44:	08009dd1 	.word	0x08009dd1
 8009d48:	08009df9 	.word	0x08009df9
 8009d4c:	08009df9 	.word	0x08009df9
 8009d50:	08009df9 	.word	0x08009df9
 8009d54:	08009df9 	.word	0x08009df9
 8009d58:	08009df9 	.word	0x08009df9
 8009d5c:	08009df9 	.word	0x08009df9
 8009d60:	08009df9 	.word	0x08009df9
 8009d64:	08009dd9 	.word	0x08009dd9
 8009d68:	08009df9 	.word	0x08009df9
 8009d6c:	08009df9 	.word	0x08009df9
 8009d70:	08009df9 	.word	0x08009df9
 8009d74:	08009df9 	.word	0x08009df9
 8009d78:	08009df9 	.word	0x08009df9
 8009d7c:	08009df9 	.word	0x08009df9
 8009d80:	08009df9 	.word	0x08009df9
 8009d84:	08009de1 	.word	0x08009de1
 8009d88:	08009df9 	.word	0x08009df9
 8009d8c:	08009df9 	.word	0x08009df9
 8009d90:	08009df9 	.word	0x08009df9
 8009d94:	08009df9 	.word	0x08009df9
 8009d98:	08009df9 	.word	0x08009df9
 8009d9c:	08009df9 	.word	0x08009df9
 8009da0:	08009df9 	.word	0x08009df9
 8009da4:	08009de9 	.word	0x08009de9
 8009da8:	08009df9 	.word	0x08009df9
 8009dac:	08009df9 	.word	0x08009df9
 8009db0:	08009df9 	.word	0x08009df9
 8009db4:	08009df9 	.word	0x08009df9
 8009db8:	08009df9 	.word	0x08009df9
 8009dbc:	08009df9 	.word	0x08009df9
 8009dc0:	08009df9 	.word	0x08009df9
 8009dc4:	08009df1 	.word	0x08009df1
 8009dc8:	2301      	movs	r3, #1
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dce:	e0d6      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009dd0:	2304      	movs	r3, #4
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dd6:	e0d2      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009dd8:	2308      	movs	r3, #8
 8009dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dde:	e0ce      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009de0:	2310      	movs	r3, #16
 8009de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009de6:	e0ca      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009de8:	2320      	movs	r3, #32
 8009dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dee:	e0c6      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009df0:	2340      	movs	r3, #64	; 0x40
 8009df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009df6:	e0c2      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009df8:	2380      	movs	r3, #128	; 0x80
 8009dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dfe:	e0be      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009e00:	40011400 	.word	0x40011400
 8009e04:	58024400 	.word	0x58024400
 8009e08:	40007800 	.word	0x40007800
 8009e0c:	40007c00 	.word	0x40007c00
 8009e10:	40011800 	.word	0x40011800
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4aad      	ldr	r2, [pc, #692]	; (800a0d0 <UART_SetConfig+0x900>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d176      	bne.n	8009f0c <UART_SetConfig+0x73c>
 8009e1e:	4bad      	ldr	r3, [pc, #692]	; (800a0d4 <UART_SetConfig+0x904>)
 8009e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e26:	2b28      	cmp	r3, #40	; 0x28
 8009e28:	d86c      	bhi.n	8009f04 <UART_SetConfig+0x734>
 8009e2a:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <UART_SetConfig+0x660>)
 8009e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e30:	08009ed5 	.word	0x08009ed5
 8009e34:	08009f05 	.word	0x08009f05
 8009e38:	08009f05 	.word	0x08009f05
 8009e3c:	08009f05 	.word	0x08009f05
 8009e40:	08009f05 	.word	0x08009f05
 8009e44:	08009f05 	.word	0x08009f05
 8009e48:	08009f05 	.word	0x08009f05
 8009e4c:	08009f05 	.word	0x08009f05
 8009e50:	08009edd 	.word	0x08009edd
 8009e54:	08009f05 	.word	0x08009f05
 8009e58:	08009f05 	.word	0x08009f05
 8009e5c:	08009f05 	.word	0x08009f05
 8009e60:	08009f05 	.word	0x08009f05
 8009e64:	08009f05 	.word	0x08009f05
 8009e68:	08009f05 	.word	0x08009f05
 8009e6c:	08009f05 	.word	0x08009f05
 8009e70:	08009ee5 	.word	0x08009ee5
 8009e74:	08009f05 	.word	0x08009f05
 8009e78:	08009f05 	.word	0x08009f05
 8009e7c:	08009f05 	.word	0x08009f05
 8009e80:	08009f05 	.word	0x08009f05
 8009e84:	08009f05 	.word	0x08009f05
 8009e88:	08009f05 	.word	0x08009f05
 8009e8c:	08009f05 	.word	0x08009f05
 8009e90:	08009eed 	.word	0x08009eed
 8009e94:	08009f05 	.word	0x08009f05
 8009e98:	08009f05 	.word	0x08009f05
 8009e9c:	08009f05 	.word	0x08009f05
 8009ea0:	08009f05 	.word	0x08009f05
 8009ea4:	08009f05 	.word	0x08009f05
 8009ea8:	08009f05 	.word	0x08009f05
 8009eac:	08009f05 	.word	0x08009f05
 8009eb0:	08009ef5 	.word	0x08009ef5
 8009eb4:	08009f05 	.word	0x08009f05
 8009eb8:	08009f05 	.word	0x08009f05
 8009ebc:	08009f05 	.word	0x08009f05
 8009ec0:	08009f05 	.word	0x08009f05
 8009ec4:	08009f05 	.word	0x08009f05
 8009ec8:	08009f05 	.word	0x08009f05
 8009ecc:	08009f05 	.word	0x08009f05
 8009ed0:	08009efd 	.word	0x08009efd
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eda:	e050      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009edc:	2304      	movs	r3, #4
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee2:	e04c      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009ee4:	2308      	movs	r3, #8
 8009ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eea:	e048      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009eec:	2310      	movs	r3, #16
 8009eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ef2:	e044      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009ef4:	2320      	movs	r3, #32
 8009ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009efa:	e040      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009efc:	2340      	movs	r3, #64	; 0x40
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f02:	e03c      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009f04:	2380      	movs	r3, #128	; 0x80
 8009f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f0a:	e038      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a71      	ldr	r2, [pc, #452]	; (800a0d8 <UART_SetConfig+0x908>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d130      	bne.n	8009f78 <UART_SetConfig+0x7a8>
 8009f16:	4b6f      	ldr	r3, [pc, #444]	; (800a0d4 <UART_SetConfig+0x904>)
 8009f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f1a:	f003 0307 	and.w	r3, r3, #7
 8009f1e:	2b05      	cmp	r3, #5
 8009f20:	d826      	bhi.n	8009f70 <UART_SetConfig+0x7a0>
 8009f22:	a201      	add	r2, pc, #4	; (adr r2, 8009f28 <UART_SetConfig+0x758>)
 8009f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f28:	08009f41 	.word	0x08009f41
 8009f2c:	08009f49 	.word	0x08009f49
 8009f30:	08009f51 	.word	0x08009f51
 8009f34:	08009f59 	.word	0x08009f59
 8009f38:	08009f61 	.word	0x08009f61
 8009f3c:	08009f69 	.word	0x08009f69
 8009f40:	2302      	movs	r3, #2
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f46:	e01a      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009f48:	2304      	movs	r3, #4
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4e:	e016      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009f50:	2308      	movs	r3, #8
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f56:	e012      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009f58:	2310      	movs	r3, #16
 8009f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f5e:	e00e      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009f60:	2320      	movs	r3, #32
 8009f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f66:	e00a      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009f68:	2340      	movs	r3, #64	; 0x40
 8009f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f6e:	e006      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009f70:	2380      	movs	r3, #128	; 0x80
 8009f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f76:	e002      	b.n	8009f7e <UART_SetConfig+0x7ae>
 8009f78:	2380      	movs	r3, #128	; 0x80
 8009f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a55      	ldr	r2, [pc, #340]	; (800a0d8 <UART_SetConfig+0x908>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	f040 80f8 	bne.w	800a17a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f8e:	2b20      	cmp	r3, #32
 8009f90:	dc46      	bgt.n	800a020 <UART_SetConfig+0x850>
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	db75      	blt.n	800a082 <UART_SetConfig+0x8b2>
 8009f96:	3b02      	subs	r3, #2
 8009f98:	2b1e      	cmp	r3, #30
 8009f9a:	d872      	bhi.n	800a082 <UART_SetConfig+0x8b2>
 8009f9c:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <UART_SetConfig+0x7d4>)
 8009f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa2:	bf00      	nop
 8009fa4:	0800a027 	.word	0x0800a027
 8009fa8:	0800a083 	.word	0x0800a083
 8009fac:	0800a02f 	.word	0x0800a02f
 8009fb0:	0800a083 	.word	0x0800a083
 8009fb4:	0800a083 	.word	0x0800a083
 8009fb8:	0800a083 	.word	0x0800a083
 8009fbc:	0800a03f 	.word	0x0800a03f
 8009fc0:	0800a083 	.word	0x0800a083
 8009fc4:	0800a083 	.word	0x0800a083
 8009fc8:	0800a083 	.word	0x0800a083
 8009fcc:	0800a083 	.word	0x0800a083
 8009fd0:	0800a083 	.word	0x0800a083
 8009fd4:	0800a083 	.word	0x0800a083
 8009fd8:	0800a083 	.word	0x0800a083
 8009fdc:	0800a04f 	.word	0x0800a04f
 8009fe0:	0800a083 	.word	0x0800a083
 8009fe4:	0800a083 	.word	0x0800a083
 8009fe8:	0800a083 	.word	0x0800a083
 8009fec:	0800a083 	.word	0x0800a083
 8009ff0:	0800a083 	.word	0x0800a083
 8009ff4:	0800a083 	.word	0x0800a083
 8009ff8:	0800a083 	.word	0x0800a083
 8009ffc:	0800a083 	.word	0x0800a083
 800a000:	0800a083 	.word	0x0800a083
 800a004:	0800a083 	.word	0x0800a083
 800a008:	0800a083 	.word	0x0800a083
 800a00c:	0800a083 	.word	0x0800a083
 800a010:	0800a083 	.word	0x0800a083
 800a014:	0800a083 	.word	0x0800a083
 800a018:	0800a083 	.word	0x0800a083
 800a01c:	0800a075 	.word	0x0800a075
 800a020:	2b40      	cmp	r3, #64	; 0x40
 800a022:	d02a      	beq.n	800a07a <UART_SetConfig+0x8aa>
 800a024:	e02d      	b.n	800a082 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a026:	f7fe fa89 	bl	800853c <HAL_RCCEx_GetD3PCLK1Freq>
 800a02a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a02c:	e02f      	b.n	800a08e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a02e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe fa98 	bl	8008568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a03c:	e027      	b.n	800a08e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a03e:	f107 0318 	add.w	r3, r7, #24
 800a042:	4618      	mov	r0, r3
 800a044:	f7fe fbe4 	bl	8008810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a04c:	e01f      	b.n	800a08e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a04e:	4b21      	ldr	r3, [pc, #132]	; (800a0d4 <UART_SetConfig+0x904>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 0320 	and.w	r3, r3, #32
 800a056:	2b00      	cmp	r3, #0
 800a058:	d009      	beq.n	800a06e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a05a:	4b1e      	ldr	r3, [pc, #120]	; (800a0d4 <UART_SetConfig+0x904>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	08db      	lsrs	r3, r3, #3
 800a060:	f003 0303 	and.w	r3, r3, #3
 800a064:	4a1d      	ldr	r2, [pc, #116]	; (800a0dc <UART_SetConfig+0x90c>)
 800a066:	fa22 f303 	lsr.w	r3, r2, r3
 800a06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a06c:	e00f      	b.n	800a08e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a06e:	4b1b      	ldr	r3, [pc, #108]	; (800a0dc <UART_SetConfig+0x90c>)
 800a070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a072:	e00c      	b.n	800a08e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a074:	4b1a      	ldr	r3, [pc, #104]	; (800a0e0 <UART_SetConfig+0x910>)
 800a076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a078:	e009      	b.n	800a08e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a07a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a07e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a080:	e005      	b.n	800a08e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a082:	2300      	movs	r3, #0
 800a084:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a08c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 81ee 	beq.w	800a472 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09a:	4a12      	ldr	r2, [pc, #72]	; (800a0e4 <UART_SetConfig+0x914>)
 800a09c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0a8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	685a      	ldr	r2, [r3, #4]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	4413      	add	r3, r2
 800a0b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d305      	bcc.n	800a0c6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d910      	bls.n	800a0e8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a0cc:	e1d1      	b.n	800a472 <UART_SetConfig+0xca2>
 800a0ce:	bf00      	nop
 800a0d0:	40011c00 	.word	0x40011c00
 800a0d4:	58024400 	.word	0x58024400
 800a0d8:	58000c00 	.word	0x58000c00
 800a0dc:	03d09000 	.word	0x03d09000
 800a0e0:	003d0900 	.word	0x003d0900
 800a0e4:	0800ade0 	.word	0x0800ade0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	60bb      	str	r3, [r7, #8]
 800a0ee:	60fa      	str	r2, [r7, #12]
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f4:	4ac0      	ldr	r2, [pc, #768]	; (800a3f8 <UART_SetConfig+0xc28>)
 800a0f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	603b      	str	r3, [r7, #0]
 800a100:	607a      	str	r2, [r7, #4]
 800a102:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a106:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a10a:	f7f6 faad 	bl	8000668 <__aeabi_uldivmod>
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	4610      	mov	r0, r2
 800a114:	4619      	mov	r1, r3
 800a116:	f04f 0200 	mov.w	r2, #0
 800a11a:	f04f 0300 	mov.w	r3, #0
 800a11e:	020b      	lsls	r3, r1, #8
 800a120:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a124:	0202      	lsls	r2, r0, #8
 800a126:	6979      	ldr	r1, [r7, #20]
 800a128:	6849      	ldr	r1, [r1, #4]
 800a12a:	0849      	lsrs	r1, r1, #1
 800a12c:	2000      	movs	r0, #0
 800a12e:	460c      	mov	r4, r1
 800a130:	4605      	mov	r5, r0
 800a132:	eb12 0804 	adds.w	r8, r2, r4
 800a136:	eb43 0905 	adc.w	r9, r3, r5
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	469a      	mov	sl, r3
 800a142:	4693      	mov	fp, r2
 800a144:	4652      	mov	r2, sl
 800a146:	465b      	mov	r3, fp
 800a148:	4640      	mov	r0, r8
 800a14a:	4649      	mov	r1, r9
 800a14c:	f7f6 fa8c 	bl	8000668 <__aeabi_uldivmod>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	4613      	mov	r3, r2
 800a156:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a15e:	d308      	bcc.n	800a172 <UART_SetConfig+0x9a2>
 800a160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a166:	d204      	bcs.n	800a172 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a16e:	60da      	str	r2, [r3, #12]
 800a170:	e17f      	b.n	800a472 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a178:	e17b      	b.n	800a472 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a182:	f040 80bd 	bne.w	800a300 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a186:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a18a:	2b20      	cmp	r3, #32
 800a18c:	dc48      	bgt.n	800a220 <UART_SetConfig+0xa50>
 800a18e:	2b00      	cmp	r3, #0
 800a190:	db7b      	blt.n	800a28a <UART_SetConfig+0xaba>
 800a192:	2b20      	cmp	r3, #32
 800a194:	d879      	bhi.n	800a28a <UART_SetConfig+0xaba>
 800a196:	a201      	add	r2, pc, #4	; (adr r2, 800a19c <UART_SetConfig+0x9cc>)
 800a198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19c:	0800a227 	.word	0x0800a227
 800a1a0:	0800a22f 	.word	0x0800a22f
 800a1a4:	0800a28b 	.word	0x0800a28b
 800a1a8:	0800a28b 	.word	0x0800a28b
 800a1ac:	0800a237 	.word	0x0800a237
 800a1b0:	0800a28b 	.word	0x0800a28b
 800a1b4:	0800a28b 	.word	0x0800a28b
 800a1b8:	0800a28b 	.word	0x0800a28b
 800a1bc:	0800a247 	.word	0x0800a247
 800a1c0:	0800a28b 	.word	0x0800a28b
 800a1c4:	0800a28b 	.word	0x0800a28b
 800a1c8:	0800a28b 	.word	0x0800a28b
 800a1cc:	0800a28b 	.word	0x0800a28b
 800a1d0:	0800a28b 	.word	0x0800a28b
 800a1d4:	0800a28b 	.word	0x0800a28b
 800a1d8:	0800a28b 	.word	0x0800a28b
 800a1dc:	0800a257 	.word	0x0800a257
 800a1e0:	0800a28b 	.word	0x0800a28b
 800a1e4:	0800a28b 	.word	0x0800a28b
 800a1e8:	0800a28b 	.word	0x0800a28b
 800a1ec:	0800a28b 	.word	0x0800a28b
 800a1f0:	0800a28b 	.word	0x0800a28b
 800a1f4:	0800a28b 	.word	0x0800a28b
 800a1f8:	0800a28b 	.word	0x0800a28b
 800a1fc:	0800a28b 	.word	0x0800a28b
 800a200:	0800a28b 	.word	0x0800a28b
 800a204:	0800a28b 	.word	0x0800a28b
 800a208:	0800a28b 	.word	0x0800a28b
 800a20c:	0800a28b 	.word	0x0800a28b
 800a210:	0800a28b 	.word	0x0800a28b
 800a214:	0800a28b 	.word	0x0800a28b
 800a218:	0800a28b 	.word	0x0800a28b
 800a21c:	0800a27d 	.word	0x0800a27d
 800a220:	2b40      	cmp	r3, #64	; 0x40
 800a222:	d02e      	beq.n	800a282 <UART_SetConfig+0xab2>
 800a224:	e031      	b.n	800a28a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a226:	f7fc fe23 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
 800a22a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a22c:	e033      	b.n	800a296 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a22e:	f7fc fe35 	bl	8006e9c <HAL_RCC_GetPCLK2Freq>
 800a232:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a234:	e02f      	b.n	800a296 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe f994 	bl	8008568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a244:	e027      	b.n	800a296 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a246:	f107 0318 	add.w	r3, r7, #24
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fe fae0 	bl	8008810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a254:	e01f      	b.n	800a296 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a256:	4b69      	ldr	r3, [pc, #420]	; (800a3fc <UART_SetConfig+0xc2c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 0320 	and.w	r3, r3, #32
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d009      	beq.n	800a276 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a262:	4b66      	ldr	r3, [pc, #408]	; (800a3fc <UART_SetConfig+0xc2c>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	08db      	lsrs	r3, r3, #3
 800a268:	f003 0303 	and.w	r3, r3, #3
 800a26c:	4a64      	ldr	r2, [pc, #400]	; (800a400 <UART_SetConfig+0xc30>)
 800a26e:	fa22 f303 	lsr.w	r3, r2, r3
 800a272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a274:	e00f      	b.n	800a296 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a276:	4b62      	ldr	r3, [pc, #392]	; (800a400 <UART_SetConfig+0xc30>)
 800a278:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a27a:	e00c      	b.n	800a296 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a27c:	4b61      	ldr	r3, [pc, #388]	; (800a404 <UART_SetConfig+0xc34>)
 800a27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a280:	e009      	b.n	800a296 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a288:	e005      	b.n	800a296 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a28a:	2300      	movs	r3, #0
 800a28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a294:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f000 80ea 	beq.w	800a472 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	4a55      	ldr	r2, [pc, #340]	; (800a3f8 <UART_SetConfig+0xc28>)
 800a2a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2b0:	005a      	lsls	r2, r3, #1
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	085b      	lsrs	r3, r3, #1
 800a2b8:	441a      	add	r2, r3
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c6:	2b0f      	cmp	r3, #15
 800a2c8:	d916      	bls.n	800a2f8 <UART_SetConfig+0xb28>
 800a2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2d0:	d212      	bcs.n	800a2f8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	f023 030f 	bic.w	r3, r3, #15
 800a2da:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2de:	085b      	lsrs	r3, r3, #1
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	f003 0307 	and.w	r3, r3, #7
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a2f4:	60da      	str	r2, [r3, #12]
 800a2f6:	e0bc      	b.n	800a472 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a2fe:	e0b8      	b.n	800a472 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a300:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a304:	2b20      	cmp	r3, #32
 800a306:	dc4b      	bgt.n	800a3a0 <UART_SetConfig+0xbd0>
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f2c0 8087 	blt.w	800a41c <UART_SetConfig+0xc4c>
 800a30e:	2b20      	cmp	r3, #32
 800a310:	f200 8084 	bhi.w	800a41c <UART_SetConfig+0xc4c>
 800a314:	a201      	add	r2, pc, #4	; (adr r2, 800a31c <UART_SetConfig+0xb4c>)
 800a316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31a:	bf00      	nop
 800a31c:	0800a3a7 	.word	0x0800a3a7
 800a320:	0800a3af 	.word	0x0800a3af
 800a324:	0800a41d 	.word	0x0800a41d
 800a328:	0800a41d 	.word	0x0800a41d
 800a32c:	0800a3b7 	.word	0x0800a3b7
 800a330:	0800a41d 	.word	0x0800a41d
 800a334:	0800a41d 	.word	0x0800a41d
 800a338:	0800a41d 	.word	0x0800a41d
 800a33c:	0800a3c7 	.word	0x0800a3c7
 800a340:	0800a41d 	.word	0x0800a41d
 800a344:	0800a41d 	.word	0x0800a41d
 800a348:	0800a41d 	.word	0x0800a41d
 800a34c:	0800a41d 	.word	0x0800a41d
 800a350:	0800a41d 	.word	0x0800a41d
 800a354:	0800a41d 	.word	0x0800a41d
 800a358:	0800a41d 	.word	0x0800a41d
 800a35c:	0800a3d7 	.word	0x0800a3d7
 800a360:	0800a41d 	.word	0x0800a41d
 800a364:	0800a41d 	.word	0x0800a41d
 800a368:	0800a41d 	.word	0x0800a41d
 800a36c:	0800a41d 	.word	0x0800a41d
 800a370:	0800a41d 	.word	0x0800a41d
 800a374:	0800a41d 	.word	0x0800a41d
 800a378:	0800a41d 	.word	0x0800a41d
 800a37c:	0800a41d 	.word	0x0800a41d
 800a380:	0800a41d 	.word	0x0800a41d
 800a384:	0800a41d 	.word	0x0800a41d
 800a388:	0800a41d 	.word	0x0800a41d
 800a38c:	0800a41d 	.word	0x0800a41d
 800a390:	0800a41d 	.word	0x0800a41d
 800a394:	0800a41d 	.word	0x0800a41d
 800a398:	0800a41d 	.word	0x0800a41d
 800a39c:	0800a40f 	.word	0x0800a40f
 800a3a0:	2b40      	cmp	r3, #64	; 0x40
 800a3a2:	d037      	beq.n	800a414 <UART_SetConfig+0xc44>
 800a3a4:	e03a      	b.n	800a41c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3a6:	f7fc fd63 	bl	8006e70 <HAL_RCC_GetPCLK1Freq>
 800a3aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a3ac:	e03c      	b.n	800a428 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3ae:	f7fc fd75 	bl	8006e9c <HAL_RCC_GetPCLK2Freq>
 800a3b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a3b4:	e038      	b.n	800a428 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fe f8d4 	bl	8008568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3c4:	e030      	b.n	800a428 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3c6:	f107 0318 	add.w	r3, r7, #24
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe fa20 	bl	8008810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3d4:	e028      	b.n	800a428 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3d6:	4b09      	ldr	r3, [pc, #36]	; (800a3fc <UART_SetConfig+0xc2c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0320 	and.w	r3, r3, #32
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d012      	beq.n	800a408 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3e2:	4b06      	ldr	r3, [pc, #24]	; (800a3fc <UART_SetConfig+0xc2c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	08db      	lsrs	r3, r3, #3
 800a3e8:	f003 0303 	and.w	r3, r3, #3
 800a3ec:	4a04      	ldr	r2, [pc, #16]	; (800a400 <UART_SetConfig+0xc30>)
 800a3ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3f4:	e018      	b.n	800a428 <UART_SetConfig+0xc58>
 800a3f6:	bf00      	nop
 800a3f8:	0800ade0 	.word	0x0800ade0
 800a3fc:	58024400 	.word	0x58024400
 800a400:	03d09000 	.word	0x03d09000
 800a404:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a408:	4b24      	ldr	r3, [pc, #144]	; (800a49c <UART_SetConfig+0xccc>)
 800a40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a40c:	e00c      	b.n	800a428 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a40e:	4b24      	ldr	r3, [pc, #144]	; (800a4a0 <UART_SetConfig+0xcd0>)
 800a410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a412:	e009      	b.n	800a428 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a414:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a418:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a41a:	e005      	b.n	800a428 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a41c:	2300      	movs	r3, #0
 800a41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a426:	bf00      	nop
    }

    if (pclk != 0U)
 800a428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d021      	beq.n	800a472 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a432:	4a1c      	ldr	r2, [pc, #112]	; (800a4a4 <UART_SetConfig+0xcd4>)
 800a434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a438:	461a      	mov	r2, r3
 800a43a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a43c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	085b      	lsrs	r3, r3, #1
 800a446:	441a      	add	r2, r3
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a450:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a454:	2b0f      	cmp	r3, #15
 800a456:	d909      	bls.n	800a46c <UART_SetConfig+0xc9c>
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a45e:	d205      	bcs.n	800a46c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a462:	b29a      	uxth	r2, r3
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	60da      	str	r2, [r3, #12]
 800a46a:	e002      	b.n	800a472 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	2201      	movs	r2, #1
 800a476:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	2200      	movs	r2, #0
 800a486:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	2200      	movs	r2, #0
 800a48c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a48e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a492:	4618      	mov	r0, r3
 800a494:	3748      	adds	r7, #72	; 0x48
 800a496:	46bd      	mov	sp, r7
 800a498:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a49c:	03d09000 	.word	0x03d09000
 800a4a0:	003d0900 	.word	0x003d0900
 800a4a4:	0800ade0 	.word	0x0800ade0

0800a4a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b4:	f003 0301 	and.w	r3, r3, #1
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00a      	beq.n	800a4d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d6:	f003 0302 	and.w	r3, r3, #2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00a      	beq.n	800a4f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	430a      	orrs	r2, r1
 800a4f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f8:	f003 0304 	and.w	r3, r3, #4
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00a      	beq.n	800a516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	430a      	orrs	r2, r1
 800a514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51a:	f003 0308 	and.w	r3, r3, #8
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00a      	beq.n	800a538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	430a      	orrs	r2, r1
 800a536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53c:	f003 0310 	and.w	r3, r3, #16
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00a      	beq.n	800a55a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	430a      	orrs	r2, r1
 800a558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55e:	f003 0320 	and.w	r3, r3, #32
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00a      	beq.n	800a57c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	430a      	orrs	r2, r1
 800a57a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a584:	2b00      	cmp	r3, #0
 800a586:	d01a      	beq.n	800a5be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5a6:	d10a      	bne.n	800a5be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	430a      	orrs	r2, r1
 800a5de:	605a      	str	r2, [r3, #4]
  }
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b086      	sub	sp, #24
 800a5f0:	af02      	add	r7, sp, #8
 800a5f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5fc:	f7f7 fbaa 	bl	8001d54 <HAL_GetTick>
 800a600:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 0308 	and.w	r3, r3, #8
 800a60c:	2b08      	cmp	r3, #8
 800a60e:	d10e      	bne.n	800a62e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f82f 	bl	800a682 <UART_WaitOnFlagUntilTimeout>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d001      	beq.n	800a62e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a62a:	2303      	movs	r3, #3
 800a62c:	e025      	b.n	800a67a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 0304 	and.w	r3, r3, #4
 800a638:	2b04      	cmp	r3, #4
 800a63a:	d10e      	bne.n	800a65a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a63c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 f819 	bl	800a682 <UART_WaitOnFlagUntilTimeout>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a656:	2303      	movs	r3, #3
 800a658:	e00f      	b.n	800a67a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2220      	movs	r2, #32
 800a65e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2220      	movs	r2, #32
 800a666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b09c      	sub	sp, #112	; 0x70
 800a686:	af00      	add	r7, sp, #0
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	60b9      	str	r1, [r7, #8]
 800a68c:	603b      	str	r3, [r7, #0]
 800a68e:	4613      	mov	r3, r2
 800a690:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a692:	e0a9      	b.n	800a7e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a69a:	f000 80a5 	beq.w	800a7e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a69e:	f7f7 fb59 	bl	8001d54 <HAL_GetTick>
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d302      	bcc.n	800a6b4 <UART_WaitOnFlagUntilTimeout+0x32>
 800a6ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d140      	bne.n	800a736 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6bc:	e853 3f00 	ldrex	r3, [r3]
 800a6c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a6c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a6c8:	667b      	str	r3, [r7, #100]	; 0x64
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a6d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a6d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6da:	e841 2300 	strex	r3, r2, [r1]
 800a6de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a6e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1e6      	bne.n	800a6b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	3308      	adds	r3, #8
 800a6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6f0:	e853 3f00 	ldrex	r3, [r3]
 800a6f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f8:	f023 0301 	bic.w	r3, r3, #1
 800a6fc:	663b      	str	r3, [r7, #96]	; 0x60
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3308      	adds	r3, #8
 800a704:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a706:	64ba      	str	r2, [r7, #72]	; 0x48
 800a708:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a70c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a70e:	e841 2300 	strex	r3, r2, [r1]
 800a712:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1e5      	bne.n	800a6e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2220      	movs	r2, #32
 800a71e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2220      	movs	r2, #32
 800a726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a732:	2303      	movs	r3, #3
 800a734:	e069      	b.n	800a80a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0304 	and.w	r3, r3, #4
 800a740:	2b00      	cmp	r3, #0
 800a742:	d051      	beq.n	800a7e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	69db      	ldr	r3, [r3, #28]
 800a74a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a74e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a752:	d149      	bne.n	800a7e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a75c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a766:	e853 3f00 	ldrex	r3, [r3]
 800a76a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a772:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	461a      	mov	r2, r3
 800a77a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a77c:	637b      	str	r3, [r7, #52]	; 0x34
 800a77e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a780:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a784:	e841 2300 	strex	r3, r2, [r1]
 800a788:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1e6      	bne.n	800a75e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	3308      	adds	r3, #8
 800a796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	e853 3f00 	ldrex	r3, [r3]
 800a79e:	613b      	str	r3, [r7, #16]
   return(result);
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	f023 0301 	bic.w	r3, r3, #1
 800a7a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a7b0:	623a      	str	r2, [r7, #32]
 800a7b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b4:	69f9      	ldr	r1, [r7, #28]
 800a7b6:	6a3a      	ldr	r2, [r7, #32]
 800a7b8:	e841 2300 	strex	r3, r2, [r1]
 800a7bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1e5      	bne.n	800a790 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2220      	movs	r2, #32
 800a7c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a7e4:	2303      	movs	r3, #3
 800a7e6:	e010      	b.n	800a80a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	69da      	ldr	r2, [r3, #28]
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	bf0c      	ite	eq
 800a7f8:	2301      	moveq	r3, #1
 800a7fa:	2300      	movne	r3, #0
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	461a      	mov	r2, r3
 800a800:	79fb      	ldrb	r3, [r7, #7]
 800a802:	429a      	cmp	r2, r3
 800a804:	f43f af46 	beq.w	800a694 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3770      	adds	r7, #112	; 0x70
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a812:	b480      	push	{r7}
 800a814:	b085      	sub	sp, #20
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a820:	2b01      	cmp	r3, #1
 800a822:	d101      	bne.n	800a828 <HAL_UARTEx_DisableFifoMode+0x16>
 800a824:	2302      	movs	r3, #2
 800a826:	e027      	b.n	800a878 <HAL_UARTEx_DisableFifoMode+0x66>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2224      	movs	r2, #36	; 0x24
 800a834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f022 0201 	bic.w	r2, r2, #1
 800a84e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a856:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2220      	movs	r2, #32
 800a86a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a894:	2b01      	cmp	r3, #1
 800a896:	d101      	bne.n	800a89c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a898:	2302      	movs	r3, #2
 800a89a:	e02d      	b.n	800a8f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2224      	movs	r2, #36	; 0x24
 800a8a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f022 0201 	bic.w	r2, r2, #1
 800a8c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	430a      	orrs	r2, r1
 800a8d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 f84f 	bl	800a97c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2220      	movs	r2, #32
 800a8ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a910:	2b01      	cmp	r3, #1
 800a912:	d101      	bne.n	800a918 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a914:	2302      	movs	r3, #2
 800a916:	e02d      	b.n	800a974 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2224      	movs	r2, #36	; 0x24
 800a924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f022 0201 	bic.w	r2, r2, #1
 800a93e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	430a      	orrs	r2, r1
 800a952:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f811 	bl	800a97c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2220      	movs	r2, #32
 800a966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d108      	bne.n	800a99e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a99c:	e031      	b.n	800aa02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a99e:	2310      	movs	r3, #16
 800a9a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a9a2:	2310      	movs	r3, #16
 800a9a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	0e5b      	lsrs	r3, r3, #25
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	f003 0307 	and.w	r3, r3, #7
 800a9b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	0f5b      	lsrs	r3, r3, #29
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	f003 0307 	and.w	r3, r3, #7
 800a9c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	7b3a      	ldrb	r2, [r7, #12]
 800a9ca:	4911      	ldr	r1, [pc, #68]	; (800aa10 <UARTEx_SetNbDataToProcess+0x94>)
 800a9cc:	5c8a      	ldrb	r2, [r1, r2]
 800a9ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9d2:	7b3a      	ldrb	r2, [r7, #12]
 800a9d4:	490f      	ldr	r1, [pc, #60]	; (800aa14 <UARTEx_SetNbDataToProcess+0x98>)
 800a9d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
 800a9e6:	7b7a      	ldrb	r2, [r7, #13]
 800a9e8:	4909      	ldr	r1, [pc, #36]	; (800aa10 <UARTEx_SetNbDataToProcess+0x94>)
 800a9ea:	5c8a      	ldrb	r2, [r1, r2]
 800a9ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9f0:	7b7a      	ldrb	r2, [r7, #13]
 800a9f2:	4908      	ldr	r1, [pc, #32]	; (800aa14 <UARTEx_SetNbDataToProcess+0x98>)
 800a9f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aa02:	bf00      	nop
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	0800adf8 	.word	0x0800adf8
 800aa14:	0800ae00 	.word	0x0800ae00

0800aa18 <__errno>:
 800aa18:	4b01      	ldr	r3, [pc, #4]	; (800aa20 <__errno+0x8>)
 800aa1a:	6818      	ldr	r0, [r3, #0]
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	24000010 	.word	0x24000010

0800aa24 <__libc_init_array>:
 800aa24:	b570      	push	{r4, r5, r6, lr}
 800aa26:	4d0d      	ldr	r5, [pc, #52]	; (800aa5c <__libc_init_array+0x38>)
 800aa28:	4c0d      	ldr	r4, [pc, #52]	; (800aa60 <__libc_init_array+0x3c>)
 800aa2a:	1b64      	subs	r4, r4, r5
 800aa2c:	10a4      	asrs	r4, r4, #2
 800aa2e:	2600      	movs	r6, #0
 800aa30:	42a6      	cmp	r6, r4
 800aa32:	d109      	bne.n	800aa48 <__libc_init_array+0x24>
 800aa34:	4d0b      	ldr	r5, [pc, #44]	; (800aa64 <__libc_init_array+0x40>)
 800aa36:	4c0c      	ldr	r4, [pc, #48]	; (800aa68 <__libc_init_array+0x44>)
 800aa38:	f000 f9b8 	bl	800adac <_init>
 800aa3c:	1b64      	subs	r4, r4, r5
 800aa3e:	10a4      	asrs	r4, r4, #2
 800aa40:	2600      	movs	r6, #0
 800aa42:	42a6      	cmp	r6, r4
 800aa44:	d105      	bne.n	800aa52 <__libc_init_array+0x2e>
 800aa46:	bd70      	pop	{r4, r5, r6, pc}
 800aa48:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa4c:	4798      	blx	r3
 800aa4e:	3601      	adds	r6, #1
 800aa50:	e7ee      	b.n	800aa30 <__libc_init_array+0xc>
 800aa52:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa56:	4798      	blx	r3
 800aa58:	3601      	adds	r6, #1
 800aa5a:	e7f2      	b.n	800aa42 <__libc_init_array+0x1e>
 800aa5c:	0800af50 	.word	0x0800af50
 800aa60:	0800af50 	.word	0x0800af50
 800aa64:	0800af50 	.word	0x0800af50
 800aa68:	0800af54 	.word	0x0800af54

0800aa6c <malloc>:
 800aa6c:	4b02      	ldr	r3, [pc, #8]	; (800aa78 <malloc+0xc>)
 800aa6e:	4601      	mov	r1, r0
 800aa70:	6818      	ldr	r0, [r3, #0]
 800aa72:	f000 b82b 	b.w	800aacc <_malloc_r>
 800aa76:	bf00      	nop
 800aa78:	24000010 	.word	0x24000010

0800aa7c <memset>:
 800aa7c:	4402      	add	r2, r0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d100      	bne.n	800aa86 <memset+0xa>
 800aa84:	4770      	bx	lr
 800aa86:	f803 1b01 	strb.w	r1, [r3], #1
 800aa8a:	e7f9      	b.n	800aa80 <memset+0x4>

0800aa8c <sbrk_aligned>:
 800aa8c:	b570      	push	{r4, r5, r6, lr}
 800aa8e:	4e0e      	ldr	r6, [pc, #56]	; (800aac8 <sbrk_aligned+0x3c>)
 800aa90:	460c      	mov	r4, r1
 800aa92:	6831      	ldr	r1, [r6, #0]
 800aa94:	4605      	mov	r5, r0
 800aa96:	b911      	cbnz	r1, 800aa9e <sbrk_aligned+0x12>
 800aa98:	f000 f88c 	bl	800abb4 <_sbrk_r>
 800aa9c:	6030      	str	r0, [r6, #0]
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	f000 f887 	bl	800abb4 <_sbrk_r>
 800aaa6:	1c43      	adds	r3, r0, #1
 800aaa8:	d00a      	beq.n	800aac0 <sbrk_aligned+0x34>
 800aaaa:	1cc4      	adds	r4, r0, #3
 800aaac:	f024 0403 	bic.w	r4, r4, #3
 800aab0:	42a0      	cmp	r0, r4
 800aab2:	d007      	beq.n	800aac4 <sbrk_aligned+0x38>
 800aab4:	1a21      	subs	r1, r4, r0
 800aab6:	4628      	mov	r0, r5
 800aab8:	f000 f87c 	bl	800abb4 <_sbrk_r>
 800aabc:	3001      	adds	r0, #1
 800aabe:	d101      	bne.n	800aac4 <sbrk_aligned+0x38>
 800aac0:	f04f 34ff 	mov.w	r4, #4294967295
 800aac4:	4620      	mov	r0, r4
 800aac6:	bd70      	pop	{r4, r5, r6, pc}
 800aac8:	24000858 	.word	0x24000858

0800aacc <_malloc_r>:
 800aacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad0:	1ccd      	adds	r5, r1, #3
 800aad2:	f025 0503 	bic.w	r5, r5, #3
 800aad6:	3508      	adds	r5, #8
 800aad8:	2d0c      	cmp	r5, #12
 800aada:	bf38      	it	cc
 800aadc:	250c      	movcc	r5, #12
 800aade:	2d00      	cmp	r5, #0
 800aae0:	4607      	mov	r7, r0
 800aae2:	db01      	blt.n	800aae8 <_malloc_r+0x1c>
 800aae4:	42a9      	cmp	r1, r5
 800aae6:	d905      	bls.n	800aaf4 <_malloc_r+0x28>
 800aae8:	230c      	movs	r3, #12
 800aaea:	603b      	str	r3, [r7, #0]
 800aaec:	2600      	movs	r6, #0
 800aaee:	4630      	mov	r0, r6
 800aaf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf4:	4e2e      	ldr	r6, [pc, #184]	; (800abb0 <_malloc_r+0xe4>)
 800aaf6:	f000 f86d 	bl	800abd4 <__malloc_lock>
 800aafa:	6833      	ldr	r3, [r6, #0]
 800aafc:	461c      	mov	r4, r3
 800aafe:	bb34      	cbnz	r4, 800ab4e <_malloc_r+0x82>
 800ab00:	4629      	mov	r1, r5
 800ab02:	4638      	mov	r0, r7
 800ab04:	f7ff ffc2 	bl	800aa8c <sbrk_aligned>
 800ab08:	1c43      	adds	r3, r0, #1
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	d14d      	bne.n	800abaa <_malloc_r+0xde>
 800ab0e:	6834      	ldr	r4, [r6, #0]
 800ab10:	4626      	mov	r6, r4
 800ab12:	2e00      	cmp	r6, #0
 800ab14:	d140      	bne.n	800ab98 <_malloc_r+0xcc>
 800ab16:	6823      	ldr	r3, [r4, #0]
 800ab18:	4631      	mov	r1, r6
 800ab1a:	4638      	mov	r0, r7
 800ab1c:	eb04 0803 	add.w	r8, r4, r3
 800ab20:	f000 f848 	bl	800abb4 <_sbrk_r>
 800ab24:	4580      	cmp	r8, r0
 800ab26:	d13a      	bne.n	800ab9e <_malloc_r+0xd2>
 800ab28:	6821      	ldr	r1, [r4, #0]
 800ab2a:	3503      	adds	r5, #3
 800ab2c:	1a6d      	subs	r5, r5, r1
 800ab2e:	f025 0503 	bic.w	r5, r5, #3
 800ab32:	3508      	adds	r5, #8
 800ab34:	2d0c      	cmp	r5, #12
 800ab36:	bf38      	it	cc
 800ab38:	250c      	movcc	r5, #12
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	4638      	mov	r0, r7
 800ab3e:	f7ff ffa5 	bl	800aa8c <sbrk_aligned>
 800ab42:	3001      	adds	r0, #1
 800ab44:	d02b      	beq.n	800ab9e <_malloc_r+0xd2>
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	442b      	add	r3, r5
 800ab4a:	6023      	str	r3, [r4, #0]
 800ab4c:	e00e      	b.n	800ab6c <_malloc_r+0xa0>
 800ab4e:	6822      	ldr	r2, [r4, #0]
 800ab50:	1b52      	subs	r2, r2, r5
 800ab52:	d41e      	bmi.n	800ab92 <_malloc_r+0xc6>
 800ab54:	2a0b      	cmp	r2, #11
 800ab56:	d916      	bls.n	800ab86 <_malloc_r+0xba>
 800ab58:	1961      	adds	r1, r4, r5
 800ab5a:	42a3      	cmp	r3, r4
 800ab5c:	6025      	str	r5, [r4, #0]
 800ab5e:	bf18      	it	ne
 800ab60:	6059      	strne	r1, [r3, #4]
 800ab62:	6863      	ldr	r3, [r4, #4]
 800ab64:	bf08      	it	eq
 800ab66:	6031      	streq	r1, [r6, #0]
 800ab68:	5162      	str	r2, [r4, r5]
 800ab6a:	604b      	str	r3, [r1, #4]
 800ab6c:	4638      	mov	r0, r7
 800ab6e:	f104 060b 	add.w	r6, r4, #11
 800ab72:	f000 f835 	bl	800abe0 <__malloc_unlock>
 800ab76:	f026 0607 	bic.w	r6, r6, #7
 800ab7a:	1d23      	adds	r3, r4, #4
 800ab7c:	1af2      	subs	r2, r6, r3
 800ab7e:	d0b6      	beq.n	800aaee <_malloc_r+0x22>
 800ab80:	1b9b      	subs	r3, r3, r6
 800ab82:	50a3      	str	r3, [r4, r2]
 800ab84:	e7b3      	b.n	800aaee <_malloc_r+0x22>
 800ab86:	6862      	ldr	r2, [r4, #4]
 800ab88:	42a3      	cmp	r3, r4
 800ab8a:	bf0c      	ite	eq
 800ab8c:	6032      	streq	r2, [r6, #0]
 800ab8e:	605a      	strne	r2, [r3, #4]
 800ab90:	e7ec      	b.n	800ab6c <_malloc_r+0xa0>
 800ab92:	4623      	mov	r3, r4
 800ab94:	6864      	ldr	r4, [r4, #4]
 800ab96:	e7b2      	b.n	800aafe <_malloc_r+0x32>
 800ab98:	4634      	mov	r4, r6
 800ab9a:	6876      	ldr	r6, [r6, #4]
 800ab9c:	e7b9      	b.n	800ab12 <_malloc_r+0x46>
 800ab9e:	230c      	movs	r3, #12
 800aba0:	603b      	str	r3, [r7, #0]
 800aba2:	4638      	mov	r0, r7
 800aba4:	f000 f81c 	bl	800abe0 <__malloc_unlock>
 800aba8:	e7a1      	b.n	800aaee <_malloc_r+0x22>
 800abaa:	6025      	str	r5, [r4, #0]
 800abac:	e7de      	b.n	800ab6c <_malloc_r+0xa0>
 800abae:	bf00      	nop
 800abb0:	24000854 	.word	0x24000854

0800abb4 <_sbrk_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4d06      	ldr	r5, [pc, #24]	; (800abd0 <_sbrk_r+0x1c>)
 800abb8:	2300      	movs	r3, #0
 800abba:	4604      	mov	r4, r0
 800abbc:	4608      	mov	r0, r1
 800abbe:	602b      	str	r3, [r5, #0]
 800abc0:	f7f6 fdf0 	bl	80017a4 <_sbrk>
 800abc4:	1c43      	adds	r3, r0, #1
 800abc6:	d102      	bne.n	800abce <_sbrk_r+0x1a>
 800abc8:	682b      	ldr	r3, [r5, #0]
 800abca:	b103      	cbz	r3, 800abce <_sbrk_r+0x1a>
 800abcc:	6023      	str	r3, [r4, #0]
 800abce:	bd38      	pop	{r3, r4, r5, pc}
 800abd0:	2400085c 	.word	0x2400085c

0800abd4 <__malloc_lock>:
 800abd4:	4801      	ldr	r0, [pc, #4]	; (800abdc <__malloc_lock+0x8>)
 800abd6:	f000 b809 	b.w	800abec <__retarget_lock_acquire_recursive>
 800abda:	bf00      	nop
 800abdc:	24000860 	.word	0x24000860

0800abe0 <__malloc_unlock>:
 800abe0:	4801      	ldr	r0, [pc, #4]	; (800abe8 <__malloc_unlock+0x8>)
 800abe2:	f000 b804 	b.w	800abee <__retarget_lock_release_recursive>
 800abe6:	bf00      	nop
 800abe8:	24000860 	.word	0x24000860

0800abec <__retarget_lock_acquire_recursive>:
 800abec:	4770      	bx	lr

0800abee <__retarget_lock_release_recursive>:
 800abee:	4770      	bx	lr

0800abf0 <sinf_poly>:
 800abf0:	07cb      	lsls	r3, r1, #31
 800abf2:	d412      	bmi.n	800ac1a <sinf_poly+0x2a>
 800abf4:	ee21 5b00 	vmul.f64	d5, d1, d0
 800abf8:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 800abfc:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800ac00:	eea6 7b01 	vfma.f64	d7, d6, d1
 800ac04:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 800ac08:	ee21 1b05 	vmul.f64	d1, d1, d5
 800ac0c:	eea6 0b05 	vfma.f64	d0, d6, d5
 800ac10:	eea7 0b01 	vfma.f64	d0, d7, d1
 800ac14:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ac18:	4770      	bx	lr
 800ac1a:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 800ac1e:	ee21 5b01 	vmul.f64	d5, d1, d1
 800ac22:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800ac26:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800ac2a:	eea1 7b06 	vfma.f64	d7, d1, d6
 800ac2e:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 800ac32:	eea1 0b06 	vfma.f64	d0, d1, d6
 800ac36:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 800ac3a:	ee21 1b05 	vmul.f64	d1, d1, d5
 800ac3e:	eea5 0b06 	vfma.f64	d0, d5, d6
 800ac42:	e7e5      	b.n	800ac10 <sinf_poly+0x20>
 800ac44:	0000      	movs	r0, r0
	...

0800ac48 <sinf>:
 800ac48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac4a:	ee10 4a10 	vmov	r4, s0
 800ac4e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800ac52:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800ac56:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800ac5a:	eef0 7a40 	vmov.f32	s15, s0
 800ac5e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800ac62:	d218      	bcs.n	800ac96 <sinf+0x4e>
 800ac64:	ee26 1b06 	vmul.f64	d1, d6, d6
 800ac68:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800ac6c:	d20a      	bcs.n	800ac84 <sinf+0x3c>
 800ac6e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800ac72:	d103      	bne.n	800ac7c <sinf+0x34>
 800ac74:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800ac78:	ed8d 1a01 	vstr	s2, [sp, #4]
 800ac7c:	eeb0 0a67 	vmov.f32	s0, s15
 800ac80:	b003      	add	sp, #12
 800ac82:	bd30      	pop	{r4, r5, pc}
 800ac84:	483a      	ldr	r0, [pc, #232]	; (800ad70 <sinf+0x128>)
 800ac86:	eeb0 0b46 	vmov.f64	d0, d6
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	b003      	add	sp, #12
 800ac8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac92:	f7ff bfad 	b.w	800abf0 <sinf_poly>
 800ac96:	f240 422e 	movw	r2, #1070	; 0x42e
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d824      	bhi.n	800ace8 <sinf+0xa0>
 800ac9e:	4b34      	ldr	r3, [pc, #208]	; (800ad70 <sinf+0x128>)
 800aca0:	ed93 7b08 	vldr	d7, [r3, #32]
 800aca4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800aca8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800acac:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800acb0:	ee17 1a90 	vmov	r1, s15
 800acb4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800acb8:	1609      	asrs	r1, r1, #24
 800acba:	ee07 1a90 	vmov	s15, r1
 800acbe:	f001 0203 	and.w	r2, r1, #3
 800acc2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800acc6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800acca:	ed92 0b00 	vldr	d0, [r2]
 800acce:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800acd2:	f011 0f02 	tst.w	r1, #2
 800acd6:	eea5 6b47 	vfms.f64	d6, d5, d7
 800acda:	bf08      	it	eq
 800acdc:	4618      	moveq	r0, r3
 800acde:	ee26 1b06 	vmul.f64	d1, d6, d6
 800ace2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ace6:	e7d1      	b.n	800ac8c <sinf+0x44>
 800ace8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800acec:	d237      	bcs.n	800ad5e <sinf+0x116>
 800acee:	4a21      	ldr	r2, [pc, #132]	; (800ad74 <sinf+0x12c>)
 800acf0:	f3c4 6183 	ubfx	r1, r4, #26, #4
 800acf4:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 800acf8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800acfc:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 800ad00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ad04:	4083      	lsls	r3, r0
 800ad06:	6a28      	ldr	r0, [r5, #32]
 800ad08:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ad0c:	fba3 1000 	umull	r1, r0, r3, r0
 800ad10:	6929      	ldr	r1, [r5, #16]
 800ad12:	435a      	muls	r2, r3
 800ad14:	fbe3 0201 	umlal	r0, r2, r3, r1
 800ad18:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 800ad1c:	0f8d      	lsrs	r5, r1, #30
 800ad1e:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 800ad22:	1a51      	subs	r1, r2, r1
 800ad24:	f7f5 fc72 	bl	800060c <__aeabi_l2d>
 800ad28:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800ad2c:	4b10      	ldr	r3, [pc, #64]	; (800ad70 <sinf+0x128>)
 800ad2e:	f004 0203 	and.w	r2, r4, #3
 800ad32:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ad36:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800ad68 <sinf+0x120>
 800ad3a:	ed92 0b00 	vldr	d0, [r2]
 800ad3e:	ec41 0b16 	vmov	d6, r0, r1
 800ad42:	f014 0f02 	tst.w	r4, #2
 800ad46:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ad4a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800ad4e:	4629      	mov	r1, r5
 800ad50:	bf08      	it	eq
 800ad52:	4618      	moveq	r0, r3
 800ad54:	ee27 1b07 	vmul.f64	d1, d7, d7
 800ad58:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ad5c:	e796      	b.n	800ac8c <sinf+0x44>
 800ad5e:	b003      	add	sp, #12
 800ad60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad64:	f000 b813 	b.w	800ad8e <__math_invalidf>
 800ad68:	54442d18 	.word	0x54442d18
 800ad6c:	3c1921fb 	.word	0x3c1921fb
 800ad70:	0800ae68 	.word	0x0800ae68
 800ad74:	0800ae08 	.word	0x0800ae08

0800ad78 <with_errnof>:
 800ad78:	b513      	push	{r0, r1, r4, lr}
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ad80:	f7ff fe4a 	bl	800aa18 <__errno>
 800ad84:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ad88:	6004      	str	r4, [r0, #0]
 800ad8a:	b002      	add	sp, #8
 800ad8c:	bd10      	pop	{r4, pc}

0800ad8e <__math_invalidf>:
 800ad8e:	eef0 7a40 	vmov.f32	s15, s0
 800ad92:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ad96:	eef4 7a67 	vcmp.f32	s15, s15
 800ad9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9e:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800ada2:	d602      	bvs.n	800adaa <__math_invalidf+0x1c>
 800ada4:	2021      	movs	r0, #33	; 0x21
 800ada6:	f7ff bfe7 	b.w	800ad78 <with_errnof>
 800adaa:	4770      	bx	lr

0800adac <_init>:
 800adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adae:	bf00      	nop
 800adb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adb2:	bc08      	pop	{r3}
 800adb4:	469e      	mov	lr, r3
 800adb6:	4770      	bx	lr

0800adb8 <_fini>:
 800adb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adba:	bf00      	nop
 800adbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adbe:	bc08      	pop	{r3}
 800adc0:	469e      	mov	lr, r3
 800adc2:	4770      	bx	lr
