
thesis-2-nucleo-h7a3zi-q.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a684  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a934  0800a934  0001a934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a974  0800a974  0001a974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a97c  0800a97c  0001a97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a980  0800a980  0001a980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800a984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007ec  24000074  0800a9f8  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000860  0800a9f8  00020860  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ef08  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c29  00000000  00000000  0003efaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001768  00000000  00000000  00042bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000015c0  00000000  00000000  00044340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000348f2  00000000  00000000  00045900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021170  00000000  00000000  0007a1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00155777  00000000  00000000  0009b362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001f0ad9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000645c  00000000  00000000  001f0b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a91c 	.word	0x0800a91c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800a91c 	.word	0x0800a91c

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <Delay_Init>:
#define SAMPLE_RATE 96000
#define PI 3.14159265359

DelayEffect delay;

void Delay_Init() {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	delay.delayBufferLength = 2*SAMPLE_RATE;
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <Delay_Init+0x90>)
 80005fa:	4a23      	ldr	r2, [pc, #140]	; (8000688 <Delay_Init+0x94>)
 80005fc:	611a      	str	r2, [r3, #16]
	delay.delayLength = 1.5f;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <Delay_Init+0x90>)
 8000600:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8000604:	60da      	str	r2, [r3, #12]
	delay.delayWritePtr = 0;
 8000606:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <Delay_Init+0x90>)
 8000608:	2200      	movs	r2, #0
 800060a:	605a      	str	r2, [r3, #4]
	delay.delayReadPtr = (int)(delay.delayWritePtr - (delay.delayLength * SAMPLE_RATE) + delay.delayBufferLength) % delay.delayBufferLength;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <Delay_Init+0x90>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	ee07 3a90 	vmov	s15, r3
 8000614:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <Delay_Init+0x90>)
 800061a:	edd3 7a03 	vldr	s15, [r3, #12]
 800061e:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800068c <Delay_Init+0x98>
 8000622:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000626:	ee37 7a67 	vsub.f32	s14, s14, s15
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <Delay_Init+0x90>)
 800062c:	691b      	ldr	r3, [r3, #16]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800063a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800063e:	ee17 1a90 	vmov	r1, s15
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <Delay_Init+0x90>)
 8000644:	691b      	ldr	r3, [r3, #16]
 8000646:	fb91 f2f3 	sdiv	r2, r1, r3
 800064a:	fb02 f303 	mul.w	r3, r2, r3
 800064e:	1acb      	subs	r3, r1, r3
 8000650:	4a0c      	ldr	r2, [pc, #48]	; (8000684 <Delay_Init+0x90>)
 8000652:	6093      	str	r3, [r2, #8]
	delay.delayData = (uint16_t*) malloc(delay.delayBufferLength * sizeof(uint16_t));
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <Delay_Init+0x90>)
 8000656:	691b      	ldr	r3, [r3, #16]
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4618      	mov	r0, r3
 800065c:	f00a f89c 	bl	800a798 <malloc>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <Delay_Init+0x90>)
 8000666:	601a      	str	r2, [r3, #0]
	delay.feedback = 0.75f;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <Delay_Init+0x90>)
 800066a:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800066e:	615a      	str	r2, [r3, #20]
	delay.dryMix = 1;
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <Delay_Init+0x90>)
 8000672:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000676:	619a      	str	r2, [r3, #24]
	delay.wetMix = 1;
 8000678:	4b02      	ldr	r3, [pc, #8]	; (8000684 <Delay_Init+0x90>)
 800067a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800067e:	61da      	str	r2, [r3, #28]
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	24000090 	.word	0x24000090
 8000688:	0002ee00 	.word	0x0002ee00
 800068c:	47bb8000 	.word	0x47bb8000

08000690 <calculateDelay>:

uint16_t calculateDelay(uint16_t in) {
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	80fb      	strh	r3, [r7, #6]
	uint16_t out = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	81fb      	strh	r3, [r7, #14]

	out = (delay.dryMix * in + delay.wetMix *delay.delayData[delay.delayReadPtr]);
 800069e:	4b33      	ldr	r3, [pc, #204]	; (800076c <calculateDelay+0xdc>)
 80006a0:	ed93 7a06 	vldr	s14, [r3, #24]
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	ee07 3a90 	vmov	s15, r3
 80006aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <calculateDelay+0xdc>)
 80006b4:	edd3 6a07 	vldr	s13, [r3, #28]
 80006b8:	4b2c      	ldr	r3, [pc, #176]	; (800076c <calculateDelay+0xdc>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b2b      	ldr	r3, [pc, #172]	; (800076c <calculateDelay+0xdc>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	4413      	add	r3, r2
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	ee07 3a90 	vmov	s15, r3
 80006ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006da:	ee17 3a90 	vmov	r3, s15
 80006de:	81fb      	strh	r3, [r7, #14]

	delay.delayData[delay.delayWritePtr] = in + (delay.delayData[delay.delayReadPtr]*delay.feedback);
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	ee07 3a90 	vmov	s15, r3
 80006e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <calculateDelay+0xdc>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <calculateDelay+0xdc>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	ee07 3a90 	vmov	s15, r3
 80006fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <calculateDelay+0xdc>)
 8000702:	edd3 7a05 	vldr	s15, [r3, #20]
 8000706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800070a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <calculateDelay+0xdc>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <calculateDelay+0xdc>)
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	4413      	add	r3, r2
 800071a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800071e:	ee17 2a90 	vmov	r2, s15
 8000722:	b292      	uxth	r2, r2
 8000724:	801a      	strh	r2, [r3, #0]

	if(++delay.delayReadPtr >= delay.delayBufferLength)
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <calculateDelay+0xdc>)
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	3301      	adds	r3, #1
 800072c:	4a0f      	ldr	r2, [pc, #60]	; (800076c <calculateDelay+0xdc>)
 800072e:	6093      	str	r3, [r2, #8]
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <calculateDelay+0xdc>)
 8000732:	689a      	ldr	r2, [r3, #8]
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <calculateDelay+0xdc>)
 8000736:	691b      	ldr	r3, [r3, #16]
 8000738:	429a      	cmp	r2, r3
 800073a:	db02      	blt.n	8000742 <calculateDelay+0xb2>
		delay.delayReadPtr = 0;
 800073c:	4b0b      	ldr	r3, [pc, #44]	; (800076c <calculateDelay+0xdc>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]

	if(++delay.delayWritePtr >= delay.delayBufferLength)
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <calculateDelay+0xdc>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	3301      	adds	r3, #1
 8000748:	4a08      	ldr	r2, [pc, #32]	; (800076c <calculateDelay+0xdc>)
 800074a:	6053      	str	r3, [r2, #4]
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <calculateDelay+0xdc>)
 800074e:	685a      	ldr	r2, [r3, #4]
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <calculateDelay+0xdc>)
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	429a      	cmp	r2, r3
 8000756:	db02      	blt.n	800075e <calculateDelay+0xce>
		delay.delayWritePtr = 0;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <calculateDelay+0xdc>)
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]

	return out;
 800075e:	89fb      	ldrh	r3, [r7, #14]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	24000090 	.word	0x24000090

08000770 <Delay_Set_Params>:

void Delay_Set_Params(float delayLength, float feedback) {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	ed87 0a01 	vstr	s0, [r7, #4]
 800077a:	edc7 0a00 	vstr	s1, [r7]
	if(delayLength > delay.delayLength - 0.1 - 0.001 || delayLength + 0.1 < delay.delayLength - 0.001) {
 800077e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000782:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000786:	4b50      	ldr	r3, [pc, #320]	; (80008c8 <Delay_Set_Params+0x158>)
 8000788:	edd3 7a03 	vldr	s15, [r3, #12]
 800078c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000790:	ed9f 5b47 	vldr	d5, [pc, #284]	; 80008b0 <Delay_Set_Params+0x140>
 8000794:	ee37 7b45 	vsub.f64	d7, d7, d5
 8000798:	ed9f 5b47 	vldr	d5, [pc, #284]	; 80008b8 <Delay_Set_Params+0x148>
 800079c:	ee37 7b45 	vsub.f64	d7, d7, d5
 80007a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80007a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a8:	dc15      	bgt.n	80007d6 <Delay_Set_Params+0x66>
 80007aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80007ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007b2:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 80008b0 <Delay_Set_Params+0x140>
 80007b6:	ee37 6b06 	vadd.f64	d6, d7, d6
 80007ba:	4b43      	ldr	r3, [pc, #268]	; (80008c8 <Delay_Set_Params+0x158>)
 80007bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80007c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007c4:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 80008b8 <Delay_Set_Params+0x148>
 80007c8:	ee37 7b45 	vsub.f64	d7, d7, d5
 80007cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80007d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d4:	d526      	bpl.n	8000824 <Delay_Set_Params+0xb4>
		delay.delayLength = delayLength;
 80007d6:	4a3c      	ldr	r2, [pc, #240]	; (80008c8 <Delay_Set_Params+0x158>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	60d3      	str	r3, [r2, #12]
		delay.delayReadPtr = (int)(delay.delayWritePtr - (delay.delayLength * SAMPLE_RATE) + delay.delayBufferLength) % delay.delayBufferLength;
 80007dc:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <Delay_Set_Params+0x158>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	ee07 3a90 	vmov	s15, r3
 80007e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007e8:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <Delay_Set_Params+0x158>)
 80007ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80007ee:	eddf 6a37 	vldr	s13, [pc, #220]	; 80008cc <Delay_Set_Params+0x15c>
 80007f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80007f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <Delay_Set_Params+0x158>)
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	ee07 3a90 	vmov	s15, r3
 8000802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800080a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800080e:	ee17 1a90 	vmov	r1, s15
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <Delay_Set_Params+0x158>)
 8000814:	691b      	ldr	r3, [r3, #16]
 8000816:	fb91 f2f3 	sdiv	r2, r1, r3
 800081a:	fb02 f303 	mul.w	r3, r2, r3
 800081e:	1acb      	subs	r3, r1, r3
 8000820:	4a29      	ldr	r2, [pc, #164]	; (80008c8 <Delay_Set_Params+0x158>)
 8000822:	6093      	str	r3, [r2, #8]
	}

	if(feedback > 0.8) feedback = 0.8;
 8000824:	edd7 7a00 	vldr	s15, [r7]
 8000828:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800082c:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80008c0 <Delay_Set_Params+0x150>
 8000830:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000838:	dd01      	ble.n	800083e <Delay_Set_Params+0xce>
 800083a:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <Delay_Set_Params+0x160>)
 800083c:	603b      	str	r3, [r7, #0]

	if(feedback > delay.feedback - 0.1 - 0.001 || feedback + 0.1 < delay.feedback - 0.001) {
 800083e:	edd7 7a00 	vldr	s15, [r7]
 8000842:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <Delay_Set_Params+0x158>)
 8000848:	edd3 7a05 	vldr	s15, [r3, #20]
 800084c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000850:	ed9f 5b17 	vldr	d5, [pc, #92]	; 80008b0 <Delay_Set_Params+0x140>
 8000854:	ee37 7b45 	vsub.f64	d7, d7, d5
 8000858:	ed9f 5b17 	vldr	d5, [pc, #92]	; 80008b8 <Delay_Set_Params+0x148>
 800085c:	ee37 7b45 	vsub.f64	d7, d7, d5
 8000860:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000868:	dc16      	bgt.n	8000898 <Delay_Set_Params+0x128>
 800086a:	edd7 7a00 	vldr	s15, [r7]
 800086e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000872:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80008b0 <Delay_Set_Params+0x140>
 8000876:	ee37 6b06 	vadd.f64	d6, d7, d6
 800087a:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <Delay_Set_Params+0x158>)
 800087c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000880:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000884:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 80008b8 <Delay_Set_Params+0x148>
 8000888:	ee37 7b45 	vsub.f64	d7, d7, d5
 800088c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000894:	d400      	bmi.n	8000898 <Delay_Set_Params+0x128>
		delay.feedback = feedback;
	}


}
 8000896:	e002      	b.n	800089e <Delay_Set_Params+0x12e>
		delay.feedback = feedback;
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <Delay_Set_Params+0x158>)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	6153      	str	r3, [r2, #20]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	f3af 8000 	nop.w
 80008b0:	9999999a 	.word	0x9999999a
 80008b4:	3fb99999 	.word	0x3fb99999
 80008b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80008bc:	3f50624d 	.word	0x3f50624d
 80008c0:	9999999a 	.word	0x9999999a
 80008c4:	3fe99999 	.word	0x3fe99999
 80008c8:	24000090 	.word	0x24000090
 80008cc:	47bb8000 	.word	0x47bb8000
 80008d0:	3f4ccccd 	.word	0x3f4ccccd

080008d4 <Tremolo_Init>:
		default:
			return 0.5f + 0.5f*sinf(2.0 * PI * phase);
		}
}

void Tremolo_Init() {
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
	tremolo.phase = 0;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <Tremolo_Init+0x2c>)
 80008da:	f04f 0200 	mov.w	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
	tremolo.inverseSampleRate = 1.0f/SAMPLE_RATE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <Tremolo_Init+0x2c>)
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <Tremolo_Init+0x30>)
 80008e4:	605a      	str	r2, [r3, #4]
	tremolo.depth = 1.0f;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <Tremolo_Init+0x2c>)
 80008e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80008ec:	609a      	str	r2, [r3, #8]
	tremolo.waveform = Square;
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <Tremolo_Init+0x2c>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	611a      	str	r2, [r3, #16]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	240000b0 	.word	0x240000b0
 8000904:	372ec33e 	.word	0x372ec33e

08000908 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800091a:	463b      	mov	r3, r7
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
 8000928:	615a      	str	r2, [r3, #20]
 800092a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800092c:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <MX_ADC1_Init+0xe8>)
 800092e:	4a31      	ldr	r2, [pc, #196]	; (80009f4 <MX_ADC1_Init+0xec>)
 8000930:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000932:	4b2f      	ldr	r3, [pc, #188]	; (80009f0 <MX_ADC1_Init+0xe8>)
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <MX_ADC1_Init+0xe8>)
 800093a:	2208      	movs	r2, #8
 800093c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800093e:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <MX_ADC1_Init+0xe8>)
 8000940:	2200      	movs	r2, #0
 8000942:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <MX_ADC1_Init+0xe8>)
 8000946:	2204      	movs	r2, #4
 8000948:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800094a:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <MX_ADC1_Init+0xe8>)
 800094c:	2200      	movs	r2, #0
 800094e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <MX_ADC1_Init+0xe8>)
 8000952:	2200      	movs	r2, #0
 8000954:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <MX_ADC1_Init+0xe8>)
 8000958:	2201      	movs	r2, #1
 800095a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <MX_ADC1_Init+0xe8>)
 800095e:	2200      	movs	r2, #0
 8000960:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000962:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <MX_ADC1_Init+0xe8>)
 8000964:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_ADC1_Init+0xe8>)
 800096c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000970:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_ADC1_Init+0xe8>)
 8000974:	2203      	movs	r2, #3
 8000976:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_ADC1_Init+0xe8>)
 800097a:	2200      	movs	r2, #0
 800097c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800097e:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_ADC1_Init+0xe8>)
 8000980:	2200      	movs	r2, #0
 8000982:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_ADC1_Init+0xe8>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098c:	4818      	ldr	r0, [pc, #96]	; (80009f0 <MX_ADC1_Init+0xe8>)
 800098e:	f001 fa8f 	bl	8001eb0 <HAL_ADC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000998:	f000 fd2e 	bl	80013f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4812      	ldr	r0, [pc, #72]	; (80009f0 <MX_ADC1_Init+0xe8>)
 80009a8:	f002 f982 	bl	8002cb0 <HAL_ADCEx_MultiModeConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80009b2:	f000 fd21 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_ADC1_Init+0xf0>)
 80009b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ba:	2306      	movs	r3, #6
 80009bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009c2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009c6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009c8:	2304      	movs	r3, #4
 80009ca:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_ADC1_Init+0xe8>)
 80009da:	f001 fc81 	bl	80022e0 <HAL_ADC_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80009e4:	f000 fd08 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	240000c4 	.word	0x240000c4
 80009f4:	40022000 	.word	0x40022000
 80009f8:	08600004 	.word	0x08600004

080009fc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
 8000a10:	615a      	str	r2, [r3, #20]
 8000a12:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a14:	4b38      	ldr	r3, [pc, #224]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a16:	4a39      	ldr	r2, [pc, #228]	; (8000afc <MX_ADC2_Init+0x100>)
 8000a18:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a1a:	4b37      	ldr	r3, [pc, #220]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a20:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a22:	2208      	movs	r2, #8
 8000a24:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a26:	4b34      	ldr	r3, [pc, #208]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a2c:	4b32      	ldr	r3, [pc, #200]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a2e:	2204      	movs	r2, #4
 8000a30:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a38:	4b2f      	ldr	r3, [pc, #188]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 3;
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a40:	2203      	movs	r2, #3
 8000a42:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a44:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a4c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a52:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a5a:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a66:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a74:	4820      	ldr	r0, [pc, #128]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000a76:	f001 fa1b 	bl	8001eb0 <HAL_ADC_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000a80:	f000 fcba 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <MX_ADC2_Init+0x104>)
 8000a86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a88:	2306      	movs	r3, #6
 8000a8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a90:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a94:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a96:	2304      	movs	r3, #4
 8000a98:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4814      	ldr	r0, [pc, #80]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000aa8:	f001 fc1a 	bl	80022e0 <HAL_ADC_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8000ab2:	f000 fca1 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_ADC2_Init+0x108>)
 8000ab8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000aba:	230c      	movs	r3, #12
 8000abc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000ac4:	f001 fc0c 	bl	80022e0 <HAL_ADC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 8000ace:	f000 fc93 	bl	80013f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <MX_ADC2_Init+0x10c>)
 8000ad4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ad6:	2312      	movs	r3, #18
 8000ad8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <MX_ADC2_Init+0xfc>)
 8000ae0:	f001 fbfe 	bl	80022e0 <HAL_ADC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 8000aea:	f000 fc85 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	3720      	adds	r7, #32
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	24000128 	.word	0x24000128
 8000afc:	40022100 	.word	0x40022100
 8000b00:	19200040 	.word	0x19200040
 8000b04:	1d500080 	.word	0x1d500080
 8000b08:	21800100 	.word	0x21800100

08000b0c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a86      	ldr	r2, [pc, #536]	; (8000d44 <HAL_ADC_MspInit+0x238>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d165      	bne.n	8000bfa <HAL_ADC_MspInit+0xee>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000b2e:	4b86      	ldr	r3, [pc, #536]	; (8000d48 <HAL_ADC_MspInit+0x23c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	4a84      	ldr	r2, [pc, #528]	; (8000d48 <HAL_ADC_MspInit+0x23c>)
 8000b36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b38:	4b83      	ldr	r3, [pc, #524]	; (8000d48 <HAL_ADC_MspInit+0x23c>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d10e      	bne.n	8000b5e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b40:	4b82      	ldr	r3, [pc, #520]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000b42:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b46:	4a81      	ldr	r2, [pc, #516]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000b48:	f043 0320 	orr.w	r3, r3, #32
 8000b4c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000b50:	4b7e      	ldr	r3, [pc, #504]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000b52:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b56:	f003 0320 	and.w	r3, r3, #32
 8000b5a:	623b      	str	r3, [r7, #32]
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5e:	4b7b      	ldr	r3, [pc, #492]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000b60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b64:	4a79      	ldr	r2, [pc, #484]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000b66:	f043 0320 	orr.w	r3, r3, #32
 8000b6a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b6e:	4b77      	ldr	r3, [pc, #476]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000b70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b74:	f003 0320 	and.w	r3, r3, #32
 8000b78:	61fb      	str	r3, [r7, #28]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b82:	2303      	movs	r3, #3
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	486f      	ldr	r0, [pc, #444]	; (8000d50 <HAL_ADC_MspInit+0x244>)
 8000b92:	f004 fe7b 	bl	800588c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000b96:	4b6f      	ldr	r3, [pc, #444]	; (8000d54 <HAL_ADC_MspInit+0x248>)
 8000b98:	4a6f      	ldr	r2, [pc, #444]	; (8000d58 <HAL_ADC_MspInit+0x24c>)
 8000b9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b9c:	4b6d      	ldr	r3, [pc, #436]	; (8000d54 <HAL_ADC_MspInit+0x248>)
 8000b9e:	2209      	movs	r2, #9
 8000ba0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba2:	4b6c      	ldr	r3, [pc, #432]	; (8000d54 <HAL_ADC_MspInit+0x248>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba8:	4b6a      	ldr	r3, [pc, #424]	; (8000d54 <HAL_ADC_MspInit+0x248>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bae:	4b69      	ldr	r3, [pc, #420]	; (8000d54 <HAL_ADC_MspInit+0x248>)
 8000bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bb4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bb6:	4b67      	ldr	r3, [pc, #412]	; (8000d54 <HAL_ADC_MspInit+0x248>)
 8000bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bbc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bbe:	4b65      	ldr	r3, [pc, #404]	; (8000d54 <HAL_ADC_MspInit+0x248>)
 8000bc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bc6:	4b63      	ldr	r3, [pc, #396]	; (8000d54 <HAL_ADC_MspInit+0x248>)
 8000bc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bcc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000bce:	4b61      	ldr	r3, [pc, #388]	; (8000d54 <HAL_ADC_MspInit+0x248>)
 8000bd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bd4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bd6:	4b5f      	ldr	r3, [pc, #380]	; (8000d54 <HAL_ADC_MspInit+0x248>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bdc:	485d      	ldr	r0, [pc, #372]	; (8000d54 <HAL_ADC_MspInit+0x248>)
 8000bde:	f002 fcd9 	bl	8003594 <HAL_DMA_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_ADC_MspInit+0xe0>
    {
      Error_Handler();
 8000be8:	f000 fc06 	bl	80013f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a59      	ldr	r2, [pc, #356]	; (8000d54 <HAL_ADC_MspInit+0x248>)
 8000bf0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bf2:	4a58      	ldr	r2, [pc, #352]	; (8000d54 <HAL_ADC_MspInit+0x248>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000bf8:	e09f      	b.n	8000d3a <HAL_ADC_MspInit+0x22e>
  else if(adcHandle->Instance==ADC2)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a57      	ldr	r2, [pc, #348]	; (8000d5c <HAL_ADC_MspInit+0x250>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	f040 809a 	bne.w	8000d3a <HAL_ADC_MspInit+0x22e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c06:	4b50      	ldr	r3, [pc, #320]	; (8000d48 <HAL_ADC_MspInit+0x23c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4a4e      	ldr	r2, [pc, #312]	; (8000d48 <HAL_ADC_MspInit+0x23c>)
 8000c0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c10:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <HAL_ADC_MspInit+0x23c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d10e      	bne.n	8000c36 <HAL_ADC_MspInit+0x12a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c18:	4b4c      	ldr	r3, [pc, #304]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000c1a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c1e:	4a4b      	ldr	r2, [pc, #300]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000c20:	f043 0320 	orr.w	r3, r3, #32
 8000c24:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000c28:	4b48      	ldr	r3, [pc, #288]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000c2a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000c2e:	f003 0320 	and.w	r3, r3, #32
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000c38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c3c:	4a43      	ldr	r2, [pc, #268]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c46:	4b41      	ldr	r3, [pc, #260]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000c48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c54:	4b3d      	ldr	r3, [pc, #244]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000c56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c5a:	4a3c      	ldr	r2, [pc, #240]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c64:	4b39      	ldr	r3, [pc, #228]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000c66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c6a:	f003 0304 	and.w	r3, r3, #4
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c72:	4b36      	ldr	r3, [pc, #216]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000c74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c78:	4a34      	ldr	r2, [pc, #208]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000c7a:	f043 0320 	orr.w	r3, r3, #32
 8000c7e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c82:	4b32      	ldr	r3, [pc, #200]	; (8000d4c <HAL_ADC_MspInit+0x240>)
 8000c84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c88:	f003 0320 	and.w	r3, r3, #32
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c94:	2303      	movs	r3, #3
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	482f      	ldr	r0, [pc, #188]	; (8000d60 <HAL_ADC_MspInit+0x254>)
 8000ca4:	f004 fdf2 	bl	800588c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ca8:	2320      	movs	r3, #32
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cac:	2303      	movs	r3, #3
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	482a      	ldr	r0, [pc, #168]	; (8000d64 <HAL_ADC_MspInit+0x258>)
 8000cbc:	f004 fde6 	bl	800588c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000cc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	481e      	ldr	r0, [pc, #120]	; (8000d50 <HAL_ADC_MspInit+0x244>)
 8000cd6:	f004 fdd9 	bl	800588c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream2;
 8000cda:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <HAL_ADC_MspInit+0x25c>)
 8000cdc:	4a23      	ldr	r2, [pc, #140]	; (8000d6c <HAL_ADC_MspInit+0x260>)
 8000cde:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000ce0:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <HAL_ADC_MspInit+0x25c>)
 8000ce2:	220a      	movs	r2, #10
 8000ce4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <HAL_ADC_MspInit+0x25c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <HAL_ADC_MspInit+0x25c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <HAL_ADC_MspInit+0x25c>)
 8000cf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cf8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <HAL_ADC_MspInit+0x25c>)
 8000cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d00:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_ADC_MspInit+0x25c>)
 8000d04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d08:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <HAL_ADC_MspInit+0x25c>)
 8000d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d10:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_ADC_MspInit+0x25c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_ADC_MspInit+0x25c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000d1e:	4812      	ldr	r0, [pc, #72]	; (8000d68 <HAL_ADC_MspInit+0x25c>)
 8000d20:	f002 fc38 	bl	8003594 <HAL_DMA_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_ADC_MspInit+0x222>
      Error_Handler();
 8000d2a:	f000 fb65 	bl	80013f8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <HAL_ADC_MspInit+0x25c>)
 8000d32:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d34:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <HAL_ADC_MspInit+0x25c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000d3a:	bf00      	nop
 8000d3c:	3738      	adds	r7, #56	; 0x38
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40022000 	.word	0x40022000
 8000d48:	2400027c 	.word	0x2400027c
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	58021400 	.word	0x58021400
 8000d54:	2400018c 	.word	0x2400018c
 8000d58:	40020010 	.word	0x40020010
 8000d5c:	40022100 	.word	0x40022100
 8000d60:	58020000 	.word	0x58020000
 8000d64:	58020800 	.word	0x58020800
 8000d68:	24000204 	.word	0x24000204
 8000d6c:	40020040 	.word	0x40020040

08000d70 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2224      	movs	r2, #36	; 0x24
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f009 fd13 	bl	800a7a8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <MX_DAC1_Init+0x5c>)
 8000d84:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <MX_DAC1_Init+0x60>)
 8000d86:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d88:	4810      	ldr	r0, [pc, #64]	; (8000dcc <MX_DAC1_Init+0x5c>)
 8000d8a:	f002 f93c 	bl	8003006 <HAL_DAC_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000d94:	f000 fb30 	bl	80013f8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000d9c:	2316      	movs	r3, #22
 8000d9e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000da4:	2301      	movs	r3, #1
 8000da6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	4619      	mov	r1, r3
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <MX_DAC1_Init+0x5c>)
 8000db4:	f002 fa34 	bl	8003220 <HAL_DAC_ConfigChannel>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000dbe:	f000 fb1b 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	; 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	24000280 	.word	0x24000280
 8000dd0:	40007400 	.word	0x40007400

08000dd4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a30      	ldr	r2, [pc, #192]	; (8000eb4 <HAL_DAC_MspInit+0xe0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d15a      	bne.n	8000eac <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000df6:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <HAL_DAC_MspInit+0xe4>)
 8000df8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000dfc:	4a2e      	ldr	r2, [pc, #184]	; (8000eb8 <HAL_DAC_MspInit+0xe4>)
 8000dfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e02:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000e06:	4b2c      	ldr	r3, [pc, #176]	; (8000eb8 <HAL_DAC_MspInit+0xe4>)
 8000e08:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_DAC_MspInit+0xe4>)
 8000e16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e1a:	4a27      	ldr	r2, [pc, #156]	; (8000eb8 <HAL_DAC_MspInit+0xe4>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e24:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <HAL_DAC_MspInit+0xe4>)
 8000e26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e32:	2310      	movs	r3, #16
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	481d      	ldr	r0, [pc, #116]	; (8000ebc <HAL_DAC_MspInit+0xe8>)
 8000e46:	f004 fd21 	bl	800588c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream1;
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_DAC_MspInit+0xec>)
 8000e4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <HAL_DAC_MspInit+0xf0>)
 8000e4e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_DAC_MspInit+0xec>)
 8000e52:	2243      	movs	r2, #67	; 0x43
 8000e54:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_DAC_MspInit+0xec>)
 8000e58:	2240      	movs	r2, #64	; 0x40
 8000e5a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_DAC_MspInit+0xec>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_DAC_MspInit+0xec>)
 8000e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e68:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_DAC_MspInit+0xec>)
 8000e6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e70:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_DAC_MspInit+0xec>)
 8000e74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e78:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_DAC_MspInit+0xec>)
 8000e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e80:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_DAC_MspInit+0xec>)
 8000e84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e88:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_DAC_MspInit+0xec>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000e90:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <HAL_DAC_MspInit+0xec>)
 8000e92:	f002 fb7f 	bl	8003594 <HAL_DMA_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8000e9c:	f000 faac 	bl	80013f8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_DAC_MspInit+0xec>)
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_DAC_MspInit+0xec>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	; 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40007400 	.word	0x40007400
 8000eb8:	58024400 	.word	0x58024400
 8000ebc:	58020000 	.word	0x58020000
 8000ec0:	24000294 	.word	0x24000294
 8000ec4:	40020028 	.word	0x40020028

08000ec8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_DMA_Init+0x5c>)
 8000ed0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ed4:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <MX_DMA_Init+0x5c>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_DMA_Init+0x5c>)
 8000ee0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	200b      	movs	r0, #11
 8000ef2:	f002 f854 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ef6:	200b      	movs	r0, #11
 8000ef8:	f002 f86b 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2100      	movs	r1, #0
 8000f00:	200c      	movs	r0, #12
 8000f02:	f002 f84c 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f06:	200c      	movs	r0, #12
 8000f08:	f002 f863 	bl	8002fd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	200d      	movs	r0, #13
 8000f12:	f002 f844 	bl	8002f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f16:	200d      	movs	r0, #13
 8000f18:	f002 f85b 	bl	8002fd2 <HAL_NVIC_EnableIRQ>

}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	58024400 	.word	0x58024400

08000f28 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	4b56      	ldr	r3, [pc, #344]	; (8001098 <MX_GPIO_Init+0x170>)
 8000f40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f44:	4a54      	ldr	r2, [pc, #336]	; (8001098 <MX_GPIO_Init+0x170>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f4e:	4b52      	ldr	r3, [pc, #328]	; (8001098 <MX_GPIO_Init+0x170>)
 8000f50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
 8000f5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f5c:	4b4e      	ldr	r3, [pc, #312]	; (8001098 <MX_GPIO_Init+0x170>)
 8000f5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f62:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <MX_GPIO_Init+0x170>)
 8000f64:	f043 0320 	orr.w	r3, r3, #32
 8000f68:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f6c:	4b4a      	ldr	r3, [pc, #296]	; (8001098 <MX_GPIO_Init+0x170>)
 8000f6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f72:	f003 0320 	and.w	r3, r3, #32
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	4b47      	ldr	r3, [pc, #284]	; (8001098 <MX_GPIO_Init+0x170>)
 8000f7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f80:	4a45      	ldr	r2, [pc, #276]	; (8001098 <MX_GPIO_Init+0x170>)
 8000f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f86:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f8a:	4b43      	ldr	r3, [pc, #268]	; (8001098 <MX_GPIO_Init+0x170>)
 8000f8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <MX_GPIO_Init+0x170>)
 8000f9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f9e:	4a3e      	ldr	r2, [pc, #248]	; (8001098 <MX_GPIO_Init+0x170>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fa8:	4b3b      	ldr	r3, [pc, #236]	; (8001098 <MX_GPIO_Init+0x170>)
 8000faa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <MX_GPIO_Init+0x170>)
 8000fb8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fbc:	4a36      	ldr	r2, [pc, #216]	; (8001098 <MX_GPIO_Init+0x170>)
 8000fbe:	f043 0308 	orr.w	r3, r3, #8
 8000fc2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fc6:	4b34      	ldr	r3, [pc, #208]	; (8001098 <MX_GPIO_Init+0x170>)
 8000fc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fcc:	f003 0308 	and.w	r3, r3, #8
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fd4:	4b30      	ldr	r3, [pc, #192]	; (8001098 <MX_GPIO_Init+0x170>)
 8000fd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fda:	4a2f      	ldr	r2, [pc, #188]	; (8001098 <MX_GPIO_Init+0x170>)
 8000fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <MX_GPIO_Init+0x170>)
 8000fe6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff8:	4828      	ldr	r0, [pc, #160]	; (800109c <MX_GPIO_Init+0x174>)
 8000ffa:	f004 fdf7 	bl	8005bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	4821      	ldr	r0, [pc, #132]	; (800109c <MX_GPIO_Init+0x174>)
 8001018:	f004 fc38 	bl	800588c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001020:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	481b      	ldr	r0, [pc, #108]	; (80010a0 <MX_GPIO_Init+0x178>)
 8001032:	f004 fc2b 	bl	800588c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	2300      	movs	r3, #0
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	4816      	ldr	r0, [pc, #88]	; (80010a4 <MX_GPIO_Init+0x17c>)
 800104c:	f004 fc1e 	bl	800588c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001062:	230a      	movs	r3, #10
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <MX_GPIO_Init+0x17c>)
 800106e:	f004 fc0d 	bl	800588c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8001072:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_GPIO_Init+0x17c>)
 800108c:	f004 fbfe 	bl	800588c <HAL_GPIO_Init>

}
 8001090:	bf00      	nop
 8001092:	3730      	adds	r7, #48	; 0x30
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	58024400 	.word	0x58024400
 800109c:	58021400 	.word	0x58021400
 80010a0:	58021800 	.word	0x58021800
 80010a4:	58020000 	.word	0x58020000

080010a8 <HAL_ADC_ConvHalfCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1) {
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d108      	bne.n	80010ca <HAL_ADC_ConvHalfCpltCallback+0x22>
		// when we enter this function, first half of the buffer is complete
		// so we set the input buffer pointer at the beginning
		inBuffPtr = &adcData[0];
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80010ba:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80010bc:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[DATA_SIZE];
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80010c0:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 80010c2:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_ADC_ConvHalfCpltCallback+0x44>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
	}

}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	240000c4 	.word	0x240000c4
 80010dc:	24000714 	.word	0x24000714
 80010e0:	2400030c 	.word	0x2400030c
 80010e4:	24000718 	.word	0x24000718
 80010e8:	2400060c 	.word	0x2400060c
 80010ec:	2400071c 	.word	0x2400071c

080010f0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

	if(hadc == &hadc1) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a09      	ldr	r2, [pc, #36]	; (8001120 <HAL_ADC_ConvCpltCallback+0x30>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d108      	bne.n	8001112 <HAL_ADC_ConvCpltCallback+0x22>
		// when we enter this function, first half of the buffer is complete
		// so we set the input buffer pointer at the beginning

		inBuffPtr = &adcData[DATA_SIZE];
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_ADC_ConvCpltCallback+0x34>)
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <HAL_ADC_ConvCpltCallback+0x38>)
 8001104:	601a      	str	r2, [r3, #0]
		outBuffPtr = &dacData[0];
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <HAL_ADC_ConvCpltCallback+0x3c>)
 8001108:	4a09      	ldr	r2, [pc, #36]	; (8001130 <HAL_ADC_ConvCpltCallback+0x40>)
 800110a:	601a      	str	r2, [r3, #0]

		dataReady = 1;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_ADC_ConvCpltCallback+0x44>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
	}

}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	240000c4 	.word	0x240000c4
 8001124:	24000714 	.word	0x24000714
 8001128:	2400040c 	.word	0x2400040c
 800112c:	24000718 	.word	0x24000718
 8001130:	2400050c 	.word	0x2400050c
 8001134:	2400071c 	.word	0x2400071c

08001138 <processData>:
//enum Effect { Delay, Square, SquareSlopedEdges, Sine };

const float INT16_TO_FLOAT = 1.0f / 32768.0f;

void processData()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
	float knob1 = adc2Data[0]/4095.0f;
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <processData+0xa0>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800114a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80011dc <processData+0xa4>
 800114e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001152:	edc7 7a02 	vstr	s15, [r7, #8]
	float knob2 = adc2Data[1]/4095.0f;
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <processData+0xa0>)
 8001158:	885b      	ldrh	r3, [r3, #2]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001162:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80011dc <processData+0xa4>
 8001166:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800116a:	edc7 7a01 	vstr	s15, [r7, #4]
	Delay_Set_Params(knob1, knob2);
 800116e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001172:	ed97 0a02 	vldr	s0, [r7, #8]
 8001176:	f7ff fafb 	bl	8000770 <Delay_Set_Params>
	for(int i = 0; i < DATA_SIZE; i++) {
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	e020      	b.n	80011c2 <processData+0x8a>
		outBuffPtr[i] = calculateDelay(inBuffPtr[i], knob1, knob2);
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <processData+0xa8>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	b29b      	uxth	r3, r3
 800118e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001192:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001196:	edd7 6a01 	vldr	s13, [r7, #4]
 800119a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800119e:	eeb0 1b46 	vmov.f64	d1, d6
 80011a2:	eeb0 0b47 	vmov.f64	d0, d7
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fa72 	bl	8000690 <calculateDelay>
 80011ac:	4601      	mov	r1, r0
 80011ae:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <processData+0xac>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	b28a      	uxth	r2, r1
 80011ba:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < DATA_SIZE; i++) {
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3301      	adds	r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2b7f      	cmp	r3, #127	; 0x7f
 80011c6:	dddb      	ble.n	8001180 <processData+0x48>
//		outBuffPtr[i] =  (uint16_t) (in* 32768.0f);
//		outBuffPtr[i] = inBuffPtr[i];
//	}


	dataReady = 0;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <processData+0xb0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2400070c 	.word	0x2400070c
 80011dc:	457ff000 	.word	0x457ff000
 80011e0:	24000714 	.word	0x24000714
 80011e4:	24000718 	.word	0x24000718
 80011e8:	2400071c 	.word	0x2400071c

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	; 0x28
 80011f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f000 fbbf 	bl	8001974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f6:	f000 f857 	bl	80012a8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011fa:	f000 f8d1 	bl	80013a0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fe:	f7ff fe93 	bl	8000f28 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001202:	f000 fad3 	bl	80017ac <MX_USART3_UART_Init>
  MX_DMA_Init();
 8001206:	f7ff fe5f 	bl	8000ec8 <MX_DMA_Init>
  MX_USB_OTG_HS_USB_Init();
 800120a:	f000 fb81 	bl	8001910 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 800120e:	f7ff fb7b 	bl	8000908 <MX_ADC1_Init>
  MX_TIM6_Init();
 8001212:	f000 fa5b 	bl	80016cc <MX_TIM6_Init>
  MX_DAC1_Init();
 8001216:	f7ff fdab 	bl	8000d70 <MX_DAC1_Init>
  MX_ADC2_Init();
 800121a:	f7ff fbef 	bl	80009fc <MX_ADC2_Init>
  MX_TIM1_Init();
 800121e:	f000 fa01 	bl	8001624 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001222:	4818      	ldr	r0, [pc, #96]	; (8001284 <main+0x98>)
 8001224:	f007 fdec 	bl	8008e00 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);
 8001228:	4817      	ldr	r0, [pc, #92]	; (8001288 <main+0x9c>)
 800122a:	f007 fde9 	bl	8008e00 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) adcData, BUFFER_SIZE);
 800122e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001232:	4916      	ldr	r1, [pc, #88]	; (800128c <main+0xa0>)
 8001234:	4816      	ldr	r0, [pc, #88]	; (8001290 <main+0xa4>)
 8001236:	f000 ff95 	bl	8002164 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) dacData, BUFFER_SIZE, DAC_ALIGN_12B_R);
 800123a:	2300      	movs	r3, #0
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <main+0xa8>)
 8001244:	2100      	movs	r1, #0
 8001246:	4814      	ldr	r0, [pc, #80]	; (8001298 <main+0xac>)
 8001248:	f001 ff00 	bl	800304c <HAL_DAC_Start_DMA>

  Delay_Init();
 800124c:	f7ff f9d2 	bl	80005f4 <Delay_Init>
  Tremolo_Init();
 8001250:	f7ff fb40 	bl	80008d4 <Tremolo_Init>
  uint8_t msg[30] = "\0";
 8001254:	2300      	movs	r3, #0
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	831a      	strh	r2, [r3, #24]
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc2Data, 3);
 800126a:	2203      	movs	r2, #3
 800126c:	490b      	ldr	r1, [pc, #44]	; (800129c <main+0xb0>)
 800126e:	480c      	ldr	r0, [pc, #48]	; (80012a0 <main+0xb4>)
 8001270:	f000 ff78 	bl	8002164 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(dataReady) {
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <main+0xb8>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0fb      	beq.n	8001274 <main+0x88>
		  processData();
 800127c:	f7ff ff5c 	bl	8001138 <processData>
	  if(dataReady) {
 8001280:	e7f8      	b.n	8001274 <main+0x88>
 8001282:	bf00      	nop
 8001284:	24000724 	.word	0x24000724
 8001288:	24000770 	.word	0x24000770
 800128c:	2400030c 	.word	0x2400030c
 8001290:	240000c4 	.word	0x240000c4
 8001294:	2400050c 	.word	0x2400050c
 8001298:	24000280 	.word	0x24000280
 800129c:	2400070c 	.word	0x2400070c
 80012a0:	24000128 	.word	0x24000128
 80012a4:	2400071c 	.word	0x2400071c

080012a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b09c      	sub	sp, #112	; 0x70
 80012ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	224c      	movs	r2, #76	; 0x4c
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f009 fa76 	bl	800a7a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2220      	movs	r2, #32
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f009 fa70 	bl	800a7a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80012c8:	2004      	movs	r0, #4
 80012ca:	f004 fca9 	bl	8005c20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	4b31      	ldr	r3, [pc, #196]	; (8001398 <SystemClock_Config+0xf0>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	4a30      	ldr	r2, [pc, #192]	; (8001398 <SystemClock_Config+0xf0>)
 80012d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012dc:	6193      	str	r3, [r2, #24]
 80012de:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <SystemClock_Config+0xf0>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012ea:	bf00      	nop
 80012ec:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <SystemClock_Config+0xf0>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012f8:	d1f8      	bne.n	80012ec <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <SystemClock_Config+0xf4>)
 80012fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fe:	f023 0303 	bic.w	r3, r3, #3
 8001302:	4a26      	ldr	r2, [pc, #152]	; (800139c <SystemClock_Config+0xf4>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 800130a:	2329      	movs	r3, #41	; 0x29
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800130e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001314:	2301      	movs	r3, #1
 8001316:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001318:	2301      	movs	r3, #1
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131c:	2302      	movs	r3, #2
 800131e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001320:	2302      	movs	r3, #2
 8001322:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8001328:	2346      	movs	r3, #70	; 0x46
 800132a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800132c:	2302      	movs	r3, #2
 800132e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001330:	2304      	movs	r3, #4
 8001332:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001334:	2302      	movs	r3, #2
 8001336:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001338:	230c      	movs	r3, #12
 800133a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800133c:	2300      	movs	r3, #0
 800133e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	4618      	mov	r0, r3
 800134a:	f004 fcc3 	bl	8005cd4 <HAL_RCC_OscConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001354:	f000 f850 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001358:	233f      	movs	r3, #63	; 0x3f
 800135a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135c:	2303      	movs	r3, #3
 800135e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001368:	2340      	movs	r3, #64	; 0x40
 800136a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800136c:	2340      	movs	r3, #64	; 0x40
 800136e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001374:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001376:	2340      	movs	r3, #64	; 0x40
 8001378:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2107      	movs	r1, #7
 800137e:	4618      	mov	r0, r3
 8001380:	f005 f8ac 	bl	80064dc <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800138a:	f000 f835 	bl	80013f8 <Error_Handler>
  }
}
 800138e:	bf00      	nop
 8001390:	3770      	adds	r7, #112	; 0x70
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	58024800 	.word	0x58024800
 800139c:	58024400 	.word	0x58024400

080013a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b0ae      	sub	sp, #184	; 0xb8
 80013a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a6:	463b      	mov	r3, r7
 80013a8:	22b8      	movs	r2, #184	; 0xb8
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f009 f9fb 	bl	800a7a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80013b6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80013bc:	2310      	movs	r3, #16
 80013be:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80013c8:	2302      	movs	r3, #2
 80013ca:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80013cc:	23c0      	movs	r3, #192	; 0xc0
 80013ce:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	4618      	mov	r0, r3
 80013e2:	f005 fc07 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80013ec:	f000 f804 	bl	80013f8 <Error_Handler>
  }
}
 80013f0:	bf00      	nop
 80013f2:	37b8      	adds	r7, #184	; 0xb8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	e7fe      	b.n	8001400 <Error_Handler+0x8>
	...

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_MspInit+0x30>)
 800140c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001410:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_MspInit+0x30>)
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_MspInit+0x30>)
 800141c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	58024400 	.word	0x58024400

08001438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800143c:	e7fe      	b.n	800143c <NMI_Handler+0x4>

0800143e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <HardFault_Handler+0x4>

08001444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <MemManage_Handler+0x4>

0800144a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <UsageFault_Handler+0x4>

08001456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001484:	f000 fae8 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <DMA1_Stream0_IRQHandler+0x10>)
 8001492:	f002 fe79 	bl	8004188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2400018c 	.word	0x2400018c

080014a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <DMA1_Stream1_IRQHandler+0x10>)
 80014a6:	f002 fe6f 	bl	8004188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	24000294 	.word	0x24000294

080014b4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <DMA1_Stream2_IRQHandler+0x10>)
 80014ba:	f002 fe65 	bl	8004188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	24000204 	.word	0x24000204

080014c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <_sbrk+0x5c>)
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <_sbrk+0x60>)
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <_sbrk+0x64>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <_sbrk+0x68>)
 80014e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d207      	bcs.n	8001508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f8:	f009 f924 	bl	800a744 <__errno>
 80014fc:	4603      	mov	r3, r0
 80014fe:	220c      	movs	r2, #12
 8001500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	e009      	b.n	800151c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <_sbrk+0x64>)
 8001518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	24100000 	.word	0x24100000
 8001528:	00000400 	.word	0x00000400
 800152c:	24000720 	.word	0x24000720
 8001530:	24000860 	.word	0x24000860

08001534 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001538:	4b32      	ldr	r3, [pc, #200]	; (8001604 <SystemInit+0xd0>)
 800153a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153e:	4a31      	ldr	r2, [pc, #196]	; (8001604 <SystemInit+0xd0>)
 8001540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001548:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <SystemInit+0xd4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	2b02      	cmp	r3, #2
 8001552:	d807      	bhi.n	8001564 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001554:	4b2c      	ldr	r3, [pc, #176]	; (8001608 <SystemInit+0xd4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 030f 	bic.w	r3, r3, #15
 800155c:	4a2a      	ldr	r2, [pc, #168]	; (8001608 <SystemInit+0xd4>)
 800155e:	f043 0303 	orr.w	r3, r3, #3
 8001562:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <SystemInit+0xd8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a28      	ldr	r2, [pc, #160]	; (800160c <SystemInit+0xd8>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001570:	4b26      	ldr	r3, [pc, #152]	; (800160c <SystemInit+0xd8>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <SystemInit+0xd8>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4924      	ldr	r1, [pc, #144]	; (800160c <SystemInit+0xd8>)
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <SystemInit+0xdc>)
 800157e:	4013      	ands	r3, r2
 8001580:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <SystemInit+0xd4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <SystemInit+0xd4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 030f 	bic.w	r3, r3, #15
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <SystemInit+0xd4>)
 8001598:	f043 0303 	orr.w	r3, r3, #3
 800159c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <SystemInit+0xd8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <SystemInit+0xd8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <SystemInit+0xd8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <SystemInit+0xd8>)
 80015b2:	4a18      	ldr	r2, [pc, #96]	; (8001614 <SystemInit+0xe0>)
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <SystemInit+0xd8>)
 80015b8:	4a17      	ldr	r2, [pc, #92]	; (8001618 <SystemInit+0xe4>)
 80015ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <SystemInit+0xd8>)
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <SystemInit+0xe8>)
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <SystemInit+0xd8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015c8:	4b10      	ldr	r3, [pc, #64]	; (800160c <SystemInit+0xd8>)
 80015ca:	4a14      	ldr	r2, [pc, #80]	; (800161c <SystemInit+0xe8>)
 80015cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <SystemInit+0xd8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <SystemInit+0xd8>)
 80015d6:	4a11      	ldr	r2, [pc, #68]	; (800161c <SystemInit+0xe8>)
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <SystemInit+0xd8>)
 80015dc:	2200      	movs	r2, #0
 80015de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <SystemInit+0xd8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a09      	ldr	r2, [pc, #36]	; (800160c <SystemInit+0xd8>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <SystemInit+0xd8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <SystemInit+0xec>)
 80015f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00
 8001608:	52002000 	.word	0x52002000
 800160c:	58024400 	.word	0x58024400
 8001610:	eaf6ed7f 	.word	0xeaf6ed7f
 8001614:	02020200 	.word	0x02020200
 8001618:	01ff0000 	.word	0x01ff0000
 800161c:	01010280 	.word	0x01010280
 8001620:	52004000 	.word	0x52004000

08001624 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <MX_TIM1_Init+0xa0>)
 8001644:	4a20      	ldr	r2, [pc, #128]	; (80016c8 <MX_TIM1_Init+0xa4>)
 8001646:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 8001648:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <MX_TIM1_Init+0xa0>)
 800164a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800164e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001650:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <MX_TIM1_Init+0xa0>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2800;
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <MX_TIM1_Init+0xa0>)
 8001658:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 800165c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165e:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <MX_TIM1_Init+0xa0>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <MX_TIM1_Init+0xa0>)
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <MX_TIM1_Init+0xa0>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001670:	4814      	ldr	r0, [pc, #80]	; (80016c4 <MX_TIM1_Init+0xa0>)
 8001672:	f007 fb6d 	bl	8008d50 <HAL_TIM_Base_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 800167c:	f7ff febc 	bl	80013f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001684:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	4619      	mov	r1, r3
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <MX_TIM1_Init+0xa0>)
 800168e:	f007 fc27 	bl	8008ee0 <HAL_TIM_ConfigClockSource>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001698:	f7ff feae 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800169c:	2320      	movs	r3, #32
 800169e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	4619      	mov	r1, r3
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_TIM1_Init+0xa0>)
 80016ae:	f007 fe47 	bl	8009340 <HAL_TIMEx_MasterConfigSynchronization>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80016b8:	f7ff fe9e 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	24000724 	.word	0x24000724
 80016c8:	40010000 	.word	0x40010000

080016cc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_TIM6_Init+0x64>)
 80016de:	4a15      	ldr	r2, [pc, #84]	; (8001734 <MX_TIM6_Init+0x68>)
 80016e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_TIM6_Init+0x64>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_TIM6_Init+0x64>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <MX_TIM6_Init+0x64>)
 80016f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_TIM6_Init+0x64>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <MX_TIM6_Init+0x64>)
 80016fe:	f007 fb27 	bl	8008d50 <HAL_TIM_Base_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001708:	f7ff fe76 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800170c:	2320      	movs	r3, #32
 800170e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_TIM6_Init+0x64>)
 800171a:	f007 fe11 	bl	8009340 <HAL_TIMEx_MasterConfigSynchronization>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001724:	f7ff fe68 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	24000770 	.word	0x24000770
 8001734:	40001000 	.word	0x40001000

08001738 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <HAL_TIM_Base_MspInit+0x68>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d10f      	bne.n	800176a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <HAL_TIM_Base_MspInit+0x6c>)
 800174c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001750:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <HAL_TIM_Base_MspInit+0x6c>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_TIM_Base_MspInit+0x6c>)
 800175c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001768:	e013      	b.n	8001792 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM6)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <HAL_TIM_Base_MspInit+0x70>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d10e      	bne.n	8001792 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_TIM_Base_MspInit+0x6c>)
 8001776:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <HAL_TIM_Base_MspInit+0x6c>)
 800177c:	f043 0310 	orr.w	r3, r3, #16
 8001780:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <HAL_TIM_Base_MspInit+0x6c>)
 8001786:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40010000 	.word	0x40010000
 80017a4:	58024400 	.word	0x58024400
 80017a8:	40001000 	.word	0x40001000

080017ac <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017b0:	4b22      	ldr	r3, [pc, #136]	; (800183c <MX_USART3_UART_Init+0x90>)
 80017b2:	4a23      	ldr	r2, [pc, #140]	; (8001840 <MX_USART3_UART_Init+0x94>)
 80017b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017b6:	4b21      	ldr	r3, [pc, #132]	; (800183c <MX_USART3_UART_Init+0x90>)
 80017b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <MX_USART3_UART_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017c4:	4b1d      	ldr	r3, [pc, #116]	; (800183c <MX_USART3_UART_Init+0x90>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <MX_USART3_UART_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_USART3_UART_Init+0x90>)
 80017d2:	220c      	movs	r2, #12
 80017d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <MX_USART3_UART_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017dc:	4b17      	ldr	r3, [pc, #92]	; (800183c <MX_USART3_UART_Init+0x90>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <MX_USART3_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_USART3_UART_Init+0x90>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <MX_USART3_UART_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017f4:	4811      	ldr	r0, [pc, #68]	; (800183c <MX_USART3_UART_Init+0x90>)
 80017f6:	f007 fe31 	bl	800945c <HAL_UART_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001800:	f7ff fdfa 	bl	80013f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001804:	2100      	movs	r1, #0
 8001806:	480d      	ldr	r0, [pc, #52]	; (800183c <MX_USART3_UART_Init+0x90>)
 8001808:	f008 fed2 	bl	800a5b0 <HAL_UARTEx_SetTxFifoThreshold>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001812:	f7ff fdf1 	bl	80013f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001816:	2100      	movs	r1, #0
 8001818:	4808      	ldr	r0, [pc, #32]	; (800183c <MX_USART3_UART_Init+0x90>)
 800181a:	f008 ff07 	bl	800a62c <HAL_UARTEx_SetRxFifoThreshold>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001824:	f7ff fde8 	bl	80013f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001828:	4804      	ldr	r0, [pc, #16]	; (800183c <MX_USART3_UART_Init+0x90>)
 800182a:	f008 fe88 	bl	800a53e <HAL_UARTEx_DisableFifoMode>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001834:	f7ff fde0 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	240007bc 	.word	0x240007bc
 8001840:	40004800 	.word	0x40004800

08001844 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0b8      	sub	sp, #224	; 0xe0
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	22b8      	movs	r2, #184	; 0xb8
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f008 ff9f 	bl	800a7a8 <memset>
  if(uartHandle->Instance==USART3)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a25      	ldr	r2, [pc, #148]	; (8001904 <HAL_UART_MspInit+0xc0>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d142      	bne.n	80018fa <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001874:	2302      	movs	r3, #2
 8001876:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4618      	mov	r0, r3
 8001884:	f005 f9b6 	bl	8006bf4 <HAL_RCCEx_PeriphCLKConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800188e:	f7ff fdb3 	bl	80013f8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_UART_MspInit+0xc4>)
 8001894:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001898:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <HAL_UART_MspInit+0xc4>)
 800189a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_UART_MspInit+0xc4>)
 80018a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80018a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_UART_MspInit+0xc4>)
 80018b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018b6:	4a14      	ldr	r2, [pc, #80]	; (8001908 <HAL_UART_MspInit+0xc4>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_UART_MspInit+0xc4>)
 80018c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018e8:	2307      	movs	r3, #7
 80018ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_UART_MspInit+0xc8>)
 80018f6:	f003 ffc9 	bl	800588c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	37e0      	adds	r7, #224	; 0xe0
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40004800 	.word	0x40004800
 8001908:	58024400 	.word	0x58024400
 800190c:	58020c00 	.word	0x58020c00

08001910 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001958 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001924:	f7ff fe06 	bl	8001534 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800192a:	490d      	ldr	r1, [pc, #52]	; (8001960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001940:	4c0a      	ldr	r4, [pc, #40]	; (800196c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800194e:	f008 feff 	bl	800a750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001952:	f7ff fc4b 	bl	80011ec <main>
  bx  lr
 8001956:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001958:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800195c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001960:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001964:	0800a984 	.word	0x0800a984
  ldr r2, =_sbss
 8001968:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 800196c:	24000860 	.word	0x24000860

08001970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC_IRQHandler>
	...

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197a:	2003      	movs	r0, #3
 800197c:	f001 fb04 	bl	8002f88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001980:	f004 ff62 	bl	8006848 <HAL_RCC_GetSysClockFreq>
 8001984:	4602      	mov	r2, r0
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <HAL_Init+0x68>)
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	0a1b      	lsrs	r3, r3, #8
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	4913      	ldr	r1, [pc, #76]	; (80019e0 <HAL_Init+0x6c>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
 800199c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_Init+0x68>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <HAL_Init+0x6c>)
 80019a8:	5cd3      	ldrb	r3, [r2, r3]
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <HAL_Init+0x70>)
 80019b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019b8:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <HAL_Init+0x74>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f814 	bl	80019ec <HAL_InitTick>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e002      	b.n	80019d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019ce:	f7ff fd19 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	58024400 	.word	0x58024400
 80019e0:	0800a934 	.word	0x0800a934
 80019e4:	24000004 	.word	0x24000004
 80019e8:	24000000 	.word	0x24000000

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_InitTick+0x60>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e021      	b.n	8001a44 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a00:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <HAL_InitTick+0x64>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_InitTick+0x60>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f001 fae9 	bl	8002fee <HAL_SYSTICK_Config>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00e      	b.n	8001a44 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d80a      	bhi.n	8001a42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f001 fab3 	bl	8002f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_InitTick+0x68>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	2400000c 	.word	0x2400000c
 8001a50:	24000000 	.word	0x24000000
 8001a54:	24000008 	.word	0x24000008

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	2400000c 	.word	0x2400000c
 8001a7c:	2400084c 	.word	0x2400084c

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	2400084c 	.word	0x2400084c

08001a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff ffee 	bl	8001a80 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_Delay+0x44>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001abe:	bf00      	nop
 8001ac0:	f7ff ffde 	bl	8001a80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2400000c 	.word	0x2400000c

08001ae0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	609a      	str	r2, [r3, #8]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3360      	adds	r3, #96	; 0x60
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	430b      	orrs	r3, r1
 8001b76:	431a      	orrs	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	611a      	str	r2, [r3, #16]
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b087      	sub	sp, #28
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3360      	adds	r3, #96	; 0x60
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	601a      	str	r2, [r3, #0]
  }
}
 8001be4:	bf00      	nop
 8001be6:	371c      	adds	r7, #28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b087      	sub	sp, #28
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3330      	adds	r3, #48	; 0x30
 8001c26:	461a      	mov	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	4413      	add	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	211f      	movs	r1, #31
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	401a      	ands	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	0e9b      	lsrs	r3, r3, #26
 8001c4e:	f003 011f 	and.w	r1, r3, #31
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c62:	bf00      	nop
 8001c64:	371c      	adds	r7, #28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f023 0203 	bic.w	r2, r3, #3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	60da      	str	r2, [r3, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	3314      	adds	r3, #20
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	0e5b      	lsrs	r3, r3, #25
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	4413      	add	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	0d1b      	lsrs	r3, r3, #20
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	2107      	movs	r1, #7
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	401a      	ands	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	0d1b      	lsrs	r3, r3, #20
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cde:	bf00      	nop
 8001ce0:	371c      	adds	r7, #28
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d04:	43db      	mvns	r3, r3
 8001d06:	401a      	ands	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0318 	and.w	r3, r3, #24
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d10:	40d9      	lsrs	r1, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	400b      	ands	r3, r1
 8001d16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	000fffff 	.word	0x000fffff

08001d34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 031f 	and.w	r3, r3, #31
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6093      	str	r3, [r2, #8]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	5fffffc0 	.word	0x5fffffc0

08001d74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d88:	d101      	bne.n	8001d8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	6fffffc0 	.word	0x6fffffc0

08001dc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001dd8:	d101      	bne.n	8001dde <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <LL_ADC_Enable+0x24>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	7fffffc0 	.word	0x7fffffc0

08001e14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <LL_ADC_IsEnabled+0x18>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <LL_ADC_IsEnabled+0x1a>
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <LL_ADC_REG_StartConversion+0x24>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	f043 0204 	orr.w	r2, r3, #4
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	7fffffc0 	.word	0x7fffffc0

08001e64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d101      	bne.n	8001e7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d101      	bne.n	8001ea2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e138      	b.n	800213c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7fe fe17 	bl	8000b0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff3f 	bl	8001d74 <LL_ADC_IsDeepPowerDownEnabled>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d004      	beq.n	8001f06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff25 	bl	8001d50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff ff5a 	bl	8001dc4 <LL_ADC_IsInternalRegulatorEnabled>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d114      	bne.n	8001f40 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff ff3e 	bl	8001d9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f20:	4b88      	ldr	r3, [pc, #544]	; (8002144 <HAL_ADC_Init+0x294>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	099b      	lsrs	r3, r3, #6
 8001f26:	4a88      	ldr	r2, [pc, #544]	; (8002148 <HAL_ADC_Init+0x298>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	099b      	lsrs	r3, r3, #6
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f32:	e002      	b.n	8001f3a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f9      	bne.n	8001f34 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff3d 	bl	8001dc4 <LL_ADC_IsInternalRegulatorEnabled>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10d      	bne.n	8001f6c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f54:	f043 0210 	orr.w	r2, r3, #16
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff77 	bl	8001e64 <LL_ADC_REG_IsConversionOngoing>
 8001f76:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f040 80d2 	bne.w	800212a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f040 80ce 	bne.w	800212a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f96:	f043 0202 	orr.w	r2, r3, #2
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff ff36 	bl	8001e14 <LL_ADC_IsEnabled>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d110      	bne.n	8001fd0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fae:	4867      	ldr	r0, [pc, #412]	; (800214c <HAL_ADC_Init+0x29c>)
 8001fb0:	f7ff ff30 	bl	8001e14 <LL_ADC_IsEnabled>
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	4866      	ldr	r0, [pc, #408]	; (8002150 <HAL_ADC_Init+0x2a0>)
 8001fb8:	f7ff ff2c 	bl	8001e14 <LL_ADC_IsEnabled>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4323      	orrs	r3, r4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4862      	ldr	r0, [pc, #392]	; (8002154 <HAL_ADC_Init+0x2a4>)
 8001fcc:	f7ff fd88 	bl	8001ae0 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7d5b      	ldrb	r3, [r3, #21]
 8001fd4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fda:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001fe0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	7f1b      	ldrb	r3, [r3, #28]
 8001fe6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7f1b      	ldrb	r3, [r3, #28]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d106      	bne.n	8002002 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	045b      	lsls	r3, r3, #17
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002016:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	4b4c      	ldr	r3, [pc, #304]	; (8002158 <HAL_ADC_Init+0x2a8>)
 8002026:	4013      	ands	r3, r2
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	69b9      	ldr	r1, [r7, #24]
 800202e:	430b      	orrs	r3, r1
 8002030:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff14 	bl	8001e64 <LL_ADC_REG_IsConversionOngoing>
 800203c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff21 	bl	8001e8a <LL_ADC_INJ_IsConversionOngoing>
 8002048:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d14a      	bne.n	80020e6 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d147      	bne.n	80020e6 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7d1b      	ldrb	r3, [r3, #20]
 800205a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	4b3c      	ldr	r3, [pc, #240]	; (800215c <HAL_ADC_Init+0x2ac>)
 800206c:	4013      	ands	r3, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	69b9      	ldr	r1, [r7, #24]
 8002074:	430b      	orrs	r3, r1
 8002076:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800207e:	2b01      	cmp	r3, #1
 8002080:	d11b      	bne.n	80020ba <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	4b34      	ldr	r3, [pc, #208]	; (8002160 <HAL_ADC_Init+0x2b0>)
 8002090:	4013      	ands	r3, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002096:	3a01      	subs	r2, #1
 8002098:	0411      	lsls	r1, r2, #16
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800209e:	4311      	orrs	r1, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020a4:	4311      	orrs	r1, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020aa:	430a      	orrs	r2, r1
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	611a      	str	r2, [r3, #16]
 80020b8:	e007      	b.n	80020ca <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0201 	bic.w	r2, r2, #1
 80020c8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 fcf3 	bl	8002acc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d10c      	bne.n	8002108 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	f023 010f 	bic.w	r1, r3, #15
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	1e5a      	subs	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
 8002106:	e007      	b.n	8002118 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 020f 	bic.w	r2, r2, #15
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211c:	f023 0303 	bic.w	r3, r3, #3
 8002120:	f043 0201 	orr.w	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	655a      	str	r2, [r3, #84]	; 0x54
 8002128:	e007      	b.n	800213a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212e:	f043 0210 	orr.w	r2, r3, #16
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800213a:	7ffb      	ldrb	r3, [r7, #31]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3724      	adds	r7, #36	; 0x24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd90      	pop	{r4, r7, pc}
 8002144:	24000000 	.word	0x24000000
 8002148:	053e2d63 	.word	0x053e2d63
 800214c:	40022000 	.word	0x40022000
 8002150:	40022100 	.word	0x40022100
 8002154:	40022300 	.word	0x40022300
 8002158:	fff0c003 	.word	0xfff0c003
 800215c:	ffffbffc 	.word	0xffffbffc
 8002160:	fc00f81e 	.word	0xfc00f81e

08002164 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002170:	484f      	ldr	r0, [pc, #316]	; (80022b0 <HAL_ADC_Start_DMA+0x14c>)
 8002172:	f7ff fddf 	bl	8001d34 <LL_ADC_GetMultimode>
 8002176:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fe71 	bl	8001e64 <LL_ADC_REG_IsConversionOngoing>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	f040 808c 	bne.w	80022a2 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_ADC_Start_DMA+0x34>
 8002194:	2302      	movs	r3, #2
 8002196:	e087      	b.n	80022a8 <HAL_ADC_Start_DMA+0x144>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d002      	beq.n	80021b2 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	2b09      	cmp	r3, #9
 80021b0:	d170      	bne.n	8002294 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fb7a 	bl	80028ac <ADC_Enable>
 80021b8:	4603      	mov	r3, r0
 80021ba:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80021bc:	7dfb      	ldrb	r3, [r7, #23]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d163      	bne.n	800228a <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021c6:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <HAL_ADC_Start_DMA+0x150>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a38      	ldr	r2, [pc, #224]	; (80022b8 <HAL_ADC_Start_DMA+0x154>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d002      	beq.n	80021e2 <HAL_ADC_Start_DMA+0x7e>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	e000      	b.n	80021e4 <HAL_ADC_Start_DMA+0x80>
 80021e2:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_ADC_Start_DMA+0x158>)
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d002      	beq.n	80021f2 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d105      	bne.n	80021fe <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d006      	beq.n	8002218 <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220e:	f023 0206 	bic.w	r2, r3, #6
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	659a      	str	r2, [r3, #88]	; 0x58
 8002216:	e002      	b.n	800221e <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002222:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <HAL_ADC_Start_DMA+0x15c>)
 8002224:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	4a26      	ldr	r2, [pc, #152]	; (80022c4 <HAL_ADC_Start_DMA+0x160>)
 800222c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	4a25      	ldr	r2, [pc, #148]	; (80022c8 <HAL_ADC_Start_DMA+0x164>)
 8002234:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	221c      	movs	r2, #28
 800223c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0210 	orr.w	r2, r2, #16
 8002254:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f7ff fd04 	bl	8001c6e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3340      	adds	r3, #64	; 0x40
 8002270:	4619      	mov	r1, r3
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f001 fd1d 	bl	8003cb4 <HAL_DMA_Start_IT>
 800227a:	4603      	mov	r3, r0
 800227c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fdda 	bl	8001e3c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002288:	e00d      	b.n	80022a6 <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002292:	e008      	b.n	80022a6 <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80022a0:	e001      	b.n	80022a6 <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
 80022a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40022300 	.word	0x40022300
 80022b4:	fffff0fe 	.word	0xfffff0fe
 80022b8:	40022100 	.word	0x40022100
 80022bc:	40022000 	.word	0x40022000
 80022c0:	080029a5 	.word	0x080029a5
 80022c4:	08002a7d 	.word	0x08002a7d
 80022c8:	08002a99 	.word	0x08002a99

080022cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b0a1      	sub	sp, #132	; 0x84
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4a9a      	ldr	r2, [pc, #616]	; (8002564 <HAL_ADC_ConfigChannel+0x284>)
 80022fa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_ADC_ConfigChannel+0x2a>
 8002306:	2302      	movs	r3, #2
 8002308:	e2bc      	b.n	8002884 <HAL_ADC_ConfigChannel+0x5a4>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fda4 	bl	8001e64 <LL_ADC_REG_IsConversionOngoing>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 82a1 	bne.w	8002866 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800232c:	2b00      	cmp	r3, #0
 800232e:	d108      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x62>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	2201      	movs	r2, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	e016      	b.n	8002370 <HAL_ADC_ConfigChannel+0x90>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002352:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800235a:	2320      	movs	r3, #32
 800235c:	e003      	b.n	8002366 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800235e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002360:	fab3 f383 	clz	r3, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	2201      	movs	r2, #1
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	69d1      	ldr	r1, [r2, #28]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	430b      	orrs	r3, r1
 800237c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6859      	ldr	r1, [r3, #4]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	f7ff fc43 	bl	8001c16 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fd65 	bl	8001e64 <LL_ADC_REG_IsConversionOngoing>
 800239a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fd72 	bl	8001e8a <LL_ADC_INJ_IsConversionOngoing>
 80023a6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 80a0 	bne.w	80024f0 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f040 809c 	bne.w	80024f0 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	461a      	mov	r2, r3
 80023c6:	f7ff fc65 	bl	8001c94 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10b      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x110>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	e00a      	b.n	8002406 <HAL_ADC_ConfigChannel+0x126>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	2b04      	cmp	r3, #4
 800240e:	d027      	beq.n	8002460 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6919      	ldr	r1, [r3, #16]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800241e:	f7ff fb93 	bl	8001b48 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6919      	ldr	r1, [r3, #16]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	7e5b      	ldrb	r3, [r3, #25]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d102      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x158>
 8002432:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002436:	e000      	b.n	800243a <HAL_ADC_ConfigChannel+0x15a>
 8002438:	2300      	movs	r3, #0
 800243a:	461a      	mov	r2, r3
 800243c:	f7ff fbbd 	bl	8001bba <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	6919      	ldr	r1, [r3, #16]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	7e1b      	ldrb	r3, [r3, #24]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d102      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x176>
 8002450:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002454:	e000      	b.n	8002458 <HAL_ADC_ConfigChannel+0x178>
 8002456:	2300      	movs	r3, #0
 8002458:	461a      	mov	r2, r3
 800245a:	f7ff fb95 	bl	8001b88 <LL_ADC_SetDataRightShift>
 800245e:	e047      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002466:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	069b      	lsls	r3, r3, #26
 8002470:	429a      	cmp	r2, r3
 8002472:	d107      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002482:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800248a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	069b      	lsls	r3, r3, #26
 8002494:	429a      	cmp	r2, r3
 8002496:	d107      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024a6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	069b      	lsls	r3, r3, #26
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d107      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024ca:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	069b      	lsls	r3, r3, #26
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fc8d 	bl	8001e14 <LL_ADC_IsEnabled>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 81bb 	bne.w	8002878 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6819      	ldr	r1, [r3, #0]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	461a      	mov	r2, r3
 8002510:	f7ff fbec 	bl	8001cec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a12      	ldr	r2, [pc, #72]	; (8002564 <HAL_ADC_ConfigChannel+0x284>)
 800251a:	4293      	cmp	r3, r2
 800251c:	f040 8130 	bne.w	8002780 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x268>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0e9b      	lsrs	r3, r3, #26
 8002536:	3301      	adds	r3, #1
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	2b09      	cmp	r3, #9
 800253e:	bf94      	ite	ls
 8002540:	2301      	movls	r3, #1
 8002542:	2300      	movhi	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	e01b      	b.n	8002580 <HAL_ADC_ConfigChannel+0x2a0>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002558:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800255a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d103      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002560:	2320      	movs	r3, #32
 8002562:	e005      	b.n	8002570 <HAL_ADC_ConfigChannel+0x290>
 8002564:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002568:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	3301      	adds	r3, #1
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	2b09      	cmp	r3, #9
 8002578:	bf94      	ite	ls
 800257a:	2301      	movls	r3, #1
 800257c:	2300      	movhi	r3, #0
 800257e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002580:	2b00      	cmp	r3, #0
 8002582:	d079      	beq.n	8002678 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800258c:	2b00      	cmp	r3, #0
 800258e:	d107      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x2c0>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	0e9b      	lsrs	r3, r3, #26
 8002596:	3301      	adds	r3, #1
 8002598:	069b      	lsls	r3, r3, #26
 800259a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800259e:	e015      	b.n	80025cc <HAL_ADC_ConfigChannel+0x2ec>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80025ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80025b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80025b8:	2320      	movs	r3, #32
 80025ba:	e003      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80025bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	069b      	lsls	r3, r3, #26
 80025c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x30c>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	3301      	adds	r3, #1
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	e017      	b.n	800261c <HAL_ADC_ConfigChannel+0x33c>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80025fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002604:	2320      	movs	r3, #32
 8002606:	e003      	b.n	8002610 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	3301      	adds	r3, #1
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	2101      	movs	r1, #1
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	ea42 0103 	orr.w	r1, r2, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10a      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x362>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	0e9b      	lsrs	r3, r3, #26
 8002632:	3301      	adds	r3, #1
 8002634:	f003 021f 	and.w	r2, r3, #31
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	051b      	lsls	r3, r3, #20
 8002640:	e018      	b.n	8002674 <HAL_ADC_ConfigChannel+0x394>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800265a:	2320      	movs	r3, #32
 800265c:	e003      	b.n	8002666 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 800265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002660:	fab3 f383 	clz	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	3301      	adds	r3, #1
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002674:	430b      	orrs	r3, r1
 8002676:	e07e      	b.n	8002776 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x3b4>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	0e9b      	lsrs	r3, r3, #26
 800268a:	3301      	adds	r3, #1
 800268c:	069b      	lsls	r3, r3, #26
 800268e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002692:	e015      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x3e0>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80026ac:	2320      	movs	r3, #32
 80026ae:	e003      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	069b      	lsls	r3, r3, #26
 80026bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d109      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x400>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	0e9b      	lsrs	r3, r3, #26
 80026d2:	3301      	adds	r3, #1
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	2101      	movs	r1, #1
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	e017      	b.n	8002710 <HAL_ADC_ConfigChannel+0x430>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	61bb      	str	r3, [r7, #24]
  return result;
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e003      	b.n	8002704 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3301      	adds	r3, #1
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	2101      	movs	r1, #1
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	ea42 0103 	orr.w	r1, r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10d      	bne.n	800273c <HAL_ADC_ConfigChannel+0x45c>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0e9b      	lsrs	r3, r3, #26
 8002726:	3301      	adds	r3, #1
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	3b1e      	subs	r3, #30
 8002734:	051b      	lsls	r3, r3, #20
 8002736:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800273a:	e01b      	b.n	8002774 <HAL_ADC_ConfigChannel+0x494>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	60fb      	str	r3, [r7, #12]
  return result;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002754:	2320      	movs	r3, #32
 8002756:	e003      	b.n	8002760 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	3301      	adds	r3, #1
 8002762:	f003 021f 	and.w	r2, r3, #31
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	3b1e      	subs	r3, #30
 800276e:	051b      	lsls	r3, r3, #20
 8002770:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002774:	430b      	orrs	r3, r1
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	6892      	ldr	r2, [r2, #8]
 800277a:	4619      	mov	r1, r3
 800277c:	f7ff fa8a 	bl	8001c94 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	da77      	bge.n	8002878 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002788:	4840      	ldr	r0, [pc, #256]	; (800288c <HAL_ADC_ConfigChannel+0x5ac>)
 800278a:	f7ff f9cf 	bl	8001b2c <LL_ADC_GetCommonPathInternalCh>
 800278e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002790:	483f      	ldr	r0, [pc, #252]	; (8002890 <HAL_ADC_ConfigChannel+0x5b0>)
 8002792:	f7ff fb3f 	bl	8001e14 <LL_ADC_IsEnabled>
 8002796:	4604      	mov	r4, r0
 8002798:	483e      	ldr	r0, [pc, #248]	; (8002894 <HAL_ADC_ConfigChannel+0x5b4>)
 800279a:	f7ff fb3b 	bl	8001e14 <LL_ADC_IsEnabled>
 800279e:	4603      	mov	r3, r0
 80027a0:	4323      	orrs	r3, r4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d155      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a3b      	ldr	r2, [pc, #236]	; (8002898 <HAL_ADC_ConfigChannel+0x5b8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d122      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x516>
 80027b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d11d      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a35      	ldr	r2, [pc, #212]	; (8002894 <HAL_ADC_ConfigChannel+0x5b4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d159      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027ca:	4619      	mov	r1, r3
 80027cc:	482f      	ldr	r0, [pc, #188]	; (800288c <HAL_ADC_ConfigChannel+0x5ac>)
 80027ce:	f7ff f99a 	bl	8001b06 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027d2:	4b32      	ldr	r3, [pc, #200]	; (800289c <HAL_ADC_ConfigChannel+0x5bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	099b      	lsrs	r3, r3, #6
 80027d8:	4a31      	ldr	r2, [pc, #196]	; (80028a0 <HAL_ADC_ConfigChannel+0x5c0>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	099b      	lsrs	r3, r3, #6
 80027e0:	3301      	adds	r3, #1
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027e6:	e002      	b.n	80027ee <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f9      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027f4:	e040      	b.n	8002878 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a2a      	ldr	r2, [pc, #168]	; (80028a4 <HAL_ADC_ConfigChannel+0x5c4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d111      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x544>
 8002800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002802:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10c      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a21      	ldr	r2, [pc, #132]	; (8002894 <HAL_ADC_ConfigChannel+0x5b4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d131      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800281a:	4619      	mov	r1, r3
 800281c:	481b      	ldr	r0, [pc, #108]	; (800288c <HAL_ADC_ConfigChannel+0x5ac>)
 800281e:	f7ff f972 	bl	8001b06 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002822:	e029      	b.n	8002878 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1f      	ldr	r2, [pc, #124]	; (80028a8 <HAL_ADC_ConfigChannel+0x5c8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d124      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x598>
 800282e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d11f      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a15      	ldr	r2, [pc, #84]	; (8002894 <HAL_ADC_ConfigChannel+0x5b4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d11a      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002844:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002848:	4619      	mov	r1, r3
 800284a:	4810      	ldr	r0, [pc, #64]	; (800288c <HAL_ADC_ConfigChannel+0x5ac>)
 800284c:	f7ff f95b 	bl	8001b06 <LL_ADC_SetCommonPathInternalCh>
 8002850:	e012      	b.n	8002878 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002856:	f043 0220 	orr.w	r2, r3, #32
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002864:	e008      	b.n	8002878 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286a:	f043 0220 	orr.w	r2, r3, #32
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002880:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002884:	4618      	mov	r0, r3
 8002886:	3784      	adds	r7, #132	; 0x84
 8002888:	46bd      	mov	sp, r7
 800288a:	bd90      	pop	{r4, r7, pc}
 800288c:	40022300 	.word	0x40022300
 8002890:	40022000 	.word	0x40022000
 8002894:	40022100 	.word	0x40022100
 8002898:	cb840000 	.word	0xcb840000
 800289c:	24000000 	.word	0x24000000
 80028a0:	053e2d63 	.word	0x053e2d63
 80028a4:	bac04000 	.word	0xbac04000
 80028a8:	cfb80000 	.word	0xcfb80000

080028ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff faab 	bl	8001e14 <LL_ADC_IsEnabled>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d161      	bne.n	8002988 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	4b32      	ldr	r3, [pc, #200]	; (8002994 <ADC_Enable+0xe8>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00d      	beq.n	80028ee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	f043 0210 	orr.w	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e2:	f043 0201 	orr.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e04d      	b.n	800298a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fa7a 	bl	8001dec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028f8:	f7ff f8c2 	bl	8001a80 <HAL_GetTick>
 80028fc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028fe:	4826      	ldr	r0, [pc, #152]	; (8002998 <ADC_Enable+0xec>)
 8002900:	f7ff fa18 	bl	8001d34 <LL_ADC_GetMultimode>
 8002904:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a24      	ldr	r2, [pc, #144]	; (800299c <ADC_Enable+0xf0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d002      	beq.n	8002916 <ADC_Enable+0x6a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	e000      	b.n	8002918 <ADC_Enable+0x6c>
 8002916:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <ADC_Enable+0xf4>)
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	4293      	cmp	r3, r2
 800291e:	d02c      	beq.n	800297a <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d130      	bne.n	8002988 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002926:	e028      	b.n	800297a <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fa71 	bl	8001e14 <LL_ADC_IsEnabled>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d104      	bne.n	8002942 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fa55 	bl	8001dec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002942:	f7ff f89d 	bl	8001a80 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d914      	bls.n	800297a <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d00d      	beq.n	800297a <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002962:	f043 0210 	orr.w	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e007      	b.n	800298a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	d1cf      	bne.n	8002928 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	8000003f 	.word	0x8000003f
 8002998:	40022300 	.word	0x40022300
 800299c:	40022100 	.word	0x40022100
 80029a0:	40022000 	.word	0x40022000

080029a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d14b      	bne.n	8002a56 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d021      	beq.n	8002a1c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff f907 	bl	8001bf0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d032      	beq.n	8002a4e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d12b      	bne.n	8002a4e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d11f      	bne.n	8002a4e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
 8002a1a:	e018      	b.n	8002a4e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d111      	bne.n	8002a4e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d105      	bne.n	8002a4e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	f043 0201 	orr.w	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f7fe fb4e 	bl	80010f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a54:	e00e      	b.n	8002a74 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f7ff fc32 	bl	80022cc <HAL_ADC_ErrorCallback>
}
 8002a68:	e004      	b.n	8002a74 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f7fe fb0c 	bl	80010a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab6:	f043 0204 	orr.w	r2, r3, #4
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f7ff fc04 	bl	80022cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ac4:	bf00      	nop
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ad4:	4b5f      	ldr	r3, [pc, #380]	; (8002c54 <ADC_ConfigureBoostMode+0x188>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01c      	beq.n	8002b1a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002ae0:	f004 f82c 	bl	8006b3c <HAL_RCC_GetHCLKFreq>
 8002ae4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002aee:	d010      	beq.n	8002b12 <ADC_ConfigureBoostMode+0x46>
 8002af0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002af4:	d871      	bhi.n	8002bda <ADC_ConfigureBoostMode+0x10e>
 8002af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afa:	d002      	beq.n	8002b02 <ADC_ConfigureBoostMode+0x36>
 8002afc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b00:	d16b      	bne.n	8002bda <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	0c1b      	lsrs	r3, r3, #16
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	60fb      	str	r3, [r7, #12]
        break;
 8002b10:	e066      	b.n	8002be0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	089b      	lsrs	r3, r3, #2
 8002b16:	60fb      	str	r3, [r7, #12]
        break;
 8002b18:	e062      	b.n	8002be0 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b1a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b1e:	f004 ff75 	bl	8007a0c <HAL_RCCEx_GetPeriphCLKFreq>
 8002b22:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b2c:	d051      	beq.n	8002bd2 <ADC_ConfigureBoostMode+0x106>
 8002b2e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b32:	d854      	bhi.n	8002bde <ADC_ConfigureBoostMode+0x112>
 8002b34:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b38:	d047      	beq.n	8002bca <ADC_ConfigureBoostMode+0xfe>
 8002b3a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b3e:	d84e      	bhi.n	8002bde <ADC_ConfigureBoostMode+0x112>
 8002b40:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b44:	d03d      	beq.n	8002bc2 <ADC_ConfigureBoostMode+0xf6>
 8002b46:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b4a:	d848      	bhi.n	8002bde <ADC_ConfigureBoostMode+0x112>
 8002b4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b50:	d033      	beq.n	8002bba <ADC_ConfigureBoostMode+0xee>
 8002b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b56:	d842      	bhi.n	8002bde <ADC_ConfigureBoostMode+0x112>
 8002b58:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b5c:	d029      	beq.n	8002bb2 <ADC_ConfigureBoostMode+0xe6>
 8002b5e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b62:	d83c      	bhi.n	8002bde <ADC_ConfigureBoostMode+0x112>
 8002b64:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b68:	d01a      	beq.n	8002ba0 <ADC_ConfigureBoostMode+0xd4>
 8002b6a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b6e:	d836      	bhi.n	8002bde <ADC_ConfigureBoostMode+0x112>
 8002b70:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b74:	d014      	beq.n	8002ba0 <ADC_ConfigureBoostMode+0xd4>
 8002b76:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b7a:	d830      	bhi.n	8002bde <ADC_ConfigureBoostMode+0x112>
 8002b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b80:	d00e      	beq.n	8002ba0 <ADC_ConfigureBoostMode+0xd4>
 8002b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b86:	d82a      	bhi.n	8002bde <ADC_ConfigureBoostMode+0x112>
 8002b88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b8c:	d008      	beq.n	8002ba0 <ADC_ConfigureBoostMode+0xd4>
 8002b8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b92:	d824      	bhi.n	8002bde <ADC_ConfigureBoostMode+0x112>
 8002b94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b98:	d002      	beq.n	8002ba0 <ADC_ConfigureBoostMode+0xd4>
 8002b9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b9e:	d11e      	bne.n	8002bde <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	0c9b      	lsrs	r3, r3, #18
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bae:	60fb      	str	r3, [r7, #12]
        break;
 8002bb0:	e016      	b.n	8002be0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	60fb      	str	r3, [r7, #12]
        break;
 8002bb8:	e012      	b.n	8002be0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	60fb      	str	r3, [r7, #12]
        break;
 8002bc0:	e00e      	b.n	8002be0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	099b      	lsrs	r3, r3, #6
 8002bc6:	60fb      	str	r3, [r7, #12]
        break;
 8002bc8:	e00a      	b.n	8002be0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	09db      	lsrs	r3, r3, #7
 8002bce:	60fb      	str	r3, [r7, #12]
        break;
 8002bd0:	e006      	b.n	8002be0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	60fb      	str	r3, [r7, #12]
        break;
 8002bd8:	e002      	b.n	8002be0 <ADC_ConfigureBoostMode+0x114>
        break;
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002bde:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4a1b      	ldr	r2, [pc, #108]	; (8002c58 <ADC_ConfigureBoostMode+0x18c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d808      	bhi.n	8002c00 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002bfc:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002bfe:	e025      	b.n	8002c4c <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4a16      	ldr	r2, [pc, #88]	; (8002c5c <ADC_ConfigureBoostMode+0x190>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d80a      	bhi.n	8002c1e <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c1a:	609a      	str	r2, [r3, #8]
}
 8002c1c:	e016      	b.n	8002c4c <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4a0f      	ldr	r2, [pc, #60]	; (8002c60 <ADC_ConfigureBoostMode+0x194>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d80a      	bhi.n	8002c3c <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c38:	609a      	str	r2, [r3, #8]
}
 8002c3a:	e007      	b.n	8002c4c <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002c4a:	609a      	str	r2, [r3, #8]
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40022300 	.word	0x40022300
 8002c58:	005f5e10 	.word	0x005f5e10
 8002c5c:	00bebc20 	.word	0x00bebc20
 8002c60:	017d7840 	.word	0x017d7840

08002c64 <LL_ADC_IsEnabled>:
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <LL_ADC_IsEnabled+0x18>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <LL_ADC_IsEnabled+0x1a>
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_ADC_REG_IsConversionOngoing>:
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d101      	bne.n	8002ca2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b09f      	sub	sp, #124	; 0x7c
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e080      	b.n	8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a3d      	ldr	r2, [pc, #244]	; (8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d102      	bne.n	8002cee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ce8:	4b3c      	ldr	r3, [pc, #240]	; (8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	e001      	b.n	8002cf2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10b      	bne.n	8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e05f      	b.n	8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ffb9 	bl	8002c8a <LL_ADC_REG_IsConversionOngoing>
 8002d18:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ffb3 	bl	8002c8a <LL_ADC_REG_IsConversionOngoing>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d141      	bne.n	8002dae <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d13e      	bne.n	8002dae <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d30:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002d32:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d020      	beq.n	8002d7e <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d4e:	4822      	ldr	r0, [pc, #136]	; (8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002d50:	f7ff ff88 	bl	8002c64 <LL_ADC_IsEnabled>
 8002d54:	4604      	mov	r4, r0
 8002d56:	4821      	ldr	r0, [pc, #132]	; (8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002d58:	f7ff ff84 	bl	8002c64 <LL_ADC_IsEnabled>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	4323      	orrs	r3, r4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d12e      	bne.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	4b1e      	ldr	r3, [pc, #120]	; (8002de4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	6811      	ldr	r1, [r2, #0]
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	6892      	ldr	r2, [r2, #8]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	431a      	orrs	r2, r3
 8002d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d7a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d7c:	e021      	b.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d88:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d8a:	4813      	ldr	r0, [pc, #76]	; (8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002d8c:	f7ff ff6a 	bl	8002c64 <LL_ADC_IsEnabled>
 8002d90:	4604      	mov	r4, r0
 8002d92:	4812      	ldr	r0, [pc, #72]	; (8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002d94:	f7ff ff66 	bl	8002c64 <LL_ADC_IsEnabled>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4323      	orrs	r3, r4
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d110      	bne.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002daa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dac:	e009      	b.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db2:	f043 0220 	orr.w	r2, r3, #32
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002dc0:	e000      	b.n	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dcc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	377c      	adds	r7, #124	; 0x7c
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd90      	pop	{r4, r7, pc}
 8002dd8:	40022000 	.word	0x40022000
 8002ddc:	40022100 	.word	0x40022100
 8002de0:	40022300 	.word	0x40022300
 8002de4:	fffff0e0 	.word	0xfffff0e0

08002de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <__NVIC_SetPriorityGrouping+0x40>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e04:	4013      	ands	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e16:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <__NVIC_SetPriorityGrouping+0x40>)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	60d3      	str	r3, [r2, #12]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000ed00 	.word	0xe000ed00
 8002e2c:	05fa0000 	.word	0x05fa0000

08002e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <__NVIC_GetPriorityGrouping+0x18>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	f003 0307 	and.w	r3, r3, #7
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db0b      	blt.n	8002e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	f003 021f 	and.w	r2, r3, #31
 8002e64:	4907      	ldr	r1, [pc, #28]	; (8002e84 <__NVIC_EnableIRQ+0x38>)
 8002e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	e000e100 	.word	0xe000e100

08002e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	6039      	str	r1, [r7, #0]
 8002e92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db0a      	blt.n	8002eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	490c      	ldr	r1, [pc, #48]	; (8002ed4 <__NVIC_SetPriority+0x4c>)
 8002ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb0:	e00a      	b.n	8002ec8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4908      	ldr	r1, [pc, #32]	; (8002ed8 <__NVIC_SetPriority+0x50>)
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	3b04      	subs	r3, #4
 8002ec0:	0112      	lsls	r2, r2, #4
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	761a      	strb	r2, [r3, #24]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000e100 	.word	0xe000e100
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	; 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f1c3 0307 	rsb	r3, r3, #7
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	bf28      	it	cs
 8002efa:	2304      	movcs	r3, #4
 8002efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d902      	bls.n	8002f0c <NVIC_EncodePriority+0x30>
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3b03      	subs	r3, #3
 8002f0a:	e000      	b.n	8002f0e <NVIC_EncodePriority+0x32>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	401a      	ands	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f24:	f04f 31ff 	mov.w	r1, #4294967295
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	43d9      	mvns	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	4313      	orrs	r3, r2
         );
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3724      	adds	r7, #36	; 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f54:	d301      	bcc.n	8002f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f56:	2301      	movs	r3, #1
 8002f58:	e00f      	b.n	8002f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	; (8002f84 <SysTick_Config+0x40>)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f62:	210f      	movs	r1, #15
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	f7ff ff8e 	bl	8002e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <SysTick_Config+0x40>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f72:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <SysTick_Config+0x40>)
 8002f74:	2207      	movs	r2, #7
 8002f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	e000e010 	.word	0xe000e010

08002f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ff29 	bl	8002de8 <__NVIC_SetPriorityGrouping>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fac:	f7ff ff40 	bl	8002e30 <__NVIC_GetPriorityGrouping>
 8002fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	f7ff ff90 	bl	8002edc <NVIC_EncodePriority>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff5f 	bl	8002e88 <__NVIC_SetPriority>
}
 8002fca:	bf00      	nop
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	4603      	mov	r3, r0
 8002fda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff33 	bl	8002e4c <__NVIC_EnableIRQ>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff ffa4 	bl	8002f44 <SysTick_Config>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e014      	b.n	8003042 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	791b      	ldrb	r3, [r3, #4]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d105      	bne.n	800302e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7fd fed3 	bl	8000dd4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2202      	movs	r2, #2
 8003032:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	795b      	ldrb	r3, [r3, #5]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_DAC_Start_DMA+0x1e>
 8003066:	2302      	movs	r3, #2
 8003068:	e0ab      	b.n	80031c2 <HAL_DAC_Start_DMA+0x176>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2202      	movs	r2, #2
 8003074:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d12f      	bne.n	80030dc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a52      	ldr	r2, [pc, #328]	; (80031cc <HAL_DAC_Start_DMA+0x180>)
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4a51      	ldr	r2, [pc, #324]	; (80031d0 <HAL_DAC_Start_DMA+0x184>)
 800308a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4a50      	ldr	r2, [pc, #320]	; (80031d4 <HAL_DAC_Start_DMA+0x188>)
 8003092:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030a2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d013      	beq.n	80030d2 <HAL_DAC_Start_DMA+0x86>
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d845      	bhi.n	800313c <HAL_DAC_Start_DMA+0xf0>
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_DAC_Start_DMA+0x72>
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d005      	beq.n	80030c8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80030bc:	e03e      	b.n	800313c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3308      	adds	r3, #8
 80030c4:	613b      	str	r3, [r7, #16]
        break;
 80030c6:	e03c      	b.n	8003142 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	330c      	adds	r3, #12
 80030ce:	613b      	str	r3, [r7, #16]
        break;
 80030d0:	e037      	b.n	8003142 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3310      	adds	r3, #16
 80030d8:	613b      	str	r3, [r7, #16]
        break;
 80030da:	e032      	b.n	8003142 <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4a3d      	ldr	r2, [pc, #244]	; (80031d8 <HAL_DAC_Start_DMA+0x18c>)
 80030e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	4a3c      	ldr	r2, [pc, #240]	; (80031dc <HAL_DAC_Start_DMA+0x190>)
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a3b      	ldr	r2, [pc, #236]	; (80031e0 <HAL_DAC_Start_DMA+0x194>)
 80030f2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003102:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	2b08      	cmp	r3, #8
 8003108:	d013      	beq.n	8003132 <HAL_DAC_Start_DMA+0xe6>
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d817      	bhi.n	8003140 <HAL_DAC_Start_DMA+0xf4>
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_DAC_Start_DMA+0xd2>
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d005      	beq.n	8003128 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800311c:	e010      	b.n	8003140 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3314      	adds	r3, #20
 8003124:	613b      	str	r3, [r7, #16]
        break;
 8003126:	e00c      	b.n	8003142 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3318      	adds	r3, #24
 800312e:	613b      	str	r3, [r7, #16]
        break;
 8003130:	e007      	b.n	8003142 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	331c      	adds	r3, #28
 8003138:	613b      	str	r3, [r7, #16]
        break;
 800313a:	e002      	b.n	8003142 <HAL_DAC_Start_DMA+0xf6>
        break;
 800313c:	bf00      	nop
 800313e:	e000      	b.n	8003142 <HAL_DAC_Start_DMA+0xf6>
        break;
 8003140:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d111      	bne.n	800316c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003156:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6898      	ldr	r0, [r3, #8]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	f000 fda7 	bl	8003cb4 <HAL_DMA_Start_IT>
 8003166:	4603      	mov	r3, r0
 8003168:	75fb      	strb	r3, [r7, #23]
 800316a:	e010      	b.n	800318e <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800317a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	68d8      	ldr	r0, [r3, #12]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	f000 fd95 	bl	8003cb4 <HAL_DMA_Start_IT>
 800318a:	4603      	mov	r3, r0
 800318c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003194:	7dfb      	ldrb	r3, [r7, #23]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10c      	bne.n	80031b4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6819      	ldr	r1, [r3, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2201      	movs	r2, #1
 80031a8:	409a      	lsls	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	e005      	b.n	80031c0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f043 0204 	orr.w	r2, r3, #4
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	08003481 	.word	0x08003481
 80031d0:	080034a3 	.word	0x080034a3
 80031d4:	080034bf 	.word	0x080034bf
 80031d8:	08003529 	.word	0x08003529
 80031dc:	0800354b 	.word	0x0800354b
 80031e0:	08003567 	.word	0x08003567

080031e4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	795b      	ldrb	r3, [r3, #5]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_DAC_ConfigChannel+0x18>
 8003234:	2302      	movs	r3, #2
 8003236:	e11d      	b.n	8003474 <HAL_DAC_ConfigChannel+0x254>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2202      	movs	r2, #2
 8003242:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b04      	cmp	r3, #4
 800324a:	d174      	bne.n	8003336 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800324c:	f7fe fc18 	bl	8001a80 <HAL_GetTick>
 8003250:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d134      	bne.n	80032c2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003258:	e011      	b.n	800327e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800325a:	f7fe fc11 	bl	8001a80 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d90a      	bls.n	800327e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f043 0208 	orr.w	r2, r3, #8
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2203      	movs	r2, #3
 8003278:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e0fa      	b.n	8003474 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003284:	4b7d      	ldr	r3, [pc, #500]	; (800347c <HAL_DAC_ConfigChannel+0x25c>)
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e6      	bne.n	800325a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 800328c:	2001      	movs	r0, #1
 800328e:	f7fe fc03 	bl	8001a98 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	6992      	ldr	r2, [r2, #24]
 800329a:	641a      	str	r2, [r3, #64]	; 0x40
 800329c:	e01e      	b.n	80032dc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800329e:	f7fe fbef 	bl	8001a80 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d90a      	bls.n	80032c2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f043 0208 	orr.w	r2, r3, #8
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2203      	movs	r2, #3
 80032bc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e0d8      	b.n	8003474 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	dbe8      	blt.n	800329e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80032cc:	2001      	movs	r0, #1
 80032ce:	f7fe fbe3 	bl	8001a98 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	6992      	ldr	r2, [r2, #24]
 80032da:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	ea02 0103 	and.w	r1, r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	69da      	ldr	r2, [r3, #28]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	409a      	lsls	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	21ff      	movs	r1, #255	; 0xff
 8003318:	fa01 f303 	lsl.w	r3, r1, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	ea02 0103 	and.w	r1, r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	6a1a      	ldr	r2, [r3, #32]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	409a      	lsls	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d11d      	bne.n	800337a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	221f      	movs	r2, #31
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4013      	ands	r3, r2
 8003358:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2207      	movs	r2, #7
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4013      	ands	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d102      	bne.n	80033a4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	e00f      	b.n	80033c4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d102      	bne.n	80033b2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80033ac:	2301      	movs	r3, #1
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	e008      	b.n	80033c4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d102      	bne.n	80033c0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80033ba:	2301      	movs	r3, #1
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	e001      	b.n	80033c4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43da      	mvns	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	400a      	ands	r2, r1
 800340a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4013      	ands	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6819      	ldr	r1, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	22c0      	movs	r2, #192	; 0xc0
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43da      	mvns	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	400a      	ands	r2, r1
 8003464:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2201      	movs	r2, #1
 800346a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20008000 	.word	0x20008000

08003480 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f7ff fea8 	bl	80031e4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2201      	movs	r2, #1
 8003498:	711a      	strb	r2, [r3, #4]
}
 800349a:	bf00      	nop
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f7ff fea1 	bl	80031f8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80034b6:	bf00      	nop
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f043 0204 	orr.w	r2, r3, #4
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f7ff fe97 	bl	800320c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	711a      	strb	r2, [r3, #4]
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff ffd8 	bl	80034ec <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	711a      	strb	r2, [r3, #4]
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7ff ffd1 	bl	8003500 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f043 0204 	orr.w	r2, r3, #4
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f7ff ffc7 	bl	8003514 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	711a      	strb	r2, [r3, #4]
}
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800359c:	f7fe fa70 	bl	8001a80 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e37f      	b.n	8003cac <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a66      	ldr	r2, [pc, #408]	; (800374c <HAL_DMA_Init+0x1b8>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d04a      	beq.n	800364c <HAL_DMA_Init+0xb8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a65      	ldr	r2, [pc, #404]	; (8003750 <HAL_DMA_Init+0x1bc>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d045      	beq.n	800364c <HAL_DMA_Init+0xb8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a63      	ldr	r2, [pc, #396]	; (8003754 <HAL_DMA_Init+0x1c0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d040      	beq.n	800364c <HAL_DMA_Init+0xb8>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a62      	ldr	r2, [pc, #392]	; (8003758 <HAL_DMA_Init+0x1c4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d03b      	beq.n	800364c <HAL_DMA_Init+0xb8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a60      	ldr	r2, [pc, #384]	; (800375c <HAL_DMA_Init+0x1c8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d036      	beq.n	800364c <HAL_DMA_Init+0xb8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a5f      	ldr	r2, [pc, #380]	; (8003760 <HAL_DMA_Init+0x1cc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d031      	beq.n	800364c <HAL_DMA_Init+0xb8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a5d      	ldr	r2, [pc, #372]	; (8003764 <HAL_DMA_Init+0x1d0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d02c      	beq.n	800364c <HAL_DMA_Init+0xb8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a5c      	ldr	r2, [pc, #368]	; (8003768 <HAL_DMA_Init+0x1d4>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d027      	beq.n	800364c <HAL_DMA_Init+0xb8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a5a      	ldr	r2, [pc, #360]	; (800376c <HAL_DMA_Init+0x1d8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d022      	beq.n	800364c <HAL_DMA_Init+0xb8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a59      	ldr	r2, [pc, #356]	; (8003770 <HAL_DMA_Init+0x1dc>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d01d      	beq.n	800364c <HAL_DMA_Init+0xb8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a57      	ldr	r2, [pc, #348]	; (8003774 <HAL_DMA_Init+0x1e0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d018      	beq.n	800364c <HAL_DMA_Init+0xb8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a56      	ldr	r2, [pc, #344]	; (8003778 <HAL_DMA_Init+0x1e4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d013      	beq.n	800364c <HAL_DMA_Init+0xb8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a54      	ldr	r2, [pc, #336]	; (800377c <HAL_DMA_Init+0x1e8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00e      	beq.n	800364c <HAL_DMA_Init+0xb8>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a53      	ldr	r2, [pc, #332]	; (8003780 <HAL_DMA_Init+0x1ec>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d009      	beq.n	800364c <HAL_DMA_Init+0xb8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a51      	ldr	r2, [pc, #324]	; (8003784 <HAL_DMA_Init+0x1f0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d004      	beq.n	800364c <HAL_DMA_Init+0xb8>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a50      	ldr	r2, [pc, #320]	; (8003788 <HAL_DMA_Init+0x1f4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d101      	bne.n	8003650 <HAL_DMA_Init+0xbc>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <HAL_DMA_Init+0xbe>
 8003650:	2300      	movs	r3, #0
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 813c 	beq.w	80038d0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a37      	ldr	r2, [pc, #220]	; (800374c <HAL_DMA_Init+0x1b8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d04a      	beq.n	8003708 <HAL_DMA_Init+0x174>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a36      	ldr	r2, [pc, #216]	; (8003750 <HAL_DMA_Init+0x1bc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d045      	beq.n	8003708 <HAL_DMA_Init+0x174>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a34      	ldr	r2, [pc, #208]	; (8003754 <HAL_DMA_Init+0x1c0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d040      	beq.n	8003708 <HAL_DMA_Init+0x174>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a33      	ldr	r2, [pc, #204]	; (8003758 <HAL_DMA_Init+0x1c4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d03b      	beq.n	8003708 <HAL_DMA_Init+0x174>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a31      	ldr	r2, [pc, #196]	; (800375c <HAL_DMA_Init+0x1c8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d036      	beq.n	8003708 <HAL_DMA_Init+0x174>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a30      	ldr	r2, [pc, #192]	; (8003760 <HAL_DMA_Init+0x1cc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d031      	beq.n	8003708 <HAL_DMA_Init+0x174>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a2e      	ldr	r2, [pc, #184]	; (8003764 <HAL_DMA_Init+0x1d0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d02c      	beq.n	8003708 <HAL_DMA_Init+0x174>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a2d      	ldr	r2, [pc, #180]	; (8003768 <HAL_DMA_Init+0x1d4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d027      	beq.n	8003708 <HAL_DMA_Init+0x174>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a2b      	ldr	r2, [pc, #172]	; (800376c <HAL_DMA_Init+0x1d8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d022      	beq.n	8003708 <HAL_DMA_Init+0x174>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2a      	ldr	r2, [pc, #168]	; (8003770 <HAL_DMA_Init+0x1dc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d01d      	beq.n	8003708 <HAL_DMA_Init+0x174>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a28      	ldr	r2, [pc, #160]	; (8003774 <HAL_DMA_Init+0x1e0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d018      	beq.n	8003708 <HAL_DMA_Init+0x174>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a27      	ldr	r2, [pc, #156]	; (8003778 <HAL_DMA_Init+0x1e4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d013      	beq.n	8003708 <HAL_DMA_Init+0x174>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a25      	ldr	r2, [pc, #148]	; (800377c <HAL_DMA_Init+0x1e8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00e      	beq.n	8003708 <HAL_DMA_Init+0x174>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a24      	ldr	r2, [pc, #144]	; (8003780 <HAL_DMA_Init+0x1ec>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d009      	beq.n	8003708 <HAL_DMA_Init+0x174>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a22      	ldr	r2, [pc, #136]	; (8003784 <HAL_DMA_Init+0x1f0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d004      	beq.n	8003708 <HAL_DMA_Init+0x174>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a21      	ldr	r2, [pc, #132]	; (8003788 <HAL_DMA_Init+0x1f4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d108      	bne.n	800371a <HAL_DMA_Init+0x186>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e007      	b.n	800372a <HAL_DMA_Init+0x196>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800372a:	e02f      	b.n	800378c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800372c:	f7fe f9a8 	bl	8001a80 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b05      	cmp	r3, #5
 8003738:	d928      	bls.n	800378c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2203      	movs	r2, #3
 8003744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e2af      	b.n	8003cac <HAL_DMA_Init+0x718>
 800374c:	40020010 	.word	0x40020010
 8003750:	40020028 	.word	0x40020028
 8003754:	40020040 	.word	0x40020040
 8003758:	40020058 	.word	0x40020058
 800375c:	40020070 	.word	0x40020070
 8003760:	40020088 	.word	0x40020088
 8003764:	400200a0 	.word	0x400200a0
 8003768:	400200b8 	.word	0x400200b8
 800376c:	40020410 	.word	0x40020410
 8003770:	40020428 	.word	0x40020428
 8003774:	40020440 	.word	0x40020440
 8003778:	40020458 	.word	0x40020458
 800377c:	40020470 	.word	0x40020470
 8003780:	40020488 	.word	0x40020488
 8003784:	400204a0 	.word	0x400204a0
 8003788:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1c8      	bne.n	800372c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4b73      	ldr	r3, [pc, #460]	; (8003974 <HAL_DMA_Init+0x3e0>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80037b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d107      	bne.n	80037f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	4313      	orrs	r3, r2
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b28      	cmp	r3, #40	; 0x28
 80037f6:	d903      	bls.n	8003800 <HAL_DMA_Init+0x26c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b2e      	cmp	r3, #46	; 0x2e
 80037fe:	d91f      	bls.n	8003840 <HAL_DMA_Init+0x2ac>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b3e      	cmp	r3, #62	; 0x3e
 8003806:	d903      	bls.n	8003810 <HAL_DMA_Init+0x27c>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b42      	cmp	r3, #66	; 0x42
 800380e:	d917      	bls.n	8003840 <HAL_DMA_Init+0x2ac>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b46      	cmp	r3, #70	; 0x46
 8003816:	d903      	bls.n	8003820 <HAL_DMA_Init+0x28c>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b48      	cmp	r3, #72	; 0x48
 800381e:	d90f      	bls.n	8003840 <HAL_DMA_Init+0x2ac>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b4e      	cmp	r3, #78	; 0x4e
 8003826:	d903      	bls.n	8003830 <HAL_DMA_Init+0x29c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b52      	cmp	r3, #82	; 0x52
 800382e:	d907      	bls.n	8003840 <HAL_DMA_Init+0x2ac>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b73      	cmp	r3, #115	; 0x73
 8003836:	d905      	bls.n	8003844 <HAL_DMA_Init+0x2b0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b77      	cmp	r3, #119	; 0x77
 800383e:	d801      	bhi.n	8003844 <HAL_DMA_Init+0x2b0>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <HAL_DMA_Init+0x2b2>
 8003844:	2300      	movs	r3, #0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003850:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f023 0307 	bic.w	r3, r3, #7
 8003868:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	2b04      	cmp	r3, #4
 800387a:	d117      	bne.n	80038ac <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00e      	beq.n	80038ac <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f001 fe72 	bl	8005578 <DMA_CheckFifoParam>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2240      	movs	r2, #64	; 0x40
 800389e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e1ff      	b.n	8003cac <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f001 fdad 	bl	8005414 <DMA_CalcBaseAndBitshift>
 80038ba:	4603      	mov	r3, r0
 80038bc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	223f      	movs	r2, #63	; 0x3f
 80038c8:	409a      	lsls	r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	609a      	str	r2, [r3, #8]
 80038ce:	e0fe      	b.n	8003ace <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a28      	ldr	r2, [pc, #160]	; (8003978 <HAL_DMA_Init+0x3e4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d04a      	beq.n	8003970 <HAL_DMA_Init+0x3dc>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a27      	ldr	r2, [pc, #156]	; (800397c <HAL_DMA_Init+0x3e8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d045      	beq.n	8003970 <HAL_DMA_Init+0x3dc>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a25      	ldr	r2, [pc, #148]	; (8003980 <HAL_DMA_Init+0x3ec>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d040      	beq.n	8003970 <HAL_DMA_Init+0x3dc>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a24      	ldr	r2, [pc, #144]	; (8003984 <HAL_DMA_Init+0x3f0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d03b      	beq.n	8003970 <HAL_DMA_Init+0x3dc>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a22      	ldr	r2, [pc, #136]	; (8003988 <HAL_DMA_Init+0x3f4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d036      	beq.n	8003970 <HAL_DMA_Init+0x3dc>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a21      	ldr	r2, [pc, #132]	; (800398c <HAL_DMA_Init+0x3f8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d031      	beq.n	8003970 <HAL_DMA_Init+0x3dc>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1f      	ldr	r2, [pc, #124]	; (8003990 <HAL_DMA_Init+0x3fc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d02c      	beq.n	8003970 <HAL_DMA_Init+0x3dc>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1e      	ldr	r2, [pc, #120]	; (8003994 <HAL_DMA_Init+0x400>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d027      	beq.n	8003970 <HAL_DMA_Init+0x3dc>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a1c      	ldr	r2, [pc, #112]	; (8003998 <HAL_DMA_Init+0x404>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d022      	beq.n	8003970 <HAL_DMA_Init+0x3dc>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1b      	ldr	r2, [pc, #108]	; (800399c <HAL_DMA_Init+0x408>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d01d      	beq.n	8003970 <HAL_DMA_Init+0x3dc>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a19      	ldr	r2, [pc, #100]	; (80039a0 <HAL_DMA_Init+0x40c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d018      	beq.n	8003970 <HAL_DMA_Init+0x3dc>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a18      	ldr	r2, [pc, #96]	; (80039a4 <HAL_DMA_Init+0x410>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <HAL_DMA_Init+0x3dc>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a16      	ldr	r2, [pc, #88]	; (80039a8 <HAL_DMA_Init+0x414>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00e      	beq.n	8003970 <HAL_DMA_Init+0x3dc>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a15      	ldr	r2, [pc, #84]	; (80039ac <HAL_DMA_Init+0x418>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d009      	beq.n	8003970 <HAL_DMA_Init+0x3dc>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a13      	ldr	r2, [pc, #76]	; (80039b0 <HAL_DMA_Init+0x41c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <HAL_DMA_Init+0x3dc>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a12      	ldr	r2, [pc, #72]	; (80039b4 <HAL_DMA_Init+0x420>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d123      	bne.n	80039b8 <HAL_DMA_Init+0x424>
 8003970:	2301      	movs	r3, #1
 8003972:	e022      	b.n	80039ba <HAL_DMA_Init+0x426>
 8003974:	fe10803f 	.word	0xfe10803f
 8003978:	48022c08 	.word	0x48022c08
 800397c:	48022c1c 	.word	0x48022c1c
 8003980:	48022c30 	.word	0x48022c30
 8003984:	48022c44 	.word	0x48022c44
 8003988:	48022c58 	.word	0x48022c58
 800398c:	48022c6c 	.word	0x48022c6c
 8003990:	48022c80 	.word	0x48022c80
 8003994:	48022c94 	.word	0x48022c94
 8003998:	58025408 	.word	0x58025408
 800399c:	5802541c 	.word	0x5802541c
 80039a0:	58025430 	.word	0x58025430
 80039a4:	58025444 	.word	0x58025444
 80039a8:	58025458 	.word	0x58025458
 80039ac:	5802546c 	.word	0x5802546c
 80039b0:	58025480 	.word	0x58025480
 80039b4:	58025494 	.word	0x58025494
 80039b8:	2300      	movs	r3, #0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d07e      	beq.n	8003abc <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a80      	ldr	r2, [pc, #512]	; (8003bc4 <HAL_DMA_Init+0x630>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d021      	beq.n	8003a0c <HAL_DMA_Init+0x478>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a7e      	ldr	r2, [pc, #504]	; (8003bc8 <HAL_DMA_Init+0x634>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01c      	beq.n	8003a0c <HAL_DMA_Init+0x478>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a7d      	ldr	r2, [pc, #500]	; (8003bcc <HAL_DMA_Init+0x638>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d017      	beq.n	8003a0c <HAL_DMA_Init+0x478>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a7b      	ldr	r2, [pc, #492]	; (8003bd0 <HAL_DMA_Init+0x63c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d012      	beq.n	8003a0c <HAL_DMA_Init+0x478>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a7a      	ldr	r2, [pc, #488]	; (8003bd4 <HAL_DMA_Init+0x640>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00d      	beq.n	8003a0c <HAL_DMA_Init+0x478>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a78      	ldr	r2, [pc, #480]	; (8003bd8 <HAL_DMA_Init+0x644>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d008      	beq.n	8003a0c <HAL_DMA_Init+0x478>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a77      	ldr	r2, [pc, #476]	; (8003bdc <HAL_DMA_Init+0x648>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d003      	beq.n	8003a0c <HAL_DMA_Init+0x478>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a75      	ldr	r2, [pc, #468]	; (8003be0 <HAL_DMA_Init+0x64c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2202      	movs	r2, #2
 8003a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4b6e      	ldr	r3, [pc, #440]	; (8003be4 <HAL_DMA_Init+0x650>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b40      	cmp	r3, #64	; 0x40
 8003a34:	d008      	beq.n	8003a48 <HAL_DMA_Init+0x4b4>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b80      	cmp	r3, #128	; 0x80
 8003a3c:	d102      	bne.n	8003a44 <HAL_DMA_Init+0x4b0>
 8003a3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a42:	e002      	b.n	8003a4a <HAL_DMA_Init+0x4b6>
 8003a44:	2300      	movs	r3, #0
 8003a46:	e000      	b.n	8003a4a <HAL_DMA_Init+0x4b6>
 8003a48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	68d2      	ldr	r2, [r2, #12]
 8003a4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003a58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003a60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003a68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b56      	ldr	r3, [pc, #344]	; (8003be8 <HAL_DMA_Init+0x654>)
 8003a90:	4413      	add	r3, r2
 8003a92:	4a56      	ldr	r2, [pc, #344]	; (8003bec <HAL_DMA_Init+0x658>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	009a      	lsls	r2, r3, #2
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f001 fcb7 	bl	8005414 <DMA_CalcBaseAndBitshift>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	e008      	b.n	8003ace <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2240      	movs	r2, #64	; 0x40
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e0ee      	b.n	8003cac <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a47      	ldr	r2, [pc, #284]	; (8003bf0 <HAL_DMA_Init+0x65c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d072      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a45      	ldr	r2, [pc, #276]	; (8003bf4 <HAL_DMA_Init+0x660>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d06d      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a44      	ldr	r2, [pc, #272]	; (8003bf8 <HAL_DMA_Init+0x664>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d068      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a42      	ldr	r2, [pc, #264]	; (8003bfc <HAL_DMA_Init+0x668>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d063      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a41      	ldr	r2, [pc, #260]	; (8003c00 <HAL_DMA_Init+0x66c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d05e      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a3f      	ldr	r2, [pc, #252]	; (8003c04 <HAL_DMA_Init+0x670>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d059      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a3e      	ldr	r2, [pc, #248]	; (8003c08 <HAL_DMA_Init+0x674>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d054      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a3c      	ldr	r2, [pc, #240]	; (8003c0c <HAL_DMA_Init+0x678>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d04f      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a3b      	ldr	r2, [pc, #236]	; (8003c10 <HAL_DMA_Init+0x67c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d04a      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a39      	ldr	r2, [pc, #228]	; (8003c14 <HAL_DMA_Init+0x680>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d045      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a38      	ldr	r2, [pc, #224]	; (8003c18 <HAL_DMA_Init+0x684>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d040      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a36      	ldr	r2, [pc, #216]	; (8003c1c <HAL_DMA_Init+0x688>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d03b      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a35      	ldr	r2, [pc, #212]	; (8003c20 <HAL_DMA_Init+0x68c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d036      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a33      	ldr	r2, [pc, #204]	; (8003c24 <HAL_DMA_Init+0x690>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d031      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a32      	ldr	r2, [pc, #200]	; (8003c28 <HAL_DMA_Init+0x694>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d02c      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a30      	ldr	r2, [pc, #192]	; (8003c2c <HAL_DMA_Init+0x698>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d027      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a14      	ldr	r2, [pc, #80]	; (8003bc4 <HAL_DMA_Init+0x630>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d022      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <HAL_DMA_Init+0x634>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d01d      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a11      	ldr	r2, [pc, #68]	; (8003bcc <HAL_DMA_Init+0x638>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d018      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0f      	ldr	r2, [pc, #60]	; (8003bd0 <HAL_DMA_Init+0x63c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d013      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a0e      	ldr	r2, [pc, #56]	; (8003bd4 <HAL_DMA_Init+0x640>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00e      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a0c      	ldr	r2, [pc, #48]	; (8003bd8 <HAL_DMA_Init+0x644>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d009      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a0b      	ldr	r2, [pc, #44]	; (8003bdc <HAL_DMA_Init+0x648>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <HAL_DMA_Init+0x62a>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a09      	ldr	r2, [pc, #36]	; (8003be0 <HAL_DMA_Init+0x64c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d138      	bne.n	8003c30 <HAL_DMA_Init+0x69c>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e037      	b.n	8003c32 <HAL_DMA_Init+0x69e>
 8003bc2:	bf00      	nop
 8003bc4:	58025408 	.word	0x58025408
 8003bc8:	5802541c 	.word	0x5802541c
 8003bcc:	58025430 	.word	0x58025430
 8003bd0:	58025444 	.word	0x58025444
 8003bd4:	58025458 	.word	0x58025458
 8003bd8:	5802546c 	.word	0x5802546c
 8003bdc:	58025480 	.word	0x58025480
 8003be0:	58025494 	.word	0x58025494
 8003be4:	fffe000f 	.word	0xfffe000f
 8003be8:	a7fdabf8 	.word	0xa7fdabf8
 8003bec:	cccccccd 	.word	0xcccccccd
 8003bf0:	40020010 	.word	0x40020010
 8003bf4:	40020028 	.word	0x40020028
 8003bf8:	40020040 	.word	0x40020040
 8003bfc:	40020058 	.word	0x40020058
 8003c00:	40020070 	.word	0x40020070
 8003c04:	40020088 	.word	0x40020088
 8003c08:	400200a0 	.word	0x400200a0
 8003c0c:	400200b8 	.word	0x400200b8
 8003c10:	40020410 	.word	0x40020410
 8003c14:	40020428 	.word	0x40020428
 8003c18:	40020440 	.word	0x40020440
 8003c1c:	40020458 	.word	0x40020458
 8003c20:	40020470 	.word	0x40020470
 8003c24:	40020488 	.word	0x40020488
 8003c28:	400204a0 	.word	0x400204a0
 8003c2c:	400204b8 	.word	0x400204b8
 8003c30:	2300      	movs	r3, #0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d032      	beq.n	8003c9c <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f001 fd1a 	bl	8005670 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b80      	cmp	r3, #128	; 0x80
 8003c42:	d102      	bne.n	8003c4a <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c5e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d010      	beq.n	8003c8a <HAL_DMA_Init+0x6f6>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d80c      	bhi.n	8003c8a <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f001 fd97 	bl	80057a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c86:	605a      	str	r2, [r3, #4]
 8003c88:	e008      	b.n	8003c9c <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e226      	b.n	800411e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_DMA_Start_IT+0x2a>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e21f      	b.n	800411e <HAL_DMA_Start_IT+0x46a>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	f040 820a 	bne.w	8004108 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a68      	ldr	r2, [pc, #416]	; (8003ea8 <HAL_DMA_Start_IT+0x1f4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d04a      	beq.n	8003da2 <HAL_DMA_Start_IT+0xee>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a66      	ldr	r2, [pc, #408]	; (8003eac <HAL_DMA_Start_IT+0x1f8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d045      	beq.n	8003da2 <HAL_DMA_Start_IT+0xee>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a65      	ldr	r2, [pc, #404]	; (8003eb0 <HAL_DMA_Start_IT+0x1fc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d040      	beq.n	8003da2 <HAL_DMA_Start_IT+0xee>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a63      	ldr	r2, [pc, #396]	; (8003eb4 <HAL_DMA_Start_IT+0x200>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d03b      	beq.n	8003da2 <HAL_DMA_Start_IT+0xee>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a62      	ldr	r2, [pc, #392]	; (8003eb8 <HAL_DMA_Start_IT+0x204>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d036      	beq.n	8003da2 <HAL_DMA_Start_IT+0xee>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a60      	ldr	r2, [pc, #384]	; (8003ebc <HAL_DMA_Start_IT+0x208>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d031      	beq.n	8003da2 <HAL_DMA_Start_IT+0xee>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a5f      	ldr	r2, [pc, #380]	; (8003ec0 <HAL_DMA_Start_IT+0x20c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d02c      	beq.n	8003da2 <HAL_DMA_Start_IT+0xee>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a5d      	ldr	r2, [pc, #372]	; (8003ec4 <HAL_DMA_Start_IT+0x210>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d027      	beq.n	8003da2 <HAL_DMA_Start_IT+0xee>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a5c      	ldr	r2, [pc, #368]	; (8003ec8 <HAL_DMA_Start_IT+0x214>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d022      	beq.n	8003da2 <HAL_DMA_Start_IT+0xee>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a5a      	ldr	r2, [pc, #360]	; (8003ecc <HAL_DMA_Start_IT+0x218>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01d      	beq.n	8003da2 <HAL_DMA_Start_IT+0xee>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a59      	ldr	r2, [pc, #356]	; (8003ed0 <HAL_DMA_Start_IT+0x21c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d018      	beq.n	8003da2 <HAL_DMA_Start_IT+0xee>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a57      	ldr	r2, [pc, #348]	; (8003ed4 <HAL_DMA_Start_IT+0x220>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <HAL_DMA_Start_IT+0xee>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a56      	ldr	r2, [pc, #344]	; (8003ed8 <HAL_DMA_Start_IT+0x224>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00e      	beq.n	8003da2 <HAL_DMA_Start_IT+0xee>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a54      	ldr	r2, [pc, #336]	; (8003edc <HAL_DMA_Start_IT+0x228>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d009      	beq.n	8003da2 <HAL_DMA_Start_IT+0xee>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a53      	ldr	r2, [pc, #332]	; (8003ee0 <HAL_DMA_Start_IT+0x22c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d004      	beq.n	8003da2 <HAL_DMA_Start_IT+0xee>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a51      	ldr	r2, [pc, #324]	; (8003ee4 <HAL_DMA_Start_IT+0x230>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d108      	bne.n	8003db4 <HAL_DMA_Start_IT+0x100>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	e007      	b.n	8003dc4 <HAL_DMA_Start_IT+0x110>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0201 	bic.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f001 f93e 	bl	800504c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a34      	ldr	r2, [pc, #208]	; (8003ea8 <HAL_DMA_Start_IT+0x1f4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d04a      	beq.n	8003e70 <HAL_DMA_Start_IT+0x1bc>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a33      	ldr	r2, [pc, #204]	; (8003eac <HAL_DMA_Start_IT+0x1f8>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d045      	beq.n	8003e70 <HAL_DMA_Start_IT+0x1bc>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a31      	ldr	r2, [pc, #196]	; (8003eb0 <HAL_DMA_Start_IT+0x1fc>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d040      	beq.n	8003e70 <HAL_DMA_Start_IT+0x1bc>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a30      	ldr	r2, [pc, #192]	; (8003eb4 <HAL_DMA_Start_IT+0x200>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d03b      	beq.n	8003e70 <HAL_DMA_Start_IT+0x1bc>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a2e      	ldr	r2, [pc, #184]	; (8003eb8 <HAL_DMA_Start_IT+0x204>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d036      	beq.n	8003e70 <HAL_DMA_Start_IT+0x1bc>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a2d      	ldr	r2, [pc, #180]	; (8003ebc <HAL_DMA_Start_IT+0x208>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d031      	beq.n	8003e70 <HAL_DMA_Start_IT+0x1bc>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a2b      	ldr	r2, [pc, #172]	; (8003ec0 <HAL_DMA_Start_IT+0x20c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d02c      	beq.n	8003e70 <HAL_DMA_Start_IT+0x1bc>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a2a      	ldr	r2, [pc, #168]	; (8003ec4 <HAL_DMA_Start_IT+0x210>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d027      	beq.n	8003e70 <HAL_DMA_Start_IT+0x1bc>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a28      	ldr	r2, [pc, #160]	; (8003ec8 <HAL_DMA_Start_IT+0x214>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d022      	beq.n	8003e70 <HAL_DMA_Start_IT+0x1bc>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a27      	ldr	r2, [pc, #156]	; (8003ecc <HAL_DMA_Start_IT+0x218>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d01d      	beq.n	8003e70 <HAL_DMA_Start_IT+0x1bc>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a25      	ldr	r2, [pc, #148]	; (8003ed0 <HAL_DMA_Start_IT+0x21c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d018      	beq.n	8003e70 <HAL_DMA_Start_IT+0x1bc>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a24      	ldr	r2, [pc, #144]	; (8003ed4 <HAL_DMA_Start_IT+0x220>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d013      	beq.n	8003e70 <HAL_DMA_Start_IT+0x1bc>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a22      	ldr	r2, [pc, #136]	; (8003ed8 <HAL_DMA_Start_IT+0x224>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00e      	beq.n	8003e70 <HAL_DMA_Start_IT+0x1bc>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a21      	ldr	r2, [pc, #132]	; (8003edc <HAL_DMA_Start_IT+0x228>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d009      	beq.n	8003e70 <HAL_DMA_Start_IT+0x1bc>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1f      	ldr	r2, [pc, #124]	; (8003ee0 <HAL_DMA_Start_IT+0x22c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d004      	beq.n	8003e70 <HAL_DMA_Start_IT+0x1bc>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ee4 <HAL_DMA_Start_IT+0x230>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <HAL_DMA_Start_IT+0x1c0>
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <HAL_DMA_Start_IT+0x1c2>
 8003e74:	2300      	movs	r3, #0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d036      	beq.n	8003ee8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f023 021e 	bic.w	r2, r3, #30
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0216 	orr.w	r2, r2, #22
 8003e8c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d03e      	beq.n	8003f14 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0208 	orr.w	r2, r2, #8
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	e035      	b.n	8003f14 <HAL_DMA_Start_IT+0x260>
 8003ea8:	40020010 	.word	0x40020010
 8003eac:	40020028 	.word	0x40020028
 8003eb0:	40020040 	.word	0x40020040
 8003eb4:	40020058 	.word	0x40020058
 8003eb8:	40020070 	.word	0x40020070
 8003ebc:	40020088 	.word	0x40020088
 8003ec0:	400200a0 	.word	0x400200a0
 8003ec4:	400200b8 	.word	0x400200b8
 8003ec8:	40020410 	.word	0x40020410
 8003ecc:	40020428 	.word	0x40020428
 8003ed0:	40020440 	.word	0x40020440
 8003ed4:	40020458 	.word	0x40020458
 8003ed8:	40020470 	.word	0x40020470
 8003edc:	40020488 	.word	0x40020488
 8003ee0:	400204a0 	.word	0x400204a0
 8003ee4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 020e 	bic.w	r2, r3, #14
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 020a 	orr.w	r2, r2, #10
 8003efa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0204 	orr.w	r2, r2, #4
 8003f12:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a83      	ldr	r2, [pc, #524]	; (8004128 <HAL_DMA_Start_IT+0x474>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d072      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a82      	ldr	r2, [pc, #520]	; (800412c <HAL_DMA_Start_IT+0x478>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d06d      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a80      	ldr	r2, [pc, #512]	; (8004130 <HAL_DMA_Start_IT+0x47c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d068      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a7f      	ldr	r2, [pc, #508]	; (8004134 <HAL_DMA_Start_IT+0x480>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d063      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a7d      	ldr	r2, [pc, #500]	; (8004138 <HAL_DMA_Start_IT+0x484>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d05e      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a7c      	ldr	r2, [pc, #496]	; (800413c <HAL_DMA_Start_IT+0x488>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d059      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a7a      	ldr	r2, [pc, #488]	; (8004140 <HAL_DMA_Start_IT+0x48c>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d054      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a79      	ldr	r2, [pc, #484]	; (8004144 <HAL_DMA_Start_IT+0x490>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d04f      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a77      	ldr	r2, [pc, #476]	; (8004148 <HAL_DMA_Start_IT+0x494>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d04a      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a76      	ldr	r2, [pc, #472]	; (800414c <HAL_DMA_Start_IT+0x498>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d045      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a74      	ldr	r2, [pc, #464]	; (8004150 <HAL_DMA_Start_IT+0x49c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d040      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a73      	ldr	r2, [pc, #460]	; (8004154 <HAL_DMA_Start_IT+0x4a0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d03b      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a71      	ldr	r2, [pc, #452]	; (8004158 <HAL_DMA_Start_IT+0x4a4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d036      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a70      	ldr	r2, [pc, #448]	; (800415c <HAL_DMA_Start_IT+0x4a8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d031      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a6e      	ldr	r2, [pc, #440]	; (8004160 <HAL_DMA_Start_IT+0x4ac>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d02c      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a6d      	ldr	r2, [pc, #436]	; (8004164 <HAL_DMA_Start_IT+0x4b0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d027      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a6b      	ldr	r2, [pc, #428]	; (8004168 <HAL_DMA_Start_IT+0x4b4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d022      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a6a      	ldr	r2, [pc, #424]	; (800416c <HAL_DMA_Start_IT+0x4b8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d01d      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a68      	ldr	r2, [pc, #416]	; (8004170 <HAL_DMA_Start_IT+0x4bc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d018      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a67      	ldr	r2, [pc, #412]	; (8004174 <HAL_DMA_Start_IT+0x4c0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d013      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a65      	ldr	r2, [pc, #404]	; (8004178 <HAL_DMA_Start_IT+0x4c4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00e      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a64      	ldr	r2, [pc, #400]	; (800417c <HAL_DMA_Start_IT+0x4c8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d009      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a62      	ldr	r2, [pc, #392]	; (8004180 <HAL_DMA_Start_IT+0x4cc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <HAL_DMA_Start_IT+0x350>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a61      	ldr	r2, [pc, #388]	; (8004184 <HAL_DMA_Start_IT+0x4d0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d101      	bne.n	8004008 <HAL_DMA_Start_IT+0x354>
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <HAL_DMA_Start_IT+0x356>
 8004008:	2300      	movs	r3, #0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01a      	beq.n	8004044 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d007      	beq.n	800402c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800402a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004042:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a37      	ldr	r2, [pc, #220]	; (8004128 <HAL_DMA_Start_IT+0x474>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d04a      	beq.n	80040e4 <HAL_DMA_Start_IT+0x430>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a36      	ldr	r2, [pc, #216]	; (800412c <HAL_DMA_Start_IT+0x478>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d045      	beq.n	80040e4 <HAL_DMA_Start_IT+0x430>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a34      	ldr	r2, [pc, #208]	; (8004130 <HAL_DMA_Start_IT+0x47c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d040      	beq.n	80040e4 <HAL_DMA_Start_IT+0x430>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a33      	ldr	r2, [pc, #204]	; (8004134 <HAL_DMA_Start_IT+0x480>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d03b      	beq.n	80040e4 <HAL_DMA_Start_IT+0x430>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a31      	ldr	r2, [pc, #196]	; (8004138 <HAL_DMA_Start_IT+0x484>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d036      	beq.n	80040e4 <HAL_DMA_Start_IT+0x430>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a30      	ldr	r2, [pc, #192]	; (800413c <HAL_DMA_Start_IT+0x488>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d031      	beq.n	80040e4 <HAL_DMA_Start_IT+0x430>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a2e      	ldr	r2, [pc, #184]	; (8004140 <HAL_DMA_Start_IT+0x48c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d02c      	beq.n	80040e4 <HAL_DMA_Start_IT+0x430>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a2d      	ldr	r2, [pc, #180]	; (8004144 <HAL_DMA_Start_IT+0x490>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d027      	beq.n	80040e4 <HAL_DMA_Start_IT+0x430>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a2b      	ldr	r2, [pc, #172]	; (8004148 <HAL_DMA_Start_IT+0x494>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d022      	beq.n	80040e4 <HAL_DMA_Start_IT+0x430>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a2a      	ldr	r2, [pc, #168]	; (800414c <HAL_DMA_Start_IT+0x498>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d01d      	beq.n	80040e4 <HAL_DMA_Start_IT+0x430>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a28      	ldr	r2, [pc, #160]	; (8004150 <HAL_DMA_Start_IT+0x49c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d018      	beq.n	80040e4 <HAL_DMA_Start_IT+0x430>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a27      	ldr	r2, [pc, #156]	; (8004154 <HAL_DMA_Start_IT+0x4a0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d013      	beq.n	80040e4 <HAL_DMA_Start_IT+0x430>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a25      	ldr	r2, [pc, #148]	; (8004158 <HAL_DMA_Start_IT+0x4a4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00e      	beq.n	80040e4 <HAL_DMA_Start_IT+0x430>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a24      	ldr	r2, [pc, #144]	; (800415c <HAL_DMA_Start_IT+0x4a8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d009      	beq.n	80040e4 <HAL_DMA_Start_IT+0x430>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a22      	ldr	r2, [pc, #136]	; (8004160 <HAL_DMA_Start_IT+0x4ac>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <HAL_DMA_Start_IT+0x430>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a21      	ldr	r2, [pc, #132]	; (8004164 <HAL_DMA_Start_IT+0x4b0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d108      	bne.n	80040f6 <HAL_DMA_Start_IT+0x442>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	e012      	b.n	800411c <HAL_DMA_Start_IT+0x468>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	e009      	b.n	800411c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800410e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800411c:	7dfb      	ldrb	r3, [r7, #23]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40020010 	.word	0x40020010
 800412c:	40020028 	.word	0x40020028
 8004130:	40020040 	.word	0x40020040
 8004134:	40020058 	.word	0x40020058
 8004138:	40020070 	.word	0x40020070
 800413c:	40020088 	.word	0x40020088
 8004140:	400200a0 	.word	0x400200a0
 8004144:	400200b8 	.word	0x400200b8
 8004148:	40020410 	.word	0x40020410
 800414c:	40020428 	.word	0x40020428
 8004150:	40020440 	.word	0x40020440
 8004154:	40020458 	.word	0x40020458
 8004158:	40020470 	.word	0x40020470
 800415c:	40020488 	.word	0x40020488
 8004160:	400204a0 	.word	0x400204a0
 8004164:	400204b8 	.word	0x400204b8
 8004168:	58025408 	.word	0x58025408
 800416c:	5802541c 	.word	0x5802541c
 8004170:	58025430 	.word	0x58025430
 8004174:	58025444 	.word	0x58025444
 8004178:	58025458 	.word	0x58025458
 800417c:	5802546c 	.word	0x5802546c
 8004180:	58025480 	.word	0x58025480
 8004184:	58025494 	.word	0x58025494

08004188 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	; 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004194:	4b67      	ldr	r3, [pc, #412]	; (8004334 <HAL_DMA_IRQHandler+0x1ac>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a67      	ldr	r2, [pc, #412]	; (8004338 <HAL_DMA_IRQHandler+0x1b0>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	0a9b      	lsrs	r3, r3, #10
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a5f      	ldr	r2, [pc, #380]	; (800433c <HAL_DMA_IRQHandler+0x1b4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d04a      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a5d      	ldr	r2, [pc, #372]	; (8004340 <HAL_DMA_IRQHandler+0x1b8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d045      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a5c      	ldr	r2, [pc, #368]	; (8004344 <HAL_DMA_IRQHandler+0x1bc>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d040      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a5a      	ldr	r2, [pc, #360]	; (8004348 <HAL_DMA_IRQHandler+0x1c0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d03b      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a59      	ldr	r2, [pc, #356]	; (800434c <HAL_DMA_IRQHandler+0x1c4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d036      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a57      	ldr	r2, [pc, #348]	; (8004350 <HAL_DMA_IRQHandler+0x1c8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d031      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a56      	ldr	r2, [pc, #344]	; (8004354 <HAL_DMA_IRQHandler+0x1cc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d02c      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a54      	ldr	r2, [pc, #336]	; (8004358 <HAL_DMA_IRQHandler+0x1d0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d027      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a53      	ldr	r2, [pc, #332]	; (800435c <HAL_DMA_IRQHandler+0x1d4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d022      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a51      	ldr	r2, [pc, #324]	; (8004360 <HAL_DMA_IRQHandler+0x1d8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01d      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a50      	ldr	r2, [pc, #320]	; (8004364 <HAL_DMA_IRQHandler+0x1dc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d018      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a4e      	ldr	r2, [pc, #312]	; (8004368 <HAL_DMA_IRQHandler+0x1e0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a4d      	ldr	r2, [pc, #308]	; (800436c <HAL_DMA_IRQHandler+0x1e4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00e      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a4b      	ldr	r2, [pc, #300]	; (8004370 <HAL_DMA_IRQHandler+0x1e8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d009      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a4a      	ldr	r2, [pc, #296]	; (8004374 <HAL_DMA_IRQHandler+0x1ec>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d004      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a48      	ldr	r2, [pc, #288]	; (8004378 <HAL_DMA_IRQHandler+0x1f0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <HAL_DMA_IRQHandler+0xd6>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <HAL_DMA_IRQHandler+0xd8>
 800425e:	2300      	movs	r3, #0
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 842b 	beq.w	8004abc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426a:	f003 031f 	and.w	r3, r3, #31
 800426e:	2208      	movs	r2, #8
 8004270:	409a      	lsls	r2, r3
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80a2 	beq.w	80043c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2e      	ldr	r2, [pc, #184]	; (800433c <HAL_DMA_IRQHandler+0x1b4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d04a      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a2d      	ldr	r2, [pc, #180]	; (8004340 <HAL_DMA_IRQHandler+0x1b8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d045      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a2b      	ldr	r2, [pc, #172]	; (8004344 <HAL_DMA_IRQHandler+0x1bc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d040      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a2a      	ldr	r2, [pc, #168]	; (8004348 <HAL_DMA_IRQHandler+0x1c0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d03b      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a28      	ldr	r2, [pc, #160]	; (800434c <HAL_DMA_IRQHandler+0x1c4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d036      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a27      	ldr	r2, [pc, #156]	; (8004350 <HAL_DMA_IRQHandler+0x1c8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d031      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a25      	ldr	r2, [pc, #148]	; (8004354 <HAL_DMA_IRQHandler+0x1cc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d02c      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a24      	ldr	r2, [pc, #144]	; (8004358 <HAL_DMA_IRQHandler+0x1d0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d027      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a22      	ldr	r2, [pc, #136]	; (800435c <HAL_DMA_IRQHandler+0x1d4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d022      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a21      	ldr	r2, [pc, #132]	; (8004360 <HAL_DMA_IRQHandler+0x1d8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d01d      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1f      	ldr	r2, [pc, #124]	; (8004364 <HAL_DMA_IRQHandler+0x1dc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d018      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1e      	ldr	r2, [pc, #120]	; (8004368 <HAL_DMA_IRQHandler+0x1e0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d013      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1c      	ldr	r2, [pc, #112]	; (800436c <HAL_DMA_IRQHandler+0x1e4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00e      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1b      	ldr	r2, [pc, #108]	; (8004370 <HAL_DMA_IRQHandler+0x1e8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d009      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a19      	ldr	r2, [pc, #100]	; (8004374 <HAL_DMA_IRQHandler+0x1ec>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d004      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a18      	ldr	r2, [pc, #96]	; (8004378 <HAL_DMA_IRQHandler+0x1f0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d12f      	bne.n	800437c <HAL_DMA_IRQHandler+0x1f4>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	bf14      	ite	ne
 800432a:	2301      	movne	r3, #1
 800432c:	2300      	moveq	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	e02e      	b.n	8004390 <HAL_DMA_IRQHandler+0x208>
 8004332:	bf00      	nop
 8004334:	24000000 	.word	0x24000000
 8004338:	1b4e81b5 	.word	0x1b4e81b5
 800433c:	40020010 	.word	0x40020010
 8004340:	40020028 	.word	0x40020028
 8004344:	40020040 	.word	0x40020040
 8004348:	40020058 	.word	0x40020058
 800434c:	40020070 	.word	0x40020070
 8004350:	40020088 	.word	0x40020088
 8004354:	400200a0 	.word	0x400200a0
 8004358:	400200b8 	.word	0x400200b8
 800435c:	40020410 	.word	0x40020410
 8004360:	40020428 	.word	0x40020428
 8004364:	40020440 	.word	0x40020440
 8004368:	40020458 	.word	0x40020458
 800436c:	40020470 	.word	0x40020470
 8004370:	40020488 	.word	0x40020488
 8004374:	400204a0 	.word	0x400204a0
 8004378:	400204b8 	.word	0x400204b8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	bf14      	ite	ne
 800438a:	2301      	movne	r3, #1
 800438c:	2300      	moveq	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d015      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0204 	bic.w	r2, r2, #4
 80043a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	2208      	movs	r2, #8
 80043ae:	409a      	lsls	r2, r3
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b8:	f043 0201 	orr.w	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	fa22 f303 	lsr.w	r3, r2, r3
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d06e      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a69      	ldr	r2, [pc, #420]	; (8004580 <HAL_DMA_IRQHandler+0x3f8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d04a      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a67      	ldr	r2, [pc, #412]	; (8004584 <HAL_DMA_IRQHandler+0x3fc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d045      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a66      	ldr	r2, [pc, #408]	; (8004588 <HAL_DMA_IRQHandler+0x400>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d040      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a64      	ldr	r2, [pc, #400]	; (800458c <HAL_DMA_IRQHandler+0x404>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d03b      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a63      	ldr	r2, [pc, #396]	; (8004590 <HAL_DMA_IRQHandler+0x408>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d036      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a61      	ldr	r2, [pc, #388]	; (8004594 <HAL_DMA_IRQHandler+0x40c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d031      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a60      	ldr	r2, [pc, #384]	; (8004598 <HAL_DMA_IRQHandler+0x410>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d02c      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a5e      	ldr	r2, [pc, #376]	; (800459c <HAL_DMA_IRQHandler+0x414>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d027      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a5d      	ldr	r2, [pc, #372]	; (80045a0 <HAL_DMA_IRQHandler+0x418>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d022      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a5b      	ldr	r2, [pc, #364]	; (80045a4 <HAL_DMA_IRQHandler+0x41c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d01d      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a5a      	ldr	r2, [pc, #360]	; (80045a8 <HAL_DMA_IRQHandler+0x420>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d018      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a58      	ldr	r2, [pc, #352]	; (80045ac <HAL_DMA_IRQHandler+0x424>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a57      	ldr	r2, [pc, #348]	; (80045b0 <HAL_DMA_IRQHandler+0x428>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a55      	ldr	r2, [pc, #340]	; (80045b4 <HAL_DMA_IRQHandler+0x42c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a54      	ldr	r2, [pc, #336]	; (80045b8 <HAL_DMA_IRQHandler+0x430>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a52      	ldr	r2, [pc, #328]	; (80045bc <HAL_DMA_IRQHandler+0x434>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10a      	bne.n	800448c <HAL_DMA_IRQHandler+0x304>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf14      	ite	ne
 8004484:	2301      	movne	r3, #1
 8004486:	2300      	moveq	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	e003      	b.n	8004494 <HAL_DMA_IRQHandler+0x30c>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00d      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2201      	movs	r2, #1
 80044a2:	409a      	lsls	r2, r3
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ac:	f043 0202 	orr.w	r2, r3, #2
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	2204      	movs	r2, #4
 80044be:	409a      	lsls	r2, r3
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 808f 	beq.w	80045e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2c      	ldr	r2, [pc, #176]	; (8004580 <HAL_DMA_IRQHandler+0x3f8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d04a      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a2a      	ldr	r2, [pc, #168]	; (8004584 <HAL_DMA_IRQHandler+0x3fc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d045      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a29      	ldr	r2, [pc, #164]	; (8004588 <HAL_DMA_IRQHandler+0x400>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d040      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a27      	ldr	r2, [pc, #156]	; (800458c <HAL_DMA_IRQHandler+0x404>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d03b      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a26      	ldr	r2, [pc, #152]	; (8004590 <HAL_DMA_IRQHandler+0x408>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d036      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a24      	ldr	r2, [pc, #144]	; (8004594 <HAL_DMA_IRQHandler+0x40c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d031      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a23      	ldr	r2, [pc, #140]	; (8004598 <HAL_DMA_IRQHandler+0x410>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d02c      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a21      	ldr	r2, [pc, #132]	; (800459c <HAL_DMA_IRQHandler+0x414>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d027      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a20      	ldr	r2, [pc, #128]	; (80045a0 <HAL_DMA_IRQHandler+0x418>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d022      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1e      	ldr	r2, [pc, #120]	; (80045a4 <HAL_DMA_IRQHandler+0x41c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01d      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1d      	ldr	r2, [pc, #116]	; (80045a8 <HAL_DMA_IRQHandler+0x420>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d018      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1b      	ldr	r2, [pc, #108]	; (80045ac <HAL_DMA_IRQHandler+0x424>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1a      	ldr	r2, [pc, #104]	; (80045b0 <HAL_DMA_IRQHandler+0x428>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00e      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <HAL_DMA_IRQHandler+0x42c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d009      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <HAL_DMA_IRQHandler+0x430>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d004      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a15      	ldr	r2, [pc, #84]	; (80045bc <HAL_DMA_IRQHandler+0x434>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d12a      	bne.n	80045c0 <HAL_DMA_IRQHandler+0x438>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	e023      	b.n	80045c8 <HAL_DMA_IRQHandler+0x440>
 8004580:	40020010 	.word	0x40020010
 8004584:	40020028 	.word	0x40020028
 8004588:	40020040 	.word	0x40020040
 800458c:	40020058 	.word	0x40020058
 8004590:	40020070 	.word	0x40020070
 8004594:	40020088 	.word	0x40020088
 8004598:	400200a0 	.word	0x400200a0
 800459c:	400200b8 	.word	0x400200b8
 80045a0:	40020410 	.word	0x40020410
 80045a4:	40020428 	.word	0x40020428
 80045a8:	40020440 	.word	0x40020440
 80045ac:	40020458 	.word	0x40020458
 80045b0:	40020470 	.word	0x40020470
 80045b4:	40020488 	.word	0x40020488
 80045b8:	400204a0 	.word	0x400204a0
 80045bc:	400204b8 	.word	0x400204b8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2300      	movs	r3, #0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00d      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2204      	movs	r2, #4
 80045d6:	409a      	lsls	r2, r3
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e0:	f043 0204 	orr.w	r2, r3, #4
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	2210      	movs	r2, #16
 80045f2:	409a      	lsls	r2, r3
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80a6 	beq.w	800474a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a85      	ldr	r2, [pc, #532]	; (8004818 <HAL_DMA_IRQHandler+0x690>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d04a      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a83      	ldr	r2, [pc, #524]	; (800481c <HAL_DMA_IRQHandler+0x694>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d045      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a82      	ldr	r2, [pc, #520]	; (8004820 <HAL_DMA_IRQHandler+0x698>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d040      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a80      	ldr	r2, [pc, #512]	; (8004824 <HAL_DMA_IRQHandler+0x69c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d03b      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a7f      	ldr	r2, [pc, #508]	; (8004828 <HAL_DMA_IRQHandler+0x6a0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d036      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a7d      	ldr	r2, [pc, #500]	; (800482c <HAL_DMA_IRQHandler+0x6a4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d031      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a7c      	ldr	r2, [pc, #496]	; (8004830 <HAL_DMA_IRQHandler+0x6a8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d02c      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a7a      	ldr	r2, [pc, #488]	; (8004834 <HAL_DMA_IRQHandler+0x6ac>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d027      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a79      	ldr	r2, [pc, #484]	; (8004838 <HAL_DMA_IRQHandler+0x6b0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d022      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a77      	ldr	r2, [pc, #476]	; (800483c <HAL_DMA_IRQHandler+0x6b4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01d      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a76      	ldr	r2, [pc, #472]	; (8004840 <HAL_DMA_IRQHandler+0x6b8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d018      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a74      	ldr	r2, [pc, #464]	; (8004844 <HAL_DMA_IRQHandler+0x6bc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d013      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a73      	ldr	r2, [pc, #460]	; (8004848 <HAL_DMA_IRQHandler+0x6c0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00e      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a71      	ldr	r2, [pc, #452]	; (800484c <HAL_DMA_IRQHandler+0x6c4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d009      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a70      	ldr	r2, [pc, #448]	; (8004850 <HAL_DMA_IRQHandler+0x6c8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d004      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a6e      	ldr	r2, [pc, #440]	; (8004854 <HAL_DMA_IRQHandler+0x6cc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10a      	bne.n	80046b4 <HAL_DMA_IRQHandler+0x52c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e009      	b.n	80046c8 <HAL_DMA_IRQHandler+0x540>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bf14      	ite	ne
 80046c2:	2301      	movne	r3, #1
 80046c4:	2300      	moveq	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d03e      	beq.n	800474a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	2210      	movs	r2, #16
 80046d6:	409a      	lsls	r2, r3
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d018      	beq.n	800471c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d108      	bne.n	800470a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d024      	beq.n	800474a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	4798      	blx	r3
 8004708:	e01f      	b.n	800474a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01b      	beq.n	800474a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	4798      	blx	r3
 800471a:	e016      	b.n	800474a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d107      	bne.n	800473a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0208 	bic.w	r2, r2, #8
 8004738:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2220      	movs	r2, #32
 8004754:	409a      	lsls	r2, r3
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 8110 	beq.w	8004980 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2c      	ldr	r2, [pc, #176]	; (8004818 <HAL_DMA_IRQHandler+0x690>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d04a      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a2b      	ldr	r2, [pc, #172]	; (800481c <HAL_DMA_IRQHandler+0x694>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d045      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a29      	ldr	r2, [pc, #164]	; (8004820 <HAL_DMA_IRQHandler+0x698>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d040      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a28      	ldr	r2, [pc, #160]	; (8004824 <HAL_DMA_IRQHandler+0x69c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d03b      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a26      	ldr	r2, [pc, #152]	; (8004828 <HAL_DMA_IRQHandler+0x6a0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d036      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a25      	ldr	r2, [pc, #148]	; (800482c <HAL_DMA_IRQHandler+0x6a4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d031      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a23      	ldr	r2, [pc, #140]	; (8004830 <HAL_DMA_IRQHandler+0x6a8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d02c      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a22      	ldr	r2, [pc, #136]	; (8004834 <HAL_DMA_IRQHandler+0x6ac>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d027      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a20      	ldr	r2, [pc, #128]	; (8004838 <HAL_DMA_IRQHandler+0x6b0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d022      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1f      	ldr	r2, [pc, #124]	; (800483c <HAL_DMA_IRQHandler+0x6b4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d01d      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <HAL_DMA_IRQHandler+0x6b8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d018      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1c      	ldr	r2, [pc, #112]	; (8004844 <HAL_DMA_IRQHandler+0x6bc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d013      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1a      	ldr	r2, [pc, #104]	; (8004848 <HAL_DMA_IRQHandler+0x6c0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00e      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a19      	ldr	r2, [pc, #100]	; (800484c <HAL_DMA_IRQHandler+0x6c4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d009      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a17      	ldr	r2, [pc, #92]	; (8004850 <HAL_DMA_IRQHandler+0x6c8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a16      	ldr	r2, [pc, #88]	; (8004854 <HAL_DMA_IRQHandler+0x6cc>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d12b      	bne.n	8004858 <HAL_DMA_IRQHandler+0x6d0>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b00      	cmp	r3, #0
 800480c:	bf14      	ite	ne
 800480e:	2301      	movne	r3, #1
 8004810:	2300      	moveq	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	e02a      	b.n	800486c <HAL_DMA_IRQHandler+0x6e4>
 8004816:	bf00      	nop
 8004818:	40020010 	.word	0x40020010
 800481c:	40020028 	.word	0x40020028
 8004820:	40020040 	.word	0x40020040
 8004824:	40020058 	.word	0x40020058
 8004828:	40020070 	.word	0x40020070
 800482c:	40020088 	.word	0x40020088
 8004830:	400200a0 	.word	0x400200a0
 8004834:	400200b8 	.word	0x400200b8
 8004838:	40020410 	.word	0x40020410
 800483c:	40020428 	.word	0x40020428
 8004840:	40020440 	.word	0x40020440
 8004844:	40020458 	.word	0x40020458
 8004848:	40020470 	.word	0x40020470
 800484c:	40020488 	.word	0x40020488
 8004850:	400204a0 	.word	0x400204a0
 8004854:	400204b8 	.word	0x400204b8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8087 	beq.w	8004980 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	2220      	movs	r2, #32
 800487c:	409a      	lsls	r2, r3
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b04      	cmp	r3, #4
 800488c:	d139      	bne.n	8004902 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0216 	bic.w	r2, r2, #22
 800489c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d103      	bne.n	80048be <HAL_DMA_IRQHandler+0x736>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0208 	bic.w	r2, r2, #8
 80048cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d2:	f003 031f 	and.w	r3, r3, #31
 80048d6:	223f      	movs	r2, #63	; 0x3f
 80048d8:	409a      	lsls	r2, r3
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 8382 	beq.w	8004ffc <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
          }
          return;
 8004900:	e37c      	b.n	8004ffc <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d018      	beq.n	8004942 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d108      	bne.n	8004930 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004922:	2b00      	cmp	r3, #0
 8004924:	d02c      	beq.n	8004980 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4798      	blx	r3
 800492e:	e027      	b.n	8004980 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d023      	beq.n	8004980 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
 8004940:	e01e      	b.n	8004980 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10f      	bne.n	8004970 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0210 	bic.w	r2, r2, #16
 800495e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 833e 	beq.w	8005006 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 8088 	beq.w	8004aa8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2204      	movs	r2, #4
 800499c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a89      	ldr	r2, [pc, #548]	; (8004bcc <HAL_DMA_IRQHandler+0xa44>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d04a      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a88      	ldr	r2, [pc, #544]	; (8004bd0 <HAL_DMA_IRQHandler+0xa48>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d045      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a86      	ldr	r2, [pc, #536]	; (8004bd4 <HAL_DMA_IRQHandler+0xa4c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d040      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a85      	ldr	r2, [pc, #532]	; (8004bd8 <HAL_DMA_IRQHandler+0xa50>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d03b      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a83      	ldr	r2, [pc, #524]	; (8004bdc <HAL_DMA_IRQHandler+0xa54>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d036      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a82      	ldr	r2, [pc, #520]	; (8004be0 <HAL_DMA_IRQHandler+0xa58>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d031      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a80      	ldr	r2, [pc, #512]	; (8004be4 <HAL_DMA_IRQHandler+0xa5c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d02c      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a7f      	ldr	r2, [pc, #508]	; (8004be8 <HAL_DMA_IRQHandler+0xa60>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d027      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a7d      	ldr	r2, [pc, #500]	; (8004bec <HAL_DMA_IRQHandler+0xa64>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d022      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a7c      	ldr	r2, [pc, #496]	; (8004bf0 <HAL_DMA_IRQHandler+0xa68>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d01d      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a7a      	ldr	r2, [pc, #488]	; (8004bf4 <HAL_DMA_IRQHandler+0xa6c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d018      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a79      	ldr	r2, [pc, #484]	; (8004bf8 <HAL_DMA_IRQHandler+0xa70>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a77      	ldr	r2, [pc, #476]	; (8004bfc <HAL_DMA_IRQHandler+0xa74>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00e      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a76      	ldr	r2, [pc, #472]	; (8004c00 <HAL_DMA_IRQHandler+0xa78>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a74      	ldr	r2, [pc, #464]	; (8004c04 <HAL_DMA_IRQHandler+0xa7c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a73      	ldr	r2, [pc, #460]	; (8004c08 <HAL_DMA_IRQHandler+0xa80>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d108      	bne.n	8004a52 <HAL_DMA_IRQHandler+0x8ca>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e007      	b.n	8004a62 <HAL_DMA_IRQHandler+0x8da>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3301      	adds	r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d307      	bcc.n	8004a7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f2      	bne.n	8004a62 <HAL_DMA_IRQHandler+0x8da>
 8004a7c:	e000      	b.n	8004a80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004a7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d004      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2203      	movs	r2, #3
 8004a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004a96:	e003      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 82aa 	beq.w	8005006 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	4798      	blx	r3
 8004aba:	e2a4      	b.n	8005006 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a52      	ldr	r2, [pc, #328]	; (8004c0c <HAL_DMA_IRQHandler+0xa84>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d04a      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x9d4>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a51      	ldr	r2, [pc, #324]	; (8004c10 <HAL_DMA_IRQHandler+0xa88>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d045      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x9d4>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a4f      	ldr	r2, [pc, #316]	; (8004c14 <HAL_DMA_IRQHandler+0xa8c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d040      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x9d4>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a4e      	ldr	r2, [pc, #312]	; (8004c18 <HAL_DMA_IRQHandler+0xa90>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d03b      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x9d4>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a4c      	ldr	r2, [pc, #304]	; (8004c1c <HAL_DMA_IRQHandler+0xa94>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d036      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x9d4>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a4b      	ldr	r2, [pc, #300]	; (8004c20 <HAL_DMA_IRQHandler+0xa98>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d031      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x9d4>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a49      	ldr	r2, [pc, #292]	; (8004c24 <HAL_DMA_IRQHandler+0xa9c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d02c      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x9d4>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a48      	ldr	r2, [pc, #288]	; (8004c28 <HAL_DMA_IRQHandler+0xaa0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d027      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x9d4>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a46      	ldr	r2, [pc, #280]	; (8004c2c <HAL_DMA_IRQHandler+0xaa4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d022      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x9d4>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a45      	ldr	r2, [pc, #276]	; (8004c30 <HAL_DMA_IRQHandler+0xaa8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d01d      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x9d4>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a43      	ldr	r2, [pc, #268]	; (8004c34 <HAL_DMA_IRQHandler+0xaac>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d018      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x9d4>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a42      	ldr	r2, [pc, #264]	; (8004c38 <HAL_DMA_IRQHandler+0xab0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d013      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x9d4>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a40      	ldr	r2, [pc, #256]	; (8004c3c <HAL_DMA_IRQHandler+0xab4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00e      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x9d4>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a3f      	ldr	r2, [pc, #252]	; (8004c40 <HAL_DMA_IRQHandler+0xab8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d009      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x9d4>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a3d      	ldr	r2, [pc, #244]	; (8004c44 <HAL_DMA_IRQHandler+0xabc>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d004      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x9d4>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a3c      	ldr	r2, [pc, #240]	; (8004c48 <HAL_DMA_IRQHandler+0xac0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d101      	bne.n	8004b60 <HAL_DMA_IRQHandler+0x9d8>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <HAL_DMA_IRQHandler+0x9da>
 8004b60:	2300      	movs	r3, #0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 824f 	beq.w	8005006 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	2204      	movs	r2, #4
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 80dd 	beq.w	8004d40 <HAL_DMA_IRQHandler+0xbb8>
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80d7 	beq.w	8004d40 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b96:	f003 031f 	and.w	r3, r3, #31
 8004b9a:	2204      	movs	r2, #4
 8004b9c:	409a      	lsls	r2, r3
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d059      	beq.n	8004c60 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d14a      	bne.n	8004c4c <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 8220 	beq.w	8005000 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bc8:	e21a      	b.n	8005000 <HAL_DMA_IRQHandler+0xe78>
 8004bca:	bf00      	nop
 8004bcc:	40020010 	.word	0x40020010
 8004bd0:	40020028 	.word	0x40020028
 8004bd4:	40020040 	.word	0x40020040
 8004bd8:	40020058 	.word	0x40020058
 8004bdc:	40020070 	.word	0x40020070
 8004be0:	40020088 	.word	0x40020088
 8004be4:	400200a0 	.word	0x400200a0
 8004be8:	400200b8 	.word	0x400200b8
 8004bec:	40020410 	.word	0x40020410
 8004bf0:	40020428 	.word	0x40020428
 8004bf4:	40020440 	.word	0x40020440
 8004bf8:	40020458 	.word	0x40020458
 8004bfc:	40020470 	.word	0x40020470
 8004c00:	40020488 	.word	0x40020488
 8004c04:	400204a0 	.word	0x400204a0
 8004c08:	400204b8 	.word	0x400204b8
 8004c0c:	48022c08 	.word	0x48022c08
 8004c10:	48022c1c 	.word	0x48022c1c
 8004c14:	48022c30 	.word	0x48022c30
 8004c18:	48022c44 	.word	0x48022c44
 8004c1c:	48022c58 	.word	0x48022c58
 8004c20:	48022c6c 	.word	0x48022c6c
 8004c24:	48022c80 	.word	0x48022c80
 8004c28:	48022c94 	.word	0x48022c94
 8004c2c:	58025408 	.word	0x58025408
 8004c30:	5802541c 	.word	0x5802541c
 8004c34:	58025430 	.word	0x58025430
 8004c38:	58025444 	.word	0x58025444
 8004c3c:	58025458 	.word	0x58025458
 8004c40:	5802546c 	.word	0x5802546c
 8004c44:	58025480 	.word	0x58025480
 8004c48:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 81d5 	beq.w	8005000 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c5e:	e1cf      	b.n	8005000 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d160      	bne.n	8004d2c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a7f      	ldr	r2, [pc, #508]	; (8004e6c <HAL_DMA_IRQHandler+0xce4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d04a      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xb82>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a7d      	ldr	r2, [pc, #500]	; (8004e70 <HAL_DMA_IRQHandler+0xce8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d045      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xb82>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a7c      	ldr	r2, [pc, #496]	; (8004e74 <HAL_DMA_IRQHandler+0xcec>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d040      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xb82>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a7a      	ldr	r2, [pc, #488]	; (8004e78 <HAL_DMA_IRQHandler+0xcf0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d03b      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xb82>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a79      	ldr	r2, [pc, #484]	; (8004e7c <HAL_DMA_IRQHandler+0xcf4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d036      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xb82>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a77      	ldr	r2, [pc, #476]	; (8004e80 <HAL_DMA_IRQHandler+0xcf8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d031      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xb82>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a76      	ldr	r2, [pc, #472]	; (8004e84 <HAL_DMA_IRQHandler+0xcfc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d02c      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xb82>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a74      	ldr	r2, [pc, #464]	; (8004e88 <HAL_DMA_IRQHandler+0xd00>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d027      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xb82>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a73      	ldr	r2, [pc, #460]	; (8004e8c <HAL_DMA_IRQHandler+0xd04>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d022      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xb82>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a71      	ldr	r2, [pc, #452]	; (8004e90 <HAL_DMA_IRQHandler+0xd08>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d01d      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xb82>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a70      	ldr	r2, [pc, #448]	; (8004e94 <HAL_DMA_IRQHandler+0xd0c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d018      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xb82>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a6e      	ldr	r2, [pc, #440]	; (8004e98 <HAL_DMA_IRQHandler+0xd10>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xb82>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a6d      	ldr	r2, [pc, #436]	; (8004e9c <HAL_DMA_IRQHandler+0xd14>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00e      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xb82>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a6b      	ldr	r2, [pc, #428]	; (8004ea0 <HAL_DMA_IRQHandler+0xd18>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d009      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xb82>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a6a      	ldr	r2, [pc, #424]	; (8004ea4 <HAL_DMA_IRQHandler+0xd1c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d004      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xb82>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a68      	ldr	r2, [pc, #416]	; (8004ea8 <HAL_DMA_IRQHandler+0xd20>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d108      	bne.n	8004d1c <HAL_DMA_IRQHandler+0xb94>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0208 	bic.w	r2, r2, #8
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	e007      	b.n	8004d2c <HAL_DMA_IRQHandler+0xba4>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0204 	bic.w	r2, r2, #4
 8004d2a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8165 	beq.w	8005000 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d3e:	e15f      	b.n	8005000 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	2202      	movs	r2, #2
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 80c5 	beq.w	8004ee0 <HAL_DMA_IRQHandler+0xd58>
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80bf 	beq.w	8004ee0 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d66:	f003 031f 	and.w	r3, r3, #31
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	409a      	lsls	r2, r3
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d018      	beq.n	8004dae <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 813a 	beq.w	8005004 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d98:	e134      	b.n	8005004 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 8130 	beq.w	8005004 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dac:	e12a      	b.n	8005004 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f040 8089 	bne.w	8004ecc <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a2b      	ldr	r2, [pc, #172]	; (8004e6c <HAL_DMA_IRQHandler+0xce4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d04a      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xcd2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a29      	ldr	r2, [pc, #164]	; (8004e70 <HAL_DMA_IRQHandler+0xce8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d045      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xcd2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a28      	ldr	r2, [pc, #160]	; (8004e74 <HAL_DMA_IRQHandler+0xcec>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d040      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xcd2>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a26      	ldr	r2, [pc, #152]	; (8004e78 <HAL_DMA_IRQHandler+0xcf0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d03b      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xcd2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a25      	ldr	r2, [pc, #148]	; (8004e7c <HAL_DMA_IRQHandler+0xcf4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d036      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xcd2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a23      	ldr	r2, [pc, #140]	; (8004e80 <HAL_DMA_IRQHandler+0xcf8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d031      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xcd2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <HAL_DMA_IRQHandler+0xcfc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d02c      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xcd2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a20      	ldr	r2, [pc, #128]	; (8004e88 <HAL_DMA_IRQHandler+0xd00>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d027      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xcd2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a1f      	ldr	r2, [pc, #124]	; (8004e8c <HAL_DMA_IRQHandler+0xd04>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d022      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xcd2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1d      	ldr	r2, [pc, #116]	; (8004e90 <HAL_DMA_IRQHandler+0xd08>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01d      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xcd2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a1c      	ldr	r2, [pc, #112]	; (8004e94 <HAL_DMA_IRQHandler+0xd0c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d018      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xcd2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a1a      	ldr	r2, [pc, #104]	; (8004e98 <HAL_DMA_IRQHandler+0xd10>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d013      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xcd2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a19      	ldr	r2, [pc, #100]	; (8004e9c <HAL_DMA_IRQHandler+0xd14>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00e      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xcd2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a17      	ldr	r2, [pc, #92]	; (8004ea0 <HAL_DMA_IRQHandler+0xd18>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d009      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xcd2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a16      	ldr	r2, [pc, #88]	; (8004ea4 <HAL_DMA_IRQHandler+0xd1c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d004      	beq.n	8004e5a <HAL_DMA_IRQHandler+0xcd2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a14      	ldr	r2, [pc, #80]	; (8004ea8 <HAL_DMA_IRQHandler+0xd20>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d128      	bne.n	8004eac <HAL_DMA_IRQHandler+0xd24>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0214 	bic.w	r2, r2, #20
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	e027      	b.n	8004ebc <HAL_DMA_IRQHandler+0xd34>
 8004e6c:	40020010 	.word	0x40020010
 8004e70:	40020028 	.word	0x40020028
 8004e74:	40020040 	.word	0x40020040
 8004e78:	40020058 	.word	0x40020058
 8004e7c:	40020070 	.word	0x40020070
 8004e80:	40020088 	.word	0x40020088
 8004e84:	400200a0 	.word	0x400200a0
 8004e88:	400200b8 	.word	0x400200b8
 8004e8c:	40020410 	.word	0x40020410
 8004e90:	40020428 	.word	0x40020428
 8004e94:	40020440 	.word	0x40020440
 8004e98:	40020458 	.word	0x40020458
 8004e9c:	40020470 	.word	0x40020470
 8004ea0:	40020488 	.word	0x40020488
 8004ea4:	400204a0 	.word	0x400204a0
 8004ea8:	400204b8 	.word	0x400204b8
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 020a 	bic.w	r2, r2, #10
 8004eba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8097 	beq.w	8005004 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ede:	e091      	b.n	8005004 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee4:	f003 031f 	and.w	r3, r3, #31
 8004ee8:	2208      	movs	r2, #8
 8004eea:	409a      	lsls	r2, r3
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 8088 	beq.w	8005006 <HAL_DMA_IRQHandler+0xe7e>
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 8082 	beq.w	8005006 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a41      	ldr	r2, [pc, #260]	; (800500c <HAL_DMA_IRQHandler+0xe84>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d04a      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xe1a>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a3f      	ldr	r2, [pc, #252]	; (8005010 <HAL_DMA_IRQHandler+0xe88>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d045      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xe1a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a3e      	ldr	r2, [pc, #248]	; (8005014 <HAL_DMA_IRQHandler+0xe8c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d040      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xe1a>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a3c      	ldr	r2, [pc, #240]	; (8005018 <HAL_DMA_IRQHandler+0xe90>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d03b      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xe1a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a3b      	ldr	r2, [pc, #236]	; (800501c <HAL_DMA_IRQHandler+0xe94>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d036      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xe1a>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a39      	ldr	r2, [pc, #228]	; (8005020 <HAL_DMA_IRQHandler+0xe98>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d031      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xe1a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a38      	ldr	r2, [pc, #224]	; (8005024 <HAL_DMA_IRQHandler+0xe9c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d02c      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xe1a>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a36      	ldr	r2, [pc, #216]	; (8005028 <HAL_DMA_IRQHandler+0xea0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d027      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xe1a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a35      	ldr	r2, [pc, #212]	; (800502c <HAL_DMA_IRQHandler+0xea4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d022      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xe1a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a33      	ldr	r2, [pc, #204]	; (8005030 <HAL_DMA_IRQHandler+0xea8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d01d      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xe1a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a32      	ldr	r2, [pc, #200]	; (8005034 <HAL_DMA_IRQHandler+0xeac>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d018      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xe1a>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a30      	ldr	r2, [pc, #192]	; (8005038 <HAL_DMA_IRQHandler+0xeb0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xe1a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a2f      	ldr	r2, [pc, #188]	; (800503c <HAL_DMA_IRQHandler+0xeb4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00e      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xe1a>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a2d      	ldr	r2, [pc, #180]	; (8005040 <HAL_DMA_IRQHandler+0xeb8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d009      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xe1a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a2c      	ldr	r2, [pc, #176]	; (8005044 <HAL_DMA_IRQHandler+0xebc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d004      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0xe1a>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a2a      	ldr	r2, [pc, #168]	; (8005048 <HAL_DMA_IRQHandler+0xec0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d108      	bne.n	8004fb4 <HAL_DMA_IRQHandler+0xe2c>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 021c 	bic.w	r2, r2, #28
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	e007      	b.n	8004fc4 <HAL_DMA_IRQHandler+0xe3c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 020e 	bic.w	r2, r2, #14
 8004fc2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc8:	f003 031f 	and.w	r3, r3, #31
 8004fcc:	2201      	movs	r2, #1
 8004fce:	409a      	lsls	r2, r3
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d009      	beq.n	8005006 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	4798      	blx	r3
 8004ffa:	e004      	b.n	8005006 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004ffc:	bf00      	nop
 8004ffe:	e002      	b.n	8005006 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005000:	bf00      	nop
 8005002:	e000      	b.n	8005006 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005004:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005006:	3728      	adds	r7, #40	; 0x28
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40020010 	.word	0x40020010
 8005010:	40020028 	.word	0x40020028
 8005014:	40020040 	.word	0x40020040
 8005018:	40020058 	.word	0x40020058
 800501c:	40020070 	.word	0x40020070
 8005020:	40020088 	.word	0x40020088
 8005024:	400200a0 	.word	0x400200a0
 8005028:	400200b8 	.word	0x400200b8
 800502c:	40020410 	.word	0x40020410
 8005030:	40020428 	.word	0x40020428
 8005034:	40020440 	.word	0x40020440
 8005038:	40020458 	.word	0x40020458
 800503c:	40020470 	.word	0x40020470
 8005040:	40020488 	.word	0x40020488
 8005044:	400204a0 	.word	0x400204a0
 8005048:	400204b8 	.word	0x400204b8

0800504c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005064:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a7f      	ldr	r2, [pc, #508]	; (8005268 <DMA_SetConfig+0x21c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d072      	beq.n	8005156 <DMA_SetConfig+0x10a>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a7d      	ldr	r2, [pc, #500]	; (800526c <DMA_SetConfig+0x220>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d06d      	beq.n	8005156 <DMA_SetConfig+0x10a>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a7c      	ldr	r2, [pc, #496]	; (8005270 <DMA_SetConfig+0x224>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d068      	beq.n	8005156 <DMA_SetConfig+0x10a>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a7a      	ldr	r2, [pc, #488]	; (8005274 <DMA_SetConfig+0x228>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d063      	beq.n	8005156 <DMA_SetConfig+0x10a>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a79      	ldr	r2, [pc, #484]	; (8005278 <DMA_SetConfig+0x22c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d05e      	beq.n	8005156 <DMA_SetConfig+0x10a>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a77      	ldr	r2, [pc, #476]	; (800527c <DMA_SetConfig+0x230>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d059      	beq.n	8005156 <DMA_SetConfig+0x10a>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a76      	ldr	r2, [pc, #472]	; (8005280 <DMA_SetConfig+0x234>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d054      	beq.n	8005156 <DMA_SetConfig+0x10a>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a74      	ldr	r2, [pc, #464]	; (8005284 <DMA_SetConfig+0x238>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d04f      	beq.n	8005156 <DMA_SetConfig+0x10a>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a73      	ldr	r2, [pc, #460]	; (8005288 <DMA_SetConfig+0x23c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d04a      	beq.n	8005156 <DMA_SetConfig+0x10a>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a71      	ldr	r2, [pc, #452]	; (800528c <DMA_SetConfig+0x240>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d045      	beq.n	8005156 <DMA_SetConfig+0x10a>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a70      	ldr	r2, [pc, #448]	; (8005290 <DMA_SetConfig+0x244>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d040      	beq.n	8005156 <DMA_SetConfig+0x10a>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a6e      	ldr	r2, [pc, #440]	; (8005294 <DMA_SetConfig+0x248>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d03b      	beq.n	8005156 <DMA_SetConfig+0x10a>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a6d      	ldr	r2, [pc, #436]	; (8005298 <DMA_SetConfig+0x24c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d036      	beq.n	8005156 <DMA_SetConfig+0x10a>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a6b      	ldr	r2, [pc, #428]	; (800529c <DMA_SetConfig+0x250>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d031      	beq.n	8005156 <DMA_SetConfig+0x10a>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a6a      	ldr	r2, [pc, #424]	; (80052a0 <DMA_SetConfig+0x254>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d02c      	beq.n	8005156 <DMA_SetConfig+0x10a>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a68      	ldr	r2, [pc, #416]	; (80052a4 <DMA_SetConfig+0x258>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d027      	beq.n	8005156 <DMA_SetConfig+0x10a>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a67      	ldr	r2, [pc, #412]	; (80052a8 <DMA_SetConfig+0x25c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d022      	beq.n	8005156 <DMA_SetConfig+0x10a>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a65      	ldr	r2, [pc, #404]	; (80052ac <DMA_SetConfig+0x260>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d01d      	beq.n	8005156 <DMA_SetConfig+0x10a>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a64      	ldr	r2, [pc, #400]	; (80052b0 <DMA_SetConfig+0x264>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d018      	beq.n	8005156 <DMA_SetConfig+0x10a>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a62      	ldr	r2, [pc, #392]	; (80052b4 <DMA_SetConfig+0x268>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <DMA_SetConfig+0x10a>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a61      	ldr	r2, [pc, #388]	; (80052b8 <DMA_SetConfig+0x26c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00e      	beq.n	8005156 <DMA_SetConfig+0x10a>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a5f      	ldr	r2, [pc, #380]	; (80052bc <DMA_SetConfig+0x270>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d009      	beq.n	8005156 <DMA_SetConfig+0x10a>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a5e      	ldr	r2, [pc, #376]	; (80052c0 <DMA_SetConfig+0x274>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d004      	beq.n	8005156 <DMA_SetConfig+0x10a>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a5c      	ldr	r2, [pc, #368]	; (80052c4 <DMA_SetConfig+0x278>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d101      	bne.n	800515a <DMA_SetConfig+0x10e>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <DMA_SetConfig+0x110>
 800515a:	2300      	movs	r3, #0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00d      	beq.n	800517c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005168:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d004      	beq.n	800517c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800517a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a39      	ldr	r2, [pc, #228]	; (8005268 <DMA_SetConfig+0x21c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d04a      	beq.n	800521c <DMA_SetConfig+0x1d0>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a38      	ldr	r2, [pc, #224]	; (800526c <DMA_SetConfig+0x220>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d045      	beq.n	800521c <DMA_SetConfig+0x1d0>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a36      	ldr	r2, [pc, #216]	; (8005270 <DMA_SetConfig+0x224>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d040      	beq.n	800521c <DMA_SetConfig+0x1d0>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a35      	ldr	r2, [pc, #212]	; (8005274 <DMA_SetConfig+0x228>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d03b      	beq.n	800521c <DMA_SetConfig+0x1d0>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a33      	ldr	r2, [pc, #204]	; (8005278 <DMA_SetConfig+0x22c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d036      	beq.n	800521c <DMA_SetConfig+0x1d0>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a32      	ldr	r2, [pc, #200]	; (800527c <DMA_SetConfig+0x230>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d031      	beq.n	800521c <DMA_SetConfig+0x1d0>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a30      	ldr	r2, [pc, #192]	; (8005280 <DMA_SetConfig+0x234>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d02c      	beq.n	800521c <DMA_SetConfig+0x1d0>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a2f      	ldr	r2, [pc, #188]	; (8005284 <DMA_SetConfig+0x238>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d027      	beq.n	800521c <DMA_SetConfig+0x1d0>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a2d      	ldr	r2, [pc, #180]	; (8005288 <DMA_SetConfig+0x23c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d022      	beq.n	800521c <DMA_SetConfig+0x1d0>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a2c      	ldr	r2, [pc, #176]	; (800528c <DMA_SetConfig+0x240>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d01d      	beq.n	800521c <DMA_SetConfig+0x1d0>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a2a      	ldr	r2, [pc, #168]	; (8005290 <DMA_SetConfig+0x244>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d018      	beq.n	800521c <DMA_SetConfig+0x1d0>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a29      	ldr	r2, [pc, #164]	; (8005294 <DMA_SetConfig+0x248>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <DMA_SetConfig+0x1d0>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a27      	ldr	r2, [pc, #156]	; (8005298 <DMA_SetConfig+0x24c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00e      	beq.n	800521c <DMA_SetConfig+0x1d0>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a26      	ldr	r2, [pc, #152]	; (800529c <DMA_SetConfig+0x250>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d009      	beq.n	800521c <DMA_SetConfig+0x1d0>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a24      	ldr	r2, [pc, #144]	; (80052a0 <DMA_SetConfig+0x254>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <DMA_SetConfig+0x1d0>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a23      	ldr	r2, [pc, #140]	; (80052a4 <DMA_SetConfig+0x258>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d101      	bne.n	8005220 <DMA_SetConfig+0x1d4>
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <DMA_SetConfig+0x1d6>
 8005220:	2300      	movs	r3, #0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d059      	beq.n	80052da <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522a:	f003 031f 	and.w	r3, r3, #31
 800522e:	223f      	movs	r2, #63	; 0x3f
 8005230:	409a      	lsls	r2, r3
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005244:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b40      	cmp	r3, #64	; 0x40
 8005254:	d138      	bne.n	80052c8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005266:	e0ae      	b.n	80053c6 <DMA_SetConfig+0x37a>
 8005268:	40020010 	.word	0x40020010
 800526c:	40020028 	.word	0x40020028
 8005270:	40020040 	.word	0x40020040
 8005274:	40020058 	.word	0x40020058
 8005278:	40020070 	.word	0x40020070
 800527c:	40020088 	.word	0x40020088
 8005280:	400200a0 	.word	0x400200a0
 8005284:	400200b8 	.word	0x400200b8
 8005288:	40020410 	.word	0x40020410
 800528c:	40020428 	.word	0x40020428
 8005290:	40020440 	.word	0x40020440
 8005294:	40020458 	.word	0x40020458
 8005298:	40020470 	.word	0x40020470
 800529c:	40020488 	.word	0x40020488
 80052a0:	400204a0 	.word	0x400204a0
 80052a4:	400204b8 	.word	0x400204b8
 80052a8:	58025408 	.word	0x58025408
 80052ac:	5802541c 	.word	0x5802541c
 80052b0:	58025430 	.word	0x58025430
 80052b4:	58025444 	.word	0x58025444
 80052b8:	58025458 	.word	0x58025458
 80052bc:	5802546c 	.word	0x5802546c
 80052c0:	58025480 	.word	0x58025480
 80052c4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	60da      	str	r2, [r3, #12]
}
 80052d8:	e075      	b.n	80053c6 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a3d      	ldr	r2, [pc, #244]	; (80053d4 <DMA_SetConfig+0x388>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d04a      	beq.n	800537a <DMA_SetConfig+0x32e>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a3b      	ldr	r2, [pc, #236]	; (80053d8 <DMA_SetConfig+0x38c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d045      	beq.n	800537a <DMA_SetConfig+0x32e>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a3a      	ldr	r2, [pc, #232]	; (80053dc <DMA_SetConfig+0x390>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d040      	beq.n	800537a <DMA_SetConfig+0x32e>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a38      	ldr	r2, [pc, #224]	; (80053e0 <DMA_SetConfig+0x394>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d03b      	beq.n	800537a <DMA_SetConfig+0x32e>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a37      	ldr	r2, [pc, #220]	; (80053e4 <DMA_SetConfig+0x398>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d036      	beq.n	800537a <DMA_SetConfig+0x32e>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a35      	ldr	r2, [pc, #212]	; (80053e8 <DMA_SetConfig+0x39c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d031      	beq.n	800537a <DMA_SetConfig+0x32e>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a34      	ldr	r2, [pc, #208]	; (80053ec <DMA_SetConfig+0x3a0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d02c      	beq.n	800537a <DMA_SetConfig+0x32e>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a32      	ldr	r2, [pc, #200]	; (80053f0 <DMA_SetConfig+0x3a4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d027      	beq.n	800537a <DMA_SetConfig+0x32e>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a31      	ldr	r2, [pc, #196]	; (80053f4 <DMA_SetConfig+0x3a8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d022      	beq.n	800537a <DMA_SetConfig+0x32e>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2f      	ldr	r2, [pc, #188]	; (80053f8 <DMA_SetConfig+0x3ac>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d01d      	beq.n	800537a <DMA_SetConfig+0x32e>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a2e      	ldr	r2, [pc, #184]	; (80053fc <DMA_SetConfig+0x3b0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d018      	beq.n	800537a <DMA_SetConfig+0x32e>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a2c      	ldr	r2, [pc, #176]	; (8005400 <DMA_SetConfig+0x3b4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d013      	beq.n	800537a <DMA_SetConfig+0x32e>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a2b      	ldr	r2, [pc, #172]	; (8005404 <DMA_SetConfig+0x3b8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00e      	beq.n	800537a <DMA_SetConfig+0x32e>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a29      	ldr	r2, [pc, #164]	; (8005408 <DMA_SetConfig+0x3bc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d009      	beq.n	800537a <DMA_SetConfig+0x32e>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a28      	ldr	r2, [pc, #160]	; (800540c <DMA_SetConfig+0x3c0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d004      	beq.n	800537a <DMA_SetConfig+0x32e>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a26      	ldr	r2, [pc, #152]	; (8005410 <DMA_SetConfig+0x3c4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d101      	bne.n	800537e <DMA_SetConfig+0x332>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <DMA_SetConfig+0x334>
 800537e:	2300      	movs	r3, #0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d020      	beq.n	80053c6 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005388:	f003 031f 	and.w	r3, r3, #31
 800538c:	2201      	movs	r2, #1
 800538e:	409a      	lsls	r2, r3
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d108      	bne.n	80053b6 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	60da      	str	r2, [r3, #12]
}
 80053b4:	e007      	b.n	80053c6 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	60da      	str	r2, [r3, #12]
}
 80053c6:	bf00      	nop
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	48022c08 	.word	0x48022c08
 80053d8:	48022c1c 	.word	0x48022c1c
 80053dc:	48022c30 	.word	0x48022c30
 80053e0:	48022c44 	.word	0x48022c44
 80053e4:	48022c58 	.word	0x48022c58
 80053e8:	48022c6c 	.word	0x48022c6c
 80053ec:	48022c80 	.word	0x48022c80
 80053f0:	48022c94 	.word	0x48022c94
 80053f4:	58025408 	.word	0x58025408
 80053f8:	5802541c 	.word	0x5802541c
 80053fc:	58025430 	.word	0x58025430
 8005400:	58025444 	.word	0x58025444
 8005404:	58025458 	.word	0x58025458
 8005408:	5802546c 	.word	0x5802546c
 800540c:	58025480 	.word	0x58025480
 8005410:	58025494 	.word	0x58025494

08005414 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a42      	ldr	r2, [pc, #264]	; (800552c <DMA_CalcBaseAndBitshift+0x118>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d04a      	beq.n	80054bc <DMA_CalcBaseAndBitshift+0xa8>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a41      	ldr	r2, [pc, #260]	; (8005530 <DMA_CalcBaseAndBitshift+0x11c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d045      	beq.n	80054bc <DMA_CalcBaseAndBitshift+0xa8>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a3f      	ldr	r2, [pc, #252]	; (8005534 <DMA_CalcBaseAndBitshift+0x120>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d040      	beq.n	80054bc <DMA_CalcBaseAndBitshift+0xa8>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a3e      	ldr	r2, [pc, #248]	; (8005538 <DMA_CalcBaseAndBitshift+0x124>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d03b      	beq.n	80054bc <DMA_CalcBaseAndBitshift+0xa8>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a3c      	ldr	r2, [pc, #240]	; (800553c <DMA_CalcBaseAndBitshift+0x128>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d036      	beq.n	80054bc <DMA_CalcBaseAndBitshift+0xa8>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a3b      	ldr	r2, [pc, #236]	; (8005540 <DMA_CalcBaseAndBitshift+0x12c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d031      	beq.n	80054bc <DMA_CalcBaseAndBitshift+0xa8>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a39      	ldr	r2, [pc, #228]	; (8005544 <DMA_CalcBaseAndBitshift+0x130>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d02c      	beq.n	80054bc <DMA_CalcBaseAndBitshift+0xa8>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a38      	ldr	r2, [pc, #224]	; (8005548 <DMA_CalcBaseAndBitshift+0x134>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d027      	beq.n	80054bc <DMA_CalcBaseAndBitshift+0xa8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a36      	ldr	r2, [pc, #216]	; (800554c <DMA_CalcBaseAndBitshift+0x138>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d022      	beq.n	80054bc <DMA_CalcBaseAndBitshift+0xa8>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a35      	ldr	r2, [pc, #212]	; (8005550 <DMA_CalcBaseAndBitshift+0x13c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d01d      	beq.n	80054bc <DMA_CalcBaseAndBitshift+0xa8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a33      	ldr	r2, [pc, #204]	; (8005554 <DMA_CalcBaseAndBitshift+0x140>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d018      	beq.n	80054bc <DMA_CalcBaseAndBitshift+0xa8>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a32      	ldr	r2, [pc, #200]	; (8005558 <DMA_CalcBaseAndBitshift+0x144>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d013      	beq.n	80054bc <DMA_CalcBaseAndBitshift+0xa8>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a30      	ldr	r2, [pc, #192]	; (800555c <DMA_CalcBaseAndBitshift+0x148>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00e      	beq.n	80054bc <DMA_CalcBaseAndBitshift+0xa8>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a2f      	ldr	r2, [pc, #188]	; (8005560 <DMA_CalcBaseAndBitshift+0x14c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d009      	beq.n	80054bc <DMA_CalcBaseAndBitshift+0xa8>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a2d      	ldr	r2, [pc, #180]	; (8005564 <DMA_CalcBaseAndBitshift+0x150>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d004      	beq.n	80054bc <DMA_CalcBaseAndBitshift+0xa8>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a2c      	ldr	r2, [pc, #176]	; (8005568 <DMA_CalcBaseAndBitshift+0x154>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d101      	bne.n	80054c0 <DMA_CalcBaseAndBitshift+0xac>
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <DMA_CalcBaseAndBitshift+0xae>
 80054c0:	2300      	movs	r3, #0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d024      	beq.n	8005510 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	3b10      	subs	r3, #16
 80054ce:	4a27      	ldr	r2, [pc, #156]	; (800556c <DMA_CalcBaseAndBitshift+0x158>)
 80054d0:	fba2 2303 	umull	r2, r3, r2, r3
 80054d4:	091b      	lsrs	r3, r3, #4
 80054d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	4a24      	ldr	r2, [pc, #144]	; (8005570 <DMA_CalcBaseAndBitshift+0x15c>)
 80054e0:	5cd3      	ldrb	r3, [r2, r3]
 80054e2:	461a      	mov	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d908      	bls.n	8005500 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	4b1f      	ldr	r3, [pc, #124]	; (8005574 <DMA_CalcBaseAndBitshift+0x160>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	1d1a      	adds	r2, r3, #4
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	659a      	str	r2, [r3, #88]	; 0x58
 80054fe:	e00d      	b.n	800551c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	4b1b      	ldr	r3, [pc, #108]	; (8005574 <DMA_CalcBaseAndBitshift+0x160>)
 8005508:	4013      	ands	r3, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6593      	str	r3, [r2, #88]	; 0x58
 800550e:	e005      	b.n	800551c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	40020010 	.word	0x40020010
 8005530:	40020028 	.word	0x40020028
 8005534:	40020040 	.word	0x40020040
 8005538:	40020058 	.word	0x40020058
 800553c:	40020070 	.word	0x40020070
 8005540:	40020088 	.word	0x40020088
 8005544:	400200a0 	.word	0x400200a0
 8005548:	400200b8 	.word	0x400200b8
 800554c:	40020410 	.word	0x40020410
 8005550:	40020428 	.word	0x40020428
 8005554:	40020440 	.word	0x40020440
 8005558:	40020458 	.word	0x40020458
 800555c:	40020470 	.word	0x40020470
 8005560:	40020488 	.word	0x40020488
 8005564:	400204a0 	.word	0x400204a0
 8005568:	400204b8 	.word	0x400204b8
 800556c:	aaaaaaab 	.word	0xaaaaaaab
 8005570:	0800a944 	.word	0x0800a944
 8005574:	fffffc00 	.word	0xfffffc00

08005578 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005580:	2300      	movs	r3, #0
 8005582:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d120      	bne.n	80055ce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	2b03      	cmp	r3, #3
 8005592:	d858      	bhi.n	8005646 <DMA_CheckFifoParam+0xce>
 8005594:	a201      	add	r2, pc, #4	; (adr r2, 800559c <DMA_CheckFifoParam+0x24>)
 8005596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559a:	bf00      	nop
 800559c:	080055ad 	.word	0x080055ad
 80055a0:	080055bf 	.word	0x080055bf
 80055a4:	080055ad 	.word	0x080055ad
 80055a8:	08005647 	.word	0x08005647
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d048      	beq.n	800564a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055bc:	e045      	b.n	800564a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055c6:	d142      	bne.n	800564e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055cc:	e03f      	b.n	800564e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d6:	d123      	bne.n	8005620 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d838      	bhi.n	8005652 <DMA_CheckFifoParam+0xda>
 80055e0:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <DMA_CheckFifoParam+0x70>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	080055ff 	.word	0x080055ff
 80055f0:	080055f9 	.word	0x080055f9
 80055f4:	08005611 	.word	0x08005611
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
        break;
 80055fc:	e030      	b.n	8005660 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d025      	beq.n	8005656 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800560e:	e022      	b.n	8005656 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005618:	d11f      	bne.n	800565a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800561e:	e01c      	b.n	800565a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	2b02      	cmp	r3, #2
 8005626:	d902      	bls.n	800562e <DMA_CheckFifoParam+0xb6>
 8005628:	2b03      	cmp	r3, #3
 800562a:	d003      	beq.n	8005634 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800562c:	e018      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	73fb      	strb	r3, [r7, #15]
        break;
 8005632:	e015      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00e      	beq.n	800565e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]
    break;
 8005644:	e00b      	b.n	800565e <DMA_CheckFifoParam+0xe6>
        break;
 8005646:	bf00      	nop
 8005648:	e00a      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
        break;
 800564a:	bf00      	nop
 800564c:	e008      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
        break;
 800564e:	bf00      	nop
 8005650:	e006      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
        break;
 8005652:	bf00      	nop
 8005654:	e004      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
        break;
 8005656:	bf00      	nop
 8005658:	e002      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
        break;
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
    break;
 800565e:	bf00      	nop
    }
  }

  return status;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop

08005670 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a38      	ldr	r2, [pc, #224]	; (8005764 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d022      	beq.n	80056ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a36      	ldr	r2, [pc, #216]	; (8005768 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01d      	beq.n	80056ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a35      	ldr	r2, [pc, #212]	; (800576c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d018      	beq.n	80056ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a33      	ldr	r2, [pc, #204]	; (8005770 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a32      	ldr	r2, [pc, #200]	; (8005774 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00e      	beq.n	80056ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a30      	ldr	r2, [pc, #192]	; (8005778 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d009      	beq.n	80056ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a2f      	ldr	r2, [pc, #188]	; (800577c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a2d      	ldr	r2, [pc, #180]	; (8005780 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d101      	bne.n	80056d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80056d2:	2300      	movs	r3, #0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01a      	beq.n	800570e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	3b08      	subs	r3, #8
 80056e0:	4a28      	ldr	r2, [pc, #160]	; (8005784 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80056e2:	fba2 2303 	umull	r2, r3, r2, r3
 80056e6:	091b      	lsrs	r3, r3, #4
 80056e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4b26      	ldr	r3, [pc, #152]	; (8005788 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80056ee:	4413      	add	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	461a      	mov	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a24      	ldr	r2, [pc, #144]	; (800578c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80056fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f003 031f 	and.w	r3, r3, #31
 8005704:	2201      	movs	r2, #1
 8005706:	409a      	lsls	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800570c:	e024      	b.n	8005758 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	3b10      	subs	r3, #16
 8005716:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005718:	fba2 2303 	umull	r2, r3, r2, r3
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4a1c      	ldr	r2, [pc, #112]	; (8005794 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d806      	bhi.n	8005736 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4a1b      	ldr	r2, [pc, #108]	; (8005798 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d902      	bls.n	8005736 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3308      	adds	r3, #8
 8005734:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4b18      	ldr	r3, [pc, #96]	; (800579c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	461a      	mov	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a16      	ldr	r2, [pc, #88]	; (80057a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005748:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	2201      	movs	r2, #1
 8005752:	409a      	lsls	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	58025408 	.word	0x58025408
 8005768:	5802541c 	.word	0x5802541c
 800576c:	58025430 	.word	0x58025430
 8005770:	58025444 	.word	0x58025444
 8005774:	58025458 	.word	0x58025458
 8005778:	5802546c 	.word	0x5802546c
 800577c:	58025480 	.word	0x58025480
 8005780:	58025494 	.word	0x58025494
 8005784:	cccccccd 	.word	0xcccccccd
 8005788:	16009600 	.word	0x16009600
 800578c:	58025880 	.word	0x58025880
 8005790:	aaaaaaab 	.word	0xaaaaaaab
 8005794:	400204b8 	.word	0x400204b8
 8005798:	4002040f 	.word	0x4002040f
 800579c:	10008200 	.word	0x10008200
 80057a0:	40020880 	.word	0x40020880

080057a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d04a      	beq.n	8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d847      	bhi.n	8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a25      	ldr	r2, [pc, #148]	; (800585c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d022      	beq.n	8005810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a24      	ldr	r2, [pc, #144]	; (8005860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d01d      	beq.n	8005810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a22      	ldr	r2, [pc, #136]	; (8005864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d018      	beq.n	8005810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a21      	ldr	r2, [pc, #132]	; (8005868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d013      	beq.n	8005810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a1f      	ldr	r2, [pc, #124]	; (800586c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00e      	beq.n	8005810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a1e      	ldr	r2, [pc, #120]	; (8005870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d009      	beq.n	8005810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a1c      	ldr	r2, [pc, #112]	; (8005874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d101      	bne.n	8005814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005814:	2300      	movs	r3, #0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	4b17      	ldr	r3, [pc, #92]	; (800587c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	461a      	mov	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a15      	ldr	r2, [pc, #84]	; (8005880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800582c:	671a      	str	r2, [r3, #112]	; 0x70
 800582e:	e009      	b.n	8005844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4b14      	ldr	r3, [pc, #80]	; (8005884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005834:	4413      	add	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	461a      	mov	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a11      	ldr	r2, [pc, #68]	; (8005888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005842:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3b01      	subs	r3, #1
 8005848:	2201      	movs	r2, #1
 800584a:	409a      	lsls	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005850:	bf00      	nop
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	58025408 	.word	0x58025408
 8005860:	5802541c 	.word	0x5802541c
 8005864:	58025430 	.word	0x58025430
 8005868:	58025444 	.word	0x58025444
 800586c:	58025458 	.word	0x58025458
 8005870:	5802546c 	.word	0x5802546c
 8005874:	58025480 	.word	0x58025480
 8005878:	58025494 	.word	0x58025494
 800587c:	1600963f 	.word	0x1600963f
 8005880:	58025940 	.word	0x58025940
 8005884:	1000823f 	.word	0x1000823f
 8005888:	40020940 	.word	0x40020940

0800588c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800588c:	b480      	push	{r7}
 800588e:	b089      	sub	sp, #36	; 0x24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005896:	2300      	movs	r3, #0
 8005898:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800589a:	4b89      	ldr	r3, [pc, #548]	; (8005ac0 <HAL_GPIO_Init+0x234>)
 800589c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800589e:	e194      	b.n	8005bca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	2101      	movs	r1, #1
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ac:	4013      	ands	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 8186 	beq.w	8005bc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f003 0303 	and.w	r3, r3, #3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d005      	beq.n	80058d0 <HAL_GPIO_Init+0x44>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f003 0303 	and.w	r3, r3, #3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d130      	bne.n	8005932 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	2203      	movs	r2, #3
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	43db      	mvns	r3, r3
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	4013      	ands	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005906:	2201      	movs	r2, #1
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	43db      	mvns	r3, r3
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	4013      	ands	r3, r2
 8005914:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	091b      	lsrs	r3, r3, #4
 800591c:	f003 0201 	and.w	r2, r3, #1
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4313      	orrs	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	2b03      	cmp	r3, #3
 800593c:	d017      	beq.n	800596e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	2203      	movs	r2, #3
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	43db      	mvns	r3, r3
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	4013      	ands	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	4313      	orrs	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d123      	bne.n	80059c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	08da      	lsrs	r2, r3, #3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	3208      	adds	r2, #8
 8005982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	220f      	movs	r2, #15
 8005992:	fa02 f303 	lsl.w	r3, r2, r3
 8005996:	43db      	mvns	r3, r3
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	4013      	ands	r3, r2
 800599c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	691a      	ldr	r2, [r3, #16]
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	f003 0307 	and.w	r3, r3, #7
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	08da      	lsrs	r2, r3, #3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3208      	adds	r2, #8
 80059bc:	69b9      	ldr	r1, [r7, #24]
 80059be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	2203      	movs	r2, #3
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	43db      	mvns	r3, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f003 0203 	and.w	r2, r3, #3
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 80e0 	beq.w	8005bc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a04:	4b2f      	ldr	r3, [pc, #188]	; (8005ac4 <HAL_GPIO_Init+0x238>)
 8005a06:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005a0a:	4a2e      	ldr	r2, [pc, #184]	; (8005ac4 <HAL_GPIO_Init+0x238>)
 8005a0c:	f043 0302 	orr.w	r3, r3, #2
 8005a10:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005a14:	4b2b      	ldr	r3, [pc, #172]	; (8005ac4 <HAL_GPIO_Init+0x238>)
 8005a16:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a22:	4a29      	ldr	r2, [pc, #164]	; (8005ac8 <HAL_GPIO_Init+0x23c>)
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	089b      	lsrs	r3, r3, #2
 8005a28:	3302      	adds	r3, #2
 8005a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	f003 0303 	and.w	r3, r3, #3
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	220f      	movs	r2, #15
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	4013      	ands	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a20      	ldr	r2, [pc, #128]	; (8005acc <HAL_GPIO_Init+0x240>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d052      	beq.n	8005af4 <HAL_GPIO_Init+0x268>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a1f      	ldr	r2, [pc, #124]	; (8005ad0 <HAL_GPIO_Init+0x244>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d031      	beq.n	8005aba <HAL_GPIO_Init+0x22e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a1e      	ldr	r2, [pc, #120]	; (8005ad4 <HAL_GPIO_Init+0x248>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d02b      	beq.n	8005ab6 <HAL_GPIO_Init+0x22a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a1d      	ldr	r2, [pc, #116]	; (8005ad8 <HAL_GPIO_Init+0x24c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d025      	beq.n	8005ab2 <HAL_GPIO_Init+0x226>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a1c      	ldr	r2, [pc, #112]	; (8005adc <HAL_GPIO_Init+0x250>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01f      	beq.n	8005aae <HAL_GPIO_Init+0x222>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a1b      	ldr	r2, [pc, #108]	; (8005ae0 <HAL_GPIO_Init+0x254>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d019      	beq.n	8005aaa <HAL_GPIO_Init+0x21e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a1a      	ldr	r2, [pc, #104]	; (8005ae4 <HAL_GPIO_Init+0x258>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <HAL_GPIO_Init+0x21a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a19      	ldr	r2, [pc, #100]	; (8005ae8 <HAL_GPIO_Init+0x25c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00d      	beq.n	8005aa2 <HAL_GPIO_Init+0x216>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a18      	ldr	r2, [pc, #96]	; (8005aec <HAL_GPIO_Init+0x260>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <HAL_GPIO_Init+0x212>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a17      	ldr	r2, [pc, #92]	; (8005af0 <HAL_GPIO_Init+0x264>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d101      	bne.n	8005a9a <HAL_GPIO_Init+0x20e>
 8005a96:	2309      	movs	r3, #9
 8005a98:	e02d      	b.n	8005af6 <HAL_GPIO_Init+0x26a>
 8005a9a:	230a      	movs	r3, #10
 8005a9c:	e02b      	b.n	8005af6 <HAL_GPIO_Init+0x26a>
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	e029      	b.n	8005af6 <HAL_GPIO_Init+0x26a>
 8005aa2:	2307      	movs	r3, #7
 8005aa4:	e027      	b.n	8005af6 <HAL_GPIO_Init+0x26a>
 8005aa6:	2306      	movs	r3, #6
 8005aa8:	e025      	b.n	8005af6 <HAL_GPIO_Init+0x26a>
 8005aaa:	2305      	movs	r3, #5
 8005aac:	e023      	b.n	8005af6 <HAL_GPIO_Init+0x26a>
 8005aae:	2304      	movs	r3, #4
 8005ab0:	e021      	b.n	8005af6 <HAL_GPIO_Init+0x26a>
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e01f      	b.n	8005af6 <HAL_GPIO_Init+0x26a>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e01d      	b.n	8005af6 <HAL_GPIO_Init+0x26a>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e01b      	b.n	8005af6 <HAL_GPIO_Init+0x26a>
 8005abe:	bf00      	nop
 8005ac0:	58000080 	.word	0x58000080
 8005ac4:	58024400 	.word	0x58024400
 8005ac8:	58000400 	.word	0x58000400
 8005acc:	58020000 	.word	0x58020000
 8005ad0:	58020400 	.word	0x58020400
 8005ad4:	58020800 	.word	0x58020800
 8005ad8:	58020c00 	.word	0x58020c00
 8005adc:	58021000 	.word	0x58021000
 8005ae0:	58021400 	.word	0x58021400
 8005ae4:	58021800 	.word	0x58021800
 8005ae8:	58021c00 	.word	0x58021c00
 8005aec:	58022000 	.word	0x58022000
 8005af0:	58022400 	.word	0x58022400
 8005af4:	2300      	movs	r3, #0
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	f002 0203 	and.w	r2, r2, #3
 8005afc:	0092      	lsls	r2, r2, #2
 8005afe:	4093      	lsls	r3, r2
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b06:	4938      	ldr	r1, [pc, #224]	; (8005be8 <HAL_GPIO_Init+0x35c>)
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	089b      	lsrs	r3, r3, #2
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	4013      	ands	r3, r2
 8005b24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	43db      	mvns	r3, r3
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	4013      	ands	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f47f ae63 	bne.w	80058a0 <HAL_GPIO_Init+0x14>
  }
}
 8005bda:	bf00      	nop
 8005bdc:	bf00      	nop
 8005bde:	3724      	adds	r7, #36	; 0x24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	58000400 	.word	0x58000400

08005bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	807b      	strh	r3, [r7, #2]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005bfc:	787b      	ldrb	r3, [r7, #1]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c02:	887a      	ldrh	r2, [r7, #2]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005c08:	e003      	b.n	8005c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005c0a:	887b      	ldrh	r3, [r7, #2]
 8005c0c:	041a      	lsls	r2, r3, #16
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	619a      	str	r2, [r3, #24]
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005c28:	4b29      	ldr	r3, [pc, #164]	; (8005cd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0307 	and.w	r3, r3, #7
 8005c30:	2b06      	cmp	r3, #6
 8005c32:	d00a      	beq.n	8005c4a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c34:	4b26      	ldr	r3, [pc, #152]	; (8005cd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d001      	beq.n	8005c46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e040      	b.n	8005cc8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e03e      	b.n	8005cc8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c4a:	4b21      	ldr	r3, [pc, #132]	; (8005cd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005c52:	491f      	ldr	r1, [pc, #124]	; (8005cd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c5a:	f7fb ff11 	bl	8001a80 <HAL_GetTick>
 8005c5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c60:	e009      	b.n	8005c76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c62:	f7fb ff0d 	bl	8001a80 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c70:	d901      	bls.n	8005c76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e028      	b.n	8005cc8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c76:	4b16      	ldr	r3, [pc, #88]	; (8005cd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c82:	d1ee      	bne.n	8005c62 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b1e      	cmp	r3, #30
 8005c88:	d008      	beq.n	8005c9c <HAL_PWREx_ConfigSupply+0x7c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b2e      	cmp	r3, #46	; 0x2e
 8005c8e:	d005      	beq.n	8005c9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b1d      	cmp	r3, #29
 8005c94:	d002      	beq.n	8005c9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b2d      	cmp	r3, #45	; 0x2d
 8005c9a:	d114      	bne.n	8005cc6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005c9c:	f7fb fef0 	bl	8001a80 <HAL_GetTick>
 8005ca0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005ca2:	e009      	b.n	8005cb8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ca4:	f7fb feec 	bl	8001a80 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cb2:	d901      	bls.n	8005cb8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e007      	b.n	8005cc8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005cb8:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc4:	d1ee      	bne.n	8005ca4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	58024800 	.word	0x58024800

08005cd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08c      	sub	sp, #48	; 0x30
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e3f4      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 80b3 	beq.w	8005e5a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cf4:	4b95      	ldr	r3, [pc, #596]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cfe:	4b93      	ldr	r3, [pc, #588]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	2b10      	cmp	r3, #16
 8005d08:	d007      	beq.n	8005d1a <HAL_RCC_OscConfig+0x46>
 8005d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0c:	2b18      	cmp	r3, #24
 8005d0e:	d112      	bne.n	8005d36 <HAL_RCC_OscConfig+0x62>
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d10d      	bne.n	8005d36 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d1a:	4b8c      	ldr	r3, [pc, #560]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 8098 	beq.w	8005e58 <HAL_RCC_OscConfig+0x184>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f040 8093 	bne.w	8005e58 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e3cc      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3e:	d106      	bne.n	8005d4e <HAL_RCC_OscConfig+0x7a>
 8005d40:	4b82      	ldr	r3, [pc, #520]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a81      	ldr	r2, [pc, #516]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	e058      	b.n	8005e00 <HAL_RCC_OscConfig+0x12c>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d112      	bne.n	8005d7c <HAL_RCC_OscConfig+0xa8>
 8005d56:	4b7d      	ldr	r3, [pc, #500]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a7c      	ldr	r2, [pc, #496]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	4b7a      	ldr	r3, [pc, #488]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a79      	ldr	r2, [pc, #484]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005d68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d6c:	6013      	str	r3, [r2, #0]
 8005d6e:	4b77      	ldr	r3, [pc, #476]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a76      	ldr	r2, [pc, #472]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e041      	b.n	8005e00 <HAL_RCC_OscConfig+0x12c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d84:	d112      	bne.n	8005dac <HAL_RCC_OscConfig+0xd8>
 8005d86:	4b71      	ldr	r3, [pc, #452]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a70      	ldr	r2, [pc, #448]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	4b6e      	ldr	r3, [pc, #440]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a6d      	ldr	r2, [pc, #436]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005d98:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	4b6b      	ldr	r3, [pc, #428]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a6a      	ldr	r2, [pc, #424]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	e029      	b.n	8005e00 <HAL_RCC_OscConfig+0x12c>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005db4:	d112      	bne.n	8005ddc <HAL_RCC_OscConfig+0x108>
 8005db6:	4b65      	ldr	r3, [pc, #404]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a64      	ldr	r2, [pc, #400]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	4b62      	ldr	r3, [pc, #392]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a61      	ldr	r2, [pc, #388]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005dc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	4b5f      	ldr	r3, [pc, #380]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a5e      	ldr	r2, [pc, #376]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	e011      	b.n	8005e00 <HAL_RCC_OscConfig+0x12c>
 8005ddc:	4b5b      	ldr	r3, [pc, #364]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a5a      	ldr	r2, [pc, #360]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	4b58      	ldr	r3, [pc, #352]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a57      	ldr	r2, [pc, #348]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	4b55      	ldr	r3, [pc, #340]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a54      	ldr	r2, [pc, #336]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005dfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d013      	beq.n	8005e30 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e08:	f7fb fe3a 	bl	8001a80 <HAL_GetTick>
 8005e0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e10:	f7fb fe36 	bl	8001a80 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b64      	cmp	r3, #100	; 0x64
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e356      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e22:	4b4a      	ldr	r3, [pc, #296]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0f0      	beq.n	8005e10 <HAL_RCC_OscConfig+0x13c>
 8005e2e:	e014      	b.n	8005e5a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e30:	f7fb fe26 	bl	8001a80 <HAL_GetTick>
 8005e34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e38:	f7fb fe22 	bl	8001a80 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b64      	cmp	r3, #100	; 0x64
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e342      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e4a:	4b40      	ldr	r3, [pc, #256]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1f0      	bne.n	8005e38 <HAL_RCC_OscConfig+0x164>
 8005e56:	e000      	b.n	8005e5a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 808d 	beq.w	8005f82 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e68:	4b38      	ldr	r3, [pc, #224]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e72:	4b36      	ldr	r3, [pc, #216]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d007      	beq.n	8005e8e <HAL_RCC_OscConfig+0x1ba>
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	2b18      	cmp	r3, #24
 8005e82:	d137      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x220>
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f003 0303 	and.w	r3, r3, #3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d132      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e8e:	4b2f      	ldr	r3, [pc, #188]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x1d2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e314      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ea6:	4b29      	ldr	r3, [pc, #164]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f023 0219 	bic.w	r2, r3, #25
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	4926      	ldr	r1, [pc, #152]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005eb8:	f7fb fde2 	bl	8001a80 <HAL_GetTick>
 8005ebc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ec0:	f7fb fdde 	bl	8001a80 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e2fe      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ed2:	4b1e      	ldr	r3, [pc, #120]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0f0      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ede:	4b1b      	ldr	r3, [pc, #108]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	061b      	lsls	r3, r3, #24
 8005eec:	4917      	ldr	r1, [pc, #92]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ef2:	e046      	b.n	8005f82 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d029      	beq.n	8005f50 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005efc:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f023 0219 	bic.w	r2, r3, #25
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	4910      	ldr	r1, [pc, #64]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0e:	f7fb fdb7 	bl	8001a80 <HAL_GetTick>
 8005f12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f16:	f7fb fdb3 	bl	8001a80 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e2d3      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f28:	4b08      	ldr	r3, [pc, #32]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0f0      	beq.n	8005f16 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f34:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	061b      	lsls	r3, r3, #24
 8005f42:	4902      	ldr	r1, [pc, #8]	; (8005f4c <HAL_RCC_OscConfig+0x278>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	604b      	str	r3, [r1, #4]
 8005f48:	e01b      	b.n	8005f82 <HAL_RCC_OscConfig+0x2ae>
 8005f4a:	bf00      	nop
 8005f4c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f50:	4b97      	ldr	r3, [pc, #604]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a96      	ldr	r2, [pc, #600]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 8005f56:	f023 0301 	bic.w	r3, r3, #1
 8005f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5c:	f7fb fd90 	bl	8001a80 <HAL_GetTick>
 8005f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f64:	f7fb fd8c 	bl	8001a80 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e2ac      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f76:	4b8e      	ldr	r3, [pc, #568]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0304 	and.w	r3, r3, #4
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1f0      	bne.n	8005f64 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0310 	and.w	r3, r3, #16
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d06a      	beq.n	8006064 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f8e:	4b88      	ldr	r3, [pc, #544]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f98:	4b85      	ldr	r3, [pc, #532]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d007      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x2e0>
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	2b18      	cmp	r3, #24
 8005fa8:	d11b      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x30e>
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d116      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fb4:	4b7e      	ldr	r3, [pc, #504]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <HAL_RCC_OscConfig+0x2f8>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	2b80      	cmp	r3, #128	; 0x80
 8005fc6:	d001      	beq.n	8005fcc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e281      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005fcc:	4b78      	ldr	r3, [pc, #480]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	061b      	lsls	r3, r3, #24
 8005fda:	4975      	ldr	r1, [pc, #468]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fe0:	e040      	b.n	8006064 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d023      	beq.n	8006032 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005fea:	4b71      	ldr	r3, [pc, #452]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a70      	ldr	r2, [pc, #448]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 8005ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff6:	f7fb fd43 	bl	8001a80 <HAL_GetTick>
 8005ffa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ffc:	e008      	b.n	8006010 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005ffe:	f7fb fd3f 	bl	8001a80 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e25f      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006010:	4b67      	ldr	r3, [pc, #412]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0f0      	beq.n	8005ffe <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800601c:	4b64      	ldr	r3, [pc, #400]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	061b      	lsls	r3, r3, #24
 800602a:	4961      	ldr	r1, [pc, #388]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 800602c:	4313      	orrs	r3, r2
 800602e:	60cb      	str	r3, [r1, #12]
 8006030:	e018      	b.n	8006064 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006032:	4b5f      	ldr	r3, [pc, #380]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a5e      	ldr	r2, [pc, #376]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 8006038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800603c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603e:	f7fb fd1f 	bl	8001a80 <HAL_GetTick>
 8006042:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006046:	f7fb fd1b 	bl	8001a80 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e23b      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006058:	4b55      	ldr	r3, [pc, #340]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1f0      	bne.n	8006046 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0308 	and.w	r3, r3, #8
 800606c:	2b00      	cmp	r3, #0
 800606e:	d036      	beq.n	80060de <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d019      	beq.n	80060ac <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006078:	4b4d      	ldr	r3, [pc, #308]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 800607a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800607c:	4a4c      	ldr	r2, [pc, #304]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 800607e:	f043 0301 	orr.w	r3, r3, #1
 8006082:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006084:	f7fb fcfc 	bl	8001a80 <HAL_GetTick>
 8006088:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800608c:	f7fb fcf8 	bl	8001a80 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e218      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800609e:	4b44      	ldr	r3, [pc, #272]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 80060a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060a2:	f003 0302 	and.w	r3, r3, #2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0f0      	beq.n	800608c <HAL_RCC_OscConfig+0x3b8>
 80060aa:	e018      	b.n	80060de <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060ac:	4b40      	ldr	r3, [pc, #256]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 80060ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b0:	4a3f      	ldr	r2, [pc, #252]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 80060b2:	f023 0301 	bic.w	r3, r3, #1
 80060b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b8:	f7fb fce2 	bl	8001a80 <HAL_GetTick>
 80060bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060c0:	f7fb fcde 	bl	8001a80 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e1fe      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80060d2:	4b37      	ldr	r3, [pc, #220]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 80060d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f0      	bne.n	80060c0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d036      	beq.n	8006158 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d019      	beq.n	8006126 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060f2:	4b2f      	ldr	r3, [pc, #188]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a2e      	ldr	r2, [pc, #184]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 80060f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80060fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060fe:	f7fb fcbf 	bl	8001a80 <HAL_GetTick>
 8006102:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006104:	e008      	b.n	8006118 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006106:	f7fb fcbb 	bl	8001a80 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e1db      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006118:	4b25      	ldr	r3, [pc, #148]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0f0      	beq.n	8006106 <HAL_RCC_OscConfig+0x432>
 8006124:	e018      	b.n	8006158 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006126:	4b22      	ldr	r3, [pc, #136]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a21      	ldr	r2, [pc, #132]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 800612c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006130:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006132:	f7fb fca5 	bl	8001a80 <HAL_GetTick>
 8006136:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006138:	e008      	b.n	800614c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800613a:	f7fb fca1 	bl	8001a80 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d901      	bls.n	800614c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e1c1      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800614c:	4b18      	ldr	r3, [pc, #96]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1f0      	bne.n	800613a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 80af 	beq.w	80062c4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006166:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <HAL_RCC_OscConfig+0x4e0>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a12      	ldr	r2, [pc, #72]	; (80061b4 <HAL_RCC_OscConfig+0x4e0>)
 800616c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006170:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006172:	f7fb fc85 	bl	8001a80 <HAL_GetTick>
 8006176:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800617a:	f7fb fc81 	bl	8001a80 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b64      	cmp	r3, #100	; 0x64
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e1a1      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800618c:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <HAL_RCC_OscConfig+0x4e0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0f0      	beq.n	800617a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d10b      	bne.n	80061b8 <HAL_RCC_OscConfig+0x4e4>
 80061a0:	4b03      	ldr	r3, [pc, #12]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 80061a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a4:	4a02      	ldr	r2, [pc, #8]	; (80061b0 <HAL_RCC_OscConfig+0x4dc>)
 80061a6:	f043 0301 	orr.w	r3, r3, #1
 80061aa:	6713      	str	r3, [r2, #112]	; 0x70
 80061ac:	e05b      	b.n	8006266 <HAL_RCC_OscConfig+0x592>
 80061ae:	bf00      	nop
 80061b0:	58024400 	.word	0x58024400
 80061b4:	58024800 	.word	0x58024800
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d112      	bne.n	80061e6 <HAL_RCC_OscConfig+0x512>
 80061c0:	4b9d      	ldr	r3, [pc, #628]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80061c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c4:	4a9c      	ldr	r2, [pc, #624]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80061c6:	f023 0301 	bic.w	r3, r3, #1
 80061ca:	6713      	str	r3, [r2, #112]	; 0x70
 80061cc:	4b9a      	ldr	r3, [pc, #616]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80061ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d0:	4a99      	ldr	r2, [pc, #612]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80061d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061d6:	6713      	str	r3, [r2, #112]	; 0x70
 80061d8:	4b97      	ldr	r3, [pc, #604]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80061da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061dc:	4a96      	ldr	r2, [pc, #600]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80061de:	f023 0304 	bic.w	r3, r3, #4
 80061e2:	6713      	str	r3, [r2, #112]	; 0x70
 80061e4:	e03f      	b.n	8006266 <HAL_RCC_OscConfig+0x592>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	2b05      	cmp	r3, #5
 80061ec:	d112      	bne.n	8006214 <HAL_RCC_OscConfig+0x540>
 80061ee:	4b92      	ldr	r3, [pc, #584]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80061f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f2:	4a91      	ldr	r2, [pc, #580]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80061f4:	f043 0304 	orr.w	r3, r3, #4
 80061f8:	6713      	str	r3, [r2, #112]	; 0x70
 80061fa:	4b8f      	ldr	r3, [pc, #572]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	4a8e      	ldr	r2, [pc, #568]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006200:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006204:	6713      	str	r3, [r2, #112]	; 0x70
 8006206:	4b8c      	ldr	r3, [pc, #560]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620a:	4a8b      	ldr	r2, [pc, #556]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	6713      	str	r3, [r2, #112]	; 0x70
 8006212:	e028      	b.n	8006266 <HAL_RCC_OscConfig+0x592>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	2b85      	cmp	r3, #133	; 0x85
 800621a:	d112      	bne.n	8006242 <HAL_RCC_OscConfig+0x56e>
 800621c:	4b86      	ldr	r3, [pc, #536]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 800621e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006220:	4a85      	ldr	r2, [pc, #532]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006222:	f043 0304 	orr.w	r3, r3, #4
 8006226:	6713      	str	r3, [r2, #112]	; 0x70
 8006228:	4b83      	ldr	r3, [pc, #524]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 800622a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622c:	4a82      	ldr	r2, [pc, #520]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 800622e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006232:	6713      	str	r3, [r2, #112]	; 0x70
 8006234:	4b80      	ldr	r3, [pc, #512]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006238:	4a7f      	ldr	r2, [pc, #508]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 800623a:	f043 0301 	orr.w	r3, r3, #1
 800623e:	6713      	str	r3, [r2, #112]	; 0x70
 8006240:	e011      	b.n	8006266 <HAL_RCC_OscConfig+0x592>
 8006242:	4b7d      	ldr	r3, [pc, #500]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	4a7c      	ldr	r2, [pc, #496]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006248:	f023 0301 	bic.w	r3, r3, #1
 800624c:	6713      	str	r3, [r2, #112]	; 0x70
 800624e:	4b7a      	ldr	r3, [pc, #488]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006252:	4a79      	ldr	r2, [pc, #484]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006254:	f023 0304 	bic.w	r3, r3, #4
 8006258:	6713      	str	r3, [r2, #112]	; 0x70
 800625a:	4b77      	ldr	r3, [pc, #476]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 800625c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625e:	4a76      	ldr	r2, [pc, #472]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006264:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d015      	beq.n	800629a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626e:	f7fb fc07 	bl	8001a80 <HAL_GetTick>
 8006272:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006274:	e00a      	b.n	800628c <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006276:	f7fb fc03 	bl	8001a80 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	f241 3288 	movw	r2, #5000	; 0x1388
 8006284:	4293      	cmp	r3, r2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e121      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800628c:	4b6a      	ldr	r3, [pc, #424]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 800628e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0ee      	beq.n	8006276 <HAL_RCC_OscConfig+0x5a2>
 8006298:	e014      	b.n	80062c4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629a:	f7fb fbf1 	bl	8001a80 <HAL_GetTick>
 800629e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062a0:	e00a      	b.n	80062b8 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a2:	f7fb fbed 	bl	8001a80 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e10b      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062b8:	4b5f      	ldr	r3, [pc, #380]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80062ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1ee      	bne.n	80062a2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 8100 	beq.w	80064ce <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80062ce:	4b5a      	ldr	r3, [pc, #360]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062d6:	2b18      	cmp	r3, #24
 80062d8:	f000 80bb 	beq.w	8006452 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	f040 8095 	bne.w	8006410 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e6:	4b54      	ldr	r3, [pc, #336]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a53      	ldr	r2, [pc, #332]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80062ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f2:	f7fb fbc5 	bl	8001a80 <HAL_GetTick>
 80062f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062fa:	f7fb fbc1 	bl	8001a80 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e0e1      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800630c:	4b4a      	ldr	r3, [pc, #296]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1f0      	bne.n	80062fa <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006318:	4b47      	ldr	r3, [pc, #284]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 800631a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800631c:	4b47      	ldr	r3, [pc, #284]	; (800643c <HAL_RCC_OscConfig+0x768>)
 800631e:	4013      	ands	r3, r2
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006328:	0112      	lsls	r2, r2, #4
 800632a:	430a      	orrs	r2, r1
 800632c:	4942      	ldr	r1, [pc, #264]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 800632e:	4313      	orrs	r3, r2
 8006330:	628b      	str	r3, [r1, #40]	; 0x28
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006336:	3b01      	subs	r3, #1
 8006338:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006340:	3b01      	subs	r3, #1
 8006342:	025b      	lsls	r3, r3, #9
 8006344:	b29b      	uxth	r3, r3
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634c:	3b01      	subs	r3, #1
 800634e:	041b      	lsls	r3, r3, #16
 8006350:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635a:	3b01      	subs	r3, #1
 800635c:	061b      	lsls	r3, r3, #24
 800635e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006362:	4935      	ldr	r1, [pc, #212]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006364:	4313      	orrs	r3, r2
 8006366:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006368:	4b33      	ldr	r3, [pc, #204]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	4a32      	ldr	r2, [pc, #200]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 800636e:	f023 0301 	bic.w	r3, r3, #1
 8006372:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006374:	4b30      	ldr	r3, [pc, #192]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006378:	4b31      	ldr	r3, [pc, #196]	; (8006440 <HAL_RCC_OscConfig+0x76c>)
 800637a:	4013      	ands	r3, r2
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006380:	00d2      	lsls	r2, r2, #3
 8006382:	492d      	ldr	r1, [pc, #180]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006384:	4313      	orrs	r3, r2
 8006386:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006388:	4b2b      	ldr	r3, [pc, #172]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 800638a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638c:	f023 020c 	bic.w	r2, r3, #12
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	4928      	ldr	r1, [pc, #160]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006396:	4313      	orrs	r3, r2
 8006398:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800639a:	4b27      	ldr	r3, [pc, #156]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	f023 0202 	bic.w	r2, r3, #2
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a6:	4924      	ldr	r1, [pc, #144]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063ac:	4b22      	ldr	r3, [pc, #136]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	4a21      	ldr	r2, [pc, #132]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80063b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b8:	4b1f      	ldr	r3, [pc, #124]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	4a1e      	ldr	r2, [pc, #120]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80063be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80063c4:	4b1c      	ldr	r3, [pc, #112]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	4a1b      	ldr	r2, [pc, #108]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80063ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80063d0:	4b19      	ldr	r3, [pc, #100]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	4a18      	ldr	r2, [pc, #96]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063dc:	4b16      	ldr	r3, [pc, #88]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a15      	ldr	r2, [pc, #84]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 80063e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e8:	f7fb fb4a 	bl	8001a80 <HAL_GetTick>
 80063ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063f0:	f7fb fb46 	bl	8001a80 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e066      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006402:	4b0d      	ldr	r3, [pc, #52]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0f0      	beq.n	80063f0 <HAL_RCC_OscConfig+0x71c>
 800640e:	e05e      	b.n	80064ce <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006410:	4b09      	ldr	r3, [pc, #36]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a08      	ldr	r2, [pc, #32]	; (8006438 <HAL_RCC_OscConfig+0x764>)
 8006416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800641a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641c:	f7fb fb30 	bl	8001a80 <HAL_GetTick>
 8006420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006422:	e00f      	b.n	8006444 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006424:	f7fb fb2c 	bl	8001a80 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d908      	bls.n	8006444 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e04c      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
 8006436:	bf00      	nop
 8006438:	58024400 	.word	0x58024400
 800643c:	fffffc0c 	.word	0xfffffc0c
 8006440:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006444:	4b24      	ldr	r3, [pc, #144]	; (80064d8 <HAL_RCC_OscConfig+0x804>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e9      	bne.n	8006424 <HAL_RCC_OscConfig+0x750>
 8006450:	e03d      	b.n	80064ce <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006452:	4b21      	ldr	r3, [pc, #132]	; (80064d8 <HAL_RCC_OscConfig+0x804>)
 8006454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006456:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006458:	4b1f      	ldr	r3, [pc, #124]	; (80064d8 <HAL_RCC_OscConfig+0x804>)
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	2b01      	cmp	r3, #1
 8006464:	d031      	beq.n	80064ca <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f003 0203 	and.w	r2, r3, #3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006470:	429a      	cmp	r2, r3
 8006472:	d12a      	bne.n	80064ca <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	091b      	lsrs	r3, r3, #4
 8006478:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006480:	429a      	cmp	r2, r3
 8006482:	d122      	bne.n	80064ca <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006490:	429a      	cmp	r2, r3
 8006492:	d11a      	bne.n	80064ca <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	0a5b      	lsrs	r3, r3, #9
 8006498:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d111      	bne.n	80064ca <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	0c1b      	lsrs	r3, r3, #16
 80064aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d108      	bne.n	80064ca <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	0e1b      	lsrs	r3, r3, #24
 80064bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d001      	beq.n	80064ce <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e000      	b.n	80064d0 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3730      	adds	r7, #48	; 0x30
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	58024400 	.word	0x58024400

080064dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e19c      	b.n	800682a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064f0:	4b8a      	ldr	r3, [pc, #552]	; (800671c <HAL_RCC_ClockConfig+0x240>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 030f 	and.w	r3, r3, #15
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d910      	bls.n	8006520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064fe:	4b87      	ldr	r3, [pc, #540]	; (800671c <HAL_RCC_ClockConfig+0x240>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f023 020f 	bic.w	r2, r3, #15
 8006506:	4985      	ldr	r1, [pc, #532]	; (800671c <HAL_RCC_ClockConfig+0x240>)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	4313      	orrs	r3, r2
 800650c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800650e:	4b83      	ldr	r3, [pc, #524]	; (800671c <HAL_RCC_ClockConfig+0x240>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	429a      	cmp	r2, r3
 800651a:	d001      	beq.n	8006520 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e184      	b.n	800682a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d010      	beq.n	800654e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691a      	ldr	r2, [r3, #16]
 8006530:	4b7b      	ldr	r3, [pc, #492]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006538:	429a      	cmp	r2, r3
 800653a:	d908      	bls.n	800654e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800653c:	4b78      	ldr	r3, [pc, #480]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	4975      	ldr	r1, [pc, #468]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 800654a:	4313      	orrs	r3, r2
 800654c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0308 	and.w	r3, r3, #8
 8006556:	2b00      	cmp	r3, #0
 8006558:	d010      	beq.n	800657c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695a      	ldr	r2, [r3, #20]
 800655e:	4b70      	ldr	r3, [pc, #448]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006566:	429a      	cmp	r2, r3
 8006568:	d908      	bls.n	800657c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800656a:	4b6d      	ldr	r3, [pc, #436]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	496a      	ldr	r1, [pc, #424]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 8006578:	4313      	orrs	r3, r2
 800657a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0310 	and.w	r3, r3, #16
 8006584:	2b00      	cmp	r3, #0
 8006586:	d010      	beq.n	80065aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699a      	ldr	r2, [r3, #24]
 800658c:	4b64      	ldr	r3, [pc, #400]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006594:	429a      	cmp	r2, r3
 8006596:	d908      	bls.n	80065aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006598:	4b61      	ldr	r3, [pc, #388]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	495e      	ldr	r1, [pc, #376]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d010      	beq.n	80065d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69da      	ldr	r2, [r3, #28]
 80065ba:	4b59      	ldr	r3, [pc, #356]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d908      	bls.n	80065d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80065c6:	4b56      	ldr	r3, [pc, #344]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	4953      	ldr	r1, [pc, #332]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d010      	beq.n	8006606 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	4b4d      	ldr	r3, [pc, #308]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d908      	bls.n	8006606 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065f4:	4b4a      	ldr	r3, [pc, #296]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	f023 020f 	bic.w	r2, r3, #15
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	4947      	ldr	r1, [pc, #284]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 8006602:	4313      	orrs	r3, r2
 8006604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d055      	beq.n	80066be <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006612:	4b43      	ldr	r3, [pc, #268]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	4940      	ldr	r1, [pc, #256]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 8006620:	4313      	orrs	r3, r2
 8006622:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d107      	bne.n	800663c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800662c:	4b3c      	ldr	r3, [pc, #240]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d121      	bne.n	800667c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e0f6      	b.n	800682a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2b03      	cmp	r3, #3
 8006642:	d107      	bne.n	8006654 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006644:	4b36      	ldr	r3, [pc, #216]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d115      	bne.n	800667c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e0ea      	b.n	800682a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d107      	bne.n	800666c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800665c:	4b30      	ldr	r3, [pc, #192]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006664:	2b00      	cmp	r3, #0
 8006666:	d109      	bne.n	800667c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e0de      	b.n	800682a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800666c:	4b2c      	ldr	r3, [pc, #176]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e0d6      	b.n	800682a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800667c:	4b28      	ldr	r3, [pc, #160]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f023 0207 	bic.w	r2, r3, #7
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	4925      	ldr	r1, [pc, #148]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 800668a:	4313      	orrs	r3, r2
 800668c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800668e:	f7fb f9f7 	bl	8001a80 <HAL_GetTick>
 8006692:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006694:	e00a      	b.n	80066ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006696:	f7fb f9f3 	bl	8001a80 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e0be      	b.n	800682a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ac:	4b1c      	ldr	r3, [pc, #112]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d1eb      	bne.n	8006696 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d010      	beq.n	80066ec <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	4b14      	ldr	r3, [pc, #80]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	f003 030f 	and.w	r3, r3, #15
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d208      	bcs.n	80066ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066da:	4b11      	ldr	r3, [pc, #68]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f023 020f 	bic.w	r2, r3, #15
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	490e      	ldr	r1, [pc, #56]	; (8006720 <HAL_RCC_ClockConfig+0x244>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066ec:	4b0b      	ldr	r3, [pc, #44]	; (800671c <HAL_RCC_ClockConfig+0x240>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d214      	bcs.n	8006724 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fa:	4b08      	ldr	r3, [pc, #32]	; (800671c <HAL_RCC_ClockConfig+0x240>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f023 020f 	bic.w	r2, r3, #15
 8006702:	4906      	ldr	r1, [pc, #24]	; (800671c <HAL_RCC_ClockConfig+0x240>)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	4313      	orrs	r3, r2
 8006708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800670a:	4b04      	ldr	r3, [pc, #16]	; (800671c <HAL_RCC_ClockConfig+0x240>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d005      	beq.n	8006724 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e086      	b.n	800682a <HAL_RCC_ClockConfig+0x34e>
 800671c:	52002000 	.word	0x52002000
 8006720:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d010      	beq.n	8006752 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	4b3f      	ldr	r3, [pc, #252]	; (8006834 <HAL_RCC_ClockConfig+0x358>)
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800673c:	429a      	cmp	r2, r3
 800673e:	d208      	bcs.n	8006752 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006740:	4b3c      	ldr	r3, [pc, #240]	; (8006834 <HAL_RCC_ClockConfig+0x358>)
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	4939      	ldr	r1, [pc, #228]	; (8006834 <HAL_RCC_ClockConfig+0x358>)
 800674e:	4313      	orrs	r3, r2
 8006750:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0308 	and.w	r3, r3, #8
 800675a:	2b00      	cmp	r3, #0
 800675c:	d010      	beq.n	8006780 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695a      	ldr	r2, [r3, #20]
 8006762:	4b34      	ldr	r3, [pc, #208]	; (8006834 <HAL_RCC_ClockConfig+0x358>)
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800676a:	429a      	cmp	r2, r3
 800676c:	d208      	bcs.n	8006780 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800676e:	4b31      	ldr	r3, [pc, #196]	; (8006834 <HAL_RCC_ClockConfig+0x358>)
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	492e      	ldr	r1, [pc, #184]	; (8006834 <HAL_RCC_ClockConfig+0x358>)
 800677c:	4313      	orrs	r3, r2
 800677e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0310 	and.w	r3, r3, #16
 8006788:	2b00      	cmp	r3, #0
 800678a:	d010      	beq.n	80067ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699a      	ldr	r2, [r3, #24]
 8006790:	4b28      	ldr	r3, [pc, #160]	; (8006834 <HAL_RCC_ClockConfig+0x358>)
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006798:	429a      	cmp	r2, r3
 800679a:	d208      	bcs.n	80067ae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800679c:	4b25      	ldr	r3, [pc, #148]	; (8006834 <HAL_RCC_ClockConfig+0x358>)
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	4922      	ldr	r1, [pc, #136]	; (8006834 <HAL_RCC_ClockConfig+0x358>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d010      	beq.n	80067dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69da      	ldr	r2, [r3, #28]
 80067be:	4b1d      	ldr	r3, [pc, #116]	; (8006834 <HAL_RCC_ClockConfig+0x358>)
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d208      	bcs.n	80067dc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80067ca:	4b1a      	ldr	r3, [pc, #104]	; (8006834 <HAL_RCC_ClockConfig+0x358>)
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	4917      	ldr	r1, [pc, #92]	; (8006834 <HAL_RCC_ClockConfig+0x358>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80067dc:	f000 f834 	bl	8006848 <HAL_RCC_GetSysClockFreq>
 80067e0:	4602      	mov	r2, r0
 80067e2:	4b14      	ldr	r3, [pc, #80]	; (8006834 <HAL_RCC_ClockConfig+0x358>)
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	0a1b      	lsrs	r3, r3, #8
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	4912      	ldr	r1, [pc, #72]	; (8006838 <HAL_RCC_ClockConfig+0x35c>)
 80067ee:	5ccb      	ldrb	r3, [r1, r3]
 80067f0:	f003 031f 	and.w	r3, r3, #31
 80067f4:	fa22 f303 	lsr.w	r3, r2, r3
 80067f8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80067fa:	4b0e      	ldr	r3, [pc, #56]	; (8006834 <HAL_RCC_ClockConfig+0x358>)
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	4a0d      	ldr	r2, [pc, #52]	; (8006838 <HAL_RCC_ClockConfig+0x35c>)
 8006804:	5cd3      	ldrb	r3, [r2, r3]
 8006806:	f003 031f 	and.w	r3, r3, #31
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	fa22 f303 	lsr.w	r3, r2, r3
 8006810:	4a0a      	ldr	r2, [pc, #40]	; (800683c <HAL_RCC_ClockConfig+0x360>)
 8006812:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006814:	4a0a      	ldr	r2, [pc, #40]	; (8006840 <HAL_RCC_ClockConfig+0x364>)
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800681a:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <HAL_RCC_ClockConfig+0x368>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f7fb f8e4 	bl	80019ec <HAL_InitTick>
 8006824:	4603      	mov	r3, r0
 8006826:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	58024400 	.word	0x58024400
 8006838:	0800a934 	.word	0x0800a934
 800683c:	24000004 	.word	0x24000004
 8006840:	24000000 	.word	0x24000000
 8006844:	24000008 	.word	0x24000008

08006848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006848:	b480      	push	{r7}
 800684a:	b089      	sub	sp, #36	; 0x24
 800684c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800684e:	4bb3      	ldr	r3, [pc, #716]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006856:	2b18      	cmp	r3, #24
 8006858:	f200 8155 	bhi.w	8006b06 <HAL_RCC_GetSysClockFreq+0x2be>
 800685c:	a201      	add	r2, pc, #4	; (adr r2, 8006864 <HAL_RCC_GetSysClockFreq+0x1c>)
 800685e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006862:	bf00      	nop
 8006864:	080068c9 	.word	0x080068c9
 8006868:	08006b07 	.word	0x08006b07
 800686c:	08006b07 	.word	0x08006b07
 8006870:	08006b07 	.word	0x08006b07
 8006874:	08006b07 	.word	0x08006b07
 8006878:	08006b07 	.word	0x08006b07
 800687c:	08006b07 	.word	0x08006b07
 8006880:	08006b07 	.word	0x08006b07
 8006884:	080068ef 	.word	0x080068ef
 8006888:	08006b07 	.word	0x08006b07
 800688c:	08006b07 	.word	0x08006b07
 8006890:	08006b07 	.word	0x08006b07
 8006894:	08006b07 	.word	0x08006b07
 8006898:	08006b07 	.word	0x08006b07
 800689c:	08006b07 	.word	0x08006b07
 80068a0:	08006b07 	.word	0x08006b07
 80068a4:	080068f5 	.word	0x080068f5
 80068a8:	08006b07 	.word	0x08006b07
 80068ac:	08006b07 	.word	0x08006b07
 80068b0:	08006b07 	.word	0x08006b07
 80068b4:	08006b07 	.word	0x08006b07
 80068b8:	08006b07 	.word	0x08006b07
 80068bc:	08006b07 	.word	0x08006b07
 80068c0:	08006b07 	.word	0x08006b07
 80068c4:	080068fb 	.word	0x080068fb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068c8:	4b94      	ldr	r3, [pc, #592]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0320 	and.w	r3, r3, #32
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d009      	beq.n	80068e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068d4:	4b91      	ldr	r3, [pc, #580]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	08db      	lsrs	r3, r3, #3
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	4a90      	ldr	r2, [pc, #576]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068e0:	fa22 f303 	lsr.w	r3, r2, r3
 80068e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80068e6:	e111      	b.n	8006b0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80068e8:	4b8d      	ldr	r3, [pc, #564]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068ea:	61bb      	str	r3, [r7, #24]
    break;
 80068ec:	e10e      	b.n	8006b0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80068ee:	4b8d      	ldr	r3, [pc, #564]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80068f0:	61bb      	str	r3, [r7, #24]
    break;
 80068f2:	e10b      	b.n	8006b0c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80068f4:	4b8c      	ldr	r3, [pc, #560]	; (8006b28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80068f6:	61bb      	str	r3, [r7, #24]
    break;
 80068f8:	e108      	b.n	8006b0c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068fa:	4b88      	ldr	r3, [pc, #544]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006904:	4b85      	ldr	r3, [pc, #532]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006908:	091b      	lsrs	r3, r3, #4
 800690a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800690e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006910:	4b82      	ldr	r3, [pc, #520]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800691a:	4b80      	ldr	r3, [pc, #512]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800691c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691e:	08db      	lsrs	r3, r3, #3
 8006920:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	fb02 f303 	mul.w	r3, r2, r3
 800692a:	ee07 3a90 	vmov	s15, r3
 800692e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006932:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 80e1 	beq.w	8006b00 <HAL_RCC_GetSysClockFreq+0x2b8>
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2b02      	cmp	r3, #2
 8006942:	f000 8083 	beq.w	8006a4c <HAL_RCC_GetSysClockFreq+0x204>
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b02      	cmp	r3, #2
 800694a:	f200 80a1 	bhi.w	8006a90 <HAL_RCC_GetSysClockFreq+0x248>
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <HAL_RCC_GetSysClockFreq+0x114>
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d056      	beq.n	8006a08 <HAL_RCC_GetSysClockFreq+0x1c0>
 800695a:	e099      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800695c:	4b6f      	ldr	r3, [pc, #444]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	d02d      	beq.n	80069c4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006968:	4b6c      	ldr	r3, [pc, #432]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	08db      	lsrs	r3, r3, #3
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	4a6b      	ldr	r2, [pc, #428]	; (8006b20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006974:	fa22 f303 	lsr.w	r3, r2, r3
 8006978:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	ee07 3a90 	vmov	s15, r3
 8006980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006992:	4b62      	ldr	r3, [pc, #392]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699a:	ee07 3a90 	vmov	s15, r3
 800699e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80069a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 80069aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80069c2:	e087      	b.n	8006ad4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006b30 <HAL_RCC_GetSysClockFreq+0x2e8>
 80069d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069d6:	4b51      	ldr	r3, [pc, #324]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 80069ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a06:	e065      	b.n	8006ad4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	ee07 3a90 	vmov	s15, r3
 8006a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a12:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006b34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a1a:	4b40      	ldr	r3, [pc, #256]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a2e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a4a:	e043      	b.n	8006ad4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a56:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006b38 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a5e:	4b2f      	ldr	r3, [pc, #188]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a66:	ee07 3a90 	vmov	s15, r3
 8006a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a72:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a8e:	e021      	b.n	8006ad4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006b34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa2:	4b1e      	ldr	r3, [pc, #120]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ab6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006b2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ad2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006ad4:	4b11      	ldr	r3, [pc, #68]	; (8006b1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad8:	0a5b      	lsrs	r3, r3, #9
 8006ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ade:	3301      	adds	r3, #1
 8006ae0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	ee07 3a90 	vmov	s15, r3
 8006ae8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8006af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006af8:	ee17 3a90 	vmov	r3, s15
 8006afc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006afe:	e005      	b.n	8006b0c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61bb      	str	r3, [r7, #24]
    break;
 8006b04:	e002      	b.n	8006b0c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006b06:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b08:	61bb      	str	r3, [r7, #24]
    break;
 8006b0a:	bf00      	nop
  }

  return sysclockfreq;
 8006b0c:	69bb      	ldr	r3, [r7, #24]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3724      	adds	r7, #36	; 0x24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	58024400 	.word	0x58024400
 8006b20:	03d09000 	.word	0x03d09000
 8006b24:	003d0900 	.word	0x003d0900
 8006b28:	007a1200 	.word	0x007a1200
 8006b2c:	46000000 	.word	0x46000000
 8006b30:	4c742400 	.word	0x4c742400
 8006b34:	4a742400 	.word	0x4a742400
 8006b38:	4af42400 	.word	0x4af42400

08006b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006b42:	f7ff fe81 	bl	8006848 <HAL_RCC_GetSysClockFreq>
 8006b46:	4602      	mov	r2, r0
 8006b48:	4b10      	ldr	r3, [pc, #64]	; (8006b8c <HAL_RCC_GetHCLKFreq+0x50>)
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	0a1b      	lsrs	r3, r3, #8
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	490f      	ldr	r1, [pc, #60]	; (8006b90 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b54:	5ccb      	ldrb	r3, [r1, r3]
 8006b56:	f003 031f 	and.w	r3, r3, #31
 8006b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006b60:	4b0a      	ldr	r3, [pc, #40]	; (8006b8c <HAL_RCC_GetHCLKFreq+0x50>)
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	f003 030f 	and.w	r3, r3, #15
 8006b68:	4a09      	ldr	r2, [pc, #36]	; (8006b90 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b6a:	5cd3      	ldrb	r3, [r2, r3]
 8006b6c:	f003 031f 	and.w	r3, r3, #31
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	fa22 f303 	lsr.w	r3, r2, r3
 8006b76:	4a07      	ldr	r2, [pc, #28]	; (8006b94 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b78:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b7a:	4a07      	ldr	r2, [pc, #28]	; (8006b98 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006b80:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b82:	681b      	ldr	r3, [r3, #0]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	58024400 	.word	0x58024400
 8006b90:	0800a934 	.word	0x0800a934
 8006b94:	24000004 	.word	0x24000004
 8006b98:	24000000 	.word	0x24000000

08006b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006ba0:	f7ff ffcc 	bl	8006b3c <HAL_RCC_GetHCLKFreq>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	091b      	lsrs	r3, r3, #4
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	4904      	ldr	r1, [pc, #16]	; (8006bc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bb2:	5ccb      	ldrb	r3, [r1, r3]
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	58024400 	.word	0x58024400
 8006bc4:	0800a934 	.word	0x0800a934

08006bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006bcc:	f7ff ffb6 	bl	8006b3c <HAL_RCC_GetHCLKFreq>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	4b06      	ldr	r3, [pc, #24]	; (8006bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	0a1b      	lsrs	r3, r3, #8
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	4904      	ldr	r1, [pc, #16]	; (8006bf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bde:	5ccb      	ldrb	r3, [r1, r3]
 8006be0:	f003 031f 	and.w	r3, r3, #31
 8006be4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	58024400 	.word	0x58024400
 8006bf0:	0800a934 	.word	0x0800a934

08006bf4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c00:	2300      	movs	r3, #0
 8006c02:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d03f      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c18:	d02a      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006c1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c1e:	d824      	bhi.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c24:	d018      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c2a:	d81e      	bhi.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c34:	d007      	beq.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006c36:	e018      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c38:	4b9f      	ldr	r3, [pc, #636]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3c:	4a9e      	ldr	r2, [pc, #632]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c44:	e015      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	2102      	movs	r1, #2
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f001 ff1b 	bl	8008a88 <RCCEx_PLL2_Config>
 8006c52:	4603      	mov	r3, r0
 8006c54:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c56:	e00c      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3324      	adds	r3, #36	; 0x24
 8006c5c:	2102      	movs	r1, #2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 ffc4 	bl	8008bec <RCCEx_PLL3_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006c68:	e003      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6e:	e000      	b.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c72:	7dfb      	ldrb	r3, [r7, #23]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d109      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006c78:	4b8f      	ldr	r3, [pc, #572]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c84:	498c      	ldr	r1, [pc, #560]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	650b      	str	r3, [r1, #80]	; 0x50
 8006c8a:	e001      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d03d      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d826      	bhi.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006cc1 	.word	0x08006cc1
 8006cb0:	08006ccf 	.word	0x08006ccf
 8006cb4:	08006ce1 	.word	0x08006ce1
 8006cb8:	08006cf9 	.word	0x08006cf9
 8006cbc:	08006cf9 	.word	0x08006cf9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cc0:	4b7d      	ldr	r3, [pc, #500]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc4:	4a7c      	ldr	r2, [pc, #496]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006ccc:	e015      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f001 fed7 	bl	8008a88 <RCCEx_PLL2_Config>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cde:	e00c      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3324      	adds	r3, #36	; 0x24
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 ff80 	bl	8008bec <RCCEx_PLL3_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006cf0:	e003      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf6:	e000      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d109      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d00:	4b6d      	ldr	r3, [pc, #436]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d04:	f023 0207 	bic.w	r2, r3, #7
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0c:	496a      	ldr	r1, [pc, #424]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	650b      	str	r3, [r1, #80]	; 0x50
 8006d12:	e001      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
 8006d16:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d04a      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d28:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006d2c:	d031      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8006d2e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006d32:	d82b      	bhi.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d38:	d02d      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8006d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d3e:	d825      	bhi.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006d40:	2bc0      	cmp	r3, #192	; 0xc0
 8006d42:	d02a      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006d44:	2bc0      	cmp	r3, #192	; 0xc0
 8006d46:	d821      	bhi.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006d48:	2b80      	cmp	r3, #128	; 0x80
 8006d4a:	d016      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006d4c:	2b80      	cmp	r3, #128	; 0x80
 8006d4e:	d81d      	bhi.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006d54:	2b40      	cmp	r3, #64	; 0x40
 8006d56:	d007      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8006d58:	e018      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d5a:	4b57      	ldr	r3, [pc, #348]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	4a56      	ldr	r2, [pc, #344]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006d66:	e019      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f001 fe8a 	bl	8008a88 <RCCEx_PLL2_Config>
 8006d74:	4603      	mov	r3, r0
 8006d76:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006d78:	e010      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3324      	adds	r3, #36	; 0x24
 8006d7e:	2100      	movs	r1, #0
 8006d80:	4618      	mov	r0, r3
 8006d82:	f001 ff33 	bl	8008bec <RCCEx_PLL3_Config>
 8006d86:	4603      	mov	r3, r0
 8006d88:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006d8a:	e007      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d90:	e004      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8006d92:	bf00      	nop
 8006d94:	e002      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8006d96:	bf00      	nop
 8006d98:	e000      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8006d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006da2:	4b45      	ldr	r3, [pc, #276]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dae:	4942      	ldr	r1, [pc, #264]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	650b      	str	r3, [r1, #80]	; 0x50
 8006db4:	e001      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d04f      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dca:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006dce:	d036      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8006dd0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006dd4:	d830      	bhi.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8006dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dda:	d032      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8006ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de0:	d82a      	bhi.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8006de2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006de6:	d02e      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8006de8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006dec:	d824      	bhi.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8006dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df2:	d018      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8006df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df8:	d81e      	bhi.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8006dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e02:	d007      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8006e04:	e018      	b.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e06:	4b2c      	ldr	r3, [pc, #176]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	4a2b      	ldr	r2, [pc, #172]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006e12:	e019      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	3304      	adds	r3, #4
 8006e18:	2100      	movs	r1, #0
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f001 fe34 	bl	8008a88 <RCCEx_PLL2_Config>
 8006e20:	4603      	mov	r3, r0
 8006e22:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006e24:	e010      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	3324      	adds	r3, #36	; 0x24
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f001 fedd 	bl	8008bec <RCCEx_PLL3_Config>
 8006e32:	4603      	mov	r3, r0
 8006e34:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006e36:	e007      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e3c:	e004      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8006e3e:	bf00      	nop
 8006e40:	e002      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8006e42:	bf00      	nop
 8006e44:	e000      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8006e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d109      	bne.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006e4e:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e52:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5a:	4917      	ldr	r1, [pc, #92]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	650b      	str	r3, [r1, #80]	; 0x50
 8006e60:	e001      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
 8006e64:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d034      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e76:	2b30      	cmp	r3, #48	; 0x30
 8006e78:	d01c      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006e7a:	2b30      	cmp	r3, #48	; 0x30
 8006e7c:	d817      	bhi.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d00c      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d813      	bhi.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d018      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8006e8a:	2b10      	cmp	r3, #16
 8006e8c:	d10f      	bne.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e8e:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e92:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006e9a:	e010      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	2102      	movs	r1, #2
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f001 fdf0 	bl	8008a88 <RCCEx_PLL2_Config>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006eac:	e007      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb2:	e004      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8006eb4:	bf00      	nop
 8006eb6:	e002      	b.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006eb8:	58024400 	.word	0x58024400
      break;
 8006ebc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d109      	bne.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006ec4:	4b9b      	ldr	r3, [pc, #620]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed0:	4998      	ldr	r1, [pc, #608]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ed6:	e001      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
 8006eda:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d047      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ef0:	d030      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006ef2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ef6:	d82a      	bhi.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006ef8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006efc:	d02c      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8006efe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f02:	d824      	bhi.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f08:	d018      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f0e:	d81e      	bhi.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8006f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f18:	d007      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006f1a:	e018      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1c:	4b85      	ldr	r3, [pc, #532]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	4a84      	ldr	r2, [pc, #528]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f28:	e017      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	2100      	movs	r1, #0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 fda9 	bl	8008a88 <RCCEx_PLL2_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f3a:	e00e      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3324      	adds	r3, #36	; 0x24
 8006f40:	2100      	movs	r1, #0
 8006f42:	4618      	mov	r0, r3
 8006f44:	f001 fe52 	bl	8008bec <RCCEx_PLL3_Config>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006f4c:	e005      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	75fb      	strb	r3, [r7, #23]
      break;
 8006f52:	e002      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8006f54:	bf00      	nop
 8006f56:	e000      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8006f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d109      	bne.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f60:	4b74      	ldr	r3, [pc, #464]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f64:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f6c:	4971      	ldr	r1, [pc, #452]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	650b      	str	r3, [r1, #80]	; 0x50
 8006f72:	e001      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
 8006f76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d049      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f8c:	d02e      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006f8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f92:	d828      	bhi.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006f94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f98:	d02a      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006f9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f9e:	d822      	bhi.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006fa0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fa4:	d026      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006fa6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006faa:	d81c      	bhi.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fb0:	d010      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006fb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fb6:	d816      	bhi.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01d      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc0:	d111      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 fd5d 	bl	8008a88 <RCCEx_PLL2_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006fd2:	e012      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3324      	adds	r3, #36	; 0x24
 8006fd8:	2101      	movs	r1, #1
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 fe06 	bl	8008bec <RCCEx_PLL3_Config>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006fe4:	e009      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8006fea:	e006      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006fec:	bf00      	nop
 8006fee:	e004      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006ff0:	bf00      	nop
 8006ff2:	e002      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006ff4:	bf00      	nop
 8006ff6:	e000      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8006ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d109      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007000:	4b4c      	ldr	r3, [pc, #304]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007004:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800700c:	4949      	ldr	r1, [pc, #292]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800700e:	4313      	orrs	r3, r2
 8007010:	650b      	str	r3, [r1, #80]	; 0x50
 8007012:	e001      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d053      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800702a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800702e:	d034      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007030:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007034:	d82e      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007036:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800703a:	d030      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800703c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007040:	d828      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007046:	d02c      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704c:	d822      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800704e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007052:	d028      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007054:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007058:	d81c      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800705a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705e:	d010      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8007060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007064:	d816      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01f      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800706a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800706e:	d111      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3304      	adds	r3, #4
 8007074:	2101      	movs	r1, #1
 8007076:	4618      	mov	r0, r3
 8007078:	f001 fd06 	bl	8008a88 <RCCEx_PLL2_Config>
 800707c:	4603      	mov	r3, r0
 800707e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007080:	e014      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3324      	adds	r3, #36	; 0x24
 8007086:	2101      	movs	r1, #1
 8007088:	4618      	mov	r0, r3
 800708a:	f001 fdaf 	bl	8008bec <RCCEx_PLL3_Config>
 800708e:	4603      	mov	r3, r0
 8007090:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007092:	e00b      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	75fb      	strb	r3, [r7, #23]
      break;
 8007098:	e008      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800709a:	bf00      	nop
 800709c:	e006      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800709e:	bf00      	nop
 80070a0:	e004      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80070a2:	bf00      	nop
 80070a4:	e002      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80070a6:	bf00      	nop
 80070a8:	e000      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80070aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10a      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070b2:	4b20      	ldr	r3, [pc, #128]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80070b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070c0:	491c      	ldr	r1, [pc, #112]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	658b      	str	r3, [r1, #88]	; 0x58
 80070c6:	e001      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d031      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e0:	d00e      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80070e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e6:	d814      	bhi.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d015      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80070ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070f0:	d10f      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070f2:	4b10      	ldr	r3, [pc, #64]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80070f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f6:	4a0f      	ldr	r2, [pc, #60]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80070f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80070fe:	e00c      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3304      	adds	r3, #4
 8007104:	2101      	movs	r1, #1
 8007106:	4618      	mov	r0, r3
 8007108:	f001 fcbe 	bl	8008a88 <RCCEx_PLL2_Config>
 800710c:	4603      	mov	r3, r0
 800710e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007110:	e003      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	75fb      	strb	r3, [r7, #23]
      break;
 8007116:	e000      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8007118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800711a:	7dfb      	ldrb	r3, [r7, #23]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10b      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007120:	4b04      	ldr	r3, [pc, #16]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007124:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712c:	4901      	ldr	r1, [pc, #4]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800712e:	4313      	orrs	r3, r2
 8007130:	650b      	str	r3, [r1, #80]	; 0x50
 8007132:	e003      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x548>
 8007134:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007138:	7dfb      	ldrb	r3, [r7, #23]
 800713a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d032      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714c:	2b03      	cmp	r3, #3
 800714e:	d81b      	bhi.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007150:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007156:	bf00      	nop
 8007158:	0800718f 	.word	0x0800718f
 800715c:	08007169 	.word	0x08007169
 8007160:	08007177 	.word	0x08007177
 8007164:	0800718f 	.word	0x0800718f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007168:	4bb2      	ldr	r3, [pc, #712]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	4ab1      	ldr	r2, [pc, #708]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800716e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007172:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007174:	e00c      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3304      	adds	r3, #4
 800717a:	2102      	movs	r1, #2
 800717c:	4618      	mov	r0, r3
 800717e:	f001 fc83 	bl	8008a88 <RCCEx_PLL2_Config>
 8007182:	4603      	mov	r3, r0
 8007184:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007186:	e003      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	75fb      	strb	r3, [r7, #23]
      break;
 800718c:	e000      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800718e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007190:	7dfb      	ldrb	r3, [r7, #23]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d109      	bne.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007196:	4ba7      	ldr	r3, [pc, #668]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719a:	f023 0203 	bic.w	r2, r3, #3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a2:	49a4      	ldr	r1, [pc, #656]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80071a8:	e001      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
 80071ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f000 8086 	beq.w	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071bc:	4b9e      	ldr	r3, [pc, #632]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a9d      	ldr	r2, [pc, #628]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80071c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071c8:	f7fa fc5a 	bl	8001a80 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071ce:	e009      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071d0:	f7fa fc56 	bl	8001a80 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b64      	cmp	r3, #100	; 0x64
 80071dc:	d902      	bls.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	75fb      	strb	r3, [r7, #23]
        break;
 80071e2:	e005      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071e4:	4b94      	ldr	r3, [pc, #592]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0ef      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d166      	bne.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80071f6:	4b8f      	ldr	r3, [pc, #572]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80071f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007200:	4053      	eors	r3, r2
 8007202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007206:	2b00      	cmp	r3, #0
 8007208:	d013      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800720a:	4b8a      	ldr	r3, [pc, #552]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800720c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007212:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007214:	4b87      	ldr	r3, [pc, #540]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007218:	4a86      	ldr	r2, [pc, #536]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800721a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800721e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007220:	4b84      	ldr	r3, [pc, #528]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007224:	4a83      	ldr	r2, [pc, #524]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800722a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800722c:	4a81      	ldr	r2, [pc, #516]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800723c:	d115      	bne.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800723e:	f7fa fc1f 	bl	8001a80 <HAL_GetTick>
 8007242:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007244:	e00b      	b.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007246:	f7fa fc1b 	bl	8001a80 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	f241 3288 	movw	r2, #5000	; 0x1388
 8007254:	4293      	cmp	r3, r2
 8007256:	d902      	bls.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	75fb      	strb	r3, [r7, #23]
            break;
 800725c:	e005      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800725e:	4b75      	ldr	r3, [pc, #468]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0ed      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800726a:	7dfb      	ldrb	r3, [r7, #23]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d126      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800727a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800727e:	d10d      	bne.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8007280:	4b6c      	ldr	r3, [pc, #432]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800728e:	0919      	lsrs	r1, r3, #4
 8007290:	4b6a      	ldr	r3, [pc, #424]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007292:	400b      	ands	r3, r1
 8007294:	4967      	ldr	r1, [pc, #412]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8007296:	4313      	orrs	r3, r2
 8007298:	610b      	str	r3, [r1, #16]
 800729a:	e005      	b.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 800729c:	4b65      	ldr	r3, [pc, #404]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	4a64      	ldr	r2, [pc, #400]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80072a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80072a6:	6113      	str	r3, [r2, #16]
 80072a8:	4b62      	ldr	r3, [pc, #392]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80072aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072b6:	495f      	ldr	r1, [pc, #380]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	670b      	str	r3, [r1, #112]	; 0x70
 80072bc:	e004      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072be:	7dfb      	ldrb	r3, [r7, #23]
 80072c0:	75bb      	strb	r3, [r7, #22]
 80072c2:	e001      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c4:	7dfb      	ldrb	r3, [r7, #23]
 80072c6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d07f      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072da:	2b28      	cmp	r3, #40	; 0x28
 80072dc:	d866      	bhi.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80072de:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80072e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e4:	080073b3 	.word	0x080073b3
 80072e8:	080073ad 	.word	0x080073ad
 80072ec:	080073ad 	.word	0x080073ad
 80072f0:	080073ad 	.word	0x080073ad
 80072f4:	080073ad 	.word	0x080073ad
 80072f8:	080073ad 	.word	0x080073ad
 80072fc:	080073ad 	.word	0x080073ad
 8007300:	080073ad 	.word	0x080073ad
 8007304:	08007389 	.word	0x08007389
 8007308:	080073ad 	.word	0x080073ad
 800730c:	080073ad 	.word	0x080073ad
 8007310:	080073ad 	.word	0x080073ad
 8007314:	080073ad 	.word	0x080073ad
 8007318:	080073ad 	.word	0x080073ad
 800731c:	080073ad 	.word	0x080073ad
 8007320:	080073ad 	.word	0x080073ad
 8007324:	0800739b 	.word	0x0800739b
 8007328:	080073ad 	.word	0x080073ad
 800732c:	080073ad 	.word	0x080073ad
 8007330:	080073ad 	.word	0x080073ad
 8007334:	080073ad 	.word	0x080073ad
 8007338:	080073ad 	.word	0x080073ad
 800733c:	080073ad 	.word	0x080073ad
 8007340:	080073ad 	.word	0x080073ad
 8007344:	080073b3 	.word	0x080073b3
 8007348:	080073ad 	.word	0x080073ad
 800734c:	080073ad 	.word	0x080073ad
 8007350:	080073ad 	.word	0x080073ad
 8007354:	080073ad 	.word	0x080073ad
 8007358:	080073ad 	.word	0x080073ad
 800735c:	080073ad 	.word	0x080073ad
 8007360:	080073ad 	.word	0x080073ad
 8007364:	080073b3 	.word	0x080073b3
 8007368:	080073ad 	.word	0x080073ad
 800736c:	080073ad 	.word	0x080073ad
 8007370:	080073ad 	.word	0x080073ad
 8007374:	080073ad 	.word	0x080073ad
 8007378:	080073ad 	.word	0x080073ad
 800737c:	080073ad 	.word	0x080073ad
 8007380:	080073ad 	.word	0x080073ad
 8007384:	080073b3 	.word	0x080073b3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	3304      	adds	r3, #4
 800738c:	2101      	movs	r1, #1
 800738e:	4618      	mov	r0, r3
 8007390:	f001 fb7a 	bl	8008a88 <RCCEx_PLL2_Config>
 8007394:	4603      	mov	r3, r0
 8007396:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007398:	e00c      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3324      	adds	r3, #36	; 0x24
 800739e:	2101      	movs	r1, #1
 80073a0:	4618      	mov	r0, r3
 80073a2:	f001 fc23 	bl	8008bec <RCCEx_PLL3_Config>
 80073a6:	4603      	mov	r3, r0
 80073a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80073aa:	e003      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	75fb      	strb	r3, [r7, #23]
      break;
 80073b0:	e000      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80073b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10a      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80073ba:	4b1e      	ldr	r3, [pc, #120]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80073bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073be:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073c8:	491a      	ldr	r1, [pc, #104]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	654b      	str	r3, [r1, #84]	; 0x54
 80073ce:	e001      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d0:	7dfb      	ldrb	r3, [r7, #23]
 80073d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d03f      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e4:	2b05      	cmp	r3, #5
 80073e6:	d821      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x838>
 80073e8:	a201      	add	r2, pc, #4	; (adr r2, 80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80073ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ee:	bf00      	nop
 80073f0:	08007441 	.word	0x08007441
 80073f4:	08007409 	.word	0x08007409
 80073f8:	0800741b 	.word	0x0800741b
 80073fc:	08007441 	.word	0x08007441
 8007400:	08007441 	.word	0x08007441
 8007404:	08007441 	.word	0x08007441
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3304      	adds	r3, #4
 800740c:	2101      	movs	r1, #1
 800740e:	4618      	mov	r0, r3
 8007410:	f001 fb3a 	bl	8008a88 <RCCEx_PLL2_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007418:	e013      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3324      	adds	r3, #36	; 0x24
 800741e:	2101      	movs	r1, #1
 8007420:	4618      	mov	r0, r3
 8007422:	f001 fbe3 	bl	8008bec <RCCEx_PLL3_Config>
 8007426:	4603      	mov	r3, r0
 8007428:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800742a:	e00a      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	75fb      	strb	r3, [r7, #23]
      break;
 8007430:	e007      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8007432:	bf00      	nop
 8007434:	58024400 	.word	0x58024400
 8007438:	58024800 	.word	0x58024800
 800743c:	00ffffcf 	.word	0x00ffffcf
      break;
 8007440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007442:	7dfb      	ldrb	r3, [r7, #23]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d109      	bne.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007448:	4b9f      	ldr	r3, [pc, #636]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800744a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744c:	f023 0207 	bic.w	r2, r3, #7
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007454:	499c      	ldr	r1, [pc, #624]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007456:	4313      	orrs	r3, r2
 8007458:	654b      	str	r3, [r1, #84]	; 0x54
 800745a:	e001      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b00      	cmp	r3, #0
 800746a:	d039      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007472:	2b05      	cmp	r3, #5
 8007474:	d820      	bhi.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8007476:	a201      	add	r2, pc, #4	; (adr r2, 800747c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8007478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747c:	080074bf 	.word	0x080074bf
 8007480:	08007495 	.word	0x08007495
 8007484:	080074a7 	.word	0x080074a7
 8007488:	080074bf 	.word	0x080074bf
 800748c:	080074bf 	.word	0x080074bf
 8007490:	080074bf 	.word	0x080074bf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3304      	adds	r3, #4
 8007498:	2101      	movs	r1, #1
 800749a:	4618      	mov	r0, r3
 800749c:	f001 faf4 	bl	8008a88 <RCCEx_PLL2_Config>
 80074a0:	4603      	mov	r3, r0
 80074a2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80074a4:	e00c      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	3324      	adds	r3, #36	; 0x24
 80074aa:	2101      	movs	r1, #1
 80074ac:	4618      	mov	r0, r3
 80074ae:	f001 fb9d 	bl	8008bec <RCCEx_PLL3_Config>
 80074b2:	4603      	mov	r3, r0
 80074b4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80074b6:	e003      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	75fb      	strb	r3, [r7, #23]
      break;
 80074bc:	e000      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80074be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10a      	bne.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80074c6:	4b80      	ldr	r3, [pc, #512]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80074c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ca:	f023 0207 	bic.w	r2, r3, #7
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074d4:	497c      	ldr	r1, [pc, #496]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	658b      	str	r3, [r1, #88]	; 0x58
 80074da:	e001      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074dc:	7dfb      	ldrb	r3, [r7, #23]
 80074de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0320 	and.w	r3, r3, #32
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d04b      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074f6:	d02e      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80074f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074fc:	d828      	bhi.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80074fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007502:	d02a      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007508:	d822      	bhi.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800750a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800750e:	d026      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007510:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007514:	d81c      	bhi.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800751a:	d010      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800751c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007520:	d816      	bhi.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8007522:	2b00      	cmp	r3, #0
 8007524:	d01d      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007526:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800752a:	d111      	bne.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3304      	adds	r3, #4
 8007530:	2100      	movs	r1, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f001 faa8 	bl	8008a88 <RCCEx_PLL2_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800753c:	e012      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3324      	adds	r3, #36	; 0x24
 8007542:	2102      	movs	r1, #2
 8007544:	4618      	mov	r0, r3
 8007546:	f001 fb51 	bl	8008bec <RCCEx_PLL3_Config>
 800754a:	4603      	mov	r3, r0
 800754c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800754e:	e009      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	75fb      	strb	r3, [r7, #23]
      break;
 8007554:	e006      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007556:	bf00      	nop
 8007558:	e004      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800755a:	bf00      	nop
 800755c:	e002      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800755e:	bf00      	nop
 8007560:	e000      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8007562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10a      	bne.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800756a:	4b57      	ldr	r3, [pc, #348]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800756c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007578:	4953      	ldr	r1, [pc, #332]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800757a:	4313      	orrs	r3, r2
 800757c:	654b      	str	r3, [r1, #84]	; 0x54
 800757e:	e001      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007580:	7dfb      	ldrb	r3, [r7, #23]
 8007582:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758c:	2b00      	cmp	r3, #0
 800758e:	d04b      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007596:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800759a:	d02e      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800759c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80075a0:	d828      	bhi.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80075a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a6:	d02a      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80075a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ac:	d822      	bhi.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80075ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075b2:	d026      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80075b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075b8:	d81c      	bhi.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80075ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075be:	d010      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80075c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075c4:	d816      	bhi.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d01d      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80075ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ce:	d111      	bne.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3304      	adds	r3, #4
 80075d4:	2100      	movs	r1, #0
 80075d6:	4618      	mov	r0, r3
 80075d8:	f001 fa56 	bl	8008a88 <RCCEx_PLL2_Config>
 80075dc:	4603      	mov	r3, r0
 80075de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80075e0:	e012      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3324      	adds	r3, #36	; 0x24
 80075e6:	2102      	movs	r1, #2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 faff 	bl	8008bec <RCCEx_PLL3_Config>
 80075ee:	4603      	mov	r3, r0
 80075f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80075f2:	e009      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	75fb      	strb	r3, [r7, #23]
      break;
 80075f8:	e006      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80075fa:	bf00      	nop
 80075fc:	e004      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80075fe:	bf00      	nop
 8007600:	e002      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007602:	bf00      	nop
 8007604:	e000      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8007606:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800760e:	4b2e      	ldr	r3, [pc, #184]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8007610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007612:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800761c:	492a      	ldr	r1, [pc, #168]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800761e:	4313      	orrs	r3, r2
 8007620:	658b      	str	r3, [r1, #88]	; 0x58
 8007622:	e001      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007630:	2b00      	cmp	r3, #0
 8007632:	d04d      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800763a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800763e:	d02e      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8007640:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007644:	d828      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800764a:	d02a      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800764c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007650:	d822      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8007652:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007656:	d026      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007658:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800765c:	d81c      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800765e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007662:	d010      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8007664:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007668:	d816      	bhi.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d01d      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800766e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007672:	d111      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3304      	adds	r3, #4
 8007678:	2100      	movs	r1, #0
 800767a:	4618      	mov	r0, r3
 800767c:	f001 fa04 	bl	8008a88 <RCCEx_PLL2_Config>
 8007680:	4603      	mov	r3, r0
 8007682:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007684:	e012      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	3324      	adds	r3, #36	; 0x24
 800768a:	2102      	movs	r1, #2
 800768c:	4618      	mov	r0, r3
 800768e:	f001 faad 	bl	8008bec <RCCEx_PLL3_Config>
 8007692:	4603      	mov	r3, r0
 8007694:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007696:	e009      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	75fb      	strb	r3, [r7, #23]
      break;
 800769c:	e006      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800769e:	bf00      	nop
 80076a0:	e004      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80076a2:	bf00      	nop
 80076a4:	e002      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80076a6:	bf00      	nop
 80076a8:	e000      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80076aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10c      	bne.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80076b2:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80076b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076c0:	4901      	ldr	r1, [pc, #4]	; (80076c8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	658b      	str	r3, [r1, #88]	; 0x58
 80076c6:	e003      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80076c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
 80076ce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0308 	and.w	r3, r3, #8
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d01a      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e6:	d10a      	bne.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3324      	adds	r3, #36	; 0x24
 80076ec:	2102      	movs	r1, #2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f001 fa7c 	bl	8008bec <RCCEx_PLL3_Config>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80076fe:	4b8c      	ldr	r3, [pc, #560]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007702:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800770c:	4988      	ldr	r1, [pc, #544]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800770e:	4313      	orrs	r3, r2
 8007710:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0310 	and.w	r3, r3, #16
 800771a:	2b00      	cmp	r3, #0
 800771c:	d01a      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007728:	d10a      	bne.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	3324      	adds	r3, #36	; 0x24
 800772e:	2102      	movs	r1, #2
 8007730:	4618      	mov	r0, r3
 8007732:	f001 fa5b 	bl	8008bec <RCCEx_PLL3_Config>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007740:	4b7b      	ldr	r3, [pc, #492]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800774e:	4978      	ldr	r1, [pc, #480]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007750:	4313      	orrs	r3, r2
 8007752:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d034      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800776a:	d01d      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800776c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007770:	d817      	bhi.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8007776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800777a:	d009      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800777c:	e011      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3304      	adds	r3, #4
 8007782:	2100      	movs	r1, #0
 8007784:	4618      	mov	r0, r3
 8007786:	f001 f97f 	bl	8008a88 <RCCEx_PLL2_Config>
 800778a:	4603      	mov	r3, r0
 800778c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800778e:	e00c      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3324      	adds	r3, #36	; 0x24
 8007794:	2102      	movs	r1, #2
 8007796:	4618      	mov	r0, r3
 8007798:	f001 fa28 	bl	8008bec <RCCEx_PLL3_Config>
 800779c:	4603      	mov	r3, r0
 800779e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80077a0:	e003      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	75fb      	strb	r3, [r7, #23]
      break;
 80077a6:	e000      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80077a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10a      	bne.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077b0:	4b5f      	ldr	r3, [pc, #380]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80077b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077be:	495c      	ldr	r1, [pc, #368]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	658b      	str	r3, [r1, #88]	; 0x58
 80077c4:	e001      	b.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d033      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077e0:	d01c      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80077e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077e6:	d816      	bhi.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80077e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077ec:	d003      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80077ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077f2:	d007      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80077f4:	e00f      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f6:	4b4e      	ldr	r3, [pc, #312]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80077f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fa:	4a4d      	ldr	r2, [pc, #308]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80077fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007800:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007802:	e00c      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3324      	adds	r3, #36	; 0x24
 8007808:	2101      	movs	r1, #1
 800780a:	4618      	mov	r0, r3
 800780c:	f001 f9ee 	bl	8008bec <RCCEx_PLL3_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007814:	e003      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	75fb      	strb	r3, [r7, #23]
      break;
 800781a:	e000      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800781c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10a      	bne.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007824:	4b42      	ldr	r3, [pc, #264]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007828:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007832:	493f      	ldr	r1, [pc, #252]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007834:	4313      	orrs	r3, r2
 8007836:	654b      	str	r3, [r1, #84]	; 0x54
 8007838:	e001      	b.n	800783e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d029      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8007852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007856:	d007      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007858:	e00f      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800785a:	4b35      	ldr	r3, [pc, #212]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785e:	4a34      	ldr	r2, [pc, #208]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007864:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007866:	e00b      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3304      	adds	r3, #4
 800786c:	2102      	movs	r1, #2
 800786e:	4618      	mov	r0, r3
 8007870:	f001 f90a 	bl	8008a88 <RCCEx_PLL2_Config>
 8007874:	4603      	mov	r3, r0
 8007876:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007878:	e002      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	75fb      	strb	r3, [r7, #23]
      break;
 800787e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007880:	7dfb      	ldrb	r3, [r7, #23]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d109      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007886:	4b2a      	ldr	r3, [pc, #168]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800788a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007892:	4927      	ldr	r1, [pc, #156]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007894:	4313      	orrs	r3, r2
 8007896:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007898:	e001      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	3324      	adds	r3, #36	; 0x24
 80078ae:	2102      	movs	r1, #2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f001 f99b 	bl	8008bec <RCCEx_PLL3_Config>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d035      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078d6:	d017      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80078d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078dc:	d811      	bhi.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80078de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078e2:	d013      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80078e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078e8:	d80b      	bhi.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d010      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80078ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f2:	d106      	bne.n	8007902 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078f4:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80078f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f8:	4a0d      	ldr	r2, [pc, #52]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80078fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007900:	e007      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	75fb      	strb	r3, [r7, #23]
      break;
 8007906:	e004      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007908:	bf00      	nop
 800790a:	e002      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800790c:	bf00      	nop
 800790e:	e000      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8007910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007912:	7dfb      	ldrb	r3, [r7, #23]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10d      	bne.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007918:	4b05      	ldr	r3, [pc, #20]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800791a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007926:	4902      	ldr	r1, [pc, #8]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8007928:	4313      	orrs	r3, r2
 800792a:	654b      	str	r3, [r1, #84]	; 0x54
 800792c:	e004      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800792e:	bf00      	nop
 8007930:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007934:	7dfb      	ldrb	r3, [r7, #23]
 8007936:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d008      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007944:	4b30      	ldr	r3, [pc, #192]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007948:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007950:	492d      	ldr	r1, [pc, #180]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007952:	4313      	orrs	r3, r2
 8007954:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d008      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007962:	4b29      	ldr	r3, [pc, #164]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007966:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800796e:	4926      	ldr	r1, [pc, #152]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007970:	4313      	orrs	r3, r2
 8007972:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800797c:	2b00      	cmp	r3, #0
 800797e:	d008      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007980:	4b21      	ldr	r3, [pc, #132]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007984:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798c:	491e      	ldr	r1, [pc, #120]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800798e:	4313      	orrs	r3, r2
 8007990:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00d      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800799e:	4b1a      	ldr	r3, [pc, #104]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	4a19      	ldr	r2, [pc, #100]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80079a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079a8:	6113      	str	r3, [r2, #16]
 80079aa:	4b17      	ldr	r3, [pc, #92]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80079ac:	691a      	ldr	r2, [r3, #16]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80079b4:	4914      	ldr	r1, [pc, #80]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	da08      	bge.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079c2:	4b11      	ldr	r3, [pc, #68]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80079c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ce:	490e      	ldr	r1, [pc, #56]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d009      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079e0:	4b09      	ldr	r3, [pc, #36]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80079e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ee:	4906      	ldr	r1, [pc, #24]	; (8007a08 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80079f4:	7dbb      	ldrb	r3, [r7, #22]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	e000      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	58024400 	.word	0x58024400

08007a0c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b090      	sub	sp, #64	; 0x40
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a1a:	f040 8089 	bne.w	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007a1e:	4b91      	ldr	r3, [pc, #580]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2a:	2b04      	cmp	r3, #4
 8007a2c:	d87d      	bhi.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8007a2e:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a34:	08007a49 	.word	0x08007a49
 8007a38:	08007a6d 	.word	0x08007a6d
 8007a3c:	08007a91 	.word	0x08007a91
 8007a40:	08007b25 	.word	0x08007b25
 8007a44:	08007ab5 	.word	0x08007ab5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007a48:	4b86      	ldr	r3, [pc, #536]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a54:	d107      	bne.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fec2 	bl	80087e4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a64:	e3f4      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a6a:	e3f1      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a6c:	4b7d      	ldr	r3, [pc, #500]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a78:	d107      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a7a:	f107 0318 	add.w	r3, r7, #24
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 fc08 	bl	8008294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007a88:	e3e2      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a8e:	e3df      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a90:	4b74      	ldr	r3, [pc, #464]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a9c:	d107      	bne.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a9e:	f107 030c 	add.w	r3, r7, #12
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fd4a 	bl	800853c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007aac:	e3d0      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ab2:	e3cd      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ab4:	4b6b      	ldr	r3, [pc, #428]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007abc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007abe:	4b69      	ldr	r3, [pc, #420]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d10c      	bne.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d109      	bne.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ad0:	4b64      	ldr	r3, [pc, #400]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	08db      	lsrs	r3, r3, #3
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	4a63      	ldr	r2, [pc, #396]	; (8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007adc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ae2:	e01e      	b.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ae4:	4b5f      	ldr	r3, [pc, #380]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af0:	d106      	bne.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007af8:	d102      	bne.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007afa:	4b5c      	ldr	r3, [pc, #368]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007afe:	e010      	b.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b00:	4b58      	ldr	r3, [pc, #352]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b0c:	d106      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b14:	d102      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007b16:	4b56      	ldr	r3, [pc, #344]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b1a:	e002      	b.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007b20:	e396      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007b22:	e395      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b24:	4b53      	ldr	r3, [pc, #332]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007b26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b28:	e392      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b2e:	e38f      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b36:	f040 809f 	bne.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8007b3a:	4b4a      	ldr	r3, [pc, #296]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b3e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007b42:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b4a:	d04d      	beq.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b52:	f200 8084 	bhi.w	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	2bc0      	cmp	r3, #192	; 0xc0
 8007b5a:	d07d      	beq.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	2bc0      	cmp	r3, #192	; 0xc0
 8007b60:	d87d      	bhi.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b64:	2b80      	cmp	r3, #128	; 0x80
 8007b66:	d02d      	beq.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	2b80      	cmp	r3, #128	; 0x80
 8007b6c:	d877      	bhi.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8007b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b76:	2b40      	cmp	r3, #64	; 0x40
 8007b78:	d012      	beq.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007b7a:	e070      	b.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b7c:	4b39      	ldr	r3, [pc, #228]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b88:	d107      	bne.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 fe28 	bl	80087e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b98:	e35a      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b9e:	e357      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ba0:	4b30      	ldr	r3, [pc, #192]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ba8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bac:	d107      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bae:	f107 0318 	add.w	r3, r7, #24
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 fb6e 	bl	8008294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007bbc:	e348      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bc2:	e345      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007bc4:	4b27      	ldr	r3, [pc, #156]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bd0:	d107      	bne.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bd2:	f107 030c 	add.w	r3, r7, #12
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 fcb0 	bl	800853c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007be0:	e336      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007be2:	2300      	movs	r3, #0
 8007be4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007be6:	e333      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007be8:	4b1e      	ldr	r3, [pc, #120]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bf0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bf2:	4b1c      	ldr	r3, [pc, #112]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0304 	and.w	r3, r3, #4
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	d10c      	bne.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8007bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d109      	bne.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c04:	4b17      	ldr	r3, [pc, #92]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	08db      	lsrs	r3, r3, #3
 8007c0a:	f003 0303 	and.w	r3, r3, #3
 8007c0e:	4a16      	ldr	r2, [pc, #88]	; (8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007c10:	fa22 f303 	lsr.w	r3, r2, r3
 8007c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c16:	e01e      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c18:	4b12      	ldr	r3, [pc, #72]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c24:	d106      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8007c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c2c:	d102      	bne.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007c2e:	4b0f      	ldr	r3, [pc, #60]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c32:	e010      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c34:	4b0b      	ldr	r3, [pc, #44]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c40:	d106      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c48:	d102      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007c4a:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c4e:	e002      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007c54:	e2fc      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007c56:	e2fb      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c58:	4b06      	ldr	r3, [pc, #24]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c5c:	e2f8      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c62:	e2f5      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007c64:	58024400 	.word	0x58024400
 8007c68:	03d09000 	.word	0x03d09000
 8007c6c:	003d0900 	.word	0x003d0900
 8007c70:	007a1200 	.word	0x007a1200
 8007c74:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c7e:	f040 809c 	bne.w	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8007c82:	4b9d      	ldr	r3, [pc, #628]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c86:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007c8a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c92:	d054      	beq.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8007c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c9a:	f200 808b 	bhi.w	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007ca4:	f000 8083 	beq.w	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007caa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007cae:	f200 8081 	bhi.w	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8007cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cb8:	d02f      	beq.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc0:	d878      	bhi.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d004      	beq.n	8007cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cce:	d012      	beq.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8007cd0:	e070      	b.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cd2:	4b89      	ldr	r3, [pc, #548]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cde:	d107      	bne.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 fd7d 	bl	80087e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007cee:	e2af      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007cf4:	e2ac      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cf6:	4b80      	ldr	r3, [pc, #512]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d02:	d107      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d04:	f107 0318 	add.w	r3, r7, #24
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 fac3 	bl	8008294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d12:	e29d      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d18:	e29a      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d1a:	4b77      	ldr	r3, [pc, #476]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d26:	d107      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d28:	f107 030c 	add.w	r3, r7, #12
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 fc05 	bl	800853c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007d36:	e28b      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007d3c:	e288      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007d3e:	4b6e      	ldr	r3, [pc, #440]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d46:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d48:	4b6b      	ldr	r3, [pc, #428]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0304 	and.w	r3, r3, #4
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d10c      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8007d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d109      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d5a:	4b67      	ldr	r3, [pc, #412]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	08db      	lsrs	r3, r3, #3
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	4a65      	ldr	r2, [pc, #404]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8007d66:	fa22 f303 	lsr.w	r3, r2, r3
 8007d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d6c:	e01e      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d6e:	4b62      	ldr	r3, [pc, #392]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d7a:	d106      	bne.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8007d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d82:	d102      	bne.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007d84:	4b5e      	ldr	r3, [pc, #376]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d88:	e010      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d8a:	4b5b      	ldr	r3, [pc, #364]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d96:	d106      	bne.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8007d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d9e:	d102      	bne.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007da0:	4b58      	ldr	r3, [pc, #352]	; (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8007da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da4:	e002      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007da6:	2300      	movs	r3, #0
 8007da8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8007daa:	e251      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007dac:	e250      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007dae:	4b56      	ldr	r3, [pc, #344]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8007db0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007db2:	e24d      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8007db4:	2300      	movs	r3, #0
 8007db6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007db8:	e24a      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc0:	f040 80a7 	bne.w	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007dc4:	4b4c      	ldr	r3, [pc, #304]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007dcc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dd4:	d055      	beq.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ddc:	f200 8096 	bhi.w	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8007de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007de6:	f000 8084 	beq.w	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8007dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007df0:	f200 808c 	bhi.w	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8007df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dfa:	d030      	beq.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e02:	f200 8083 	bhi.w	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8007e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d004      	beq.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e12:	d012      	beq.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8007e14:	e07a      	b.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e16:	4b38      	ldr	r3, [pc, #224]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e22:	d107      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fcdb 	bl	80087e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e32:	e20d      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007e34:	2300      	movs	r3, #0
 8007e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e38:	e20a      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e3a:	4b2f      	ldr	r3, [pc, #188]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e46:	d107      	bne.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e48:	f107 0318 	add.w	r3, r7, #24
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 fa21 	bl	8008294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e56:	e1fb      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e5c:	e1f8      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e5e:	4b26      	ldr	r3, [pc, #152]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e6a:	d107      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e6c:	f107 030c 	add.w	r3, r7, #12
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 fb63 	bl	800853c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007e7a:	e1e9      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e80:	e1e6      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e82:	4b1d      	ldr	r3, [pc, #116]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e8a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0304 	and.w	r3, r3, #4
 8007e94:	2b04      	cmp	r3, #4
 8007e96:	d10c      	bne.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8007e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d109      	bne.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e9e:	4b16      	ldr	r3, [pc, #88]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	08db      	lsrs	r3, r3, #3
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	4a14      	ldr	r2, [pc, #80]	; (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8007eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8007eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eb0:	e01e      	b.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eb2:	4b11      	ldr	r3, [pc, #68]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ebe:	d106      	bne.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8007ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ec6:	d102      	bne.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007ec8:	4b0d      	ldr	r3, [pc, #52]	; (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ecc:	e010      	b.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ece:	4b0a      	ldr	r3, [pc, #40]	; (8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eda:	d106      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ee2:	d102      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007ee4:	4b07      	ldr	r3, [pc, #28]	; (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8007ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ee8:	e002      	b.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007eea:	2300      	movs	r3, #0
 8007eec:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007eee:	e1af      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007ef0:	e1ae      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8007ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ef6:	e1ab      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007ef8:	58024400 	.word	0x58024400
 8007efc:	03d09000 	.word	0x03d09000
 8007f00:	003d0900 	.word	0x003d0900
 8007f04:	007a1200 	.word	0x007a1200
 8007f08:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f10:	e19e      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f18:	d173      	bne.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007f1a:	4b9d      	ldr	r3, [pc, #628]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f22:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f2a:	d02f      	beq.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f32:	d863      	bhi.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8007f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d004      	beq.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f40:	d012      	beq.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8007f42:	e05b      	b.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f44:	4b92      	ldr	r3, [pc, #584]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f50:	d107      	bne.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f52:	f107 0318 	add.w	r3, r7, #24
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 f99c 	bl	8008294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f60:	e176      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f66:	e173      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f68:	4b89      	ldr	r3, [pc, #548]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f74:	d107      	bne.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f76:	f107 030c 	add.w	r3, r7, #12
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 fade 	bl	800853c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007f84:	e164      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f8a:	e161      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f8c:	4b80      	ldr	r3, [pc, #512]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f96:	4b7e      	ldr	r3, [pc, #504]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d10c      	bne.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8007fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d109      	bne.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007fa8:	4b79      	ldr	r3, [pc, #484]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	08db      	lsrs	r3, r3, #3
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	4a78      	ldr	r2, [pc, #480]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fba:	e01e      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007fbc:	4b74      	ldr	r3, [pc, #464]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fc8:	d106      	bne.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8007fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fd0:	d102      	bne.n	8007fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007fd2:	4b71      	ldr	r3, [pc, #452]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fd6:	e010      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007fd8:	4b6d      	ldr	r3, [pc, #436]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fe4:	d106      	bne.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8007fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fec:	d102      	bne.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007fee:	4b6b      	ldr	r3, [pc, #428]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ff2:	e002      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007ff8:	e12a      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8007ffa:	e129      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008000:	e126      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008008:	d133      	bne.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800800a:	4b61      	ldr	r3, [pc, #388]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800800c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800800e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008012:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008016:	2b00      	cmp	r3, #0
 8008018:	d004      	beq.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800801a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008020:	d012      	beq.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008022:	e023      	b.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008024:	4b5a      	ldr	r3, [pc, #360]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800802c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008030:	d107      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fbd4 	bl	80087e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800803c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008040:	e106      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008046:	e103      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008048:	4b51      	ldr	r3, [pc, #324]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008050:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008054:	d107      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008056:	f107 0318 	add.w	r3, r7, #24
 800805a:	4618      	mov	r0, r3
 800805c:	f000 f91a 	bl	8008294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008064:	e0f4      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800806a:	e0f1      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008070:	e0ee      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008078:	f040 809b 	bne.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800807c:	4b44      	ldr	r3, [pc, #272]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800807e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008080:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008084:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008088:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800808c:	f000 808b 	beq.w	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8008096:	f200 8089 	bhi.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080a0:	d06c      	beq.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080a8:	f200 8080 	bhi.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80080ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b2:	d056      	beq.n	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ba:	d877      	bhi.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80080bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080c2:	d03b      	beq.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 80080c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080ca:	d86f      	bhi.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80080cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080d2:	d021      	beq.n	8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 80080d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080da:	d867      	bhi.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d004      	beq.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80080e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080e8:	d004      	beq.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 80080ea:	e05f      	b.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80080ec:	f000 f8bc 	bl	8008268 <HAL_RCCEx_GetD3PCLK1Freq>
 80080f0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80080f2:	e0ad      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080f4:	4b26      	ldr	r3, [pc, #152]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008100:	d107      	bne.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008102:	f107 0318 	add.w	r3, r7, #24
 8008106:	4618      	mov	r0, r3
 8008108:	f000 f8c4 	bl	8008294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008110:	e09e      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008116:	e09b      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008118:	4b1d      	ldr	r3, [pc, #116]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008124:	d107      	bne.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008126:	f107 030c 	add.w	r3, r7, #12
 800812a:	4618      	mov	r0, r3
 800812c:	f000 fa06 	bl	800853c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008134:	e08c      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008136:	2300      	movs	r3, #0
 8008138:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800813a:	e089      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800813c:	4b14      	ldr	r3, [pc, #80]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0304 	and.w	r3, r3, #4
 8008144:	2b04      	cmp	r3, #4
 8008146:	d109      	bne.n	800815c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008148:	4b11      	ldr	r3, [pc, #68]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	08db      	lsrs	r3, r3, #3
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	4a10      	ldr	r2, [pc, #64]	; (8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8008154:	fa22 f303 	lsr.w	r3, r2, r3
 8008158:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800815a:	e079      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008160:	e076      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008162:	4b0b      	ldr	r3, [pc, #44]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800816a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800816e:	d102      	bne.n	8008176 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8008170:	4b09      	ldr	r3, [pc, #36]	; (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8008172:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008174:	e06c      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800817a:	e069      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800817c:	4b04      	ldr	r3, [pc, #16]	; (8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008188:	d10a      	bne.n	80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 800818a:	4b04      	ldr	r3, [pc, #16]	; (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800818c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800818e:	e05f      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008190:	58024400 	.word	0x58024400
 8008194:	03d09000 	.word	0x03d09000
 8008198:	003d0900 	.word	0x003d0900
 800819c:	007a1200 	.word	0x007a1200
          frequency = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081a4:	e054      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80081a6:	4b2d      	ldr	r3, [pc, #180]	; (800825c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081aa:	e051      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081b0:	e04e      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081b8:	d148      	bne.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80081ba:	4b29      	ldr	r3, [pc, #164]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80081bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081c2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081ca:	d02a      	beq.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d2:	d838      	bhi.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d004      	beq.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 80081da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081e0:	d00d      	beq.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80081e2:	e030      	b.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80081e4:	4b1e      	ldr	r3, [pc, #120]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081f0:	d102      	bne.n	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 80081f2:	4b1c      	ldr	r3, [pc, #112]	; (8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80081f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80081f6:	e02b      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80081f8:	2300      	movs	r3, #0
 80081fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081fc:	e028      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081fe:	4b18      	ldr	r3, [pc, #96]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008206:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800820a:	d107      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800820c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008210:	4618      	mov	r0, r3
 8008212:	f000 fae7 	bl	80087e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008218:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800821a:	e019      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800821c:	2300      	movs	r3, #0
 800821e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008220:	e016      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008222:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800822a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800822e:	d107      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008230:	f107 0318 	add.w	r3, r7, #24
 8008234:	4618      	mov	r0, r3
 8008236:	f000 f82d 	bl	8008294 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800823e:	e007      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8008240:	2300      	movs	r3, #0
 8008242:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008244:	e004      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8008246:	2300      	movs	r3, #0
 8008248:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800824a:	e001      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 800824c:	2300      	movs	r3, #0
 800824e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008252:	4618      	mov	r0, r3
 8008254:	3740      	adds	r7, #64	; 0x40
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	00bb8000 	.word	0x00bb8000
 8008260:	58024400 	.word	0x58024400
 8008264:	007a1200 	.word	0x007a1200

08008268 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800826c:	f7fe fc66 	bl	8006b3c <HAL_RCC_GetHCLKFreq>
 8008270:	4602      	mov	r2, r0
 8008272:	4b06      	ldr	r3, [pc, #24]	; (800828c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	091b      	lsrs	r3, r3, #4
 8008278:	f003 0307 	and.w	r3, r3, #7
 800827c:	4904      	ldr	r1, [pc, #16]	; (8008290 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800827e:	5ccb      	ldrb	r3, [r1, r3]
 8008280:	f003 031f 	and.w	r3, r3, #31
 8008284:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008288:	4618      	mov	r0, r3
 800828a:	bd80      	pop	{r7, pc}
 800828c:	58024400 	.word	0x58024400
 8008290:	0800a934 	.word	0x0800a934

08008294 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008294:	b480      	push	{r7}
 8008296:	b089      	sub	sp, #36	; 0x24
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800829c:	4ba1      	ldr	r3, [pc, #644]	; (8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800829e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a0:	f003 0303 	and.w	r3, r3, #3
 80082a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80082a6:	4b9f      	ldr	r3, [pc, #636]	; (8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082aa:	0b1b      	lsrs	r3, r3, #12
 80082ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80082b2:	4b9c      	ldr	r3, [pc, #624]	; (8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b6:	091b      	lsrs	r3, r3, #4
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80082be:	4b99      	ldr	r3, [pc, #612]	; (8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c2:	08db      	lsrs	r3, r3, #3
 80082c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	fb02 f303 	mul.w	r3, r2, r3
 80082ce:	ee07 3a90 	vmov	s15, r3
 80082d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 8111 	beq.w	8008504 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	f000 8083 	beq.w	80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	f200 80a1 	bhi.w	8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d056      	beq.n	80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80082fe:	e099      	b.n	8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008300:	4b88      	ldr	r3, [pc, #544]	; (8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b00      	cmp	r3, #0
 800830a:	d02d      	beq.n	8008368 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800830c:	4b85      	ldr	r3, [pc, #532]	; (8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	08db      	lsrs	r3, r3, #3
 8008312:	f003 0303 	and.w	r3, r3, #3
 8008316:	4a84      	ldr	r2, [pc, #528]	; (8008528 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008318:	fa22 f303 	lsr.w	r3, r2, r3
 800831c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	ee07 3a90 	vmov	s15, r3
 8008324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	ee07 3a90 	vmov	s15, r3
 800832e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008336:	4b7b      	ldr	r3, [pc, #492]	; (8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008346:	ed97 6a03 	vldr	s12, [r7, #12]
 800834a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800852c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800834e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800835a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800835e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008362:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008366:	e087      	b.n	8008478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	ee07 3a90 	vmov	s15, r3
 800836e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008372:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008530 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800837a:	4b6a      	ldr	r3, [pc, #424]	; (8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800837c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008382:	ee07 3a90 	vmov	s15, r3
 8008386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800838a:	ed97 6a03 	vldr	s12, [r7, #12]
 800838e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800852c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800839a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800839e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083aa:	e065      	b.n	8008478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	ee07 3a90 	vmov	s15, r3
 80083b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083be:	4b59      	ldr	r3, [pc, #356]	; (8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c6:	ee07 3a90 	vmov	s15, r3
 80083ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80083d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800852c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083ee:	e043      	b.n	8008478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	ee07 3a90 	vmov	s15, r3
 80083f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008538 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80083fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008402:	4b48      	ldr	r3, [pc, #288]	; (8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840a:	ee07 3a90 	vmov	s15, r3
 800840e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008412:	ed97 6a03 	vldr	s12, [r7, #12]
 8008416:	eddf 5a45 	vldr	s11, [pc, #276]	; 800852c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800841a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800841e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800842a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800842e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008432:	e021      	b.n	8008478 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	ee07 3a90 	vmov	s15, r3
 800843a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008446:	4b37      	ldr	r3, [pc, #220]	; (8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800844e:	ee07 3a90 	vmov	s15, r3
 8008452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008456:	ed97 6a03 	vldr	s12, [r7, #12]
 800845a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800852c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800845e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800846a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800846e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008476:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008478:	4b2a      	ldr	r3, [pc, #168]	; (8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800847a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847c:	0a5b      	lsrs	r3, r3, #9
 800847e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800848e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008492:	edd7 6a07 	vldr	s13, [r7, #28]
 8008496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800849a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800849e:	ee17 2a90 	vmov	r2, s15
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80084a6:	4b1f      	ldr	r3, [pc, #124]	; (8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084aa:	0c1b      	lsrs	r3, r3, #16
 80084ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b0:	ee07 3a90 	vmov	s15, r3
 80084b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80084c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084cc:	ee17 2a90 	vmov	r2, s15
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80084d4:	4b13      	ldr	r3, [pc, #76]	; (8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d8:	0e1b      	lsrs	r3, r3, #24
 80084da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084de:	ee07 3a90 	vmov	s15, r3
 80084e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80084f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084fa:	ee17 2a90 	vmov	r2, s15
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008502:	e008      	b.n	8008516 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	609a      	str	r2, [r3, #8]
}
 8008516:	bf00      	nop
 8008518:	3724      	adds	r7, #36	; 0x24
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	58024400 	.word	0x58024400
 8008528:	03d09000 	.word	0x03d09000
 800852c:	46000000 	.word	0x46000000
 8008530:	4c742400 	.word	0x4c742400
 8008534:	4a742400 	.word	0x4a742400
 8008538:	4af42400 	.word	0x4af42400

0800853c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800853c:	b480      	push	{r7}
 800853e:	b089      	sub	sp, #36	; 0x24
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008544:	4ba1      	ldr	r3, [pc, #644]	; (80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008548:	f003 0303 	and.w	r3, r3, #3
 800854c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800854e:	4b9f      	ldr	r3, [pc, #636]	; (80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008552:	0d1b      	lsrs	r3, r3, #20
 8008554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008558:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800855a:	4b9c      	ldr	r3, [pc, #624]	; (80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	0a1b      	lsrs	r3, r3, #8
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008566:	4b99      	ldr	r3, [pc, #612]	; (80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856a:	08db      	lsrs	r3, r3, #3
 800856c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	fb02 f303 	mul.w	r3, r2, r3
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 8111 	beq.w	80087ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	2b02      	cmp	r3, #2
 800858e:	f000 8083 	beq.w	8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	2b02      	cmp	r3, #2
 8008596:	f200 80a1 	bhi.w	80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d056      	beq.n	8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80085a6:	e099      	b.n	80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085a8:	4b88      	ldr	r3, [pc, #544]	; (80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0320 	and.w	r3, r3, #32
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d02d      	beq.n	8008610 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80085b4:	4b85      	ldr	r3, [pc, #532]	; (80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	08db      	lsrs	r3, r3, #3
 80085ba:	f003 0303 	and.w	r3, r3, #3
 80085be:	4a84      	ldr	r2, [pc, #528]	; (80087d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80085c0:	fa22 f303 	lsr.w	r3, r2, r3
 80085c4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	ee07 3a90 	vmov	s15, r3
 80085cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	ee07 3a90 	vmov	s15, r3
 80085d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085de:	4b7b      	ldr	r3, [pc, #492]	; (80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e6:	ee07 3a90 	vmov	s15, r3
 80085ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80085f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800860a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800860e:	e087      	b.n	8008720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800861a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80087d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800861e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008622:	4b6a      	ldr	r3, [pc, #424]	; (80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862a:	ee07 3a90 	vmov	s15, r3
 800862e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008632:	ed97 6a03 	vldr	s12, [r7, #12]
 8008636:	eddf 5a67 	vldr	s11, [pc, #412]	; 80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800863a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800863e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800864a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800864e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008652:	e065      	b.n	8008720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	ee07 3a90 	vmov	s15, r3
 800865a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800865e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008666:	4b59      	ldr	r3, [pc, #356]	; (80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800866e:	ee07 3a90 	vmov	s15, r3
 8008672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008676:	ed97 6a03 	vldr	s12, [r7, #12]
 800867a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800867e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800868a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800868e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008692:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008696:	e043      	b.n	8008720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	ee07 3a90 	vmov	s15, r3
 800869e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80087e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80086a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086aa:	4b48      	ldr	r3, [pc, #288]	; (80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b2:	ee07 3a90 	vmov	s15, r3
 80086b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80086be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086da:	e021      	b.n	8008720 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	ee07 3a90 	vmov	s15, r3
 80086e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ee:	4b37      	ldr	r3, [pc, #220]	; (80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086f6:	ee07 3a90 	vmov	s15, r3
 80086fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008702:	eddf 5a34 	vldr	s11, [pc, #208]	; 80087d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800870a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800870e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800871a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800871e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008720:	4b2a      	ldr	r3, [pc, #168]	; (80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008724:	0a5b      	lsrs	r3, r3, #9
 8008726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800872a:	ee07 3a90 	vmov	s15, r3
 800872e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008736:	ee37 7a87 	vadd.f32	s14, s15, s14
 800873a:	edd7 6a07 	vldr	s13, [r7, #28]
 800873e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008746:	ee17 2a90 	vmov	r2, s15
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800874e:	4b1f      	ldr	r3, [pc, #124]	; (80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008752:	0c1b      	lsrs	r3, r3, #16
 8008754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008758:	ee07 3a90 	vmov	s15, r3
 800875c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008760:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008764:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008768:	edd7 6a07 	vldr	s13, [r7, #28]
 800876c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008774:	ee17 2a90 	vmov	r2, s15
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800877c:	4b13      	ldr	r3, [pc, #76]	; (80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800877e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008780:	0e1b      	lsrs	r3, r3, #24
 8008782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008786:	ee07 3a90 	vmov	s15, r3
 800878a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800878e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008796:	edd7 6a07 	vldr	s13, [r7, #28]
 800879a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800879e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087a2:	ee17 2a90 	vmov	r2, s15
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80087aa:	e008      	b.n	80087be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	609a      	str	r2, [r3, #8]
}
 80087be:	bf00      	nop
 80087c0:	3724      	adds	r7, #36	; 0x24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	58024400 	.word	0x58024400
 80087d0:	03d09000 	.word	0x03d09000
 80087d4:	46000000 	.word	0x46000000
 80087d8:	4c742400 	.word	0x4c742400
 80087dc:	4a742400 	.word	0x4a742400
 80087e0:	4af42400 	.word	0x4af42400

080087e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b089      	sub	sp, #36	; 0x24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087ec:	4ba0      	ldr	r3, [pc, #640]	; (8008a70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f0:	f003 0303 	and.w	r3, r3, #3
 80087f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80087f6:	4b9e      	ldr	r3, [pc, #632]	; (8008a70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fa:	091b      	lsrs	r3, r3, #4
 80087fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008800:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008802:	4b9b      	ldr	r3, [pc, #620]	; (8008a70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800880c:	4b98      	ldr	r3, [pc, #608]	; (8008a70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800880e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008810:	08db      	lsrs	r3, r3, #3
 8008812:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	fb02 f303 	mul.w	r3, r2, r3
 800881c:	ee07 3a90 	vmov	s15, r3
 8008820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008824:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 8111 	beq.w	8008a52 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	2b02      	cmp	r3, #2
 8008834:	f000 8083 	beq.w	800893e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	2b02      	cmp	r3, #2
 800883c:	f200 80a1 	bhi.w	8008982 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d003      	beq.n	800884e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d056      	beq.n	80088fa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800884c:	e099      	b.n	8008982 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800884e:	4b88      	ldr	r3, [pc, #544]	; (8008a70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0320 	and.w	r3, r3, #32
 8008856:	2b00      	cmp	r3, #0
 8008858:	d02d      	beq.n	80088b6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800885a:	4b85      	ldr	r3, [pc, #532]	; (8008a70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	08db      	lsrs	r3, r3, #3
 8008860:	f003 0303 	and.w	r3, r3, #3
 8008864:	4a83      	ldr	r2, [pc, #524]	; (8008a74 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008866:	fa22 f303 	lsr.w	r3, r2, r3
 800886a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	ee07 3a90 	vmov	s15, r3
 800887c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008884:	4b7a      	ldr	r3, [pc, #488]	; (8008a70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888c:	ee07 3a90 	vmov	s15, r3
 8008890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008894:	ed97 6a03 	vldr	s12, [r7, #12]
 8008898:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800889c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80088b4:	e087      	b.n	80089c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	ee07 3a90 	vmov	s15, r3
 80088bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80088c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c8:	4b69      	ldr	r3, [pc, #420]	; (8008a70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d0:	ee07 3a90 	vmov	s15, r3
 80088d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80088dc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088f8:	e065      	b.n	80089c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	ee07 3a90 	vmov	s15, r3
 8008900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008904:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008a80 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800890c:	4b58      	ldr	r3, [pc, #352]	; (8008a70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800890e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008914:	ee07 3a90 	vmov	s15, r3
 8008918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800891c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008920:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008924:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800892c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008938:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800893c:	e043      	b.n	80089c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	ee07 3a90 	vmov	s15, r3
 8008944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008948:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008a84 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800894c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008950:	4b47      	ldr	r3, [pc, #284]	; (8008a70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008958:	ee07 3a90 	vmov	s15, r3
 800895c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008960:	ed97 6a03 	vldr	s12, [r7, #12]
 8008964:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008968:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800896c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008970:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008974:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008980:	e021      	b.n	80089c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	ee07 3a90 	vmov	s15, r3
 8008988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008a7c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008994:	4b36      	ldr	r3, [pc, #216]	; (8008a70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800899c:	ee07 3a90 	vmov	s15, r3
 80089a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80089a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008a78 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089c4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80089c6:	4b2a      	ldr	r3, [pc, #168]	; (8008a70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ca:	0a5b      	lsrs	r3, r3, #9
 80089cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089d0:	ee07 3a90 	vmov	s15, r3
 80089d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80089e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089ec:	ee17 2a90 	vmov	r2, s15
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80089f4:	4b1e      	ldr	r3, [pc, #120]	; (8008a70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f8:	0c1b      	lsrs	r3, r3, #16
 80089fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089fe:	ee07 3a90 	vmov	s15, r3
 8008a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a1a:	ee17 2a90 	vmov	r2, s15
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008a22:	4b13      	ldr	r3, [pc, #76]	; (8008a70 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a26:	0e1b      	lsrs	r3, r3, #24
 8008a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a2c:	ee07 3a90 	vmov	s15, r3
 8008a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a48:	ee17 2a90 	vmov	r2, s15
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a50:	e008      	b.n	8008a64 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	609a      	str	r2, [r3, #8]
}
 8008a64:	bf00      	nop
 8008a66:	3724      	adds	r7, #36	; 0x24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	58024400 	.word	0x58024400
 8008a74:	03d09000 	.word	0x03d09000
 8008a78:	46000000 	.word	0x46000000
 8008a7c:	4c742400 	.word	0x4c742400
 8008a80:	4a742400 	.word	0x4a742400
 8008a84:	4af42400 	.word	0x4af42400

08008a88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a96:	4b53      	ldr	r3, [pc, #332]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9a:	f003 0303 	and.w	r3, r3, #3
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d101      	bne.n	8008aa6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e099      	b.n	8008bda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008aa6:	4b4f      	ldr	r3, [pc, #316]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a4e      	ldr	r2, [pc, #312]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008aac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ab2:	f7f8 ffe5 	bl	8001a80 <HAL_GetTick>
 8008ab6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ab8:	e008      	b.n	8008acc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008aba:	f7f8 ffe1 	bl	8001a80 <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d901      	bls.n	8008acc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e086      	b.n	8008bda <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008acc:	4b45      	ldr	r3, [pc, #276]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1f0      	bne.n	8008aba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ad8:	4b42      	ldr	r3, [pc, #264]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008adc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	031b      	lsls	r3, r3, #12
 8008ae6:	493f      	ldr	r1, [pc, #252]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	628b      	str	r3, [r1, #40]	; 0x28
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	3b01      	subs	r3, #1
 8008af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	025b      	lsls	r3, r3, #9
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	431a      	orrs	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	041b      	lsls	r3, r3, #16
 8008b0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b0e:	431a      	orrs	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	3b01      	subs	r3, #1
 8008b16:	061b      	lsls	r3, r3, #24
 8008b18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b1c:	4931      	ldr	r1, [pc, #196]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b22:	4b30      	ldr	r3, [pc, #192]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	492d      	ldr	r1, [pc, #180]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b30:	4313      	orrs	r3, r2
 8008b32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b34:	4b2b      	ldr	r3, [pc, #172]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b38:	f023 0220 	bic.w	r2, r3, #32
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	4928      	ldr	r1, [pc, #160]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b46:	4b27      	ldr	r3, [pc, #156]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4a:	4a26      	ldr	r2, [pc, #152]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b4c:	f023 0310 	bic.w	r3, r3, #16
 8008b50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b52:	4b24      	ldr	r3, [pc, #144]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b56:	4b24      	ldr	r3, [pc, #144]	; (8008be8 <RCCEx_PLL2_Config+0x160>)
 8008b58:	4013      	ands	r3, r2
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	69d2      	ldr	r2, [r2, #28]
 8008b5e:	00d2      	lsls	r2, r2, #3
 8008b60:	4920      	ldr	r1, [pc, #128]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b66:	4b1f      	ldr	r3, [pc, #124]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6a:	4a1e      	ldr	r2, [pc, #120]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b6c:	f043 0310 	orr.w	r3, r3, #16
 8008b70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d106      	bne.n	8008b86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b78:	4b1a      	ldr	r3, [pc, #104]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	4a19      	ldr	r2, [pc, #100]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b84:	e00f      	b.n	8008ba6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d106      	bne.n	8008b9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b8c:	4b15      	ldr	r3, [pc, #84]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b90:	4a14      	ldr	r2, [pc, #80]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b98:	e005      	b.n	8008ba6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b9a:	4b12      	ldr	r3, [pc, #72]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9e:	4a11      	ldr	r2, [pc, #68]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008ba0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ba4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008ba6:	4b0f      	ldr	r3, [pc, #60]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a0e      	ldr	r2, [pc, #56]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008bac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bb2:	f7f8 ff65 	bl	8001a80 <HAL_GetTick>
 8008bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bb8:	e008      	b.n	8008bcc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008bba:	f7f8 ff61 	bl	8001a80 <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d901      	bls.n	8008bcc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e006      	b.n	8008bda <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008bcc:	4b05      	ldr	r3, [pc, #20]	; (8008be4 <RCCEx_PLL2_Config+0x15c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d0f0      	beq.n	8008bba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	58024400 	.word	0x58024400
 8008be8:	ffff0007 	.word	0xffff0007

08008bec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bfa:	4b53      	ldr	r3, [pc, #332]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfe:	f003 0303 	and.w	r3, r3, #3
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d101      	bne.n	8008c0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e099      	b.n	8008d3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c0a:	4b4f      	ldr	r3, [pc, #316]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a4e      	ldr	r2, [pc, #312]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c16:	f7f8 ff33 	bl	8001a80 <HAL_GetTick>
 8008c1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c1c:	e008      	b.n	8008c30 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008c1e:	f7f8 ff2f 	bl	8001a80 <HAL_GetTick>
 8008c22:	4602      	mov	r2, r0
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d901      	bls.n	8008c30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e086      	b.n	8008d3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c30:	4b45      	ldr	r3, [pc, #276]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1f0      	bne.n	8008c1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c3c:	4b42      	ldr	r3, [pc, #264]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	051b      	lsls	r3, r3, #20
 8008c4a:	493f      	ldr	r1, [pc, #252]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	628b      	str	r3, [r1, #40]	; 0x28
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	3b01      	subs	r3, #1
 8008c56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	025b      	lsls	r3, r3, #9
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	431a      	orrs	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	041b      	lsls	r3, r3, #16
 8008c6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c72:	431a      	orrs	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	061b      	lsls	r3, r3, #24
 8008c7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c80:	4931      	ldr	r1, [pc, #196]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008c82:	4313      	orrs	r3, r2
 8008c84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c86:	4b30      	ldr	r3, [pc, #192]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	492d      	ldr	r1, [pc, #180]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008c94:	4313      	orrs	r3, r2
 8008c96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c98:	4b2b      	ldr	r3, [pc, #172]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	4928      	ldr	r1, [pc, #160]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008caa:	4b27      	ldr	r3, [pc, #156]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cae:	4a26      	ldr	r2, [pc, #152]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008cb6:	4b24      	ldr	r3, [pc, #144]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cba:	4b24      	ldr	r3, [pc, #144]	; (8008d4c <RCCEx_PLL3_Config+0x160>)
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	69d2      	ldr	r2, [r2, #28]
 8008cc2:	00d2      	lsls	r2, r2, #3
 8008cc4:	4920      	ldr	r1, [pc, #128]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008cca:	4b1f      	ldr	r3, [pc, #124]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cce:	4a1e      	ldr	r2, [pc, #120]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d106      	bne.n	8008cea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008cdc:	4b1a      	ldr	r3, [pc, #104]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce0:	4a19      	ldr	r2, [pc, #100]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008ce2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ce6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ce8:	e00f      	b.n	8008d0a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d106      	bne.n	8008cfe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008cf0:	4b15      	ldr	r3, [pc, #84]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf4:	4a14      	ldr	r2, [pc, #80]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008cf6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cfc:	e005      	b.n	8008d0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008cfe:	4b12      	ldr	r3, [pc, #72]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d02:	4a11      	ldr	r2, [pc, #68]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d0a:	4b0f      	ldr	r3, [pc, #60]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a0e      	ldr	r2, [pc, #56]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d16:	f7f8 feb3 	bl	8001a80 <HAL_GetTick>
 8008d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d1c:	e008      	b.n	8008d30 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008d1e:	f7f8 feaf 	bl	8001a80 <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d901      	bls.n	8008d30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e006      	b.n	8008d3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d30:	4b05      	ldr	r3, [pc, #20]	; (8008d48 <RCCEx_PLL3_Config+0x15c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d0f0      	beq.n	8008d1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	58024400 	.word	0x58024400
 8008d4c:	ffff0007 	.word	0xffff0007

08008d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e049      	b.n	8008df6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d106      	bne.n	8008d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7f8 fcde 	bl	8001738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	4610      	mov	r0, r2
 8008d90:	f000 f99e 	bl	80090d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d001      	beq.n	8008e18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e04c      	b.n	8008eb2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a26      	ldr	r2, [pc, #152]	; (8008ec0 <HAL_TIM_Base_Start+0xc0>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d022      	beq.n	8008e70 <HAL_TIM_Base_Start+0x70>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e32:	d01d      	beq.n	8008e70 <HAL_TIM_Base_Start+0x70>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a22      	ldr	r2, [pc, #136]	; (8008ec4 <HAL_TIM_Base_Start+0xc4>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d018      	beq.n	8008e70 <HAL_TIM_Base_Start+0x70>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a21      	ldr	r2, [pc, #132]	; (8008ec8 <HAL_TIM_Base_Start+0xc8>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d013      	beq.n	8008e70 <HAL_TIM_Base_Start+0x70>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a1f      	ldr	r2, [pc, #124]	; (8008ecc <HAL_TIM_Base_Start+0xcc>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d00e      	beq.n	8008e70 <HAL_TIM_Base_Start+0x70>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a1e      	ldr	r2, [pc, #120]	; (8008ed0 <HAL_TIM_Base_Start+0xd0>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d009      	beq.n	8008e70 <HAL_TIM_Base_Start+0x70>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a1c      	ldr	r2, [pc, #112]	; (8008ed4 <HAL_TIM_Base_Start+0xd4>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d004      	beq.n	8008e70 <HAL_TIM_Base_Start+0x70>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a1b      	ldr	r2, [pc, #108]	; (8008ed8 <HAL_TIM_Base_Start+0xd8>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d115      	bne.n	8008e9c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	689a      	ldr	r2, [r3, #8]
 8008e76:	4b19      	ldr	r3, [pc, #100]	; (8008edc <HAL_TIM_Base_Start+0xdc>)
 8008e78:	4013      	ands	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2b06      	cmp	r3, #6
 8008e80:	d015      	beq.n	8008eae <HAL_TIM_Base_Start+0xae>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e88:	d011      	beq.n	8008eae <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f042 0201 	orr.w	r2, r2, #1
 8008e98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e9a:	e008      	b.n	8008eae <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f042 0201 	orr.w	r2, r2, #1
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	e000      	b.n	8008eb0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	40010000 	.word	0x40010000
 8008ec4:	40000400 	.word	0x40000400
 8008ec8:	40000800 	.word	0x40000800
 8008ecc:	40000c00 	.word	0x40000c00
 8008ed0:	40010400 	.word	0x40010400
 8008ed4:	40001800 	.word	0x40001800
 8008ed8:	40014000 	.word	0x40014000
 8008edc:	00010007 	.word	0x00010007

08008ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d101      	bne.n	8008efc <HAL_TIM_ConfigClockSource+0x1c>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e0dc      	b.n	80090b6 <HAL_TIM_ConfigClockSource+0x1d6>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2202      	movs	r2, #2
 8008f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	4b6a      	ldr	r3, [pc, #424]	; (80090c0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008f18:	4013      	ands	r3, r2
 8008f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a64      	ldr	r2, [pc, #400]	; (80090c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	f000 80a9 	beq.w	800908a <HAL_TIM_ConfigClockSource+0x1aa>
 8008f38:	4a62      	ldr	r2, [pc, #392]	; (80090c4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	f200 80ae 	bhi.w	800909c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f40:	4a61      	ldr	r2, [pc, #388]	; (80090c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	f000 80a1 	beq.w	800908a <HAL_TIM_ConfigClockSource+0x1aa>
 8008f48:	4a5f      	ldr	r2, [pc, #380]	; (80090c8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	f200 80a6 	bhi.w	800909c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f50:	4a5e      	ldr	r2, [pc, #376]	; (80090cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	f000 8099 	beq.w	800908a <HAL_TIM_ConfigClockSource+0x1aa>
 8008f58:	4a5c      	ldr	r2, [pc, #368]	; (80090cc <HAL_TIM_ConfigClockSource+0x1ec>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	f200 809e 	bhi.w	800909c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008f64:	f000 8091 	beq.w	800908a <HAL_TIM_ConfigClockSource+0x1aa>
 8008f68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008f6c:	f200 8096 	bhi.w	800909c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f74:	f000 8089 	beq.w	800908a <HAL_TIM_ConfigClockSource+0x1aa>
 8008f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f7c:	f200 808e 	bhi.w	800909c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f84:	d03e      	beq.n	8009004 <HAL_TIM_ConfigClockSource+0x124>
 8008f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f8a:	f200 8087 	bhi.w	800909c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f92:	f000 8086 	beq.w	80090a2 <HAL_TIM_ConfigClockSource+0x1c2>
 8008f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f9a:	d87f      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x1bc>
 8008f9c:	2b70      	cmp	r3, #112	; 0x70
 8008f9e:	d01a      	beq.n	8008fd6 <HAL_TIM_ConfigClockSource+0xf6>
 8008fa0:	2b70      	cmp	r3, #112	; 0x70
 8008fa2:	d87b      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x1bc>
 8008fa4:	2b60      	cmp	r3, #96	; 0x60
 8008fa6:	d050      	beq.n	800904a <HAL_TIM_ConfigClockSource+0x16a>
 8008fa8:	2b60      	cmp	r3, #96	; 0x60
 8008faa:	d877      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x1bc>
 8008fac:	2b50      	cmp	r3, #80	; 0x50
 8008fae:	d03c      	beq.n	800902a <HAL_TIM_ConfigClockSource+0x14a>
 8008fb0:	2b50      	cmp	r3, #80	; 0x50
 8008fb2:	d873      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x1bc>
 8008fb4:	2b40      	cmp	r3, #64	; 0x40
 8008fb6:	d058      	beq.n	800906a <HAL_TIM_ConfigClockSource+0x18a>
 8008fb8:	2b40      	cmp	r3, #64	; 0x40
 8008fba:	d86f      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x1bc>
 8008fbc:	2b30      	cmp	r3, #48	; 0x30
 8008fbe:	d064      	beq.n	800908a <HAL_TIM_ConfigClockSource+0x1aa>
 8008fc0:	2b30      	cmp	r3, #48	; 0x30
 8008fc2:	d86b      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x1bc>
 8008fc4:	2b20      	cmp	r3, #32
 8008fc6:	d060      	beq.n	800908a <HAL_TIM_ConfigClockSource+0x1aa>
 8008fc8:	2b20      	cmp	r3, #32
 8008fca:	d867      	bhi.n	800909c <HAL_TIM_ConfigClockSource+0x1bc>
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d05c      	beq.n	800908a <HAL_TIM_ConfigClockSource+0x1aa>
 8008fd0:	2b10      	cmp	r3, #16
 8008fd2:	d05a      	beq.n	800908a <HAL_TIM_ConfigClockSource+0x1aa>
 8008fd4:	e062      	b.n	800909c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	6899      	ldr	r1, [r3, #8]
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	f000 f98b 	bl	8009300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ff8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	609a      	str	r2, [r3, #8]
      break;
 8009002:	e04f      	b.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6818      	ldr	r0, [r3, #0]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	6899      	ldr	r1, [r3, #8]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f000 f974 	bl	8009300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689a      	ldr	r2, [r3, #8]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009026:	609a      	str	r2, [r3, #8]
      break;
 8009028:	e03c      	b.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6818      	ldr	r0, [r3, #0]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	6859      	ldr	r1, [r3, #4]
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	461a      	mov	r2, r3
 8009038:	f000 f8e4 	bl	8009204 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2150      	movs	r1, #80	; 0x50
 8009042:	4618      	mov	r0, r3
 8009044:	f000 f93e 	bl	80092c4 <TIM_ITRx_SetConfig>
      break;
 8009048:	e02c      	b.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6818      	ldr	r0, [r3, #0]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	6859      	ldr	r1, [r3, #4]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	461a      	mov	r2, r3
 8009058:	f000 f903 	bl	8009262 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2160      	movs	r1, #96	; 0x60
 8009062:	4618      	mov	r0, r3
 8009064:	f000 f92e 	bl	80092c4 <TIM_ITRx_SetConfig>
      break;
 8009068:	e01c      	b.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6818      	ldr	r0, [r3, #0]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	6859      	ldr	r1, [r3, #4]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	461a      	mov	r2, r3
 8009078:	f000 f8c4 	bl	8009204 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2140      	movs	r1, #64	; 0x40
 8009082:	4618      	mov	r0, r3
 8009084:	f000 f91e 	bl	80092c4 <TIM_ITRx_SetConfig>
      break;
 8009088:	e00c      	b.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f000 f915 	bl	80092c4 <TIM_ITRx_SetConfig>
      break;
 800909a:	e003      	b.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	73fb      	strb	r3, [r7, #15]
      break;
 80090a0:	e000      	b.n	80090a4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80090a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3710      	adds	r7, #16
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	ffceff88 	.word	0xffceff88
 80090c4:	00100040 	.word	0x00100040
 80090c8:	00100030 	.word	0x00100030
 80090cc:	00100020 	.word	0x00100020

080090d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a40      	ldr	r2, [pc, #256]	; (80091e4 <TIM_Base_SetConfig+0x114>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d013      	beq.n	8009110 <TIM_Base_SetConfig+0x40>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ee:	d00f      	beq.n	8009110 <TIM_Base_SetConfig+0x40>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a3d      	ldr	r2, [pc, #244]	; (80091e8 <TIM_Base_SetConfig+0x118>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d00b      	beq.n	8009110 <TIM_Base_SetConfig+0x40>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a3c      	ldr	r2, [pc, #240]	; (80091ec <TIM_Base_SetConfig+0x11c>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d007      	beq.n	8009110 <TIM_Base_SetConfig+0x40>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a3b      	ldr	r2, [pc, #236]	; (80091f0 <TIM_Base_SetConfig+0x120>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d003      	beq.n	8009110 <TIM_Base_SetConfig+0x40>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a3a      	ldr	r2, [pc, #232]	; (80091f4 <TIM_Base_SetConfig+0x124>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d108      	bne.n	8009122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	4313      	orrs	r3, r2
 8009120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a2f      	ldr	r2, [pc, #188]	; (80091e4 <TIM_Base_SetConfig+0x114>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d01f      	beq.n	800916a <TIM_Base_SetConfig+0x9a>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009130:	d01b      	beq.n	800916a <TIM_Base_SetConfig+0x9a>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a2c      	ldr	r2, [pc, #176]	; (80091e8 <TIM_Base_SetConfig+0x118>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d017      	beq.n	800916a <TIM_Base_SetConfig+0x9a>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a2b      	ldr	r2, [pc, #172]	; (80091ec <TIM_Base_SetConfig+0x11c>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d013      	beq.n	800916a <TIM_Base_SetConfig+0x9a>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a2a      	ldr	r2, [pc, #168]	; (80091f0 <TIM_Base_SetConfig+0x120>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d00f      	beq.n	800916a <TIM_Base_SetConfig+0x9a>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a29      	ldr	r2, [pc, #164]	; (80091f4 <TIM_Base_SetConfig+0x124>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d00b      	beq.n	800916a <TIM_Base_SetConfig+0x9a>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a28      	ldr	r2, [pc, #160]	; (80091f8 <TIM_Base_SetConfig+0x128>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d007      	beq.n	800916a <TIM_Base_SetConfig+0x9a>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a27      	ldr	r2, [pc, #156]	; (80091fc <TIM_Base_SetConfig+0x12c>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d003      	beq.n	800916a <TIM_Base_SetConfig+0x9a>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a26      	ldr	r2, [pc, #152]	; (8009200 <TIM_Base_SetConfig+0x130>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d108      	bne.n	800917c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	4313      	orrs	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	4313      	orrs	r3, r2
 8009188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	689a      	ldr	r2, [r3, #8]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a10      	ldr	r2, [pc, #64]	; (80091e4 <TIM_Base_SetConfig+0x114>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d00f      	beq.n	80091c8 <TIM_Base_SetConfig+0xf8>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a12      	ldr	r2, [pc, #72]	; (80091f4 <TIM_Base_SetConfig+0x124>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d00b      	beq.n	80091c8 <TIM_Base_SetConfig+0xf8>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a11      	ldr	r2, [pc, #68]	; (80091f8 <TIM_Base_SetConfig+0x128>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d007      	beq.n	80091c8 <TIM_Base_SetConfig+0xf8>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a10      	ldr	r2, [pc, #64]	; (80091fc <TIM_Base_SetConfig+0x12c>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d003      	beq.n	80091c8 <TIM_Base_SetConfig+0xf8>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a0f      	ldr	r2, [pc, #60]	; (8009200 <TIM_Base_SetConfig+0x130>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d103      	bne.n	80091d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	691a      	ldr	r2, [r3, #16]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	615a      	str	r2, [r3, #20]
}
 80091d6:	bf00      	nop
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	40010000 	.word	0x40010000
 80091e8:	40000400 	.word	0x40000400
 80091ec:	40000800 	.word	0x40000800
 80091f0:	40000c00 	.word	0x40000c00
 80091f4:	40010400 	.word	0x40010400
 80091f8:	40014000 	.word	0x40014000
 80091fc:	40014400 	.word	0x40014400
 8009200:	40014800 	.word	0x40014800

08009204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009204:	b480      	push	{r7}
 8009206:	b087      	sub	sp, #28
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6a1b      	ldr	r3, [r3, #32]
 8009214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	f023 0201 	bic.w	r2, r3, #1
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800922e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	011b      	lsls	r3, r3, #4
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	4313      	orrs	r3, r2
 8009238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f023 030a 	bic.w	r3, r3, #10
 8009240:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	4313      	orrs	r3, r2
 8009248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	621a      	str	r2, [r3, #32]
}
 8009256:	bf00      	nop
 8009258:	371c      	adds	r7, #28
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009262:	b480      	push	{r7}
 8009264:	b087      	sub	sp, #28
 8009266:	af00      	add	r7, sp, #0
 8009268:	60f8      	str	r0, [r7, #12]
 800926a:	60b9      	str	r1, [r7, #8]
 800926c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	f023 0210 	bic.w	r2, r3, #16
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800928c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	031b      	lsls	r3, r3, #12
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	4313      	orrs	r3, r2
 8009296:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800929e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	621a      	str	r2, [r3, #32]
}
 80092b6:	bf00      	nop
 80092b8:	371c      	adds	r7, #28
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
	...

080092c4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	4b09      	ldr	r3, [pc, #36]	; (80092fc <TIM_ITRx_SetConfig+0x38>)
 80092d8:	4013      	ands	r3, r2
 80092da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	f043 0307 	orr.w	r3, r3, #7
 80092e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	609a      	str	r2, [r3, #8]
}
 80092ee:	bf00      	nop
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	ffcfff8f 	.word	0xffcfff8f

08009300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800931a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	021a      	lsls	r2, r3, #8
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	431a      	orrs	r2, r3
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	4313      	orrs	r3, r2
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	4313      	orrs	r3, r2
 800932c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	609a      	str	r2, [r3, #8]
}
 8009334:	bf00      	nop
 8009336:	371c      	adds	r7, #28
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009350:	2b01      	cmp	r3, #1
 8009352:	d101      	bne.n	8009358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009354:	2302      	movs	r3, #2
 8009356:	e06d      	b.n	8009434 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a30      	ldr	r2, [pc, #192]	; (8009440 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d004      	beq.n	800938c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a2f      	ldr	r2, [pc, #188]	; (8009444 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d108      	bne.n	800939e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009392:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	68fa      	ldr	r2, [r7, #12]
 800939a:	4313      	orrs	r3, r2
 800939c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a20      	ldr	r2, [pc, #128]	; (8009440 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d022      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ca:	d01d      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a1d      	ldr	r2, [pc, #116]	; (8009448 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d018      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a1c      	ldr	r2, [pc, #112]	; (800944c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d013      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a1a      	ldr	r2, [pc, #104]	; (8009450 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d00e      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a15      	ldr	r2, [pc, #84]	; (8009444 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d009      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a16      	ldr	r2, [pc, #88]	; (8009454 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d004      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a15      	ldr	r2, [pc, #84]	; (8009458 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d10c      	bne.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800940e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	4313      	orrs	r3, r2
 8009418:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	40010000 	.word	0x40010000
 8009444:	40010400 	.word	0x40010400
 8009448:	40000400 	.word	0x40000400
 800944c:	40000800 	.word	0x40000800
 8009450:	40000c00 	.word	0x40000c00
 8009454:	40001800 	.word	0x40001800
 8009458:	40014000 	.word	0x40014000

0800945c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e042      	b.n	80094f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009474:	2b00      	cmp	r3, #0
 8009476:	d106      	bne.n	8009486 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7f8 f9df 	bl	8001844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2224      	movs	r2, #36	; 0x24
 800948a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 0201 	bic.w	r2, r2, #1
 800949c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f82c 	bl	80094fc <UART_SetConfig>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d101      	bne.n	80094ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e022      	b.n	80094f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d002      	beq.n	80094bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fe8c 	bl	800a1d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	685a      	ldr	r2, [r3, #4]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	689a      	ldr	r2, [r3, #8]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f042 0201 	orr.w	r2, r2, #1
 80094ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 ff13 	bl	800a318 <UART_CheckIdleState>
 80094f2:	4603      	mov	r3, r0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009500:	b092      	sub	sp, #72	; 0x48
 8009502:	af00      	add	r7, sp, #0
 8009504:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	689a      	ldr	r2, [r3, #8]
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	431a      	orrs	r2, r3
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	431a      	orrs	r2, r3
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	69db      	ldr	r3, [r3, #28]
 8009520:	4313      	orrs	r3, r2
 8009522:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	4bbe      	ldr	r3, [pc, #760]	; (8009824 <UART_SetConfig+0x328>)
 800952c:	4013      	ands	r3, r2
 800952e:	697a      	ldr	r2, [r7, #20]
 8009530:	6812      	ldr	r2, [r2, #0]
 8009532:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009534:	430b      	orrs	r3, r1
 8009536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	68da      	ldr	r2, [r3, #12]
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	430a      	orrs	r2, r1
 800954c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4ab3      	ldr	r2, [pc, #716]	; (8009828 <UART_SetConfig+0x32c>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d004      	beq.n	8009568 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	6a1b      	ldr	r3, [r3, #32]
 8009562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009564:	4313      	orrs	r3, r2
 8009566:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689a      	ldr	r2, [r3, #8]
 800956e:	4baf      	ldr	r3, [pc, #700]	; (800982c <UART_SetConfig+0x330>)
 8009570:	4013      	ands	r3, r2
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	6812      	ldr	r2, [r2, #0]
 8009576:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009578:	430b      	orrs	r3, r1
 800957a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009582:	f023 010f 	bic.w	r1, r3, #15
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	430a      	orrs	r2, r1
 8009590:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4aa6      	ldr	r2, [pc, #664]	; (8009830 <UART_SetConfig+0x334>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d177      	bne.n	800968c <UART_SetConfig+0x190>
 800959c:	4ba5      	ldr	r3, [pc, #660]	; (8009834 <UART_SetConfig+0x338>)
 800959e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095a4:	2b28      	cmp	r3, #40	; 0x28
 80095a6:	d86d      	bhi.n	8009684 <UART_SetConfig+0x188>
 80095a8:	a201      	add	r2, pc, #4	; (adr r2, 80095b0 <UART_SetConfig+0xb4>)
 80095aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ae:	bf00      	nop
 80095b0:	08009655 	.word	0x08009655
 80095b4:	08009685 	.word	0x08009685
 80095b8:	08009685 	.word	0x08009685
 80095bc:	08009685 	.word	0x08009685
 80095c0:	08009685 	.word	0x08009685
 80095c4:	08009685 	.word	0x08009685
 80095c8:	08009685 	.word	0x08009685
 80095cc:	08009685 	.word	0x08009685
 80095d0:	0800965d 	.word	0x0800965d
 80095d4:	08009685 	.word	0x08009685
 80095d8:	08009685 	.word	0x08009685
 80095dc:	08009685 	.word	0x08009685
 80095e0:	08009685 	.word	0x08009685
 80095e4:	08009685 	.word	0x08009685
 80095e8:	08009685 	.word	0x08009685
 80095ec:	08009685 	.word	0x08009685
 80095f0:	08009665 	.word	0x08009665
 80095f4:	08009685 	.word	0x08009685
 80095f8:	08009685 	.word	0x08009685
 80095fc:	08009685 	.word	0x08009685
 8009600:	08009685 	.word	0x08009685
 8009604:	08009685 	.word	0x08009685
 8009608:	08009685 	.word	0x08009685
 800960c:	08009685 	.word	0x08009685
 8009610:	0800966d 	.word	0x0800966d
 8009614:	08009685 	.word	0x08009685
 8009618:	08009685 	.word	0x08009685
 800961c:	08009685 	.word	0x08009685
 8009620:	08009685 	.word	0x08009685
 8009624:	08009685 	.word	0x08009685
 8009628:	08009685 	.word	0x08009685
 800962c:	08009685 	.word	0x08009685
 8009630:	08009675 	.word	0x08009675
 8009634:	08009685 	.word	0x08009685
 8009638:	08009685 	.word	0x08009685
 800963c:	08009685 	.word	0x08009685
 8009640:	08009685 	.word	0x08009685
 8009644:	08009685 	.word	0x08009685
 8009648:	08009685 	.word	0x08009685
 800964c:	08009685 	.word	0x08009685
 8009650:	0800967d 	.word	0x0800967d
 8009654:	2301      	movs	r3, #1
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965a:	e326      	b.n	8009caa <UART_SetConfig+0x7ae>
 800965c:	2304      	movs	r3, #4
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009662:	e322      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009664:	2308      	movs	r3, #8
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800966a:	e31e      	b.n	8009caa <UART_SetConfig+0x7ae>
 800966c:	2310      	movs	r3, #16
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009672:	e31a      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009674:	2320      	movs	r3, #32
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800967a:	e316      	b.n	8009caa <UART_SetConfig+0x7ae>
 800967c:	2340      	movs	r3, #64	; 0x40
 800967e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009682:	e312      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009684:	2380      	movs	r3, #128	; 0x80
 8009686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800968a:	e30e      	b.n	8009caa <UART_SetConfig+0x7ae>
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a69      	ldr	r2, [pc, #420]	; (8009838 <UART_SetConfig+0x33c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d130      	bne.n	80096f8 <UART_SetConfig+0x1fc>
 8009696:	4b67      	ldr	r3, [pc, #412]	; (8009834 <UART_SetConfig+0x338>)
 8009698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800969a:	f003 0307 	and.w	r3, r3, #7
 800969e:	2b05      	cmp	r3, #5
 80096a0:	d826      	bhi.n	80096f0 <UART_SetConfig+0x1f4>
 80096a2:	a201      	add	r2, pc, #4	; (adr r2, 80096a8 <UART_SetConfig+0x1ac>)
 80096a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a8:	080096c1 	.word	0x080096c1
 80096ac:	080096c9 	.word	0x080096c9
 80096b0:	080096d1 	.word	0x080096d1
 80096b4:	080096d9 	.word	0x080096d9
 80096b8:	080096e1 	.word	0x080096e1
 80096bc:	080096e9 	.word	0x080096e9
 80096c0:	2300      	movs	r3, #0
 80096c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096c6:	e2f0      	b.n	8009caa <UART_SetConfig+0x7ae>
 80096c8:	2304      	movs	r3, #4
 80096ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ce:	e2ec      	b.n	8009caa <UART_SetConfig+0x7ae>
 80096d0:	2308      	movs	r3, #8
 80096d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096d6:	e2e8      	b.n	8009caa <UART_SetConfig+0x7ae>
 80096d8:	2310      	movs	r3, #16
 80096da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096de:	e2e4      	b.n	8009caa <UART_SetConfig+0x7ae>
 80096e0:	2320      	movs	r3, #32
 80096e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096e6:	e2e0      	b.n	8009caa <UART_SetConfig+0x7ae>
 80096e8:	2340      	movs	r3, #64	; 0x40
 80096ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ee:	e2dc      	b.n	8009caa <UART_SetConfig+0x7ae>
 80096f0:	2380      	movs	r3, #128	; 0x80
 80096f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096f6:	e2d8      	b.n	8009caa <UART_SetConfig+0x7ae>
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a4f      	ldr	r2, [pc, #316]	; (800983c <UART_SetConfig+0x340>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d130      	bne.n	8009764 <UART_SetConfig+0x268>
 8009702:	4b4c      	ldr	r3, [pc, #304]	; (8009834 <UART_SetConfig+0x338>)
 8009704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009706:	f003 0307 	and.w	r3, r3, #7
 800970a:	2b05      	cmp	r3, #5
 800970c:	d826      	bhi.n	800975c <UART_SetConfig+0x260>
 800970e:	a201      	add	r2, pc, #4	; (adr r2, 8009714 <UART_SetConfig+0x218>)
 8009710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009714:	0800972d 	.word	0x0800972d
 8009718:	08009735 	.word	0x08009735
 800971c:	0800973d 	.word	0x0800973d
 8009720:	08009745 	.word	0x08009745
 8009724:	0800974d 	.word	0x0800974d
 8009728:	08009755 	.word	0x08009755
 800972c:	2300      	movs	r3, #0
 800972e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009732:	e2ba      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009734:	2304      	movs	r3, #4
 8009736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800973a:	e2b6      	b.n	8009caa <UART_SetConfig+0x7ae>
 800973c:	2308      	movs	r3, #8
 800973e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009742:	e2b2      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009744:	2310      	movs	r3, #16
 8009746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800974a:	e2ae      	b.n	8009caa <UART_SetConfig+0x7ae>
 800974c:	2320      	movs	r3, #32
 800974e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009752:	e2aa      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009754:	2340      	movs	r3, #64	; 0x40
 8009756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800975a:	e2a6      	b.n	8009caa <UART_SetConfig+0x7ae>
 800975c:	2380      	movs	r3, #128	; 0x80
 800975e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009762:	e2a2      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a35      	ldr	r2, [pc, #212]	; (8009840 <UART_SetConfig+0x344>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d130      	bne.n	80097d0 <UART_SetConfig+0x2d4>
 800976e:	4b31      	ldr	r3, [pc, #196]	; (8009834 <UART_SetConfig+0x338>)
 8009770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009772:	f003 0307 	and.w	r3, r3, #7
 8009776:	2b05      	cmp	r3, #5
 8009778:	d826      	bhi.n	80097c8 <UART_SetConfig+0x2cc>
 800977a:	a201      	add	r2, pc, #4	; (adr r2, 8009780 <UART_SetConfig+0x284>)
 800977c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009780:	08009799 	.word	0x08009799
 8009784:	080097a1 	.word	0x080097a1
 8009788:	080097a9 	.word	0x080097a9
 800978c:	080097b1 	.word	0x080097b1
 8009790:	080097b9 	.word	0x080097b9
 8009794:	080097c1 	.word	0x080097c1
 8009798:	2300      	movs	r3, #0
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800979e:	e284      	b.n	8009caa <UART_SetConfig+0x7ae>
 80097a0:	2304      	movs	r3, #4
 80097a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097a6:	e280      	b.n	8009caa <UART_SetConfig+0x7ae>
 80097a8:	2308      	movs	r3, #8
 80097aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ae:	e27c      	b.n	8009caa <UART_SetConfig+0x7ae>
 80097b0:	2310      	movs	r3, #16
 80097b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097b6:	e278      	b.n	8009caa <UART_SetConfig+0x7ae>
 80097b8:	2320      	movs	r3, #32
 80097ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097be:	e274      	b.n	8009caa <UART_SetConfig+0x7ae>
 80097c0:	2340      	movs	r3, #64	; 0x40
 80097c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097c6:	e270      	b.n	8009caa <UART_SetConfig+0x7ae>
 80097c8:	2380      	movs	r3, #128	; 0x80
 80097ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ce:	e26c      	b.n	8009caa <UART_SetConfig+0x7ae>
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a1b      	ldr	r2, [pc, #108]	; (8009844 <UART_SetConfig+0x348>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d142      	bne.n	8009860 <UART_SetConfig+0x364>
 80097da:	4b16      	ldr	r3, [pc, #88]	; (8009834 <UART_SetConfig+0x338>)
 80097dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097de:	f003 0307 	and.w	r3, r3, #7
 80097e2:	2b05      	cmp	r3, #5
 80097e4:	d838      	bhi.n	8009858 <UART_SetConfig+0x35c>
 80097e6:	a201      	add	r2, pc, #4	; (adr r2, 80097ec <UART_SetConfig+0x2f0>)
 80097e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ec:	08009805 	.word	0x08009805
 80097f0:	0800980d 	.word	0x0800980d
 80097f4:	08009815 	.word	0x08009815
 80097f8:	0800981d 	.word	0x0800981d
 80097fc:	08009849 	.word	0x08009849
 8009800:	08009851 	.word	0x08009851
 8009804:	2300      	movs	r3, #0
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980a:	e24e      	b.n	8009caa <UART_SetConfig+0x7ae>
 800980c:	2304      	movs	r3, #4
 800980e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009812:	e24a      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009814:	2308      	movs	r3, #8
 8009816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800981a:	e246      	b.n	8009caa <UART_SetConfig+0x7ae>
 800981c:	2310      	movs	r3, #16
 800981e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009822:	e242      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009824:	cfff69f3 	.word	0xcfff69f3
 8009828:	58000c00 	.word	0x58000c00
 800982c:	11fff4ff 	.word	0x11fff4ff
 8009830:	40011000 	.word	0x40011000
 8009834:	58024400 	.word	0x58024400
 8009838:	40004400 	.word	0x40004400
 800983c:	40004800 	.word	0x40004800
 8009840:	40004c00 	.word	0x40004c00
 8009844:	40005000 	.word	0x40005000
 8009848:	2320      	movs	r3, #32
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800984e:	e22c      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009850:	2340      	movs	r3, #64	; 0x40
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009856:	e228      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009858:	2380      	movs	r3, #128	; 0x80
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985e:	e224      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4ab1      	ldr	r2, [pc, #708]	; (8009b2c <UART_SetConfig+0x630>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d176      	bne.n	8009958 <UART_SetConfig+0x45c>
 800986a:	4bb1      	ldr	r3, [pc, #708]	; (8009b30 <UART_SetConfig+0x634>)
 800986c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800986e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009872:	2b28      	cmp	r3, #40	; 0x28
 8009874:	d86c      	bhi.n	8009950 <UART_SetConfig+0x454>
 8009876:	a201      	add	r2, pc, #4	; (adr r2, 800987c <UART_SetConfig+0x380>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	08009921 	.word	0x08009921
 8009880:	08009951 	.word	0x08009951
 8009884:	08009951 	.word	0x08009951
 8009888:	08009951 	.word	0x08009951
 800988c:	08009951 	.word	0x08009951
 8009890:	08009951 	.word	0x08009951
 8009894:	08009951 	.word	0x08009951
 8009898:	08009951 	.word	0x08009951
 800989c:	08009929 	.word	0x08009929
 80098a0:	08009951 	.word	0x08009951
 80098a4:	08009951 	.word	0x08009951
 80098a8:	08009951 	.word	0x08009951
 80098ac:	08009951 	.word	0x08009951
 80098b0:	08009951 	.word	0x08009951
 80098b4:	08009951 	.word	0x08009951
 80098b8:	08009951 	.word	0x08009951
 80098bc:	08009931 	.word	0x08009931
 80098c0:	08009951 	.word	0x08009951
 80098c4:	08009951 	.word	0x08009951
 80098c8:	08009951 	.word	0x08009951
 80098cc:	08009951 	.word	0x08009951
 80098d0:	08009951 	.word	0x08009951
 80098d4:	08009951 	.word	0x08009951
 80098d8:	08009951 	.word	0x08009951
 80098dc:	08009939 	.word	0x08009939
 80098e0:	08009951 	.word	0x08009951
 80098e4:	08009951 	.word	0x08009951
 80098e8:	08009951 	.word	0x08009951
 80098ec:	08009951 	.word	0x08009951
 80098f0:	08009951 	.word	0x08009951
 80098f4:	08009951 	.word	0x08009951
 80098f8:	08009951 	.word	0x08009951
 80098fc:	08009941 	.word	0x08009941
 8009900:	08009951 	.word	0x08009951
 8009904:	08009951 	.word	0x08009951
 8009908:	08009951 	.word	0x08009951
 800990c:	08009951 	.word	0x08009951
 8009910:	08009951 	.word	0x08009951
 8009914:	08009951 	.word	0x08009951
 8009918:	08009951 	.word	0x08009951
 800991c:	08009949 	.word	0x08009949
 8009920:	2301      	movs	r3, #1
 8009922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009926:	e1c0      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009928:	2304      	movs	r3, #4
 800992a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800992e:	e1bc      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009930:	2308      	movs	r3, #8
 8009932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009936:	e1b8      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009938:	2310      	movs	r3, #16
 800993a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800993e:	e1b4      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009940:	2320      	movs	r3, #32
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009946:	e1b0      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009948:	2340      	movs	r3, #64	; 0x40
 800994a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800994e:	e1ac      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009950:	2380      	movs	r3, #128	; 0x80
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009956:	e1a8      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a75      	ldr	r2, [pc, #468]	; (8009b34 <UART_SetConfig+0x638>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d130      	bne.n	80099c4 <UART_SetConfig+0x4c8>
 8009962:	4b73      	ldr	r3, [pc, #460]	; (8009b30 <UART_SetConfig+0x634>)
 8009964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009966:	f003 0307 	and.w	r3, r3, #7
 800996a:	2b05      	cmp	r3, #5
 800996c:	d826      	bhi.n	80099bc <UART_SetConfig+0x4c0>
 800996e:	a201      	add	r2, pc, #4	; (adr r2, 8009974 <UART_SetConfig+0x478>)
 8009970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009974:	0800998d 	.word	0x0800998d
 8009978:	08009995 	.word	0x08009995
 800997c:	0800999d 	.word	0x0800999d
 8009980:	080099a5 	.word	0x080099a5
 8009984:	080099ad 	.word	0x080099ad
 8009988:	080099b5 	.word	0x080099b5
 800998c:	2300      	movs	r3, #0
 800998e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009992:	e18a      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009994:	2304      	movs	r3, #4
 8009996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800999a:	e186      	b.n	8009caa <UART_SetConfig+0x7ae>
 800999c:	2308      	movs	r3, #8
 800999e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099a2:	e182      	b.n	8009caa <UART_SetConfig+0x7ae>
 80099a4:	2310      	movs	r3, #16
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099aa:	e17e      	b.n	8009caa <UART_SetConfig+0x7ae>
 80099ac:	2320      	movs	r3, #32
 80099ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099b2:	e17a      	b.n	8009caa <UART_SetConfig+0x7ae>
 80099b4:	2340      	movs	r3, #64	; 0x40
 80099b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ba:	e176      	b.n	8009caa <UART_SetConfig+0x7ae>
 80099bc:	2380      	movs	r3, #128	; 0x80
 80099be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c2:	e172      	b.n	8009caa <UART_SetConfig+0x7ae>
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a5b      	ldr	r2, [pc, #364]	; (8009b38 <UART_SetConfig+0x63c>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d130      	bne.n	8009a30 <UART_SetConfig+0x534>
 80099ce:	4b58      	ldr	r3, [pc, #352]	; (8009b30 <UART_SetConfig+0x634>)
 80099d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d2:	f003 0307 	and.w	r3, r3, #7
 80099d6:	2b05      	cmp	r3, #5
 80099d8:	d826      	bhi.n	8009a28 <UART_SetConfig+0x52c>
 80099da:	a201      	add	r2, pc, #4	; (adr r2, 80099e0 <UART_SetConfig+0x4e4>)
 80099dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e0:	080099f9 	.word	0x080099f9
 80099e4:	08009a01 	.word	0x08009a01
 80099e8:	08009a09 	.word	0x08009a09
 80099ec:	08009a11 	.word	0x08009a11
 80099f0:	08009a19 	.word	0x08009a19
 80099f4:	08009a21 	.word	0x08009a21
 80099f8:	2300      	movs	r3, #0
 80099fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099fe:	e154      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009a00:	2304      	movs	r3, #4
 8009a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a06:	e150      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009a08:	2308      	movs	r3, #8
 8009a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0e:	e14c      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009a10:	2310      	movs	r3, #16
 8009a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a16:	e148      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009a18:	2320      	movs	r3, #32
 8009a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a1e:	e144      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009a20:	2340      	movs	r3, #64	; 0x40
 8009a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a26:	e140      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009a28:	2380      	movs	r3, #128	; 0x80
 8009a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2e:	e13c      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a41      	ldr	r2, [pc, #260]	; (8009b3c <UART_SetConfig+0x640>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	f040 8082 	bne.w	8009b40 <UART_SetConfig+0x644>
 8009a3c:	4b3c      	ldr	r3, [pc, #240]	; (8009b30 <UART_SetConfig+0x634>)
 8009a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a44:	2b28      	cmp	r3, #40	; 0x28
 8009a46:	d86d      	bhi.n	8009b24 <UART_SetConfig+0x628>
 8009a48:	a201      	add	r2, pc, #4	; (adr r2, 8009a50 <UART_SetConfig+0x554>)
 8009a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4e:	bf00      	nop
 8009a50:	08009af5 	.word	0x08009af5
 8009a54:	08009b25 	.word	0x08009b25
 8009a58:	08009b25 	.word	0x08009b25
 8009a5c:	08009b25 	.word	0x08009b25
 8009a60:	08009b25 	.word	0x08009b25
 8009a64:	08009b25 	.word	0x08009b25
 8009a68:	08009b25 	.word	0x08009b25
 8009a6c:	08009b25 	.word	0x08009b25
 8009a70:	08009afd 	.word	0x08009afd
 8009a74:	08009b25 	.word	0x08009b25
 8009a78:	08009b25 	.word	0x08009b25
 8009a7c:	08009b25 	.word	0x08009b25
 8009a80:	08009b25 	.word	0x08009b25
 8009a84:	08009b25 	.word	0x08009b25
 8009a88:	08009b25 	.word	0x08009b25
 8009a8c:	08009b25 	.word	0x08009b25
 8009a90:	08009b05 	.word	0x08009b05
 8009a94:	08009b25 	.word	0x08009b25
 8009a98:	08009b25 	.word	0x08009b25
 8009a9c:	08009b25 	.word	0x08009b25
 8009aa0:	08009b25 	.word	0x08009b25
 8009aa4:	08009b25 	.word	0x08009b25
 8009aa8:	08009b25 	.word	0x08009b25
 8009aac:	08009b25 	.word	0x08009b25
 8009ab0:	08009b0d 	.word	0x08009b0d
 8009ab4:	08009b25 	.word	0x08009b25
 8009ab8:	08009b25 	.word	0x08009b25
 8009abc:	08009b25 	.word	0x08009b25
 8009ac0:	08009b25 	.word	0x08009b25
 8009ac4:	08009b25 	.word	0x08009b25
 8009ac8:	08009b25 	.word	0x08009b25
 8009acc:	08009b25 	.word	0x08009b25
 8009ad0:	08009b15 	.word	0x08009b15
 8009ad4:	08009b25 	.word	0x08009b25
 8009ad8:	08009b25 	.word	0x08009b25
 8009adc:	08009b25 	.word	0x08009b25
 8009ae0:	08009b25 	.word	0x08009b25
 8009ae4:	08009b25 	.word	0x08009b25
 8009ae8:	08009b25 	.word	0x08009b25
 8009aec:	08009b25 	.word	0x08009b25
 8009af0:	08009b1d 	.word	0x08009b1d
 8009af4:	2301      	movs	r3, #1
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afa:	e0d6      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009afc:	2304      	movs	r3, #4
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b02:	e0d2      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009b04:	2308      	movs	r3, #8
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0a:	e0ce      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009b0c:	2310      	movs	r3, #16
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b12:	e0ca      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009b14:	2320      	movs	r3, #32
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1a:	e0c6      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009b1c:	2340      	movs	r3, #64	; 0x40
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b22:	e0c2      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009b24:	2380      	movs	r3, #128	; 0x80
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2a:	e0be      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009b2c:	40011400 	.word	0x40011400
 8009b30:	58024400 	.word	0x58024400
 8009b34:	40007800 	.word	0x40007800
 8009b38:	40007c00 	.word	0x40007c00
 8009b3c:	40011800 	.word	0x40011800
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4aad      	ldr	r2, [pc, #692]	; (8009dfc <UART_SetConfig+0x900>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d176      	bne.n	8009c38 <UART_SetConfig+0x73c>
 8009b4a:	4bad      	ldr	r3, [pc, #692]	; (8009e00 <UART_SetConfig+0x904>)
 8009b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b52:	2b28      	cmp	r3, #40	; 0x28
 8009b54:	d86c      	bhi.n	8009c30 <UART_SetConfig+0x734>
 8009b56:	a201      	add	r2, pc, #4	; (adr r2, 8009b5c <UART_SetConfig+0x660>)
 8009b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5c:	08009c01 	.word	0x08009c01
 8009b60:	08009c31 	.word	0x08009c31
 8009b64:	08009c31 	.word	0x08009c31
 8009b68:	08009c31 	.word	0x08009c31
 8009b6c:	08009c31 	.word	0x08009c31
 8009b70:	08009c31 	.word	0x08009c31
 8009b74:	08009c31 	.word	0x08009c31
 8009b78:	08009c31 	.word	0x08009c31
 8009b7c:	08009c09 	.word	0x08009c09
 8009b80:	08009c31 	.word	0x08009c31
 8009b84:	08009c31 	.word	0x08009c31
 8009b88:	08009c31 	.word	0x08009c31
 8009b8c:	08009c31 	.word	0x08009c31
 8009b90:	08009c31 	.word	0x08009c31
 8009b94:	08009c31 	.word	0x08009c31
 8009b98:	08009c31 	.word	0x08009c31
 8009b9c:	08009c11 	.word	0x08009c11
 8009ba0:	08009c31 	.word	0x08009c31
 8009ba4:	08009c31 	.word	0x08009c31
 8009ba8:	08009c31 	.word	0x08009c31
 8009bac:	08009c31 	.word	0x08009c31
 8009bb0:	08009c31 	.word	0x08009c31
 8009bb4:	08009c31 	.word	0x08009c31
 8009bb8:	08009c31 	.word	0x08009c31
 8009bbc:	08009c19 	.word	0x08009c19
 8009bc0:	08009c31 	.word	0x08009c31
 8009bc4:	08009c31 	.word	0x08009c31
 8009bc8:	08009c31 	.word	0x08009c31
 8009bcc:	08009c31 	.word	0x08009c31
 8009bd0:	08009c31 	.word	0x08009c31
 8009bd4:	08009c31 	.word	0x08009c31
 8009bd8:	08009c31 	.word	0x08009c31
 8009bdc:	08009c21 	.word	0x08009c21
 8009be0:	08009c31 	.word	0x08009c31
 8009be4:	08009c31 	.word	0x08009c31
 8009be8:	08009c31 	.word	0x08009c31
 8009bec:	08009c31 	.word	0x08009c31
 8009bf0:	08009c31 	.word	0x08009c31
 8009bf4:	08009c31 	.word	0x08009c31
 8009bf8:	08009c31 	.word	0x08009c31
 8009bfc:	08009c29 	.word	0x08009c29
 8009c00:	2301      	movs	r3, #1
 8009c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c06:	e050      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009c08:	2304      	movs	r3, #4
 8009c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c0e:	e04c      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009c10:	2308      	movs	r3, #8
 8009c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c16:	e048      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009c18:	2310      	movs	r3, #16
 8009c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c1e:	e044      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009c20:	2320      	movs	r3, #32
 8009c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c26:	e040      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009c28:	2340      	movs	r3, #64	; 0x40
 8009c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c2e:	e03c      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009c30:	2380      	movs	r3, #128	; 0x80
 8009c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c36:	e038      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a71      	ldr	r2, [pc, #452]	; (8009e04 <UART_SetConfig+0x908>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d130      	bne.n	8009ca4 <UART_SetConfig+0x7a8>
 8009c42:	4b6f      	ldr	r3, [pc, #444]	; (8009e00 <UART_SetConfig+0x904>)
 8009c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c46:	f003 0307 	and.w	r3, r3, #7
 8009c4a:	2b05      	cmp	r3, #5
 8009c4c:	d826      	bhi.n	8009c9c <UART_SetConfig+0x7a0>
 8009c4e:	a201      	add	r2, pc, #4	; (adr r2, 8009c54 <UART_SetConfig+0x758>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009c6d 	.word	0x08009c6d
 8009c58:	08009c75 	.word	0x08009c75
 8009c5c:	08009c7d 	.word	0x08009c7d
 8009c60:	08009c85 	.word	0x08009c85
 8009c64:	08009c8d 	.word	0x08009c8d
 8009c68:	08009c95 	.word	0x08009c95
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c72:	e01a      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009c74:	2304      	movs	r3, #4
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7a:	e016      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009c7c:	2308      	movs	r3, #8
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c82:	e012      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009c84:	2310      	movs	r3, #16
 8009c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8a:	e00e      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009c8c:	2320      	movs	r3, #32
 8009c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c92:	e00a      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009c94:	2340      	movs	r3, #64	; 0x40
 8009c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c9a:	e006      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009c9c:	2380      	movs	r3, #128	; 0x80
 8009c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ca2:	e002      	b.n	8009caa <UART_SetConfig+0x7ae>
 8009ca4:	2380      	movs	r3, #128	; 0x80
 8009ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a55      	ldr	r2, [pc, #340]	; (8009e04 <UART_SetConfig+0x908>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	f040 80f8 	bne.w	8009ea6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009cb6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009cba:	2b20      	cmp	r3, #32
 8009cbc:	dc46      	bgt.n	8009d4c <UART_SetConfig+0x850>
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	db75      	blt.n	8009dae <UART_SetConfig+0x8b2>
 8009cc2:	3b02      	subs	r3, #2
 8009cc4:	2b1e      	cmp	r3, #30
 8009cc6:	d872      	bhi.n	8009dae <UART_SetConfig+0x8b2>
 8009cc8:	a201      	add	r2, pc, #4	; (adr r2, 8009cd0 <UART_SetConfig+0x7d4>)
 8009cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cce:	bf00      	nop
 8009cd0:	08009d53 	.word	0x08009d53
 8009cd4:	08009daf 	.word	0x08009daf
 8009cd8:	08009d5b 	.word	0x08009d5b
 8009cdc:	08009daf 	.word	0x08009daf
 8009ce0:	08009daf 	.word	0x08009daf
 8009ce4:	08009daf 	.word	0x08009daf
 8009ce8:	08009d6b 	.word	0x08009d6b
 8009cec:	08009daf 	.word	0x08009daf
 8009cf0:	08009daf 	.word	0x08009daf
 8009cf4:	08009daf 	.word	0x08009daf
 8009cf8:	08009daf 	.word	0x08009daf
 8009cfc:	08009daf 	.word	0x08009daf
 8009d00:	08009daf 	.word	0x08009daf
 8009d04:	08009daf 	.word	0x08009daf
 8009d08:	08009d7b 	.word	0x08009d7b
 8009d0c:	08009daf 	.word	0x08009daf
 8009d10:	08009daf 	.word	0x08009daf
 8009d14:	08009daf 	.word	0x08009daf
 8009d18:	08009daf 	.word	0x08009daf
 8009d1c:	08009daf 	.word	0x08009daf
 8009d20:	08009daf 	.word	0x08009daf
 8009d24:	08009daf 	.word	0x08009daf
 8009d28:	08009daf 	.word	0x08009daf
 8009d2c:	08009daf 	.word	0x08009daf
 8009d30:	08009daf 	.word	0x08009daf
 8009d34:	08009daf 	.word	0x08009daf
 8009d38:	08009daf 	.word	0x08009daf
 8009d3c:	08009daf 	.word	0x08009daf
 8009d40:	08009daf 	.word	0x08009daf
 8009d44:	08009daf 	.word	0x08009daf
 8009d48:	08009da1 	.word	0x08009da1
 8009d4c:	2b40      	cmp	r3, #64	; 0x40
 8009d4e:	d02a      	beq.n	8009da6 <UART_SetConfig+0x8aa>
 8009d50:	e02d      	b.n	8009dae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009d52:	f7fe fa89 	bl	8008268 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d58:	e02f      	b.n	8009dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fe fa98 	bl	8008294 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d68:	e027      	b.n	8009dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d6a:	f107 0318 	add.w	r3, r7, #24
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fe fbe4 	bl	800853c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d78:	e01f      	b.n	8009dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d7a:	4b21      	ldr	r3, [pc, #132]	; (8009e00 <UART_SetConfig+0x904>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f003 0320 	and.w	r3, r3, #32
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d009      	beq.n	8009d9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d86:	4b1e      	ldr	r3, [pc, #120]	; (8009e00 <UART_SetConfig+0x904>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	08db      	lsrs	r3, r3, #3
 8009d8c:	f003 0303 	and.w	r3, r3, #3
 8009d90:	4a1d      	ldr	r2, [pc, #116]	; (8009e08 <UART_SetConfig+0x90c>)
 8009d92:	fa22 f303 	lsr.w	r3, r2, r3
 8009d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d98:	e00f      	b.n	8009dba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009d9a:	4b1b      	ldr	r3, [pc, #108]	; (8009e08 <UART_SetConfig+0x90c>)
 8009d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d9e:	e00c      	b.n	8009dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009da0:	4b1a      	ldr	r3, [pc, #104]	; (8009e0c <UART_SetConfig+0x910>)
 8009da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009da4:	e009      	b.n	8009dba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dac:	e005      	b.n	8009dba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009dae:	2300      	movs	r3, #0
 8009db0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009db8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	f000 81ee 	beq.w	800a19e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc6:	4a12      	ldr	r2, [pc, #72]	; (8009e10 <UART_SetConfig+0x914>)
 8009dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dcc:	461a      	mov	r2, r3
 8009dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dd4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	005b      	lsls	r3, r3, #1
 8009dde:	4413      	add	r3, r2
 8009de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d305      	bcc.n	8009df2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d910      	bls.n	8009e14 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009df8:	e1d1      	b.n	800a19e <UART_SetConfig+0xca2>
 8009dfa:	bf00      	nop
 8009dfc:	40011c00 	.word	0x40011c00
 8009e00:	58024400 	.word	0x58024400
 8009e04:	58000c00 	.word	0x58000c00
 8009e08:	03d09000 	.word	0x03d09000
 8009e0c:	003d0900 	.word	0x003d0900
 8009e10:	0800a94c 	.word	0x0800a94c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e16:	2200      	movs	r2, #0
 8009e18:	60bb      	str	r3, [r7, #8]
 8009e1a:	60fa      	str	r2, [r7, #12]
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e20:	4ac0      	ldr	r2, [pc, #768]	; (800a124 <UART_SetConfig+0xc28>)
 8009e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	2200      	movs	r2, #0
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	607a      	str	r2, [r7, #4]
 8009e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e36:	f7f6 fa5b 	bl	80002f0 <__aeabi_uldivmod>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4610      	mov	r0, r2
 8009e40:	4619      	mov	r1, r3
 8009e42:	f04f 0200 	mov.w	r2, #0
 8009e46:	f04f 0300 	mov.w	r3, #0
 8009e4a:	020b      	lsls	r3, r1, #8
 8009e4c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e50:	0202      	lsls	r2, r0, #8
 8009e52:	6979      	ldr	r1, [r7, #20]
 8009e54:	6849      	ldr	r1, [r1, #4]
 8009e56:	0849      	lsrs	r1, r1, #1
 8009e58:	2000      	movs	r0, #0
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	eb12 0804 	adds.w	r8, r2, r4
 8009e62:	eb43 0905 	adc.w	r9, r3, r5
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	469a      	mov	sl, r3
 8009e6e:	4693      	mov	fp, r2
 8009e70:	4652      	mov	r2, sl
 8009e72:	465b      	mov	r3, fp
 8009e74:	4640      	mov	r0, r8
 8009e76:	4649      	mov	r1, r9
 8009e78:	f7f6 fa3a 	bl	80002f0 <__aeabi_uldivmod>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4613      	mov	r3, r2
 8009e82:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e8a:	d308      	bcc.n	8009e9e <UART_SetConfig+0x9a2>
 8009e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e92:	d204      	bcs.n	8009e9e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e9a:	60da      	str	r2, [r3, #12]
 8009e9c:	e17f      	b.n	800a19e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009ea4:	e17b      	b.n	800a19e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009eae:	f040 80bd 	bne.w	800a02c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009eb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009eb6:	2b20      	cmp	r3, #32
 8009eb8:	dc48      	bgt.n	8009f4c <UART_SetConfig+0xa50>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	db7b      	blt.n	8009fb6 <UART_SetConfig+0xaba>
 8009ebe:	2b20      	cmp	r3, #32
 8009ec0:	d879      	bhi.n	8009fb6 <UART_SetConfig+0xaba>
 8009ec2:	a201      	add	r2, pc, #4	; (adr r2, 8009ec8 <UART_SetConfig+0x9cc>)
 8009ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec8:	08009f53 	.word	0x08009f53
 8009ecc:	08009f5b 	.word	0x08009f5b
 8009ed0:	08009fb7 	.word	0x08009fb7
 8009ed4:	08009fb7 	.word	0x08009fb7
 8009ed8:	08009f63 	.word	0x08009f63
 8009edc:	08009fb7 	.word	0x08009fb7
 8009ee0:	08009fb7 	.word	0x08009fb7
 8009ee4:	08009fb7 	.word	0x08009fb7
 8009ee8:	08009f73 	.word	0x08009f73
 8009eec:	08009fb7 	.word	0x08009fb7
 8009ef0:	08009fb7 	.word	0x08009fb7
 8009ef4:	08009fb7 	.word	0x08009fb7
 8009ef8:	08009fb7 	.word	0x08009fb7
 8009efc:	08009fb7 	.word	0x08009fb7
 8009f00:	08009fb7 	.word	0x08009fb7
 8009f04:	08009fb7 	.word	0x08009fb7
 8009f08:	08009f83 	.word	0x08009f83
 8009f0c:	08009fb7 	.word	0x08009fb7
 8009f10:	08009fb7 	.word	0x08009fb7
 8009f14:	08009fb7 	.word	0x08009fb7
 8009f18:	08009fb7 	.word	0x08009fb7
 8009f1c:	08009fb7 	.word	0x08009fb7
 8009f20:	08009fb7 	.word	0x08009fb7
 8009f24:	08009fb7 	.word	0x08009fb7
 8009f28:	08009fb7 	.word	0x08009fb7
 8009f2c:	08009fb7 	.word	0x08009fb7
 8009f30:	08009fb7 	.word	0x08009fb7
 8009f34:	08009fb7 	.word	0x08009fb7
 8009f38:	08009fb7 	.word	0x08009fb7
 8009f3c:	08009fb7 	.word	0x08009fb7
 8009f40:	08009fb7 	.word	0x08009fb7
 8009f44:	08009fb7 	.word	0x08009fb7
 8009f48:	08009fa9 	.word	0x08009fa9
 8009f4c:	2b40      	cmp	r3, #64	; 0x40
 8009f4e:	d02e      	beq.n	8009fae <UART_SetConfig+0xab2>
 8009f50:	e031      	b.n	8009fb6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f52:	f7fc fe23 	bl	8006b9c <HAL_RCC_GetPCLK1Freq>
 8009f56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f58:	e033      	b.n	8009fc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f5a:	f7fc fe35 	bl	8006bc8 <HAL_RCC_GetPCLK2Freq>
 8009f5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f60:	e02f      	b.n	8009fc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fe f994 	bl	8008294 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f70:	e027      	b.n	8009fc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f72:	f107 0318 	add.w	r3, r7, #24
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe fae0 	bl	800853c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f80:	e01f      	b.n	8009fc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f82:	4b69      	ldr	r3, [pc, #420]	; (800a128 <UART_SetConfig+0xc2c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0320 	and.w	r3, r3, #32
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d009      	beq.n	8009fa2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f8e:	4b66      	ldr	r3, [pc, #408]	; (800a128 <UART_SetConfig+0xc2c>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	08db      	lsrs	r3, r3, #3
 8009f94:	f003 0303 	and.w	r3, r3, #3
 8009f98:	4a64      	ldr	r2, [pc, #400]	; (800a12c <UART_SetConfig+0xc30>)
 8009f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fa0:	e00f      	b.n	8009fc2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009fa2:	4b62      	ldr	r3, [pc, #392]	; (800a12c <UART_SetConfig+0xc30>)
 8009fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fa6:	e00c      	b.n	8009fc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fa8:	4b61      	ldr	r3, [pc, #388]	; (800a130 <UART_SetConfig+0xc34>)
 8009faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fac:	e009      	b.n	8009fc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fb4:	e005      	b.n	8009fc2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009fc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 80ea 	beq.w	800a19e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	4a55      	ldr	r2, [pc, #340]	; (800a124 <UART_SetConfig+0xc28>)
 8009fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fdc:	005a      	lsls	r2, r3, #1
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	085b      	lsrs	r3, r3, #1
 8009fe4:	441a      	add	r2, r3
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff2:	2b0f      	cmp	r3, #15
 8009ff4:	d916      	bls.n	800a024 <UART_SetConfig+0xb28>
 8009ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ffc:	d212      	bcs.n	800a024 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a000:	b29b      	uxth	r3, r3
 800a002:	f023 030f 	bic.w	r3, r3, #15
 800a006:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00a:	085b      	lsrs	r3, r3, #1
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	f003 0307 	and.w	r3, r3, #7
 800a012:	b29a      	uxth	r2, r3
 800a014:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a016:	4313      	orrs	r3, r2
 800a018:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a020:	60da      	str	r2, [r3, #12]
 800a022:	e0bc      	b.n	800a19e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a02a:	e0b8      	b.n	800a19e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a02c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a030:	2b20      	cmp	r3, #32
 800a032:	dc4b      	bgt.n	800a0cc <UART_SetConfig+0xbd0>
 800a034:	2b00      	cmp	r3, #0
 800a036:	f2c0 8087 	blt.w	800a148 <UART_SetConfig+0xc4c>
 800a03a:	2b20      	cmp	r3, #32
 800a03c:	f200 8084 	bhi.w	800a148 <UART_SetConfig+0xc4c>
 800a040:	a201      	add	r2, pc, #4	; (adr r2, 800a048 <UART_SetConfig+0xb4c>)
 800a042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a046:	bf00      	nop
 800a048:	0800a0d3 	.word	0x0800a0d3
 800a04c:	0800a0db 	.word	0x0800a0db
 800a050:	0800a149 	.word	0x0800a149
 800a054:	0800a149 	.word	0x0800a149
 800a058:	0800a0e3 	.word	0x0800a0e3
 800a05c:	0800a149 	.word	0x0800a149
 800a060:	0800a149 	.word	0x0800a149
 800a064:	0800a149 	.word	0x0800a149
 800a068:	0800a0f3 	.word	0x0800a0f3
 800a06c:	0800a149 	.word	0x0800a149
 800a070:	0800a149 	.word	0x0800a149
 800a074:	0800a149 	.word	0x0800a149
 800a078:	0800a149 	.word	0x0800a149
 800a07c:	0800a149 	.word	0x0800a149
 800a080:	0800a149 	.word	0x0800a149
 800a084:	0800a149 	.word	0x0800a149
 800a088:	0800a103 	.word	0x0800a103
 800a08c:	0800a149 	.word	0x0800a149
 800a090:	0800a149 	.word	0x0800a149
 800a094:	0800a149 	.word	0x0800a149
 800a098:	0800a149 	.word	0x0800a149
 800a09c:	0800a149 	.word	0x0800a149
 800a0a0:	0800a149 	.word	0x0800a149
 800a0a4:	0800a149 	.word	0x0800a149
 800a0a8:	0800a149 	.word	0x0800a149
 800a0ac:	0800a149 	.word	0x0800a149
 800a0b0:	0800a149 	.word	0x0800a149
 800a0b4:	0800a149 	.word	0x0800a149
 800a0b8:	0800a149 	.word	0x0800a149
 800a0bc:	0800a149 	.word	0x0800a149
 800a0c0:	0800a149 	.word	0x0800a149
 800a0c4:	0800a149 	.word	0x0800a149
 800a0c8:	0800a13b 	.word	0x0800a13b
 800a0cc:	2b40      	cmp	r3, #64	; 0x40
 800a0ce:	d037      	beq.n	800a140 <UART_SetConfig+0xc44>
 800a0d0:	e03a      	b.n	800a148 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0d2:	f7fc fd63 	bl	8006b9c <HAL_RCC_GetPCLK1Freq>
 800a0d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a0d8:	e03c      	b.n	800a154 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0da:	f7fc fd75 	bl	8006bc8 <HAL_RCC_GetPCLK2Freq>
 800a0de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a0e0:	e038      	b.n	800a154 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fe f8d4 	bl	8008294 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0f0:	e030      	b.n	800a154 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0f2:	f107 0318 	add.w	r3, r7, #24
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fe fa20 	bl	800853c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a100:	e028      	b.n	800a154 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a102:	4b09      	ldr	r3, [pc, #36]	; (800a128 <UART_SetConfig+0xc2c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0320 	and.w	r3, r3, #32
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d012      	beq.n	800a134 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a10e:	4b06      	ldr	r3, [pc, #24]	; (800a128 <UART_SetConfig+0xc2c>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	08db      	lsrs	r3, r3, #3
 800a114:	f003 0303 	and.w	r3, r3, #3
 800a118:	4a04      	ldr	r2, [pc, #16]	; (800a12c <UART_SetConfig+0xc30>)
 800a11a:	fa22 f303 	lsr.w	r3, r2, r3
 800a11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a120:	e018      	b.n	800a154 <UART_SetConfig+0xc58>
 800a122:	bf00      	nop
 800a124:	0800a94c 	.word	0x0800a94c
 800a128:	58024400 	.word	0x58024400
 800a12c:	03d09000 	.word	0x03d09000
 800a130:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a134:	4b24      	ldr	r3, [pc, #144]	; (800a1c8 <UART_SetConfig+0xccc>)
 800a136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a138:	e00c      	b.n	800a154 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a13a:	4b24      	ldr	r3, [pc, #144]	; (800a1cc <UART_SetConfig+0xcd0>)
 800a13c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a13e:	e009      	b.n	800a154 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a146:	e005      	b.n	800a154 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a148:	2300      	movs	r3, #0
 800a14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a152:	bf00      	nop
    }

    if (pclk != 0U)
 800a154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a156:	2b00      	cmp	r3, #0
 800a158:	d021      	beq.n	800a19e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15e:	4a1c      	ldr	r2, [pc, #112]	; (800a1d0 <UART_SetConfig+0xcd4>)
 800a160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a164:	461a      	mov	r2, r3
 800a166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a168:	fbb3 f2f2 	udiv	r2, r3, r2
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	085b      	lsrs	r3, r3, #1
 800a172:	441a      	add	r2, r3
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	fbb2 f3f3 	udiv	r3, r2, r3
 800a17c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a180:	2b0f      	cmp	r3, #15
 800a182:	d909      	bls.n	800a198 <UART_SetConfig+0xc9c>
 800a184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a18a:	d205      	bcs.n	800a198 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18e:	b29a      	uxth	r2, r3
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	60da      	str	r2, [r3, #12]
 800a196:	e002      	b.n	800a19e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a1ba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3748      	adds	r7, #72	; 0x48
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1c8:	03d09000 	.word	0x03d09000
 800a1cc:	003d0900 	.word	0x003d0900
 800a1d0:	0800a94c 	.word	0x0800a94c

0800a1d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00a      	beq.n	800a1fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a202:	f003 0302 	and.w	r3, r3, #2
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00a      	beq.n	800a220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	430a      	orrs	r2, r1
 800a21e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a224:	f003 0304 	and.w	r3, r3, #4
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00a      	beq.n	800a242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	430a      	orrs	r2, r1
 800a240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a246:	f003 0308 	and.w	r3, r3, #8
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00a      	beq.n	800a264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	430a      	orrs	r2, r1
 800a262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a268:	f003 0310 	and.w	r3, r3, #16
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00a      	beq.n	800a286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	430a      	orrs	r2, r1
 800a284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28a:	f003 0320 	and.w	r3, r3, #32
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d00a      	beq.n	800a2a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d01a      	beq.n	800a2ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2d2:	d10a      	bne.n	800a2ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	430a      	orrs	r2, r1
 800a2e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00a      	beq.n	800a30c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	430a      	orrs	r2, r1
 800a30a:	605a      	str	r2, [r3, #4]
  }
}
 800a30c:	bf00      	nop
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af02      	add	r7, sp, #8
 800a31e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a328:	f7f7 fbaa 	bl	8001a80 <HAL_GetTick>
 800a32c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 0308 	and.w	r3, r3, #8
 800a338:	2b08      	cmp	r3, #8
 800a33a:	d10e      	bne.n	800a35a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a33c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2200      	movs	r2, #0
 800a346:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f82f 	bl	800a3ae <UART_WaitOnFlagUntilTimeout>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d001      	beq.n	800a35a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a356:	2303      	movs	r3, #3
 800a358:	e025      	b.n	800a3a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0304 	and.w	r3, r3, #4
 800a364:	2b04      	cmp	r3, #4
 800a366:	d10e      	bne.n	800a386 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a36c:	9300      	str	r3, [sp, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f819 	bl	800a3ae <UART_WaitOnFlagUntilTimeout>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a382:	2303      	movs	r3, #3
 800a384:	e00f      	b.n	800a3a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2220      	movs	r2, #32
 800a38a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2220      	movs	r2, #32
 800a392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b09c      	sub	sp, #112	; 0x70
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	60f8      	str	r0, [r7, #12]
 800a3b6:	60b9      	str	r1, [r7, #8]
 800a3b8:	603b      	str	r3, [r7, #0]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3be:	e0a9      	b.n	800a514 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c6:	f000 80a5 	beq.w	800a514 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3ca:	f7f7 fb59 	bl	8001a80 <HAL_GetTick>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d302      	bcc.n	800a3e0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a3da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d140      	bne.n	800a462 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3e8:	e853 3f00 	ldrex	r3, [r3]
 800a3ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a3ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a3f4:	667b      	str	r3, [r7, #100]	; 0x64
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a400:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a402:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a404:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a406:	e841 2300 	strex	r3, r2, [r1]
 800a40a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a40c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1e6      	bne.n	800a3e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	3308      	adds	r3, #8
 800a418:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a41a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a41c:	e853 3f00 	ldrex	r3, [r3]
 800a420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a424:	f023 0301 	bic.w	r3, r3, #1
 800a428:	663b      	str	r3, [r7, #96]	; 0x60
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3308      	adds	r3, #8
 800a430:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a432:	64ba      	str	r2, [r7, #72]	; 0x48
 800a434:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a436:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a43a:	e841 2300 	strex	r3, r2, [r1]
 800a43e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1e5      	bne.n	800a412 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2220      	movs	r2, #32
 800a44a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2220      	movs	r2, #32
 800a452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	e069      	b.n	800a536 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 0304 	and.w	r3, r3, #4
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d051      	beq.n	800a514 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a47a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a47e:	d149      	bne.n	800a514 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a488:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a492:	e853 3f00 	ldrex	r3, [r3]
 800a496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a49e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4a8:	637b      	str	r3, [r7, #52]	; 0x34
 800a4aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4b0:	e841 2300 	strex	r3, r2, [r1]
 800a4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1e6      	bne.n	800a48a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	3308      	adds	r3, #8
 800a4c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	613b      	str	r3, [r7, #16]
   return(result);
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	f023 0301 	bic.w	r3, r3, #1
 800a4d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3308      	adds	r3, #8
 800a4da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a4dc:	623a      	str	r2, [r7, #32]
 800a4de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e0:	69f9      	ldr	r1, [r7, #28]
 800a4e2:	6a3a      	ldr	r2, [r7, #32]
 800a4e4:	e841 2300 	strex	r3, r2, [r1]
 800a4e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e5      	bne.n	800a4bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2220      	movs	r2, #32
 800a504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a510:	2303      	movs	r3, #3
 800a512:	e010      	b.n	800a536 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	69da      	ldr	r2, [r3, #28]
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	4013      	ands	r3, r2
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	429a      	cmp	r2, r3
 800a522:	bf0c      	ite	eq
 800a524:	2301      	moveq	r3, #1
 800a526:	2300      	movne	r3, #0
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	461a      	mov	r2, r3
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	429a      	cmp	r2, r3
 800a530:	f43f af46 	beq.w	800a3c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3770      	adds	r7, #112	; 0x70
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a53e:	b480      	push	{r7}
 800a540:	b085      	sub	sp, #20
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d101      	bne.n	800a554 <HAL_UARTEx_DisableFifoMode+0x16>
 800a550:	2302      	movs	r3, #2
 800a552:	e027      	b.n	800a5a4 <HAL_UARTEx_DisableFifoMode+0x66>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2224      	movs	r2, #36	; 0x24
 800a560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f022 0201 	bic.w	r2, r2, #1
 800a57a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a582:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2220      	movs	r2, #32
 800a596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3714      	adds	r7, #20
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d101      	bne.n	800a5c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	e02d      	b.n	800a624 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2224      	movs	r2, #36	; 0x24
 800a5d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f022 0201 	bic.w	r2, r2, #1
 800a5ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	430a      	orrs	r2, r1
 800a602:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 f84f 	bl	800a6a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2220      	movs	r2, #32
 800a616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d101      	bne.n	800a644 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a640:	2302      	movs	r3, #2
 800a642:	e02d      	b.n	800a6a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2224      	movs	r2, #36	; 0x24
 800a650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f022 0201 	bic.w	r2, r2, #1
 800a66a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	430a      	orrs	r2, r1
 800a67e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f811 	bl	800a6a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2220      	movs	r2, #32
 800a692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d108      	bne.n	800a6ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6c8:	e031      	b.n	800a72e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6ca:	2310      	movs	r3, #16
 800a6cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6ce:	2310      	movs	r3, #16
 800a6d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	0e5b      	lsrs	r3, r3, #25
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	f003 0307 	and.w	r3, r3, #7
 800a6e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	0f5b      	lsrs	r3, r3, #29
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	f003 0307 	and.w	r3, r3, #7
 800a6f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6f2:	7bbb      	ldrb	r3, [r7, #14]
 800a6f4:	7b3a      	ldrb	r2, [r7, #12]
 800a6f6:	4911      	ldr	r1, [pc, #68]	; (800a73c <UARTEx_SetNbDataToProcess+0x94>)
 800a6f8:	5c8a      	ldrb	r2, [r1, r2]
 800a6fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6fe:	7b3a      	ldrb	r2, [r7, #12]
 800a700:	490f      	ldr	r1, [pc, #60]	; (800a740 <UARTEx_SetNbDataToProcess+0x98>)
 800a702:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a704:	fb93 f3f2 	sdiv	r3, r3, r2
 800a708:	b29a      	uxth	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a710:	7bfb      	ldrb	r3, [r7, #15]
 800a712:	7b7a      	ldrb	r2, [r7, #13]
 800a714:	4909      	ldr	r1, [pc, #36]	; (800a73c <UARTEx_SetNbDataToProcess+0x94>)
 800a716:	5c8a      	ldrb	r2, [r1, r2]
 800a718:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a71c:	7b7a      	ldrb	r2, [r7, #13]
 800a71e:	4908      	ldr	r1, [pc, #32]	; (800a740 <UARTEx_SetNbDataToProcess+0x98>)
 800a720:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a722:	fb93 f3f2 	sdiv	r3, r3, r2
 800a726:	b29a      	uxth	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a72e:	bf00      	nop
 800a730:	3714      	adds	r7, #20
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	0800a964 	.word	0x0800a964
 800a740:	0800a96c 	.word	0x0800a96c

0800a744 <__errno>:
 800a744:	4b01      	ldr	r3, [pc, #4]	; (800a74c <__errno+0x8>)
 800a746:	6818      	ldr	r0, [r3, #0]
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	24000010 	.word	0x24000010

0800a750 <__libc_init_array>:
 800a750:	b570      	push	{r4, r5, r6, lr}
 800a752:	4d0d      	ldr	r5, [pc, #52]	; (800a788 <__libc_init_array+0x38>)
 800a754:	4c0d      	ldr	r4, [pc, #52]	; (800a78c <__libc_init_array+0x3c>)
 800a756:	1b64      	subs	r4, r4, r5
 800a758:	10a4      	asrs	r4, r4, #2
 800a75a:	2600      	movs	r6, #0
 800a75c:	42a6      	cmp	r6, r4
 800a75e:	d109      	bne.n	800a774 <__libc_init_array+0x24>
 800a760:	4d0b      	ldr	r5, [pc, #44]	; (800a790 <__libc_init_array+0x40>)
 800a762:	4c0c      	ldr	r4, [pc, #48]	; (800a794 <__libc_init_array+0x44>)
 800a764:	f000 f8da 	bl	800a91c <_init>
 800a768:	1b64      	subs	r4, r4, r5
 800a76a:	10a4      	asrs	r4, r4, #2
 800a76c:	2600      	movs	r6, #0
 800a76e:	42a6      	cmp	r6, r4
 800a770:	d105      	bne.n	800a77e <__libc_init_array+0x2e>
 800a772:	bd70      	pop	{r4, r5, r6, pc}
 800a774:	f855 3b04 	ldr.w	r3, [r5], #4
 800a778:	4798      	blx	r3
 800a77a:	3601      	adds	r6, #1
 800a77c:	e7ee      	b.n	800a75c <__libc_init_array+0xc>
 800a77e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a782:	4798      	blx	r3
 800a784:	3601      	adds	r6, #1
 800a786:	e7f2      	b.n	800a76e <__libc_init_array+0x1e>
 800a788:	0800a97c 	.word	0x0800a97c
 800a78c:	0800a97c 	.word	0x0800a97c
 800a790:	0800a97c 	.word	0x0800a97c
 800a794:	0800a980 	.word	0x0800a980

0800a798 <malloc>:
 800a798:	4b02      	ldr	r3, [pc, #8]	; (800a7a4 <malloc+0xc>)
 800a79a:	4601      	mov	r1, r0
 800a79c:	6818      	ldr	r0, [r3, #0]
 800a79e:	f000 b82b 	b.w	800a7f8 <_malloc_r>
 800a7a2:	bf00      	nop
 800a7a4:	24000010 	.word	0x24000010

0800a7a8 <memset>:
 800a7a8:	4402      	add	r2, r0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d100      	bne.n	800a7b2 <memset+0xa>
 800a7b0:	4770      	bx	lr
 800a7b2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7b6:	e7f9      	b.n	800a7ac <memset+0x4>

0800a7b8 <sbrk_aligned>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	4e0e      	ldr	r6, [pc, #56]	; (800a7f4 <sbrk_aligned+0x3c>)
 800a7bc:	460c      	mov	r4, r1
 800a7be:	6831      	ldr	r1, [r6, #0]
 800a7c0:	4605      	mov	r5, r0
 800a7c2:	b911      	cbnz	r1, 800a7ca <sbrk_aligned+0x12>
 800a7c4:	f000 f88c 	bl	800a8e0 <_sbrk_r>
 800a7c8:	6030      	str	r0, [r6, #0]
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f000 f887 	bl	800a8e0 <_sbrk_r>
 800a7d2:	1c43      	adds	r3, r0, #1
 800a7d4:	d00a      	beq.n	800a7ec <sbrk_aligned+0x34>
 800a7d6:	1cc4      	adds	r4, r0, #3
 800a7d8:	f024 0403 	bic.w	r4, r4, #3
 800a7dc:	42a0      	cmp	r0, r4
 800a7de:	d007      	beq.n	800a7f0 <sbrk_aligned+0x38>
 800a7e0:	1a21      	subs	r1, r4, r0
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f000 f87c 	bl	800a8e0 <_sbrk_r>
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	d101      	bne.n	800a7f0 <sbrk_aligned+0x38>
 800a7ec:	f04f 34ff 	mov.w	r4, #4294967295
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
 800a7f4:	24000854 	.word	0x24000854

0800a7f8 <_malloc_r>:
 800a7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fc:	1ccd      	adds	r5, r1, #3
 800a7fe:	f025 0503 	bic.w	r5, r5, #3
 800a802:	3508      	adds	r5, #8
 800a804:	2d0c      	cmp	r5, #12
 800a806:	bf38      	it	cc
 800a808:	250c      	movcc	r5, #12
 800a80a:	2d00      	cmp	r5, #0
 800a80c:	4607      	mov	r7, r0
 800a80e:	db01      	blt.n	800a814 <_malloc_r+0x1c>
 800a810:	42a9      	cmp	r1, r5
 800a812:	d905      	bls.n	800a820 <_malloc_r+0x28>
 800a814:	230c      	movs	r3, #12
 800a816:	603b      	str	r3, [r7, #0]
 800a818:	2600      	movs	r6, #0
 800a81a:	4630      	mov	r0, r6
 800a81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a820:	4e2e      	ldr	r6, [pc, #184]	; (800a8dc <_malloc_r+0xe4>)
 800a822:	f000 f86d 	bl	800a900 <__malloc_lock>
 800a826:	6833      	ldr	r3, [r6, #0]
 800a828:	461c      	mov	r4, r3
 800a82a:	bb34      	cbnz	r4, 800a87a <_malloc_r+0x82>
 800a82c:	4629      	mov	r1, r5
 800a82e:	4638      	mov	r0, r7
 800a830:	f7ff ffc2 	bl	800a7b8 <sbrk_aligned>
 800a834:	1c43      	adds	r3, r0, #1
 800a836:	4604      	mov	r4, r0
 800a838:	d14d      	bne.n	800a8d6 <_malloc_r+0xde>
 800a83a:	6834      	ldr	r4, [r6, #0]
 800a83c:	4626      	mov	r6, r4
 800a83e:	2e00      	cmp	r6, #0
 800a840:	d140      	bne.n	800a8c4 <_malloc_r+0xcc>
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	4631      	mov	r1, r6
 800a846:	4638      	mov	r0, r7
 800a848:	eb04 0803 	add.w	r8, r4, r3
 800a84c:	f000 f848 	bl	800a8e0 <_sbrk_r>
 800a850:	4580      	cmp	r8, r0
 800a852:	d13a      	bne.n	800a8ca <_malloc_r+0xd2>
 800a854:	6821      	ldr	r1, [r4, #0]
 800a856:	3503      	adds	r5, #3
 800a858:	1a6d      	subs	r5, r5, r1
 800a85a:	f025 0503 	bic.w	r5, r5, #3
 800a85e:	3508      	adds	r5, #8
 800a860:	2d0c      	cmp	r5, #12
 800a862:	bf38      	it	cc
 800a864:	250c      	movcc	r5, #12
 800a866:	4629      	mov	r1, r5
 800a868:	4638      	mov	r0, r7
 800a86a:	f7ff ffa5 	bl	800a7b8 <sbrk_aligned>
 800a86e:	3001      	adds	r0, #1
 800a870:	d02b      	beq.n	800a8ca <_malloc_r+0xd2>
 800a872:	6823      	ldr	r3, [r4, #0]
 800a874:	442b      	add	r3, r5
 800a876:	6023      	str	r3, [r4, #0]
 800a878:	e00e      	b.n	800a898 <_malloc_r+0xa0>
 800a87a:	6822      	ldr	r2, [r4, #0]
 800a87c:	1b52      	subs	r2, r2, r5
 800a87e:	d41e      	bmi.n	800a8be <_malloc_r+0xc6>
 800a880:	2a0b      	cmp	r2, #11
 800a882:	d916      	bls.n	800a8b2 <_malloc_r+0xba>
 800a884:	1961      	adds	r1, r4, r5
 800a886:	42a3      	cmp	r3, r4
 800a888:	6025      	str	r5, [r4, #0]
 800a88a:	bf18      	it	ne
 800a88c:	6059      	strne	r1, [r3, #4]
 800a88e:	6863      	ldr	r3, [r4, #4]
 800a890:	bf08      	it	eq
 800a892:	6031      	streq	r1, [r6, #0]
 800a894:	5162      	str	r2, [r4, r5]
 800a896:	604b      	str	r3, [r1, #4]
 800a898:	4638      	mov	r0, r7
 800a89a:	f104 060b 	add.w	r6, r4, #11
 800a89e:	f000 f835 	bl	800a90c <__malloc_unlock>
 800a8a2:	f026 0607 	bic.w	r6, r6, #7
 800a8a6:	1d23      	adds	r3, r4, #4
 800a8a8:	1af2      	subs	r2, r6, r3
 800a8aa:	d0b6      	beq.n	800a81a <_malloc_r+0x22>
 800a8ac:	1b9b      	subs	r3, r3, r6
 800a8ae:	50a3      	str	r3, [r4, r2]
 800a8b0:	e7b3      	b.n	800a81a <_malloc_r+0x22>
 800a8b2:	6862      	ldr	r2, [r4, #4]
 800a8b4:	42a3      	cmp	r3, r4
 800a8b6:	bf0c      	ite	eq
 800a8b8:	6032      	streq	r2, [r6, #0]
 800a8ba:	605a      	strne	r2, [r3, #4]
 800a8bc:	e7ec      	b.n	800a898 <_malloc_r+0xa0>
 800a8be:	4623      	mov	r3, r4
 800a8c0:	6864      	ldr	r4, [r4, #4]
 800a8c2:	e7b2      	b.n	800a82a <_malloc_r+0x32>
 800a8c4:	4634      	mov	r4, r6
 800a8c6:	6876      	ldr	r6, [r6, #4]
 800a8c8:	e7b9      	b.n	800a83e <_malloc_r+0x46>
 800a8ca:	230c      	movs	r3, #12
 800a8cc:	603b      	str	r3, [r7, #0]
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	f000 f81c 	bl	800a90c <__malloc_unlock>
 800a8d4:	e7a1      	b.n	800a81a <_malloc_r+0x22>
 800a8d6:	6025      	str	r5, [r4, #0]
 800a8d8:	e7de      	b.n	800a898 <_malloc_r+0xa0>
 800a8da:	bf00      	nop
 800a8dc:	24000850 	.word	0x24000850

0800a8e0 <_sbrk_r>:
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	4d06      	ldr	r5, [pc, #24]	; (800a8fc <_sbrk_r+0x1c>)
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	4608      	mov	r0, r1
 800a8ea:	602b      	str	r3, [r5, #0]
 800a8ec:	f7f6 fdec 	bl	80014c8 <_sbrk>
 800a8f0:	1c43      	adds	r3, r0, #1
 800a8f2:	d102      	bne.n	800a8fa <_sbrk_r+0x1a>
 800a8f4:	682b      	ldr	r3, [r5, #0]
 800a8f6:	b103      	cbz	r3, 800a8fa <_sbrk_r+0x1a>
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	24000858 	.word	0x24000858

0800a900 <__malloc_lock>:
 800a900:	4801      	ldr	r0, [pc, #4]	; (800a908 <__malloc_lock+0x8>)
 800a902:	f000 b809 	b.w	800a918 <__retarget_lock_acquire_recursive>
 800a906:	bf00      	nop
 800a908:	2400085c 	.word	0x2400085c

0800a90c <__malloc_unlock>:
 800a90c:	4801      	ldr	r0, [pc, #4]	; (800a914 <__malloc_unlock+0x8>)
 800a90e:	f000 b804 	b.w	800a91a <__retarget_lock_release_recursive>
 800a912:	bf00      	nop
 800a914:	2400085c 	.word	0x2400085c

0800a918 <__retarget_lock_acquire_recursive>:
 800a918:	4770      	bx	lr

0800a91a <__retarget_lock_release_recursive>:
 800a91a:	4770      	bx	lr

0800a91c <_init>:
 800a91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91e:	bf00      	nop
 800a920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a922:	bc08      	pop	{r3}
 800a924:	469e      	mov	lr, r3
 800a926:	4770      	bx	lr

0800a928 <_fini>:
 800a928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a92a:	bf00      	nop
 800a92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a92e:	bc08      	pop	{r3}
 800a930:	469e      	mov	lr, r3
 800a932:	4770      	bx	lr
